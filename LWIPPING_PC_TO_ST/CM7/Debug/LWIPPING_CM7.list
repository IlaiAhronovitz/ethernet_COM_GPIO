
LWIPPING_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .lwip_sec     00000200  30040000  08000000  00020000  2**2
                  ALLOC
  1 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00012f1c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002e34  080131bc  080131bc  000231bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08015ff0  08015ff0  00030094  2**0
                  CONTENTS
  5 .ARM          00000008  08015ff0  08015ff0  00025ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08015ff8  08015ff8  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08015ff8  08015ff8  00025ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08015ffc  08015ffc  00025ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000094  24000000  08016000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00008134  24000094  08016094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  240081c8  08016094  000381c8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a30a  00000000  00000000  000300c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ec1  00000000  00000000  0005a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b88  00000000  00000000  00060290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001aa8  00000000  00000000  00061e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00046cf7  00000000  00000000  000638c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ee58  00000000  00000000  000aa5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00192bd1  00000000  00000000  000d940f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0026bfe0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007adc  00000000  00000000  0026c030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080131a4 	.word	0x080131a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	080131a4 	.word	0x080131a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007b6:	f000 fa07 	bl	8000bc8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007ba:	4b51      	ldr	r3, [pc, #324]	; (8000900 <main+0x150>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d11b      	bne.n	80007fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007c6:	f3bf 8f4f 	dsb	sy
}
 80007ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007cc:	f3bf 8f6f 	isb	sy
}
 80007d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007d2:	4b4b      	ldr	r3, [pc, #300]	; (8000900 <main+0x150>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007da:	f3bf 8f4f 	dsb	sy
}
 80007de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e0:	f3bf 8f6f 	isb	sy
}
 80007e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007e6:	4b46      	ldr	r3, [pc, #280]	; (8000900 <main+0x150>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a45      	ldr	r2, [pc, #276]	; (8000900 <main+0x150>)
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007f2:	f3bf 8f4f 	dsb	sy
}
 80007f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f8:	f3bf 8f6f 	isb	sy
}
 80007fc:	e000      	b.n	8000800 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000800:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <main+0x150>)
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000808:	2b00      	cmp	r3, #0
 800080a:	d138      	bne.n	800087e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800080c:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <main+0x150>)
 800080e:	2200      	movs	r2, #0
 8000810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000814:	f3bf 8f4f 	dsb	sy
}
 8000818:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800081a:	4b39      	ldr	r3, [pc, #228]	; (8000900 <main+0x150>)
 800081c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000820:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	0b5b      	lsrs	r3, r3, #13
 8000826:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800082a:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	08db      	lsrs	r3, r3, #3
 8000830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000834:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	015a      	lsls	r2, r3, #5
 800083a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800083e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000840:	683a      	ldr	r2, [r7, #0]
 8000842:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000844:	492e      	ldr	r1, [pc, #184]	; (8000900 <main+0x150>)
 8000846:	4313      	orrs	r3, r2
 8000848:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	1e5a      	subs	r2, r3, #1
 8000850:	603a      	str	r2, [r7, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1ef      	bne.n	8000836 <main+0x86>
    } while(sets-- != 0U);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	1e5a      	subs	r2, r3, #1
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1e5      	bne.n	800082c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000860:	f3bf 8f4f 	dsb	sy
}
 8000864:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <main+0x150>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a25      	ldr	r2, [pc, #148]	; (8000900 <main+0x150>)
 800086c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000870:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000872:	f3bf 8f4f 	dsb	sy
}
 8000876:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000878:	f3bf 8f6f 	isb	sy
}
 800087c:	e000      	b.n	8000880 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800087e:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 fd76 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f83e 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f000 f938 	bl	8000afc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800088c:	f000 f8b8 	bl	8000a00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000890:	f000 f902 	bl	8000a98 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000894:	f007 f8b6 	bl	8007a04 <MX_LWIP_Init>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <main+0x150>)
 800089a:	2200      	movs	r2, #0
 800089c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008a0:	f3bf 8f4f 	dsb	sy
}
 80008a4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <main+0x150>)
 80008a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008ac:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	0b5b      	lsrs	r3, r3, #13
 80008b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008b6:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	08db      	lsrs	r3, r3, #3
 80008bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008c0:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	015a      	lsls	r2, r3, #5
 80008c6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008ca:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80008d0:	490b      	ldr	r1, [pc, #44]	; (8000900 <main+0x150>)
 80008d2:	4313      	orrs	r3, r2
 80008d4:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	1e5a      	subs	r2, r3, #1
 80008dc:	60fa      	str	r2, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d1ef      	bne.n	80008c2 <main+0x112>
    } while(sets-- != 0U);
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	613a      	str	r2, [r7, #16]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1e5      	bne.n	80008b8 <main+0x108>
  __ASM volatile ("dsb 0xF":::"memory");
 80008ec:	f3bf 8f4f 	dsb	sy
}
 80008f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
}
 80008f6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80008f8:	bf00      	nop
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80008fa:	f007 f9cf 	bl	8007c9c <MX_LWIP_Process>
 80008fe:	e7fc      	b.n	80008fa <main+0x14a>
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09c      	sub	sp, #112	; 0x70
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	224c      	movs	r2, #76	; 0x4c
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f011 fbee 	bl	80120f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2220      	movs	r2, #32
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f011 fbe8 	bl	80120f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000924:	2004      	movs	r0, #4
 8000926:	f002 fe11 	bl	800354c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b32      	ldr	r3, [pc, #200]	; (80009f8 <SystemClock_Config+0xf4>)
 8000930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000932:	4a31      	ldr	r2, [pc, #196]	; (80009f8 <SystemClock_Config+0xf4>)
 8000934:	f023 0301 	bic.w	r3, r3, #1
 8000938:	62d3      	str	r3, [r2, #44]	; 0x2c
 800093a:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <SystemClock_Config+0xf4>)
 800093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <SystemClock_Config+0xf8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800094c:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <SystemClock_Config+0xf8>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <SystemClock_Config+0xf8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000960:	bf00      	nop
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <SystemClock_Config+0xf8>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800096a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800096e:	d1f8      	bne.n	8000962 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000970:	2301      	movs	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000974:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097e:	2302      	movs	r3, #2
 8000980:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000982:	2301      	movs	r3, #1
 8000984:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000986:	2312      	movs	r3, #18
 8000988:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800098e:	2302      	movs	r3, #2
 8000990:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000996:	230c      	movs	r3, #12
 8000998:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800099a:	2302      	movs	r3, #2
 800099c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800099e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fe39 	bl	8003620 <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009b4:	f000 f948 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	233f      	movs	r3, #63	; 0x3f
 80009ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	2303      	movs	r3, #3
 80009be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009cc:	2340      	movs	r3, #64	; 0x40
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 fa78 	bl	8003ed4 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009ea:	f000 f92d 	bl	8000c48 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3770      	adds	r7, #112	; 0x70
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58000400 	.word	0x58000400
 80009fc:	58024800 	.word	0x58024800

08000a00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_USART3_UART_Init+0x94>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a4a:	f005 fbfb 	bl	8006244 <HAL_UART_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a54:	f000 f8f8 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a5c:	f006 fbfd 	bl	800725a <HAL_UARTEx_SetTxFifoThreshold>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a66:	f000 f8ef 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a6e:	f006 fc32 	bl	80072d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a78:	f000 f8e6 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a7e:	f006 fbb3 	bl	80071e8 <HAL_UARTEx_DisableFifoMode>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a88:	f000 f8de 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	240000b0 	.word	0x240000b0
 8000a94:	40004800 	.word	0x40004800

08000a98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a9e:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa4:	2209      	movs	r2, #9
 8000aa6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae0:	f002 fbec 	bl	80032bc <HAL_PCD_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000aea:	f000 f8ad 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	24000144 	.word	0x24000144
 8000af8:	40080000 	.word	0x40080000

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a2e      	ldr	r2, [pc, #184]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a27      	ldr	r2, [pc, #156]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a1f      	ldr	r2, [pc, #124]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb6:	bf00      	nop
 8000bb8:	371c      	adds	r7, #28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	58024400 	.word	0x58024400

08000bc8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bda:	f000 fd83 	bl	80016e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bde:	2301      	movs	r3, #1
 8000be0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MPU_Config+0x78>)
 8000be8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000bea:	2307      	movs	r3, #7
 8000bec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fda1 	bl	8001754 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MPU_Config+0x7c>)
 8000c18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c1a:	230d      	movs	r3, #13
 8000c1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c22:	2301      	movs	r3, #1
 8000c24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fd91 	bl	8001754 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c32:	2004      	movs	r0, #4
 8000c34:	f000 fd6e 	bl	8001714 <HAL_MPU_Enable>

}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	30040000 	.word	0x30040000
 8000c44:	30044000 	.word	0x30044000

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_MspInit+0x30>)
 8000c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x30>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x30>)
 8000c6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	58024400 	.word	0x58024400

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0ba      	sub	sp, #232	; 0xe8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	22c0      	movs	r2, #192	; 0xc0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f011 fa23 	bl	80120f4 <memset>
  if(huart->Instance==USART3)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <HAL_UART_MspInit+0xc8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d146      	bne.n	8000d46 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb8:	f04f 0202 	mov.w	r2, #2
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fc8c 	bl	80045ec <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cda:	f7ff ffb5 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <HAL_UART_MspInit+0xcc>)
 8000ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <HAL_UART_MspInit+0xcc>)
 8000ce6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_UART_MspInit+0xcc>)
 8000cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_UART_MspInit+0xcc>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <HAL_UART_MspInit+0xcc>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_UART_MspInit+0xcc>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d34:	2307      	movs	r3, #7
 8000d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_UART_MspInit+0xd0>)
 8000d42:	f002 f90b 	bl	8002f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	37e8      	adds	r7, #232	; 0xe8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40004800 	.word	0x40004800
 8000d54:	58024400 	.word	0x58024400
 8000d58:	58020c00 	.word	0x58020c00

08000d5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0ba      	sub	sp, #232	; 0xe8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	22c0      	movs	r2, #192	; 0xc0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f011 f9b9 	bl	80120f4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a38      	ldr	r2, [pc, #224]	; (8000e68 <HAL_PCD_MspInit+0x10c>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d169      	bne.n	8000e60 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000da4:	2303      	movs	r3, #3
 8000da6:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000dac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000db0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000db2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000db6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000db8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 fc11 	bl	80045ec <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000dd0:	f7ff ff3a 	bl	8000c48 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000dd4:	f002 fc14 	bl	8003600 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <HAL_PCD_MspInit+0x110>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <HAL_PCD_MspInit+0x110>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <HAL_PCD_MspInit+0x110>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000df6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e10:	230a      	movs	r3, #10
 8000e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4814      	ldr	r0, [pc, #80]	; (8000e70 <HAL_PCD_MspInit+0x114>)
 8000e1e:	f002 f89d 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <HAL_PCD_MspInit+0x114>)
 8000e3e:	f002 f88d 	bl	8002f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_PCD_MspInit+0x110>)
 8000e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e48:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_PCD_MspInit+0x110>)
 8000e4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_PCD_MspInit+0x110>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	37e8      	adds	r7, #232	; 0xe8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40080000 	.word	0x40080000
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020000 	.word	0x58020000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 fac8 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return 1;
 8000ecc:	2301      	movs	r3, #1
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_kill>:

int _kill(int pid, int sig)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <_kill+0x20>)
 8000ee4:	2216      	movs	r2, #22
 8000ee6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	240081b8 	.word	0x240081b8

08000efc <_exit>:

void _exit (int status)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ffe5 	bl	8000ed8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f0e:	e7fe      	b.n	8000f0e <_exit+0x12>

08000f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e00a      	b.n	8000f38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f22:	f3af 8000 	nop.w
 8000f26:	4601      	mov	r1, r0
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	b2ca      	uxtb	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf0      	blt.n	8000f22 <_read+0x12>
  }

  return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e009      	b.n	8000f70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	60ba      	str	r2, [r7, #8]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf1      	blt.n	8000f5c <_write+0x12>
  }
  return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_close>:

int _close(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000faa:	605a      	str	r2, [r3, #4]
  return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_isatty>:

int _isatty(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d205      	bcs.n	8001028 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <_sbrk+0x6c>)
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a06      	ldr	r2, [pc, #24]	; (8001050 <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	24080000 	.word	0x24080000
 800104c:	00000400 	.word	0x00000400
 8001050:	24000650 	.word	0x24000650
 8001054:	240081c8 	.word	0x240081c8
 8001058:	240081b8 	.word	0x240081b8

0800105c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001094 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001060:	f7ff fb10 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	; (800109c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	; (80010a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108a:	f010 fff1 	bl	8012070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108e:	f7ff fb8f 	bl	80007b0 <main>
  bx  lr
 8001092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001094:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001098:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800109c:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 80010a0:	08016000 	.word	0x08016000
  ldr r2, =_sbss
 80010a4:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 80010a8:	240081c8 	.word	0x240081c8

080010ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC3_IRQHandler>

080010ae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <LAN8742_RegisterBusIO+0x28>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d007      	beq.n	80010d6 <LAN8742_RegisterBusIO+0x28>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <LAN8742_RegisterBusIO+0x28>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e014      	b.n	8001106 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d17c      	bne.n	800122c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2220      	movs	r2, #32
 8001144:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e01c      	b.n	8001186 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	f107 0208 	add.w	r2, r7, #8
 8001154:	2112      	movs	r1, #18
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	4798      	blx	r3
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	da03      	bge.n	8001168 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001160:	f06f 0304 	mvn.w	r3, #4
 8001164:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001166:	e00b      	b.n	8001180 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f003 031f 	and.w	r3, r3, #31
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	d105      	bne.n	8001180 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
         break;
 800117e:	e005      	b.n	800118c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b1f      	cmp	r3, #31
 800118a:	d9df      	bls.n	800114c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b1f      	cmp	r3, #31
 8001192:	d902      	bls.n	800119a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001194:	f06f 0302 	mvn.w	r3, #2
 8001198:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d145      	bne.n	800122c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6810      	ldr	r0, [r2, #0]
 80011a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ac:	2100      	movs	r1, #0
 80011ae:	4798      	blx	r3
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db37      	blt.n	8001226 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6810      	ldr	r0, [r2, #0]
 80011be:	f107 0208 	add.w	r2, r7, #8
 80011c2:	2100      	movs	r1, #0
 80011c4:	4798      	blx	r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db28      	blt.n	800121e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4798      	blx	r3
 80011d2:	4603      	mov	r3, r0
 80011d4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011d6:	e01c      	b.n	8001212 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4798      	blx	r3
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011ea:	d80e      	bhi.n	800120a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6810      	ldr	r0, [r2, #0]
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	2100      	movs	r1, #0
 80011fa:	4798      	blx	r3
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da07      	bge.n	8001212 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001202:	f06f 0304 	mvn.w	r3, #4
 8001206:	613b      	str	r3, [r7, #16]
                 break;
 8001208:	e010      	b.n	800122c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800120a:	f06f 0301 	mvn.w	r3, #1
 800120e:	613b      	str	r3, [r7, #16]
               break;
 8001210:	e00c      	b.n	800122c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1dd      	bne.n	80011d8 <LAN8742_Init+0xc6>
 800121c:	e006      	b.n	800122c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800121e:	f06f 0304 	mvn.w	r3, #4
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	e002      	b.n	800122c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001226:	f06f 0303 	mvn.w	r3, #3
 800122a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d112      	bne.n	8001258 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4798      	blx	r3
 8001238:	4603      	mov	r3, r0
 800123a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800123c:	bf00      	nop
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4798      	blx	r3
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001250:	d9f5      	bls.n	800123e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001258:	693b      	ldr	r3, [r7, #16]
 }
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6810      	ldr	r0, [r2, #0]
 8001276:	f107 020c 	add.w	r2, r7, #12
 800127a:	2101      	movs	r1, #1
 800127c:	4798      	blx	r3
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	da02      	bge.n	800128a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001284:	f06f 0304 	mvn.w	r3, #4
 8001288:	e06e      	b.n	8001368 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6810      	ldr	r0, [r2, #0]
 8001292:	f107 020c 	add.w	r2, r7, #12
 8001296:	2101      	movs	r1, #1
 8001298:	4798      	blx	r3
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	da02      	bge.n	80012a6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012a0:	f06f 0304 	mvn.w	r3, #4
 80012a4:	e060      	b.n	8001368 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80012b0:	2301      	movs	r3, #1
 80012b2:	e059      	b.n	8001368 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6810      	ldr	r0, [r2, #0]
 80012bc:	f107 020c 	add.w	r2, r7, #12
 80012c0:	2100      	movs	r1, #0
 80012c2:	4798      	blx	r3
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	da02      	bge.n	80012d0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012ca:	f06f 0304 	mvn.w	r3, #4
 80012ce:	e04b      	b.n	8001368 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d11b      	bne.n	8001312 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <LAN8742_GetLinkState+0x90>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012ee:	2302      	movs	r3, #2
 80012f0:	e03a      	b.n	8001368 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e033      	b.n	8001368 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800130a:	2304      	movs	r3, #4
 800130c:	e02c      	b.n	8001368 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800130e:	2305      	movs	r3, #5
 8001310:	e02a      	b.n	8001368 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6810      	ldr	r0, [r2, #0]
 800131a:	f107 020c 	add.w	r2, r7, #12
 800131e:	211f      	movs	r1, #31
 8001320:	4798      	blx	r3
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	da02      	bge.n	800132e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001328:	f06f 0304 	mvn.w	r3, #4
 800132c:	e01c      	b.n	8001368 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001338:	2306      	movs	r3, #6
 800133a:	e015      	b.n	8001368 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 031c 	and.w	r3, r3, #28
 8001342:	2b18      	cmp	r3, #24
 8001344:	d101      	bne.n	800134a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001346:	2302      	movs	r3, #2
 8001348:	e00e      	b.n	8001368 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f003 031c 	and.w	r3, r3, #28
 8001350:	2b08      	cmp	r3, #8
 8001352:	d101      	bne.n	8001358 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001354:	2303      	movs	r3, #3
 8001356:	e007      	b.n	8001368 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 031c 	and.w	r3, r3, #28
 800135e:	2b14      	cmp	r3, #20
 8001360:	d101      	bne.n	8001366 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001362:	2304      	movs	r3, #4
 8001364:	e000      	b.n	8001368 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001366:	2305      	movs	r3, #5
    }				
  }
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001376:	2003      	movs	r0, #3
 8001378:	f000 f982 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800137c:	f002 ff60 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 8001380:	4602      	mov	r2, r0
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_Init+0x68>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	4913      	ldr	r1, [pc, #76]	; (80013dc <HAL_Init+0x6c>)
 800138e:	5ccb      	ldrb	r3, [r1, r3]
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	fa22 f303 	lsr.w	r3, r2, r3
 8001398:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_Init+0x68>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_Init+0x6c>)
 80013a4:	5cd3      	ldrb	r3, [r2, r3]
 80013a6:	f003 031f 	and.w	r3, r3, #31
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_Init+0x70>)
 80013b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_Init+0x74>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f814 	bl	80013e8 <HAL_InitTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e002      	b.n	80013d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ca:	f7ff fc43 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	58024400 	.word	0x58024400
 80013dc:	08015d80 	.word	0x08015d80
 80013e0:	24000004 	.word	0x24000004
 80013e4:	24000000 	.word	0x24000000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_InitTick+0x60>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e021      	b.n	8001440 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_InitTick+0x64>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_InitTick+0x60>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f959 	bl	80016ca <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f931 	bl	8001696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x68>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2400000c 	.word	0x2400000c
 800144c:	24000000 	.word	0x24000000
 8001450:	24000008 	.word	0x24000008

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	2400000c 	.word	0x2400000c
 8001478:	24000654 	.word	0x24000654

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	24000654 	.word	0x24000654

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2400000c 	.word	0x2400000c

080014dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_GetREVID+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0c1b      	lsrs	r3, r3, #16
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	5c001000 	.word	0x5c001000

080014f4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001504:	4904      	ldr	r1, [pc, #16]	; (8001518 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	58000400 	.word	0x58000400

0800151c <__NVIC_SetPriorityGrouping>:
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	4313      	orrs	r3, r2
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	05fa0000 	.word	0x05fa0000

08001564 <__NVIC_GetPriorityGrouping>:
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_SetPriority>:
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800164c:	d301      	bcc.n	8001652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <SysTick_Config+0x40>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165a:	210f      	movs	r1, #15
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f7ff ff8e 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <SysTick_Config+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <SysTick_Config+0x40>)
 800166c:	2207      	movs	r2, #7
 800166e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff47 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff5e 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff90 	bl	80015d4 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5f 	bl	8001580 <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffb2 	bl	800163c <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016e8:	f3bf 8f5f 	dmb	sy
}
 80016ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <HAL_MPU_Disable+0x28>)
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_MPU_Disable+0x28>)
 80016f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_MPU_Disable+0x2c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00
 8001710:	e000ed90 	.word	0xe000ed90

08001714 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800171c:	4a0b      	ldr	r2, [pc, #44]	; (800174c <HAL_MPU_Enable+0x38>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_MPU_Enable+0x3c>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_MPU_Enable+0x3c>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001732:	f3bf 8f4f 	dsb	sy
}
 8001736:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001738:	f3bf 8f6f 	isb	sy
}
 800173c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed90 	.word	0xe000ed90
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	785a      	ldrb	r2, [r3, #1]
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_MPU_ConfigRegion+0x84>)
 8001762:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d029      	beq.n	80017c0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800176c:	4a1a      	ldr	r2, [pc, #104]	; (80017d8 <HAL_MPU_ConfigRegion+0x84>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7b1b      	ldrb	r3, [r3, #12]
 8001778:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7adb      	ldrb	r3, [r3, #11]
 800177e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001780:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7a9b      	ldrb	r3, [r3, #10]
 8001786:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001788:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7b5b      	ldrb	r3, [r3, #13]
 800178e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001790:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7b9b      	ldrb	r3, [r3, #14]
 8001796:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001798:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7bdb      	ldrb	r3, [r3, #15]
 800179e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7a5b      	ldrb	r3, [r3, #9]
 80017a6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7a1b      	ldrb	r3, [r3, #8]
 80017ae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017b0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017ba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017bc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80017be:	e005      	b.n	80017cc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_MPU_ConfigRegion+0x84>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_MPU_ConfigRegion+0x84>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed90 	.word	0xe000ed90

080017dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0cf      	b.n	800198e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d106      	bne.n	8001806 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2223      	movs	r2, #35	; 0x23
 80017fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f006 fc05 	bl	8008010 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b64      	ldr	r3, [pc, #400]	; (8001998 <HAL_ETH_Init+0x1bc>)
 8001808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800180c:	4a62      	ldr	r2, [pc, #392]	; (8001998 <HAL_ETH_Init+0x1bc>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001816:	4b60      	ldr	r3, [pc, #384]	; (8001998 <HAL_ETH_Init+0x1bc>)
 8001818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7a1b      	ldrb	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d103      	bne.n	8001834 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff fe61 	bl	80014f4 <HAL_SYSCFG_ETHInterfaceSelect>
 8001832:	e003      	b.n	800183c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001834:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001838:	f7ff fe5c 	bl	80014f4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800183c:	4b57      	ldr	r3, [pc, #348]	; (800199c <HAL_ETH_Init+0x1c0>)
 800183e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001856:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001858:	f7ff fe10 	bl	800147c <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800185e:	e011      	b.n	8001884 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001860:	f7ff fe0c 	bl	800147c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800186e:	d909      	bls.n	8001884 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2204      	movs	r2, #4
 8001874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	22e0      	movs	r2, #224	; 0xe0
 800187c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e084      	b.n	800198e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e4      	bne.n	8001860 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fd94 	bl	80023c4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800189c:	f002 fe4a 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a3f      	ldr	r2, [pc, #252]	; (80019a0 <HAL_ETH_Init+0x1c4>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	0c9a      	lsrs	r2, r3, #18
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3a01      	subs	r2, #1
 80018b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 ff7f 	bl	80027b8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80018c6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018d6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	22e0      	movs	r2, #224	; 0xe0
 80018f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e049      	b.n	800198e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001902:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001906:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_ETH_Init+0x1c8>)
 8001908:	4013      	ands	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6952      	ldr	r2, [r2, #20]
 800190e:	0051      	lsls	r1, r2, #1
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	430b      	orrs	r3, r1
 8001916:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800191a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 ffe7 	bl	80028f2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f001 f82d 	bl	8002984 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	3305      	adds	r3, #5
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	021a      	lsls	r2, r3, #8
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	3304      	adds	r3, #4
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	3303      	adds	r3, #3
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	061a      	lsls	r2, r3, #24
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	3302      	adds	r3, #2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	3301      	adds	r3, #1
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001968:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001976:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001978:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2210      	movs	r2, #16
 8001988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	58024400 	.word	0x58024400
 800199c:	58000400 	.word	0x58000400
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	ffff8001 	.word	0xffff8001

080019a8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d153      	bne.n	8001a62 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2223      	movs	r2, #35	; 0x23
 80019be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2204      	movs	r2, #4
 80019c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f9f6 	bl	8001dba <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0202 	orr.w	r2, r2, #2
 80019dc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a1a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a36:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a42:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001a4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a52:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2223      	movs	r2, #35	; 0x23
 8001a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
  }
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a7a:	2b23      	cmp	r3, #35	; 0x23
 8001a7c:	d13f      	bne.n	8001afe <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2223      	movs	r2, #35	; 0x23
 8001a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a9e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0202 	bic.w	r2, r2, #2
 8001af0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2210      	movs	r2, #16
 8001af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
  }
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e07f      	b.n	8001c32 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b38:	2b23      	cmp	r3, #35	; 0x23
 8001b3a:	d179      	bne.n	8001c30 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 ff7d 	bl	8002a40 <ETH_Prepare_Tx_Descriptors>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d009      	beq.n	8001b60 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	f043 0202 	orr.w	r2, r3, #2
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e068      	b.n	8001c32 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b60:	f3bf 8f4f 	dsb	sy
}
 8001b64:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3206      	adds	r2, #6
 8001b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b72:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d904      	bls.n	8001b90 <HAL_ETH_Transmit+0x84>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	1f1a      	subs	r2, r3, #4
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3106      	adds	r1, #6
 8001b9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ba4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8001ba8:	f7ff fc68 	bl	800147c <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001bae:	e039      	b.n	8001c24 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d012      	beq.n	8001bea <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bca:	f043 0208 	orr.w	r2, r3, #8
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e023      	b.n	8001c32 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d018      	beq.n	8001c24 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bf2:	f7ff fc43 	bl	800147c <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d302      	bcc.n	8001c08 <HAL_ETH_Transmit+0xfc>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10d      	bne.n	8001c24 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0e:	f043 0204 	orr.w	r2, r3, #4
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001c1e:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e006      	b.n	8001c32 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	dbc1      	blt.n	8001bb0 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e000      	b.n	8001c32 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
  }
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b088      	sub	sp, #32
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0a5      	b.n	8001db2 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c6c:	2b23      	cmp	r3, #35	; 0x23
 8001c6e:	d001      	beq.n	8001c74 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e09e      	b.n	8001db2 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	3212      	adds	r2, #18
 8001c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c84:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c8a:	f1c3 0304 	rsb	r3, r3, #4
 8001c8e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c90:	e067      	b.n	8001d62 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d103      	bne.n	8001cc2 <HAL_ETH_ReadData+0x88>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03d      	beq.n	8001d3e <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00d      	beq.n	8001d08 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d18:	461a      	mov	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f006 fb4f 	bl	80083c0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	441a      	add	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d902      	bls.n	8001d50 <HAL_ETH_ReadData+0x116>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b04      	subs	r3, #4
 8001d4e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	3212      	adds	r2, #18
 8001d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db06      	blt.n	8001d78 <HAL_ETH_ReadData+0x13e>
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d202      	bcs.n	8001d78 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d08c      	beq.n	8001c92 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	441a      	add	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f814 	bl	8001dba <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d108      	bne.n	8001db0 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e000      	b.n	8001db2 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3720      	adds	r7, #32
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b088      	sub	sp, #32
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dce:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	3212      	adds	r2, #18
 8001dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dda:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001de0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001de2:	e03b      	b.n	8001e5c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d112      	bne.n	8001e12 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	4618      	mov	r0, r3
 8001df2:	f006 fab5 	bl	8008360 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	74fb      	strb	r3, [r7, #19]
 8001e00:	e007      	b.n	8001e12 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	461a      	mov	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001e12:	7cfb      	ldrb	r3, [r7, #19]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d021      	beq.n	8001e5c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001e18:	f3bf 8f5f 	dmb	sy
}
 8001e1c:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	e003      	b.n	8001e38 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001e36:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d902      	bls.n	8001e4a <ETH_UpdateDescriptor+0x90>
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	3b04      	subs	r3, #4
 8001e48:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	3212      	adds	r2, #18
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <ETH_UpdateDescriptor+0xae>
 8001e62:	7cfb      	ldrb	r3, [r7, #19]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1bd      	bne.n	8001de4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d00d      	beq.n	8001e8e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e03e      	b.n	8001f36 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ec0:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	055b      	lsls	r3, r3, #21
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f043 030c 	orr.w	r3, r3, #12
 8001ee4:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001ef8:	f7ff fac0 	bl	800147c <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001efe:	e009      	b.n	8001f14 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f00:	f7ff fabc 	bl	800147c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f0e:	d901      	bls.n	8001f14 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e010      	b.n	8001f36 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ed      	bne.n	8001f00 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e03c      	b.n	8001fdc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f6a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	055b      	lsls	r3, r3, #21
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f023 030c 	bic.w	r3, r3, #12
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001fa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001fae:	f7ff fa65 	bl	800147c <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fb4:	e009      	b.n	8001fca <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001fb6:	f7ff fa61 	bl	800147c <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fc4:	d901      	bls.n	8001fca <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e008      	b.n	8001fdc <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ed      	bne.n	8001fb6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40028000 	.word	0x40028000

08001fe8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e1c3      	b.n	8002384 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 020c 	and.w	r2, r3, #12
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800208a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf14      	ite	ne
 800214a:	2301      	movne	r3, #1
 800214c:	2300      	moveq	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf14      	ite	ne
 80021f8:	2301      	movne	r3, #1
 80021fa:	2300      	moveq	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800220c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	0e5b      	lsrs	r3, r3, #25
 8002246:	f003 021f 	and.w	r2, r3, #31
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 020f 	and.w	r2, r3, #15
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	2b00      	cmp	r3, #0
 80022a0:	bf0c      	ite	eq
 80022a2:	2301      	moveq	r3, #1
 80022a4:	2300      	movne	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002310:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002320:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	bf14      	ite	ne
 8002356:	2301      	movne	r3, #1
 8002358:	2300      	moveq	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e00b      	b.n	80023bc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d105      	bne.n	80023ba <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80023ae:	6839      	ldr	r1, [r7, #0]
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f85f 	bl	8002474 <ETH_SetMACConfig>

    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
  }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80023de:	f002 f8a9 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 80023e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4a1e      	ldr	r2, [pc, #120]	; (8002460 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d908      	bls.n	80023fe <HAL_ETH_SetMDIOClockRange+0x3a>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d804      	bhi.n	80023fe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	e027      	b.n	800244e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	4a18      	ldr	r2, [pc, #96]	; (8002464 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d908      	bls.n	8002418 <HAL_ETH_SetMDIOClockRange+0x54>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	4a17      	ldr	r2, [pc, #92]	; (8002468 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d204      	bcs.n	8002418 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	e01a      	b.n	800244e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4a13      	ldr	r2, [pc, #76]	; (8002468 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d303      	bcc.n	8002428 <HAL_ETH_SetMDIOClockRange+0x64>
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4a12      	ldr	r2, [pc, #72]	; (800246c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d911      	bls.n	800244c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d908      	bls.n	8002442 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d804      	bhi.n	8002442 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e005      	b.n	800244e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e000      	b.n	800244e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800244c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	01312cff 	.word	0x01312cff
 8002464:	02160ebf 	.word	0x02160ebf
 8002468:	03938700 	.word	0x03938700
 800246c:	05f5e0ff 	.word	0x05f5e0ff
 8002470:	08f0d17f 	.word	0x08f0d17f

08002474 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002486:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	791b      	ldrb	r3, [r3, #4]
 800248c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800248e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	7b1b      	ldrb	r3, [r3, #12]
 8002494:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002496:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	7b5b      	ldrb	r3, [r3, #13]
 800249c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800249e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	7b9b      	ldrb	r3, [r3, #14]
 80024a4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	7bdb      	ldrb	r3, [r3, #15]
 80024ac:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	7c12      	ldrb	r2, [r2, #16]
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	d102      	bne.n	80024be <ETH_SetMACConfig+0x4a>
 80024b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024bc:	e000      	b.n	80024c0 <ETH_SetMACConfig+0x4c>
 80024be:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	7c52      	ldrb	r2, [r2, #17]
 80024c6:	2a00      	cmp	r2, #0
 80024c8:	d102      	bne.n	80024d0 <ETH_SetMACConfig+0x5c>
 80024ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ce:	e000      	b.n	80024d2 <ETH_SetMACConfig+0x5e>
 80024d0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	7c9b      	ldrb	r3, [r3, #18]
 80024d8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024da:	431a      	orrs	r2, r3
               macconf->Speed |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80024e0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80024e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	7f1b      	ldrb	r3, [r3, #28]
 80024ec:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80024ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	7f5b      	ldrb	r3, [r3, #29]
 80024f4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	7f92      	ldrb	r2, [r2, #30]
 80024fc:	2a00      	cmp	r2, #0
 80024fe:	d102      	bne.n	8002506 <ETH_SetMACConfig+0x92>
 8002500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002504:	e000      	b.n	8002508 <ETH_SetMACConfig+0x94>
 8002506:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002508:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	7fdb      	ldrb	r3, [r3, #31]
 800250e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002510:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002518:	2a00      	cmp	r2, #0
 800251a:	d102      	bne.n	8002522 <ETH_SetMACConfig+0xae>
 800251c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002520:	e000      	b.n	8002524 <ETH_SetMACConfig+0xb0>
 8002522:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002524:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800252a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002532:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002534:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b56      	ldr	r3, [pc, #344]	; (80026a0 <ETH_SetMACConfig+0x22c>)
 8002546:	4013      	ands	r3, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	430b      	orrs	r3, r1
 8002550:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800255e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002560:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002568:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800256a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002572:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002574:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800257c:	2a00      	cmp	r2, #0
 800257e:	d102      	bne.n	8002586 <ETH_SetMACConfig+0x112>
 8002580:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002584:	e000      	b.n	8002588 <ETH_SetMACConfig+0x114>
 8002586:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002588:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4b42      	ldr	r3, [pc, #264]	; (80026a4 <ETH_SetMACConfig+0x230>)
 800259a:	4013      	ands	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ac:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <ETH_SetMACConfig+0x234>)
 80025be:	4013      	ands	r3, r2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	68f9      	ldr	r1, [r7, #12]
 80025c6:	430b      	orrs	r3, r1
 80025c8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025d0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80025de:	2a00      	cmp	r2, #0
 80025e0:	d101      	bne.n	80025e6 <ETH_SetMACConfig+0x172>
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	e000      	b.n	80025e8 <ETH_SetMACConfig+0x174>
 80025e6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80025e8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025fa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80025fe:	4013      	ands	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	68f9      	ldr	r1, [r7, #12]
 8002606:	430b      	orrs	r3, r1
 8002608:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002610:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002618:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	f023 0103 	bic.w	r1, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	430a      	orrs	r2, r1
 8002632:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800263e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800265a:	2a00      	cmp	r2, #0
 800265c:	d101      	bne.n	8002662 <ETH_SetMACConfig+0x1ee>
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	e000      	b.n	8002664 <ETH_SetMACConfig+0x1f0>
 8002662:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002664:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800266c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800266e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002676:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002684:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	430a      	orrs	r2, r1
 8002690:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	00048083 	.word	0x00048083
 80026a4:	c0f88000 	.word	0xc0f88000
 80026a8:	fffffef0 	.word	0xfffffef0

080026ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <ETH_SetDMAConfig+0xf8>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	6811      	ldr	r1, [r2, #0]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026d2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026de:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	7b1b      	ldrb	r3, [r3, #12]
 80026e4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <ETH_SetDMAConfig+0xfc>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	68f9      	ldr	r1, [r7, #12]
 80026fe:	430b      	orrs	r3, r1
 8002700:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002704:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	7b5b      	ldrb	r3, [r3, #13]
 800270a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002720:	4b22      	ldr	r3, [pc, #136]	; (80027ac <ETH_SetDMAConfig+0x100>)
 8002722:	4013      	ands	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	68f9      	ldr	r1, [r7, #12]
 800272a:	430b      	orrs	r3, r1
 800272c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002730:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	7d1b      	ldrb	r3, [r3, #20]
 800273c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800273e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	7f5b      	ldrb	r3, [r3, #29]
 8002744:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002752:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <ETH_SetDMAConfig+0x104>)
 8002758:	4013      	ands	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	68f9      	ldr	r1, [r7, #12]
 8002760:	430b      	orrs	r3, r1
 8002762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002766:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	7f1b      	ldrb	r3, [r3, #28]
 800276e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002780:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <ETH_SetDMAConfig+0x108>)
 8002786:	4013      	ands	r3, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	430b      	orrs	r3, r1
 8002790:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002794:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	ffff87fd 	.word	0xffff87fd
 80027a8:	ffff2ffe 	.word	0xffff2ffe
 80027ac:	fffec000 	.word	0xfffec000
 80027b0:	ffc0efef 	.word	0xffc0efef
 80027b4:	7fc0ffff 	.word	0x7fc0ffff

080027b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b0a4      	sub	sp, #144	; 0x90
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027c6:	2300      	movs	r3, #0
 80027c8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002800:	2300      	movs	r3, #0
 8002802:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002810:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002814:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800281c:	2300      	movs	r3, #0
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002832:	2300      	movs	r3, #0
 8002834:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002836:	2300      	movs	r3, #0
 8002838:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800283a:	2300      	movs	r3, #0
 800283c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002850:	2320      	movs	r3, #32
 8002852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002856:	2301      	movs	r3, #1
 8002858:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002862:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002868:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800286c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002892:	2300      	movs	r3, #0
 8002894:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002896:	2301      	movs	r3, #1
 8002898:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800289c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fde6 	bl	8002474 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028ac:	2301      	movs	r3, #1
 80028ae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028d0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80028d8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	4619      	mov	r1, r3
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff fee1 	bl	80026ac <ETH_SetDMAConfig>
}
 80028ea:	bf00      	nop
 80028ec:	3790      	adds	r7, #144	; 0x90
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e01d      	b.n	800293c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68d9      	ldr	r1, [r3, #12]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2200      	movs	r2, #0
 800291c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	3206      	adds	r2, #6
 8002932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3301      	adds	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d9de      	bls.n	8002900 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002950:	461a      	mov	r2, r3
 8002952:	2303      	movs	r3, #3
 8002954:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002964:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002974:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e023      	b.n	80029da <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6919      	ldr	r1, [r3, #16]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2200      	movs	r2, #0
 80029ba:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2200      	movs	r2, #0
 80029c6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	3212      	adds	r2, #18
 80029d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3301      	adds	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d9d8      	bls.n	8002992 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a06:	461a      	mov	r2, r3
 8002a08:	2303      	movs	r3, #3
 8002a0a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a2e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b08d      	sub	sp, #52	; 0x34
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3318      	adds	r3, #24
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a82:	d007      	beq.n	8002a94 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	3304      	adds	r3, #4
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a94:	2302      	movs	r3, #2
 8002a96:	e259      	b.n	8002f4c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d044      	beq.n	8002b2e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	4b75      	ldr	r3, [pc, #468]	; (8002c80 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ad0:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d027      	beq.n	8002b2e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	431a      	orrs	r2, r3
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b1c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b2c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00e      	beq.n	8002b58 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	4b51      	ldr	r3, [pc, #324]	; (8002c84 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	6992      	ldr	r2, [r2, #24]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d036      	beq.n	8002bde <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b7c:	f3bf 8f5f 	dmb	sy
}
 8002b80:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	3301      	adds	r3, #1
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d902      	bls.n	8002ba0 <ETH_Prepare_Tx_Descriptors+0x160>
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	3b04      	subs	r3, #4
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba8:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	3301      	adds	r3, #1
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bbc:	d10f      	bne.n	8002bde <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002bc8:	f3bf 8f5f 	dmb	sy
}
 8002bcc:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e1b6      	b.n	8002f4c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	3301      	adds	r3, #1
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	6852      	ldr	r2, [r2, #4]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d012      	beq.n	8002c2e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	6852      	ldr	r2, [r2, #4]
 8002c24:	0412      	lsls	r2, r2, #16
 8002c26:	431a      	orrs	r2, r3
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e008      	b.n	8002c40 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	2200      	movs	r2, #0
 8002c32:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	6a3a      	ldr	r2, [r7, #32]
 8002c3e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d021      	beq.n	8002c90 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	04db      	lsls	r3, r3, #19
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	69d2      	ldr	r2, [r2, #28]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	e02e      	b.n	8002cde <ETH_Prepare_Tx_Descriptors+0x29e>
 8002c80:	ffff0000 	.word	0xffff0000
 8002c84:	ffffc000 	.word	0xffffc000
 8002c88:	c000ffff 	.word	0xc000ffff
 8002c8c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	6852      	ldr	r2, [r2, #4]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d14:	f3bf 8f5f 	dmb	sy
}
 8002d18:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80da 	beq.w	8002ee8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d46:	e0cf      	b.n	8002ee8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	3301      	adds	r3, #1
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d902      	bls.n	8002d66 <ETH_Prepare_Tx_Descriptors+0x326>
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	3b04      	subs	r3, #4
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6e:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d88:	d007      	beq.n	8002d9a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	3304      	adds	r3, #4
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d029      	beq.n	8002dee <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da6:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dac:	e019      	b.n	8002de2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002dae:	f3bf 8f5f 	dmb	sy
}
 8002db2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d902      	bls.n	8002dd2 <ETH_Prepare_Tx_Descriptors+0x392>
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dda:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	3301      	adds	r3, #1
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d3e1      	bcc.n	8002dae <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002dea:	2302      	movs	r3, #2
 8002dec:	e0ae      	b.n	8002f4c <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	3301      	adds	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	6852      	ldr	r2, [r2, #4]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d012      	beq.n	8002e44 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	6852      	ldr	r2, [r2, #4]
 8002e3a:	0412      	lsls	r2, r2, #16
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	e008      	b.n	8002e56 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2200      	movs	r2, #0
 8002e48:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	6a3a      	ldr	r2, [r7, #32]
 8002e54:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d018      	beq.n	8002e94 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	69d2      	ldr	r2, [r2, #28]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	60da      	str	r2, [r3, #12]
 8002e80:	e020      	b.n	8002ec4 <ETH_Prepare_Tx_Descriptors+0x484>
 8002e82:	bf00      	nop
 8002e84:	ffff8000 	.word	0xffff8000
 8002e88:	ffffc000 	.word	0xffffc000
 8002e8c:	c000ffff 	.word	0xc000ffff
 8002e90:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <ETH_Prepare_Tx_Descriptors+0x518>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	6852      	ldr	r2, [r2, #4]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002eca:	f3bf 8f5f 	dmb	sy
}
 8002ece:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f af2b 	bne.w	8002d48 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	e005      	b.n	8002f12 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f22:	6979      	ldr	r1, [r7, #20]
 8002f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f26:	3304      	adds	r3, #4
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f32:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f34:	b672      	cpsid	i
}
 8002f36:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002f46:	b662      	cpsie	i
}
 8002f48:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3734      	adds	r7, #52	; 0x34
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	ffff8000 	.word	0xffff8000

08002f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f6a:	4b89      	ldr	r3, [pc, #548]	; (8003190 <HAL_GPIO_Init+0x234>)
 8002f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f6e:	e194      	b.n	800329a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8186 	beq.w	8003294 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d005      	beq.n	8002fa0 <HAL_GPIO_Init+0x44>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d130      	bne.n	8003002 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	2203      	movs	r2, #3
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	f003 0201 	and.w	r2, r3, #1
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b03      	cmp	r3, #3
 800300c:	d017      	beq.n	800303e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	2203      	movs	r2, #3
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d123      	bne.n	8003092 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	08da      	lsrs	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3208      	adds	r2, #8
 8003052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	220f      	movs	r2, #15
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	08da      	lsrs	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3208      	adds	r2, #8
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2203      	movs	r2, #3
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0203 	and.w	r2, r3, #3
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80e0 	beq.w	8003294 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d4:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <HAL_GPIO_Init+0x238>)
 80030d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030da:	4a2e      	ldr	r2, [pc, #184]	; (8003194 <HAL_GPIO_Init+0x238>)
 80030dc:	f043 0302 	orr.w	r3, r3, #2
 80030e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030e4:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <HAL_GPIO_Init+0x238>)
 80030e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f2:	4a29      	ldr	r2, [pc, #164]	; (8003198 <HAL_GPIO_Init+0x23c>)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a20      	ldr	r2, [pc, #128]	; (800319c <HAL_GPIO_Init+0x240>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d052      	beq.n	80031c4 <HAL_GPIO_Init+0x268>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <HAL_GPIO_Init+0x244>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d031      	beq.n	800318a <HAL_GPIO_Init+0x22e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <HAL_GPIO_Init+0x248>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02b      	beq.n	8003186 <HAL_GPIO_Init+0x22a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_GPIO_Init+0x24c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d025      	beq.n	8003182 <HAL_GPIO_Init+0x226>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1c      	ldr	r2, [pc, #112]	; (80031ac <HAL_GPIO_Init+0x250>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01f      	beq.n	800317e <HAL_GPIO_Init+0x222>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_GPIO_Init+0x254>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d019      	beq.n	800317a <HAL_GPIO_Init+0x21e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <HAL_GPIO_Init+0x258>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_GPIO_Init+0x21a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_GPIO_Init+0x25c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00d      	beq.n	8003172 <HAL_GPIO_Init+0x216>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a18      	ldr	r2, [pc, #96]	; (80031bc <HAL_GPIO_Init+0x260>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <HAL_GPIO_Init+0x212>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <HAL_GPIO_Init+0x264>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_GPIO_Init+0x20e>
 8003166:	2309      	movs	r3, #9
 8003168:	e02d      	b.n	80031c6 <HAL_GPIO_Init+0x26a>
 800316a:	230a      	movs	r3, #10
 800316c:	e02b      	b.n	80031c6 <HAL_GPIO_Init+0x26a>
 800316e:	2308      	movs	r3, #8
 8003170:	e029      	b.n	80031c6 <HAL_GPIO_Init+0x26a>
 8003172:	2307      	movs	r3, #7
 8003174:	e027      	b.n	80031c6 <HAL_GPIO_Init+0x26a>
 8003176:	2306      	movs	r3, #6
 8003178:	e025      	b.n	80031c6 <HAL_GPIO_Init+0x26a>
 800317a:	2305      	movs	r3, #5
 800317c:	e023      	b.n	80031c6 <HAL_GPIO_Init+0x26a>
 800317e:	2304      	movs	r3, #4
 8003180:	e021      	b.n	80031c6 <HAL_GPIO_Init+0x26a>
 8003182:	2303      	movs	r3, #3
 8003184:	e01f      	b.n	80031c6 <HAL_GPIO_Init+0x26a>
 8003186:	2302      	movs	r3, #2
 8003188:	e01d      	b.n	80031c6 <HAL_GPIO_Init+0x26a>
 800318a:	2301      	movs	r3, #1
 800318c:	e01b      	b.n	80031c6 <HAL_GPIO_Init+0x26a>
 800318e:	bf00      	nop
 8003190:	58000080 	.word	0x58000080
 8003194:	58024400 	.word	0x58024400
 8003198:	58000400 	.word	0x58000400
 800319c:	58020000 	.word	0x58020000
 80031a0:	58020400 	.word	0x58020400
 80031a4:	58020800 	.word	0x58020800
 80031a8:	58020c00 	.word	0x58020c00
 80031ac:	58021000 	.word	0x58021000
 80031b0:	58021400 	.word	0x58021400
 80031b4:	58021800 	.word	0x58021800
 80031b8:	58021c00 	.word	0x58021c00
 80031bc:	58022000 	.word	0x58022000
 80031c0:	58022400 	.word	0x58022400
 80031c4:	2300      	movs	r3, #0
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	f002 0203 	and.w	r2, r2, #3
 80031cc:	0092      	lsls	r2, r2, #2
 80031ce:	4093      	lsls	r3, r2
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031d6:	4938      	ldr	r1, [pc, #224]	; (80032b8 <HAL_GPIO_Init+0x35c>)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	089b      	lsrs	r3, r3, #2
 80031dc:	3302      	adds	r3, #2
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800320a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	3301      	adds	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f47f ae63 	bne.w	8002f70 <HAL_GPIO_Init+0x14>
  }
}
 80032aa:	bf00      	nop
 80032ac:	bf00      	nop
 80032ae:	3724      	adds	r7, #36	; 0x24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	58000400 	.word	0x58000400

080032bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032be:	b08f      	sub	sp, #60	; 0x3c
 80032c0:	af0a      	add	r7, sp, #40	; 0x28
 80032c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e116      	b.n	80034fc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7fd fd37 	bl	8000d5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2203      	movs	r2, #3
 80032f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f004 f8dd 	bl	80074cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	687e      	ldr	r6, [r7, #4]
 800331a:	466d      	mov	r5, sp
 800331c:	f106 0410 	add.w	r4, r6, #16
 8003320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003328:	e894 0003 	ldmia.w	r4, {r0, r1}
 800332c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003330:	1d33      	adds	r3, r6, #4
 8003332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003334:	6838      	ldr	r0, [r7, #0]
 8003336:	f004 f85b 	bl	80073f0 <USB_CoreInit>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0d7      	b.n	80034fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f004 f8cb 	bl	80074ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003358:	2300      	movs	r3, #0
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	e04a      	b.n	80033f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800335e:	7bfa      	ldrb	r2, [r7, #15]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	333d      	adds	r3, #61	; 0x3d
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003372:	7bfa      	ldrb	r2, [r7, #15]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	333c      	adds	r3, #60	; 0x3c
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	b298      	uxth	r0, r3
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	3356      	adds	r3, #86	; 0x56
 800339a:	4602      	mov	r2, r0
 800339c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3340      	adds	r3, #64	; 0x40
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3344      	adds	r3, #68	; 0x44
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	3348      	adds	r3, #72	; 0x48
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	334c      	adds	r3, #76	; 0x4c
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	3301      	adds	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d3af      	bcc.n	800335e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e044      	b.n	800348e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	3301      	adds	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d3b5      	bcc.n	8003404 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	687e      	ldr	r6, [r7, #4]
 80034a0:	466d      	mov	r5, sp
 80034a2:	f106 0410 	add.w	r4, r6, #16
 80034a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80034b6:	1d33      	adds	r3, r6, #4
 80034b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ba:	6838      	ldr	r0, [r7, #0]
 80034bc:	f004 f864 	bl	8007588 <USB_DevInit>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e014      	b.n	80034fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d102      	bne.n	80034f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f80a 	bl	8003504 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 fa22 	bl	800793e <USB_DevDisconnect>

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003504 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_PCDEx_ActivateLPM+0x44>)
 8003534:	4313      	orrs	r3, r2
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	10000003 	.word	0x10000003

0800354c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003554:	4b29      	ldr	r3, [pc, #164]	; (80035fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	2b06      	cmp	r3, #6
 800355e:	d00a      	beq.n	8003576 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003560:	4b26      	ldr	r3, [pc, #152]	; (80035fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e040      	b.n	80035f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e03e      	b.n	80035f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003576:	4b21      	ldr	r3, [pc, #132]	; (80035fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800357e:	491f      	ldr	r1, [pc, #124]	; (80035fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4313      	orrs	r3, r2
 8003584:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003586:	f7fd ff79 	bl	800147c <HAL_GetTick>
 800358a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800358c:	e009      	b.n	80035a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800358e:	f7fd ff75 	bl	800147c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800359c:	d901      	bls.n	80035a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e028      	b.n	80035f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035a2:	4b16      	ldr	r3, [pc, #88]	; (80035fc <HAL_PWREx_ConfigSupply+0xb0>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ae:	d1ee      	bne.n	800358e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b1e      	cmp	r3, #30
 80035b4:	d008      	beq.n	80035c8 <HAL_PWREx_ConfigSupply+0x7c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b2e      	cmp	r3, #46	; 0x2e
 80035ba:	d005      	beq.n	80035c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b1d      	cmp	r3, #29
 80035c0:	d002      	beq.n	80035c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b2d      	cmp	r3, #45	; 0x2d
 80035c6:	d114      	bne.n	80035f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80035c8:	f7fd ff58 	bl	800147c <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035ce:	e009      	b.n	80035e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035d0:	f7fd ff54 	bl	800147c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035de:	d901      	bls.n	80035e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e007      	b.n	80035f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_PWREx_ConfigSupply+0xb0>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d1ee      	bne.n	80035d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	58024800 	.word	0x58024800

08003600 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360e:	60d3      	str	r3, [r2, #12]
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	58024800 	.word	0x58024800

08003620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	; 0x30
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f000 bc48 	b.w	8003ec4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8088 	beq.w	8003752 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003642:	4b99      	ldr	r3, [pc, #612]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800364c:	4b96      	ldr	r3, [pc, #600]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	2b10      	cmp	r3, #16
 8003656:	d007      	beq.n	8003668 <HAL_RCC_OscConfig+0x48>
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	2b18      	cmp	r3, #24
 800365c:	d111      	bne.n	8003682 <HAL_RCC_OscConfig+0x62>
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d10c      	bne.n	8003682 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	4b8f      	ldr	r3, [pc, #572]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d06d      	beq.n	8003750 <HAL_RCC_OscConfig+0x130>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d169      	bne.n	8003750 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f000 bc21 	b.w	8003ec4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x7a>
 800368c:	4b86      	ldr	r3, [pc, #536]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a85      	ldr	r2, [pc, #532]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e02e      	b.n	80036f8 <HAL_RCC_OscConfig+0xd8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x9c>
 80036a2:	4b81      	ldr	r3, [pc, #516]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a80      	ldr	r2, [pc, #512]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b7e      	ldr	r3, [pc, #504]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7d      	ldr	r2, [pc, #500]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e01d      	b.n	80036f8 <HAL_RCC_OscConfig+0xd8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0xc0>
 80036c6:	4b78      	ldr	r3, [pc, #480]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a77      	ldr	r2, [pc, #476]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b75      	ldr	r3, [pc, #468]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a74      	ldr	r2, [pc, #464]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0xd8>
 80036e0:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a70      	ldr	r2, [pc, #448]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b6e      	ldr	r3, [pc, #440]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6d      	ldr	r2, [pc, #436]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fd febc 	bl	800147c <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003708:	f7fd feb8 	bl	800147c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e3d4      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800371a:	4b63      	ldr	r3, [pc, #396]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0xe8>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fd fea8 	bl	800147c <HAL_GetTick>
 800372c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fd fea4 	bl	800147c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e3c0      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003742:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x110>
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80ca 	beq.w	80038f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003760:	4b51      	ldr	r3, [pc, #324]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003768:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800376a:	4b4f      	ldr	r3, [pc, #316]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <HAL_RCC_OscConfig+0x166>
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	2b18      	cmp	r3, #24
 800377a:	d156      	bne.n	800382a <HAL_RCC_OscConfig+0x20a>
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d151      	bne.n	800382a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003786:	4b48      	ldr	r3, [pc, #288]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_RCC_OscConfig+0x17e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e392      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800379e:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 0219 	bic.w	r2, r3, #25
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	493f      	ldr	r1, [pc, #252]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fd fe64 	bl	800147c <HAL_GetTick>
 80037b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fd fe60 	bl	800147c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e37c      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ca:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d6:	f7fd fe81 	bl	80014dc <HAL_GetREVID>
 80037da:	4603      	mov	r3, r0
 80037dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d817      	bhi.n	8003814 <HAL_RCC_OscConfig+0x1f4>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d108      	bne.n	80037fe <HAL_RCC_OscConfig+0x1de>
 80037ec:	4b2e      	ldr	r3, [pc, #184]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80037f4:	4a2c      	ldr	r2, [pc, #176]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80037f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037fc:	e07a      	b.n	80038f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	031b      	lsls	r3, r3, #12
 800380c:	4926      	ldr	r1, [pc, #152]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003812:	e06f      	b.n	80038f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003814:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	061b      	lsls	r3, r3, #24
 8003822:	4921      	ldr	r1, [pc, #132]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003824:	4313      	orrs	r3, r2
 8003826:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003828:	e064      	b.n	80038f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d047      	beq.n	80038c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 0219 	bic.w	r2, r3, #25
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	491a      	ldr	r1, [pc, #104]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fd fe1a 	bl	800147c <HAL_GetTick>
 8003848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384c:	f7fd fe16 	bl	800147c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e332      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	f7fd fe37 	bl	80014dc <HAL_GetREVID>
 800386e:	4603      	mov	r3, r0
 8003870:	f241 0203 	movw	r2, #4099	; 0x1003
 8003874:	4293      	cmp	r3, r2
 8003876:	d819      	bhi.n	80038ac <HAL_RCC_OscConfig+0x28c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d108      	bne.n	8003892 <HAL_RCC_OscConfig+0x272>
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003888:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 800388a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388e:	6053      	str	r3, [r2, #4]
 8003890:	e030      	b.n	80038f4 <HAL_RCC_OscConfig+0x2d4>
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	031b      	lsls	r3, r3, #12
 80038a0:	4901      	ldr	r1, [pc, #4]	; (80038a8 <HAL_RCC_OscConfig+0x288>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
 80038a6:	e025      	b.n	80038f4 <HAL_RCC_OscConfig+0x2d4>
 80038a8:	58024400 	.word	0x58024400
 80038ac:	4b9a      	ldr	r3, [pc, #616]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	4997      	ldr	r1, [pc, #604]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
 80038c0:	e018      	b.n	80038f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c2:	4b95      	ldr	r3, [pc, #596]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a94      	ldr	r2, [pc, #592]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fd fdd5 	bl	800147c <HAL_GetTick>
 80038d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d6:	f7fd fdd1 	bl	800147c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e2ed      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038e8:	4b8b      	ldr	r3, [pc, #556]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80a9 	beq.w	8003a54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003902:	4b85      	ldr	r3, [pc, #532]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800390a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800390c:	4b82      	ldr	r3, [pc, #520]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d007      	beq.n	8003928 <HAL_RCC_OscConfig+0x308>
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b18      	cmp	r3, #24
 800391c:	d13a      	bne.n	8003994 <HAL_RCC_OscConfig+0x374>
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d135      	bne.n	8003994 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003928:	4b7b      	ldr	r3, [pc, #492]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_OscConfig+0x320>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	2b80      	cmp	r3, #128	; 0x80
 800393a:	d001      	beq.n	8003940 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e2c1      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003940:	f7fd fdcc 	bl	80014dc <HAL_GetREVID>
 8003944:	4603      	mov	r3, r0
 8003946:	f241 0203 	movw	r2, #4099	; 0x1003
 800394a:	4293      	cmp	r3, r2
 800394c:	d817      	bhi.n	800397e <HAL_RCC_OscConfig+0x35e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	2b20      	cmp	r3, #32
 8003954:	d108      	bne.n	8003968 <HAL_RCC_OscConfig+0x348>
 8003956:	4b70      	ldr	r3, [pc, #448]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800395e:	4a6e      	ldr	r2, [pc, #440]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003964:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003966:	e075      	b.n	8003a54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003968:	4b6b      	ldr	r3, [pc, #428]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	069b      	lsls	r3, r3, #26
 8003976:	4968      	ldr	r1, [pc, #416]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800397c:	e06a      	b.n	8003a54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800397e:	4b66      	ldr	r3, [pc, #408]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	061b      	lsls	r3, r3, #24
 800398c:	4962      	ldr	r1, [pc, #392]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 800398e:	4313      	orrs	r3, r2
 8003990:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003992:	e05f      	b.n	8003a54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d042      	beq.n	8003a22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800399c:	4b5e      	ldr	r3, [pc, #376]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5d      	ldr	r2, [pc, #372]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 80039a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd fd68 	bl	800147c <HAL_GetTick>
 80039ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039b0:	f7fd fd64 	bl	800147c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e280      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039c2:	4b55      	ldr	r3, [pc, #340]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ce:	f7fd fd85 	bl	80014dc <HAL_GetREVID>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80039d8:	4293      	cmp	r3, r2
 80039da:	d817      	bhi.n	8003a0c <HAL_RCC_OscConfig+0x3ec>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d108      	bne.n	80039f6 <HAL_RCC_OscConfig+0x3d6>
 80039e4:	4b4c      	ldr	r3, [pc, #304]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039ec:	4a4a      	ldr	r2, [pc, #296]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 80039ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039f2:	6053      	str	r3, [r2, #4]
 80039f4:	e02e      	b.n	8003a54 <HAL_RCC_OscConfig+0x434>
 80039f6:	4b48      	ldr	r3, [pc, #288]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	069b      	lsls	r3, r3, #26
 8003a04:	4944      	ldr	r1, [pc, #272]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
 8003a0a:	e023      	b.n	8003a54 <HAL_RCC_OscConfig+0x434>
 8003a0c:	4b42      	ldr	r3, [pc, #264]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	493f      	ldr	r1, [pc, #252]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
 8003a20:	e018      	b.n	8003a54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a22:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a3c      	ldr	r2, [pc, #240]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fd fd25 	bl	800147c <HAL_GetTick>
 8003a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a36:	f7fd fd21 	bl	800147c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e23d      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a48:	4b33      	ldr	r3, [pc, #204]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d036      	beq.n	8003ace <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d019      	beq.n	8003a9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a68:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6c:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a74:	f7fd fd02 	bl	800147c <HAL_GetTick>
 8003a78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7c:	f7fd fcfe 	bl	800147c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e21a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a8e:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x45c>
 8003a9a:	e018      	b.n	8003ace <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a9c:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa0:	4a1d      	ldr	r2, [pc, #116]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fd fce8 	bl	800147c <HAL_GetTick>
 8003aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7fd fce4 	bl	800147c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e200      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d039      	beq.n	8003b4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d01c      	beq.n	8003b1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003aec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003aee:	f7fd fcc5 	bl	800147c <HAL_GetTick>
 8003af2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af6:	f7fd fcc1 	bl	800147c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e1dd      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_RCC_OscConfig+0x4f8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x4d6>
 8003b14:	e01b      	b.n	8003b4e <HAL_RCC_OscConfig+0x52e>
 8003b16:	bf00      	nop
 8003b18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b1c:	4b9b      	ldr	r3, [pc, #620]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a9a      	ldr	r2, [pc, #616]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b28:	f7fd fca8 	bl	800147c <HAL_GetTick>
 8003b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b30:	f7fd fca4 	bl	800147c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e1c0      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b42:	4b92      	ldr	r3, [pc, #584]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8081 	beq.w	8003c5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b5c:	4b8c      	ldr	r3, [pc, #560]	; (8003d90 <HAL_RCC_OscConfig+0x770>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a8b      	ldr	r2, [pc, #556]	; (8003d90 <HAL_RCC_OscConfig+0x770>)
 8003b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b68:	f7fd fc88 	bl	800147c <HAL_GetTick>
 8003b6c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b70:	f7fd fc84 	bl	800147c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1a0      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b82:	4b83      	ldr	r3, [pc, #524]	; (8003d90 <HAL_RCC_OscConfig+0x770>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d106      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x584>
 8003b96:	4b7d      	ldr	r3, [pc, #500]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	4a7c      	ldr	r2, [pc, #496]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba2:	e02d      	b.n	8003c00 <HAL_RCC_OscConfig+0x5e0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10c      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x5a6>
 8003bac:	4b77      	ldr	r3, [pc, #476]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	4a76      	ldr	r2, [pc, #472]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb8:	4b74      	ldr	r3, [pc, #464]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a73      	ldr	r2, [pc, #460]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003bbe:	f023 0304 	bic.w	r3, r3, #4
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	e01c      	b.n	8003c00 <HAL_RCC_OscConfig+0x5e0>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b05      	cmp	r3, #5
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x5c8>
 8003bce:	4b6f      	ldr	r3, [pc, #444]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a6e      	ldr	r2, [pc, #440]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003bd4:	f043 0304 	orr.w	r3, r3, #4
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bda:	4b6c      	ldr	r3, [pc, #432]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a6b      	ldr	r2, [pc, #428]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	e00b      	b.n	8003c00 <HAL_RCC_OscConfig+0x5e0>
 8003be8:	4b68      	ldr	r3, [pc, #416]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	4a67      	ldr	r2, [pc, #412]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf4:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	4a64      	ldr	r2, [pc, #400]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003bfa:	f023 0304 	bic.w	r3, r3, #4
 8003bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d015      	beq.n	8003c34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd fc38 	bl	800147c <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c10:	f7fd fc34 	bl	800147c <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e14e      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c26:	4b59      	ldr	r3, [pc, #356]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0ee      	beq.n	8003c10 <HAL_RCC_OscConfig+0x5f0>
 8003c32:	e014      	b.n	8003c5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd fc22 	bl	800147c <HAL_GetTick>
 8003c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fc1e 	bl	800147c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e138      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c52:	4b4e      	ldr	r3, [pc, #312]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1ee      	bne.n	8003c3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 812d 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c68:	4b48      	ldr	r3, [pc, #288]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c70:	2b18      	cmp	r3, #24
 8003c72:	f000 80bd 	beq.w	8003df0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	f040 809e 	bne.w	8003dbc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c80:	4b42      	ldr	r3, [pc, #264]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a41      	ldr	r2, [pc, #260]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fd fbf6 	bl	800147c <HAL_GetTick>
 8003c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fd fbf2 	bl	800147c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e10e      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ca6:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cb2:	4b36      	ldr	r3, [pc, #216]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCC_OscConfig+0x774>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	4931      	ldr	r1, [pc, #196]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	628b      	str	r3, [r1, #40]	; 0x28
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	025b      	lsls	r3, r3, #9
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cfc:	4923      	ldr	r1, [pc, #140]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	4a21      	ldr	r2, [pc, #132]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d12:	4b21      	ldr	r3, [pc, #132]	; (8003d98 <HAL_RCC_OscConfig+0x778>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d1a:	00d2      	lsls	r2, r2, #3
 8003d1c:	491b      	ldr	r1, [pc, #108]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	f023 020c 	bic.w	r2, r3, #12
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	4917      	ldr	r1, [pc, #92]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d34:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	f023 0202 	bic.w	r2, r3, #2
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	4912      	ldr	r1, [pc, #72]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <HAL_RCC_OscConfig+0x76c>)
 8003d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d82:	f7fd fb7b 	bl	800147c <HAL_GetTick>
 8003d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d88:	e011      	b.n	8003dae <HAL_RCC_OscConfig+0x78e>
 8003d8a:	bf00      	nop
 8003d8c:	58024400 	.word	0x58024400
 8003d90:	58024800 	.word	0x58024800
 8003d94:	fffffc0c 	.word	0xfffffc0c
 8003d98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fd fb6e 	bl	800147c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e08a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dae:	4b47      	ldr	r3, [pc, #284]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x77c>
 8003dba:	e082      	b.n	8003ec2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbc:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a42      	ldr	r2, [pc, #264]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fb58 	bl	800147c <HAL_GetTick>
 8003dcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fd fb54 	bl	800147c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e070      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003de2:	4b3a      	ldr	r3, [pc, #232]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x7b0>
 8003dee:	e068      	b.n	8003ec2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003df0:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003df6:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d031      	beq.n	8003e68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f003 0203 	and.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d12a      	bne.n	8003e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d122      	bne.n	8003e68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d11a      	bne.n	8003e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	0a5b      	lsrs	r3, r3, #9
 8003e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d111      	bne.n	8003e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	0c1b      	lsrs	r3, r3, #16
 8003e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d108      	bne.n	8003e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	0e1b      	lsrs	r3, r3, #24
 8003e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e02b      	b.n	8003ec4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e6c:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e70:	08db      	lsrs	r3, r3, #3
 8003e72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d01f      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	4a11      	ldr	r2, [pc, #68]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e8e:	f7fd faf5 	bl	800147c <HAL_GetTick>
 8003e92:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e94:	bf00      	nop
 8003e96:	f7fd faf1 	bl	800147c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d0f9      	beq.n	8003e96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <HAL_RCC_OscConfig+0x8b0>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003eae:	00d2      	lsls	r2, r2, #3
 8003eb0:	4906      	ldr	r1, [pc, #24]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003eb6:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <HAL_RCC_OscConfig+0x8ac>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3730      	adds	r7, #48	; 0x30
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	58024400 	.word	0x58024400
 8003ed0:	ffff0007 	.word	0xffff0007

08003ed4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e19c      	b.n	8004222 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b8a      	ldr	r3, [pc, #552]	; (8004114 <HAL_RCC_ClockConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d910      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b87      	ldr	r3, [pc, #540]	; (8004114 <HAL_RCC_ClockConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 020f 	bic.w	r2, r3, #15
 8003efe:	4985      	ldr	r1, [pc, #532]	; (8004114 <HAL_RCC_ClockConfig+0x240>)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b83      	ldr	r3, [pc, #524]	; (8004114 <HAL_RCC_ClockConfig+0x240>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e184      	b.n	8004222 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d010      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	4b7b      	ldr	r3, [pc, #492]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d908      	bls.n	8003f46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f34:	4b78      	ldr	r3, [pc, #480]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	4975      	ldr	r1, [pc, #468]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d010      	beq.n	8003f74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	4b70      	ldr	r3, [pc, #448]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d908      	bls.n	8003f74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f62:	4b6d      	ldr	r3, [pc, #436]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	496a      	ldr	r1, [pc, #424]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	4b64      	ldr	r3, [pc, #400]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d908      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f90:	4b61      	ldr	r3, [pc, #388]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	495e      	ldr	r1, [pc, #376]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d010      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	4b59      	ldr	r3, [pc, #356]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d908      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003fbe:	4b56      	ldr	r3, [pc, #344]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4953      	ldr	r1, [pc, #332]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	4b4d      	ldr	r3, [pc, #308]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d908      	bls.n	8003ffe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fec:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f023 020f 	bic.w	r2, r3, #15
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4947      	ldr	r1, [pc, #284]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d055      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800400a:	4b43      	ldr	r3, [pc, #268]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	4940      	ldr	r1, [pc, #256]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8004018:	4313      	orrs	r3, r2
 800401a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d107      	bne.n	8004034 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004024:	4b3c      	ldr	r3, [pc, #240]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d121      	bne.n	8004074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0f6      	b.n	8004222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b03      	cmp	r3, #3
 800403a:	d107      	bne.n	800404c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800403c:	4b36      	ldr	r3, [pc, #216]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d115      	bne.n	8004074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0ea      	b.n	8004222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d107      	bne.n	8004064 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004054:	4b30      	ldr	r3, [pc, #192]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0de      	b.n	8004222 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0d6      	b.n	8004222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004074:	4b28      	ldr	r3, [pc, #160]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f023 0207 	bic.w	r2, r3, #7
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4925      	ldr	r1, [pc, #148]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 8004082:	4313      	orrs	r3, r2
 8004084:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004086:	f7fd f9f9 	bl	800147c <HAL_GetTick>
 800408a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408c:	e00a      	b.n	80040a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800408e:	f7fd f9f5 	bl	800147c <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0be      	b.n	8004222 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a4:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d1eb      	bne.n	800408e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d010      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d208      	bcs.n	80040e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d2:	4b11      	ldr	r3, [pc, #68]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	f023 020f 	bic.w	r2, r3, #15
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	490e      	ldr	r1, [pc, #56]	; (8004118 <HAL_RCC_ClockConfig+0x244>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_ClockConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d214      	bcs.n	800411c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_RCC_ClockConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 020f 	bic.w	r2, r3, #15
 80040fa:	4906      	ldr	r1, [pc, #24]	; (8004114 <HAL_RCC_ClockConfig+0x240>)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b04      	ldr	r3, [pc, #16]	; (8004114 <HAL_RCC_ClockConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d005      	beq.n	800411c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e086      	b.n	8004222 <HAL_RCC_ClockConfig+0x34e>
 8004114:	52002000 	.word	0x52002000
 8004118:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	4b3f      	ldr	r3, [pc, #252]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004134:	429a      	cmp	r2, r3
 8004136:	d208      	bcs.n	800414a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004138:	4b3c      	ldr	r3, [pc, #240]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	4939      	ldr	r1, [pc, #228]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 8004146:	4313      	orrs	r3, r2
 8004148:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d010      	beq.n	8004178 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	4b34      	ldr	r3, [pc, #208]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004162:	429a      	cmp	r2, r3
 8004164:	d208      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004166:	4b31      	ldr	r3, [pc, #196]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	492e      	ldr	r1, [pc, #184]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 8004174:	4313      	orrs	r3, r2
 8004176:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d010      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699a      	ldr	r2, [r3, #24]
 8004188:	4b28      	ldr	r3, [pc, #160]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004190:	429a      	cmp	r2, r3
 8004192:	d208      	bcs.n	80041a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	4922      	ldr	r1, [pc, #136]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d010      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69da      	ldr	r2, [r3, #28]
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041be:	429a      	cmp	r2, r3
 80041c0:	d208      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041c2:	4b1a      	ldr	r3, [pc, #104]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4917      	ldr	r1, [pc, #92]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041d4:	f000 f834 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 80041d8:	4602      	mov	r2, r0
 80041da:	4b14      	ldr	r3, [pc, #80]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	4912      	ldr	r1, [pc, #72]	; (8004230 <HAL_RCC_ClockConfig+0x35c>)
 80041e6:	5ccb      	ldrb	r3, [r1, r3]
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
 80041f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <HAL_RCC_ClockConfig+0x358>)
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <HAL_RCC_ClockConfig+0x35c>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_RCC_ClockConfig+0x360>)
 800420a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <HAL_RCC_ClockConfig+0x364>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <HAL_RCC_ClockConfig+0x368>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd f8e6 	bl	80013e8 <HAL_InitTick>
 800421c:	4603      	mov	r3, r0
 800421e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004220:	7bfb      	ldrb	r3, [r7, #15]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	58024400 	.word	0x58024400
 8004230:	08015d80 	.word	0x08015d80
 8004234:	24000004 	.word	0x24000004
 8004238:	24000000 	.word	0x24000000
 800423c:	24000008 	.word	0x24000008

08004240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	; 0x24
 8004244:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004246:	4bb3      	ldr	r3, [pc, #716]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800424e:	2b18      	cmp	r3, #24
 8004250:	f200 8155 	bhi.w	80044fe <HAL_RCC_GetSysClockFreq+0x2be>
 8004254:	a201      	add	r2, pc, #4	; (adr r2, 800425c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	080042c1 	.word	0x080042c1
 8004260:	080044ff 	.word	0x080044ff
 8004264:	080044ff 	.word	0x080044ff
 8004268:	080044ff 	.word	0x080044ff
 800426c:	080044ff 	.word	0x080044ff
 8004270:	080044ff 	.word	0x080044ff
 8004274:	080044ff 	.word	0x080044ff
 8004278:	080044ff 	.word	0x080044ff
 800427c:	080042e7 	.word	0x080042e7
 8004280:	080044ff 	.word	0x080044ff
 8004284:	080044ff 	.word	0x080044ff
 8004288:	080044ff 	.word	0x080044ff
 800428c:	080044ff 	.word	0x080044ff
 8004290:	080044ff 	.word	0x080044ff
 8004294:	080044ff 	.word	0x080044ff
 8004298:	080044ff 	.word	0x080044ff
 800429c:	080042ed 	.word	0x080042ed
 80042a0:	080044ff 	.word	0x080044ff
 80042a4:	080044ff 	.word	0x080044ff
 80042a8:	080044ff 	.word	0x080044ff
 80042ac:	080044ff 	.word	0x080044ff
 80042b0:	080044ff 	.word	0x080044ff
 80042b4:	080044ff 	.word	0x080044ff
 80042b8:	080044ff 	.word	0x080044ff
 80042bc:	080042f3 	.word	0x080042f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042c0:	4b94      	ldr	r3, [pc, #592]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042cc:	4b91      	ldr	r3, [pc, #580]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	08db      	lsrs	r3, r3, #3
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	4a90      	ldr	r2, [pc, #576]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
 80042dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80042de:	e111      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042e0:	4b8d      	ldr	r3, [pc, #564]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042e2:	61bb      	str	r3, [r7, #24]
      break;
 80042e4:	e10e      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042e6:	4b8d      	ldr	r3, [pc, #564]	; (800451c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042e8:	61bb      	str	r3, [r7, #24]
      break;
 80042ea:	e10b      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80042ec:	4b8c      	ldr	r3, [pc, #560]	; (8004520 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042ee:	61bb      	str	r3, [r7, #24]
      break;
 80042f0:	e108      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042f2:	4b88      	ldr	r3, [pc, #544]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042fc:	4b85      	ldr	r3, [pc, #532]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004306:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004308:	4b82      	ldr	r3, [pc, #520]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004312:	4b80      	ldr	r3, [pc, #512]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004316:	08db      	lsrs	r3, r3, #3
 8004318:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80e1 	beq.w	80044f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b02      	cmp	r3, #2
 800433a:	f000 8083 	beq.w	8004444 <HAL_RCC_GetSysClockFreq+0x204>
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b02      	cmp	r3, #2
 8004342:	f200 80a1 	bhi.w	8004488 <HAL_RCC_GetSysClockFreq+0x248>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_RCC_GetSysClockFreq+0x114>
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d056      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004352:	e099      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004354:	4b6f      	ldr	r3, [pc, #444]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02d      	beq.n	80043bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004360:	4b6c      	ldr	r3, [pc, #432]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	08db      	lsrs	r3, r3, #3
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	4a6b      	ldr	r2, [pc, #428]	; (8004518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
 8004370:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	ee07 3a90 	vmov	s15, r3
 8004378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b62      	ldr	r3, [pc, #392]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a02 	vldr	s12, [r7, #8]
 800439e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004524 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80043ba:	e087      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004528 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ce:	4b51      	ldr	r3, [pc, #324]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a02 	vldr	s12, [r7, #8]
 80043e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004524 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043fe:	e065      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800452c <HAL_RCC_GetSysClockFreq+0x2ec>
 800440e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004412:	4b40      	ldr	r3, [pc, #256]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004422:	ed97 6a02 	vldr	s12, [r7, #8]
 8004426:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004524 <HAL_RCC_GetSysClockFreq+0x2e4>
 800442a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004442:	e043      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004530 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004456:	4b2f      	ldr	r3, [pc, #188]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004466:	ed97 6a02 	vldr	s12, [r7, #8]
 800446a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004524 <HAL_RCC_GetSysClockFreq+0x2e4>
 800446e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800447a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004482:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004486:	e021      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004492:	eddf 6a26 	vldr	s13, [pc, #152]	; 800452c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800449a:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80044ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004524 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044cc:	4b11      	ldr	r3, [pc, #68]	; (8004514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	0a5b      	lsrs	r3, r3, #9
 80044d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d6:	3301      	adds	r3, #1
 80044d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	ee07 3a90 	vmov	s15, r3
 80044e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80044e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f0:	ee17 3a90 	vmov	r3, s15
 80044f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80044f6:	e005      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
      break;
 80044fc:	e002      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004500:	61bb      	str	r3, [r7, #24]
      break;
 8004502:	bf00      	nop
  }

  return sysclockfreq;
 8004504:	69bb      	ldr	r3, [r7, #24]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3724      	adds	r7, #36	; 0x24
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	58024400 	.word	0x58024400
 8004518:	03d09000 	.word	0x03d09000
 800451c:	003d0900 	.word	0x003d0900
 8004520:	007a1200 	.word	0x007a1200
 8004524:	46000000 	.word	0x46000000
 8004528:	4c742400 	.word	0x4c742400
 800452c:	4a742400 	.word	0x4a742400
 8004530:	4af42400 	.word	0x4af42400

08004534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800453a:	f7ff fe81 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 800453e:	4602      	mov	r2, r0
 8004540:	4b10      	ldr	r3, [pc, #64]	; (8004584 <HAL_RCC_GetHCLKFreq+0x50>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	490f      	ldr	r1, [pc, #60]	; (8004588 <HAL_RCC_GetHCLKFreq+0x54>)
 800454c:	5ccb      	ldrb	r3, [r1, r3]
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	fa22 f303 	lsr.w	r3, r2, r3
 8004556:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <HAL_RCC_GetHCLKFreq+0x50>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	4a09      	ldr	r2, [pc, #36]	; (8004588 <HAL_RCC_GetHCLKFreq+0x54>)
 8004562:	5cd3      	ldrb	r3, [r2, r3]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	4a07      	ldr	r2, [pc, #28]	; (800458c <HAL_RCC_GetHCLKFreq+0x58>)
 8004570:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004572:	4a07      	ldr	r2, [pc, #28]	; (8004590 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <HAL_RCC_GetHCLKFreq+0x58>)
 800457a:	681b      	ldr	r3, [r3, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	58024400 	.word	0x58024400
 8004588:	08015d80 	.word	0x08015d80
 800458c:	24000004 	.word	0x24000004
 8004590:	24000000 	.word	0x24000000

08004594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004598:	f7ff ffcc 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4904      	ldr	r1, [pc, #16]	; (80045bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	58024400 	.word	0x58024400
 80045bc:	08015d80 	.word	0x08015d80

080045c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045c4:	f7ff ffb6 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	0a1b      	lsrs	r3, r3, #8
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	4904      	ldr	r1, [pc, #16]	; (80045e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045d6:	5ccb      	ldrb	r3, [r1, r3]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	58024400 	.word	0x58024400
 80045e8:	08015d80 	.word	0x08015d80

080045ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f0:	b0ca      	sub	sp, #296	; 0x128
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004610:	2500      	movs	r5, #0
 8004612:	ea54 0305 	orrs.w	r3, r4, r5
 8004616:	d049      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800461e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004622:	d02f      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004624:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004628:	d828      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800462a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800462e:	d01a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004634:	d822      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800463a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463e:	d007      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004640:	e01c      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004642:	4bb8      	ldr	r3, [pc, #736]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	4ab7      	ldr	r2, [pc, #732]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800464c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800464e:	e01a      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004654:	3308      	adds	r3, #8
 8004656:	2102      	movs	r1, #2
 8004658:	4618      	mov	r0, r3
 800465a:	f001 fc8f 	bl	8005f7c <RCCEx_PLL2_Config>
 800465e:	4603      	mov	r3, r0
 8004660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004664:	e00f      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466a:	3328      	adds	r3, #40	; 0x28
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f001 fd36 	bl	80060e0 <RCCEx_PLL3_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800467a:	e004      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800468e:	4ba5      	ldr	r3, [pc, #660]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004692:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800469c:	4aa1      	ldr	r2, [pc, #644]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800469e:	430b      	orrs	r3, r1
 80046a0:	6513      	str	r3, [r2, #80]	; 0x50
 80046a2:	e003      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80046b8:	f04f 0900 	mov.w	r9, #0
 80046bc:	ea58 0309 	orrs.w	r3, r8, r9
 80046c0:	d047      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80046c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d82a      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80046cc:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	080046e9 	.word	0x080046e9
 80046d8:	080046f7 	.word	0x080046f7
 80046dc:	0800470d 	.word	0x0800470d
 80046e0:	0800472b 	.word	0x0800472b
 80046e4:	0800472b 	.word	0x0800472b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e8:	4b8e      	ldr	r3, [pc, #568]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	4a8d      	ldr	r2, [pc, #564]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046f4:	e01a      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fa:	3308      	adds	r3, #8
 80046fc:	2100      	movs	r1, #0
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 fc3c 	bl	8005f7c <RCCEx_PLL2_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800470a:	e00f      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004710:	3328      	adds	r3, #40	; 0x28
 8004712:	2100      	movs	r1, #0
 8004714:	4618      	mov	r0, r3
 8004716:	f001 fce3 	bl	80060e0 <RCCEx_PLL3_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004720:	e004      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004728:	e000      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800472a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800472c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004734:	4b7b      	ldr	r3, [pc, #492]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	f023 0107 	bic.w	r1, r3, #7
 800473c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	4a78      	ldr	r2, [pc, #480]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004744:	430b      	orrs	r3, r1
 8004746:	6513      	str	r3, [r2, #80]	; 0x50
 8004748:	e003      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800474e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800475e:	f04f 0b00 	mov.w	fp, #0
 8004762:	ea5a 030b 	orrs.w	r3, sl, fp
 8004766:	d04c      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004772:	d030      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004778:	d829      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800477a:	2bc0      	cmp	r3, #192	; 0xc0
 800477c:	d02d      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800477e:	2bc0      	cmp	r3, #192	; 0xc0
 8004780:	d825      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	d018      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004786:	2b80      	cmp	r3, #128	; 0x80
 8004788:	d821      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d007      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004792:	e01c      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004794:	4b63      	ldr	r3, [pc, #396]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	4a62      	ldr	r2, [pc, #392]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800479a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047a0:	e01c      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a6:	3308      	adds	r3, #8
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 fbe6 	bl	8005f7c <RCCEx_PLL2_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047b6:	e011      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047bc:	3328      	adds	r3, #40	; 0x28
 80047be:	2100      	movs	r1, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 fc8d 	bl	80060e0 <RCCEx_PLL3_Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047cc:	e006      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047d4:	e002      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80047d6:	bf00      	nop
 80047d8:	e000      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80047da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80047e4:	4b4f      	ldr	r3, [pc, #316]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f2:	4a4c      	ldr	r2, [pc, #304]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6513      	str	r3, [r2, #80]	; 0x50
 80047f8:	e003      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800480e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004812:	2300      	movs	r3, #0
 8004814:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004818:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800481c:	460b      	mov	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	d053      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004826:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800482a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800482e:	d035      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004830:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004834:	d82e      	bhi.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004836:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800483a:	d031      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800483c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004840:	d828      	bhi.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004846:	d01a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484c:	d822      	bhi.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004856:	d007      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004858:	e01c      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485a:	4b32      	ldr	r3, [pc, #200]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	4a31      	ldr	r2, [pc, #196]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004864:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004866:	e01c      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486c:	3308      	adds	r3, #8
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f001 fb83 	bl	8005f7c <RCCEx_PLL2_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800487c:	e011      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004882:	3328      	adds	r3, #40	; 0x28
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f001 fc2a 	bl	80060e0 <RCCEx_PLL3_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004892:	e006      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800489a:	e002      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800489c:	bf00      	nop
 800489e:	e000      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10b      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048aa:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048ba:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048bc:	430b      	orrs	r3, r1
 80048be:	6593      	str	r3, [r2, #88]	; 0x58
 80048c0:	e003      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80048d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80048da:	2300      	movs	r3, #0
 80048dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80048e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80048e4:	460b      	mov	r3, r1
 80048e6:	4313      	orrs	r3, r2
 80048e8:	d056      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048f6:	d038      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80048f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048fc:	d831      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004902:	d034      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004904:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004908:	d82b      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800490a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800490e:	d01d      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004914:	d825      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d006      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800491a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004920:	e01f      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004922:	bf00      	nop
 8004924:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004928:	4ba2      	ldr	r3, [pc, #648]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	4aa1      	ldr	r2, [pc, #644]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800492e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004934:	e01c      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493a:	3308      	adds	r3, #8
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f001 fb1c 	bl	8005f7c <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800494a:	e011      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004950:	3328      	adds	r3, #40	; 0x28
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f001 fbc3 	bl	80060e0 <RCCEx_PLL3_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004960:	e006      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004968:	e002      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800496e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004978:	4b8e      	ldr	r3, [pc, #568]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004984:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004988:	4a8a      	ldr	r2, [pc, #552]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800498a:	430b      	orrs	r3, r1
 800498c:	6593      	str	r3, [r2, #88]	; 0x58
 800498e:	e003      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004994:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80049a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049a8:	2300      	movs	r3, #0
 80049aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80049b2:	460b      	mov	r3, r1
 80049b4:	4313      	orrs	r3, r2
 80049b6:	d03a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	2b30      	cmp	r3, #48	; 0x30
 80049c0:	d01f      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80049c2:	2b30      	cmp	r3, #48	; 0x30
 80049c4:	d819      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d00c      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d815      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d019      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d111      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d6:	4b77      	ldr	r3, [pc, #476]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	4a76      	ldr	r2, [pc, #472]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80049e2:	e011      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e8:	3308      	adds	r3, #8
 80049ea:	2102      	movs	r1, #2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fac5 	bl	8005f7c <RCCEx_PLL2_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80049f8:	e006      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a00:	e002      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a10:	4b68      	ldr	r3, [pc, #416]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a14:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1e:	4a65      	ldr	r2, [pc, #404]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a20:	430b      	orrs	r3, r1
 8004a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a24:	e003      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004a3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004a44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	d051      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a58:	d035      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a5e:	d82e      	bhi.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a64:	d031      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004a66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a6a:	d828      	bhi.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a70:	d01a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a76:	d822      	bhi.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a80:	d007      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004a82:	e01c      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a84:	4b4b      	ldr	r3, [pc, #300]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	4a4a      	ldr	r2, [pc, #296]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a90:	e01c      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a96:	3308      	adds	r3, #8
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 fa6e 	bl	8005f7c <RCCEx_PLL2_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004aa6:	e011      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aac:	3328      	adds	r3, #40	; 0x28
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 fb15 	bl	80060e0 <RCCEx_PLL3_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004abc:	e006      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ac4:	e002      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004ac6:	bf00      	nop
 8004ac8:	e000      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ad4:	4b37      	ldr	r3, [pc, #220]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae2:	4a34      	ldr	r2, [pc, #208]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6513      	str	r3, [r2, #80]	; 0x50
 8004ae8:	e003      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b02:	2300      	movs	r3, #0
 8004b04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	d056      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b1c:	d033      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b22:	d82c      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b28:	d02f      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b2e:	d826      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b34:	d02b      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004b36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b3a:	d820      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b40:	d012      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b46:	d81a      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d022      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d115      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b56:	3308      	adds	r3, #8
 8004b58:	2101      	movs	r1, #1
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 fa0e 	bl	8005f7c <RCCEx_PLL2_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b66:	e015      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6c:	3328      	adds	r3, #40	; 0x28
 8004b6e:	2101      	movs	r1, #1
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 fab5 	bl	80060e0 <RCCEx_PLL3_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b84:	e006      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b86:	bf00      	nop
 8004b88:	e004      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10d      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004baa:	4a02      	ldr	r2, [pc, #8]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bac:	430b      	orrs	r3, r1
 8004bae:	6513      	str	r3, [r2, #80]	; 0x50
 8004bb0:	e006      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004bb2:	bf00      	nop
 8004bb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bd6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	d055      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bec:	d033      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bf2:	d82c      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf8:	d02f      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfe:	d826      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c04:	d02b      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c0a:	d820      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c10:	d012      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c16:	d81a      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d022      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004c1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c20:	d115      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c26:	3308      	adds	r3, #8
 8004c28:	2101      	movs	r1, #1
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 f9a6 	bl	8005f7c <RCCEx_PLL2_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c36:	e015      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3c:	3328      	adds	r3, #40	; 0x28
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 fa4d 	bl	80060e0 <RCCEx_PLL3_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c4c:	e00a      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c54:	e006      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c56:	bf00      	nop
 8004c58:	e004      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c5a:	bf00      	nop
 8004c5c:	e002      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c6c:	4ba3      	ldr	r3, [pc, #652]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c7c:	4a9f      	ldr	r2, [pc, #636]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	6593      	str	r3, [r2, #88]	; 0x58
 8004c82:	e003      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004c98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	d037      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb6:	d00e      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cbc:	d816      	bhi.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d018      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cc6:	d111      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc8:	4b8c      	ldr	r3, [pc, #560]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	4a8b      	ldr	r2, [pc, #556]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004cd4:	e00f      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cda:	3308      	adds	r3, #8
 8004cdc:	2101      	movs	r1, #1
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f001 f94c 	bl	8005f7c <RCCEx_PLL2_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004cea:	e004      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10a      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cfe:	4b7f      	ldr	r3, [pc, #508]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d02:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	4a7b      	ldr	r2, [pc, #492]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	6513      	str	r3, [r2, #80]	; 0x50
 8004d12:	e003      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004d32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	d039      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d81c      	bhi.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004d46:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d89 	.word	0x08004d89
 8004d50:	08004d5d 	.word	0x08004d5d
 8004d54:	08004d6b 	.word	0x08004d6b
 8004d58:	08004d89 	.word	0x08004d89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d5c:	4b67      	ldr	r3, [pc, #412]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	4a66      	ldr	r2, [pc, #408]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d68:	e00f      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6e:	3308      	adds	r3, #8
 8004d70:	2102      	movs	r1, #2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f001 f902 	bl	8005f7c <RCCEx_PLL2_Config>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d7e:	e004      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d86:	e000      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10a      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d92:	4b5a      	ldr	r3, [pc, #360]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d96:	f023 0103 	bic.w	r1, r3, #3
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da0:	4a56      	ldr	r2, [pc, #344]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004da2:	430b      	orrs	r3, r1
 8004da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004da6:	e003      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dc6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f000 809f 	beq.w	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd2:	4b4b      	ldr	r3, [pc, #300]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a4a      	ldr	r2, [pc, #296]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ddc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dde:	f7fc fb4d 	bl	800147c <HAL_GetTick>
 8004de2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004de6:	e00b      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de8:	f7fc fb48 	bl	800147c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b64      	cmp	r3, #100	; 0x64
 8004df6:	d903      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dfe:	e005      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e00:	4b3f      	ldr	r3, [pc, #252]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ed      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d179      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e14:	4b39      	ldr	r3, [pc, #228]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e20:	4053      	eors	r3, r2
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d015      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e2a:	4b34      	ldr	r3, [pc, #208]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e36:	4b31      	ldr	r3, [pc, #196]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3a:	4a30      	ldr	r2, [pc, #192]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e40:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e42:	4b2e      	ldr	r3, [pc, #184]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	4a2d      	ldr	r2, [pc, #180]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e4e:	4a2b      	ldr	r2, [pc, #172]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e62:	d118      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fc fb0a 	bl	800147c <HAL_GetTick>
 8004e68:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e6c:	e00d      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6e:	f7fc fb05 	bl	800147c <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e78:	1ad2      	subs	r2, r2, r3
 8004e7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d903      	bls.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004e88:	e005      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e8a:	4b1c      	ldr	r3, [pc, #112]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0eb      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d129      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eae:	d10e      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004eb0:	4b12      	ldr	r3, [pc, #72]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ec0:	091a      	lsrs	r2, r3, #4
 8004ec2:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6113      	str	r3, [r2, #16]
 8004ecc:	e005      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ed8:	6113      	str	r3, [r2, #16]
 8004eda:	4b08      	ldr	r3, [pc, #32]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004edc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eea:	4a04      	ldr	r2, [pc, #16]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef0:	e00e      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004efa:	e009      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004efc:	58024400 	.word	0x58024400
 8004f00:	58024800 	.word	0x58024800
 8004f04:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	f002 0301 	and.w	r3, r2, #1
 8004f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f20:	2300      	movs	r3, #0
 8004f22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f000 8089 	beq.w	8005044 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f38:	2b28      	cmp	r3, #40	; 0x28
 8004f3a:	d86b      	bhi.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	0800501d 	.word	0x0800501d
 8004f48:	08005015 	.word	0x08005015
 8004f4c:	08005015 	.word	0x08005015
 8004f50:	08005015 	.word	0x08005015
 8004f54:	08005015 	.word	0x08005015
 8004f58:	08005015 	.word	0x08005015
 8004f5c:	08005015 	.word	0x08005015
 8004f60:	08005015 	.word	0x08005015
 8004f64:	08004fe9 	.word	0x08004fe9
 8004f68:	08005015 	.word	0x08005015
 8004f6c:	08005015 	.word	0x08005015
 8004f70:	08005015 	.word	0x08005015
 8004f74:	08005015 	.word	0x08005015
 8004f78:	08005015 	.word	0x08005015
 8004f7c:	08005015 	.word	0x08005015
 8004f80:	08005015 	.word	0x08005015
 8004f84:	08004fff 	.word	0x08004fff
 8004f88:	08005015 	.word	0x08005015
 8004f8c:	08005015 	.word	0x08005015
 8004f90:	08005015 	.word	0x08005015
 8004f94:	08005015 	.word	0x08005015
 8004f98:	08005015 	.word	0x08005015
 8004f9c:	08005015 	.word	0x08005015
 8004fa0:	08005015 	.word	0x08005015
 8004fa4:	0800501d 	.word	0x0800501d
 8004fa8:	08005015 	.word	0x08005015
 8004fac:	08005015 	.word	0x08005015
 8004fb0:	08005015 	.word	0x08005015
 8004fb4:	08005015 	.word	0x08005015
 8004fb8:	08005015 	.word	0x08005015
 8004fbc:	08005015 	.word	0x08005015
 8004fc0:	08005015 	.word	0x08005015
 8004fc4:	0800501d 	.word	0x0800501d
 8004fc8:	08005015 	.word	0x08005015
 8004fcc:	08005015 	.word	0x08005015
 8004fd0:	08005015 	.word	0x08005015
 8004fd4:	08005015 	.word	0x08005015
 8004fd8:	08005015 	.word	0x08005015
 8004fdc:	08005015 	.word	0x08005015
 8004fe0:	08005015 	.word	0x08005015
 8004fe4:	0800501d 	.word	0x0800501d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fec:	3308      	adds	r3, #8
 8004fee:	2101      	movs	r1, #1
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 ffc3 	bl	8005f7c <RCCEx_PLL2_Config>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004ffc:	e00f      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005002:	3328      	adds	r3, #40	; 0x28
 8005004:	2101      	movs	r1, #1
 8005006:	4618      	mov	r0, r3
 8005008:	f001 f86a 	bl	80060e0 <RCCEx_PLL3_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005012:	e004      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800501a:	e000      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800501c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800501e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005026:	4bbf      	ldr	r3, [pc, #764]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800502e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005034:	4abb      	ldr	r2, [pc, #748]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005036:	430b      	orrs	r3, r1
 8005038:	6553      	str	r3, [r2, #84]	; 0x54
 800503a:	e003      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005040:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f002 0302 	and.w	r3, r2, #2
 8005050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005054:	2300      	movs	r3, #0
 8005056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800505a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800505e:	460b      	mov	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	d041      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800506a:	2b05      	cmp	r3, #5
 800506c:	d824      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	080050c1 	.word	0x080050c1
 8005078:	0800508d 	.word	0x0800508d
 800507c:	080050a3 	.word	0x080050a3
 8005080:	080050c1 	.word	0x080050c1
 8005084:	080050c1 	.word	0x080050c1
 8005088:	080050c1 	.word	0x080050c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005090:	3308      	adds	r3, #8
 8005092:	2101      	movs	r1, #1
 8005094:	4618      	mov	r0, r3
 8005096:	f000 ff71 	bl	8005f7c <RCCEx_PLL2_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050a0:	e00f      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050a6:	3328      	adds	r3, #40	; 0x28
 80050a8:	2101      	movs	r1, #1
 80050aa:	4618      	mov	r0, r3
 80050ac:	f001 f818 	bl	80060e0 <RCCEx_PLL3_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050b6:	e004      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80050c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050ca:	4b96      	ldr	r3, [pc, #600]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f023 0107 	bic.w	r1, r3, #7
 80050d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050d8:	4a92      	ldr	r2, [pc, #584]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050da:	430b      	orrs	r3, r1
 80050dc:	6553      	str	r3, [r2, #84]	; 0x54
 80050de:	e003      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f002 0304 	and.w	r3, r2, #4
 80050f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050f8:	2300      	movs	r3, #0
 80050fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005102:	460b      	mov	r3, r1
 8005104:	4313      	orrs	r3, r2
 8005106:	d044      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005110:	2b05      	cmp	r3, #5
 8005112:	d825      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	08005169 	.word	0x08005169
 8005120:	08005135 	.word	0x08005135
 8005124:	0800514b 	.word	0x0800514b
 8005128:	08005169 	.word	0x08005169
 800512c:	08005169 	.word	0x08005169
 8005130:	08005169 	.word	0x08005169
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005138:	3308      	adds	r3, #8
 800513a:	2101      	movs	r1, #1
 800513c:	4618      	mov	r0, r3
 800513e:	f000 ff1d 	bl	8005f7c <RCCEx_PLL2_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005148:	e00f      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800514a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800514e:	3328      	adds	r3, #40	; 0x28
 8005150:	2101      	movs	r1, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f000 ffc4 	bl	80060e0 <RCCEx_PLL3_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800515e:	e004      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005166:	e000      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800516a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10b      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005172:	4b6c      	ldr	r3, [pc, #432]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	f023 0107 	bic.w	r1, r3, #7
 800517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005182:	4a68      	ldr	r2, [pc, #416]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005184:	430b      	orrs	r3, r1
 8005186:	6593      	str	r3, [r2, #88]	; 0x58
 8005188:	e003      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800518e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	f002 0320 	and.w	r3, r2, #32
 800519e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051a2:	2300      	movs	r3, #0
 80051a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051ac:	460b      	mov	r3, r1
 80051ae:	4313      	orrs	r3, r2
 80051b0:	d055      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051be:	d033      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80051c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051c4:	d82c      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ca:	d02f      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d0:	d826      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051d6:	d02b      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80051d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051dc:	d820      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e2:	d012      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80051e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e8:	d81a      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d022      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80051ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051f2:	d115      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f8:	3308      	adds	r3, #8
 80051fa:	2100      	movs	r1, #0
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 febd 	bl	8005f7c <RCCEx_PLL2_Config>
 8005202:	4603      	mov	r3, r0
 8005204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005208:	e015      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520e:	3328      	adds	r3, #40	; 0x28
 8005210:	2102      	movs	r1, #2
 8005212:	4618      	mov	r0, r3
 8005214:	f000 ff64 	bl	80060e0 <RCCEx_PLL3_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800521e:	e00a      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005226:	e006      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005228:	bf00      	nop
 800522a:	e004      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800522c:	bf00      	nop
 800522e:	e002      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005230:	bf00      	nop
 8005232:	e000      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800523e:	4b39      	ldr	r3, [pc, #228]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	4a35      	ldr	r2, [pc, #212]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005250:	430b      	orrs	r3, r1
 8005252:	6553      	str	r3, [r2, #84]	; 0x54
 8005254:	e003      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800525a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800525e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800526a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800526e:	2300      	movs	r3, #0
 8005270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005274:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005278:	460b      	mov	r3, r1
 800527a:	4313      	orrs	r3, r2
 800527c:	d058      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005282:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005286:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800528a:	d033      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800528c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005290:	d82c      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005296:	d02f      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529c:	d826      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800529e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052a2:	d02b      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80052a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052a8:	d820      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ae:	d012      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80052b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b4:	d81a      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d022      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052be:	d115      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c4:	3308      	adds	r3, #8
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fe57 	bl	8005f7c <RCCEx_PLL2_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052d4:	e015      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052da:	3328      	adds	r3, #40	; 0x28
 80052dc:	2102      	movs	r1, #2
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fefe 	bl	80060e0 <RCCEx_PLL3_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052ea:	e00a      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052f2:	e006      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052f4:	bf00      	nop
 80052f6:	e004      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052f8:	bf00      	nop
 80052fa:	e002      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052fc:	bf00      	nop
 80052fe:	e000      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10e      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005316:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800531a:	4a02      	ldr	r2, [pc, #8]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800531c:	430b      	orrs	r3, r1
 800531e:	6593      	str	r3, [r2, #88]	; 0x58
 8005320:	e006      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005322:	bf00      	nop
 8005324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800532c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800533c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005340:	2300      	movs	r3, #0
 8005342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005346:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800534a:	460b      	mov	r3, r1
 800534c:	4313      	orrs	r3, r2
 800534e:	d055      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005358:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800535c:	d033      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800535e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005362:	d82c      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005368:	d02f      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800536a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536e:	d826      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005370:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005374:	d02b      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005376:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800537a:	d820      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800537c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005380:	d012      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005386:	d81a      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d022      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800538c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005390:	d115      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005396:	3308      	adds	r3, #8
 8005398:	2100      	movs	r1, #0
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fdee 	bl	8005f7c <RCCEx_PLL2_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053a6:	e015      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ac:	3328      	adds	r3, #40	; 0x28
 80053ae:	2102      	movs	r1, #2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fe95 	bl	80060e0 <RCCEx_PLL3_Config>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053bc:	e00a      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053c4:	e006      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053c6:	bf00      	nop
 80053c8:	e004      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053ca:	bf00      	nop
 80053cc:	e002      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053ce:	bf00      	nop
 80053d0:	e000      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80053dc:	4ba1      	ldr	r3, [pc, #644]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80053e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053ec:	4a9d      	ldr	r2, [pc, #628]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ee:	430b      	orrs	r3, r1
 80053f0:	6593      	str	r3, [r2, #88]	; 0x58
 80053f2:	e003      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80053fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f002 0308 	and.w	r3, r2, #8
 8005408:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800540c:	2300      	movs	r3, #0
 800540e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005412:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005416:	460b      	mov	r3, r1
 8005418:	4313      	orrs	r3, r2
 800541a:	d01e      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800541c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005428:	d10c      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542e:	3328      	adds	r3, #40	; 0x28
 8005430:	2102      	movs	r1, #2
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fe54 	bl	80060e0 <RCCEx_PLL3_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005444:	4b87      	ldr	r3, [pc, #540]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800544c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005454:	4a83      	ldr	r2, [pc, #524]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005456:	430b      	orrs	r3, r1
 8005458:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800545a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	f002 0310 	and.w	r3, r2, #16
 8005466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800546a:	2300      	movs	r3, #0
 800546c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005470:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005474:	460b      	mov	r3, r1
 8005476:	4313      	orrs	r3, r2
 8005478:	d01e      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800547a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005486:	d10c      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800548c:	3328      	adds	r3, #40	; 0x28
 800548e:	2102      	movs	r1, #2
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fe25 	bl	80060e0 <RCCEx_PLL3_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054a2:	4b70      	ldr	r3, [pc, #448]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b2:	4a6c      	ldr	r2, [pc, #432]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80054c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054c8:	2300      	movs	r3, #0
 80054ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80054d2:	460b      	mov	r3, r1
 80054d4:	4313      	orrs	r3, r2
 80054d6:	d03e      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054e4:	d022      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80054e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ea:	d81b      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80054f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f4:	d00b      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80054f6:	e015      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054fc:	3308      	adds	r3, #8
 80054fe:	2100      	movs	r1, #0
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fd3b 	bl	8005f7c <RCCEx_PLL2_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800550c:	e00f      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005512:	3328      	adds	r3, #40	; 0x28
 8005514:	2102      	movs	r1, #2
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fde2 	bl	80060e0 <RCCEx_PLL3_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005522:	e004      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800552a:	e000      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800552c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10b      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005536:	4b4b      	ldr	r3, [pc, #300]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800553e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005546:	4a47      	ldr	r2, [pc, #284]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005548:	430b      	orrs	r3, r1
 800554a:	6593      	str	r3, [r2, #88]	; 0x58
 800554c:	e003      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005552:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005562:	67bb      	str	r3, [r7, #120]	; 0x78
 8005564:	2300      	movs	r3, #0
 8005566:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005568:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800556c:	460b      	mov	r3, r1
 800556e:	4313      	orrs	r3, r2
 8005570:	d03b      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800557e:	d01f      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005580:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005584:	d818      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800558a:	d003      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800558c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005590:	d007      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005592:	e011      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005594:	4b33      	ldr	r3, [pc, #204]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	4a32      	ldr	r2, [pc, #200]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800559a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800559e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055a0:	e00f      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a6:	3328      	adds	r3, #40	; 0x28
 80055a8:	2101      	movs	r1, #1
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fd98 	bl	80060e0 <RCCEx_PLL3_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80055b6:	e004      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80055c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055ca:	4b26      	ldr	r3, [pc, #152]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	4a22      	ldr	r2, [pc, #136]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055dc:	430b      	orrs	r3, r1
 80055de:	6553      	str	r3, [r2, #84]	; 0x54
 80055e0:	e003      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80055f6:	673b      	str	r3, [r7, #112]	; 0x70
 80055f8:	2300      	movs	r3, #0
 80055fa:	677b      	str	r3, [r7, #116]	; 0x74
 80055fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005600:	460b      	mov	r3, r1
 8005602:	4313      	orrs	r3, r2
 8005604:	d034      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005614:	d007      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005616:	e011      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005618:	4b12      	ldr	r3, [pc, #72]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	4a11      	ldr	r2, [pc, #68]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800561e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005624:	e00e      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800562a:	3308      	adds	r3, #8
 800562c:	2102      	movs	r1, #2
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fca4 	bl	8005f7c <RCCEx_PLL2_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800563a:	e003      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10d      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800564e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005650:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565a:	4a02      	ldr	r2, [pc, #8]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800565c:	430b      	orrs	r3, r1
 800565e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005660:	e006      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005662:	bf00      	nop
 8005664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800566c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800567c:	66bb      	str	r3, [r7, #104]	; 0x68
 800567e:	2300      	movs	r3, #0
 8005680:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005682:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005686:	460b      	mov	r3, r1
 8005688:	4313      	orrs	r3, r2
 800568a:	d00c      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005690:	3328      	adds	r3, #40	; 0x28
 8005692:	2102      	movs	r1, #2
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fd23 	bl	80060e0 <RCCEx_PLL3_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80056b2:	663b      	str	r3, [r7, #96]	; 0x60
 80056b4:	2300      	movs	r3, #0
 80056b6:	667b      	str	r3, [r7, #100]	; 0x64
 80056b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80056bc:	460b      	mov	r3, r1
 80056be:	4313      	orrs	r3, r2
 80056c0:	d038      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ce:	d018      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80056d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056d4:	d811      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056da:	d014      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80056dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e0:	d80b      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d011      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80056e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ea:	d106      	bne.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ec:	4bc3      	ldr	r3, [pc, #780]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	4ac2      	ldr	r2, [pc, #776]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80056f8:	e008      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005700:	e004      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005702:	bf00      	nop
 8005704:	e002      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005706:	bf00      	nop
 8005708:	e000      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800570a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10b      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005714:	4bb9      	ldr	r3, [pc, #740]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800571c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005724:	4ab5      	ldr	r2, [pc, #724]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005726:	430b      	orrs	r3, r1
 8005728:	6553      	str	r3, [r2, #84]	; 0x54
 800572a:	e003      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005730:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005740:	65bb      	str	r3, [r7, #88]	; 0x58
 8005742:	2300      	movs	r3, #0
 8005744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005746:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800574a:	460b      	mov	r3, r1
 800574c:	4313      	orrs	r3, r2
 800574e:	d009      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005750:	4baa      	ldr	r3, [pc, #680]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005754:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800575c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575e:	4aa7      	ldr	r2, [pc, #668]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005760:	430b      	orrs	r3, r1
 8005762:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005770:	653b      	str	r3, [r7, #80]	; 0x50
 8005772:	2300      	movs	r3, #0
 8005774:	657b      	str	r3, [r7, #84]	; 0x54
 8005776:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800577a:	460b      	mov	r3, r1
 800577c:	4313      	orrs	r3, r2
 800577e:	d00a      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005780:	4b9e      	ldr	r3, [pc, #632]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005790:	4a9a      	ldr	r2, [pc, #616]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005792:	430b      	orrs	r3, r1
 8005794:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80057a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a4:	2300      	movs	r3, #0
 80057a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80057ac:	460b      	mov	r3, r1
 80057ae:	4313      	orrs	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057b2:	4b92      	ldr	r3, [pc, #584]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80057ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c0:	4a8e      	ldr	r2, [pc, #568]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057c2:	430b      	orrs	r3, r1
 80057c4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80057d2:	643b      	str	r3, [r7, #64]	; 0x40
 80057d4:	2300      	movs	r3, #0
 80057d6:	647b      	str	r3, [r7, #68]	; 0x44
 80057d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80057dc:	460b      	mov	r3, r1
 80057de:	4313      	orrs	r3, r2
 80057e0:	d00e      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057e2:	4b86      	ldr	r3, [pc, #536]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	4a85      	ldr	r2, [pc, #532]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057ec:	6113      	str	r3, [r2, #16]
 80057ee:	4b83      	ldr	r3, [pc, #524]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057f0:	6919      	ldr	r1, [r3, #16]
 80057f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80057fa:	4a80      	ldr	r2, [pc, #512]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057fc:	430b      	orrs	r3, r1
 80057fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800580c:	63bb      	str	r3, [r7, #56]	; 0x38
 800580e:	2300      	movs	r3, #0
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005812:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d009      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800581c:	4b77      	ldr	r3, [pc, #476]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800581e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005820:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582a:	4a74      	ldr	r2, [pc, #464]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800582c:	430b      	orrs	r3, r1
 800582e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800583c:	633b      	str	r3, [r7, #48]	; 0x30
 800583e:	2300      	movs	r3, #0
 8005840:	637b      	str	r3, [r7, #52]	; 0x34
 8005842:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005846:	460b      	mov	r3, r1
 8005848:	4313      	orrs	r3, r2
 800584a:	d00a      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800584c:	4b6b      	ldr	r3, [pc, #428]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800584e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005850:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800585c:	4a67      	ldr	r2, [pc, #412]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800585e:	430b      	orrs	r3, r1
 8005860:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	2100      	movs	r1, #0
 800586c:	62b9      	str	r1, [r7, #40]	; 0x28
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005874:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005878:	460b      	mov	r3, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	d011      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005882:	3308      	adds	r3, #8
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fb78 	bl	8005f7c <RCCEx_PLL2_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800589e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058aa:	2100      	movs	r1, #0
 80058ac:	6239      	str	r1, [r7, #32]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
 80058b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80058b8:	460b      	mov	r3, r1
 80058ba:	4313      	orrs	r3, r2
 80058bc:	d011      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c2:	3308      	adds	r3, #8
 80058c4:	2101      	movs	r1, #1
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fb58 	bl	8005f7c <RCCEx_PLL2_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80058d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	2100      	movs	r1, #0
 80058ec:	61b9      	str	r1, [r7, #24]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80058f8:	460b      	mov	r3, r1
 80058fa:	4313      	orrs	r3, r2
 80058fc:	d011      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005902:	3308      	adds	r3, #8
 8005904:	2102      	movs	r1, #2
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fb38 	bl	8005f7c <RCCEx_PLL2_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800591e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	2100      	movs	r1, #0
 800592c:	6139      	str	r1, [r7, #16]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005938:	460b      	mov	r3, r1
 800593a:	4313      	orrs	r3, r2
 800593c:	d011      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005942:	3328      	adds	r3, #40	; 0x28
 8005944:	2100      	movs	r1, #0
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fbca 	bl	80060e0 <RCCEx_PLL3_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800595e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	2100      	movs	r1, #0
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005978:	460b      	mov	r3, r1
 800597a:	4313      	orrs	r3, r2
 800597c:	d011      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005982:	3328      	adds	r3, #40	; 0x28
 8005984:	2101      	movs	r1, #1
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fbaa 	bl	80060e0 <RCCEx_PLL3_Config>
 800598c:	4603      	mov	r3, r0
 800598e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800599e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	2100      	movs	r1, #0
 80059ac:	6039      	str	r1, [r7, #0]
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059b8:	460b      	mov	r3, r1
 80059ba:	4313      	orrs	r3, r2
 80059bc:	d011      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c2:	3328      	adds	r3, #40	; 0x28
 80059c4:	2102      	movs	r1, #2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fb8a 	bl	80060e0 <RCCEx_PLL3_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80059d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80059e2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e000      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80059f6:	46bd      	mov	sp, r7
 80059f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059fc:	58024400 	.word	0x58024400

08005a00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a04:	f7fe fd96 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	091b      	lsrs	r3, r3, #4
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	4904      	ldr	r1, [pc, #16]	; (8005a28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a16:	5ccb      	ldrb	r3, [r1, r3]
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	58024400 	.word	0x58024400
 8005a28:	08015d80 	.word	0x08015d80

08005a2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b089      	sub	sp, #36	; 0x24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a34:	4ba1      	ldr	r3, [pc, #644]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a3e:	4b9f      	ldr	r3, [pc, #636]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a42:	0b1b      	lsrs	r3, r3, #12
 8005a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a4a:	4b9c      	ldr	r3, [pc, #624]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	091b      	lsrs	r3, r3, #4
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a56:	4b99      	ldr	r3, [pc, #612]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	08db      	lsrs	r3, r3, #3
 8005a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8111 	beq.w	8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	f000 8083 	beq.w	8005b88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	f200 80a1 	bhi.w	8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d056      	beq.n	8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005a96:	e099      	b.n	8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a98:	4b88      	ldr	r3, [pc, #544]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d02d      	beq.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aa4:	4b85      	ldr	r3, [pc, #532]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	08db      	lsrs	r3, r3, #3
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	4a84      	ldr	r2, [pc, #528]	; (8005cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	ee07 3a90 	vmov	s15, r3
 8005abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b7b      	ldr	r3, [pc, #492]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ae2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005afe:	e087      	b.n	8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b6a      	ldr	r3, [pc, #424]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b42:	e065      	b.n	8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b56:	4b59      	ldr	r3, [pc, #356]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b86:	e043      	b.n	8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b9a:	4b48      	ldr	r3, [pc, #288]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bca:	e021      	b.n	8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bde:	4b37      	ldr	r3, [pc, #220]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c10:	4b2a      	ldr	r3, [pc, #168]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	0a5b      	lsrs	r3, r3, #9
 8005c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c36:	ee17 2a90 	vmov	r2, s15
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c3e:	4b1f      	ldr	r3, [pc, #124]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	0c1b      	lsrs	r3, r3, #16
 8005c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c64:	ee17 2a90 	vmov	r2, s15
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005c6c:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	0e1b      	lsrs	r3, r3, #24
 8005c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c92:	ee17 2a90 	vmov	r2, s15
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c9a:	e008      	b.n	8005cae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	609a      	str	r2, [r3, #8]
}
 8005cae:	bf00      	nop
 8005cb0:	3724      	adds	r7, #36	; 0x24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	58024400 	.word	0x58024400
 8005cc0:	03d09000 	.word	0x03d09000
 8005cc4:	46000000 	.word	0x46000000
 8005cc8:	4c742400 	.word	0x4c742400
 8005ccc:	4a742400 	.word	0x4a742400
 8005cd0:	4af42400 	.word	0x4af42400

08005cd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b089      	sub	sp, #36	; 0x24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cdc:	4ba1      	ldr	r3, [pc, #644]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005ce6:	4b9f      	ldr	r3, [pc, #636]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	0d1b      	lsrs	r3, r3, #20
 8005cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005cf2:	4b9c      	ldr	r3, [pc, #624]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	0a1b      	lsrs	r3, r3, #8
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005cfe:	4b99      	ldr	r3, [pc, #612]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d02:	08db      	lsrs	r3, r3, #3
 8005d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8111 	beq.w	8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	f000 8083 	beq.w	8005e30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	f200 80a1 	bhi.w	8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d056      	beq.n	8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d3e:	e099      	b.n	8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d40:	4b88      	ldr	r3, [pc, #544]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d02d      	beq.n	8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d4c:	4b85      	ldr	r3, [pc, #532]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	08db      	lsrs	r3, r3, #3
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	4a84      	ldr	r2, [pc, #528]	; (8005f68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d58:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	ee07 3a90 	vmov	s15, r3
 8005d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d76:	4b7b      	ldr	r3, [pc, #492]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005da6:	e087      	b.n	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	ee07 3a90 	vmov	s15, r3
 8005dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dba:	4b6a      	ldr	r3, [pc, #424]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dea:	e065      	b.n	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfe:	4b59      	ldr	r3, [pc, #356]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e2e:	e043      	b.n	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e42:	4b48      	ldr	r3, [pc, #288]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e72:	e021      	b.n	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e86:	4b37      	ldr	r3, [pc, #220]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005eb8:	4b2a      	ldr	r3, [pc, #168]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	0a5b      	lsrs	r3, r3, #9
 8005ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ede:	ee17 2a90 	vmov	r2, s15
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005ee6:	4b1f      	ldr	r3, [pc, #124]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005efc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f0c:	ee17 2a90 	vmov	r2, s15
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f14:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	0e1b      	lsrs	r3, r3, #24
 8005f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3a:	ee17 2a90 	vmov	r2, s15
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f42:	e008      	b.n	8005f56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	609a      	str	r2, [r3, #8]
}
 8005f56:	bf00      	nop
 8005f58:	3724      	adds	r7, #36	; 0x24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	58024400 	.word	0x58024400
 8005f68:	03d09000 	.word	0x03d09000
 8005f6c:	46000000 	.word	0x46000000
 8005f70:	4c742400 	.word	0x4c742400
 8005f74:	4a742400 	.word	0x4a742400
 8005f78:	4af42400 	.word	0x4af42400

08005f7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f8a:	4b53      	ldr	r3, [pc, #332]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d101      	bne.n	8005f9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e099      	b.n	80060ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f9a:	4b4f      	ldr	r3, [pc, #316]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a4e      	ldr	r2, [pc, #312]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8005fa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa6:	f7fb fa69 	bl	800147c <HAL_GetTick>
 8005faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fac:	e008      	b.n	8005fc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fae:	f7fb fa65 	bl	800147c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e086      	b.n	80060ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fc0:	4b45      	ldr	r3, [pc, #276]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f0      	bne.n	8005fae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005fcc:	4b42      	ldr	r3, [pc, #264]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	031b      	lsls	r3, r3, #12
 8005fda:	493f      	ldr	r1, [pc, #252]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	628b      	str	r3, [r1, #40]	; 0x28
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	025b      	lsls	r3, r3, #9
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	041b      	lsls	r3, r3, #16
 8005ffe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	3b01      	subs	r3, #1
 800600a:	061b      	lsls	r3, r3, #24
 800600c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006010:	4931      	ldr	r1, [pc, #196]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006012:	4313      	orrs	r3, r2
 8006014:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006016:	4b30      	ldr	r3, [pc, #192]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	492d      	ldr	r1, [pc, #180]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006024:	4313      	orrs	r3, r2
 8006026:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006028:	4b2b      	ldr	r3, [pc, #172]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	f023 0220 	bic.w	r2, r3, #32
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	4928      	ldr	r1, [pc, #160]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006036:	4313      	orrs	r3, r2
 8006038:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800603a:	4b27      	ldr	r3, [pc, #156]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006040:	f023 0310 	bic.w	r3, r3, #16
 8006044:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006046:	4b24      	ldr	r3, [pc, #144]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800604a:	4b24      	ldr	r3, [pc, #144]	; (80060dc <RCCEx_PLL2_Config+0x160>)
 800604c:	4013      	ands	r3, r2
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	69d2      	ldr	r2, [r2, #28]
 8006052:	00d2      	lsls	r2, r2, #3
 8006054:	4920      	ldr	r1, [pc, #128]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006056:	4313      	orrs	r3, r2
 8006058:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800605a:	4b1f      	ldr	r3, [pc, #124]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	4a1e      	ldr	r2, [pc, #120]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006060:	f043 0310 	orr.w	r3, r3, #16
 8006064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d106      	bne.n	800607a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800606c:	4b1a      	ldr	r3, [pc, #104]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006076:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006078:	e00f      	b.n	800609a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d106      	bne.n	800608e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006080:	4b15      	ldr	r3, [pc, #84]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	4a14      	ldr	r2, [pc, #80]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800608a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800608c:	e005      	b.n	800609a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	4a11      	ldr	r2, [pc, #68]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 8006094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006098:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800609a:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a0e      	ldr	r2, [pc, #56]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 80060a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a6:	f7fb f9e9 	bl	800147c <HAL_GetTick>
 80060aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060ac:	e008      	b.n	80060c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060ae:	f7fb f9e5 	bl	800147c <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e006      	b.n	80060ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <RCCEx_PLL2_Config+0x15c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0f0      	beq.n	80060ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	58024400 	.word	0x58024400
 80060dc:	ffff0007 	.word	0xffff0007

080060e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060ee:	4b53      	ldr	r3, [pc, #332]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d101      	bne.n	80060fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e099      	b.n	8006232 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80060fe:	4b4f      	ldr	r3, [pc, #316]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a4e      	ldr	r2, [pc, #312]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 8006104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800610a:	f7fb f9b7 	bl	800147c <HAL_GetTick>
 800610e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006110:	e008      	b.n	8006124 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006112:	f7fb f9b3 	bl	800147c <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e086      	b.n	8006232 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006124:	4b45      	ldr	r3, [pc, #276]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1f0      	bne.n	8006112 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006130:	4b42      	ldr	r3, [pc, #264]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	051b      	lsls	r3, r3, #20
 800613e:	493f      	ldr	r1, [pc, #252]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 8006140:	4313      	orrs	r3, r2
 8006142:	628b      	str	r3, [r1, #40]	; 0x28
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	3b01      	subs	r3, #1
 800614a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	3b01      	subs	r3, #1
 8006154:	025b      	lsls	r3, r3, #9
 8006156:	b29b      	uxth	r3, r3
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	3b01      	subs	r3, #1
 8006160:	041b      	lsls	r3, r3, #16
 8006162:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	3b01      	subs	r3, #1
 800616e:	061b      	lsls	r3, r3, #24
 8006170:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006174:	4931      	ldr	r1, [pc, #196]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 8006176:	4313      	orrs	r3, r2
 8006178:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800617a:	4b30      	ldr	r3, [pc, #192]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	492d      	ldr	r1, [pc, #180]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 8006188:	4313      	orrs	r3, r2
 800618a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800618c:	4b2b      	ldr	r3, [pc, #172]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	4928      	ldr	r1, [pc, #160]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 800619a:	4313      	orrs	r3, r2
 800619c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800619e:	4b27      	ldr	r3, [pc, #156]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	4a26      	ldr	r2, [pc, #152]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061aa:	4b24      	ldr	r3, [pc, #144]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ae:	4b24      	ldr	r3, [pc, #144]	; (8006240 <RCCEx_PLL3_Config+0x160>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	69d2      	ldr	r2, [r2, #28]
 80061b6:	00d2      	lsls	r2, r2, #3
 80061b8:	4920      	ldr	r1, [pc, #128]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80061be:	4b1f      	ldr	r3, [pc, #124]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	4a1e      	ldr	r2, [pc, #120]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d106      	bne.n	80061de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80061d0:	4b1a      	ldr	r3, [pc, #104]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	4a19      	ldr	r2, [pc, #100]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80061da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061dc:	e00f      	b.n	80061fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d106      	bne.n	80061f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80061e4:	4b15      	ldr	r3, [pc, #84]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a14      	ldr	r2, [pc, #80]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80061ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061f0:	e005      	b.n	80061fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80061f2:	4b12      	ldr	r3, [pc, #72]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	4a11      	ldr	r2, [pc, #68]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 80061f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80061fe:	4b0f      	ldr	r3, [pc, #60]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a0e      	ldr	r2, [pc, #56]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 8006204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800620a:	f7fb f937 	bl	800147c <HAL_GetTick>
 800620e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006210:	e008      	b.n	8006224 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006212:	f7fb f933 	bl	800147c <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d901      	bls.n	8006224 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e006      	b.n	8006232 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006224:	4b05      	ldr	r3, [pc, #20]	; (800623c <RCCEx_PLL3_Config+0x15c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0f0      	beq.n	8006212 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	58024400 	.word	0x58024400
 8006240:	ffff0007 	.word	0xffff0007

08006244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e042      	b.n	80062dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625c:	2b00      	cmp	r3, #0
 800625e:	d106      	bne.n	800626e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7fa fd0d 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2224      	movs	r2, #36	; 0x24
 8006272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0201 	bic.w	r2, r2, #1
 8006284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f82c 	bl	80062e4 <UART_SetConfig>
 800628c:	4603      	mov	r3, r0
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e022      	b.n	80062dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fd88 	bl	8006db4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fe0f 	bl	8006ef8 <UART_CheckIdleState>
 80062da:	4603      	mov	r3, r0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e8:	b092      	sub	sp, #72	; 0x48
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	431a      	orrs	r2, r3
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	4313      	orrs	r3, r2
 800630a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4bbe      	ldr	r3, [pc, #760]	; (800660c <UART_SetConfig+0x328>)
 8006314:	4013      	ands	r3, r2
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800631c:	430b      	orrs	r3, r1
 800631e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4ab3      	ldr	r2, [pc, #716]	; (8006610 <UART_SetConfig+0x32c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800634c:	4313      	orrs	r3, r2
 800634e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	4baf      	ldr	r3, [pc, #700]	; (8006614 <UART_SetConfig+0x330>)
 8006358:	4013      	ands	r3, r2
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	6812      	ldr	r2, [r2, #0]
 800635e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006360:	430b      	orrs	r3, r1
 8006362:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	f023 010f 	bic.w	r1, r3, #15
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4aa6      	ldr	r2, [pc, #664]	; (8006618 <UART_SetConfig+0x334>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d177      	bne.n	8006474 <UART_SetConfig+0x190>
 8006384:	4ba5      	ldr	r3, [pc, #660]	; (800661c <UART_SetConfig+0x338>)
 8006386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006388:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800638c:	2b28      	cmp	r3, #40	; 0x28
 800638e:	d86d      	bhi.n	800646c <UART_SetConfig+0x188>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0xb4>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	0800643d 	.word	0x0800643d
 800639c:	0800646d 	.word	0x0800646d
 80063a0:	0800646d 	.word	0x0800646d
 80063a4:	0800646d 	.word	0x0800646d
 80063a8:	0800646d 	.word	0x0800646d
 80063ac:	0800646d 	.word	0x0800646d
 80063b0:	0800646d 	.word	0x0800646d
 80063b4:	0800646d 	.word	0x0800646d
 80063b8:	08006445 	.word	0x08006445
 80063bc:	0800646d 	.word	0x0800646d
 80063c0:	0800646d 	.word	0x0800646d
 80063c4:	0800646d 	.word	0x0800646d
 80063c8:	0800646d 	.word	0x0800646d
 80063cc:	0800646d 	.word	0x0800646d
 80063d0:	0800646d 	.word	0x0800646d
 80063d4:	0800646d 	.word	0x0800646d
 80063d8:	0800644d 	.word	0x0800644d
 80063dc:	0800646d 	.word	0x0800646d
 80063e0:	0800646d 	.word	0x0800646d
 80063e4:	0800646d 	.word	0x0800646d
 80063e8:	0800646d 	.word	0x0800646d
 80063ec:	0800646d 	.word	0x0800646d
 80063f0:	0800646d 	.word	0x0800646d
 80063f4:	0800646d 	.word	0x0800646d
 80063f8:	08006455 	.word	0x08006455
 80063fc:	0800646d 	.word	0x0800646d
 8006400:	0800646d 	.word	0x0800646d
 8006404:	0800646d 	.word	0x0800646d
 8006408:	0800646d 	.word	0x0800646d
 800640c:	0800646d 	.word	0x0800646d
 8006410:	0800646d 	.word	0x0800646d
 8006414:	0800646d 	.word	0x0800646d
 8006418:	0800645d 	.word	0x0800645d
 800641c:	0800646d 	.word	0x0800646d
 8006420:	0800646d 	.word	0x0800646d
 8006424:	0800646d 	.word	0x0800646d
 8006428:	0800646d 	.word	0x0800646d
 800642c:	0800646d 	.word	0x0800646d
 8006430:	0800646d 	.word	0x0800646d
 8006434:	0800646d 	.word	0x0800646d
 8006438:	08006465 	.word	0x08006465
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006442:	e222      	b.n	800688a <UART_SetConfig+0x5a6>
 8006444:	2304      	movs	r3, #4
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644a:	e21e      	b.n	800688a <UART_SetConfig+0x5a6>
 800644c:	2308      	movs	r3, #8
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006452:	e21a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006454:	2310      	movs	r3, #16
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645a:	e216      	b.n	800688a <UART_SetConfig+0x5a6>
 800645c:	2320      	movs	r3, #32
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006462:	e212      	b.n	800688a <UART_SetConfig+0x5a6>
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e20e      	b.n	800688a <UART_SetConfig+0x5a6>
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006472:	e20a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a69      	ldr	r2, [pc, #420]	; (8006620 <UART_SetConfig+0x33c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d130      	bne.n	80064e0 <UART_SetConfig+0x1fc>
 800647e:	4b67      	ldr	r3, [pc, #412]	; (800661c <UART_SetConfig+0x338>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b05      	cmp	r3, #5
 8006488:	d826      	bhi.n	80064d8 <UART_SetConfig+0x1f4>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <UART_SetConfig+0x1ac>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064a9 	.word	0x080064a9
 8006494:	080064b1 	.word	0x080064b1
 8006498:	080064b9 	.word	0x080064b9
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e1ec      	b.n	800688a <UART_SetConfig+0x5a6>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e1e8      	b.n	800688a <UART_SetConfig+0x5a6>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e1e4      	b.n	800688a <UART_SetConfig+0x5a6>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e1e0      	b.n	800688a <UART_SetConfig+0x5a6>
 80064c8:	2320      	movs	r3, #32
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e1dc      	b.n	800688a <UART_SetConfig+0x5a6>
 80064d0:	2340      	movs	r3, #64	; 0x40
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e1d8      	b.n	800688a <UART_SetConfig+0x5a6>
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064de:	e1d4      	b.n	800688a <UART_SetConfig+0x5a6>
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a4f      	ldr	r2, [pc, #316]	; (8006624 <UART_SetConfig+0x340>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d130      	bne.n	800654c <UART_SetConfig+0x268>
 80064ea:	4b4c      	ldr	r3, [pc, #304]	; (800661c <UART_SetConfig+0x338>)
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d826      	bhi.n	8006544 <UART_SetConfig+0x260>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <UART_SetConfig+0x218>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	08006515 	.word	0x08006515
 8006500:	0800651d 	.word	0x0800651d
 8006504:	08006525 	.word	0x08006525
 8006508:	0800652d 	.word	0x0800652d
 800650c:	08006535 	.word	0x08006535
 8006510:	0800653d 	.word	0x0800653d
 8006514:	2300      	movs	r3, #0
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651a:	e1b6      	b.n	800688a <UART_SetConfig+0x5a6>
 800651c:	2304      	movs	r3, #4
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006522:	e1b2      	b.n	800688a <UART_SetConfig+0x5a6>
 8006524:	2308      	movs	r3, #8
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652a:	e1ae      	b.n	800688a <UART_SetConfig+0x5a6>
 800652c:	2310      	movs	r3, #16
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006532:	e1aa      	b.n	800688a <UART_SetConfig+0x5a6>
 8006534:	2320      	movs	r3, #32
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653a:	e1a6      	b.n	800688a <UART_SetConfig+0x5a6>
 800653c:	2340      	movs	r3, #64	; 0x40
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006542:	e1a2      	b.n	800688a <UART_SetConfig+0x5a6>
 8006544:	2380      	movs	r3, #128	; 0x80
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800654a:	e19e      	b.n	800688a <UART_SetConfig+0x5a6>
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a35      	ldr	r2, [pc, #212]	; (8006628 <UART_SetConfig+0x344>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d130      	bne.n	80065b8 <UART_SetConfig+0x2d4>
 8006556:	4b31      	ldr	r3, [pc, #196]	; (800661c <UART_SetConfig+0x338>)
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	2b05      	cmp	r3, #5
 8006560:	d826      	bhi.n	80065b0 <UART_SetConfig+0x2cc>
 8006562:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <UART_SetConfig+0x284>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	08006581 	.word	0x08006581
 800656c:	08006589 	.word	0x08006589
 8006570:	08006591 	.word	0x08006591
 8006574:	08006599 	.word	0x08006599
 8006578:	080065a1 	.word	0x080065a1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	2300      	movs	r3, #0
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006586:	e180      	b.n	800688a <UART_SetConfig+0x5a6>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658e:	e17c      	b.n	800688a <UART_SetConfig+0x5a6>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006596:	e178      	b.n	800688a <UART_SetConfig+0x5a6>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659e:	e174      	b.n	800688a <UART_SetConfig+0x5a6>
 80065a0:	2320      	movs	r3, #32
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a6:	e170      	b.n	800688a <UART_SetConfig+0x5a6>
 80065a8:	2340      	movs	r3, #64	; 0x40
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e16c      	b.n	800688a <UART_SetConfig+0x5a6>
 80065b0:	2380      	movs	r3, #128	; 0x80
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b6:	e168      	b.n	800688a <UART_SetConfig+0x5a6>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	; (800662c <UART_SetConfig+0x348>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d142      	bne.n	8006648 <UART_SetConfig+0x364>
 80065c2:	4b16      	ldr	r3, [pc, #88]	; (800661c <UART_SetConfig+0x338>)
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d838      	bhi.n	8006640 <UART_SetConfig+0x35c>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <UART_SetConfig+0x2f0>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065ed 	.word	0x080065ed
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	08006605 	.word	0x08006605
 80065e4:	08006631 	.word	0x08006631
 80065e8:	08006639 	.word	0x08006639
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f2:	e14a      	b.n	800688a <UART_SetConfig+0x5a6>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fa:	e146      	b.n	800688a <UART_SetConfig+0x5a6>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e142      	b.n	800688a <UART_SetConfig+0x5a6>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e13e      	b.n	800688a <UART_SetConfig+0x5a6>
 800660c:	cfff69f3 	.word	0xcfff69f3
 8006610:	58000c00 	.word	0x58000c00
 8006614:	11fff4ff 	.word	0x11fff4ff
 8006618:	40011000 	.word	0x40011000
 800661c:	58024400 	.word	0x58024400
 8006620:	40004400 	.word	0x40004400
 8006624:	40004800 	.word	0x40004800
 8006628:	40004c00 	.word	0x40004c00
 800662c:	40005000 	.word	0x40005000
 8006630:	2320      	movs	r3, #32
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006636:	e128      	b.n	800688a <UART_SetConfig+0x5a6>
 8006638:	2340      	movs	r3, #64	; 0x40
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663e:	e124      	b.n	800688a <UART_SetConfig+0x5a6>
 8006640:	2380      	movs	r3, #128	; 0x80
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006646:	e120      	b.n	800688a <UART_SetConfig+0x5a6>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4acb      	ldr	r2, [pc, #812]	; (800697c <UART_SetConfig+0x698>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d176      	bne.n	8006740 <UART_SetConfig+0x45c>
 8006652:	4bcb      	ldr	r3, [pc, #812]	; (8006980 <UART_SetConfig+0x69c>)
 8006654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800665a:	2b28      	cmp	r3, #40	; 0x28
 800665c:	d86c      	bhi.n	8006738 <UART_SetConfig+0x454>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <UART_SetConfig+0x380>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006709 	.word	0x08006709
 8006668:	08006739 	.word	0x08006739
 800666c:	08006739 	.word	0x08006739
 8006670:	08006739 	.word	0x08006739
 8006674:	08006739 	.word	0x08006739
 8006678:	08006739 	.word	0x08006739
 800667c:	08006739 	.word	0x08006739
 8006680:	08006739 	.word	0x08006739
 8006684:	08006711 	.word	0x08006711
 8006688:	08006739 	.word	0x08006739
 800668c:	08006739 	.word	0x08006739
 8006690:	08006739 	.word	0x08006739
 8006694:	08006739 	.word	0x08006739
 8006698:	08006739 	.word	0x08006739
 800669c:	08006739 	.word	0x08006739
 80066a0:	08006739 	.word	0x08006739
 80066a4:	08006719 	.word	0x08006719
 80066a8:	08006739 	.word	0x08006739
 80066ac:	08006739 	.word	0x08006739
 80066b0:	08006739 	.word	0x08006739
 80066b4:	08006739 	.word	0x08006739
 80066b8:	08006739 	.word	0x08006739
 80066bc:	08006739 	.word	0x08006739
 80066c0:	08006739 	.word	0x08006739
 80066c4:	08006721 	.word	0x08006721
 80066c8:	08006739 	.word	0x08006739
 80066cc:	08006739 	.word	0x08006739
 80066d0:	08006739 	.word	0x08006739
 80066d4:	08006739 	.word	0x08006739
 80066d8:	08006739 	.word	0x08006739
 80066dc:	08006739 	.word	0x08006739
 80066e0:	08006739 	.word	0x08006739
 80066e4:	08006729 	.word	0x08006729
 80066e8:	08006739 	.word	0x08006739
 80066ec:	08006739 	.word	0x08006739
 80066f0:	08006739 	.word	0x08006739
 80066f4:	08006739 	.word	0x08006739
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
 8006700:	08006739 	.word	0x08006739
 8006704:	08006731 	.word	0x08006731
 8006708:	2301      	movs	r3, #1
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670e:	e0bc      	b.n	800688a <UART_SetConfig+0x5a6>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006716:	e0b8      	b.n	800688a <UART_SetConfig+0x5a6>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671e:	e0b4      	b.n	800688a <UART_SetConfig+0x5a6>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006726:	e0b0      	b.n	800688a <UART_SetConfig+0x5a6>
 8006728:	2320      	movs	r3, #32
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672e:	e0ac      	b.n	800688a <UART_SetConfig+0x5a6>
 8006730:	2340      	movs	r3, #64	; 0x40
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006736:	e0a8      	b.n	800688a <UART_SetConfig+0x5a6>
 8006738:	2380      	movs	r3, #128	; 0x80
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673e:	e0a4      	b.n	800688a <UART_SetConfig+0x5a6>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a8f      	ldr	r2, [pc, #572]	; (8006984 <UART_SetConfig+0x6a0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d130      	bne.n	80067ac <UART_SetConfig+0x4c8>
 800674a:	4b8d      	ldr	r3, [pc, #564]	; (8006980 <UART_SetConfig+0x69c>)
 800674c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b05      	cmp	r3, #5
 8006754:	d826      	bhi.n	80067a4 <UART_SetConfig+0x4c0>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0x478>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006775 	.word	0x08006775
 8006760:	0800677d 	.word	0x0800677d
 8006764:	08006785 	.word	0x08006785
 8006768:	0800678d 	.word	0x0800678d
 800676c:	08006795 	.word	0x08006795
 8006770:	0800679d 	.word	0x0800679d
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e086      	b.n	800688a <UART_SetConfig+0x5a6>
 800677c:	2304      	movs	r3, #4
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e082      	b.n	800688a <UART_SetConfig+0x5a6>
 8006784:	2308      	movs	r3, #8
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e07e      	b.n	800688a <UART_SetConfig+0x5a6>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e07a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006794:	2320      	movs	r3, #32
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e076      	b.n	800688a <UART_SetConfig+0x5a6>
 800679c:	2340      	movs	r3, #64	; 0x40
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e072      	b.n	800688a <UART_SetConfig+0x5a6>
 80067a4:	2380      	movs	r3, #128	; 0x80
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067aa:	e06e      	b.n	800688a <UART_SetConfig+0x5a6>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a75      	ldr	r2, [pc, #468]	; (8006988 <UART_SetConfig+0x6a4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d130      	bne.n	8006818 <UART_SetConfig+0x534>
 80067b6:	4b72      	ldr	r3, [pc, #456]	; (8006980 <UART_SetConfig+0x69c>)
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d826      	bhi.n	8006810 <UART_SetConfig+0x52c>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <UART_SetConfig+0x4e4>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006801 	.word	0x08006801
 80067dc:	08006809 	.word	0x08006809
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e6:	e050      	b.n	800688a <UART_SetConfig+0x5a6>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ee:	e04c      	b.n	800688a <UART_SetConfig+0x5a6>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f6:	e048      	b.n	800688a <UART_SetConfig+0x5a6>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fe:	e044      	b.n	800688a <UART_SetConfig+0x5a6>
 8006800:	2320      	movs	r3, #32
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006806:	e040      	b.n	800688a <UART_SetConfig+0x5a6>
 8006808:	2340      	movs	r3, #64	; 0x40
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680e:	e03c      	b.n	800688a <UART_SetConfig+0x5a6>
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006816:	e038      	b.n	800688a <UART_SetConfig+0x5a6>
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a5b      	ldr	r2, [pc, #364]	; (800698c <UART_SetConfig+0x6a8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d130      	bne.n	8006884 <UART_SetConfig+0x5a0>
 8006822:	4b57      	ldr	r3, [pc, #348]	; (8006980 <UART_SetConfig+0x69c>)
 8006824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b05      	cmp	r3, #5
 800682c:	d826      	bhi.n	800687c <UART_SetConfig+0x598>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <UART_SetConfig+0x550>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	0800684d 	.word	0x0800684d
 8006838:	08006855 	.word	0x08006855
 800683c:	0800685d 	.word	0x0800685d
 8006840:	08006865 	.word	0x08006865
 8006844:	0800686d 	.word	0x0800686d
 8006848:	08006875 	.word	0x08006875
 800684c:	2302      	movs	r3, #2
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006852:	e01a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685a:	e016      	b.n	800688a <UART_SetConfig+0x5a6>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006862:	e012      	b.n	800688a <UART_SetConfig+0x5a6>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686a:	e00e      	b.n	800688a <UART_SetConfig+0x5a6>
 800686c:	2320      	movs	r3, #32
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006872:	e00a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006874:	2340      	movs	r3, #64	; 0x40
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687a:	e006      	b.n	800688a <UART_SetConfig+0x5a6>
 800687c:	2380      	movs	r3, #128	; 0x80
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006882:	e002      	b.n	800688a <UART_SetConfig+0x5a6>
 8006884:	2380      	movs	r3, #128	; 0x80
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a3f      	ldr	r2, [pc, #252]	; (800698c <UART_SetConfig+0x6a8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	f040 80f8 	bne.w	8006a86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006896:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800689a:	2b20      	cmp	r3, #32
 800689c:	dc46      	bgt.n	800692c <UART_SetConfig+0x648>
 800689e:	2b02      	cmp	r3, #2
 80068a0:	f2c0 8082 	blt.w	80069a8 <UART_SetConfig+0x6c4>
 80068a4:	3b02      	subs	r3, #2
 80068a6:	2b1e      	cmp	r3, #30
 80068a8:	d87e      	bhi.n	80069a8 <UART_SetConfig+0x6c4>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <UART_SetConfig+0x5cc>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	08006933 	.word	0x08006933
 80068b4:	080069a9 	.word	0x080069a9
 80068b8:	0800693b 	.word	0x0800693b
 80068bc:	080069a9 	.word	0x080069a9
 80068c0:	080069a9 	.word	0x080069a9
 80068c4:	080069a9 	.word	0x080069a9
 80068c8:	0800694b 	.word	0x0800694b
 80068cc:	080069a9 	.word	0x080069a9
 80068d0:	080069a9 	.word	0x080069a9
 80068d4:	080069a9 	.word	0x080069a9
 80068d8:	080069a9 	.word	0x080069a9
 80068dc:	080069a9 	.word	0x080069a9
 80068e0:	080069a9 	.word	0x080069a9
 80068e4:	080069a9 	.word	0x080069a9
 80068e8:	0800695b 	.word	0x0800695b
 80068ec:	080069a9 	.word	0x080069a9
 80068f0:	080069a9 	.word	0x080069a9
 80068f4:	080069a9 	.word	0x080069a9
 80068f8:	080069a9 	.word	0x080069a9
 80068fc:	080069a9 	.word	0x080069a9
 8006900:	080069a9 	.word	0x080069a9
 8006904:	080069a9 	.word	0x080069a9
 8006908:	080069a9 	.word	0x080069a9
 800690c:	080069a9 	.word	0x080069a9
 8006910:	080069a9 	.word	0x080069a9
 8006914:	080069a9 	.word	0x080069a9
 8006918:	080069a9 	.word	0x080069a9
 800691c:	080069a9 	.word	0x080069a9
 8006920:	080069a9 	.word	0x080069a9
 8006924:	080069a9 	.word	0x080069a9
 8006928:	0800699b 	.word	0x0800699b
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	d037      	beq.n	80069a0 <UART_SetConfig+0x6bc>
 8006930:	e03a      	b.n	80069a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006932:	f7ff f865 	bl	8005a00 <HAL_RCCEx_GetD3PCLK1Freq>
 8006936:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006938:	e03c      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800693a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff f874 	bl	8005a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006948:	e034      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800694a:	f107 0318 	add.w	r3, r7, #24
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff f9c0 	bl	8005cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006958:	e02c      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800695a:	4b09      	ldr	r3, [pc, #36]	; (8006980 <UART_SetConfig+0x69c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d016      	beq.n	8006994 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006966:	4b06      	ldr	r3, [pc, #24]	; (8006980 <UART_SetConfig+0x69c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	08db      	lsrs	r3, r3, #3
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	4a07      	ldr	r2, [pc, #28]	; (8006990 <UART_SetConfig+0x6ac>)
 8006972:	fa22 f303 	lsr.w	r3, r2, r3
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006978:	e01c      	b.n	80069b4 <UART_SetConfig+0x6d0>
 800697a:	bf00      	nop
 800697c:	40011400 	.word	0x40011400
 8006980:	58024400 	.word	0x58024400
 8006984:	40007800 	.word	0x40007800
 8006988:	40007c00 	.word	0x40007c00
 800698c:	58000c00 	.word	0x58000c00
 8006990:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006994:	4b9d      	ldr	r3, [pc, #628]	; (8006c0c <UART_SetConfig+0x928>)
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006998:	e00c      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800699a:	4b9d      	ldr	r3, [pc, #628]	; (8006c10 <UART_SetConfig+0x92c>)
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800699e:	e009      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a6:	e005      	b.n	80069b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80069b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 81de 	beq.w	8006d78 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	4a94      	ldr	r2, [pc, #592]	; (8006c14 <UART_SetConfig+0x930>)
 80069c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c6:	461a      	mov	r2, r3
 80069c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	4413      	add	r3, r2
 80069da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069dc:	429a      	cmp	r2, r3
 80069de:	d305      	bcc.n	80069ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d903      	bls.n	80069f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80069f2:	e1c1      	b.n	8006d78 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	2200      	movs	r2, #0
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	60fa      	str	r2, [r7, #12]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	4a84      	ldr	r2, [pc, #528]	; (8006c14 <UART_SetConfig+0x930>)
 8006a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2200      	movs	r2, #0
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	607a      	str	r2, [r7, #4]
 8006a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a16:	f7f9 fcb3 	bl	8000380 <__aeabi_uldivmod>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4610      	mov	r0, r2
 8006a20:	4619      	mov	r1, r3
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	020b      	lsls	r3, r1, #8
 8006a2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a30:	0202      	lsls	r2, r0, #8
 8006a32:	6979      	ldr	r1, [r7, #20]
 8006a34:	6849      	ldr	r1, [r1, #4]
 8006a36:	0849      	lsrs	r1, r1, #1
 8006a38:	2000      	movs	r0, #0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	eb12 0804 	adds.w	r8, r2, r4
 8006a42:	eb43 0905 	adc.w	r9, r3, r5
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	469a      	mov	sl, r3
 8006a4e:	4693      	mov	fp, r2
 8006a50:	4652      	mov	r2, sl
 8006a52:	465b      	mov	r3, fp
 8006a54:	4640      	mov	r0, r8
 8006a56:	4649      	mov	r1, r9
 8006a58:	f7f9 fc92 	bl	8000380 <__aeabi_uldivmod>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4613      	mov	r3, r2
 8006a62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a6a:	d308      	bcc.n	8006a7e <UART_SetConfig+0x79a>
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a72:	d204      	bcs.n	8006a7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a7a:	60da      	str	r2, [r3, #12]
 8006a7c:	e17c      	b.n	8006d78 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a84:	e178      	b.n	8006d78 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a8e:	f040 80c5 	bne.w	8006c1c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006a92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	dc48      	bgt.n	8006b2c <UART_SetConfig+0x848>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	db7b      	blt.n	8006b96 <UART_SetConfig+0x8b2>
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d879      	bhi.n	8006b96 <UART_SetConfig+0x8b2>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <UART_SetConfig+0x7c4>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006b33 	.word	0x08006b33
 8006aac:	08006b3b 	.word	0x08006b3b
 8006ab0:	08006b97 	.word	0x08006b97
 8006ab4:	08006b97 	.word	0x08006b97
 8006ab8:	08006b43 	.word	0x08006b43
 8006abc:	08006b97 	.word	0x08006b97
 8006ac0:	08006b97 	.word	0x08006b97
 8006ac4:	08006b97 	.word	0x08006b97
 8006ac8:	08006b53 	.word	0x08006b53
 8006acc:	08006b97 	.word	0x08006b97
 8006ad0:	08006b97 	.word	0x08006b97
 8006ad4:	08006b97 	.word	0x08006b97
 8006ad8:	08006b97 	.word	0x08006b97
 8006adc:	08006b97 	.word	0x08006b97
 8006ae0:	08006b97 	.word	0x08006b97
 8006ae4:	08006b97 	.word	0x08006b97
 8006ae8:	08006b63 	.word	0x08006b63
 8006aec:	08006b97 	.word	0x08006b97
 8006af0:	08006b97 	.word	0x08006b97
 8006af4:	08006b97 	.word	0x08006b97
 8006af8:	08006b97 	.word	0x08006b97
 8006afc:	08006b97 	.word	0x08006b97
 8006b00:	08006b97 	.word	0x08006b97
 8006b04:	08006b97 	.word	0x08006b97
 8006b08:	08006b97 	.word	0x08006b97
 8006b0c:	08006b97 	.word	0x08006b97
 8006b10:	08006b97 	.word	0x08006b97
 8006b14:	08006b97 	.word	0x08006b97
 8006b18:	08006b97 	.word	0x08006b97
 8006b1c:	08006b97 	.word	0x08006b97
 8006b20:	08006b97 	.word	0x08006b97
 8006b24:	08006b97 	.word	0x08006b97
 8006b28:	08006b89 	.word	0x08006b89
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d02e      	beq.n	8006b8e <UART_SetConfig+0x8aa>
 8006b30:	e031      	b.n	8006b96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b32:	f7fd fd2f 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8006b36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b38:	e033      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b3a:	f7fd fd41 	bl	80045c0 <HAL_RCC_GetPCLK2Freq>
 8006b3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b40:	e02f      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe ff70 	bl	8005a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b50:	e027      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b52:	f107 0318 	add.w	r3, r7, #24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff f8bc 	bl	8005cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b60:	e01f      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b62:	4b2d      	ldr	r3, [pc, #180]	; (8006c18 <UART_SetConfig+0x934>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b6e:	4b2a      	ldr	r3, [pc, #168]	; (8006c18 <UART_SetConfig+0x934>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	08db      	lsrs	r3, r3, #3
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	4a24      	ldr	r2, [pc, #144]	; (8006c0c <UART_SetConfig+0x928>)
 8006b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b80:	e00f      	b.n	8006ba2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006b82:	4b22      	ldr	r3, [pc, #136]	; (8006c0c <UART_SetConfig+0x928>)
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b86:	e00c      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b88:	4b21      	ldr	r3, [pc, #132]	; (8006c10 <UART_SetConfig+0x92c>)
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b8c:	e009      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b94:	e005      	b.n	8006ba2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80e7 	beq.w	8006d78 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <UART_SetConfig+0x930>)
 8006bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bbc:	005a      	lsls	r2, r3, #1
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	441a      	add	r2, r3
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	2b0f      	cmp	r3, #15
 8006bd4:	d916      	bls.n	8006c04 <UART_SetConfig+0x920>
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bdc:	d212      	bcs.n	8006c04 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f023 030f 	bic.w	r3, r3, #15
 8006be6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c00:	60da      	str	r2, [r3, #12]
 8006c02:	e0b9      	b.n	8006d78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c0a:	e0b5      	b.n	8006d78 <UART_SetConfig+0xa94>
 8006c0c:	03d09000 	.word	0x03d09000
 8006c10:	003d0900 	.word	0x003d0900
 8006c14:	08015d90 	.word	0x08015d90
 8006c18:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	dc49      	bgt.n	8006cb8 <UART_SetConfig+0x9d4>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	db7c      	blt.n	8006d22 <UART_SetConfig+0xa3e>
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d87a      	bhi.n	8006d22 <UART_SetConfig+0xa3e>
 8006c2c:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <UART_SetConfig+0x950>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006cbf 	.word	0x08006cbf
 8006c38:	08006cc7 	.word	0x08006cc7
 8006c3c:	08006d23 	.word	0x08006d23
 8006c40:	08006d23 	.word	0x08006d23
 8006c44:	08006ccf 	.word	0x08006ccf
 8006c48:	08006d23 	.word	0x08006d23
 8006c4c:	08006d23 	.word	0x08006d23
 8006c50:	08006d23 	.word	0x08006d23
 8006c54:	08006cdf 	.word	0x08006cdf
 8006c58:	08006d23 	.word	0x08006d23
 8006c5c:	08006d23 	.word	0x08006d23
 8006c60:	08006d23 	.word	0x08006d23
 8006c64:	08006d23 	.word	0x08006d23
 8006c68:	08006d23 	.word	0x08006d23
 8006c6c:	08006d23 	.word	0x08006d23
 8006c70:	08006d23 	.word	0x08006d23
 8006c74:	08006cef 	.word	0x08006cef
 8006c78:	08006d23 	.word	0x08006d23
 8006c7c:	08006d23 	.word	0x08006d23
 8006c80:	08006d23 	.word	0x08006d23
 8006c84:	08006d23 	.word	0x08006d23
 8006c88:	08006d23 	.word	0x08006d23
 8006c8c:	08006d23 	.word	0x08006d23
 8006c90:	08006d23 	.word	0x08006d23
 8006c94:	08006d23 	.word	0x08006d23
 8006c98:	08006d23 	.word	0x08006d23
 8006c9c:	08006d23 	.word	0x08006d23
 8006ca0:	08006d23 	.word	0x08006d23
 8006ca4:	08006d23 	.word	0x08006d23
 8006ca8:	08006d23 	.word	0x08006d23
 8006cac:	08006d23 	.word	0x08006d23
 8006cb0:	08006d23 	.word	0x08006d23
 8006cb4:	08006d15 	.word	0x08006d15
 8006cb8:	2b40      	cmp	r3, #64	; 0x40
 8006cba:	d02e      	beq.n	8006d1a <UART_SetConfig+0xa36>
 8006cbc:	e031      	b.n	8006d22 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cbe:	f7fd fc69 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8006cc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006cc4:	e033      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc6:	f7fd fc7b 	bl	80045c0 <HAL_RCC_GetPCLK2Freq>
 8006cca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ccc:	e02f      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe feaa 	bl	8005a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cdc:	e027      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cde:	f107 0318 	add.w	r3, r7, #24
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fff6 	bl	8005cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cec:	e01f      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cee:	4b2d      	ldr	r3, [pc, #180]	; (8006da4 <UART_SetConfig+0xac0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cfa:	4b2a      	ldr	r3, [pc, #168]	; (8006da4 <UART_SetConfig+0xac0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	08db      	lsrs	r3, r3, #3
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	4a28      	ldr	r2, [pc, #160]	; (8006da8 <UART_SetConfig+0xac4>)
 8006d06:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d0c:	e00f      	b.n	8006d2e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006d0e:	4b26      	ldr	r3, [pc, #152]	; (8006da8 <UART_SetConfig+0xac4>)
 8006d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d12:	e00c      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d14:	4b25      	ldr	r3, [pc, #148]	; (8006dac <UART_SetConfig+0xac8>)
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d18:	e009      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d20:	e005      	b.n	8006d2e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d2c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d021      	beq.n	8006d78 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	4a1d      	ldr	r2, [pc, #116]	; (8006db0 <UART_SetConfig+0xacc>)
 8006d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d42:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	441a      	add	r2, r3
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5a:	2b0f      	cmp	r3, #15
 8006d5c:	d909      	bls.n	8006d72 <UART_SetConfig+0xa8e>
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d64:	d205      	bcs.n	8006d72 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60da      	str	r2, [r3, #12]
 8006d70:	e002      	b.n	8006d78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2200      	movs	r2, #0
 8006d92:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006d94:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3748      	adds	r7, #72	; 0x48
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da2:	bf00      	nop
 8006da4:	58024400 	.word	0x58024400
 8006da8:	03d09000 	.word	0x03d09000
 8006dac:	003d0900 	.word	0x003d0900
 8006db0:	08015d90 	.word	0x08015d90

08006db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01a      	beq.n	8006eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb2:	d10a      	bne.n	8006eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	605a      	str	r2, [r3, #4]
  }
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b098      	sub	sp, #96	; 0x60
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f08:	f7fa fab8 	bl	800147c <HAL_GetTick>
 8006f0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d12f      	bne.n	8006f7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f24:	2200      	movs	r2, #0
 8006f26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f88e 	bl	800704c <UART_WaitOnFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d022      	beq.n	8006f7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f54:	647b      	str	r3, [r7, #68]	; 0x44
 8006f56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e6      	bne.n	8006f36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e063      	b.n	8007044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0304 	and.w	r3, r3, #4
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	d149      	bne.n	800701e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f92:	2200      	movs	r2, #0
 8006f94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f857 	bl	800704c <UART_WaitOnFlagUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d03c      	beq.n	800701e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8006fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e6      	bne.n	8006fa4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3308      	adds	r3, #8
 8006fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f023 0301 	bic.w	r3, r3, #1
 8006fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ff6:	61fa      	str	r2, [r7, #28]
 8006ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	69b9      	ldr	r1, [r7, #24]
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	617b      	str	r3, [r7, #20]
   return(result);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e5      	bne.n	8006fd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e012      	b.n	8007044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3758      	adds	r7, #88	; 0x58
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800705c:	e049      	b.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007064:	d045      	beq.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007066:	f7fa fa09 	bl	800147c <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	429a      	cmp	r2, r3
 8007074:	d302      	bcc.n	800707c <UART_WaitOnFlagUntilTimeout+0x30>
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e048      	b.n	8007112 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d031      	beq.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b08      	cmp	r3, #8
 800709a:	d110      	bne.n	80070be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2208      	movs	r2, #8
 80070a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 f839 	bl	800711c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2208      	movs	r2, #8
 80070ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e029      	b.n	8007112 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070cc:	d111      	bne.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f81f 	bl	800711c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e00f      	b.n	8007112 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4013      	ands	r3, r2
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	429a      	cmp	r2, r3
 8007100:	bf0c      	ite	eq
 8007102:	2301      	moveq	r3, #1
 8007104:	2300      	movne	r3, #0
 8007106:	b2db      	uxtb	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	429a      	cmp	r2, r3
 800710e:	d0a6      	beq.n	800705e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b095      	sub	sp, #84	; 0x54
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007138:	64fb      	str	r3, [r7, #76]	; 0x4c
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007142:	643b      	str	r3, [r7, #64]	; 0x40
 8007144:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e6      	bne.n	8007124 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3308      	adds	r3, #8
 800715c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	61fb      	str	r3, [r7, #28]
   return(result);
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <UART_EndRxTransfer+0xc8>)
 800716a:	4013      	ands	r3, r2
 800716c:	64bb      	str	r3, [r7, #72]	; 0x48
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3308      	adds	r3, #8
 8007174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800717c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e5      	bne.n	8007156 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800718e:	2b01      	cmp	r3, #1
 8007190:	d118      	bne.n	80071c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f023 0310 	bic.w	r3, r3, #16
 80071a6:	647b      	str	r3, [r7, #68]	; 0x44
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6979      	ldr	r1, [r7, #20]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	613b      	str	r3, [r7, #16]
   return(result);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e6      	bne.n	8007192 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80071d8:	bf00      	nop
 80071da:	3754      	adds	r7, #84	; 0x54
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	effffffe 	.word	0xeffffffe

080071e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_UARTEx_DisableFifoMode+0x16>
 80071fa:	2302      	movs	r3, #2
 80071fc:	e027      	b.n	800724e <HAL_UARTEx_DisableFifoMode+0x66>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2224      	movs	r2, #36	; 0x24
 800720a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0201 	bic.w	r2, r2, #1
 8007224:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800722c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2220      	movs	r2, #32
 8007240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800726e:	2302      	movs	r3, #2
 8007270:	e02d      	b.n	80072ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2224      	movs	r2, #36	; 0x24
 800727e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f850 	bl	8007354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d101      	bne.n	80072ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072ea:	2302      	movs	r3, #2
 80072ec:	e02d      	b.n	800734a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2224      	movs	r2, #36	; 0x24
 80072fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0201 	bic.w	r2, r2, #1
 8007314:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f812 	bl	8007354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007360:	2b00      	cmp	r3, #0
 8007362:	d108      	bne.n	8007376 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007374:	e031      	b.n	80073da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007376:	2310      	movs	r3, #16
 8007378:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800737a:	2310      	movs	r3, #16
 800737c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	0e5b      	lsrs	r3, r3, #25
 8007386:	b2db      	uxtb	r3, r3
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	0f5b      	lsrs	r3, r3, #29
 8007396:	b2db      	uxtb	r3, r3
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	7b3a      	ldrb	r2, [r7, #12]
 80073a2:	4911      	ldr	r1, [pc, #68]	; (80073e8 <UARTEx_SetNbDataToProcess+0x94>)
 80073a4:	5c8a      	ldrb	r2, [r1, r2]
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073aa:	7b3a      	ldrb	r2, [r7, #12]
 80073ac:	490f      	ldr	r1, [pc, #60]	; (80073ec <UARTEx_SetNbDataToProcess+0x98>)
 80073ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	7b7a      	ldrb	r2, [r7, #13]
 80073c0:	4909      	ldr	r1, [pc, #36]	; (80073e8 <UARTEx_SetNbDataToProcess+0x94>)
 80073c2:	5c8a      	ldrb	r2, [r1, r2]
 80073c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073c8:	7b7a      	ldrb	r2, [r7, #13]
 80073ca:	4908      	ldr	r1, [pc, #32]	; (80073ec <UARTEx_SetNbDataToProcess+0x98>)
 80073cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073da:	bf00      	nop
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	08015da8 	.word	0x08015da8
 80073ec:	08015db0 	.word	0x08015db0

080073f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073f0:	b084      	sub	sp, #16
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	f107 001c 	add.w	r0, r7, #28
 80073fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	2b01      	cmp	r3, #1
 8007406:	d120      	bne.n	800744a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	4b2a      	ldr	r3, [pc, #168]	; (80074c4 <USB_CoreInit+0xd4>)
 800741a:	4013      	ands	r3, r2
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800742c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800742e:	2b01      	cmp	r3, #1
 8007430:	d105      	bne.n	800743e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 faac 	bl	800799c <USB_CoreReset>
 8007444:	4603      	mov	r3, r0
 8007446:	73fb      	strb	r3, [r7, #15]
 8007448:	e01a      	b.n	8007480 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 faa0 	bl	800799c <USB_CoreReset>
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	639a      	str	r2, [r3, #56]	; 0x38
 8007472:	e005      	b.n	8007480 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	2b01      	cmp	r3, #1
 8007484:	d116      	bne.n	80074b4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748a:	b29a      	uxth	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007494:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <USB_CoreInit+0xd8>)
 8007496:	4313      	orrs	r3, r2
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f043 0206 	orr.w	r2, r3, #6
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f043 0220 	orr.w	r2, r3, #32
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074c0:	b004      	add	sp, #16
 80074c2:	4770      	bx	lr
 80074c4:	ffbdffbf 	.word	0xffbdffbf
 80074c8:	03ee0000 	.word	0x03ee0000

080074cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f023 0201 	bic.w	r2, r3, #1
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d115      	bne.n	800753c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800751c:	2001      	movs	r0, #1
 800751e:	f7f9 ffb9 	bl	8001494 <HAL_Delay>
      ms++;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3301      	adds	r3, #1
 8007526:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fa29 	bl	8007980 <USB_GetMode>
 800752e:	4603      	mov	r3, r0
 8007530:	2b01      	cmp	r3, #1
 8007532:	d01e      	beq.n	8007572 <USB_SetCurrentMode+0x84>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b31      	cmp	r3, #49	; 0x31
 8007538:	d9f0      	bls.n	800751c <USB_SetCurrentMode+0x2e>
 800753a:	e01a      	b.n	8007572 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d115      	bne.n	800756e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800754e:	2001      	movs	r0, #1
 8007550:	f7f9 ffa0 	bl	8001494 <HAL_Delay>
      ms++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa10 	bl	8007980 <USB_GetMode>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <USB_SetCurrentMode+0x84>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b31      	cmp	r3, #49	; 0x31
 800756a:	d9f0      	bls.n	800754e <USB_SetCurrentMode+0x60>
 800756c:	e001      	b.n	8007572 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e005      	b.n	800757e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b32      	cmp	r3, #50	; 0x32
 8007576:	d101      	bne.n	800757c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007588:	b084      	sub	sp, #16
 800758a:	b580      	push	{r7, lr}
 800758c:	b086      	sub	sp, #24
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80075a2:	2300      	movs	r3, #0
 80075a4:	613b      	str	r3, [r7, #16]
 80075a6:	e009      	b.n	80075bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	3340      	adds	r3, #64	; 0x40
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	2200      	movs	r2, #0
 80075b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3301      	adds	r3, #1
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b0e      	cmp	r3, #14
 80075c0:	d9f2      	bls.n	80075a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80075c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d11c      	bne.n	8007602 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075d6:	f043 0302 	orr.w	r3, r3, #2
 80075da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e005      	b.n	800760e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007614:	461a      	mov	r2, r3
 8007616:	2300      	movs	r3, #0
 8007618:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007620:	4619      	mov	r1, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007628:	461a      	mov	r2, r3
 800762a:	680b      	ldr	r3, [r1, #0]
 800762c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	2b01      	cmp	r3, #1
 8007632:	d10c      	bne.n	800764e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	2b00      	cmp	r3, #0
 8007638:	d104      	bne.n	8007644 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800763a:	2100      	movs	r1, #0
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f965 	bl	800790c <USB_SetDevSpeed>
 8007642:	e008      	b.n	8007656 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007644:	2101      	movs	r1, #1
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f960 	bl	800790c <USB_SetDevSpeed>
 800764c:	e003      	b.n	8007656 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800764e:	2103      	movs	r1, #3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f95b 	bl	800790c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007656:	2110      	movs	r1, #16
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f8f3 	bl	8007844 <USB_FlushTxFifo>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f91f 	bl	80078ac <USB_FlushRxFifo>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767e:	461a      	mov	r2, r3
 8007680:	2300      	movs	r3, #0
 8007682:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768a:	461a      	mov	r2, r3
 800768c:	2300      	movs	r3, #0
 800768e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007696:	461a      	mov	r2, r3
 8007698:	2300      	movs	r3, #0
 800769a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800769c:	2300      	movs	r3, #0
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	e043      	b.n	800772a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076b8:	d118      	bne.n	80076ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076cc:	461a      	mov	r2, r3
 80076ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	e013      	b.n	80076fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e2:	461a      	mov	r2, r3
 80076e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	e008      	b.n	80076fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f8:	461a      	mov	r2, r3
 80076fa:	2300      	movs	r3, #0
 80076fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770a:	461a      	mov	r2, r3
 800770c:	2300      	movs	r3, #0
 800770e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771c:	461a      	mov	r2, r3
 800771e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007722:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	3301      	adds	r3, #1
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	429a      	cmp	r2, r3
 8007730:	d3b7      	bcc.n	80076a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007732:	2300      	movs	r3, #0
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	e043      	b.n	80077c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800774a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800774e:	d118      	bne.n	8007782 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10a      	bne.n	800776c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007762:	461a      	mov	r2, r3
 8007764:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	e013      	b.n	8007794 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007778:	461a      	mov	r2, r3
 800777a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	e008      	b.n	8007794 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	461a      	mov	r2, r3
 8007790:	2300      	movs	r3, #0
 8007792:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a0:	461a      	mov	r2, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b2:	461a      	mov	r2, r3
 80077b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	3301      	adds	r3, #1
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d3b7      	bcc.n	8007738 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80077e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d105      	bne.n	80077fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	f043 0210 	orr.w	r2, r3, #16
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699a      	ldr	r2, [r3, #24]
 8007800:	4b0e      	ldr	r3, [pc, #56]	; (800783c <USB_DevInit+0x2b4>)
 8007802:	4313      	orrs	r3, r2
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f043 0208 	orr.w	r2, r3, #8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800781a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d105      	bne.n	800782c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	699a      	ldr	r2, [r3, #24]
 8007824:	4b06      	ldr	r3, [pc, #24]	; (8007840 <USB_DevInit+0x2b8>)
 8007826:	4313      	orrs	r3, r2
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007838:	b004      	add	sp, #16
 800783a:	4770      	bx	lr
 800783c:	803c3800 	.word	0x803c3800
 8007840:	40000004 	.word	0x40000004

08007844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4a13      	ldr	r2, [pc, #76]	; (80078a8 <USB_FlushTxFifo+0x64>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d901      	bls.n	8007864 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e01b      	b.n	800789c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	daf2      	bge.n	8007852 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	019b      	lsls	r3, r3, #6
 8007874:	f043 0220 	orr.w	r2, r3, #32
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3301      	adds	r3, #1
 8007880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4a08      	ldr	r2, [pc, #32]	; (80078a8 <USB_FlushTxFifo+0x64>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d901      	bls.n	800788e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e006      	b.n	800789c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b20      	cmp	r3, #32
 8007898:	d0f0      	beq.n	800787c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	00030d40 	.word	0x00030d40

080078ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	3301      	adds	r3, #1
 80078bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4a11      	ldr	r2, [pc, #68]	; (8007908 <USB_FlushRxFifo+0x5c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d901      	bls.n	80078ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e018      	b.n	80078fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	daf2      	bge.n	80078b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2210      	movs	r2, #16
 80078da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3301      	adds	r3, #1
 80078e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4a08      	ldr	r2, [pc, #32]	; (8007908 <USB_FlushRxFifo+0x5c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d901      	bls.n	80078ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e006      	b.n	80078fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d0f0      	beq.n	80078dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	00030d40 	.word	0x00030d40

0800790c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	78fb      	ldrb	r3, [r7, #3]
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800792c:	4313      	orrs	r3, r2
 800792e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800793e:	b480      	push	{r7}
 8007940:	b085      	sub	sp, #20
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007958:	f023 0303 	bic.w	r3, r3, #3
 800795c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800796c:	f043 0302 	orr.w	r3, r3, #2
 8007970:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	f003 0301 	and.w	r3, r3, #1
}
 8007990:	4618      	mov	r0, r3
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4a13      	ldr	r2, [pc, #76]	; (8007a00 <USB_CoreReset+0x64>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d901      	bls.n	80079ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e01b      	b.n	80079f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	daf2      	bge.n	80079a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f043 0201 	orr.w	r2, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3301      	adds	r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4a09      	ldr	r2, [pc, #36]	; (8007a00 <USB_CoreReset+0x64>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d901      	bls.n	80079e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e006      	b.n	80079f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d0f0      	beq.n	80079d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	00030d40 	.word	0x00030d40

08007a04 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007a0a:	4b8d      	ldr	r3, [pc, #564]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a0c:	22c0      	movs	r2, #192	; 0xc0
 8007a0e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007a10:	4b8b      	ldr	r3, [pc, #556]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a12:	22a8      	movs	r2, #168	; 0xa8
 8007a14:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007a16:	4b8a      	ldr	r3, [pc, #552]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8007a1c:	4b88      	ldr	r3, [pc, #544]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a1e:	227b      	movs	r2, #123	; 0x7b
 8007a20:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007a22:	4b88      	ldr	r3, [pc, #544]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007a24:	22ff      	movs	r2, #255	; 0xff
 8007a26:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007a28:	4b86      	ldr	r3, [pc, #536]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007a2a:	22ff      	movs	r2, #255	; 0xff
 8007a2c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007a2e:	4b85      	ldr	r3, [pc, #532]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007a30:	22ff      	movs	r2, #255	; 0xff
 8007a32:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007a34:	4b83      	ldr	r3, [pc, #524]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8007a3a:	4b83      	ldr	r3, [pc, #524]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8007a40:	4b81      	ldr	r3, [pc, #516]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007a46:	4b80      	ldr	r3, [pc, #512]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8007a4c:	4b7e      	ldr	r3, [pc, #504]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007a52:	f001 ffdd 	bl	8009a10 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007a56:	4b7a      	ldr	r3, [pc, #488]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	061a      	lsls	r2, r3, #24
 8007a5c:	4b78      	ldr	r3, [pc, #480]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	041b      	lsls	r3, r3, #16
 8007a62:	431a      	orrs	r2, r3
 8007a64:	4b76      	ldr	r3, [pc, #472]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a66:	789b      	ldrb	r3, [r3, #2]
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	4a74      	ldr	r2, [pc, #464]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a6e:	78d2      	ldrb	r2, [r2, #3]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	061a      	lsls	r2, r3, #24
 8007a74:	4b72      	ldr	r3, [pc, #456]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	0619      	lsls	r1, r3, #24
 8007a7a:	4b71      	ldr	r3, [pc, #452]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	041b      	lsls	r3, r3, #16
 8007a80:	4319      	orrs	r1, r3
 8007a82:	4b6f      	ldr	r3, [pc, #444]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a84:	789b      	ldrb	r3, [r3, #2]
 8007a86:	021b      	lsls	r3, r3, #8
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	496d      	ldr	r1, [pc, #436]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a8c:	78c9      	ldrb	r1, [r1, #3]
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a96:	431a      	orrs	r2, r3
 8007a98:	4b69      	ldr	r3, [pc, #420]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	0619      	lsls	r1, r3, #24
 8007a9e:	4b68      	ldr	r3, [pc, #416]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007aa0:	785b      	ldrb	r3, [r3, #1]
 8007aa2:	041b      	lsls	r3, r3, #16
 8007aa4:	4319      	orrs	r1, r3
 8007aa6:	4b66      	ldr	r3, [pc, #408]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007aa8:	789b      	ldrb	r3, [r3, #2]
 8007aaa:	021b      	lsls	r3, r3, #8
 8007aac:	430b      	orrs	r3, r1
 8007aae:	4964      	ldr	r1, [pc, #400]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007ab0:	78c9      	ldrb	r1, [r1, #3]
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	0a1b      	lsrs	r3, r3, #8
 8007ab6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007aba:	431a      	orrs	r2, r3
 8007abc:	4b60      	ldr	r3, [pc, #384]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	0619      	lsls	r1, r3, #24
 8007ac2:	4b5f      	ldr	r3, [pc, #380]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	041b      	lsls	r3, r3, #16
 8007ac8:	4319      	orrs	r1, r3
 8007aca:	4b5d      	ldr	r3, [pc, #372]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007acc:	789b      	ldrb	r3, [r3, #2]
 8007ace:	021b      	lsls	r3, r3, #8
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	495b      	ldr	r1, [pc, #364]	; (8007c40 <MX_LWIP_Init+0x23c>)
 8007ad4:	78c9      	ldrb	r1, [r1, #3]
 8007ad6:	430b      	orrs	r3, r1
 8007ad8:	0e1b      	lsrs	r3, r3, #24
 8007ada:	4313      	orrs	r3, r2
 8007adc:	4a5b      	ldr	r2, [pc, #364]	; (8007c4c <MX_LWIP_Init+0x248>)
 8007ade:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007ae0:	4b58      	ldr	r3, [pc, #352]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	061a      	lsls	r2, r3, #24
 8007ae6:	4b57      	ldr	r3, [pc, #348]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	041b      	lsls	r3, r3, #16
 8007aec:	431a      	orrs	r2, r3
 8007aee:	4b55      	ldr	r3, [pc, #340]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007af0:	789b      	ldrb	r3, [r3, #2]
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	4313      	orrs	r3, r2
 8007af6:	4a53      	ldr	r2, [pc, #332]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007af8:	78d2      	ldrb	r2, [r2, #3]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	061a      	lsls	r2, r3, #24
 8007afe:	4b51      	ldr	r3, [pc, #324]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	0619      	lsls	r1, r3, #24
 8007b04:	4b4f      	ldr	r3, [pc, #316]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	041b      	lsls	r3, r3, #16
 8007b0a:	4319      	orrs	r1, r3
 8007b0c:	4b4d      	ldr	r3, [pc, #308]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b0e:	789b      	ldrb	r3, [r3, #2]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	430b      	orrs	r3, r1
 8007b14:	494b      	ldr	r1, [pc, #300]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b16:	78c9      	ldrb	r1, [r1, #3]
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b20:	431a      	orrs	r2, r3
 8007b22:	4b48      	ldr	r3, [pc, #288]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	0619      	lsls	r1, r3, #24
 8007b28:	4b46      	ldr	r3, [pc, #280]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	041b      	lsls	r3, r3, #16
 8007b2e:	4319      	orrs	r1, r3
 8007b30:	4b44      	ldr	r3, [pc, #272]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b32:	789b      	ldrb	r3, [r3, #2]
 8007b34:	021b      	lsls	r3, r3, #8
 8007b36:	430b      	orrs	r3, r1
 8007b38:	4942      	ldr	r1, [pc, #264]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b3a:	78c9      	ldrb	r1, [r1, #3]
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b44:	431a      	orrs	r2, r3
 8007b46:	4b3f      	ldr	r3, [pc, #252]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	0619      	lsls	r1, r3, #24
 8007b4c:	4b3d      	ldr	r3, [pc, #244]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b4e:	785b      	ldrb	r3, [r3, #1]
 8007b50:	041b      	lsls	r3, r3, #16
 8007b52:	4319      	orrs	r1, r3
 8007b54:	4b3b      	ldr	r3, [pc, #236]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b56:	789b      	ldrb	r3, [r3, #2]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	4939      	ldr	r1, [pc, #228]	; (8007c44 <MX_LWIP_Init+0x240>)
 8007b5e:	78c9      	ldrb	r1, [r1, #3]
 8007b60:	430b      	orrs	r3, r1
 8007b62:	0e1b      	lsrs	r3, r3, #24
 8007b64:	4313      	orrs	r3, r2
 8007b66:	4a3a      	ldr	r2, [pc, #232]	; (8007c50 <MX_LWIP_Init+0x24c>)
 8007b68:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007b6a:	4b37      	ldr	r3, [pc, #220]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	061a      	lsls	r2, r3, #24
 8007b70:	4b35      	ldr	r3, [pc, #212]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	041b      	lsls	r3, r3, #16
 8007b76:	431a      	orrs	r2, r3
 8007b78:	4b33      	ldr	r3, [pc, #204]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007b7a:	789b      	ldrb	r3, [r3, #2]
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	4a31      	ldr	r2, [pc, #196]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007b82:	78d2      	ldrb	r2, [r2, #3]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	061a      	lsls	r2, r3, #24
 8007b88:	4b2f      	ldr	r3, [pc, #188]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	0619      	lsls	r1, r3, #24
 8007b8e:	4b2e      	ldr	r3, [pc, #184]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	4319      	orrs	r1, r3
 8007b96:	4b2c      	ldr	r3, [pc, #176]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007b98:	789b      	ldrb	r3, [r3, #2]
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	492a      	ldr	r1, [pc, #168]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007ba0:	78c9      	ldrb	r1, [r1, #3]
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007baa:	431a      	orrs	r2, r3
 8007bac:	4b26      	ldr	r3, [pc, #152]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	0619      	lsls	r1, r3, #24
 8007bb2:	4b25      	ldr	r3, [pc, #148]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	4319      	orrs	r1, r3
 8007bba:	4b23      	ldr	r3, [pc, #140]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007bbc:	789b      	ldrb	r3, [r3, #2]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	4921      	ldr	r1, [pc, #132]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007bc4:	78c9      	ldrb	r1, [r1, #3]
 8007bc6:	430b      	orrs	r3, r1
 8007bc8:	0a1b      	lsrs	r3, r3, #8
 8007bca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	0619      	lsls	r1, r3, #24
 8007bd6:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	041b      	lsls	r3, r3, #16
 8007bdc:	4319      	orrs	r1, r3
 8007bde:	4b1a      	ldr	r3, [pc, #104]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007be0:	789b      	ldrb	r3, [r3, #2]
 8007be2:	021b      	lsls	r3, r3, #8
 8007be4:	430b      	orrs	r3, r1
 8007be6:	4918      	ldr	r1, [pc, #96]	; (8007c48 <MX_LWIP_Init+0x244>)
 8007be8:	78c9      	ldrb	r1, [r1, #3]
 8007bea:	430b      	orrs	r3, r1
 8007bec:	0e1b      	lsrs	r3, r3, #24
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	4a18      	ldr	r2, [pc, #96]	; (8007c54 <MX_LWIP_Init+0x250>)
 8007bf2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007bf4:	4b18      	ldr	r3, [pc, #96]	; (8007c58 <MX_LWIP_Init+0x254>)
 8007bf6:	9302      	str	r3, [sp, #8]
 8007bf8:	4b18      	ldr	r3, [pc, #96]	; (8007c5c <MX_LWIP_Init+0x258>)
 8007bfa:	9301      	str	r3, [sp, #4]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	4b14      	ldr	r3, [pc, #80]	; (8007c54 <MX_LWIP_Init+0x250>)
 8007c02:	4a13      	ldr	r2, [pc, #76]	; (8007c50 <MX_LWIP_Init+0x24c>)
 8007c04:	4911      	ldr	r1, [pc, #68]	; (8007c4c <MX_LWIP_Init+0x248>)
 8007c06:	4816      	ldr	r0, [pc, #88]	; (8007c60 <MX_LWIP_Init+0x25c>)
 8007c08:	f003 fd00 	bl	800b60c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007c0c:	4814      	ldr	r0, [pc, #80]	; (8007c60 <MX_LWIP_Init+0x25c>)
 8007c0e:	f003 feaf 	bl	800b970 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007c12:	4b13      	ldr	r3, [pc, #76]	; (8007c60 <MX_LWIP_Init+0x25c>)
 8007c14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c18:	089b      	lsrs	r3, r3, #2
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007c24:	480e      	ldr	r0, [pc, #56]	; (8007c60 <MX_LWIP_Init+0x25c>)
 8007c26:	f003 feb3 	bl	800b990 <netif_set_up>
 8007c2a:	e002      	b.n	8007c32 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007c2c:	480c      	ldr	r0, [pc, #48]	; (8007c60 <MX_LWIP_Init+0x25c>)
 8007c2e:	f003 ff1b 	bl	800ba68 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007c32:	490c      	ldr	r1, [pc, #48]	; (8007c64 <MX_LWIP_Init+0x260>)
 8007c34:	480a      	ldr	r0, [pc, #40]	; (8007c60 <MX_LWIP_Init+0x25c>)
 8007c36:	f003 ffad 	bl	800bb94 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007c3a:	bf00      	nop
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	2400069c 	.word	0x2400069c
 8007c44:	240006a0 	.word	0x240006a0
 8007c48:	240006a4 	.word	0x240006a4
 8007c4c:	24000690 	.word	0x24000690
 8007c50:	24000694 	.word	0x24000694
 8007c54:	24000698 	.word	0x24000698
 8007c58:	08009385 	.word	0x08009385
 8007c5c:	08007f71 	.word	0x08007f71
 8007c60:	2400065c 	.word	0x2400065c
 8007c64:	08007cb9 	.word	0x08007cb9

08007c68 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8007c70:	f7f9 fc04 	bl	800147c <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <Ethernet_Link_Periodic_Handle+0x30>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b63      	cmp	r3, #99	; 0x63
 8007c7e:	d907      	bls.n	8007c90 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8007c80:	f7f9 fbfc 	bl	800147c <HAL_GetTick>
 8007c84:	4603      	mov	r3, r0
 8007c86:	4a04      	ldr	r2, [pc, #16]	; (8007c98 <Ethernet_Link_Periodic_Handle+0x30>)
 8007c88:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fadc 	bl	8008248 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	24000658 	.word	0x24000658

08007c9c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8007ca0:	4804      	ldr	r0, [pc, #16]	; (8007cb4 <MX_LWIP_Process+0x18>)
 8007ca2:	f000 f945 	bl	8007f30 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8007ca6:	f009 ffe7 	bl	8011c78 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8007caa:	4802      	ldr	r0, [pc, #8]	; (8007cb4 <MX_LWIP_Process+0x18>)
 8007cac:	f7ff ffdc 	bl	8007c68 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007cb0:	bf00      	nop
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	2400065c 	.word	0x2400065c

08007cb8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007cd8:	4b3f      	ldr	r3, [pc, #252]	; (8007dd8 <low_level_init+0x10c>)
 8007cda:	4a40      	ldr	r2, [pc, #256]	; (8007ddc <low_level_init+0x110>)
 8007cdc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007ce2:	2380      	movs	r3, #128	; 0x80
 8007ce4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007ce6:	23e1      	movs	r3, #225	; 0xe1
 8007ce8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007cea:	2300      	movs	r3, #0
 8007cec:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007cf6:	4a38      	ldr	r2, [pc, #224]	; (8007dd8 <low_level_init+0x10c>)
 8007cf8:	f107 0308 	add.w	r3, r7, #8
 8007cfc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007cfe:	4b36      	ldr	r3, [pc, #216]	; (8007dd8 <low_level_init+0x10c>)
 8007d00:	2201      	movs	r2, #1
 8007d02:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007d04:	4b34      	ldr	r3, [pc, #208]	; (8007dd8 <low_level_init+0x10c>)
 8007d06:	4a36      	ldr	r2, [pc, #216]	; (8007de0 <low_level_init+0x114>)
 8007d08:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007d0a:	4b33      	ldr	r3, [pc, #204]	; (8007dd8 <low_level_init+0x10c>)
 8007d0c:	4a35      	ldr	r2, [pc, #212]	; (8007de4 <low_level_init+0x118>)
 8007d0e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007d10:	4b31      	ldr	r3, [pc, #196]	; (8007dd8 <low_level_init+0x10c>)
 8007d12:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007d16:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007d18:	482f      	ldr	r0, [pc, #188]	; (8007dd8 <low_level_init+0x10c>)
 8007d1a:	f7f9 fd5f 	bl	80017dc <HAL_ETH_Init>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007d22:	2238      	movs	r2, #56	; 0x38
 8007d24:	2100      	movs	r1, #0
 8007d26:	4830      	ldr	r0, [pc, #192]	; (8007de8 <low_level_init+0x11c>)
 8007d28:	f00a f9e4 	bl	80120f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007d2c:	4b2e      	ldr	r3, [pc, #184]	; (8007de8 <low_level_init+0x11c>)
 8007d2e:	2221      	movs	r2, #33	; 0x21
 8007d30:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007d32:	4b2d      	ldr	r3, [pc, #180]	; (8007de8 <low_level_init+0x11c>)
 8007d34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007d38:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007d3a:	4b2b      	ldr	r3, [pc, #172]	; (8007de8 <low_level_init+0x11c>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007d40:	482a      	ldr	r0, [pc, #168]	; (8007dec <low_level_init+0x120>)
 8007d42:	f003 fb2b 	bl	800b39c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2206      	movs	r2, #6
 8007d4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007d4e:	4b22      	ldr	r3, [pc, #136]	; (8007dd8 <low_level_init+0x10c>)
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	781a      	ldrb	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007d5a:	4b1f      	ldr	r3, [pc, #124]	; (8007dd8 <low_level_init+0x10c>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	785a      	ldrb	r2, [r3, #1]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007d66:	4b1c      	ldr	r3, [pc, #112]	; (8007dd8 <low_level_init+0x10c>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	789a      	ldrb	r2, [r3, #2]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007d72:	4b19      	ldr	r3, [pc, #100]	; (8007dd8 <low_level_init+0x10c>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	78da      	ldrb	r2, [r3, #3]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007d7e:	4b16      	ldr	r3, [pc, #88]	; (8007dd8 <low_level_init+0x10c>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	791a      	ldrb	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007d8a:	4b13      	ldr	r3, [pc, #76]	; (8007dd8 <low_level_init+0x10c>)
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	795a      	ldrb	r2, [r3, #5]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007d9c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007da4:	f043 030a 	orr.w	r3, r3, #10
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007db0:	490f      	ldr	r1, [pc, #60]	; (8007df0 <low_level_init+0x124>)
 8007db2:	4810      	ldr	r0, [pc, #64]	; (8007df4 <low_level_init+0x128>)
 8007db4:	f7f9 f97b 	bl	80010ae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007db8:	480e      	ldr	r0, [pc, #56]	; (8007df4 <low_level_init+0x128>)
 8007dba:	f7f9 f9aa 	bl	8001112 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d103      	bne.n	8007dcc <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fa3f 	bl	8008248 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007dca:	e001      	b.n	8007dd0 <low_level_init+0x104>
    Error_Handler();
 8007dcc:	f7f8 ff3c 	bl	8000c48 <Error_Handler>
}
 8007dd0:	bf00      	nop
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	24005034 	.word	0x24005034
 8007ddc:	40028000 	.word	0x40028000
 8007de0:	30040060 	.word	0x30040060
 8007de4:	30040000 	.word	0x30040000
 8007de8:	240050e4 	.word	0x240050e4
 8007dec:	08015db8 	.word	0x08015db8
 8007df0:	24000010 	.word	0x24000010
 8007df4:	2400511c 	.word	0x2400511c

08007df8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b092      	sub	sp, #72	; 0x48
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007e10:	f107 030c 	add.w	r3, r7, #12
 8007e14:	2230      	movs	r2, #48	; 0x30
 8007e16:	2100      	movs	r1, #0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f00a f96b 	bl	80120f4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007e1e:	f107 030c 	add.w	r3, r7, #12
 8007e22:	2230      	movs	r2, #48	; 0x30
 8007e24:	2100      	movs	r1, #0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f00a f964 	bl	80120f4 <memset>

  for(q = p; q != NULL; q = q->next)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8007e30:	e045      	b.n	8007ebe <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d902      	bls.n	8007e3e <low_level_output+0x46>
      return ERR_IF;
 8007e38:	f06f 030b 	mvn.w	r3, #11
 8007e3c:	e055      	b.n	8007eea <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8007e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e40:	6859      	ldr	r1, [r3, #4]
 8007e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e44:	4613      	mov	r3, r2
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	3348      	adds	r3, #72	; 0x48
 8007e4e:	443b      	add	r3, r7
 8007e50:	3b3c      	subs	r3, #60	; 0x3c
 8007e52:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e56:	895b      	ldrh	r3, [r3, #10]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	4413      	add	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	3348      	adds	r3, #72	; 0x48
 8007e66:	443b      	add	r3, r7
 8007e68:	3b38      	subs	r3, #56	; 0x38
 8007e6a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d011      	beq.n	8007e96 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e74:	1e5a      	subs	r2, r3, #1
 8007e76:	f107 000c 	add.w	r0, r7, #12
 8007e7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	440b      	add	r3, r1
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	18c1      	adds	r1, r0, r3
 8007e86:	4613      	mov	r3, r2
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	3348      	adds	r3, #72	; 0x48
 8007e90:	443b      	add	r3, r7
 8007e92:	3b34      	subs	r3, #52	; 0x34
 8007e94:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	3348      	adds	r3, #72	; 0x48
 8007eaa:	443b      	add	r3, r7
 8007eac:	3b34      	subs	r3, #52	; 0x34
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8007ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1b6      	bne.n	8007e32 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	891b      	ldrh	r3, [r3, #8]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <low_level_output+0xfc>)
 8007ecc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007ece:	4a09      	ldr	r2, [pc, #36]	; (8007ef4 <low_level_output+0xfc>)
 8007ed0:	f107 030c 	add.w	r3, r7, #12
 8007ed4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007ed6:	4a07      	ldr	r2, [pc, #28]	; (8007ef4 <low_level_output+0xfc>)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007edc:	2214      	movs	r2, #20
 8007ede:	4905      	ldr	r1, [pc, #20]	; (8007ef4 <low_level_output+0xfc>)
 8007ee0:	4805      	ldr	r0, [pc, #20]	; (8007ef8 <low_level_output+0x100>)
 8007ee2:	f7f9 fe13 	bl	8001b0c <HAL_ETH_Transmit>

  return errval;
 8007ee6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3748      	adds	r7, #72	; 0x48
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	240050e4 	.word	0x240050e4
 8007ef8:	24005034 	.word	0x24005034

08007efc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007f08:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <low_level_input+0x2c>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d105      	bne.n	8007f1c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007f10:	f107 030c 	add.w	r3, r7, #12
 8007f14:	4619      	mov	r1, r3
 8007f16:	4805      	ldr	r0, [pc, #20]	; (8007f2c <low_level_input+0x30>)
 8007f18:	f7f9 fe8f 	bl	8001c3a <HAL_ETH_ReadData>
  }

  return p;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	24005030 	.word	0x24005030
 8007f2c:	24005034 	.word	0x24005034

08007f30 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff ffdd 	bl	8007efc <low_level_input>
 8007f42:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	4798      	blx	r3
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f004 f99a 	bl	800c294 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1ea      	bne.n	8007f3c <ethernetif_input+0xc>
}
 8007f66:	bf00      	nop
 8007f68:	bf00      	nop
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d106      	bne.n	8007f8c <ethernetif_init+0x1c>
 8007f7e:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <ethernetif_init+0x48>)
 8007f80:	f240 127b 	movw	r2, #379	; 0x17b
 8007f84:	490d      	ldr	r1, [pc, #52]	; (8007fbc <ethernetif_init+0x4c>)
 8007f86:	480e      	ldr	r0, [pc, #56]	; (8007fc0 <ethernetif_init+0x50>)
 8007f88:	f00a f8bc 	bl	8012104 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2273      	movs	r2, #115	; 0x73
 8007f90:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2274      	movs	r2, #116	; 0x74
 8007f98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a09      	ldr	r2, [pc, #36]	; (8007fc4 <ethernetif_init+0x54>)
 8007fa0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a08      	ldr	r2, [pc, #32]	; (8007fc8 <ethernetif_init+0x58>)
 8007fa6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff fe8f 	bl	8007ccc <low_level_init>

  return ERR_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	080131bc 	.word	0x080131bc
 8007fbc:	080131d8 	.word	0x080131d8
 8007fc0:	080131e8 	.word	0x080131e8
 8007fc4:	08008d85 	.word	0x08008d85
 8007fc8:	08007df9 	.word	0x08007df9

08007fcc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007fd8:	68f9      	ldr	r1, [r7, #12]
 8007fda:	4807      	ldr	r0, [pc, #28]	; (8007ff8 <pbuf_free_custom+0x2c>)
 8007fdc:	f003 fac0 	bl	800b560 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007fe0:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <pbuf_free_custom+0x30>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d102      	bne.n	8007fee <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007fe8:	4b04      	ldr	r3, [pc, #16]	; (8007ffc <pbuf_free_custom+0x30>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]
  }
}
 8007fee:	bf00      	nop
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	08015db8 	.word	0x08015db8
 8007ffc:	24005030 	.word	0x24005030

08008000 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008004:	f7f9 fa3a 	bl	800147c <HAL_GetTick>
 8008008:	4603      	mov	r3, r0
}
 800800a:	4618      	mov	r0, r3
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08e      	sub	sp, #56	; 0x38
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	605a      	str	r2, [r3, #4]
 8008022:	609a      	str	r2, [r3, #8]
 8008024:	60da      	str	r2, [r3, #12]
 8008026:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a59      	ldr	r2, [pc, #356]	; (8008194 <HAL_ETH_MspInit+0x184>)
 800802e:	4293      	cmp	r3, r2
 8008030:	f040 80ab 	bne.w	800818a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8008034:	4b58      	ldr	r3, [pc, #352]	; (8008198 <HAL_ETH_MspInit+0x188>)
 8008036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800803a:	4a57      	ldr	r2, [pc, #348]	; (8008198 <HAL_ETH_MspInit+0x188>)
 800803c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008040:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008044:	4b54      	ldr	r3, [pc, #336]	; (8008198 <HAL_ETH_MspInit+0x188>)
 8008046:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800804a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800804e:	623b      	str	r3, [r7, #32]
 8008050:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8008052:	4b51      	ldr	r3, [pc, #324]	; (8008198 <HAL_ETH_MspInit+0x188>)
 8008054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008058:	4a4f      	ldr	r2, [pc, #316]	; (8008198 <HAL_ETH_MspInit+0x188>)
 800805a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800805e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008062:	4b4d      	ldr	r3, [pc, #308]	; (8008198 <HAL_ETH_MspInit+0x188>)
 8008064:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800806c:	61fb      	str	r3, [r7, #28]
 800806e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8008070:	4b49      	ldr	r3, [pc, #292]	; (8008198 <HAL_ETH_MspInit+0x188>)
 8008072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008076:	4a48      	ldr	r2, [pc, #288]	; (8008198 <HAL_ETH_MspInit+0x188>)
 8008078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800807c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008080:	4b45      	ldr	r3, [pc, #276]	; (8008198 <HAL_ETH_MspInit+0x188>)
 8008082:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800808e:	4b42      	ldr	r3, [pc, #264]	; (8008198 <HAL_ETH_MspInit+0x188>)
 8008090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008094:	4a40      	ldr	r2, [pc, #256]	; (8008198 <HAL_ETH_MspInit+0x188>)
 8008096:	f043 0304 	orr.w	r3, r3, #4
 800809a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800809e:	4b3e      	ldr	r3, [pc, #248]	; (8008198 <HAL_ETH_MspInit+0x188>)
 80080a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ac:	4b3a      	ldr	r3, [pc, #232]	; (8008198 <HAL_ETH_MspInit+0x188>)
 80080ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080b2:	4a39      	ldr	r2, [pc, #228]	; (8008198 <HAL_ETH_MspInit+0x188>)
 80080b4:	f043 0301 	orr.w	r3, r3, #1
 80080b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080bc:	4b36      	ldr	r3, [pc, #216]	; (8008198 <HAL_ETH_MspInit+0x188>)
 80080be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	613b      	str	r3, [r7, #16]
 80080c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080ca:	4b33      	ldr	r3, [pc, #204]	; (8008198 <HAL_ETH_MspInit+0x188>)
 80080cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080d0:	4a31      	ldr	r2, [pc, #196]	; (8008198 <HAL_ETH_MspInit+0x188>)
 80080d2:	f043 0302 	orr.w	r3, r3, #2
 80080d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080da:	4b2f      	ldr	r3, [pc, #188]	; (8008198 <HAL_ETH_MspInit+0x188>)
 80080dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80080e8:	4b2b      	ldr	r3, [pc, #172]	; (8008198 <HAL_ETH_MspInit+0x188>)
 80080ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080ee:	4a2a      	ldr	r2, [pc, #168]	; (8008198 <HAL_ETH_MspInit+0x188>)
 80080f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080f8:	4b27      	ldr	r3, [pc, #156]	; (8008198 <HAL_ETH_MspInit+0x188>)
 80080fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008102:	60bb      	str	r3, [r7, #8]
 8008104:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008106:	2332      	movs	r3, #50	; 0x32
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800810a:	2302      	movs	r3, #2
 800810c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800810e:	2300      	movs	r3, #0
 8008110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008112:	2300      	movs	r3, #0
 8008114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008116:	230b      	movs	r3, #11
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800811a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800811e:	4619      	mov	r1, r3
 8008120:	481e      	ldr	r0, [pc, #120]	; (800819c <HAL_ETH_MspInit+0x18c>)
 8008122:	f7fa ff1b 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008126:	2386      	movs	r3, #134	; 0x86
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800812a:	2302      	movs	r3, #2
 800812c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800812e:	2300      	movs	r3, #0
 8008130:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008132:	2300      	movs	r3, #0
 8008134:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008136:	230b      	movs	r3, #11
 8008138:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800813a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800813e:	4619      	mov	r1, r3
 8008140:	4817      	ldr	r0, [pc, #92]	; (80081a0 <HAL_ETH_MspInit+0x190>)
 8008142:	f7fa ff0b 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800814c:	2302      	movs	r3, #2
 800814e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008150:	2300      	movs	r3, #0
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008154:	2300      	movs	r3, #0
 8008156:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008158:	230b      	movs	r3, #11
 800815a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800815c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008160:	4619      	mov	r1, r3
 8008162:	4810      	ldr	r0, [pc, #64]	; (80081a4 <HAL_ETH_MspInit+0x194>)
 8008164:	f7fa fefa 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8008168:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800816e:	2302      	movs	r3, #2
 8008170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008172:	2300      	movs	r3, #0
 8008174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008176:	2300      	movs	r3, #0
 8008178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800817a:	230b      	movs	r3, #11
 800817c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800817e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008182:	4619      	mov	r1, r3
 8008184:	4808      	ldr	r0, [pc, #32]	; (80081a8 <HAL_ETH_MspInit+0x198>)
 8008186:	f7fa fee9 	bl	8002f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800818a:	bf00      	nop
 800818c:	3738      	adds	r7, #56	; 0x38
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40028000 	.word	0x40028000
 8008198:	58024400 	.word	0x58024400
 800819c:	58020800 	.word	0x58020800
 80081a0:	58020000 	.word	0x58020000
 80081a4:	58020400 	.word	0x58020400
 80081a8:	58021800 	.word	0x58021800

080081ac <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80081b0:	4802      	ldr	r0, [pc, #8]	; (80081bc <ETH_PHY_IO_Init+0x10>)
 80081b2:	f7fa f907 	bl	80023c4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	24005034 	.word	0x24005034

080081c0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80081c0:	b480      	push	{r7}
 80081c2:	af00      	add	r7, sp, #0
  return 0;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	68f9      	ldr	r1, [r7, #12]
 80081e2:	4807      	ldr	r0, [pc, #28]	; (8008200 <ETH_PHY_IO_ReadReg+0x30>)
 80081e4:	f7f9 fe57 	bl	8001e96 <HAL_ETH_ReadPHYRegister>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80081ee:	f04f 33ff 	mov.w	r3, #4294967295
 80081f2:	e000      	b.n	80081f6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	24005034 	.word	0x24005034

08008204 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	68f9      	ldr	r1, [r7, #12]
 8008216:	4807      	ldr	r0, [pc, #28]	; (8008234 <ETH_PHY_IO_WriteReg+0x30>)
 8008218:	f7f9 fe92 	bl	8001f40 <HAL_ETH_WritePHYRegister>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008222:	f04f 33ff 	mov.w	r3, #4294967295
 8008226:	e000      	b.n	800822a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	24005034 	.word	0x24005034

08008238 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800823c:	f7f9 f91e 	bl	800147c <HAL_GetTick>
 8008240:	4603      	mov	r3, r0
}
 8008242:	4618      	mov	r0, r3
 8008244:	bd80      	pop	{r7, pc}
	...

08008248 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b0a0      	sub	sp, #128	; 0x80
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008250:	f107 030c 	add.w	r3, r7, #12
 8008254:	2264      	movs	r2, #100	; 0x64
 8008256:	2100      	movs	r1, #0
 8008258:	4618      	mov	r0, r3
 800825a:	f009 ff4b 	bl	80120f4 <memset>
  int32_t PHYLinkState = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008266:	2300      	movs	r3, #0
 8008268:	67bb      	str	r3, [r7, #120]	; 0x78
 800826a:	2300      	movs	r3, #0
 800826c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800826e:	483a      	ldr	r0, [pc, #232]	; (8008358 <ethernet_link_check_state+0x110>)
 8008270:	f7f8 fff7 	bl	8001262 <LAN8742_GetLinkState>
 8008274:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800827c:	089b      	lsrs	r3, r3, #2
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00c      	beq.n	80082a2 <ethernet_link_check_state+0x5a>
 8008288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800828a:	2b01      	cmp	r3, #1
 800828c:	dc09      	bgt.n	80082a2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800828e:	4833      	ldr	r0, [pc, #204]	; (800835c <ethernet_link_check_state+0x114>)
 8008290:	f7f9 fbec 	bl	8001a6c <HAL_ETH_Stop>
    netif_set_down(netif);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f003 fbe7 	bl	800ba68 <netif_set_down>
    netif_set_link_down(netif);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f003 fc4a 	bl	800bb34 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80082a0:	e055      	b.n	800834e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d14e      	bne.n	800834e <ethernet_link_check_state+0x106>
 80082b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	dd4b      	ble.n	800834e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80082b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082b8:	3b02      	subs	r3, #2
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d82a      	bhi.n	8008314 <ethernet_link_check_state+0xcc>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <ethernet_link_check_state+0x7c>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082e7 	.word	0x080082e7
 80082cc:	080082f7 	.word	0x080082f7
 80082d0:	08008307 	.word	0x08008307
      duplex = ETH_FULLDUPLEX_MODE;
 80082d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082d8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80082da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082de:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80082e0:	2301      	movs	r3, #1
 80082e2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80082e4:	e017      	b.n	8008316 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80082e6:	2300      	movs	r3, #0
 80082e8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80082ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082ee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80082f0:	2301      	movs	r3, #1
 80082f2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80082f4:	e00f      	b.n	8008316 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80082f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082fa:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80082fc:	2300      	movs	r3, #0
 80082fe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008300:	2301      	movs	r3, #1
 8008302:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008304:	e007      	b.n	8008316 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008306:	2300      	movs	r3, #0
 8008308:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800830a:	2300      	movs	r3, #0
 800830c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800830e:	2301      	movs	r3, #1
 8008310:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008312:	e000      	b.n	8008316 <ethernet_link_check_state+0xce>
      break;
 8008314:	bf00      	nop
    if(linkchanged)
 8008316:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008318:	2b00      	cmp	r3, #0
 800831a:	d018      	beq.n	800834e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800831c:	f107 030c 	add.w	r3, r7, #12
 8008320:	4619      	mov	r1, r3
 8008322:	480e      	ldr	r0, [pc, #56]	; (800835c <ethernet_link_check_state+0x114>)
 8008324:	f7f9 fe60 	bl	8001fe8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800832c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800832e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008330:	f107 030c 	add.w	r3, r7, #12
 8008334:	4619      	mov	r1, r3
 8008336:	4809      	ldr	r0, [pc, #36]	; (800835c <ethernet_link_check_state+0x114>)
 8008338:	f7fa f82a 	bl	8002390 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800833c:	4807      	ldr	r0, [pc, #28]	; (800835c <ethernet_link_check_state+0x114>)
 800833e:	f7f9 fb33 	bl	80019a8 <HAL_ETH_Start>
      netif_set_up(netif);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f003 fb24 	bl	800b990 <netif_set_up>
      netif_set_link_up(netif);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f003 fbbf 	bl	800bacc <netif_set_link_up>
}
 800834e:	bf00      	nop
 8008350:	3780      	adds	r7, #128	; 0x80
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	2400511c 	.word	0x2400511c
 800835c:	24005034 	.word	0x24005034

08008360 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af02      	add	r7, sp, #8
 8008366:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008368:	4812      	ldr	r0, [pc, #72]	; (80083b4 <HAL_ETH_RxAllocateCallback+0x54>)
 800836a:	f003 f88b 	bl	800b484 <memp_malloc_pool>
 800836e:	60f8      	str	r0, [r7, #12]
  if (p)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d014      	beq.n	80083a0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f103 0220 	add.w	r2, r3, #32
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4a0d      	ldr	r2, [pc, #52]	; (80083b8 <HAL_ETH_RxAllocateCallback+0x58>)
 8008384:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800838e:	9201      	str	r2, [sp, #4]
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2241      	movs	r2, #65	; 0x41
 8008396:	2100      	movs	r1, #0
 8008398:	2000      	movs	r0, #0
 800839a:	f003 fdc1 	bl	800bf20 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800839e:	e005      	b.n	80083ac <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80083a0:	4b06      	ldr	r3, [pc, #24]	; (80083bc <HAL_ETH_RxAllocateCallback+0x5c>)
 80083a2:	2201      	movs	r2, #1
 80083a4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
}
 80083ac:	bf00      	nop
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	08015db8 	.word	0x08015db8
 80083b8:	08007fcd 	.word	0x08007fcd
 80083bc:	24005030 	.word	0x24005030

080083c0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b08d      	sub	sp, #52	; 0x34
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	3b20      	subs	r3, #32
 80083de:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	2200      	movs	r2, #0
 80083e4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	2200      	movs	r2, #0
 80083ea:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	887a      	ldrh	r2, [r7, #2]
 80083f0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	e003      	b.n	800840a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008408:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800840e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008416:	e009      	b.n	800842c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	891a      	ldrh	r2, [r3, #8]
 800841c:	887b      	ldrh	r3, [r7, #2]
 800841e:	4413      	add	r3, r2
 8008420:	b29a      	uxth	r2, r3
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1f2      	bne.n	8008418 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008432:	887b      	ldrh	r3, [r7, #2]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	623a      	str	r2, [r7, #32]
 8008438:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	2b00      	cmp	r3, #0
 800843e:	dd1d      	ble.n	800847c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	f003 021f 	and.w	r2, r3, #31
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008450:	f3bf 8f4f 	dsb	sy
}
 8008454:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008456:	4a0d      	ldr	r2, [pc, #52]	; (800848c <HAL_ETH_RxLinkCallback+0xcc>)
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	3320      	adds	r3, #32
 8008462:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	3b20      	subs	r3, #32
 8008468:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	2b00      	cmp	r3, #0
 800846e:	dcf2      	bgt.n	8008456 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8008470:	f3bf 8f4f 	dsb	sy
}
 8008474:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008476:	f3bf 8f6f 	isb	sy
}
 800847a:	bf00      	nop
}
 800847c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800847e:	bf00      	nop
 8008480:	3734      	adds	r7, #52	; 0x34
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	e000ed00 	.word	0xe000ed00

08008490 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800849a:	88fb      	ldrh	r3, [r7, #6]
 800849c:	021b      	lsls	r3, r3, #8
 800849e:	b21a      	sxth	r2, r3
 80084a0:	88fb      	ldrh	r3, [r7, #6]
 80084a2:	0a1b      	lsrs	r3, r3, #8
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	4313      	orrs	r3, r2
 80084aa:	b21b      	sxth	r3, r3
 80084ac:	b29b      	uxth	r3, r3
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	061a      	lsls	r2, r3, #24
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	021b      	lsls	r3, r3, #8
 80084ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084ce:	431a      	orrs	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	0e1b      	lsrs	r3, r3, #24
 80084de:	4313      	orrs	r3, r2
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80084f4:	4915      	ldr	r1, [pc, #84]	; (800854c <etharp_free_entry+0x60>)
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	4613      	mov	r3, r2
 80084fa:	005b      	lsls	r3, r3, #1
 80084fc:	4413      	add	r3, r2
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	440b      	add	r3, r1
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d013      	beq.n	8008530 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8008508:	4910      	ldr	r1, [pc, #64]	; (800854c <etharp_free_entry+0x60>)
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	4613      	mov	r3, r2
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	4413      	add	r3, r2
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	440b      	add	r3, r1
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4618      	mov	r0, r3
 800851a:	f003 febb 	bl	800c294 <pbuf_free>
    arp_table[i].q = NULL;
 800851e:	490b      	ldr	r1, [pc, #44]	; (800854c <etharp_free_entry+0x60>)
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	4613      	mov	r3, r2
 8008524:	005b      	lsls	r3, r3, #1
 8008526:	4413      	add	r3, r2
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	440b      	add	r3, r1
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8008530:	4906      	ldr	r1, [pc, #24]	; (800854c <etharp_free_entry+0x60>)
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	005b      	lsls	r3, r3, #1
 8008538:	4413      	add	r3, r2
 800853a:	00db      	lsls	r3, r3, #3
 800853c:	440b      	add	r3, r1
 800853e:	3314      	adds	r3, #20
 8008540:	2200      	movs	r2, #0
 8008542:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	2400513c 	.word	0x2400513c

08008550 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008556:	2300      	movs	r3, #0
 8008558:	607b      	str	r3, [r7, #4]
 800855a:	e096      	b.n	800868a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800855c:	494f      	ldr	r1, [pc, #316]	; (800869c <etharp_tmr+0x14c>)
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	4613      	mov	r3, r2
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	4413      	add	r3, r2
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	440b      	add	r3, r1
 800856a:	3314      	adds	r3, #20
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 8086 	beq.w	8008684 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8008578:	4948      	ldr	r1, [pc, #288]	; (800869c <etharp_tmr+0x14c>)
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	4613      	mov	r3, r2
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	4413      	add	r3, r2
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	440b      	add	r3, r1
 8008586:	3312      	adds	r3, #18
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	3301      	adds	r3, #1
 800858c:	b298      	uxth	r0, r3
 800858e:	4943      	ldr	r1, [pc, #268]	; (800869c <etharp_tmr+0x14c>)
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4613      	mov	r3, r2
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	4413      	add	r3, r2
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	440b      	add	r3, r1
 800859c:	3312      	adds	r3, #18
 800859e:	4602      	mov	r2, r0
 80085a0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80085a2:	493e      	ldr	r1, [pc, #248]	; (800869c <etharp_tmr+0x14c>)
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	4613      	mov	r3, r2
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	4413      	add	r3, r2
 80085ac:	00db      	lsls	r3, r3, #3
 80085ae:	440b      	add	r3, r1
 80085b0:	3312      	adds	r3, #18
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80085b8:	d215      	bcs.n	80085e6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80085ba:	4938      	ldr	r1, [pc, #224]	; (800869c <etharp_tmr+0x14c>)
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	4413      	add	r3, r2
 80085c4:	00db      	lsls	r3, r3, #3
 80085c6:	440b      	add	r3, r1
 80085c8:	3314      	adds	r3, #20
 80085ca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d10e      	bne.n	80085ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80085d0:	4932      	ldr	r1, [pc, #200]	; (800869c <etharp_tmr+0x14c>)
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	4613      	mov	r3, r2
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	4413      	add	r3, r2
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	440b      	add	r3, r1
 80085de:	3312      	adds	r3, #18
 80085e0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	d903      	bls.n	80085ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff ff80 	bl	80084ec <etharp_free_entry>
 80085ec:	e04a      	b.n	8008684 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80085ee:	492b      	ldr	r1, [pc, #172]	; (800869c <etharp_tmr+0x14c>)
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	4613      	mov	r3, r2
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	4413      	add	r3, r2
 80085f8:	00db      	lsls	r3, r3, #3
 80085fa:	440b      	add	r3, r1
 80085fc:	3314      	adds	r3, #20
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b03      	cmp	r3, #3
 8008602:	d10a      	bne.n	800861a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008604:	4925      	ldr	r1, [pc, #148]	; (800869c <etharp_tmr+0x14c>)
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	4613      	mov	r3, r2
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	4413      	add	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	440b      	add	r3, r1
 8008612:	3314      	adds	r3, #20
 8008614:	2204      	movs	r2, #4
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	e034      	b.n	8008684 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800861a:	4920      	ldr	r1, [pc, #128]	; (800869c <etharp_tmr+0x14c>)
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	4413      	add	r3, r2
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	440b      	add	r3, r1
 8008628:	3314      	adds	r3, #20
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b04      	cmp	r3, #4
 800862e:	d10a      	bne.n	8008646 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8008630:	491a      	ldr	r1, [pc, #104]	; (800869c <etharp_tmr+0x14c>)
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	4613      	mov	r3, r2
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	4413      	add	r3, r2
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	440b      	add	r3, r1
 800863e:	3314      	adds	r3, #20
 8008640:	2202      	movs	r2, #2
 8008642:	701a      	strb	r2, [r3, #0]
 8008644:	e01e      	b.n	8008684 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008646:	4915      	ldr	r1, [pc, #84]	; (800869c <etharp_tmr+0x14c>)
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	4613      	mov	r3, r2
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4413      	add	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	440b      	add	r3, r1
 8008654:	3314      	adds	r3, #20
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d113      	bne.n	8008684 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800865c:	490f      	ldr	r1, [pc, #60]	; (800869c <etharp_tmr+0x14c>)
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	4613      	mov	r3, r2
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	4413      	add	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	440b      	add	r3, r1
 800866a:	3308      	adds	r3, #8
 800866c:	6818      	ldr	r0, [r3, #0]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	4613      	mov	r3, r2
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	4413      	add	r3, r2
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	4a08      	ldr	r2, [pc, #32]	; (800869c <etharp_tmr+0x14c>)
 800867a:	4413      	add	r3, r2
 800867c:	3304      	adds	r3, #4
 800867e:	4619      	mov	r1, r3
 8008680:	f000 fe6e 	bl	8009360 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3301      	adds	r3, #1
 8008688:	607b      	str	r3, [r7, #4]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b09      	cmp	r3, #9
 800868e:	f77f af65 	ble.w	800855c <etharp_tmr+0xc>
      }
    }
  }
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	2400513c 	.word	0x2400513c

080086a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08a      	sub	sp, #40	; 0x28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	460b      	mov	r3, r1
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80086ae:	230a      	movs	r3, #10
 80086b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80086b2:	230a      	movs	r3, #10
 80086b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80086b6:	230a      	movs	r3, #10
 80086b8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80086be:	230a      	movs	r3, #10
 80086c0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	83bb      	strh	r3, [r7, #28]
 80086c6:	2300      	movs	r3, #0
 80086c8:	837b      	strh	r3, [r7, #26]
 80086ca:	2300      	movs	r3, #0
 80086cc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80086ce:	2300      	movs	r3, #0
 80086d0:	843b      	strh	r3, [r7, #32]
 80086d2:	e0ae      	b.n	8008832 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80086d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80086d8:	49a6      	ldr	r1, [pc, #664]	; (8008974 <etharp_find_entry+0x2d4>)
 80086da:	4613      	mov	r3, r2
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	4413      	add	r3, r2
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	440b      	add	r3, r1
 80086e4:	3314      	adds	r3, #20
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80086ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80086ee:	2b0a      	cmp	r3, #10
 80086f0:	d105      	bne.n	80086fe <etharp_find_entry+0x5e>
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d102      	bne.n	80086fe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80086f8:	8c3b      	ldrh	r3, [r7, #32]
 80086fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80086fc:	e095      	b.n	800882a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 8092 	beq.w	800882a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d009      	beq.n	8008720 <etharp_find_entry+0x80>
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d806      	bhi.n	8008720 <etharp_find_entry+0x80>
 8008712:	4b99      	ldr	r3, [pc, #612]	; (8008978 <etharp_find_entry+0x2d8>)
 8008714:	f240 1223 	movw	r2, #291	; 0x123
 8008718:	4998      	ldr	r1, [pc, #608]	; (800897c <etharp_find_entry+0x2dc>)
 800871a:	4899      	ldr	r0, [pc, #612]	; (8008980 <etharp_find_entry+0x2e0>)
 800871c:	f009 fcf2 	bl	8012104 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d020      	beq.n	8008768 <etharp_find_entry+0xc8>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6819      	ldr	r1, [r3, #0]
 800872a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800872e:	4891      	ldr	r0, [pc, #580]	; (8008974 <etharp_find_entry+0x2d4>)
 8008730:	4613      	mov	r3, r2
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	4413      	add	r3, r2
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	4403      	add	r3, r0
 800873a:	3304      	adds	r3, #4
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4299      	cmp	r1, r3
 8008740:	d112      	bne.n	8008768 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00c      	beq.n	8008762 <etharp_find_entry+0xc2>
 8008748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800874c:	4989      	ldr	r1, [pc, #548]	; (8008974 <etharp_find_entry+0x2d4>)
 800874e:	4613      	mov	r3, r2
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	4413      	add	r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	440b      	add	r3, r1
 8008758:	3308      	adds	r3, #8
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	429a      	cmp	r2, r3
 8008760:	d102      	bne.n	8008768 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8008762:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008766:	e100      	b.n	800896a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d140      	bne.n	80087f0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800876e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008772:	4980      	ldr	r1, [pc, #512]	; (8008974 <etharp_find_entry+0x2d4>)
 8008774:	4613      	mov	r3, r2
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	4413      	add	r3, r2
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	440b      	add	r3, r1
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01a      	beq.n	80087ba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8008784:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008788:	497a      	ldr	r1, [pc, #488]	; (8008974 <etharp_find_entry+0x2d4>)
 800878a:	4613      	mov	r3, r2
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	4413      	add	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	440b      	add	r3, r1
 8008794:	3312      	adds	r3, #18
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	8bba      	ldrh	r2, [r7, #28]
 800879a:	429a      	cmp	r2, r3
 800879c:	d845      	bhi.n	800882a <etharp_find_entry+0x18a>
            old_queue = i;
 800879e:	8c3b      	ldrh	r3, [r7, #32]
 80087a0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80087a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087a6:	4973      	ldr	r1, [pc, #460]	; (8008974 <etharp_find_entry+0x2d4>)
 80087a8:	4613      	mov	r3, r2
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	4413      	add	r3, r2
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	440b      	add	r3, r1
 80087b2:	3312      	adds	r3, #18
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	83bb      	strh	r3, [r7, #28]
 80087b8:	e037      	b.n	800882a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80087ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087be:	496d      	ldr	r1, [pc, #436]	; (8008974 <etharp_find_entry+0x2d4>)
 80087c0:	4613      	mov	r3, r2
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	4413      	add	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	440b      	add	r3, r1
 80087ca:	3312      	adds	r3, #18
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	8b7a      	ldrh	r2, [r7, #26]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d82a      	bhi.n	800882a <etharp_find_entry+0x18a>
            old_pending = i;
 80087d4:	8c3b      	ldrh	r3, [r7, #32]
 80087d6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80087d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087dc:	4965      	ldr	r1, [pc, #404]	; (8008974 <etharp_find_entry+0x2d4>)
 80087de:	4613      	mov	r3, r2
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	4413      	add	r3, r2
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	440b      	add	r3, r1
 80087e8:	3312      	adds	r3, #18
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	837b      	strh	r3, [r7, #26]
 80087ee:	e01c      	b.n	800882a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d919      	bls.n	800882a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80087f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087fa:	495e      	ldr	r1, [pc, #376]	; (8008974 <etharp_find_entry+0x2d4>)
 80087fc:	4613      	mov	r3, r2
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	4413      	add	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	440b      	add	r3, r1
 8008806:	3312      	adds	r3, #18
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	8b3a      	ldrh	r2, [r7, #24]
 800880c:	429a      	cmp	r2, r3
 800880e:	d80c      	bhi.n	800882a <etharp_find_entry+0x18a>
            old_stable = i;
 8008810:	8c3b      	ldrh	r3, [r7, #32]
 8008812:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8008814:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008818:	4956      	ldr	r1, [pc, #344]	; (8008974 <etharp_find_entry+0x2d4>)
 800881a:	4613      	mov	r3, r2
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	4413      	add	r3, r2
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	440b      	add	r3, r1
 8008824:	3312      	adds	r3, #18
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800882a:	8c3b      	ldrh	r3, [r7, #32]
 800882c:	3301      	adds	r3, #1
 800882e:	b29b      	uxth	r3, r3
 8008830:	843b      	strh	r3, [r7, #32]
 8008832:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008836:	2b09      	cmp	r3, #9
 8008838:	f77f af4c 	ble.w	80086d4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800883c:	7afb      	ldrb	r3, [r7, #11]
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d108      	bne.n	8008858 <etharp_find_entry+0x1b8>
 8008846:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800884a:	2b0a      	cmp	r3, #10
 800884c:	d107      	bne.n	800885e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b00      	cmp	r3, #0
 8008856:	d102      	bne.n	800885e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8008858:	f04f 33ff 	mov.w	r3, #4294967295
 800885c:	e085      	b.n	800896a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800885e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008862:	2b09      	cmp	r3, #9
 8008864:	dc02      	bgt.n	800886c <etharp_find_entry+0x1cc>
    i = empty;
 8008866:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008868:	843b      	strh	r3, [r7, #32]
 800886a:	e039      	b.n	80088e0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800886c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008870:	2b09      	cmp	r3, #9
 8008872:	dc14      	bgt.n	800889e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8008874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008876:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8008878:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800887c:	493d      	ldr	r1, [pc, #244]	; (8008974 <etharp_find_entry+0x2d4>)
 800887e:	4613      	mov	r3, r2
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	4413      	add	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	440b      	add	r3, r1
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d018      	beq.n	80088c0 <etharp_find_entry+0x220>
 800888e:	4b3a      	ldr	r3, [pc, #232]	; (8008978 <etharp_find_entry+0x2d8>)
 8008890:	f240 126d 	movw	r2, #365	; 0x16d
 8008894:	493b      	ldr	r1, [pc, #236]	; (8008984 <etharp_find_entry+0x2e4>)
 8008896:	483a      	ldr	r0, [pc, #232]	; (8008980 <etharp_find_entry+0x2e0>)
 8008898:	f009 fc34 	bl	8012104 <iprintf>
 800889c:	e010      	b.n	80088c0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800889e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80088a2:	2b09      	cmp	r3, #9
 80088a4:	dc02      	bgt.n	80088ac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80088a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088a8:	843b      	strh	r3, [r7, #32]
 80088aa:	e009      	b.n	80088c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80088ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80088b0:	2b09      	cmp	r3, #9
 80088b2:	dc02      	bgt.n	80088ba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80088b4:	8bfb      	ldrh	r3, [r7, #30]
 80088b6:	843b      	strh	r3, [r7, #32]
 80088b8:	e002      	b.n	80088c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80088ba:	f04f 33ff 	mov.w	r3, #4294967295
 80088be:	e054      	b.n	800896a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80088c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80088c4:	2b09      	cmp	r3, #9
 80088c6:	dd06      	ble.n	80088d6 <etharp_find_entry+0x236>
 80088c8:	4b2b      	ldr	r3, [pc, #172]	; (8008978 <etharp_find_entry+0x2d8>)
 80088ca:	f240 127f 	movw	r2, #383	; 0x17f
 80088ce:	492e      	ldr	r1, [pc, #184]	; (8008988 <etharp_find_entry+0x2e8>)
 80088d0:	482b      	ldr	r0, [pc, #172]	; (8008980 <etharp_find_entry+0x2e0>)
 80088d2:	f009 fc17 	bl	8012104 <iprintf>
    etharp_free_entry(i);
 80088d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7ff fe06 	bl	80084ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80088e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80088e4:	2b09      	cmp	r3, #9
 80088e6:	dd06      	ble.n	80088f6 <etharp_find_entry+0x256>
 80088e8:	4b23      	ldr	r3, [pc, #140]	; (8008978 <etharp_find_entry+0x2d8>)
 80088ea:	f240 1283 	movw	r2, #387	; 0x183
 80088ee:	4926      	ldr	r1, [pc, #152]	; (8008988 <etharp_find_entry+0x2e8>)
 80088f0:	4823      	ldr	r0, [pc, #140]	; (8008980 <etharp_find_entry+0x2e0>)
 80088f2:	f009 fc07 	bl	8012104 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80088f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80088fa:	491e      	ldr	r1, [pc, #120]	; (8008974 <etharp_find_entry+0x2d4>)
 80088fc:	4613      	mov	r3, r2
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	4413      	add	r3, r2
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	440b      	add	r3, r1
 8008906:	3314      	adds	r3, #20
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d006      	beq.n	800891c <etharp_find_entry+0x27c>
 800890e:	4b1a      	ldr	r3, [pc, #104]	; (8008978 <etharp_find_entry+0x2d8>)
 8008910:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008914:	491d      	ldr	r1, [pc, #116]	; (800898c <etharp_find_entry+0x2ec>)
 8008916:	481a      	ldr	r0, [pc, #104]	; (8008980 <etharp_find_entry+0x2e0>)
 8008918:	f009 fbf4 	bl	8012104 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00b      	beq.n	800893a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8008922:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6819      	ldr	r1, [r3, #0]
 800892a:	4812      	ldr	r0, [pc, #72]	; (8008974 <etharp_find_entry+0x2d4>)
 800892c:	4613      	mov	r3, r2
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	4413      	add	r3, r2
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	4403      	add	r3, r0
 8008936:	3304      	adds	r3, #4
 8008938:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800893a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800893e:	490d      	ldr	r1, [pc, #52]	; (8008974 <etharp_find_entry+0x2d4>)
 8008940:	4613      	mov	r3, r2
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	4413      	add	r3, r2
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	440b      	add	r3, r1
 800894a:	3312      	adds	r3, #18
 800894c:	2200      	movs	r2, #0
 800894e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8008950:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008954:	4907      	ldr	r1, [pc, #28]	; (8008974 <etharp_find_entry+0x2d4>)
 8008956:	4613      	mov	r3, r2
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	4413      	add	r3, r2
 800895c:	00db      	lsls	r3, r3, #3
 800895e:	440b      	add	r3, r1
 8008960:	3308      	adds	r3, #8
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8008966:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3728      	adds	r7, #40	; 0x28
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	2400513c 	.word	0x2400513c
 8008978:	08013210 	.word	0x08013210
 800897c:	0801326c 	.word	0x0801326c
 8008980:	080132ac 	.word	0x080132ac
 8008984:	080132d4 	.word	0x080132d4
 8008988:	080132ec 	.word	0x080132ec
 800898c:	08013300 	.word	0x08013300

08008990 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af02      	add	r7, sp, #8
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089a4:	2b06      	cmp	r3, #6
 80089a6:	d006      	beq.n	80089b6 <etharp_update_arp_entry+0x26>
 80089a8:	4b48      	ldr	r3, [pc, #288]	; (8008acc <etharp_update_arp_entry+0x13c>)
 80089aa:	f240 12a9 	movw	r2, #425	; 0x1a9
 80089ae:	4948      	ldr	r1, [pc, #288]	; (8008ad0 <etharp_update_arp_entry+0x140>)
 80089b0:	4848      	ldr	r0, [pc, #288]	; (8008ad4 <etharp_update_arp_entry+0x144>)
 80089b2:	f009 fba7 	bl	8012104 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d012      	beq.n	80089e2 <etharp_update_arp_entry+0x52>
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00e      	beq.n	80089e2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68f9      	ldr	r1, [r7, #12]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f001 facc 	bl	8009f68 <ip4_addr_isbroadcast_u32>
 80089d0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d105      	bne.n	80089e2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80089de:	2be0      	cmp	r3, #224	; 0xe0
 80089e0:	d102      	bne.n	80089e8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80089e2:	f06f 030f 	mvn.w	r3, #15
 80089e6:	e06c      	b.n	8008ac2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4619      	mov	r1, r3
 80089ee:	68b8      	ldr	r0, [r7, #8]
 80089f0:	f7ff fe56 	bl	80086a0 <etharp_find_entry>
 80089f4:	4603      	mov	r3, r0
 80089f6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80089f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	da02      	bge.n	8008a06 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8008a00:	8afb      	ldrh	r3, [r7, #22]
 8008a02:	b25b      	sxtb	r3, r3
 8008a04:	e05d      	b.n	8008ac2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8008a06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a0a:	4933      	ldr	r1, [pc, #204]	; (8008ad8 <etharp_update_arp_entry+0x148>)
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	4413      	add	r3, r2
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	440b      	add	r3, r1
 8008a16:	3314      	adds	r3, #20
 8008a18:	2202      	movs	r2, #2
 8008a1a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8008a1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a20:	492d      	ldr	r1, [pc, #180]	; (8008ad8 <etharp_update_arp_entry+0x148>)
 8008a22:	4613      	mov	r3, r2
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	4413      	add	r3, r2
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	440b      	add	r3, r1
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8008a32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a36:	4613      	mov	r3, r2
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	4413      	add	r3, r2
 8008a3c:	00db      	lsls	r3, r3, #3
 8008a3e:	3308      	adds	r3, #8
 8008a40:	4a25      	ldr	r2, [pc, #148]	; (8008ad8 <etharp_update_arp_entry+0x148>)
 8008a42:	4413      	add	r3, r2
 8008a44:	3304      	adds	r3, #4
 8008a46:	2206      	movs	r2, #6
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f009 fb44 	bl	80120d8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8008a50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a54:	4920      	ldr	r1, [pc, #128]	; (8008ad8 <etharp_update_arp_entry+0x148>)
 8008a56:	4613      	mov	r3, r2
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	4413      	add	r3, r2
 8008a5c:	00db      	lsls	r3, r3, #3
 8008a5e:	440b      	add	r3, r1
 8008a60:	3312      	adds	r3, #18
 8008a62:	2200      	movs	r2, #0
 8008a64:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8008a66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a6a:	491b      	ldr	r1, [pc, #108]	; (8008ad8 <etharp_update_arp_entry+0x148>)
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	4413      	add	r3, r2
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	440b      	add	r3, r1
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d021      	beq.n	8008ac0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8008a7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a80:	4915      	ldr	r1, [pc, #84]	; (8008ad8 <etharp_update_arp_entry+0x148>)
 8008a82:	4613      	mov	r3, r2
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	4413      	add	r3, r2
 8008a88:	00db      	lsls	r3, r3, #3
 8008a8a:	440b      	add	r3, r1
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8008a90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a94:	4910      	ldr	r1, [pc, #64]	; (8008ad8 <etharp_update_arp_entry+0x148>)
 8008a96:	4613      	mov	r3, r2
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	4413      	add	r3, r2
 8008a9c:	00db      	lsls	r3, r3, #3
 8008a9e:	440b      	add	r3, r1
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6939      	ldr	r1, [r7, #16]
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 fcf3 	bl	80094a0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8008aba:	6938      	ldr	r0, [r7, #16]
 8008abc:	f003 fbea 	bl	800c294 <pbuf_free>
  }
  return ERR_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	08013210 	.word	0x08013210
 8008ad0:	0801332c 	.word	0x0801332c
 8008ad4:	080132ac 	.word	0x080132ac
 8008ad8:	2400513c 	.word	0x2400513c

08008adc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	e01e      	b.n	8008b28 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8008aea:	4913      	ldr	r1, [pc, #76]	; (8008b38 <etharp_cleanup_netif+0x5c>)
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4613      	mov	r3, r2
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	4413      	add	r3, r2
 8008af4:	00db      	lsls	r3, r3, #3
 8008af6:	440b      	add	r3, r1
 8008af8:	3314      	adds	r3, #20
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8008afe:	7afb      	ldrb	r3, [r7, #11]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00e      	beq.n	8008b22 <etharp_cleanup_netif+0x46>
 8008b04:	490c      	ldr	r1, [pc, #48]	; (8008b38 <etharp_cleanup_netif+0x5c>)
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	4413      	add	r3, r2
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	440b      	add	r3, r1
 8008b12:	3308      	adds	r3, #8
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d102      	bne.n	8008b22 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f7ff fce5 	bl	80084ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3301      	adds	r3, #1
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b09      	cmp	r3, #9
 8008b2c:	dddd      	ble.n	8008aea <etharp_cleanup_netif+0xe>
    }
  }
}
 8008b2e:	bf00      	nop
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	2400513c 	.word	0x2400513c

08008b3c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8008b3c:	b5b0      	push	{r4, r5, r7, lr}
 8008b3e:	b08a      	sub	sp, #40	; 0x28
 8008b40:	af04      	add	r7, sp, #16
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d107      	bne.n	8008b5c <etharp_input+0x20>
 8008b4c:	4b3d      	ldr	r3, [pc, #244]	; (8008c44 <etharp_input+0x108>)
 8008b4e:	f240 228a 	movw	r2, #650	; 0x28a
 8008b52:	493d      	ldr	r1, [pc, #244]	; (8008c48 <etharp_input+0x10c>)
 8008b54:	483d      	ldr	r0, [pc, #244]	; (8008c4c <etharp_input+0x110>)
 8008b56:	f009 fad5 	bl	8012104 <iprintf>
 8008b5a:	e06f      	b.n	8008c3c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b6c:	d10c      	bne.n	8008b88 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008b72:	2b06      	cmp	r3, #6
 8008b74:	d108      	bne.n	8008b88 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d104      	bne.n	8008b88 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	885b      	ldrh	r3, [r3, #2]
 8008b82:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d003      	beq.n	8008b90 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f003 fb83 	bl	800c294 <pbuf_free>
    return;
 8008b8e:	e055      	b.n	8008c3c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	330e      	adds	r3, #14
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	3318      	adds	r3, #24
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d102      	bne.n	8008bb0 <etharp_input+0x74>
    for_us = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]
 8008bae:	e009      	b.n	8008bc4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	bf0c      	ite	eq
 8008bbc:	2301      	moveq	r3, #1
 8008bbe:	2300      	movne	r3, #0
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f103 0208 	add.w	r2, r3, #8
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <etharp_input+0x98>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e000      	b.n	8008bd6 <etharp_input+0x9a>
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	f107 010c 	add.w	r1, r7, #12
 8008bda:	6838      	ldr	r0, [r7, #0]
 8008bdc:	f7ff fed8 	bl	8008990 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	88db      	ldrh	r3, [r3, #6]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bea:	d003      	beq.n	8008bf4 <etharp_input+0xb8>
 8008bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf0:	d01e      	beq.n	8008c30 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8008bf2:	e020      	b.n	8008c36 <etharp_input+0xfa>
      if (for_us) {
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d01c      	beq.n	8008c34 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	3208      	adds	r2, #8
        etharp_raw(netif,
 8008c14:	2102      	movs	r1, #2
 8008c16:	9103      	str	r1, [sp, #12]
 8008c18:	f107 010c 	add.w	r1, r7, #12
 8008c1c:	9102      	str	r1, [sp, #8]
 8008c1e:	9201      	str	r2, [sp, #4]
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	462b      	mov	r3, r5
 8008c24:	4622      	mov	r2, r4
 8008c26:	4601      	mov	r1, r0
 8008c28:	6838      	ldr	r0, [r7, #0]
 8008c2a:	f000 faeb 	bl	8009204 <etharp_raw>
      break;
 8008c2e:	e001      	b.n	8008c34 <etharp_input+0xf8>
      break;
 8008c30:	bf00      	nop
 8008c32:	e000      	b.n	8008c36 <etharp_input+0xfa>
      break;
 8008c34:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f003 fb2c 	bl	800c294 <pbuf_free>
}
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bdb0      	pop	{r4, r5, r7, pc}
 8008c42:	bf00      	nop
 8008c44:	08013210 	.word	0x08013210
 8008c48:	08013384 	.word	0x08013384
 8008c4c:	080132ac 	.word	0x080132ac

08008c50 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af02      	add	r7, sp, #8
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008c5e:	79fa      	ldrb	r2, [r7, #7]
 8008c60:	4944      	ldr	r1, [pc, #272]	; (8008d74 <etharp_output_to_arp_index+0x124>)
 8008c62:	4613      	mov	r3, r2
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	4413      	add	r3, r2
 8008c68:	00db      	lsls	r3, r3, #3
 8008c6a:	440b      	add	r3, r1
 8008c6c:	3314      	adds	r3, #20
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d806      	bhi.n	8008c82 <etharp_output_to_arp_index+0x32>
 8008c74:	4b40      	ldr	r3, [pc, #256]	; (8008d78 <etharp_output_to_arp_index+0x128>)
 8008c76:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008c7a:	4940      	ldr	r1, [pc, #256]	; (8008d7c <etharp_output_to_arp_index+0x12c>)
 8008c7c:	4840      	ldr	r0, [pc, #256]	; (8008d80 <etharp_output_to_arp_index+0x130>)
 8008c7e:	f009 fa41 	bl	8012104 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008c82:	79fa      	ldrb	r2, [r7, #7]
 8008c84:	493b      	ldr	r1, [pc, #236]	; (8008d74 <etharp_output_to_arp_index+0x124>)
 8008c86:	4613      	mov	r3, r2
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	4413      	add	r3, r2
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	440b      	add	r3, r1
 8008c90:	3314      	adds	r3, #20
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d153      	bne.n	8008d40 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008c98:	79fa      	ldrb	r2, [r7, #7]
 8008c9a:	4936      	ldr	r1, [pc, #216]	; (8008d74 <etharp_output_to_arp_index+0x124>)
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	4413      	add	r3, r2
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	440b      	add	r3, r1
 8008ca6:	3312      	adds	r3, #18
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008cae:	d919      	bls.n	8008ce4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008cb0:	79fa      	ldrb	r2, [r7, #7]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	4413      	add	r3, r2
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	4a2e      	ldr	r2, [pc, #184]	; (8008d74 <etharp_output_to_arp_index+0x124>)
 8008cbc:	4413      	add	r3, r2
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 fb4c 	bl	8009360 <etharp_request>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d138      	bne.n	8008d40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008cce:	79fa      	ldrb	r2, [r7, #7]
 8008cd0:	4928      	ldr	r1, [pc, #160]	; (8008d74 <etharp_output_to_arp_index+0x124>)
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	4413      	add	r3, r2
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	440b      	add	r3, r1
 8008cdc:	3314      	adds	r3, #20
 8008cde:	2203      	movs	r2, #3
 8008ce0:	701a      	strb	r2, [r3, #0]
 8008ce2:	e02d      	b.n	8008d40 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008ce4:	79fa      	ldrb	r2, [r7, #7]
 8008ce6:	4923      	ldr	r1, [pc, #140]	; (8008d74 <etharp_output_to_arp_index+0x124>)
 8008ce8:	4613      	mov	r3, r2
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	4413      	add	r3, r2
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	440b      	add	r3, r1
 8008cf2:	3312      	adds	r3, #18
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008cfa:	d321      	bcc.n	8008d40 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008cfc:	79fa      	ldrb	r2, [r7, #7]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	4413      	add	r3, r2
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	4a1b      	ldr	r2, [pc, #108]	; (8008d74 <etharp_output_to_arp_index+0x124>)
 8008d08:	4413      	add	r3, r2
 8008d0a:	1d19      	adds	r1, r3, #4
 8008d0c:	79fa      	ldrb	r2, [r7, #7]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	4413      	add	r3, r2
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	3308      	adds	r3, #8
 8008d18:	4a16      	ldr	r2, [pc, #88]	; (8008d74 <etharp_output_to_arp_index+0x124>)
 8008d1a:	4413      	add	r3, r2
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	461a      	mov	r2, r3
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f000 fafb 	bl	800931c <etharp_request_dst>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d109      	bne.n	8008d40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008d2c:	79fa      	ldrb	r2, [r7, #7]
 8008d2e:	4911      	ldr	r1, [pc, #68]	; (8008d74 <etharp_output_to_arp_index+0x124>)
 8008d30:	4613      	mov	r3, r2
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	4413      	add	r3, r2
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	440b      	add	r3, r1
 8008d3a:	3314      	adds	r3, #20
 8008d3c:	2203      	movs	r2, #3
 8008d3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8008d46:	79fa      	ldrb	r2, [r7, #7]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	4413      	add	r3, r2
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	3308      	adds	r3, #8
 8008d52:	4a08      	ldr	r2, [pc, #32]	; (8008d74 <etharp_output_to_arp_index+0x124>)
 8008d54:	4413      	add	r3, r2
 8008d56:	3304      	adds	r3, #4
 8008d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d5c:	9200      	str	r2, [sp, #0]
 8008d5e:	460a      	mov	r2, r1
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 fb9c 	bl	80094a0 <ethernet_output>
 8008d68:	4603      	mov	r3, r0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	2400513c 	.word	0x2400513c
 8008d78:	08013210 	.word	0x08013210
 8008d7c:	080133a4 	.word	0x080133a4
 8008d80:	080132ac 	.word	0x080132ac

08008d84 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b08a      	sub	sp, #40	; 0x28
 8008d88:	af02      	add	r7, sp, #8
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d106      	bne.n	8008da8 <etharp_output+0x24>
 8008d9a:	4b73      	ldr	r3, [pc, #460]	; (8008f68 <etharp_output+0x1e4>)
 8008d9c:	f240 321e 	movw	r2, #798	; 0x31e
 8008da0:	4972      	ldr	r1, [pc, #456]	; (8008f6c <etharp_output+0x1e8>)
 8008da2:	4873      	ldr	r0, [pc, #460]	; (8008f70 <etharp_output+0x1ec>)
 8008da4:	f009 f9ae 	bl	8012104 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <etharp_output+0x38>
 8008dae:	4b6e      	ldr	r3, [pc, #440]	; (8008f68 <etharp_output+0x1e4>)
 8008db0:	f240 321f 	movw	r2, #799	; 0x31f
 8008db4:	496f      	ldr	r1, [pc, #444]	; (8008f74 <etharp_output+0x1f0>)
 8008db6:	486e      	ldr	r0, [pc, #440]	; (8008f70 <etharp_output+0x1ec>)
 8008db8:	f009 f9a4 	bl	8012104 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d106      	bne.n	8008dd0 <etharp_output+0x4c>
 8008dc2:	4b69      	ldr	r3, [pc, #420]	; (8008f68 <etharp_output+0x1e4>)
 8008dc4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008dc8:	496b      	ldr	r1, [pc, #428]	; (8008f78 <etharp_output+0x1f4>)
 8008dca:	4869      	ldr	r0, [pc, #420]	; (8008f70 <etharp_output+0x1ec>)
 8008dcc:	f009 f99a 	bl	8012104 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68f9      	ldr	r1, [r7, #12]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 f8c6 	bl	8009f68 <ip4_addr_isbroadcast_u32>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8008de2:	4b66      	ldr	r3, [pc, #408]	; (8008f7c <etharp_output+0x1f8>)
 8008de4:	61fb      	str	r3, [r7, #28]
 8008de6:	e0af      	b.n	8008f48 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008df0:	2be0      	cmp	r3, #224	; 0xe0
 8008df2:	d118      	bne.n	8008e26 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008df4:	2301      	movs	r3, #1
 8008df6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008dfc:	235e      	movs	r3, #94	; 0x5e
 8008dfe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3301      	adds	r3, #1
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3302      	adds	r3, #2
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3303      	adds	r3, #3
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8008e1e:	f107 0310 	add.w	r3, r7, #16
 8008e22:	61fb      	str	r3, [r7, #28]
 8008e24:	e090      	b.n	8008f48 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	405a      	eors	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3308      	adds	r3, #8
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d012      	beq.n	8008e64 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008e44:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00b      	beq.n	8008e64 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	330c      	adds	r3, #12
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	330c      	adds	r3, #12
 8008e5a:	61bb      	str	r3, [r7, #24]
 8008e5c:	e002      	b.n	8008e64 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8008e5e:	f06f 0303 	mvn.w	r3, #3
 8008e62:	e07d      	b.n	8008f60 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008e64:	4b46      	ldr	r3, [pc, #280]	; (8008f80 <etharp_output+0x1fc>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4a46      	ldr	r2, [pc, #280]	; (8008f84 <etharp_output+0x200>)
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	440b      	add	r3, r1
 8008e72:	00db      	lsls	r3, r3, #3
 8008e74:	4413      	add	r3, r2
 8008e76:	3314      	adds	r3, #20
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d925      	bls.n	8008eca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008e7e:	4b40      	ldr	r3, [pc, #256]	; (8008f80 <etharp_output+0x1fc>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	4619      	mov	r1, r3
 8008e84:	4a3f      	ldr	r2, [pc, #252]	; (8008f84 <etharp_output+0x200>)
 8008e86:	460b      	mov	r3, r1
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	440b      	add	r3, r1
 8008e8c:	00db      	lsls	r3, r3, #3
 8008e8e:	4413      	add	r3, r2
 8008e90:	3308      	adds	r3, #8
 8008e92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d117      	bne.n	8008eca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	4b38      	ldr	r3, [pc, #224]	; (8008f80 <etharp_output+0x1fc>)
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	4937      	ldr	r1, [pc, #220]	; (8008f84 <etharp_output+0x200>)
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	4403      	add	r3, r0
 8008eac:	00db      	lsls	r3, r3, #3
 8008eae:	440b      	add	r3, r1
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d108      	bne.n	8008eca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8008eb8:	4b31      	ldr	r3, [pc, #196]	; (8008f80 <etharp_output+0x1fc>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff fec5 	bl	8008c50 <etharp_output_to_arp_index>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	e04a      	b.n	8008f60 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008eca:	2300      	movs	r3, #0
 8008ecc:	75fb      	strb	r3, [r7, #23]
 8008ece:	e031      	b.n	8008f34 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008ed0:	7dfa      	ldrb	r2, [r7, #23]
 8008ed2:	492c      	ldr	r1, [pc, #176]	; (8008f84 <etharp_output+0x200>)
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	4413      	add	r3, r2
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	440b      	add	r3, r1
 8008ede:	3314      	adds	r3, #20
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d923      	bls.n	8008f2e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8008ee6:	7dfa      	ldrb	r2, [r7, #23]
 8008ee8:	4926      	ldr	r1, [pc, #152]	; (8008f84 <etharp_output+0x200>)
 8008eea:	4613      	mov	r3, r2
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	4413      	add	r3, r2
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	440b      	add	r3, r1
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d117      	bne.n	8008f2e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	6819      	ldr	r1, [r3, #0]
 8008f02:	7dfa      	ldrb	r2, [r7, #23]
 8008f04:	481f      	ldr	r0, [pc, #124]	; (8008f84 <etharp_output+0x200>)
 8008f06:	4613      	mov	r3, r2
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	4413      	add	r3, r2
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	4403      	add	r3, r0
 8008f10:	3304      	adds	r3, #4
 8008f12:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8008f14:	4299      	cmp	r1, r3
 8008f16:	d10a      	bne.n	8008f2e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8008f18:	4a19      	ldr	r2, [pc, #100]	; (8008f80 <etharp_output+0x1fc>)
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
 8008f20:	461a      	mov	r2, r3
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f7ff fe93 	bl	8008c50 <etharp_output_to_arp_index>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	e018      	b.n	8008f60 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	3301      	adds	r3, #1
 8008f32:	75fb      	strb	r3, [r7, #23]
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	2b09      	cmp	r3, #9
 8008f38:	d9ca      	bls.n	8008ed0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	69b9      	ldr	r1, [r7, #24]
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 f822 	bl	8008f88 <etharp_query>
 8008f44:	4603      	mov	r3, r0
 8008f46:	e00b      	b.n	8008f60 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 faa1 	bl	80094a0 <ethernet_output>
 8008f5e:	4603      	mov	r3, r0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3720      	adds	r7, #32
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	08013210 	.word	0x08013210
 8008f6c:	08013384 	.word	0x08013384
 8008f70:	080132ac 	.word	0x080132ac
 8008f74:	080133d4 	.word	0x080133d4
 8008f78:	08013374 	.word	0x08013374
 8008f7c:	08015dc4 	.word	0x08015dc4
 8008f80:	2400522c 	.word	0x2400522c
 8008f84:	2400513c 	.word	0x2400513c

08008f88 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08c      	sub	sp, #48	; 0x30
 8008f8c:	af02      	add	r7, sp, #8
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3326      	adds	r3, #38	; 0x26
 8008f98:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8008f9a:	23ff      	movs	r3, #255	; 0xff
 8008f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68f9      	ldr	r1, [r7, #12]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 ffdc 	bl	8009f68 <ip4_addr_isbroadcast_u32>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10c      	bne.n	8008fd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008fbe:	2be0      	cmp	r3, #224	; 0xe0
 8008fc0:	d006      	beq.n	8008fd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008fd0:	f06f 030f 	mvn.w	r3, #15
 8008fd4:	e101      	b.n	80091da <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	2101      	movs	r1, #1
 8008fda:	68b8      	ldr	r0, [r7, #8]
 8008fdc:	f7ff fb60 	bl	80086a0 <etharp_find_entry>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8008fe4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	da02      	bge.n	8008ff2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8008fec:	8a7b      	ldrh	r3, [r7, #18]
 8008fee:	b25b      	sxtb	r3, r3
 8008ff0:	e0f3      	b.n	80091da <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8008ff2:	8a7b      	ldrh	r3, [r7, #18]
 8008ff4:	2b7e      	cmp	r3, #126	; 0x7e
 8008ff6:	d906      	bls.n	8009006 <etharp_query+0x7e>
 8008ff8:	4b7a      	ldr	r3, [pc, #488]	; (80091e4 <etharp_query+0x25c>)
 8008ffa:	f240 32c1 	movw	r2, #961	; 0x3c1
 8008ffe:	497a      	ldr	r1, [pc, #488]	; (80091e8 <etharp_query+0x260>)
 8009000:	487a      	ldr	r0, [pc, #488]	; (80091ec <etharp_query+0x264>)
 8009002:	f009 f87f 	bl	8012104 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8009006:	8a7b      	ldrh	r3, [r7, #18]
 8009008:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800900a:	7c7a      	ldrb	r2, [r7, #17]
 800900c:	4978      	ldr	r1, [pc, #480]	; (80091f0 <etharp_query+0x268>)
 800900e:	4613      	mov	r3, r2
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	4413      	add	r3, r2
 8009014:	00db      	lsls	r3, r3, #3
 8009016:	440b      	add	r3, r1
 8009018:	3314      	adds	r3, #20
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d115      	bne.n	800904c <etharp_query+0xc4>
    is_new_entry = 1;
 8009020:	2301      	movs	r3, #1
 8009022:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009024:	7c7a      	ldrb	r2, [r7, #17]
 8009026:	4972      	ldr	r1, [pc, #456]	; (80091f0 <etharp_query+0x268>)
 8009028:	4613      	mov	r3, r2
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	4413      	add	r3, r2
 800902e:	00db      	lsls	r3, r3, #3
 8009030:	440b      	add	r3, r1
 8009032:	3314      	adds	r3, #20
 8009034:	2201      	movs	r2, #1
 8009036:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8009038:	7c7a      	ldrb	r2, [r7, #17]
 800903a:	496d      	ldr	r1, [pc, #436]	; (80091f0 <etharp_query+0x268>)
 800903c:	4613      	mov	r3, r2
 800903e:	005b      	lsls	r3, r3, #1
 8009040:	4413      	add	r3, r2
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	440b      	add	r3, r1
 8009046:	3308      	adds	r3, #8
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800904c:	7c7a      	ldrb	r2, [r7, #17]
 800904e:	4968      	ldr	r1, [pc, #416]	; (80091f0 <etharp_query+0x268>)
 8009050:	4613      	mov	r3, r2
 8009052:	005b      	lsls	r3, r3, #1
 8009054:	4413      	add	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	440b      	add	r3, r1
 800905a:	3314      	adds	r3, #20
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d011      	beq.n	8009086 <etharp_query+0xfe>
 8009062:	7c7a      	ldrb	r2, [r7, #17]
 8009064:	4962      	ldr	r1, [pc, #392]	; (80091f0 <etharp_query+0x268>)
 8009066:	4613      	mov	r3, r2
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	4413      	add	r3, r2
 800906c:	00db      	lsls	r3, r3, #3
 800906e:	440b      	add	r3, r1
 8009070:	3314      	adds	r3, #20
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d806      	bhi.n	8009086 <etharp_query+0xfe>
 8009078:	4b5a      	ldr	r3, [pc, #360]	; (80091e4 <etharp_query+0x25c>)
 800907a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800907e:	495d      	ldr	r1, [pc, #372]	; (80091f4 <etharp_query+0x26c>)
 8009080:	485a      	ldr	r0, [pc, #360]	; (80091ec <etharp_query+0x264>)
 8009082:	f009 f83f 	bl	8012104 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d102      	bne.n	8009092 <etharp_query+0x10a>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10c      	bne.n	80090ac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8009092:	68b9      	ldr	r1, [r7, #8]
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 f963 	bl	8009360 <etharp_request>
 800909a:	4603      	mov	r3, r0
 800909c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d102      	bne.n	80090ac <etharp_query+0x124>
      return result;
 80090a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090aa:	e096      	b.n	80091da <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <etharp_query+0x138>
 80090b2:	4b4c      	ldr	r3, [pc, #304]	; (80091e4 <etharp_query+0x25c>)
 80090b4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80090b8:	494f      	ldr	r1, [pc, #316]	; (80091f8 <etharp_query+0x270>)
 80090ba:	484c      	ldr	r0, [pc, #304]	; (80091ec <etharp_query+0x264>)
 80090bc:	f009 f822 	bl	8012104 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80090c0:	7c7a      	ldrb	r2, [r7, #17]
 80090c2:	494b      	ldr	r1, [pc, #300]	; (80091f0 <etharp_query+0x268>)
 80090c4:	4613      	mov	r3, r2
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	4413      	add	r3, r2
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	440b      	add	r3, r1
 80090ce:	3314      	adds	r3, #20
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d917      	bls.n	8009106 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80090d6:	4a49      	ldr	r2, [pc, #292]	; (80091fc <etharp_query+0x274>)
 80090d8:	7c7b      	ldrb	r3, [r7, #17]
 80090da:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80090dc:	7c7a      	ldrb	r2, [r7, #17]
 80090de:	4613      	mov	r3, r2
 80090e0:	005b      	lsls	r3, r3, #1
 80090e2:	4413      	add	r3, r2
 80090e4:	00db      	lsls	r3, r3, #3
 80090e6:	3308      	adds	r3, #8
 80090e8:	4a41      	ldr	r2, [pc, #260]	; (80091f0 <etharp_query+0x268>)
 80090ea:	4413      	add	r3, r2
 80090ec:	3304      	adds	r3, #4
 80090ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090f2:	9200      	str	r2, [sp, #0]
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 f9d1 	bl	80094a0 <ethernet_output>
 80090fe:	4603      	mov	r3, r0
 8009100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009104:	e067      	b.n	80091d6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009106:	7c7a      	ldrb	r2, [r7, #17]
 8009108:	4939      	ldr	r1, [pc, #228]	; (80091f0 <etharp_query+0x268>)
 800910a:	4613      	mov	r3, r2
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	4413      	add	r3, r2
 8009110:	00db      	lsls	r3, r3, #3
 8009112:	440b      	add	r3, r1
 8009114:	3314      	adds	r3, #20
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d15c      	bne.n	80091d6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009124:	e01c      	b.n	8009160 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	895a      	ldrh	r2, [r3, #10]
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	891b      	ldrh	r3, [r3, #8]
 800912e:	429a      	cmp	r2, r3
 8009130:	d10a      	bne.n	8009148 <etharp_query+0x1c0>
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d006      	beq.n	8009148 <etharp_query+0x1c0>
 800913a:	4b2a      	ldr	r3, [pc, #168]	; (80091e4 <etharp_query+0x25c>)
 800913c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8009140:	492f      	ldr	r1, [pc, #188]	; (8009200 <etharp_query+0x278>)
 8009142:	482a      	ldr	r0, [pc, #168]	; (80091ec <etharp_query+0x264>)
 8009144:	f008 ffde 	bl	8012104 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	7b1b      	ldrb	r3, [r3, #12]
 800914c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <etharp_query+0x1d2>
        copy_needed = 1;
 8009154:	2301      	movs	r3, #1
 8009156:	61bb      	str	r3, [r7, #24]
        break;
 8009158:	e005      	b.n	8009166 <etharp_query+0x1de>
      }
      p = p->next;
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1df      	bne.n	8009126 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d007      	beq.n	800917c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8009172:	200e      	movs	r0, #14
 8009174:	f003 faea 	bl	800c74c <pbuf_clone>
 8009178:	61f8      	str	r0, [r7, #28]
 800917a:	e004      	b.n	8009186 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8009180:	69f8      	ldr	r0, [r7, #28]
 8009182:	f003 f927 	bl	800c3d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d021      	beq.n	80091d0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800918c:	7c7a      	ldrb	r2, [r7, #17]
 800918e:	4918      	ldr	r1, [pc, #96]	; (80091f0 <etharp_query+0x268>)
 8009190:	4613      	mov	r3, r2
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	4413      	add	r3, r2
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	440b      	add	r3, r1
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80091a0:	7c7a      	ldrb	r2, [r7, #17]
 80091a2:	4913      	ldr	r1, [pc, #76]	; (80091f0 <etharp_query+0x268>)
 80091a4:	4613      	mov	r3, r2
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	4413      	add	r3, r2
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	440b      	add	r3, r1
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f003 f86f 	bl	800c294 <pbuf_free>
      }
      arp_table[i].q = p;
 80091b6:	7c7a      	ldrb	r2, [r7, #17]
 80091b8:	490d      	ldr	r1, [pc, #52]	; (80091f0 <etharp_query+0x268>)
 80091ba:	4613      	mov	r3, r2
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	4413      	add	r3, r2
 80091c0:	00db      	lsls	r3, r3, #3
 80091c2:	440b      	add	r3, r1
 80091c4:	69fa      	ldr	r2, [r7, #28]
 80091c6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80091ce:	e002      	b.n	80091d6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80091d0:	23ff      	movs	r3, #255	; 0xff
 80091d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80091d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3728      	adds	r7, #40	; 0x28
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	08013210 	.word	0x08013210
 80091e8:	080133e0 	.word	0x080133e0
 80091ec:	080132ac 	.word	0x080132ac
 80091f0:	2400513c 	.word	0x2400513c
 80091f4:	080133f0 	.word	0x080133f0
 80091f8:	080133d4 	.word	0x080133d4
 80091fc:	2400522c 	.word	0x2400522c
 8009200:	08013418 	.word	0x08013418

08009204 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08a      	sub	sp, #40	; 0x28
 8009208:	af02      	add	r7, sp, #8
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
 8009210:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d106      	bne.n	800922a <etharp_raw+0x26>
 800921c:	4b3a      	ldr	r3, [pc, #232]	; (8009308 <etharp_raw+0x104>)
 800921e:	f240 4257 	movw	r2, #1111	; 0x457
 8009222:	493a      	ldr	r1, [pc, #232]	; (800930c <etharp_raw+0x108>)
 8009224:	483a      	ldr	r0, [pc, #232]	; (8009310 <etharp_raw+0x10c>)
 8009226:	f008 ff6d 	bl	8012104 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800922a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800922e:	211c      	movs	r1, #28
 8009230:	200e      	movs	r0, #14
 8009232:	f002 fd4b 	bl	800bccc <pbuf_alloc>
 8009236:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800923e:	f04f 33ff 	mov.w	r3, #4294967295
 8009242:	e05d      	b.n	8009300 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	895b      	ldrh	r3, [r3, #10]
 8009248:	2b1b      	cmp	r3, #27
 800924a:	d806      	bhi.n	800925a <etharp_raw+0x56>
 800924c:	4b2e      	ldr	r3, [pc, #184]	; (8009308 <etharp_raw+0x104>)
 800924e:	f240 4262 	movw	r2, #1122	; 0x462
 8009252:	4930      	ldr	r1, [pc, #192]	; (8009314 <etharp_raw+0x110>)
 8009254:	482e      	ldr	r0, [pc, #184]	; (8009310 <etharp_raw+0x10c>)
 8009256:	f008 ff55 	bl	8012104 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009260:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff f914 	bl	8008490 <lwip_htons>
 8009268:	4603      	mov	r3, r0
 800926a:	461a      	mov	r2, r3
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009276:	2b06      	cmp	r3, #6
 8009278:	d006      	beq.n	8009288 <etharp_raw+0x84>
 800927a:	4b23      	ldr	r3, [pc, #140]	; (8009308 <etharp_raw+0x104>)
 800927c:	f240 4269 	movw	r2, #1129	; 0x469
 8009280:	4925      	ldr	r1, [pc, #148]	; (8009318 <etharp_raw+0x114>)
 8009282:	4823      	ldr	r0, [pc, #140]	; (8009310 <etharp_raw+0x10c>)
 8009284:	f008 ff3e 	bl	8012104 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	3308      	adds	r3, #8
 800928c:	2206      	movs	r2, #6
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	4618      	mov	r0, r3
 8009292:	f008 ff21 	bl	80120d8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	3312      	adds	r3, #18
 800929a:	2206      	movs	r2, #6
 800929c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800929e:	4618      	mov	r0, r3
 80092a0:	f008 ff1a 	bl	80120d8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	330e      	adds	r3, #14
 80092a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092aa:	6812      	ldr	r2, [r2, #0]
 80092ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	3318      	adds	r3, #24
 80092b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092b4:	6812      	ldr	r2, [r2, #0]
 80092b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2200      	movs	r2, #0
 80092bc:	701a      	strb	r2, [r3, #0]
 80092be:	2200      	movs	r2, #0
 80092c0:	f042 0201 	orr.w	r2, r2, #1
 80092c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f042 0208 	orr.w	r2, r2, #8
 80092ce:	709a      	strb	r2, [r3, #2]
 80092d0:	2200      	movs	r2, #0
 80092d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2206      	movs	r2, #6
 80092d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2204      	movs	r2, #4
 80092de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80092e0:	f640 0306 	movw	r3, #2054	; 0x806
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	69b9      	ldr	r1, [r7, #24]
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 f8d7 	bl	80094a0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80092f2:	69b8      	ldr	r0, [r7, #24]
 80092f4:	f002 ffce 	bl	800c294 <pbuf_free>
  p = NULL;
 80092f8:	2300      	movs	r3, #0
 80092fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80092fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3720      	adds	r7, #32
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	08013210 	.word	0x08013210
 800930c:	08013384 	.word	0x08013384
 8009310:	080132ac 	.word	0x080132ac
 8009314:	08013434 	.word	0x08013434
 8009318:	08013468 	.word	0x08013468

0800931c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af04      	add	r7, sp, #16
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009338:	2201      	movs	r2, #1
 800933a:	9203      	str	r2, [sp, #12]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	9202      	str	r2, [sp, #8]
 8009340:	4a06      	ldr	r2, [pc, #24]	; (800935c <etharp_request_dst+0x40>)
 8009342:	9201      	str	r2, [sp, #4]
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	4603      	mov	r3, r0
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7ff ff5a 	bl	8009204 <etharp_raw>
 8009350:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	08015dcc 	.word	0x08015dcc

08009360 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800936a:	4a05      	ldr	r2, [pc, #20]	; (8009380 <etharp_request+0x20>)
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff ffd4 	bl	800931c <etharp_request_dst>
 8009374:	4603      	mov	r3, r0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	08015dc4 	.word	0x08015dc4

08009384 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800938e:	230e      	movs	r3, #14
 8009390:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	895b      	ldrh	r3, [r3, #10]
 8009396:	2b0e      	cmp	r3, #14
 8009398:	d96e      	bls.n	8009478 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	7bdb      	ldrb	r3, [r3, #15]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d106      	bne.n	80093b0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093a8:	3301      	adds	r3, #1
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	7b1a      	ldrb	r2, [r3, #12]
 80093ba:	7b5b      	ldrb	r3, [r3, #13]
 80093bc:	021b      	lsls	r3, r3, #8
 80093be:	4313      	orrs	r3, r2
 80093c0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d023      	beq.n	8009416 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d10f      	bne.n	80093f6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	785b      	ldrb	r3, [r3, #1]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d11b      	bne.n	8009416 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80093e2:	2b5e      	cmp	r3, #94	; 0x5e
 80093e4:	d117      	bne.n	8009416 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	7b5b      	ldrb	r3, [r3, #13]
 80093ea:	f043 0310 	orr.w	r3, r3, #16
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	735a      	strb	r2, [r3, #13]
 80093f4:	e00f      	b.n	8009416 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2206      	movs	r2, #6
 80093fa:	4928      	ldr	r1, [pc, #160]	; (800949c <ethernet_input+0x118>)
 80093fc:	4618      	mov	r0, r3
 80093fe:	f008 fe5b 	bl	80120b8 <memcmp>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d106      	bne.n	8009416 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7b5b      	ldrb	r3, [r3, #13]
 800940c:	f043 0308 	orr.w	r3, r3, #8
 8009410:	b2da      	uxtb	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8009416:	89fb      	ldrh	r3, [r7, #14]
 8009418:	2b08      	cmp	r3, #8
 800941a:	d003      	beq.n	8009424 <ethernet_input+0xa0>
 800941c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8009420:	d014      	beq.n	800944c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8009422:	e032      	b.n	800948a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800942a:	f003 0308 	and.w	r3, r3, #8
 800942e:	2b00      	cmp	r3, #0
 8009430:	d024      	beq.n	800947c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8009432:	8afb      	ldrh	r3, [r7, #22]
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f002 fea6 	bl	800c188 <pbuf_remove_header>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d11e      	bne.n	8009480 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fb93 	bl	8009b70 <ip4_input>
      break;
 800944a:	e013      	b.n	8009474 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009452:	f003 0308 	and.w	r3, r3, #8
 8009456:	2b00      	cmp	r3, #0
 8009458:	d014      	beq.n	8009484 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800945a:	8afb      	ldrh	r3, [r7, #22]
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f002 fe92 	bl	800c188 <pbuf_remove_header>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10e      	bne.n	8009488 <ethernet_input+0x104>
        etharp_input(p, netif);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff fb65 	bl	8008b3c <etharp_input>
      break;
 8009472:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	e00c      	b.n	8009492 <ethernet_input+0x10e>
    goto free_and_return;
 8009478:	bf00      	nop
 800947a:	e006      	b.n	800948a <ethernet_input+0x106>
        goto free_and_return;
 800947c:	bf00      	nop
 800947e:	e004      	b.n	800948a <ethernet_input+0x106>
        goto free_and_return;
 8009480:	bf00      	nop
 8009482:	e002      	b.n	800948a <ethernet_input+0x106>
        goto free_and_return;
 8009484:	bf00      	nop
 8009486:	e000      	b.n	800948a <ethernet_input+0x106>
        goto free_and_return;
 8009488:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f002 ff02 	bl	800c294 <pbuf_free>
  return ERR_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	08015dc4 	.word	0x08015dc4

080094a0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
 80094ac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80094ae:	8c3b      	ldrh	r3, [r7, #32]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe ffed 	bl	8008490 <lwip_htons>
 80094b6:	4603      	mov	r3, r0
 80094b8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80094ba:	210e      	movs	r1, #14
 80094bc:	68b8      	ldr	r0, [r7, #8]
 80094be:	f002 fe53 	bl	800c168 <pbuf_add_header>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d125      	bne.n	8009514 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	8afa      	ldrh	r2, [r7, #22]
 80094d2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	2206      	movs	r2, #6
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	4618      	mov	r0, r3
 80094dc:	f008 fdfc 	bl	80120d8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	3306      	adds	r3, #6
 80094e4:	2206      	movs	r2, #6
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f008 fdf5 	bl	80120d8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094f4:	2b06      	cmp	r3, #6
 80094f6:	d006      	beq.n	8009506 <ethernet_output+0x66>
 80094f8:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <ethernet_output+0x84>)
 80094fa:	f44f 7299 	mov.w	r2, #306	; 0x132
 80094fe:	490a      	ldr	r1, [pc, #40]	; (8009528 <ethernet_output+0x88>)
 8009500:	480a      	ldr	r0, [pc, #40]	; (800952c <ethernet_output+0x8c>)
 8009502:	f008 fdff 	bl	8012104 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	68b9      	ldr	r1, [r7, #8]
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	4798      	blx	r3
 8009510:	4603      	mov	r3, r0
 8009512:	e002      	b.n	800951a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8009514:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8009516:	f06f 0301 	mvn.w	r3, #1
}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	080134ac 	.word	0x080134ac
 8009528:	08013504 	.word	0x08013504
 800952c:	08013538 	.word	0x08013538

08009530 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b08e      	sub	sp, #56	; 0x38
 8009534:	af04      	add	r7, sp, #16
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800953a:	4b87      	ldr	r3, [pc, #540]	; (8009758 <icmp_input+0x228>)
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	f003 030f 	and.w	r3, r3, #15
 8009548:	b2db      	uxtb	r3, r3
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	b2db      	uxtb	r3, r3
 800954e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8009550:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009552:	2b13      	cmp	r3, #19
 8009554:	f240 80e8 	bls.w	8009728 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	895b      	ldrh	r3, [r3, #10]
 800955c:	2b03      	cmp	r3, #3
 800955e:	f240 80e5 	bls.w	800972c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800956c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 80d2 	beq.w	800971a <icmp_input+0x1ea>
 8009576:	2b08      	cmp	r3, #8
 8009578:	f040 80d2 	bne.w	8009720 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800957c:	4b77      	ldr	r3, [pc, #476]	; (800975c <icmp_input+0x22c>)
 800957e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009580:	4b75      	ldr	r3, [pc, #468]	; (8009758 <icmp_input+0x228>)
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009588:	2be0      	cmp	r3, #224	; 0xe0
 800958a:	f000 80d6 	beq.w	800973a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800958e:	4b72      	ldr	r3, [pc, #456]	; (8009758 <icmp_input+0x228>)
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	4a71      	ldr	r2, [pc, #452]	; (8009758 <icmp_input+0x228>)
 8009594:	6812      	ldr	r2, [r2, #0]
 8009596:	4611      	mov	r1, r2
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fce5 	bl	8009f68 <ip4_addr_isbroadcast_u32>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f040 80cc 	bne.w	800973e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	891b      	ldrh	r3, [r3, #8]
 80095aa:	2b07      	cmp	r3, #7
 80095ac:	f240 80c0 	bls.w	8009730 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f9e0 	bl	8009976 <inet_chksum_pbuf>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f002 fe69 	bl	800c294 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80095c2:	e0c5      	b.n	8009750 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80095c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095c6:	330e      	adds	r3, #14
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f002 fdcc 	bl	800c168 <pbuf_add_header>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d04b      	beq.n	800966e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	891a      	ldrh	r2, [r3, #8]
 80095da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095dc:	4413      	add	r3, r2
 80095de:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	891b      	ldrh	r3, [r3, #8]
 80095e4:	8b7a      	ldrh	r2, [r7, #26]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	f0c0 80ab 	bcc.w	8009742 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80095ec:	8b7b      	ldrh	r3, [r7, #26]
 80095ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80095f2:	4619      	mov	r1, r3
 80095f4:	200e      	movs	r0, #14
 80095f6:	f002 fb69 	bl	800bccc <pbuf_alloc>
 80095fa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 80a1 	beq.w	8009746 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	895b      	ldrh	r3, [r3, #10]
 8009608:	461a      	mov	r2, r3
 800960a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800960c:	3308      	adds	r3, #8
 800960e:	429a      	cmp	r2, r3
 8009610:	d203      	bcs.n	800961a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8009612:	6978      	ldr	r0, [r7, #20]
 8009614:	f002 fe3e 	bl	800c294 <pbuf_free>
          goto icmperr;
 8009618:	e096      	b.n	8009748 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009622:	4618      	mov	r0, r3
 8009624:	f008 fd58 	bl	80120d8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8009628:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800962a:	4619      	mov	r1, r3
 800962c:	6978      	ldr	r0, [r7, #20]
 800962e:	f002 fdab 	bl	800c188 <pbuf_remove_header>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d009      	beq.n	800964c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8009638:	4b49      	ldr	r3, [pc, #292]	; (8009760 <icmp_input+0x230>)
 800963a:	22b6      	movs	r2, #182	; 0xb6
 800963c:	4949      	ldr	r1, [pc, #292]	; (8009764 <icmp_input+0x234>)
 800963e:	484a      	ldr	r0, [pc, #296]	; (8009768 <icmp_input+0x238>)
 8009640:	f008 fd60 	bl	8012104 <iprintf>
          pbuf_free(r);
 8009644:	6978      	ldr	r0, [r7, #20]
 8009646:	f002 fe25 	bl	800c294 <pbuf_free>
          goto icmperr;
 800964a:	e07d      	b.n	8009748 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	6978      	ldr	r0, [r7, #20]
 8009650:	f002 ff38 	bl	800c4c4 <pbuf_copy>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800965a:	6978      	ldr	r0, [r7, #20]
 800965c:	f002 fe1a 	bl	800c294 <pbuf_free>
          goto icmperr;
 8009660:	e072      	b.n	8009748 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f002 fe16 	bl	800c294 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	607b      	str	r3, [r7, #4]
 800966c:	e00f      	b.n	800968e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800966e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009670:	330e      	adds	r3, #14
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f002 fd87 	bl	800c188 <pbuf_remove_header>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d006      	beq.n	800968e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8009680:	4b37      	ldr	r3, [pc, #220]	; (8009760 <icmp_input+0x230>)
 8009682:	22c7      	movs	r2, #199	; 0xc7
 8009684:	4939      	ldr	r1, [pc, #228]	; (800976c <icmp_input+0x23c>)
 8009686:	4838      	ldr	r0, [pc, #224]	; (8009768 <icmp_input+0x238>)
 8009688:	f008 fd3c 	bl	8012104 <iprintf>
          goto icmperr;
 800968c:	e05c      	b.n	8009748 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8009694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f002 fd65 	bl	800c168 <pbuf_add_header>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d13c      	bne.n	800971e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80096b2:	4b29      	ldr	r3, [pc, #164]	; (8009758 <icmp_input+0x228>)
 80096b4:	691a      	ldr	r2, [r3, #16]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	2200      	movs	r2, #0
 80096be:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	885b      	ldrh	r3, [r3, #2]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d907      	bls.n	80096de <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	885b      	ldrh	r3, [r3, #2]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	3309      	adds	r3, #9
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	805a      	strh	r2, [r3, #2]
 80096dc:	e006      	b.n	80096ec <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	885b      	ldrh	r3, [r3, #2]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3308      	adds	r3, #8
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	22ff      	movs	r2, #255	; 0xff
 80096f0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	729a      	strb	r2, [r3, #10]
 80096f8:	2200      	movs	r2, #0
 80096fa:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	9302      	str	r3, [sp, #8]
 8009700:	2301      	movs	r3, #1
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	2300      	movs	r3, #0
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	23ff      	movs	r3, #255	; 0xff
 800970a:	2200      	movs	r2, #0
 800970c:	69f9      	ldr	r1, [r7, #28]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fb52 	bl	8009db8 <ip4_output_if>
 8009714:	4603      	mov	r3, r0
 8009716:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8009718:	e001      	b.n	800971e <icmp_input+0x1ee>
      break;
 800971a:	bf00      	nop
 800971c:	e000      	b.n	8009720 <icmp_input+0x1f0>
      break;
 800971e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f002 fdb7 	bl	800c294 <pbuf_free>
  return;
 8009726:	e013      	b.n	8009750 <icmp_input+0x220>
    goto lenerr;
 8009728:	bf00      	nop
 800972a:	e002      	b.n	8009732 <icmp_input+0x202>
    goto lenerr;
 800972c:	bf00      	nop
 800972e:	e000      	b.n	8009732 <icmp_input+0x202>
        goto lenerr;
 8009730:	bf00      	nop
lenerr:
  pbuf_free(p);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f002 fdae 	bl	800c294 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8009738:	e00a      	b.n	8009750 <icmp_input+0x220>
        goto icmperr;
 800973a:	bf00      	nop
 800973c:	e004      	b.n	8009748 <icmp_input+0x218>
        goto icmperr;
 800973e:	bf00      	nop
 8009740:	e002      	b.n	8009748 <icmp_input+0x218>
          goto icmperr;
 8009742:	bf00      	nop
 8009744:	e000      	b.n	8009748 <icmp_input+0x218>
          goto icmperr;
 8009746:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f002 fda3 	bl	800c294 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800974e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8009750:	3728      	adds	r7, #40	; 0x28
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	24005230 	.word	0x24005230
 800975c:	24005244 	.word	0x24005244
 8009760:	08013560 	.word	0x08013560
 8009764:	080135b8 	.word	0x080135b8
 8009768:	080135f0 	.word	0x080135f0
 800976c:	08013618 	.word	0x08013618

08009770 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	461a      	mov	r2, r3
 8009780:	2103      	movs	r1, #3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f814 	bl	80097b0 <icmp_send_response>
}
 8009788:	bf00      	nop
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800979c:	78fb      	ldrb	r3, [r7, #3]
 800979e:	461a      	mov	r2, r3
 80097a0:	210b      	movs	r1, #11
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f804 	bl	80097b0 <icmp_send_response>
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08c      	sub	sp, #48	; 0x30
 80097b4:	af04      	add	r7, sp, #16
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
 80097bc:	4613      	mov	r3, r2
 80097be:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80097c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80097c4:	2124      	movs	r1, #36	; 0x24
 80097c6:	2022      	movs	r0, #34	; 0x22
 80097c8:	f002 fa80 	bl	800bccc <pbuf_alloc>
 80097cc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d056      	beq.n	8009882 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	895b      	ldrh	r3, [r3, #10]
 80097d8:	2b23      	cmp	r3, #35	; 0x23
 80097da:	d806      	bhi.n	80097ea <icmp_send_response+0x3a>
 80097dc:	4b2b      	ldr	r3, [pc, #172]	; (800988c <icmp_send_response+0xdc>)
 80097de:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80097e2:	492b      	ldr	r1, [pc, #172]	; (8009890 <icmp_send_response+0xe0>)
 80097e4:	482b      	ldr	r0, [pc, #172]	; (8009894 <icmp_send_response+0xe4>)
 80097e6:	f008 fc8d 	bl	8012104 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	78fa      	ldrb	r2, [r7, #3]
 80097fa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	78ba      	ldrb	r2, [r7, #2]
 8009800:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2200      	movs	r2, #0
 8009806:	711a      	strb	r2, [r3, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	2200      	movs	r2, #0
 8009810:	719a      	strb	r2, [r3, #6]
 8009812:	2200      	movs	r2, #0
 8009814:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f103 0008 	add.w	r0, r3, #8
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	221c      	movs	r2, #28
 8009824:	4619      	mov	r1, r3
 8009826:	f008 fc57 	bl	80120d8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8009830:	f107 030c 	add.w	r3, r7, #12
 8009834:	4618      	mov	r0, r3
 8009836:	f000 f901 	bl	8009a3c <ip4_route>
 800983a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d01b      	beq.n	800987a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2200      	movs	r2, #0
 8009846:	709a      	strb	r2, [r3, #2]
 8009848:	2200      	movs	r2, #0
 800984a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	895b      	ldrh	r3, [r3, #10]
 8009850:	4619      	mov	r1, r3
 8009852:	6978      	ldr	r0, [r7, #20]
 8009854:	f000 f87d 	bl	8009952 <inet_chksum>
 8009858:	4603      	mov	r3, r0
 800985a:	461a      	mov	r2, r3
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009860:	f107 020c 	add.w	r2, r7, #12
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	9302      	str	r3, [sp, #8]
 8009868:	2301      	movs	r3, #1
 800986a:	9301      	str	r3, [sp, #4]
 800986c:	2300      	movs	r3, #0
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	23ff      	movs	r3, #255	; 0xff
 8009872:	2100      	movs	r1, #0
 8009874:	69f8      	ldr	r0, [r7, #28]
 8009876:	f000 fa9f 	bl	8009db8 <ip4_output_if>
  }
  pbuf_free(q);
 800987a:	69f8      	ldr	r0, [r7, #28]
 800987c:	f002 fd0a 	bl	800c294 <pbuf_free>
 8009880:	e000      	b.n	8009884 <icmp_send_response+0xd4>
    return;
 8009882:	bf00      	nop
}
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	08013560 	.word	0x08013560
 8009890:	0801364c 	.word	0x0801364c
 8009894:	080135f0 	.word	0x080135f0

08009898 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009898:	b480      	push	{r7}
 800989a:	b089      	sub	sp, #36	; 0x24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00d      	beq.n	80098d8 <lwip_standard_chksum+0x40>
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	dd0a      	ble.n	80098d8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80098c2:	69fa      	ldr	r2, [r7, #28]
 80098c4:	1c53      	adds	r3, r2, #1
 80098c6:	61fb      	str	r3, [r7, #28]
 80098c8:	f107 030e 	add.w	r3, r7, #14
 80098cc:	3301      	adds	r3, #1
 80098ce:	7812      	ldrb	r2, [r2, #0]
 80098d0:	701a      	strb	r2, [r3, #0]
    len--;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80098dc:	e00a      	b.n	80098f4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	1c9a      	adds	r2, r3, #2
 80098e2:	61ba      	str	r2, [r7, #24]
 80098e4:	881b      	ldrh	r3, [r3, #0]
 80098e6:	461a      	mov	r2, r3
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	4413      	add	r3, r2
 80098ec:	617b      	str	r3, [r7, #20]
    len -= 2;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	3b02      	subs	r3, #2
 80098f2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	dcf1      	bgt.n	80098de <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dd04      	ble.n	800990a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009900:	f107 030e 	add.w	r3, r7, #14
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	7812      	ldrb	r2, [r2, #0]
 8009908:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800990a:	89fb      	ldrh	r3, [r7, #14]
 800990c:	461a      	mov	r2, r3
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	4413      	add	r3, r2
 8009912:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	0c1a      	lsrs	r2, r3, #16
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	b29b      	uxth	r3, r3
 800991c:	4413      	add	r3, r2
 800991e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	0c1a      	lsrs	r2, r3, #16
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	b29b      	uxth	r3, r3
 8009928:	4413      	add	r3, r2
 800992a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d007      	beq.n	8009942 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	b29a      	uxth	r2, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	0a1b      	lsrs	r3, r3, #8
 800993c:	b2db      	uxtb	r3, r3
 800993e:	4313      	orrs	r3, r2
 8009940:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	b29b      	uxth	r3, r3
}
 8009946:	4618      	mov	r0, r3
 8009948:	3724      	adds	r7, #36	; 0x24
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b082      	sub	sp, #8
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	460b      	mov	r3, r1
 800995c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800995e:	887b      	ldrh	r3, [r7, #2]
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff ff98 	bl	8009898 <lwip_standard_chksum>
 8009968:	4603      	mov	r3, r0
 800996a:	43db      	mvns	r3, r3
 800996c:	b29b      	uxth	r3, r3
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b086      	sub	sp, #24
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8009982:	2300      	movs	r3, #0
 8009984:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	613b      	str	r3, [r7, #16]
 800998a:	e02b      	b.n	80099e4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	895b      	ldrh	r3, [r3, #10]
 8009994:	4619      	mov	r1, r3
 8009996:	4610      	mov	r0, r2
 8009998:	f7ff ff7e 	bl	8009898 <lwip_standard_chksum>
 800999c:	4603      	mov	r3, r0
 800999e:	461a      	mov	r2, r3
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	4413      	add	r3, r2
 80099a4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	0c1a      	lsrs	r2, r3, #16
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	4413      	add	r3, r2
 80099b0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	895b      	ldrh	r3, [r3, #10]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00e      	beq.n	80099de <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bf0c      	ite	eq
 80099c6:	2301      	moveq	r3, #1
 80099c8:	2300      	movne	r3, #0
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	021b      	lsls	r3, r3, #8
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	0a1b      	lsrs	r3, r3, #8
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	4313      	orrs	r3, r2
 80099dc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	613b      	str	r3, [r7, #16]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1d0      	bne.n	800998c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d007      	beq.n	8009a00 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	021b      	lsls	r3, r3, #8
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	0a1b      	lsrs	r3, r3, #8
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	4313      	orrs	r3, r2
 80099fe:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	43db      	mvns	r3, r3
 8009a06:	b29b      	uxth	r3, r3
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009a1a:	f001 f9eb 	bl	800adf4 <mem_init>
  memp_init();
 8009a1e:	f001 fced 	bl	800b3fc <memp_init>
  pbuf_init();
  netif_init();
 8009a22:	f001 fdeb 	bl	800b5fc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009a26:	f008 f969 	bl	8011cfc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009a2a:	f002 fec1 	bl	800c7b0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009a2e:	f008 f8db 	bl	8011be8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8009a44:	4b33      	ldr	r3, [pc, #204]	; (8009b14 <ip4_route+0xd8>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	60fb      	str	r3, [r7, #12]
 8009a4a:	e036      	b.n	8009aba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d02b      	beq.n	8009ab4 <ip4_route+0x78>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a62:	089b      	lsrs	r3, r3, #2
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d022      	beq.n	8009ab4 <ip4_route+0x78>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3304      	adds	r3, #4
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01d      	beq.n	8009ab4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3304      	adds	r3, #4
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	405a      	eors	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	3308      	adds	r3, #8
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	e038      	b.n	8009b06 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a9a:	f003 0302 	and.w	r3, r3, #2
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d108      	bne.n	8009ab4 <ip4_route+0x78>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	330c      	adds	r3, #12
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d101      	bne.n	8009ab4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	e028      	b.n	8009b06 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	60fb      	str	r3, [r7, #12]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1c5      	bne.n	8009a4c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009ac0:	4b15      	ldr	r3, [pc, #84]	; (8009b18 <ip4_route+0xdc>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d01a      	beq.n	8009afe <ip4_route+0xc2>
 8009ac8:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <ip4_route+0xdc>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d012      	beq.n	8009afe <ip4_route+0xc2>
 8009ad8:	4b0f      	ldr	r3, [pc, #60]	; (8009b18 <ip4_route+0xdc>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00a      	beq.n	8009afe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009ae8:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <ip4_route+0xdc>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3304      	adds	r3, #4
 8009aee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d004      	beq.n	8009afe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b7f      	cmp	r3, #127	; 0x7f
 8009afc:	d101      	bne.n	8009b02 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e001      	b.n	8009b06 <ip4_route+0xca>
  }

  return netif_default;
 8009b02:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <ip4_route+0xdc>)
 8009b04:	681b      	ldr	r3, [r3, #0]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	2400814c 	.word	0x2400814c
 8009b18:	24008150 	.word	0x24008150

08009b1c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d016      	beq.n	8009b62 <ip4_input_accept+0x46>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3304      	adds	r3, #4
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d011      	beq.n	8009b62 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009b3e:	4b0b      	ldr	r3, [pc, #44]	; (8009b6c <ip4_input_accept+0x50>)
 8009b40:	695a      	ldr	r2, [r3, #20]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3304      	adds	r3, #4
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d008      	beq.n	8009b5e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8009b4c:	4b07      	ldr	r3, [pc, #28]	; (8009b6c <ip4_input_accept+0x50>)
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 fa08 	bl	8009f68 <ip4_addr_isbroadcast_u32>
 8009b58:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	24005230 	.word	0x24005230

08009b70 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	091b      	lsrs	r3, r3, #4
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	d004      	beq.n	8009b96 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f002 fb81 	bl	800c294 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	e107      	b.n	8009da6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	f003 030f 	and.w	r3, r3, #15
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	885b      	ldrh	r3, [r3, #2]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fe fc6f 	bl	8008490 <lwip_htons>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	891b      	ldrh	r3, [r3, #8]
 8009bba:	89ba      	ldrh	r2, [r7, #12]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d204      	bcs.n	8009bca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8009bc0:	89bb      	ldrh	r3, [r7, #12]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f002 f9df 	bl	800bf88 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	895b      	ldrh	r3, [r3, #10]
 8009bce:	89fa      	ldrh	r2, [r7, #14]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d807      	bhi.n	8009be4 <ip4_input+0x74>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	891b      	ldrh	r3, [r3, #8]
 8009bd8:	89ba      	ldrh	r2, [r7, #12]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d802      	bhi.n	8009be4 <ip4_input+0x74>
 8009bde:	89fb      	ldrh	r3, [r7, #14]
 8009be0:	2b13      	cmp	r3, #19
 8009be2:	d804      	bhi.n	8009bee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f002 fb55 	bl	800c294 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	e0db      	b.n	8009da6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	4a6f      	ldr	r2, [pc, #444]	; (8009db0 <ip4_input+0x240>)
 8009bf4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	4a6d      	ldr	r2, [pc, #436]	; (8009db0 <ip4_input+0x240>)
 8009bfc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009bfe:	4b6c      	ldr	r3, [pc, #432]	; (8009db0 <ip4_input+0x240>)
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c06:	2be0      	cmp	r3, #224	; 0xe0
 8009c08:	d112      	bne.n	8009c30 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c10:	f003 0301 	and.w	r3, r3, #1
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d007      	beq.n	8009c2a <ip4_input+0xba>
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <ip4_input+0xba>
      netif = inp;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	613b      	str	r3, [r7, #16]
 8009c28:	e02a      	b.n	8009c80 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	613b      	str	r3, [r7, #16]
 8009c2e:	e027      	b.n	8009c80 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8009c30:	6838      	ldr	r0, [r7, #0]
 8009c32:	f7ff ff73 	bl	8009b1c <ip4_input_accept>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <ip4_input+0xd2>
      netif = inp;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	613b      	str	r3, [r7, #16]
 8009c40:	e01e      	b.n	8009c80 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8009c46:	4b5a      	ldr	r3, [pc, #360]	; (8009db0 <ip4_input+0x240>)
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8009c4e:	d017      	beq.n	8009c80 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8009c50:	4b58      	ldr	r3, [pc, #352]	; (8009db4 <ip4_input+0x244>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	e00e      	b.n	8009c76 <ip4_input+0x106>
          if (netif == inp) {
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d006      	beq.n	8009c6e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8009c60:	6938      	ldr	r0, [r7, #16]
 8009c62:	f7ff ff5b 	bl	8009b1c <ip4_input_accept>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d108      	bne.n	8009c7e <ip4_input+0x10e>
 8009c6c:	e000      	b.n	8009c70 <ip4_input+0x100>
            continue;
 8009c6e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	613b      	str	r3, [r7, #16]
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1ed      	bne.n	8009c58 <ip4_input+0xe8>
 8009c7c:	e000      	b.n	8009c80 <ip4_input+0x110>
            break;
 8009c7e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009c80:	4b4b      	ldr	r3, [pc, #300]	; (8009db0 <ip4_input+0x240>)
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 f96e 	bl	8009f68 <ip4_addr_isbroadcast_u32>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d105      	bne.n	8009c9e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009c92:	4b47      	ldr	r3, [pc, #284]	; (8009db0 <ip4_input+0x240>)
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009c9a:	2be0      	cmp	r3, #224	; 0xe0
 8009c9c:	d104      	bne.n	8009ca8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f002 faf8 	bl	800c294 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e07e      	b.n	8009da6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d104      	bne.n	8009cb8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f002 faf0 	bl	800c294 <pbuf_free>
    return ERR_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e076      	b.n	8009da6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	88db      	ldrh	r3, [r3, #6]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fc92 	bl	800a5f4 <ip4_reass>
 8009cd0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d101      	bne.n	8009cdc <ip4_input+0x16c>
      return ERR_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e064      	b.n	8009da6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8009ce2:	4a33      	ldr	r2, [pc, #204]	; (8009db0 <ip4_input+0x240>)
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8009ce8:	4a31      	ldr	r2, [pc, #196]	; (8009db0 <ip4_input+0x240>)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8009cee:	4a30      	ldr	r2, [pc, #192]	; (8009db0 <ip4_input+0x240>)
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	f003 030f 	and.w	r3, r3, #15
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	4b2a      	ldr	r3, [pc, #168]	; (8009db0 <ip4_input+0x240>)
 8009d06:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009d08:	89fb      	ldrh	r3, [r7, #14]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f002 fa3b 	bl	800c188 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	7a5b      	ldrb	r3, [r3, #9]
 8009d16:	2b11      	cmp	r3, #17
 8009d18:	d006      	beq.n	8009d28 <ip4_input+0x1b8>
 8009d1a:	2b11      	cmp	r3, #17
 8009d1c:	dc13      	bgt.n	8009d46 <ip4_input+0x1d6>
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d00c      	beq.n	8009d3c <ip4_input+0x1cc>
 8009d22:	2b06      	cmp	r3, #6
 8009d24:	d005      	beq.n	8009d32 <ip4_input+0x1c2>
 8009d26:	e00e      	b.n	8009d46 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f008 f85c 	bl	8011de8 <udp_input>
        break;
 8009d30:	e026      	b.n	8009d80 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f004 f8d5 	bl	800dee4 <tcp_input>
        break;
 8009d3a:	e021      	b.n	8009d80 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff fbf6 	bl	8009530 <icmp_input>
        break;
 8009d44:	e01c      	b.n	8009d80 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009d46:	4b1a      	ldr	r3, [pc, #104]	; (8009db0 <ip4_input+0x240>)
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	6939      	ldr	r1, [r7, #16]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 f90b 	bl	8009f68 <ip4_addr_isbroadcast_u32>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10f      	bne.n	8009d78 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009d58:	4b15      	ldr	r3, [pc, #84]	; (8009db0 <ip4_input+0x240>)
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009d60:	2be0      	cmp	r3, #224	; 0xe0
 8009d62:	d009      	beq.n	8009d78 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009d64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f002 fa7f 	bl	800c26e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8009d70:	2102      	movs	r1, #2
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7ff fcfc 	bl	8009770 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f002 fa8b 	bl	800c294 <pbuf_free>
        break;
 8009d7e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8009d80:	4b0b      	ldr	r3, [pc, #44]	; (8009db0 <ip4_input+0x240>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8009d86:	4b0a      	ldr	r3, [pc, #40]	; (8009db0 <ip4_input+0x240>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8009d8c:	4b08      	ldr	r3, [pc, #32]	; (8009db0 <ip4_input+0x240>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009d92:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <ip4_input+0x240>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009d98:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <ip4_input+0x240>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009d9e:	4b04      	ldr	r3, [pc, #16]	; (8009db0 <ip4_input+0x240>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	24005230 	.word	0x24005230
 8009db4:	2400814c 	.word	0x2400814c

08009db8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b08a      	sub	sp, #40	; 0x28
 8009dbc:	af04      	add	r7, sp, #16
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d009      	beq.n	8009de4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <ip4_output_if+0x26>
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d102      	bne.n	8009de4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8009dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de0:	3304      	adds	r3, #4
 8009de2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009de4:	78fa      	ldrb	r2, [r7, #3]
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	9302      	str	r3, [sp, #8]
 8009dea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	4613      	mov	r3, r2
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6979      	ldr	r1, [r7, #20]
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 f805 	bl	8009e0c <ip4_output_if_src>
 8009e02:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3718      	adds	r7, #24
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	7b9b      	ldrb	r3, [r3, #14]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d006      	beq.n	8009e30 <ip4_output_if_src+0x24>
 8009e22:	4b4b      	ldr	r3, [pc, #300]	; (8009f50 <ip4_output_if_src+0x144>)
 8009e24:	f44f 7255 	mov.w	r2, #852	; 0x354
 8009e28:	494a      	ldr	r1, [pc, #296]	; (8009f54 <ip4_output_if_src+0x148>)
 8009e2a:	484b      	ldr	r0, [pc, #300]	; (8009f58 <ip4_output_if_src+0x14c>)
 8009e2c:	f008 f96a 	bl	8012104 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d060      	beq.n	8009ef8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8009e36:	2314      	movs	r3, #20
 8009e38:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8009e3a:	2114      	movs	r1, #20
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f002 f993 	bl	800c168 <pbuf_add_header>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009e48:	f06f 0301 	mvn.w	r3, #1
 8009e4c:	e07c      	b.n	8009f48 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	895b      	ldrh	r3, [r3, #10]
 8009e58:	2b13      	cmp	r3, #19
 8009e5a:	d806      	bhi.n	8009e6a <ip4_output_if_src+0x5e>
 8009e5c:	4b3c      	ldr	r3, [pc, #240]	; (8009f50 <ip4_output_if_src+0x144>)
 8009e5e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8009e62:	493e      	ldr	r1, [pc, #248]	; (8009f5c <ip4_output_if_src+0x150>)
 8009e64:	483c      	ldr	r0, [pc, #240]	; (8009f58 <ip4_output_if_src+0x14c>)
 8009e66:	f008 f94d 	bl	8012104 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	78fa      	ldrb	r2, [r7, #3]
 8009e6e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009e76:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8009e80:	8b7b      	ldrh	r3, [r7, #26]
 8009e82:	089b      	lsrs	r3, r3, #2
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e8c:	b2da      	uxtb	r2, r3
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009e98:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	891b      	ldrh	r3, [r3, #8]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe faf6 	bl	8008490 <lwip_htons>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	719a      	strb	r2, [r3, #6]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009eb6:	4b2a      	ldr	r3, [pc, #168]	; (8009f60 <ip4_output_if_src+0x154>)
 8009eb8:	881b      	ldrh	r3, [r3, #0]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe fae8 	bl	8008490 <lwip_htons>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8009ec8:	4b25      	ldr	r3, [pc, #148]	; (8009f60 <ip4_output_if_src+0x154>)
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	4b23      	ldr	r3, [pc, #140]	; (8009f60 <ip4_output_if_src+0x154>)
 8009ed2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d104      	bne.n	8009ee4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009eda:	4b22      	ldr	r3, [pc, #136]	; (8009f64 <ip4_output_if_src+0x158>)
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	60da      	str	r2, [r3, #12]
 8009ee2:	e003      	b.n	8009eec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	729a      	strb	r2, [r3, #10]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	72da      	strb	r2, [r3, #11]
 8009ef6:	e00f      	b.n	8009f18 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	895b      	ldrh	r3, [r3, #10]
 8009efc:	2b13      	cmp	r3, #19
 8009efe:	d802      	bhi.n	8009f06 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009f00:	f06f 0301 	mvn.w	r3, #1
 8009f04:	e020      	b.n	8009f48 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8009f12:	f107 0314 	add.w	r3, r7, #20
 8009f16:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00c      	beq.n	8009f3a <ip4_output_if_src+0x12e>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	891a      	ldrh	r2, [r3, #8]
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d906      	bls.n	8009f3a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 fd53 	bl	800a9dc <ip4_frag>
 8009f36:	4603      	mov	r3, r0
 8009f38:	e006      	b.n	8009f48 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	68f9      	ldr	r1, [r7, #12]
 8009f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f44:	4798      	blx	r3
 8009f46:	4603      	mov	r3, r0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3720      	adds	r7, #32
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	08013678 	.word	0x08013678
 8009f54:	080136d0 	.word	0x080136d0
 8009f58:	080136dc 	.word	0x080136dc
 8009f5c:	08013704 	.word	0x08013704
 8009f60:	24005248 	.word	0x24005248
 8009f64:	08015dd4 	.word	0x08015dd4

08009f68 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7c:	d002      	beq.n	8009f84 <ip4_addr_isbroadcast_u32+0x1c>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e02a      	b.n	8009fde <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f8e:	f003 0302 	and.w	r3, r3, #2
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e021      	b.n	8009fde <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d101      	bne.n	8009faa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	e019      	b.n	8009fde <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	405a      	eors	r2, r3
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10d      	bne.n	8009fdc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	43da      	mvns	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	3308      	adds	r3, #8
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d101      	bne.n	8009fdc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e000      	b.n	8009fde <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8009fdc:	2300      	movs	r3, #0
  }
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
	...

08009fec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8009ff6:	4b12      	ldr	r3, [pc, #72]	; (800a040 <ip_reass_tmr+0x54>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8009ffc:	e018      	b.n	800a030 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	7fdb      	ldrb	r3, [r3, #31]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00b      	beq.n	800a01e <ip_reass_tmr+0x32>
      r->timer--;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	7fdb      	ldrb	r3, [r3, #31]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]
 800a01c:	e008      	b.n	800a030 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800a028:	68b9      	ldr	r1, [r7, #8]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f80a 	bl	800a044 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e3      	bne.n	8009ffe <ip_reass_tmr+0x12>
    }
  }
}
 800a036:	bf00      	nop
 800a038:	bf00      	nop
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	2400524c 	.word	0x2400524c

0800a044 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b088      	sub	sp, #32
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	429a      	cmp	r2, r3
 800a058:	d105      	bne.n	800a066 <ip_reass_free_complete_datagram+0x22>
 800a05a:	4b45      	ldr	r3, [pc, #276]	; (800a170 <ip_reass_free_complete_datagram+0x12c>)
 800a05c:	22ab      	movs	r2, #171	; 0xab
 800a05e:	4945      	ldr	r1, [pc, #276]	; (800a174 <ip_reass_free_complete_datagram+0x130>)
 800a060:	4845      	ldr	r0, [pc, #276]	; (800a178 <ip_reass_free_complete_datagram+0x134>)
 800a062:	f008 f84f 	bl	8012104 <iprintf>
  if (prev != NULL) {
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00a      	beq.n	800a082 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	429a      	cmp	r2, r3
 800a074:	d005      	beq.n	800a082 <ip_reass_free_complete_datagram+0x3e>
 800a076:	4b3e      	ldr	r3, [pc, #248]	; (800a170 <ip_reass_free_complete_datagram+0x12c>)
 800a078:	22ad      	movs	r2, #173	; 0xad
 800a07a:	4940      	ldr	r1, [pc, #256]	; (800a17c <ip_reass_free_complete_datagram+0x138>)
 800a07c:	483e      	ldr	r0, [pc, #248]	; (800a178 <ip_reass_free_complete_datagram+0x134>)
 800a07e:	f008 f841 	bl	8012104 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	889b      	ldrh	r3, [r3, #4]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	2b00      	cmp	r3, #0
 800a092:	d12a      	bne.n	800a0ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	6858      	ldr	r0, [r3, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	2214      	movs	r2, #20
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f008 f813 	bl	80120d8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	69b8      	ldr	r0, [r7, #24]
 800a0b6:	f7ff fb6b 	bl	8009790 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a0ba:	69b8      	ldr	r0, [r7, #24]
 800a0bc:	f002 f972 	bl	800c3a4 <pbuf_clen>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a0c4:	8bfa      	ldrh	r2, [r7, #30]
 800a0c6:	8a7b      	ldrh	r3, [r7, #18]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ce:	db05      	blt.n	800a0dc <ip_reass_free_complete_datagram+0x98>
 800a0d0:	4b27      	ldr	r3, [pc, #156]	; (800a170 <ip_reass_free_complete_datagram+0x12c>)
 800a0d2:	22bc      	movs	r2, #188	; 0xbc
 800a0d4:	492a      	ldr	r1, [pc, #168]	; (800a180 <ip_reass_free_complete_datagram+0x13c>)
 800a0d6:	4828      	ldr	r0, [pc, #160]	; (800a178 <ip_reass_free_complete_datagram+0x134>)
 800a0d8:	f008 f814 	bl	8012104 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a0dc:	8bfa      	ldrh	r2, [r7, #30]
 800a0de:	8a7b      	ldrh	r3, [r7, #18]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800a0e4:	69b8      	ldr	r0, [r7, #24]
 800a0e6:	f002 f8d5 	bl	800c294 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800a0f0:	e01f      	b.n	800a132 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f002 f94e 	bl	800c3a4 <pbuf_clen>
 800a108:	4603      	mov	r3, r0
 800a10a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a10c:	8bfa      	ldrh	r2, [r7, #30]
 800a10e:	8a7b      	ldrh	r3, [r7, #18]
 800a110:	4413      	add	r3, r2
 800a112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a116:	db05      	blt.n	800a124 <ip_reass_free_complete_datagram+0xe0>
 800a118:	4b15      	ldr	r3, [pc, #84]	; (800a170 <ip_reass_free_complete_datagram+0x12c>)
 800a11a:	22cc      	movs	r2, #204	; 0xcc
 800a11c:	4918      	ldr	r1, [pc, #96]	; (800a180 <ip_reass_free_complete_datagram+0x13c>)
 800a11e:	4816      	ldr	r0, [pc, #88]	; (800a178 <ip_reass_free_complete_datagram+0x134>)
 800a120:	f007 fff0 	bl	8012104 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a124:	8bfa      	ldrh	r2, [r7, #30]
 800a126:	8a7b      	ldrh	r3, [r7, #18]
 800a128:	4413      	add	r3, r2
 800a12a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f002 f8b1 	bl	800c294 <pbuf_free>
  while (p != NULL) {
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1dc      	bne.n	800a0f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f8c2 	bl	800a2c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800a140:	4b10      	ldr	r3, [pc, #64]	; (800a184 <ip_reass_free_complete_datagram+0x140>)
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	8bfa      	ldrh	r2, [r7, #30]
 800a146:	429a      	cmp	r2, r3
 800a148:	d905      	bls.n	800a156 <ip_reass_free_complete_datagram+0x112>
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <ip_reass_free_complete_datagram+0x12c>)
 800a14c:	22d2      	movs	r2, #210	; 0xd2
 800a14e:	490e      	ldr	r1, [pc, #56]	; (800a188 <ip_reass_free_complete_datagram+0x144>)
 800a150:	4809      	ldr	r0, [pc, #36]	; (800a178 <ip_reass_free_complete_datagram+0x134>)
 800a152:	f007 ffd7 	bl	8012104 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800a156:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <ip_reass_free_complete_datagram+0x140>)
 800a158:	881a      	ldrh	r2, [r3, #0]
 800a15a:	8bfb      	ldrh	r3, [r7, #30]
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	b29a      	uxth	r2, r3
 800a160:	4b08      	ldr	r3, [pc, #32]	; (800a184 <ip_reass_free_complete_datagram+0x140>)
 800a162:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800a164:	8bfb      	ldrh	r3, [r7, #30]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3720      	adds	r7, #32
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	08013734 	.word	0x08013734
 800a174:	08013790 	.word	0x08013790
 800a178:	0801379c 	.word	0x0801379c
 800a17c:	080137c4 	.word	0x080137c4
 800a180:	080137d8 	.word	0x080137d8
 800a184:	24005250 	.word	0x24005250
 800a188:	080137f8 	.word	0x080137f8

0800a18c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	; 0x28
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800a196:	2300      	movs	r3, #0
 800a198:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800a1aa:	4b28      	ldr	r3, [pc, #160]	; (800a24c <ip_reass_remove_oldest_datagram+0xc0>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a1b0:	e030      	b.n	800a214 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	695a      	ldr	r2, [r3, #20]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d10c      	bne.n	800a1d8 <ip_reass_remove_oldest_datagram+0x4c>
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	699a      	ldr	r2, [r3, #24]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d106      	bne.n	800a1d8 <ip_reass_remove_oldest_datagram+0x4c>
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	899a      	ldrh	r2, [r3, #12]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	889b      	ldrh	r3, [r3, #4]
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d014      	beq.n	800a202 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d104      	bne.n	800a1ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	61bb      	str	r3, [r7, #24]
 800a1ec:	e009      	b.n	800a202 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	7fda      	ldrb	r2, [r3, #31]
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	7fdb      	ldrb	r3, [r3, #31]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d803      	bhi.n	800a202 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1cb      	bne.n	800a1b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d008      	beq.n	800a232 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a220:	69b9      	ldr	r1, [r7, #24]
 800a222:	6a38      	ldr	r0, [r7, #32]
 800a224:	f7ff ff0e 	bl	800a044 <ip_reass_free_complete_datagram>
 800a228:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	4413      	add	r3, r2
 800a230:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	429a      	cmp	r2, r3
 800a238:	da02      	bge.n	800a240 <ip_reass_remove_oldest_datagram+0xb4>
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	dcac      	bgt.n	800a19a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a240:	697b      	ldr	r3, [r7, #20]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3728      	adds	r7, #40	; 0x28
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	2400524c 	.word	0x2400524c

0800a250 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a25a:	2004      	movs	r0, #4
 800a25c:	f001 f934 	bl	800b4c8 <memp_malloc>
 800a260:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d110      	bne.n	800a28a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff ff8e 	bl	800a18c <ip_reass_remove_oldest_datagram>
 800a270:	4602      	mov	r2, r0
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	4293      	cmp	r3, r2
 800a276:	dc03      	bgt.n	800a280 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a278:	2004      	movs	r0, #4
 800a27a:	f001 f925 	bl	800b4c8 <memp_malloc>
 800a27e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d101      	bne.n	800a28a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800a286:	2300      	movs	r3, #0
 800a288:	e016      	b.n	800a2b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a28a:	2220      	movs	r2, #32
 800a28c:	2100      	movs	r1, #0
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f007 ff30 	bl	80120f4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	220f      	movs	r2, #15
 800a298:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a29a:	4b09      	ldr	r3, [pc, #36]	; (800a2c0 <ip_reass_enqueue_new_datagram+0x70>)
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a2a2:	4a07      	ldr	r2, [pc, #28]	; (800a2c0 <ip_reass_enqueue_new_datagram+0x70>)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	2214      	movs	r2, #20
 800a2ae:	6879      	ldr	r1, [r7, #4]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f007 ff11 	bl	80120d8 <memcpy>
  return ipr;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	2400524c 	.word	0x2400524c

0800a2c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a2ce:	4b10      	ldr	r3, [pc, #64]	; (800a310 <ip_reass_dequeue_datagram+0x4c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d104      	bne.n	800a2e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a0c      	ldr	r2, [pc, #48]	; (800a310 <ip_reass_dequeue_datagram+0x4c>)
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	e00d      	b.n	800a2fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d106      	bne.n	800a2f6 <ip_reass_dequeue_datagram+0x32>
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <ip_reass_dequeue_datagram+0x50>)
 800a2ea:	f240 1245 	movw	r2, #325	; 0x145
 800a2ee:	490a      	ldr	r1, [pc, #40]	; (800a318 <ip_reass_dequeue_datagram+0x54>)
 800a2f0:	480a      	ldr	r0, [pc, #40]	; (800a31c <ip_reass_dequeue_datagram+0x58>)
 800a2f2:	f007 ff07 	bl	8012104 <iprintf>
    prev->next = ipr->next;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	2004      	movs	r0, #4
 800a302:	f001 f951 	bl	800b5a8 <memp_free>
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	2400524c 	.word	0x2400524c
 800a314:	08013734 	.word	0x08013734
 800a318:	0801381c 	.word	0x0801381c
 800a31c:	0801379c 	.word	0x0801379c

0800a320 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08c      	sub	sp, #48	; 0x30
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800a32c:	2300      	movs	r3, #0
 800a32e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a330:	2301      	movs	r3, #1
 800a332:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	885b      	ldrh	r3, [r3, #2]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	4618      	mov	r0, r3
 800a342:	f7fe f8a5 	bl	8008490 <lwip_htons>
 800a346:	4603      	mov	r3, r0
 800a348:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	f003 030f 	and.w	r3, r3, #15
 800a352:	b2db      	uxtb	r3, r3
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800a358:	7e7b      	ldrb	r3, [r7, #25]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	8b7a      	ldrh	r2, [r7, #26]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d202      	bcs.n	800a368 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a362:	f04f 33ff 	mov.w	r3, #4294967295
 800a366:	e135      	b.n	800a5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800a368:	7e7b      	ldrb	r3, [r7, #25]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	8b7a      	ldrh	r2, [r7, #26]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	88db      	ldrh	r3, [r3, #6]
 800a376:	b29b      	uxth	r3, r3
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fe f889 	bl	8008490 <lwip_htons>
 800a37e:	4603      	mov	r3, r0
 800a380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a384:	b29b      	uxth	r3, r3
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a392:	2200      	movs	r2, #0
 800a394:	701a      	strb	r2, [r3, #0]
 800a396:	2200      	movs	r2, #0
 800a398:	705a      	strb	r2, [r3, #1]
 800a39a:	2200      	movs	r2, #0
 800a39c:	709a      	strb	r2, [r3, #2]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	8afa      	ldrh	r2, [r7, #22]
 800a3a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800a3a8:	8afa      	ldrh	r2, [r7, #22]
 800a3aa:	8b7b      	ldrh	r3, [r7, #26]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800a3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b6:	88db      	ldrh	r3, [r3, #6]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	8afa      	ldrh	r2, [r7, #22]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d902      	bls.n	800a3c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c4:	e106      	b.n	800a5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a3cc:	e068      	b.n	800a4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	889b      	ldrh	r3, [r3, #4]
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	889b      	ldrh	r3, [r3, #4]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d235      	bcs.n	800a450 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d020      	beq.n	800a432 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	889b      	ldrh	r3, [r3, #4]
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	88db      	ldrh	r3, [r3, #6]
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d307      	bcc.n	800a410 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	88db      	ldrh	r3, [r3, #6]
 800a404:	b29a      	uxth	r2, r3
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	889b      	ldrh	r3, [r3, #4]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d902      	bls.n	800a416 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a410:	f04f 33ff 	mov.w	r3, #4294967295
 800a414:	e0de      	b.n	800a5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	88db      	ldrh	r3, [r3, #6]
 800a420:	b29a      	uxth	r2, r3
 800a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a424:	889b      	ldrh	r3, [r3, #4]
 800a426:	b29b      	uxth	r3, r3
 800a428:	429a      	cmp	r2, r3
 800a42a:	d03d      	beq.n	800a4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800a430:	e03a      	b.n	800a4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	88db      	ldrh	r3, [r3, #6]
 800a436:	b29a      	uxth	r2, r3
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	889b      	ldrh	r3, [r3, #4]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	429a      	cmp	r2, r3
 800a440:	d902      	bls.n	800a448 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a442:	f04f 33ff 	mov.w	r3, #4294967295
 800a446:	e0c5      	b.n	800a5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	605a      	str	r2, [r3, #4]
      break;
 800a44e:	e02b      	b.n	800a4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a452:	889b      	ldrh	r3, [r3, #4]
 800a454:	b29a      	uxth	r2, r3
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	889b      	ldrh	r3, [r3, #4]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d102      	bne.n	800a466 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a460:	f04f 33ff 	mov.w	r3, #4294967295
 800a464:	e0b6      	b.n	800a5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a468:	889b      	ldrh	r3, [r3, #4]
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	88db      	ldrh	r3, [r3, #6]
 800a470:	b29b      	uxth	r3, r3
 800a472:	429a      	cmp	r2, r3
 800a474:	d202      	bcs.n	800a47c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a476:	f04f 33ff 	mov.w	r3, #4294967295
 800a47a:	e0ab      	b.n	800a5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d009      	beq.n	800a496 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	88db      	ldrh	r3, [r3, #6]
 800a486:	b29a      	uxth	r2, r3
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	889b      	ldrh	r3, [r3, #4]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	429a      	cmp	r2, r3
 800a490:	d001      	beq.n	800a496 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d193      	bne.n	800a3ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800a4a6:	e000      	b.n	800a4aa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800a4a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d12d      	bne.n	800a50c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d01c      	beq.n	800a4f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b8:	88db      	ldrh	r3, [r3, #6]
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4be:	889b      	ldrh	r3, [r3, #4]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d906      	bls.n	800a4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800a4c6:	4b45      	ldr	r3, [pc, #276]	; (800a5dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a4c8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800a4cc:	4944      	ldr	r1, [pc, #272]	; (800a5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800a4ce:	4845      	ldr	r0, [pc, #276]	; (800a5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a4d0:	f007 fe18 	bl	8012104 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	88db      	ldrh	r3, [r3, #6]
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	889b      	ldrh	r3, [r3, #4]
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d010      	beq.n	800a50c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	623b      	str	r3, [r7, #32]
 800a4ee:	e00d      	b.n	800a50c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d006      	beq.n	800a506 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800a4f8:	4b38      	ldr	r3, [pc, #224]	; (800a5dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a4fa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800a4fe:	493a      	ldr	r1, [pc, #232]	; (800a5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800a500:	4838      	ldr	r0, [pc, #224]	; (800a5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a502:	f007 fdff 	bl	8012104 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d105      	bne.n	800a51e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	7f9b      	ldrb	r3, [r3, #30]
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d059      	beq.n	800a5d2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d04f      	beq.n	800a5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d006      	beq.n	800a53a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	889b      	ldrh	r3, [r3, #4]
 800a534:	b29b      	uxth	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	623b      	str	r3, [r7, #32]
 800a53e:	e041      	b.n	800a5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800a540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a542:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a54a:	e012      	b.n	800a572 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	88db      	ldrh	r3, [r3, #6]
 800a556:	b29a      	uxth	r2, r3
 800a558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55a:	889b      	ldrh	r3, [r3, #4]
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	429a      	cmp	r2, r3
 800a560:	d002      	beq.n	800a568 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	623b      	str	r3, [r7, #32]
            break;
 800a566:	e007      	b.n	800a578 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e9      	bne.n	800a54c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800a578:	6a3b      	ldr	r3, [r7, #32]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d022      	beq.n	800a5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800a586:	4b15      	ldr	r3, [pc, #84]	; (800a5dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a588:	f240 12df 	movw	r2, #479	; 0x1df
 800a58c:	4917      	ldr	r1, [pc, #92]	; (800a5ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a58e:	4815      	ldr	r0, [pc, #84]	; (800a5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a590:	f007 fdb8 	bl	8012104 <iprintf>
          LWIP_ASSERT("sanity check",
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d106      	bne.n	800a5ae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800a5a0:	4b0e      	ldr	r3, [pc, #56]	; (800a5dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a5a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a5a6:	4911      	ldr	r1, [pc, #68]	; (800a5ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a5a8:	480e      	ldr	r0, [pc, #56]	; (800a5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a5aa:	f007 fdab 	bl	8012104 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d006      	beq.n	800a5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800a5b6:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a5b8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800a5bc:	490c      	ldr	r1, [pc, #48]	; (800a5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800a5be:	4809      	ldr	r0, [pc, #36]	; (800a5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a5c0:	f007 fda0 	bl	8012104 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	bf14      	ite	ne
 800a5ca:	2301      	movne	r3, #1
 800a5cc:	2300      	moveq	r3, #0
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	e000      	b.n	800a5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3730      	adds	r7, #48	; 0x30
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	08013734 	.word	0x08013734
 800a5e0:	08013838 	.word	0x08013838
 800a5e4:	0801379c 	.word	0x0801379c
 800a5e8:	08013858 	.word	0x08013858
 800a5ec:	08013890 	.word	0x08013890
 800a5f0:	080138a0 	.word	0x080138a0

0800a5f4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08e      	sub	sp, #56	; 0x38
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800a602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	f003 030f 	and.w	r3, r3, #15
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b14      	cmp	r3, #20
 800a612:	f040 8171 	bne.w	800a8f8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	88db      	ldrh	r3, [r3, #6]
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fd ff37 	bl	8008490 <lwip_htons>
 800a622:	4603      	mov	r3, r0
 800a624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a628:	b29b      	uxth	r3, r3
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	885b      	ldrh	r3, [r3, #2]
 800a632:	b29b      	uxth	r3, r3
 800a634:	4618      	mov	r0, r3
 800a636:	f7fd ff2b 	bl	8008490 <lwip_htons>
 800a63a:	4603      	mov	r3, r0
 800a63c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	f003 030f 	and.w	r3, r3, #15
 800a646:	b2db      	uxtb	r3, r3
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800a64e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a652:	b29b      	uxth	r3, r3
 800a654:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a656:	429a      	cmp	r2, r3
 800a658:	f0c0 8150 	bcc.w	800a8fc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800a65c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a660:	b29b      	uxth	r3, r3
 800a662:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f001 fe9b 	bl	800c3a4 <pbuf_clen>
 800a66e:	4603      	mov	r3, r0
 800a670:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a672:	4b8c      	ldr	r3, [pc, #560]	; (800a8a4 <ip4_reass+0x2b0>)
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	461a      	mov	r2, r3
 800a678:	8c3b      	ldrh	r3, [r7, #32]
 800a67a:	4413      	add	r3, r2
 800a67c:	2b0a      	cmp	r3, #10
 800a67e:	dd10      	ble.n	800a6a2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a680:	8c3b      	ldrh	r3, [r7, #32]
 800a682:	4619      	mov	r1, r3
 800a684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a686:	f7ff fd81 	bl	800a18c <ip_reass_remove_oldest_datagram>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 8137 	beq.w	800a900 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800a692:	4b84      	ldr	r3, [pc, #528]	; (800a8a4 <ip4_reass+0x2b0>)
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	461a      	mov	r2, r3
 800a698:	8c3b      	ldrh	r3, [r7, #32]
 800a69a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a69c:	2b0a      	cmp	r3, #10
 800a69e:	f300 812f 	bgt.w	800a900 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a6a2:	4b81      	ldr	r3, [pc, #516]	; (800a8a8 <ip4_reass+0x2b4>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	633b      	str	r3, [r7, #48]	; 0x30
 800a6a8:	e015      	b.n	800a6d6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ac:	695a      	ldr	r2, [r3, #20]
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d10c      	bne.n	800a6d0 <ip4_reass+0xdc>
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b8:	699a      	ldr	r2, [r3, #24]
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d106      	bne.n	800a6d0 <ip4_reass+0xdc>
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c4:	899a      	ldrh	r2, [r3, #12]
 800a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c8:	889b      	ldrh	r3, [r3, #4]
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d006      	beq.n	800a6de <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	633b      	str	r3, [r7, #48]	; 0x30
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1e6      	bne.n	800a6aa <ip4_reass+0xb6>
 800a6dc:	e000      	b.n	800a6e0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800a6de:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d109      	bne.n	800a6fa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800a6e6:	8c3b      	ldrh	r3, [r7, #32]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ec:	f7ff fdb0 	bl	800a250 <ip_reass_enqueue_new_datagram>
 800a6f0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d11c      	bne.n	800a732 <ip4_reass+0x13e>
      goto nullreturn;
 800a6f8:	e105      	b.n	800a906 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	88db      	ldrh	r3, [r3, #6]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	4618      	mov	r0, r3
 800a702:	f7fd fec5 	bl	8008490 <lwip_htons>
 800a706:	4603      	mov	r3, r0
 800a708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d110      	bne.n	800a732 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	89db      	ldrh	r3, [r3, #14]
 800a714:	4618      	mov	r0, r3
 800a716:	f7fd febb 	bl	8008490 <lwip_htons>
 800a71a:	4603      	mov	r3, r0
 800a71c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a720:	2b00      	cmp	r3, #0
 800a722:	d006      	beq.n	800a732 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a726:	3308      	adds	r3, #8
 800a728:	2214      	movs	r2, #20
 800a72a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a72c:	4618      	mov	r0, r3
 800a72e:	f007 fcd3 	bl	80120d8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800a732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a734:	88db      	ldrh	r3, [r3, #6]
 800a736:	b29b      	uxth	r3, r3
 800a738:	f003 0320 	and.w	r3, r3, #32
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	bf0c      	ite	eq
 800a740:	2301      	moveq	r3, #1
 800a742:	2300      	movne	r3, #0
 800a744:	b2db      	uxtb	r3, r3
 800a746:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00e      	beq.n	800a76c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800a74e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a752:	4413      	add	r3, r2
 800a754:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800a756:	8b7a      	ldrh	r2, [r7, #26]
 800a758:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a75a:	429a      	cmp	r2, r3
 800a75c:	f0c0 80a0 	bcc.w	800a8a0 <ip4_reass+0x2ac>
 800a760:	8b7b      	ldrh	r3, [r7, #26]
 800a762:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800a766:	4293      	cmp	r3, r2
 800a768:	f200 809a 	bhi.w	800a8a0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800a76c:	69fa      	ldr	r2, [r7, #28]
 800a76e:	6879      	ldr	r1, [r7, #4]
 800a770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a772:	f7ff fdd5 	bl	800a320 <ip_reass_chain_frag_into_datagram_and_validate>
 800a776:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77e:	f000 809b 	beq.w	800a8b8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a782:	4b48      	ldr	r3, [pc, #288]	; (800a8a4 <ip4_reass+0x2b0>)
 800a784:	881a      	ldrh	r2, [r3, #0]
 800a786:	8c3b      	ldrh	r3, [r7, #32]
 800a788:	4413      	add	r3, r2
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	4b45      	ldr	r3, [pc, #276]	; (800a8a4 <ip4_reass+0x2b0>)
 800a78e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00d      	beq.n	800a7b2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800a796:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a79a:	4413      	add	r3, r2
 800a79c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800a79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a0:	8a7a      	ldrh	r2, [r7, #18]
 800a7a2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a6:	7f9b      	ldrb	r3, [r3, #30]
 800a7a8:	f043 0301 	orr.w	r3, r3, #1
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d171      	bne.n	800a89c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ba:	8b9b      	ldrh	r3, [r3, #28]
 800a7bc:	3314      	adds	r3, #20
 800a7be:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	2214      	movs	r2, #20
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7dc:	f007 fc7c 	bl	80120d8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a7e0:	8a3b      	ldrh	r3, [r7, #16]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fd fe54 	bl	8008490 <lwip_htons>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	719a      	strb	r2, [r3, #6]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	729a      	strb	r2, [r3, #10]
 800a800:	2200      	movs	r2, #0
 800a802:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800a804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800a80a:	e00d      	b.n	800a828 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800a80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800a812:	2114      	movs	r1, #20
 800a814:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a816:	f001 fcb7 	bl	800c188 <pbuf_remove_header>
      pbuf_cat(p, r);
 800a81a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 fdfb 	bl	800c418 <pbuf_cat>
      r = iprh->next_pbuf;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800a828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1ee      	bne.n	800a80c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800a82e:	4b1e      	ldr	r3, [pc, #120]	; (800a8a8 <ip4_reass+0x2b4>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a834:	429a      	cmp	r2, r3
 800a836:	d102      	bne.n	800a83e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800a838:	2300      	movs	r3, #0
 800a83a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a83c:	e010      	b.n	800a860 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a83e:	4b1a      	ldr	r3, [pc, #104]	; (800a8a8 <ip4_reass+0x2b4>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a844:	e007      	b.n	800a856 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d006      	beq.n	800a85e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1f4      	bne.n	800a846 <ip4_reass+0x252>
 800a85c:	e000      	b.n	800a860 <ip4_reass+0x26c>
          break;
 800a85e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a860:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a864:	f7ff fd2e 	bl	800a2c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f001 fd9b 	bl	800c3a4 <pbuf_clen>
 800a86e:	4603      	mov	r3, r0
 800a870:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a872:	4b0c      	ldr	r3, [pc, #48]	; (800a8a4 <ip4_reass+0x2b0>)
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	8c3a      	ldrh	r2, [r7, #32]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d906      	bls.n	800a88a <ip4_reass+0x296>
 800a87c:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <ip4_reass+0x2b8>)
 800a87e:	f240 229b 	movw	r2, #667	; 0x29b
 800a882:	490b      	ldr	r1, [pc, #44]	; (800a8b0 <ip4_reass+0x2bc>)
 800a884:	480b      	ldr	r0, [pc, #44]	; (800a8b4 <ip4_reass+0x2c0>)
 800a886:	f007 fc3d 	bl	8012104 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a88a:	4b06      	ldr	r3, [pc, #24]	; (800a8a4 <ip4_reass+0x2b0>)
 800a88c:	881a      	ldrh	r2, [r3, #0]
 800a88e:	8c3b      	ldrh	r3, [r7, #32]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	b29a      	uxth	r2, r3
 800a894:	4b03      	ldr	r3, [pc, #12]	; (800a8a4 <ip4_reass+0x2b0>)
 800a896:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	e038      	b.n	800a90e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800a89c:	2300      	movs	r3, #0
 800a89e:	e036      	b.n	800a90e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800a8a0:	bf00      	nop
 800a8a2:	e00a      	b.n	800a8ba <ip4_reass+0x2c6>
 800a8a4:	24005250 	.word	0x24005250
 800a8a8:	2400524c 	.word	0x2400524c
 800a8ac:	08013734 	.word	0x08013734
 800a8b0:	080138c4 	.word	0x080138c4
 800a8b4:	0801379c 	.word	0x0801379c
    goto nullreturn_ipr;
 800a8b8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d106      	bne.n	800a8ce <ip4_reass+0x2da>
 800a8c0:	4b15      	ldr	r3, [pc, #84]	; (800a918 <ip4_reass+0x324>)
 800a8c2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800a8c6:	4915      	ldr	r1, [pc, #84]	; (800a91c <ip4_reass+0x328>)
 800a8c8:	4815      	ldr	r0, [pc, #84]	; (800a920 <ip4_reass+0x32c>)
 800a8ca:	f007 fc1b 	bl	8012104 <iprintf>
  if (ipr->p == NULL) {
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d116      	bne.n	800a904 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a8d6:	4b13      	ldr	r3, [pc, #76]	; (800a924 <ip4_reass+0x330>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d006      	beq.n	800a8ee <ip4_reass+0x2fa>
 800a8e0:	4b0d      	ldr	r3, [pc, #52]	; (800a918 <ip4_reass+0x324>)
 800a8e2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a8e6:	4910      	ldr	r1, [pc, #64]	; (800a928 <ip4_reass+0x334>)
 800a8e8:	480d      	ldr	r0, [pc, #52]	; (800a920 <ip4_reass+0x32c>)
 800a8ea:	f007 fc0b 	bl	8012104 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8f2:	f7ff fce7 	bl	800a2c4 <ip_reass_dequeue_datagram>
 800a8f6:	e006      	b.n	800a906 <ip4_reass+0x312>
    goto nullreturn;
 800a8f8:	bf00      	nop
 800a8fa:	e004      	b.n	800a906 <ip4_reass+0x312>
    goto nullreturn;
 800a8fc:	bf00      	nop
 800a8fe:	e002      	b.n	800a906 <ip4_reass+0x312>
      goto nullreturn;
 800a900:	bf00      	nop
 800a902:	e000      	b.n	800a906 <ip4_reass+0x312>
  }

nullreturn:
 800a904:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 fcc4 	bl	800c294 <pbuf_free>
  return NULL;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3738      	adds	r7, #56	; 0x38
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	08013734 	.word	0x08013734
 800a91c:	080138e0 	.word	0x080138e0
 800a920:	0801379c 	.word	0x0801379c
 800a924:	2400524c 	.word	0x2400524c
 800a928:	080138ec 	.word	0x080138ec

0800a92c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a930:	2005      	movs	r0, #5
 800a932:	f000 fdc9 	bl	800b4c8 <memp_malloc>
 800a936:	4603      	mov	r3, r0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d106      	bne.n	800a958 <ip_frag_free_pbuf_custom_ref+0x1c>
 800a94a:	4b07      	ldr	r3, [pc, #28]	; (800a968 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800a94c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800a950:	4906      	ldr	r1, [pc, #24]	; (800a96c <ip_frag_free_pbuf_custom_ref+0x30>)
 800a952:	4807      	ldr	r0, [pc, #28]	; (800a970 <ip_frag_free_pbuf_custom_ref+0x34>)
 800a954:	f007 fbd6 	bl	8012104 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800a958:	6879      	ldr	r1, [r7, #4]
 800a95a:	2005      	movs	r0, #5
 800a95c:	f000 fe24 	bl	800b5a8 <memp_free>
}
 800a960:	bf00      	nop
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	08013734 	.word	0x08013734
 800a96c:	0801390c 	.word	0x0801390c
 800a970:	0801379c 	.word	0x0801379c

0800a974 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d106      	bne.n	800a994 <ipfrag_free_pbuf_custom+0x20>
 800a986:	4b11      	ldr	r3, [pc, #68]	; (800a9cc <ipfrag_free_pbuf_custom+0x58>)
 800a988:	f240 22ce 	movw	r2, #718	; 0x2ce
 800a98c:	4910      	ldr	r1, [pc, #64]	; (800a9d0 <ipfrag_free_pbuf_custom+0x5c>)
 800a98e:	4811      	ldr	r0, [pc, #68]	; (800a9d4 <ipfrag_free_pbuf_custom+0x60>)
 800a990:	f007 fbb8 	bl	8012104 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d006      	beq.n	800a9aa <ipfrag_free_pbuf_custom+0x36>
 800a99c:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <ipfrag_free_pbuf_custom+0x58>)
 800a99e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800a9a2:	490d      	ldr	r1, [pc, #52]	; (800a9d8 <ipfrag_free_pbuf_custom+0x64>)
 800a9a4:	480b      	ldr	r0, [pc, #44]	; (800a9d4 <ipfrag_free_pbuf_custom+0x60>)
 800a9a6:	f007 fbad 	bl	8012104 <iprintf>
  if (pcr->original != NULL) {
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d004      	beq.n	800a9bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f001 fc6c 	bl	800c294 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f7ff ffbd 	bl	800a93c <ip_frag_free_pbuf_custom_ref>
}
 800a9c2:	bf00      	nop
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	08013734 	.word	0x08013734
 800a9d0:	08013918 	.word	0x08013918
 800a9d4:	0801379c 	.word	0x0801379c
 800a9d8:	08013924 	.word	0x08013924

0800a9dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b094      	sub	sp, #80	; 0x50
 800a9e0:	af02      	add	r7, sp, #8
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a9f2:	3b14      	subs	r3, #20
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	da00      	bge.n	800a9fa <ip4_frag+0x1e>
 800a9f8:	3307      	adds	r3, #7
 800a9fa:	10db      	asrs	r3, r3, #3
 800a9fc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800a9fe:	2314      	movs	r3, #20
 800aa00:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800aa08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800aa0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	f003 030f 	and.w	r3, r3, #15
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b14      	cmp	r3, #20
 800aa1c:	d002      	beq.n	800aa24 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800aa1e:	f06f 0305 	mvn.w	r3, #5
 800aa22:	e110      	b.n	800ac46 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	895b      	ldrh	r3, [r3, #10]
 800aa28:	2b13      	cmp	r3, #19
 800aa2a:	d809      	bhi.n	800aa40 <ip4_frag+0x64>
 800aa2c:	4b88      	ldr	r3, [pc, #544]	; (800ac50 <ip4_frag+0x274>)
 800aa2e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800aa32:	4988      	ldr	r1, [pc, #544]	; (800ac54 <ip4_frag+0x278>)
 800aa34:	4888      	ldr	r0, [pc, #544]	; (800ac58 <ip4_frag+0x27c>)
 800aa36:	f007 fb65 	bl	8012104 <iprintf>
 800aa3a:	f06f 0305 	mvn.w	r3, #5
 800aa3e:	e102      	b.n	800ac46 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	88db      	ldrh	r3, [r3, #6]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fd fd22 	bl	8008490 <lwip_htons>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800aa50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aa52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800aa5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aa5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa60:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	891b      	ldrh	r3, [r3, #8]
 800aa66:	3b14      	subs	r3, #20
 800aa68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800aa6c:	e0e1      	b.n	800ac32 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800aa6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa70:	00db      	lsls	r3, r3, #3
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	bf28      	it	cs
 800aa7c:	4613      	movcs	r3, r2
 800aa7e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800aa80:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aa84:	2114      	movs	r1, #20
 800aa86:	200e      	movs	r0, #14
 800aa88:	f001 f920 	bl	800bccc <pbuf_alloc>
 800aa8c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 80d5 	beq.w	800ac40 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800aa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa98:	895b      	ldrh	r3, [r3, #10]
 800aa9a:	2b13      	cmp	r3, #19
 800aa9c:	d806      	bhi.n	800aaac <ip4_frag+0xd0>
 800aa9e:	4b6c      	ldr	r3, [pc, #432]	; (800ac50 <ip4_frag+0x274>)
 800aaa0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800aaa4:	496d      	ldr	r1, [pc, #436]	; (800ac5c <ip4_frag+0x280>)
 800aaa6:	486c      	ldr	r0, [pc, #432]	; (800ac58 <ip4_frag+0x27c>)
 800aaa8:	f007 fb2c 	bl	8012104 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	2214      	movs	r2, #20
 800aab2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aab4:	4618      	mov	r0, r3
 800aab6:	f007 fb0f 	bl	80120d8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800aac0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aac2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800aac6:	e064      	b.n	800ab92 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	895a      	ldrh	r2, [r3, #10]
 800aacc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	895b      	ldrh	r3, [r3, #10]
 800aad6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800aad8:	429a      	cmp	r2, r3
 800aada:	d906      	bls.n	800aaea <ip4_frag+0x10e>
 800aadc:	4b5c      	ldr	r3, [pc, #368]	; (800ac50 <ip4_frag+0x274>)
 800aade:	f240 322d 	movw	r2, #813	; 0x32d
 800aae2:	495f      	ldr	r1, [pc, #380]	; (800ac60 <ip4_frag+0x284>)
 800aae4:	485c      	ldr	r0, [pc, #368]	; (800ac58 <ip4_frag+0x27c>)
 800aae6:	f007 fb0d 	bl	8012104 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800aaea:	8bfa      	ldrh	r2, [r7, #30]
 800aaec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	bf28      	it	cs
 800aaf4:	4613      	movcs	r3, r2
 800aaf6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800aafa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d105      	bne.n	800ab0e <ip4_frag+0x132>
        poff = 0;
 800ab02:	2300      	movs	r3, #0
 800ab04:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]
        continue;
 800ab0c:	e041      	b.n	800ab92 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ab0e:	f7ff ff0d 	bl	800a92c <ip_frag_alloc_pbuf_custom_ref>
 800ab12:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d103      	bne.n	800ab22 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ab1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab1c:	f001 fbba 	bl	800c294 <pbuf_free>
        goto memerr;
 800ab20:	e08f      	b.n	800ac42 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ab22:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ab28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ab30:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ab34:	9201      	str	r2, [sp, #4]
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2241      	movs	r2, #65	; 0x41
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	f001 f9ef 	bl	800bf20 <pbuf_alloced_custom>
 800ab42:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d106      	bne.n	800ab58 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ab4a:	69b8      	ldr	r0, [r7, #24]
 800ab4c:	f7ff fef6 	bl	800a93c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ab50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab52:	f001 fb9f 	bl	800c294 <pbuf_free>
        goto memerr;
 800ab56:	e074      	b.n	800ac42 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f001 fc3b 	bl	800c3d4 <pbuf_ref>
      pcr->original = p;
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	4a3f      	ldr	r2, [pc, #252]	; (800ac64 <ip4_frag+0x288>)
 800ab68:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ab6a:	6979      	ldr	r1, [r7, #20]
 800ab6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab6e:	f001 fc53 	bl	800c418 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ab72:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ab76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ab80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d004      	beq.n	800ab92 <ip4_frag+0x1b6>
        poff = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ab92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d196      	bne.n	800aac8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ab9a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ab9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aba0:	4413      	add	r3, r2
 800aba2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aba8:	f1a3 0213 	sub.w	r2, r3, #19
 800abac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800abb0:	429a      	cmp	r2, r3
 800abb2:	bfcc      	ite	gt
 800abb4:	2301      	movgt	r3, #1
 800abb6:	2300      	movle	r3, #0
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800abbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800abc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d002      	beq.n	800abd2 <ip4_frag+0x1f6>
 800abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d003      	beq.n	800abda <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800abd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800abd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800abd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800abda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fd fc57 	bl	8008490 <lwip_htons>
 800abe2:	4603      	mov	r3, r0
 800abe4:	461a      	mov	r2, r3
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800abea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800abec:	3314      	adds	r3, #20
 800abee:	b29b      	uxth	r3, r3
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fd fc4d 	bl	8008490 <lwip_htons>
 800abf6:	4603      	mov	r3, r0
 800abf8:	461a      	mov	r2, r3
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	2200      	movs	r2, #0
 800ac02:	729a      	strb	r2, [r3, #10]
 800ac04:	2200      	movs	r2, #0
 800ac06:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac10:	68b8      	ldr	r0, [r7, #8]
 800ac12:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ac14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac16:	f001 fb3d 	bl	800c294 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ac1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ac1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ac26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ac2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ac32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f47f af19 	bne.w	800aa6e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	e002      	b.n	800ac46 <ip4_frag+0x26a>
      goto memerr;
 800ac40:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ac42:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3748      	adds	r7, #72	; 0x48
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	08013734 	.word	0x08013734
 800ac54:	08013930 	.word	0x08013930
 800ac58:	0801379c 	.word	0x0801379c
 800ac5c:	0801394c 	.word	0x0801394c
 800ac60:	0801396c 	.word	0x0801396c
 800ac64:	0800a975 	.word	0x0800a975

0800ac68 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ac72:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <ptr_to_mem+0x20>)
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	88fb      	ldrh	r3, [r7, #6]
 800ac78:	4413      	add	r3, r2
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	370c      	adds	r7, #12
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	24005254 	.word	0x24005254

0800ac8c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <mem_to_ptr+0x20>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	b29b      	uxth	r3, r3
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	24005254 	.word	0x24005254

0800acb0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800acb0:	b590      	push	{r4, r7, lr}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800acb8:	4b45      	ldr	r3, [pc, #276]	; (800add0 <plug_holes+0x120>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d206      	bcs.n	800acd0 <plug_holes+0x20>
 800acc2:	4b44      	ldr	r3, [pc, #272]	; (800add4 <plug_holes+0x124>)
 800acc4:	f240 12df 	movw	r2, #479	; 0x1df
 800acc8:	4943      	ldr	r1, [pc, #268]	; (800add8 <plug_holes+0x128>)
 800acca:	4844      	ldr	r0, [pc, #272]	; (800addc <plug_holes+0x12c>)
 800accc:	f007 fa1a 	bl	8012104 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800acd0:	4b43      	ldr	r3, [pc, #268]	; (800ade0 <plug_holes+0x130>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d306      	bcc.n	800ace8 <plug_holes+0x38>
 800acda:	4b3e      	ldr	r3, [pc, #248]	; (800add4 <plug_holes+0x124>)
 800acdc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ace0:	4940      	ldr	r1, [pc, #256]	; (800ade4 <plug_holes+0x134>)
 800ace2:	483e      	ldr	r0, [pc, #248]	; (800addc <plug_holes+0x12c>)
 800ace4:	f007 fa0e 	bl	8012104 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	791b      	ldrb	r3, [r3, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d006      	beq.n	800acfe <plug_holes+0x4e>
 800acf0:	4b38      	ldr	r3, [pc, #224]	; (800add4 <plug_holes+0x124>)
 800acf2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800acf6:	493c      	ldr	r1, [pc, #240]	; (800ade8 <plug_holes+0x138>)
 800acf8:	4838      	ldr	r0, [pc, #224]	; (800addc <plug_holes+0x12c>)
 800acfa:	f007 fa03 	bl	8012104 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	881b      	ldrh	r3, [r3, #0]
 800ad02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad06:	d906      	bls.n	800ad16 <plug_holes+0x66>
 800ad08:	4b32      	ldr	r3, [pc, #200]	; (800add4 <plug_holes+0x124>)
 800ad0a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ad0e:	4937      	ldr	r1, [pc, #220]	; (800adec <plug_holes+0x13c>)
 800ad10:	4832      	ldr	r0, [pc, #200]	; (800addc <plug_holes+0x12c>)
 800ad12:	f007 f9f7 	bl	8012104 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	881b      	ldrh	r3, [r3, #0]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7ff ffa4 	bl	800ac68 <ptr_to_mem>
 800ad20:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d024      	beq.n	800ad74 <plug_holes+0xc4>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	791b      	ldrb	r3, [r3, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d120      	bne.n	800ad74 <plug_holes+0xc4>
 800ad32:	4b2b      	ldr	r3, [pc, #172]	; (800ade0 <plug_holes+0x130>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d01b      	beq.n	800ad74 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ad3c:	4b2c      	ldr	r3, [pc, #176]	; (800adf0 <plug_holes+0x140>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d102      	bne.n	800ad4c <plug_holes+0x9c>
      lfree = mem;
 800ad46:	4a2a      	ldr	r2, [pc, #168]	; (800adf0 <plug_holes+0x140>)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	881a      	ldrh	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad5c:	d00a      	beq.n	800ad74 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	881b      	ldrh	r3, [r3, #0]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff ff80 	bl	800ac68 <ptr_to_mem>
 800ad68:	4604      	mov	r4, r0
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff ff8e 	bl	800ac8c <mem_to_ptr>
 800ad70:	4603      	mov	r3, r0
 800ad72:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	885b      	ldrh	r3, [r3, #2]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7ff ff75 	bl	800ac68 <ptr_to_mem>
 800ad7e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d01f      	beq.n	800adc8 <plug_holes+0x118>
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	791b      	ldrb	r3, [r3, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d11b      	bne.n	800adc8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ad90:	4b17      	ldr	r3, [pc, #92]	; (800adf0 <plug_holes+0x140>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d102      	bne.n	800ada0 <plug_holes+0xf0>
      lfree = pmem;
 800ad9a:	4a15      	ldr	r2, [pc, #84]	; (800adf0 <plug_holes+0x140>)
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	881a      	ldrh	r2, [r3, #0]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800adb0:	d00a      	beq.n	800adc8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	881b      	ldrh	r3, [r3, #0]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7ff ff56 	bl	800ac68 <ptr_to_mem>
 800adbc:	4604      	mov	r4, r0
 800adbe:	68b8      	ldr	r0, [r7, #8]
 800adc0:	f7ff ff64 	bl	800ac8c <mem_to_ptr>
 800adc4:	4603      	mov	r3, r0
 800adc6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800adc8:	bf00      	nop
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd90      	pop	{r4, r7, pc}
 800add0:	24005254 	.word	0x24005254
 800add4:	0801397c 	.word	0x0801397c
 800add8:	080139d0 	.word	0x080139d0
 800addc:	080139e8 	.word	0x080139e8
 800ade0:	24005258 	.word	0x24005258
 800ade4:	08013a10 	.word	0x08013a10
 800ade8:	08013a2c 	.word	0x08013a2c
 800adec:	08013a48 	.word	0x08013a48
 800adf0:	2400525c 	.word	0x2400525c

0800adf4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800adfa:	4b16      	ldr	r3, [pc, #88]	; (800ae54 <mem_init+0x60>)
 800adfc:	4a16      	ldr	r2, [pc, #88]	; (800ae58 <mem_init+0x64>)
 800adfe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ae00:	4b14      	ldr	r3, [pc, #80]	; (800ae54 <mem_init+0x60>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ae0c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ae1a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ae1e:	f7ff ff23 	bl	800ac68 <ptr_to_mem>
 800ae22:	4603      	mov	r3, r0
 800ae24:	4a0d      	ldr	r2, [pc, #52]	; (800ae5c <mem_init+0x68>)
 800ae26:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ae28:	4b0c      	ldr	r3, [pc, #48]	; (800ae5c <mem_init+0x68>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ae30:	4b0a      	ldr	r3, [pc, #40]	; (800ae5c <mem_init+0x68>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ae38:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ae3a:	4b08      	ldr	r3, [pc, #32]	; (800ae5c <mem_init+0x68>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ae42:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ae44:	4b03      	ldr	r3, [pc, #12]	; (800ae54 <mem_init+0x60>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a05      	ldr	r2, [pc, #20]	; (800ae60 <mem_init+0x6c>)
 800ae4a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ae4c:	bf00      	nop
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	24005254 	.word	0x24005254
 800ae58:	30044000 	.word	0x30044000
 800ae5c:	24005258 	.word	0x24005258
 800ae60:	2400525c 	.word	0x2400525c

0800ae64 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff ff0d 	bl	800ac8c <mem_to_ptr>
 800ae72:	4603      	mov	r3, r0
 800ae74:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7ff fef4 	bl	800ac68 <ptr_to_mem>
 800ae80:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	885b      	ldrh	r3, [r3, #2]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7ff feee 	bl	800ac68 <ptr_to_mem>
 800ae8c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae96:	d818      	bhi.n	800aeca <mem_link_valid+0x66>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	885b      	ldrh	r3, [r3, #2]
 800ae9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aea0:	d813      	bhi.n	800aeca <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800aea6:	8afa      	ldrh	r2, [r7, #22]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d004      	beq.n	800aeb6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	881b      	ldrh	r3, [r3, #0]
 800aeb0:	8afa      	ldrh	r2, [r7, #22]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d109      	bne.n	800aeca <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800aeb6:	4b08      	ldr	r3, [pc, #32]	; (800aed8 <mem_link_valid+0x74>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d006      	beq.n	800aece <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	885b      	ldrh	r3, [r3, #2]
 800aec4:	8afa      	ldrh	r2, [r7, #22]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d001      	beq.n	800aece <mem_link_valid+0x6a>
    return 0;
 800aeca:	2300      	movs	r3, #0
 800aecc:	e000      	b.n	800aed0 <mem_link_valid+0x6c>
  }
  return 1;
 800aece:	2301      	movs	r3, #1
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	24005258 	.word	0x24005258

0800aedc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d04c      	beq.n	800af84 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f003 0303 	and.w	r3, r3, #3
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d007      	beq.n	800af04 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800aef4:	4b25      	ldr	r3, [pc, #148]	; (800af8c <mem_free+0xb0>)
 800aef6:	f240 2273 	movw	r2, #627	; 0x273
 800aefa:	4925      	ldr	r1, [pc, #148]	; (800af90 <mem_free+0xb4>)
 800aefc:	4825      	ldr	r0, [pc, #148]	; (800af94 <mem_free+0xb8>)
 800aefe:	f007 f901 	bl	8012104 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800af02:	e040      	b.n	800af86 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3b08      	subs	r3, #8
 800af08:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800af0a:	4b23      	ldr	r3, [pc, #140]	; (800af98 <mem_free+0xbc>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	429a      	cmp	r2, r3
 800af12:	d306      	bcc.n	800af22 <mem_free+0x46>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f103 020c 	add.w	r2, r3, #12
 800af1a:	4b20      	ldr	r3, [pc, #128]	; (800af9c <mem_free+0xc0>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d907      	bls.n	800af32 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800af22:	4b1a      	ldr	r3, [pc, #104]	; (800af8c <mem_free+0xb0>)
 800af24:	f240 227f 	movw	r2, #639	; 0x27f
 800af28:	491d      	ldr	r1, [pc, #116]	; (800afa0 <mem_free+0xc4>)
 800af2a:	481a      	ldr	r0, [pc, #104]	; (800af94 <mem_free+0xb8>)
 800af2c:	f007 f8ea 	bl	8012104 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800af30:	e029      	b.n	800af86 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	791b      	ldrb	r3, [r3, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d107      	bne.n	800af4a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800af3a:	4b14      	ldr	r3, [pc, #80]	; (800af8c <mem_free+0xb0>)
 800af3c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800af40:	4918      	ldr	r1, [pc, #96]	; (800afa4 <mem_free+0xc8>)
 800af42:	4814      	ldr	r0, [pc, #80]	; (800af94 <mem_free+0xb8>)
 800af44:	f007 f8de 	bl	8012104 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800af48:	e01d      	b.n	800af86 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f7ff ff8a 	bl	800ae64 <mem_link_valid>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d107      	bne.n	800af66 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800af56:	4b0d      	ldr	r3, [pc, #52]	; (800af8c <mem_free+0xb0>)
 800af58:	f240 2295 	movw	r2, #661	; 0x295
 800af5c:	4912      	ldr	r1, [pc, #72]	; (800afa8 <mem_free+0xcc>)
 800af5e:	480d      	ldr	r0, [pc, #52]	; (800af94 <mem_free+0xb8>)
 800af60:	f007 f8d0 	bl	8012104 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800af64:	e00f      	b.n	800af86 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800af6c:	4b0f      	ldr	r3, [pc, #60]	; (800afac <mem_free+0xd0>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	429a      	cmp	r2, r3
 800af74:	d202      	bcs.n	800af7c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800af76:	4a0d      	ldr	r2, [pc, #52]	; (800afac <mem_free+0xd0>)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f7ff fe97 	bl	800acb0 <plug_holes>
 800af82:	e000      	b.n	800af86 <mem_free+0xaa>
    return;
 800af84:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	0801397c 	.word	0x0801397c
 800af90:	08013a74 	.word	0x08013a74
 800af94:	080139e8 	.word	0x080139e8
 800af98:	24005254 	.word	0x24005254
 800af9c:	24005258 	.word	0x24005258
 800afa0:	08013a98 	.word	0x08013a98
 800afa4:	08013ab4 	.word	0x08013ab4
 800afa8:	08013adc 	.word	0x08013adc
 800afac:	2400525c 	.word	0x2400525c

0800afb0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b088      	sub	sp, #32
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800afbc:	887b      	ldrh	r3, [r7, #2]
 800afbe:	3303      	adds	r3, #3
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	f023 0303 	bic.w	r3, r3, #3
 800afc6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800afc8:	8bfb      	ldrh	r3, [r7, #30]
 800afca:	2b0b      	cmp	r3, #11
 800afcc:	d801      	bhi.n	800afd2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800afce:	230c      	movs	r3, #12
 800afd0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800afd2:	8bfb      	ldrh	r3, [r7, #30]
 800afd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afd8:	d803      	bhi.n	800afe2 <mem_trim+0x32>
 800afda:	8bfa      	ldrh	r2, [r7, #30]
 800afdc:	887b      	ldrh	r3, [r7, #2]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d201      	bcs.n	800afe6 <mem_trim+0x36>
    return NULL;
 800afe2:	2300      	movs	r3, #0
 800afe4:	e0cc      	b.n	800b180 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800afe6:	4b68      	ldr	r3, [pc, #416]	; (800b188 <mem_trim+0x1d8>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	429a      	cmp	r2, r3
 800afee:	d304      	bcc.n	800affa <mem_trim+0x4a>
 800aff0:	4b66      	ldr	r3, [pc, #408]	; (800b18c <mem_trim+0x1dc>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d306      	bcc.n	800b008 <mem_trim+0x58>
 800affa:	4b65      	ldr	r3, [pc, #404]	; (800b190 <mem_trim+0x1e0>)
 800affc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b000:	4964      	ldr	r1, [pc, #400]	; (800b194 <mem_trim+0x1e4>)
 800b002:	4865      	ldr	r0, [pc, #404]	; (800b198 <mem_trim+0x1e8>)
 800b004:	f007 f87e 	bl	8012104 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b008:	4b5f      	ldr	r3, [pc, #380]	; (800b188 <mem_trim+0x1d8>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d304      	bcc.n	800b01c <mem_trim+0x6c>
 800b012:	4b5e      	ldr	r3, [pc, #376]	; (800b18c <mem_trim+0x1dc>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d301      	bcc.n	800b020 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	e0af      	b.n	800b180 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3b08      	subs	r3, #8
 800b024:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b026:	69b8      	ldr	r0, [r7, #24]
 800b028:	f7ff fe30 	bl	800ac8c <mem_to_ptr>
 800b02c:	4603      	mov	r3, r0
 800b02e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	881a      	ldrh	r2, [r3, #0]
 800b034:	8afb      	ldrh	r3, [r7, #22]
 800b036:	1ad3      	subs	r3, r2, r3
 800b038:	b29b      	uxth	r3, r3
 800b03a:	3b08      	subs	r3, #8
 800b03c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b03e:	8bfa      	ldrh	r2, [r7, #30]
 800b040:	8abb      	ldrh	r3, [r7, #20]
 800b042:	429a      	cmp	r2, r3
 800b044:	d906      	bls.n	800b054 <mem_trim+0xa4>
 800b046:	4b52      	ldr	r3, [pc, #328]	; (800b190 <mem_trim+0x1e0>)
 800b048:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b04c:	4953      	ldr	r1, [pc, #332]	; (800b19c <mem_trim+0x1ec>)
 800b04e:	4852      	ldr	r0, [pc, #328]	; (800b198 <mem_trim+0x1e8>)
 800b050:	f007 f858 	bl	8012104 <iprintf>
  if (newsize > size) {
 800b054:	8bfa      	ldrh	r2, [r7, #30]
 800b056:	8abb      	ldrh	r3, [r7, #20]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d901      	bls.n	800b060 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b05c:	2300      	movs	r3, #0
 800b05e:	e08f      	b.n	800b180 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b060:	8bfa      	ldrh	r2, [r7, #30]
 800b062:	8abb      	ldrh	r3, [r7, #20]
 800b064:	429a      	cmp	r2, r3
 800b066:	d101      	bne.n	800b06c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	e089      	b.n	800b180 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	4618      	mov	r0, r3
 800b072:	f7ff fdf9 	bl	800ac68 <ptr_to_mem>
 800b076:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	791b      	ldrb	r3, [r3, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d13f      	bne.n	800b100 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	881b      	ldrh	r3, [r3, #0]
 800b084:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b088:	d106      	bne.n	800b098 <mem_trim+0xe8>
 800b08a:	4b41      	ldr	r3, [pc, #260]	; (800b190 <mem_trim+0x1e0>)
 800b08c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b090:	4943      	ldr	r1, [pc, #268]	; (800b1a0 <mem_trim+0x1f0>)
 800b092:	4841      	ldr	r0, [pc, #260]	; (800b198 <mem_trim+0x1e8>)
 800b094:	f007 f836 	bl	8012104 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	881b      	ldrh	r3, [r3, #0]
 800b09c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b09e:	8afa      	ldrh	r2, [r7, #22]
 800b0a0:	8bfb      	ldrh	r3, [r7, #30]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	3308      	adds	r3, #8
 800b0a8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b0aa:	4b3e      	ldr	r3, [pc, #248]	; (800b1a4 <mem_trim+0x1f4>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	693a      	ldr	r2, [r7, #16]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d106      	bne.n	800b0c2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b0b4:	89fb      	ldrh	r3, [r7, #14]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7ff fdd6 	bl	800ac68 <ptr_to_mem>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	4a39      	ldr	r2, [pc, #228]	; (800b1a4 <mem_trim+0x1f4>)
 800b0c0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b0c2:	89fb      	ldrh	r3, [r7, #14]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7ff fdcf 	bl	800ac68 <ptr_to_mem>
 800b0ca:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	89ba      	ldrh	r2, [r7, #12]
 800b0d6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	8afa      	ldrh	r2, [r7, #22]
 800b0dc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	89fa      	ldrh	r2, [r7, #14]
 800b0e2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0ec:	d047      	beq.n	800b17e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff fdb8 	bl	800ac68 <ptr_to_mem>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	89fb      	ldrh	r3, [r7, #14]
 800b0fc:	8053      	strh	r3, [r2, #2]
 800b0fe:	e03e      	b.n	800b17e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b100:	8bfb      	ldrh	r3, [r7, #30]
 800b102:	f103 0214 	add.w	r2, r3, #20
 800b106:	8abb      	ldrh	r3, [r7, #20]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d838      	bhi.n	800b17e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b10c:	8afa      	ldrh	r2, [r7, #22]
 800b10e:	8bfb      	ldrh	r3, [r7, #30]
 800b110:	4413      	add	r3, r2
 800b112:	b29b      	uxth	r3, r3
 800b114:	3308      	adds	r3, #8
 800b116:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b120:	d106      	bne.n	800b130 <mem_trim+0x180>
 800b122:	4b1b      	ldr	r3, [pc, #108]	; (800b190 <mem_trim+0x1e0>)
 800b124:	f240 3216 	movw	r2, #790	; 0x316
 800b128:	491d      	ldr	r1, [pc, #116]	; (800b1a0 <mem_trim+0x1f0>)
 800b12a:	481b      	ldr	r0, [pc, #108]	; (800b198 <mem_trim+0x1e8>)
 800b12c:	f006 ffea 	bl	8012104 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b130:	89fb      	ldrh	r3, [r7, #14]
 800b132:	4618      	mov	r0, r3
 800b134:	f7ff fd98 	bl	800ac68 <ptr_to_mem>
 800b138:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b13a:	4b1a      	ldr	r3, [pc, #104]	; (800b1a4 <mem_trim+0x1f4>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	429a      	cmp	r2, r3
 800b142:	d202      	bcs.n	800b14a <mem_trim+0x19a>
      lfree = mem2;
 800b144:	4a17      	ldr	r2, [pc, #92]	; (800b1a4 <mem_trim+0x1f4>)
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	2200      	movs	r2, #0
 800b14e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	881a      	ldrh	r2, [r3, #0]
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	8afa      	ldrh	r2, [r7, #22]
 800b15c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	89fa      	ldrh	r2, [r7, #14]
 800b162:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b16c:	d007      	beq.n	800b17e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff fd78 	bl	800ac68 <ptr_to_mem>
 800b178:	4602      	mov	r2, r0
 800b17a:	89fb      	ldrh	r3, [r7, #14]
 800b17c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b17e:	687b      	ldr	r3, [r7, #4]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3720      	adds	r7, #32
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	24005254 	.word	0x24005254
 800b18c:	24005258 	.word	0x24005258
 800b190:	0801397c 	.word	0x0801397c
 800b194:	08013b10 	.word	0x08013b10
 800b198:	080139e8 	.word	0x080139e8
 800b19c:	08013b28 	.word	0x08013b28
 800b1a0:	08013b48 	.word	0x08013b48
 800b1a4:	2400525c 	.word	0x2400525c

0800b1a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b088      	sub	sp, #32
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b1b2:	88fb      	ldrh	r3, [r7, #6]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <mem_malloc+0x14>
    return NULL;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e0d9      	b.n	800b370 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b1bc:	88fb      	ldrh	r3, [r7, #6]
 800b1be:	3303      	adds	r3, #3
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	f023 0303 	bic.w	r3, r3, #3
 800b1c6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b1c8:	8bbb      	ldrh	r3, [r7, #28]
 800b1ca:	2b0b      	cmp	r3, #11
 800b1cc:	d801      	bhi.n	800b1d2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b1ce:	230c      	movs	r3, #12
 800b1d0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b1d2:	8bbb      	ldrh	r3, [r7, #28]
 800b1d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1d8:	d803      	bhi.n	800b1e2 <mem_malloc+0x3a>
 800b1da:	8bba      	ldrh	r2, [r7, #28]
 800b1dc:	88fb      	ldrh	r3, [r7, #6]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d201      	bcs.n	800b1e6 <mem_malloc+0x3e>
    return NULL;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e0c4      	b.n	800b370 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b1e6:	4b64      	ldr	r3, [pc, #400]	; (800b378 <mem_malloc+0x1d0>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7ff fd4e 	bl	800ac8c <mem_to_ptr>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	83fb      	strh	r3, [r7, #30]
 800b1f4:	e0b4      	b.n	800b360 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b1f6:	8bfb      	ldrh	r3, [r7, #30]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7ff fd35 	bl	800ac68 <ptr_to_mem>
 800b1fe:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	791b      	ldrb	r3, [r3, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	f040 80a4 	bne.w	800b352 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	881b      	ldrh	r3, [r3, #0]
 800b20e:	461a      	mov	r2, r3
 800b210:	8bfb      	ldrh	r3, [r7, #30]
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	f1a3 0208 	sub.w	r2, r3, #8
 800b218:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b21a:	429a      	cmp	r2, r3
 800b21c:	f0c0 8099 	bcc.w	800b352 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	461a      	mov	r2, r3
 800b226:	8bfb      	ldrh	r3, [r7, #30]
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	f1a3 0208 	sub.w	r2, r3, #8
 800b22e:	8bbb      	ldrh	r3, [r7, #28]
 800b230:	3314      	adds	r3, #20
 800b232:	429a      	cmp	r2, r3
 800b234:	d333      	bcc.n	800b29e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b236:	8bfa      	ldrh	r2, [r7, #30]
 800b238:	8bbb      	ldrh	r3, [r7, #28]
 800b23a:	4413      	add	r3, r2
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	3308      	adds	r3, #8
 800b240:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b242:	8a7b      	ldrh	r3, [r7, #18]
 800b244:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b248:	d106      	bne.n	800b258 <mem_malloc+0xb0>
 800b24a:	4b4c      	ldr	r3, [pc, #304]	; (800b37c <mem_malloc+0x1d4>)
 800b24c:	f240 3287 	movw	r2, #903	; 0x387
 800b250:	494b      	ldr	r1, [pc, #300]	; (800b380 <mem_malloc+0x1d8>)
 800b252:	484c      	ldr	r0, [pc, #304]	; (800b384 <mem_malloc+0x1dc>)
 800b254:	f006 ff56 	bl	8012104 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b258:	8a7b      	ldrh	r3, [r7, #18]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7ff fd04 	bl	800ac68 <ptr_to_mem>
 800b260:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	881a      	ldrh	r2, [r3, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	8bfa      	ldrh	r2, [r7, #30]
 800b274:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	8a7a      	ldrh	r2, [r7, #18]
 800b27a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	2201      	movs	r2, #1
 800b280:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	881b      	ldrh	r3, [r3, #0]
 800b286:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b28a:	d00b      	beq.n	800b2a4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	881b      	ldrh	r3, [r3, #0]
 800b290:	4618      	mov	r0, r3
 800b292:	f7ff fce9 	bl	800ac68 <ptr_to_mem>
 800b296:	4602      	mov	r2, r0
 800b298:	8a7b      	ldrh	r3, [r7, #18]
 800b29a:	8053      	strh	r3, [r2, #2]
 800b29c:	e002      	b.n	800b2a4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b2a4:	4b34      	ldr	r3, [pc, #208]	; (800b378 <mem_malloc+0x1d0>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	697a      	ldr	r2, [r7, #20]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d127      	bne.n	800b2fe <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b2ae:	4b32      	ldr	r3, [pc, #200]	; (800b378 <mem_malloc+0x1d0>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b2b4:	e005      	b.n	800b2c2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	881b      	ldrh	r3, [r3, #0]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7ff fcd4 	bl	800ac68 <ptr_to_mem>
 800b2c0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	791b      	ldrb	r3, [r3, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d004      	beq.n	800b2d4 <mem_malloc+0x12c>
 800b2ca:	4b2f      	ldr	r3, [pc, #188]	; (800b388 <mem_malloc+0x1e0>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d1f0      	bne.n	800b2b6 <mem_malloc+0x10e>
          }
          lfree = cur;
 800b2d4:	4a28      	ldr	r2, [pc, #160]	; (800b378 <mem_malloc+0x1d0>)
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b2da:	4b27      	ldr	r3, [pc, #156]	; (800b378 <mem_malloc+0x1d0>)
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	4b2a      	ldr	r3, [pc, #168]	; (800b388 <mem_malloc+0x1e0>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d00b      	beq.n	800b2fe <mem_malloc+0x156>
 800b2e6:	4b24      	ldr	r3, [pc, #144]	; (800b378 <mem_malloc+0x1d0>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	791b      	ldrb	r3, [r3, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d006      	beq.n	800b2fe <mem_malloc+0x156>
 800b2f0:	4b22      	ldr	r3, [pc, #136]	; (800b37c <mem_malloc+0x1d4>)
 800b2f2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b2f6:	4925      	ldr	r1, [pc, #148]	; (800b38c <mem_malloc+0x1e4>)
 800b2f8:	4822      	ldr	r0, [pc, #136]	; (800b384 <mem_malloc+0x1dc>)
 800b2fa:	f006 ff03 	bl	8012104 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b2fe:	8bba      	ldrh	r2, [r7, #28]
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	4413      	add	r3, r2
 800b304:	3308      	adds	r3, #8
 800b306:	4a20      	ldr	r2, [pc, #128]	; (800b388 <mem_malloc+0x1e0>)
 800b308:	6812      	ldr	r2, [r2, #0]
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d906      	bls.n	800b31c <mem_malloc+0x174>
 800b30e:	4b1b      	ldr	r3, [pc, #108]	; (800b37c <mem_malloc+0x1d4>)
 800b310:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b314:	491e      	ldr	r1, [pc, #120]	; (800b390 <mem_malloc+0x1e8>)
 800b316:	481b      	ldr	r0, [pc, #108]	; (800b384 <mem_malloc+0x1dc>)
 800b318:	f006 fef4 	bl	8012104 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	f003 0303 	and.w	r3, r3, #3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d006      	beq.n	800b334 <mem_malloc+0x18c>
 800b326:	4b15      	ldr	r3, [pc, #84]	; (800b37c <mem_malloc+0x1d4>)
 800b328:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b32c:	4919      	ldr	r1, [pc, #100]	; (800b394 <mem_malloc+0x1ec>)
 800b32e:	4815      	ldr	r0, [pc, #84]	; (800b384 <mem_malloc+0x1dc>)
 800b330:	f006 fee8 	bl	8012104 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	f003 0303 	and.w	r3, r3, #3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d006      	beq.n	800b34c <mem_malloc+0x1a4>
 800b33e:	4b0f      	ldr	r3, [pc, #60]	; (800b37c <mem_malloc+0x1d4>)
 800b340:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b344:	4914      	ldr	r1, [pc, #80]	; (800b398 <mem_malloc+0x1f0>)
 800b346:	480f      	ldr	r0, [pc, #60]	; (800b384 <mem_malloc+0x1dc>)
 800b348:	f006 fedc 	bl	8012104 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	3308      	adds	r3, #8
 800b350:	e00e      	b.n	800b370 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b352:	8bfb      	ldrh	r3, [r7, #30]
 800b354:	4618      	mov	r0, r3
 800b356:	f7ff fc87 	bl	800ac68 <ptr_to_mem>
 800b35a:	4603      	mov	r3, r0
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b360:	8bfa      	ldrh	r2, [r7, #30]
 800b362:	8bbb      	ldrh	r3, [r7, #28]
 800b364:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b368:	429a      	cmp	r2, r3
 800b36a:	f4ff af44 	bcc.w	800b1f6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3720      	adds	r7, #32
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	2400525c 	.word	0x2400525c
 800b37c:	0801397c 	.word	0x0801397c
 800b380:	08013b48 	.word	0x08013b48
 800b384:	080139e8 	.word	0x080139e8
 800b388:	24005258 	.word	0x24005258
 800b38c:	08013b5c 	.word	0x08013b5c
 800b390:	08013b78 	.word	0x08013b78
 800b394:	08013ba8 	.word	0x08013ba8
 800b398:	08013bd8 	.word	0x08013bd8

0800b39c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	3303      	adds	r3, #3
 800b3b2:	f023 0303 	bic.w	r3, r3, #3
 800b3b6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]
 800b3bc:	e011      	b.n	800b3e2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	881b      	ldrh	r3, [r3, #0]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	4413      	add	r3, r2
 800b3da:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	60fb      	str	r3, [r7, #12]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	885b      	ldrh	r3, [r3, #2]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	dbe7      	blt.n	800b3be <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b3ee:	bf00      	nop
 800b3f0:	bf00      	nop
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b402:	2300      	movs	r3, #0
 800b404:	80fb      	strh	r3, [r7, #6]
 800b406:	e009      	b.n	800b41c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b408:	88fb      	ldrh	r3, [r7, #6]
 800b40a:	4a08      	ldr	r2, [pc, #32]	; (800b42c <memp_init+0x30>)
 800b40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b410:	4618      	mov	r0, r3
 800b412:	f7ff ffc3 	bl	800b39c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b416:	88fb      	ldrh	r3, [r7, #6]
 800b418:	3301      	adds	r3, #1
 800b41a:	80fb      	strh	r3, [r7, #6]
 800b41c:	88fb      	ldrh	r3, [r7, #6]
 800b41e:	2b08      	cmp	r3, #8
 800b420:	d9f2      	bls.n	800b408 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b422:	bf00      	nop
 800b424:	bf00      	nop
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	08015e44 	.word	0x08015e44

0800b430 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d012      	beq.n	800b46c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	6812      	ldr	r2, [r2, #0]
 800b44e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f003 0303 	and.w	r3, r3, #3
 800b456:	2b00      	cmp	r3, #0
 800b458:	d006      	beq.n	800b468 <do_memp_malloc_pool+0x38>
 800b45a:	4b07      	ldr	r3, [pc, #28]	; (800b478 <do_memp_malloc_pool+0x48>)
 800b45c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b460:	4906      	ldr	r1, [pc, #24]	; (800b47c <do_memp_malloc_pool+0x4c>)
 800b462:	4807      	ldr	r0, [pc, #28]	; (800b480 <do_memp_malloc_pool+0x50>)
 800b464:	f006 fe4e 	bl	8012104 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	e000      	b.n	800b46e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	08013bfc 	.word	0x08013bfc
 800b47c:	08013c50 	.word	0x08013c50
 800b480:	08013c74 	.word	0x08013c74

0800b484 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d106      	bne.n	800b4a0 <memp_malloc_pool+0x1c>
 800b492:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <memp_malloc_pool+0x38>)
 800b494:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b498:	4909      	ldr	r1, [pc, #36]	; (800b4c0 <memp_malloc_pool+0x3c>)
 800b49a:	480a      	ldr	r0, [pc, #40]	; (800b4c4 <memp_malloc_pool+0x40>)
 800b49c:	f006 fe32 	bl	8012104 <iprintf>
  if (desc == NULL) {
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d101      	bne.n	800b4aa <memp_malloc_pool+0x26>
    return NULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	e003      	b.n	800b4b2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7ff ffc0 	bl	800b430 <do_memp_malloc_pool>
 800b4b0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	08013bfc 	.word	0x08013bfc
 800b4c0:	08013c9c 	.word	0x08013c9c
 800b4c4:	08013c74 	.word	0x08013c74

0800b4c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b4d2:	79fb      	ldrb	r3, [r7, #7]
 800b4d4:	2b08      	cmp	r3, #8
 800b4d6:	d908      	bls.n	800b4ea <memp_malloc+0x22>
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <memp_malloc+0x3c>)
 800b4da:	f240 1257 	movw	r2, #343	; 0x157
 800b4de:	490a      	ldr	r1, [pc, #40]	; (800b508 <memp_malloc+0x40>)
 800b4e0:	480a      	ldr	r0, [pc, #40]	; (800b50c <memp_malloc+0x44>)
 800b4e2:	f006 fe0f 	bl	8012104 <iprintf>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e008      	b.n	800b4fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b4ea:	79fb      	ldrb	r3, [r7, #7]
 800b4ec:	4a08      	ldr	r2, [pc, #32]	; (800b510 <memp_malloc+0x48>)
 800b4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7ff ff9c 	bl	800b430 <do_memp_malloc_pool>
 800b4f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	08013bfc 	.word	0x08013bfc
 800b508:	08013cb0 	.word	0x08013cb0
 800b50c:	08013c74 	.word	0x08013c74
 800b510:	08015e44 	.word	0x08015e44

0800b514 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	f003 0303 	and.w	r3, r3, #3
 800b524:	2b00      	cmp	r3, #0
 800b526:	d006      	beq.n	800b536 <do_memp_free_pool+0x22>
 800b528:	4b0a      	ldr	r3, [pc, #40]	; (800b554 <do_memp_free_pool+0x40>)
 800b52a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b52e:	490a      	ldr	r1, [pc, #40]	; (800b558 <do_memp_free_pool+0x44>)
 800b530:	480a      	ldr	r0, [pc, #40]	; (800b55c <do_memp_free_pool+0x48>)
 800b532:	f006 fde7 	bl	8012104 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b54c:	bf00      	nop
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	08013bfc 	.word	0x08013bfc
 800b558:	08013cd0 	.word	0x08013cd0
 800b55c:	08013c74 	.word	0x08013c74

0800b560 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d106      	bne.n	800b57e <memp_free_pool+0x1e>
 800b570:	4b0a      	ldr	r3, [pc, #40]	; (800b59c <memp_free_pool+0x3c>)
 800b572:	f240 1295 	movw	r2, #405	; 0x195
 800b576:	490a      	ldr	r1, [pc, #40]	; (800b5a0 <memp_free_pool+0x40>)
 800b578:	480a      	ldr	r0, [pc, #40]	; (800b5a4 <memp_free_pool+0x44>)
 800b57a:	f006 fdc3 	bl	8012104 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d007      	beq.n	800b594 <memp_free_pool+0x34>
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d004      	beq.n	800b594 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7ff ffc1 	bl	800b514 <do_memp_free_pool>
 800b592:	e000      	b.n	800b596 <memp_free_pool+0x36>
    return;
 800b594:	bf00      	nop
}
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	08013bfc 	.word	0x08013bfc
 800b5a0:	08013c9c 	.word	0x08013c9c
 800b5a4:	08013c74 	.word	0x08013c74

0800b5a8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	6039      	str	r1, [r7, #0]
 800b5b2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b5b4:	79fb      	ldrb	r3, [r7, #7]
 800b5b6:	2b08      	cmp	r3, #8
 800b5b8:	d907      	bls.n	800b5ca <memp_free+0x22>
 800b5ba:	4b0c      	ldr	r3, [pc, #48]	; (800b5ec <memp_free+0x44>)
 800b5bc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b5c0:	490b      	ldr	r1, [pc, #44]	; (800b5f0 <memp_free+0x48>)
 800b5c2:	480c      	ldr	r0, [pc, #48]	; (800b5f4 <memp_free+0x4c>)
 800b5c4:	f006 fd9e 	bl	8012104 <iprintf>
 800b5c8:	e00c      	b.n	800b5e4 <memp_free+0x3c>

  if (mem == NULL) {
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d008      	beq.n	800b5e2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	4a09      	ldr	r2, [pc, #36]	; (800b5f8 <memp_free+0x50>)
 800b5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7ff ff9a 	bl	800b514 <do_memp_free_pool>
 800b5e0:	e000      	b.n	800b5e4 <memp_free+0x3c>
    return;
 800b5e2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	08013bfc 	.word	0x08013bfc
 800b5f0:	08013cf0 	.word	0x08013cf0
 800b5f4:	08013c74 	.word	0x08013c74
 800b5f8:	08015e44 	.word	0x08015e44

0800b5fc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b600:	bf00      	nop
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr
	...

0800b60c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
 800b618:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d108      	bne.n	800b632 <netif_add+0x26>
 800b620:	4b57      	ldr	r3, [pc, #348]	; (800b780 <netif_add+0x174>)
 800b622:	f240 1227 	movw	r2, #295	; 0x127
 800b626:	4957      	ldr	r1, [pc, #348]	; (800b784 <netif_add+0x178>)
 800b628:	4857      	ldr	r0, [pc, #348]	; (800b788 <netif_add+0x17c>)
 800b62a:	f006 fd6b 	bl	8012104 <iprintf>
 800b62e:	2300      	movs	r3, #0
 800b630:	e0a2      	b.n	800b778 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b634:	2b00      	cmp	r3, #0
 800b636:	d108      	bne.n	800b64a <netif_add+0x3e>
 800b638:	4b51      	ldr	r3, [pc, #324]	; (800b780 <netif_add+0x174>)
 800b63a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b63e:	4953      	ldr	r1, [pc, #332]	; (800b78c <netif_add+0x180>)
 800b640:	4851      	ldr	r0, [pc, #324]	; (800b788 <netif_add+0x17c>)
 800b642:	f006 fd5f 	bl	8012104 <iprintf>
 800b646:	2300      	movs	r3, #0
 800b648:	e096      	b.n	800b778 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b650:	4b4f      	ldr	r3, [pc, #316]	; (800b790 <netif_add+0x184>)
 800b652:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d101      	bne.n	800b65e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b65a:	4b4d      	ldr	r3, [pc, #308]	; (800b790 <netif_add+0x184>)
 800b65c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d101      	bne.n	800b668 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b664:	4b4a      	ldr	r3, [pc, #296]	; (800b790 <netif_add+0x184>)
 800b666:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4a45      	ldr	r2, [pc, #276]	; (800b794 <netif_add+0x188>)
 800b67e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6a3a      	ldr	r2, [r7, #32]
 800b698:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b69a:	4b3f      	ldr	r3, [pc, #252]	; (800b798 <netif_add+0x18c>)
 800b69c:	781a      	ldrb	r2, [r3, #0]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6a8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	68b9      	ldr	r1, [r7, #8]
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f000 f913 	bl	800b8dc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	4798      	blx	r3
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <netif_add+0xba>
    return NULL;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e058      	b.n	800b778 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6cc:	2bff      	cmp	r3, #255	; 0xff
 800b6ce:	d103      	bne.n	800b6d8 <netif_add+0xcc>
        netif->num = 0;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b6dc:	4b2f      	ldr	r3, [pc, #188]	; (800b79c <netif_add+0x190>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	617b      	str	r3, [r7, #20]
 800b6e2:	e02b      	b.n	800b73c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d106      	bne.n	800b6fa <netif_add+0xee>
 800b6ec:	4b24      	ldr	r3, [pc, #144]	; (800b780 <netif_add+0x174>)
 800b6ee:	f240 128b 	movw	r2, #395	; 0x18b
 800b6f2:	492b      	ldr	r1, [pc, #172]	; (800b7a0 <netif_add+0x194>)
 800b6f4:	4824      	ldr	r0, [pc, #144]	; (800b788 <netif_add+0x17c>)
 800b6f6:	f006 fd05 	bl	8012104 <iprintf>
        num_netifs++;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	2bff      	cmp	r3, #255	; 0xff
 800b704:	dd06      	ble.n	800b714 <netif_add+0x108>
 800b706:	4b1e      	ldr	r3, [pc, #120]	; (800b780 <netif_add+0x174>)
 800b708:	f240 128d 	movw	r2, #397	; 0x18d
 800b70c:	4925      	ldr	r1, [pc, #148]	; (800b7a4 <netif_add+0x198>)
 800b70e:	481e      	ldr	r0, [pc, #120]	; (800b788 <netif_add+0x17c>)
 800b710:	f006 fcf8 	bl	8012104 <iprintf>
        if (netif2->num == netif->num) {
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b720:	429a      	cmp	r2, r3
 800b722:	d108      	bne.n	800b736 <netif_add+0x12a>
          netif->num++;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b72a:	3301      	adds	r3, #1
 800b72c:	b2da      	uxtb	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b734:	e005      	b.n	800b742 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	617b      	str	r3, [r7, #20]
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1d0      	bne.n	800b6e4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1be      	bne.n	800b6c6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b74e:	2bfe      	cmp	r3, #254	; 0xfe
 800b750:	d103      	bne.n	800b75a <netif_add+0x14e>
    netif_num = 0;
 800b752:	4b11      	ldr	r3, [pc, #68]	; (800b798 <netif_add+0x18c>)
 800b754:	2200      	movs	r2, #0
 800b756:	701a      	strb	r2, [r3, #0]
 800b758:	e006      	b.n	800b768 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b760:	3301      	adds	r3, #1
 800b762:	b2da      	uxtb	r2, r3
 800b764:	4b0c      	ldr	r3, [pc, #48]	; (800b798 <netif_add+0x18c>)
 800b766:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b768:	4b0c      	ldr	r3, [pc, #48]	; (800b79c <netif_add+0x190>)
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b770:	4a0a      	ldr	r2, [pc, #40]	; (800b79c <netif_add+0x190>)
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b776:	68fb      	ldr	r3, [r7, #12]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	08013d0c 	.word	0x08013d0c
 800b784:	08013dc0 	.word	0x08013dc0
 800b788:	08013d7c 	.word	0x08013d7c
 800b78c:	08013ddc 	.word	0x08013ddc
 800b790:	08015dd4 	.word	0x08015dd4
 800b794:	0800bbb7 	.word	0x0800bbb7
 800b798:	24008154 	.word	0x24008154
 800b79c:	2400814c 	.word	0x2400814c
 800b7a0:	08013e00 	.word	0x08013e00
 800b7a4:	08013e14 	.word	0x08013e14

0800b7a8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f002 fb43 	bl	800de40 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f006 fc27 	bl	8012010 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b7c2:	bf00      	nop
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
	...

0800b7cc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d106      	bne.n	800b7ec <netif_do_set_ipaddr+0x20>
 800b7de:	4b1d      	ldr	r3, [pc, #116]	; (800b854 <netif_do_set_ipaddr+0x88>)
 800b7e0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b7e4:	491c      	ldr	r1, [pc, #112]	; (800b858 <netif_do_set_ipaddr+0x8c>)
 800b7e6:	481d      	ldr	r0, [pc, #116]	; (800b85c <netif_do_set_ipaddr+0x90>)
 800b7e8:	f006 fc8c 	bl	8012104 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d106      	bne.n	800b800 <netif_do_set_ipaddr+0x34>
 800b7f2:	4b18      	ldr	r3, [pc, #96]	; (800b854 <netif_do_set_ipaddr+0x88>)
 800b7f4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b7f8:	4917      	ldr	r1, [pc, #92]	; (800b858 <netif_do_set_ipaddr+0x8c>)
 800b7fa:	4818      	ldr	r0, [pc, #96]	; (800b85c <netif_do_set_ipaddr+0x90>)
 800b7fc:	f006 fc82 	bl	8012104 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	3304      	adds	r3, #4
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d01c      	beq.n	800b848 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	3304      	adds	r3, #4
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b81e:	f107 0314 	add.w	r3, r7, #20
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7ff ffbf 	bl	800b7a8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <netif_do_set_ipaddr+0x6a>
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	e000      	b.n	800b838 <netif_do_set_ipaddr+0x6c>
 800b836:	2300      	movs	r3, #0
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b83c:	2101      	movs	r1, #1
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 f8d2 	bl	800b9e8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b844:	2301      	movs	r3, #1
 800b846:	e000      	b.n	800b84a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	08013d0c 	.word	0x08013d0c
 800b858:	08013e44 	.word	0x08013e44
 800b85c:	08013d7c 	.word	0x08013d7c

0800b860 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	3308      	adds	r3, #8
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	429a      	cmp	r2, r3
 800b878:	d00a      	beq.n	800b890 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d002      	beq.n	800b886 <netif_do_set_netmask+0x26>
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	e000      	b.n	800b888 <netif_do_set_netmask+0x28>
 800b886:	2300      	movs	r3, #0
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b88c:	2301      	movs	r3, #1
 800b88e:	e000      	b.n	800b892 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b085      	sub	sp, #20
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	60f8      	str	r0, [r7, #12]
 800b8a6:	60b9      	str	r1, [r7, #8]
 800b8a8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	330c      	adds	r3, #12
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d00a      	beq.n	800b8ce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <netif_do_set_gw+0x26>
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	e000      	b.n	800b8c6 <netif_do_set_gw+0x28>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e000      	b.n	800b8d0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b8f8:	4b1c      	ldr	r3, [pc, #112]	; (800b96c <netif_set_addr+0x90>)
 800b8fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b902:	4b1a      	ldr	r3, [pc, #104]	; (800b96c <netif_set_addr+0x90>)
 800b904:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d101      	bne.n	800b910 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b90c:	4b17      	ldr	r3, [pc, #92]	; (800b96c <netif_set_addr+0x90>)
 800b90e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d003      	beq.n	800b91e <netif_set_addr+0x42>
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d101      	bne.n	800b922 <netif_set_addr+0x46>
 800b91e:	2301      	movs	r3, #1
 800b920:	e000      	b.n	800b924 <netif_set_addr+0x48>
 800b922:	2300      	movs	r3, #0
 800b924:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d006      	beq.n	800b93a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b92c:	f107 0310 	add.w	r3, r7, #16
 800b930:	461a      	mov	r2, r3
 800b932:	68b9      	ldr	r1, [r7, #8]
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f7ff ff49 	bl	800b7cc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b93a:	69fa      	ldr	r2, [r7, #28]
 800b93c:	6879      	ldr	r1, [r7, #4]
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f7ff ff8e 	bl	800b860 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b944:	69ba      	ldr	r2, [r7, #24]
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f7ff ffa8 	bl	800b89e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d106      	bne.n	800b962 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b954:	f107 0310 	add.w	r3, r7, #16
 800b958:	461a      	mov	r2, r3
 800b95a:	68b9      	ldr	r1, [r7, #8]
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f7ff ff35 	bl	800b7cc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b962:	bf00      	nop
 800b964:	3720      	adds	r7, #32
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	08015dd4 	.word	0x08015dd4

0800b970 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b978:	4a04      	ldr	r2, [pc, #16]	; (800b98c <netif_set_default+0x1c>)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b97e:	bf00      	nop
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	24008150 	.word	0x24008150

0800b990 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d107      	bne.n	800b9ae <netif_set_up+0x1e>
 800b99e:	4b0f      	ldr	r3, [pc, #60]	; (800b9dc <netif_set_up+0x4c>)
 800b9a0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b9a4:	490e      	ldr	r1, [pc, #56]	; (800b9e0 <netif_set_up+0x50>)
 800b9a6:	480f      	ldr	r0, [pc, #60]	; (800b9e4 <netif_set_up+0x54>)
 800b9a8:	f006 fbac 	bl	8012104 <iprintf>
 800b9ac:	e013      	b.n	800b9d6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10c      	bne.n	800b9d6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9c2:	f043 0301 	orr.w	r3, r3, #1
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b9ce:	2103      	movs	r1, #3
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f809 	bl	800b9e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	08013d0c 	.word	0x08013d0c
 800b9e0:	08013eb4 	.word	0x08013eb4
 800b9e4:	08013d7c 	.word	0x08013d7c

0800b9e8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d106      	bne.n	800ba08 <netif_issue_reports+0x20>
 800b9fa:	4b18      	ldr	r3, [pc, #96]	; (800ba5c <netif_issue_reports+0x74>)
 800b9fc:	f240 326d 	movw	r2, #877	; 0x36d
 800ba00:	4917      	ldr	r1, [pc, #92]	; (800ba60 <netif_issue_reports+0x78>)
 800ba02:	4818      	ldr	r0, [pc, #96]	; (800ba64 <netif_issue_reports+0x7c>)
 800ba04:	f006 fb7e 	bl	8012104 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba0e:	f003 0304 	and.w	r3, r3, #4
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d01e      	beq.n	800ba54 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba1c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d017      	beq.n	800ba54 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba24:	78fb      	ldrb	r3, [r7, #3]
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d013      	beq.n	800ba56 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	3304      	adds	r3, #4
 800ba32:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00e      	beq.n	800ba56 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba3e:	f003 0308 	and.w	r3, r3, #8
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d007      	beq.n	800ba56 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3304      	adds	r3, #4
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f7fd fc87 	bl	8009360 <etharp_request>
 800ba52:	e000      	b.n	800ba56 <netif_issue_reports+0x6e>
    return;
 800ba54:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	08013d0c 	.word	0x08013d0c
 800ba60:	08013ed0 	.word	0x08013ed0
 800ba64:	08013d7c 	.word	0x08013d7c

0800ba68 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d107      	bne.n	800ba86 <netif_set_down+0x1e>
 800ba76:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <netif_set_down+0x58>)
 800ba78:	f240 329b 	movw	r2, #923	; 0x39b
 800ba7c:	4911      	ldr	r1, [pc, #68]	; (800bac4 <netif_set_down+0x5c>)
 800ba7e:	4812      	ldr	r0, [pc, #72]	; (800bac8 <netif_set_down+0x60>)
 800ba80:	f006 fb40 	bl	8012104 <iprintf>
 800ba84:	e019      	b.n	800baba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba8c:	f003 0301 	and.w	r3, r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d012      	beq.n	800baba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba9a:	f023 0301 	bic.w	r3, r3, #1
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800baac:	f003 0308 	and.w	r3, r3, #8
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7fd f811 	bl	8008adc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	08013d0c 	.word	0x08013d0c
 800bac4:	08013ef4 	.word	0x08013ef4
 800bac8:	08013d7c 	.word	0x08013d7c

0800bacc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d107      	bne.n	800baea <netif_set_link_up+0x1e>
 800bada:	4b13      	ldr	r3, [pc, #76]	; (800bb28 <netif_set_link_up+0x5c>)
 800badc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bae0:	4912      	ldr	r1, [pc, #72]	; (800bb2c <netif_set_link_up+0x60>)
 800bae2:	4813      	ldr	r0, [pc, #76]	; (800bb30 <netif_set_link_up+0x64>)
 800bae4:	f006 fb0e 	bl	8012104 <iprintf>
 800bae8:	e01b      	b.n	800bb22 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800baf0:	f003 0304 	and.w	r3, r3, #4
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d114      	bne.n	800bb22 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bafe:	f043 0304 	orr.w	r3, r3, #4
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bb0a:	2103      	movs	r1, #3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7ff ff6b 	bl	800b9e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	69db      	ldr	r3, [r3, #28]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d003      	beq.n	800bb22 <netif_set_link_up+0x56>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	69db      	ldr	r3, [r3, #28]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	08013d0c 	.word	0x08013d0c
 800bb2c:	08013f14 	.word	0x08013f14
 800bb30:	08013d7c 	.word	0x08013d7c

0800bb34 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d107      	bne.n	800bb52 <netif_set_link_down+0x1e>
 800bb42:	4b11      	ldr	r3, [pc, #68]	; (800bb88 <netif_set_link_down+0x54>)
 800bb44:	f240 4206 	movw	r2, #1030	; 0x406
 800bb48:	4910      	ldr	r1, [pc, #64]	; (800bb8c <netif_set_link_down+0x58>)
 800bb4a:	4811      	ldr	r0, [pc, #68]	; (800bb90 <netif_set_link_down+0x5c>)
 800bb4c:	f006 fada 	bl	8012104 <iprintf>
 800bb50:	e017      	b.n	800bb82 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb58:	f003 0304 	and.w	r3, r3, #4
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d010      	beq.n	800bb82 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb66:	f023 0304 	bic.w	r3, r3, #4
 800bb6a:	b2da      	uxtb	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	69db      	ldr	r3, [r3, #28]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d003      	beq.n	800bb82 <netif_set_link_down+0x4e>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	08013d0c 	.word	0x08013d0c
 800bb8c:	08013f38 	.word	0x08013f38
 800bb90:	08013d7c 	.word	0x08013d7c

0800bb94 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d002      	beq.n	800bbaa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	683a      	ldr	r2, [r7, #0]
 800bba8:	61da      	str	r2, [r3, #28]
  }
}
 800bbaa:	bf00      	nop
 800bbac:	370c      	adds	r7, #12
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b085      	sub	sp, #20
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	60f8      	str	r0, [r7, #12]
 800bbbe:	60b9      	str	r1, [r7, #8]
 800bbc0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bbc2:	f06f 030b 	mvn.w	r3, #11
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
	...

0800bbd4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bbde:	79fb      	ldrb	r3, [r7, #7]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d013      	beq.n	800bc0c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bbe4:	4b0d      	ldr	r3, [pc, #52]	; (800bc1c <netif_get_by_index+0x48>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	60fb      	str	r3, [r7, #12]
 800bbea:	e00c      	b.n	800bc06 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	79fa      	ldrb	r2, [r7, #7]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d101      	bne.n	800bc00 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	e006      	b.n	800bc0e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	60fb      	str	r3, [r7, #12]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1ef      	bne.n	800bbec <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bc0c:	2300      	movs	r3, #0
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3714      	adds	r7, #20
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	2400814c 	.word	0x2400814c

0800bc20 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bc26:	4b0c      	ldr	r3, [pc, #48]	; (800bc58 <pbuf_free_ooseq+0x38>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc2c:	4b0b      	ldr	r3, [pc, #44]	; (800bc5c <pbuf_free_ooseq+0x3c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	607b      	str	r3, [r7, #4]
 800bc32:	e00a      	b.n	800bc4a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d003      	beq.n	800bc44 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f002 f93d 	bl	800debc <tcp_free_ooseq>
      return;
 800bc42:	e005      	b.n	800bc50 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	607b      	str	r3, [r7, #4]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d1f1      	bne.n	800bc34 <pbuf_free_ooseq+0x14>
    }
  }
}
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	24008155 	.word	0x24008155
 800bc5c:	24008164 	.word	0x24008164

0800bc60 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bc60:	b480      	push	{r7}
 800bc62:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bc64:	4b03      	ldr	r3, [pc, #12]	; (800bc74 <pbuf_pool_is_empty+0x14>)
 800bc66:	2201      	movs	r2, #1
 800bc68:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bc6a:	bf00      	nop
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	24008155 	.word	0x24008155

0800bc78 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	4611      	mov	r1, r2
 800bc84:	461a      	mov	r2, r3
 800bc86:	460b      	mov	r3, r1
 800bc88:	80fb      	strh	r3, [r7, #6]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2200      	movs	r2, #0
 800bc92:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	68ba      	ldr	r2, [r7, #8]
 800bc98:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	88fa      	ldrh	r2, [r7, #6]
 800bc9e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	88ba      	ldrh	r2, [r7, #4]
 800bca4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bca6:	8b3b      	ldrh	r3, [r7, #24]
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	7f3a      	ldrb	r2, [r7, #28]
 800bcb2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	73da      	strb	r2, [r3, #15]
}
 800bcc0:	bf00      	nop
 800bcc2:	3714      	adds	r7, #20
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08c      	sub	sp, #48	; 0x30
 800bcd0:	af02      	add	r7, sp, #8
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	71fb      	strb	r3, [r7, #7]
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	80bb      	strh	r3, [r7, #4]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bcde:	79fb      	ldrb	r3, [r7, #7]
 800bce0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bce2:	887b      	ldrh	r3, [r7, #2]
 800bce4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bce8:	d07f      	beq.n	800bdea <pbuf_alloc+0x11e>
 800bcea:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bcee:	f300 80c8 	bgt.w	800be82 <pbuf_alloc+0x1b6>
 800bcf2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bcf6:	d010      	beq.n	800bd1a <pbuf_alloc+0x4e>
 800bcf8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bcfc:	f300 80c1 	bgt.w	800be82 <pbuf_alloc+0x1b6>
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d002      	beq.n	800bd0a <pbuf_alloc+0x3e>
 800bd04:	2b41      	cmp	r3, #65	; 0x41
 800bd06:	f040 80bc 	bne.w	800be82 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bd0a:	887a      	ldrh	r2, [r7, #2]
 800bd0c:	88bb      	ldrh	r3, [r7, #4]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	2000      	movs	r0, #0
 800bd12:	f000 f8d1 	bl	800beb8 <pbuf_alloc_reference>
 800bd16:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bd18:	e0bd      	b.n	800be96 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bd22:	88bb      	ldrh	r3, [r7, #4]
 800bd24:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bd26:	2008      	movs	r0, #8
 800bd28:	f7ff fbce 	bl	800b4c8 <memp_malloc>
 800bd2c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d109      	bne.n	800bd48 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bd34:	f7ff ff94 	bl	800bc60 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d002      	beq.n	800bd44 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bd3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd40:	f000 faa8 	bl	800c294 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bd44:	2300      	movs	r3, #0
 800bd46:	e0a7      	b.n	800be98 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bd48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd4a:	3303      	adds	r3, #3
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	f023 0303 	bic.w	r3, r3, #3
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	8b7a      	ldrh	r2, [r7, #26]
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	bf28      	it	cs
 800bd60:	4613      	movcs	r3, r2
 800bd62:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bd64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd66:	3310      	adds	r3, #16
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	3303      	adds	r3, #3
 800bd6e:	f023 0303 	bic.w	r3, r3, #3
 800bd72:	4618      	mov	r0, r3
 800bd74:	89f9      	ldrh	r1, [r7, #14]
 800bd76:	8b7a      	ldrh	r2, [r7, #26]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	887b      	ldrh	r3, [r7, #2]
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	460b      	mov	r3, r1
 800bd82:	4601      	mov	r1, r0
 800bd84:	6938      	ldr	r0, [r7, #16]
 800bd86:	f7ff ff77 	bl	800bc78 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	f003 0303 	and.w	r3, r3, #3
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d006      	beq.n	800bda4 <pbuf_alloc+0xd8>
 800bd96:	4b42      	ldr	r3, [pc, #264]	; (800bea0 <pbuf_alloc+0x1d4>)
 800bd98:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd9c:	4941      	ldr	r1, [pc, #260]	; (800bea4 <pbuf_alloc+0x1d8>)
 800bd9e:	4842      	ldr	r0, [pc, #264]	; (800bea8 <pbuf_alloc+0x1dc>)
 800bda0:	f006 f9b0 	bl	8012104 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bda4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bda6:	3303      	adds	r3, #3
 800bda8:	f023 0303 	bic.w	r3, r3, #3
 800bdac:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bdb0:	d106      	bne.n	800bdc0 <pbuf_alloc+0xf4>
 800bdb2:	4b3b      	ldr	r3, [pc, #236]	; (800bea0 <pbuf_alloc+0x1d4>)
 800bdb4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bdb8:	493c      	ldr	r1, [pc, #240]	; (800beac <pbuf_alloc+0x1e0>)
 800bdba:	483b      	ldr	r0, [pc, #236]	; (800bea8 <pbuf_alloc+0x1dc>)
 800bdbc:	f006 f9a2 	bl	8012104 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d102      	bne.n	800bdcc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdca:	e002      	b.n	800bdd2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bdd6:	8b7a      	ldrh	r2, [r7, #26]
 800bdd8:	89fb      	ldrh	r3, [r7, #14]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bde2:	8b7b      	ldrh	r3, [r7, #26]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d19e      	bne.n	800bd26 <pbuf_alloc+0x5a>
      break;
 800bde8:	e055      	b.n	800be96 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bdea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdec:	3303      	adds	r3, #3
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	f023 0303 	bic.w	r3, r3, #3
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	88bb      	ldrh	r3, [r7, #4]
 800bdf8:	3303      	adds	r3, #3
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	f023 0303 	bic.w	r3, r3, #3
 800be00:	b29b      	uxth	r3, r3
 800be02:	4413      	add	r3, r2
 800be04:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800be06:	8b3b      	ldrh	r3, [r7, #24]
 800be08:	3310      	adds	r3, #16
 800be0a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800be0c:	8b3a      	ldrh	r2, [r7, #24]
 800be0e:	88bb      	ldrh	r3, [r7, #4]
 800be10:	3303      	adds	r3, #3
 800be12:	f023 0303 	bic.w	r3, r3, #3
 800be16:	429a      	cmp	r2, r3
 800be18:	d306      	bcc.n	800be28 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800be1a:	8afa      	ldrh	r2, [r7, #22]
 800be1c:	88bb      	ldrh	r3, [r7, #4]
 800be1e:	3303      	adds	r3, #3
 800be20:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800be24:	429a      	cmp	r2, r3
 800be26:	d201      	bcs.n	800be2c <pbuf_alloc+0x160>
        return NULL;
 800be28:	2300      	movs	r3, #0
 800be2a:	e035      	b.n	800be98 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800be2c:	8afb      	ldrh	r3, [r7, #22]
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff f9ba 	bl	800b1a8 <mem_malloc>
 800be34:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800be36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d101      	bne.n	800be40 <pbuf_alloc+0x174>
        return NULL;
 800be3c:	2300      	movs	r3, #0
 800be3e:	e02b      	b.n	800be98 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800be40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be42:	3310      	adds	r3, #16
 800be44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be46:	4413      	add	r3, r2
 800be48:	3303      	adds	r3, #3
 800be4a:	f023 0303 	bic.w	r3, r3, #3
 800be4e:	4618      	mov	r0, r3
 800be50:	88b9      	ldrh	r1, [r7, #4]
 800be52:	88ba      	ldrh	r2, [r7, #4]
 800be54:	2300      	movs	r3, #0
 800be56:	9301      	str	r3, [sp, #4]
 800be58:	887b      	ldrh	r3, [r7, #2]
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	460b      	mov	r3, r1
 800be5e:	4601      	mov	r1, r0
 800be60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be62:	f7ff ff09 	bl	800bc78 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800be66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	f003 0303 	and.w	r3, r3, #3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d010      	beq.n	800be94 <pbuf_alloc+0x1c8>
 800be72:	4b0b      	ldr	r3, [pc, #44]	; (800bea0 <pbuf_alloc+0x1d4>)
 800be74:	f44f 7291 	mov.w	r2, #290	; 0x122
 800be78:	490d      	ldr	r1, [pc, #52]	; (800beb0 <pbuf_alloc+0x1e4>)
 800be7a:	480b      	ldr	r0, [pc, #44]	; (800bea8 <pbuf_alloc+0x1dc>)
 800be7c:	f006 f942 	bl	8012104 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800be80:	e008      	b.n	800be94 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800be82:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <pbuf_alloc+0x1d4>)
 800be84:	f240 1227 	movw	r2, #295	; 0x127
 800be88:	490a      	ldr	r1, [pc, #40]	; (800beb4 <pbuf_alloc+0x1e8>)
 800be8a:	4807      	ldr	r0, [pc, #28]	; (800bea8 <pbuf_alloc+0x1dc>)
 800be8c:	f006 f93a 	bl	8012104 <iprintf>
      return NULL;
 800be90:	2300      	movs	r3, #0
 800be92:	e001      	b.n	800be98 <pbuf_alloc+0x1cc>
      break;
 800be94:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3728      	adds	r7, #40	; 0x28
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	08013f5c 	.word	0x08013f5c
 800bea4:	08013fb0 	.word	0x08013fb0
 800bea8:	08013fe0 	.word	0x08013fe0
 800beac:	08014008 	.word	0x08014008
 800beb0:	0801403c 	.word	0x0801403c
 800beb4:	08014068 	.word	0x08014068

0800beb8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af02      	add	r7, sp, #8
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	460b      	mov	r3, r1
 800bec2:	807b      	strh	r3, [r7, #2]
 800bec4:	4613      	mov	r3, r2
 800bec6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bec8:	883b      	ldrh	r3, [r7, #0]
 800beca:	2b41      	cmp	r3, #65	; 0x41
 800becc:	d009      	beq.n	800bee2 <pbuf_alloc_reference+0x2a>
 800bece:	883b      	ldrh	r3, [r7, #0]
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d006      	beq.n	800bee2 <pbuf_alloc_reference+0x2a>
 800bed4:	4b0f      	ldr	r3, [pc, #60]	; (800bf14 <pbuf_alloc_reference+0x5c>)
 800bed6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800beda:	490f      	ldr	r1, [pc, #60]	; (800bf18 <pbuf_alloc_reference+0x60>)
 800bedc:	480f      	ldr	r0, [pc, #60]	; (800bf1c <pbuf_alloc_reference+0x64>)
 800bede:	f006 f911 	bl	8012104 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bee2:	2007      	movs	r0, #7
 800bee4:	f7ff faf0 	bl	800b4c8 <memp_malloc>
 800bee8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d101      	bne.n	800bef4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bef0:	2300      	movs	r3, #0
 800bef2:	e00b      	b.n	800bf0c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bef4:	8879      	ldrh	r1, [r7, #2]
 800bef6:	887a      	ldrh	r2, [r7, #2]
 800bef8:	2300      	movs	r3, #0
 800befa:	9301      	str	r3, [sp, #4]
 800befc:	883b      	ldrh	r3, [r7, #0]
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	460b      	mov	r3, r1
 800bf02:	6879      	ldr	r1, [r7, #4]
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f7ff feb7 	bl	800bc78 <pbuf_init_alloced_pbuf>
  return p;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	08013f5c 	.word	0x08013f5c
 800bf18:	08014084 	.word	0x08014084
 800bf1c:	08013fe0 	.word	0x08013fe0

0800bf20 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b088      	sub	sp, #32
 800bf24:	af02      	add	r7, sp, #8
 800bf26:	607b      	str	r3, [r7, #4]
 800bf28:	4603      	mov	r3, r0
 800bf2a:	73fb      	strb	r3, [r7, #15]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	81bb      	strh	r3, [r7, #12]
 800bf30:	4613      	mov	r3, r2
 800bf32:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bf34:	7bfb      	ldrb	r3, [r7, #15]
 800bf36:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bf38:	8a7b      	ldrh	r3, [r7, #18]
 800bf3a:	3303      	adds	r3, #3
 800bf3c:	f023 0203 	bic.w	r2, r3, #3
 800bf40:	89bb      	ldrh	r3, [r7, #12]
 800bf42:	441a      	add	r2, r3
 800bf44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d901      	bls.n	800bf4e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	e018      	b.n	800bf80 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d007      	beq.n	800bf64 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bf54:	8a7b      	ldrh	r3, [r7, #18]
 800bf56:	3303      	adds	r3, #3
 800bf58:	f023 0303 	bic.w	r3, r3, #3
 800bf5c:	6a3a      	ldr	r2, [r7, #32]
 800bf5e:	4413      	add	r3, r2
 800bf60:	617b      	str	r3, [r7, #20]
 800bf62:	e001      	b.n	800bf68 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bf64:	2300      	movs	r3, #0
 800bf66:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	89b9      	ldrh	r1, [r7, #12]
 800bf6c:	89ba      	ldrh	r2, [r7, #12]
 800bf6e:	2302      	movs	r3, #2
 800bf70:	9301      	str	r3, [sp, #4]
 800bf72:	897b      	ldrh	r3, [r7, #10]
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	460b      	mov	r3, r1
 800bf78:	6979      	ldr	r1, [r7, #20]
 800bf7a:	f7ff fe7d 	bl	800bc78 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bf7e:	687b      	ldr	r3, [r7, #4]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3718      	adds	r7, #24
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	460b      	mov	r3, r1
 800bf92:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d106      	bne.n	800bfa8 <pbuf_realloc+0x20>
 800bf9a:	4b3a      	ldr	r3, [pc, #232]	; (800c084 <pbuf_realloc+0xfc>)
 800bf9c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bfa0:	4939      	ldr	r1, [pc, #228]	; (800c088 <pbuf_realloc+0x100>)
 800bfa2:	483a      	ldr	r0, [pc, #232]	; (800c08c <pbuf_realloc+0x104>)
 800bfa4:	f006 f8ae 	bl	8012104 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	891b      	ldrh	r3, [r3, #8]
 800bfac:	887a      	ldrh	r2, [r7, #2]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d263      	bcs.n	800c07a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	891a      	ldrh	r2, [r3, #8]
 800bfb6:	887b      	ldrh	r3, [r7, #2]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bfbc:	887b      	ldrh	r3, [r7, #2]
 800bfbe:	817b      	strh	r3, [r7, #10]
  q = p;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bfc4:	e018      	b.n	800bff8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	895b      	ldrh	r3, [r3, #10]
 800bfca:	897a      	ldrh	r2, [r7, #10]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	891a      	ldrh	r2, [r3, #8]
 800bfd4:	893b      	ldrh	r3, [r7, #8]
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <pbuf_realloc+0x70>
 800bfea:	4b26      	ldr	r3, [pc, #152]	; (800c084 <pbuf_realloc+0xfc>)
 800bfec:	f240 12af 	movw	r2, #431	; 0x1af
 800bff0:	4927      	ldr	r1, [pc, #156]	; (800c090 <pbuf_realloc+0x108>)
 800bff2:	4826      	ldr	r0, [pc, #152]	; (800c08c <pbuf_realloc+0x104>)
 800bff4:	f006 f886 	bl	8012104 <iprintf>
  while (rem_len > q->len) {
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	895b      	ldrh	r3, [r3, #10]
 800bffc:	897a      	ldrh	r2, [r7, #10]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d8e1      	bhi.n	800bfc6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	7b1b      	ldrb	r3, [r3, #12]
 800c006:	f003 030f 	and.w	r3, r3, #15
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d121      	bne.n	800c052 <pbuf_realloc+0xca>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	895b      	ldrh	r3, [r3, #10]
 800c012:	897a      	ldrh	r2, [r7, #10]
 800c014:	429a      	cmp	r2, r3
 800c016:	d01c      	beq.n	800c052 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	7b5b      	ldrb	r3, [r3, #13]
 800c01c:	f003 0302 	and.w	r3, r3, #2
 800c020:	2b00      	cmp	r3, #0
 800c022:	d116      	bne.n	800c052 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	685a      	ldr	r2, [r3, #4]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	897b      	ldrh	r3, [r7, #10]
 800c030:	4413      	add	r3, r2
 800c032:	b29b      	uxth	r3, r3
 800c034:	4619      	mov	r1, r3
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7fe ffba 	bl	800afb0 <mem_trim>
 800c03c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d106      	bne.n	800c052 <pbuf_realloc+0xca>
 800c044:	4b0f      	ldr	r3, [pc, #60]	; (800c084 <pbuf_realloc+0xfc>)
 800c046:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c04a:	4912      	ldr	r1, [pc, #72]	; (800c094 <pbuf_realloc+0x10c>)
 800c04c:	480f      	ldr	r0, [pc, #60]	; (800c08c <pbuf_realloc+0x104>)
 800c04e:	f006 f859 	bl	8012104 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	897a      	ldrh	r2, [r7, #10]
 800c056:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	895a      	ldrh	r2, [r3, #10]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d004      	beq.n	800c072 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 f911 	bl	800c294 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2200      	movs	r2, #0
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	e000      	b.n	800c07c <pbuf_realloc+0xf4>
    return;
 800c07a:	bf00      	nop

}
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	08013f5c 	.word	0x08013f5c
 800c088:	08014098 	.word	0x08014098
 800c08c:	08013fe0 	.word	0x08013fe0
 800c090:	080140b0 	.word	0x080140b0
 800c094:	080140c8 	.word	0x080140c8

0800c098 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b086      	sub	sp, #24
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d106      	bne.n	800c0ba <pbuf_add_header_impl+0x22>
 800c0ac:	4b2b      	ldr	r3, [pc, #172]	; (800c15c <pbuf_add_header_impl+0xc4>)
 800c0ae:	f240 12df 	movw	r2, #479	; 0x1df
 800c0b2:	492b      	ldr	r1, [pc, #172]	; (800c160 <pbuf_add_header_impl+0xc8>)
 800c0b4:	482b      	ldr	r0, [pc, #172]	; (800c164 <pbuf_add_header_impl+0xcc>)
 800c0b6:	f006 f825 	bl	8012104 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d003      	beq.n	800c0c8 <pbuf_add_header_impl+0x30>
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0c6:	d301      	bcc.n	800c0cc <pbuf_add_header_impl+0x34>
    return 1;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e043      	b.n	800c154 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <pbuf_add_header_impl+0x3e>
    return 0;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	e03e      	b.n	800c154 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	891a      	ldrh	r2, [r3, #8]
 800c0de:	8a7b      	ldrh	r3, [r7, #18]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	8a7a      	ldrh	r2, [r7, #18]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d901      	bls.n	800c0ee <pbuf_add_header_impl+0x56>
    return 1;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e032      	b.n	800c154 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	7b1b      	ldrb	r3, [r3, #12]
 800c0f2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c0f4:	8a3b      	ldrh	r3, [r7, #16]
 800c0f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00c      	beq.n	800c118 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	425b      	negs	r3, r3
 800c106:	4413      	add	r3, r2
 800c108:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	3310      	adds	r3, #16
 800c10e:	697a      	ldr	r2, [r7, #20]
 800c110:	429a      	cmp	r2, r3
 800c112:	d20d      	bcs.n	800c130 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c114:	2301      	movs	r3, #1
 800c116:	e01d      	b.n	800c154 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c118:	79fb      	ldrb	r3, [r7, #7]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d006      	beq.n	800c12c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	685a      	ldr	r2, [r3, #4]
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	425b      	negs	r3, r3
 800c126:	4413      	add	r3, r2
 800c128:	617b      	str	r3, [r7, #20]
 800c12a:	e001      	b.n	800c130 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c12c:	2301      	movs	r3, #1
 800c12e:	e011      	b.n	800c154 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	697a      	ldr	r2, [r7, #20]
 800c134:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	895a      	ldrh	r2, [r3, #10]
 800c13a:	8a7b      	ldrh	r3, [r7, #18]
 800c13c:	4413      	add	r3, r2
 800c13e:	b29a      	uxth	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	891a      	ldrh	r2, [r3, #8]
 800c148:	8a7b      	ldrh	r3, [r7, #18]
 800c14a:	4413      	add	r3, r2
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	811a      	strh	r2, [r3, #8]


  return 0;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3718      	adds	r7, #24
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	08013f5c 	.word	0x08013f5c
 800c160:	080140e4 	.word	0x080140e4
 800c164:	08013fe0 	.word	0x08013fe0

0800c168 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c172:	2200      	movs	r2, #0
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7ff ff8e 	bl	800c098 <pbuf_add_header_impl>
 800c17c:	4603      	mov	r3, r0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
	...

0800c188 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d106      	bne.n	800c1a6 <pbuf_remove_header+0x1e>
 800c198:	4b20      	ldr	r3, [pc, #128]	; (800c21c <pbuf_remove_header+0x94>)
 800c19a:	f240 224b 	movw	r2, #587	; 0x24b
 800c19e:	4920      	ldr	r1, [pc, #128]	; (800c220 <pbuf_remove_header+0x98>)
 800c1a0:	4820      	ldr	r0, [pc, #128]	; (800c224 <pbuf_remove_header+0x9c>)
 800c1a2:	f005 ffaf 	bl	8012104 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <pbuf_remove_header+0x2c>
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1b2:	d301      	bcc.n	800c1b8 <pbuf_remove_header+0x30>
    return 1;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e02c      	b.n	800c212 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <pbuf_remove_header+0x3a>
    return 0;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	e027      	b.n	800c212 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	895b      	ldrh	r3, [r3, #10]
 800c1ca:	89fa      	ldrh	r2, [r7, #14]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d908      	bls.n	800c1e2 <pbuf_remove_header+0x5a>
 800c1d0:	4b12      	ldr	r3, [pc, #72]	; (800c21c <pbuf_remove_header+0x94>)
 800c1d2:	f240 2255 	movw	r2, #597	; 0x255
 800c1d6:	4914      	ldr	r1, [pc, #80]	; (800c228 <pbuf_remove_header+0xa0>)
 800c1d8:	4812      	ldr	r0, [pc, #72]	; (800c224 <pbuf_remove_header+0x9c>)
 800c1da:	f005 ff93 	bl	8012104 <iprintf>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e017      	b.n	800c212 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	685a      	ldr	r2, [r3, #4]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	441a      	add	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	895a      	ldrh	r2, [r3, #10]
 800c1f8:	89fb      	ldrh	r3, [r7, #14]
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	891a      	ldrh	r2, [r3, #8]
 800c206:	89fb      	ldrh	r3, [r7, #14]
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3710      	adds	r7, #16
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	08013f5c 	.word	0x08013f5c
 800c220:	080140e4 	.word	0x080140e4
 800c224:	08013fe0 	.word	0x08013fe0
 800c228:	080140f0 	.word	0x080140f0

0800c22c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	460b      	mov	r3, r1
 800c236:	807b      	strh	r3, [r7, #2]
 800c238:	4613      	mov	r3, r2
 800c23a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c23c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c240:	2b00      	cmp	r3, #0
 800c242:	da08      	bge.n	800c256 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c244:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c248:	425b      	negs	r3, r3
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7ff ff9b 	bl	800c188 <pbuf_remove_header>
 800c252:	4603      	mov	r3, r0
 800c254:	e007      	b.n	800c266 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c256:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c25a:	787a      	ldrb	r2, [r7, #1]
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff ff1a 	bl	800c098 <pbuf_add_header_impl>
 800c264:	4603      	mov	r3, r0
  }
}
 800c266:	4618      	mov	r0, r3
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b082      	sub	sp, #8
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c27a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c27e:	2201      	movs	r2, #1
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7ff ffd2 	bl	800c22c <pbuf_header_impl>
 800c288:	4603      	mov	r3, r0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
	...

0800c294 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10b      	bne.n	800c2ba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d106      	bne.n	800c2b6 <pbuf_free+0x22>
 800c2a8:	4b38      	ldr	r3, [pc, #224]	; (800c38c <pbuf_free+0xf8>)
 800c2aa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c2ae:	4938      	ldr	r1, [pc, #224]	; (800c390 <pbuf_free+0xfc>)
 800c2b0:	4838      	ldr	r0, [pc, #224]	; (800c394 <pbuf_free+0x100>)
 800c2b2:	f005 ff27 	bl	8012104 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	e063      	b.n	800c382 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c2be:	e05c      	b.n	800c37a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	7b9b      	ldrb	r3, [r3, #14]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d106      	bne.n	800c2d6 <pbuf_free+0x42>
 800c2c8:	4b30      	ldr	r3, [pc, #192]	; (800c38c <pbuf_free+0xf8>)
 800c2ca:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c2ce:	4932      	ldr	r1, [pc, #200]	; (800c398 <pbuf_free+0x104>)
 800c2d0:	4830      	ldr	r0, [pc, #192]	; (800c394 <pbuf_free+0x100>)
 800c2d2:	f005 ff17 	bl	8012104 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	7b9b      	ldrb	r3, [r3, #14]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	739a      	strb	r2, [r3, #14]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	7b9b      	ldrb	r3, [r3, #14]
 800c2e6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c2e8:	7dbb      	ldrb	r3, [r7, #22]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d143      	bne.n	800c376 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	7b1b      	ldrb	r3, [r3, #12]
 800c2f8:	f003 030f 	and.w	r3, r3, #15
 800c2fc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	7b5b      	ldrb	r3, [r3, #13]
 800c302:	f003 0302 	and.w	r3, r3, #2
 800c306:	2b00      	cmp	r3, #0
 800c308:	d011      	beq.n	800c32e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	691b      	ldr	r3, [r3, #16]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d106      	bne.n	800c324 <pbuf_free+0x90>
 800c316:	4b1d      	ldr	r3, [pc, #116]	; (800c38c <pbuf_free+0xf8>)
 800c318:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c31c:	491f      	ldr	r1, [pc, #124]	; (800c39c <pbuf_free+0x108>)
 800c31e:	481d      	ldr	r0, [pc, #116]	; (800c394 <pbuf_free+0x100>)
 800c320:	f005 fef0 	bl	8012104 <iprintf>
        pc->custom_free_function(p);
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	4798      	blx	r3
 800c32c:	e01d      	b.n	800c36a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c32e:	7bfb      	ldrb	r3, [r7, #15]
 800c330:	2b02      	cmp	r3, #2
 800c332:	d104      	bne.n	800c33e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c334:	6879      	ldr	r1, [r7, #4]
 800c336:	2008      	movs	r0, #8
 800c338:	f7ff f936 	bl	800b5a8 <memp_free>
 800c33c:	e015      	b.n	800c36a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d104      	bne.n	800c34e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c344:	6879      	ldr	r1, [r7, #4]
 800c346:	2007      	movs	r0, #7
 800c348:	f7ff f92e 	bl	800b5a8 <memp_free>
 800c34c:	e00d      	b.n	800c36a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d103      	bne.n	800c35c <pbuf_free+0xc8>
          mem_free(p);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7fe fdc1 	bl	800aedc <mem_free>
 800c35a:	e006      	b.n	800c36a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c35c:	4b0b      	ldr	r3, [pc, #44]	; (800c38c <pbuf_free+0xf8>)
 800c35e:	f240 320f 	movw	r2, #783	; 0x30f
 800c362:	490f      	ldr	r1, [pc, #60]	; (800c3a0 <pbuf_free+0x10c>)
 800c364:	480b      	ldr	r0, [pc, #44]	; (800c394 <pbuf_free+0x100>)
 800c366:	f005 fecd 	bl	8012104 <iprintf>
        }
      }
      count++;
 800c36a:	7dfb      	ldrb	r3, [r7, #23]
 800c36c:	3301      	adds	r3, #1
 800c36e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	607b      	str	r3, [r7, #4]
 800c374:	e001      	b.n	800c37a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c376:	2300      	movs	r3, #0
 800c378:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d19f      	bne.n	800c2c0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c380:	7dfb      	ldrb	r3, [r7, #23]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	08013f5c 	.word	0x08013f5c
 800c390:	080140e4 	.word	0x080140e4
 800c394:	08013fe0 	.word	0x08013fe0
 800c398:	08014110 	.word	0x08014110
 800c39c:	08014128 	.word	0x08014128
 800c3a0:	0801414c 	.word	0x0801414c

0800c3a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c3b0:	e005      	b.n	800c3be <pbuf_clen+0x1a>
    ++len;
 800c3b2:	89fb      	ldrh	r3, [r7, #14]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1f6      	bne.n	800c3b2 <pbuf_clen+0xe>
  }
  return len;
 800c3c4:	89fb      	ldrh	r3, [r7, #14]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
	...

0800c3d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d010      	beq.n	800c404 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	7b9b      	ldrb	r3, [r3, #14]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	7b9b      	ldrb	r3, [r3, #14]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d106      	bne.n	800c404 <pbuf_ref+0x30>
 800c3f6:	4b05      	ldr	r3, [pc, #20]	; (800c40c <pbuf_ref+0x38>)
 800c3f8:	f240 3242 	movw	r2, #834	; 0x342
 800c3fc:	4904      	ldr	r1, [pc, #16]	; (800c410 <pbuf_ref+0x3c>)
 800c3fe:	4805      	ldr	r0, [pc, #20]	; (800c414 <pbuf_ref+0x40>)
 800c400:	f005 fe80 	bl	8012104 <iprintf>
  }
}
 800c404:	bf00      	nop
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	08013f5c 	.word	0x08013f5c
 800c410:	08014160 	.word	0x08014160
 800c414:	08013fe0 	.word	0x08013fe0

0800c418 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <pbuf_cat+0x16>
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d107      	bne.n	800c43e <pbuf_cat+0x26>
 800c42e:	4b20      	ldr	r3, [pc, #128]	; (800c4b0 <pbuf_cat+0x98>)
 800c430:	f240 3259 	movw	r2, #857	; 0x359
 800c434:	491f      	ldr	r1, [pc, #124]	; (800c4b4 <pbuf_cat+0x9c>)
 800c436:	4820      	ldr	r0, [pc, #128]	; (800c4b8 <pbuf_cat+0xa0>)
 800c438:	f005 fe64 	bl	8012104 <iprintf>
 800c43c:	e034      	b.n	800c4a8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	60fb      	str	r3, [r7, #12]
 800c442:	e00a      	b.n	800c45a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	891a      	ldrh	r2, [r3, #8]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	891b      	ldrh	r3, [r3, #8]
 800c44c:	4413      	add	r3, r2
 800c44e:	b29a      	uxth	r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	60fb      	str	r3, [r7, #12]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1f0      	bne.n	800c444 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	891a      	ldrh	r2, [r3, #8]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	895b      	ldrh	r3, [r3, #10]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d006      	beq.n	800c47c <pbuf_cat+0x64>
 800c46e:	4b10      	ldr	r3, [pc, #64]	; (800c4b0 <pbuf_cat+0x98>)
 800c470:	f240 3262 	movw	r2, #866	; 0x362
 800c474:	4911      	ldr	r1, [pc, #68]	; (800c4bc <pbuf_cat+0xa4>)
 800c476:	4810      	ldr	r0, [pc, #64]	; (800c4b8 <pbuf_cat+0xa0>)
 800c478:	f005 fe44 	bl	8012104 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d006      	beq.n	800c492 <pbuf_cat+0x7a>
 800c484:	4b0a      	ldr	r3, [pc, #40]	; (800c4b0 <pbuf_cat+0x98>)
 800c486:	f240 3263 	movw	r2, #867	; 0x363
 800c48a:	490d      	ldr	r1, [pc, #52]	; (800c4c0 <pbuf_cat+0xa8>)
 800c48c:	480a      	ldr	r0, [pc, #40]	; (800c4b8 <pbuf_cat+0xa0>)
 800c48e:	f005 fe39 	bl	8012104 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	891a      	ldrh	r2, [r3, #8]
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	891b      	ldrh	r3, [r3, #8]
 800c49a:	4413      	add	r3, r2
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	683a      	ldr	r2, [r7, #0]
 800c4a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	08013f5c 	.word	0x08013f5c
 800c4b4:	08014174 	.word	0x08014174
 800c4b8:	08013fe0 	.word	0x08013fe0
 800c4bc:	080141ac 	.word	0x080141ac
 800c4c0:	080141dc 	.word	0x080141dc

0800c4c4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	617b      	str	r3, [r7, #20]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d008      	beq.n	800c4ee <pbuf_copy+0x2a>
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d005      	beq.n	800c4ee <pbuf_copy+0x2a>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	891a      	ldrh	r2, [r3, #8]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	891b      	ldrh	r3, [r3, #8]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d209      	bcs.n	800c502 <pbuf_copy+0x3e>
 800c4ee:	4b57      	ldr	r3, [pc, #348]	; (800c64c <pbuf_copy+0x188>)
 800c4f0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c4f4:	4956      	ldr	r1, [pc, #344]	; (800c650 <pbuf_copy+0x18c>)
 800c4f6:	4857      	ldr	r0, [pc, #348]	; (800c654 <pbuf_copy+0x190>)
 800c4f8:	f005 fe04 	bl	8012104 <iprintf>
 800c4fc:	f06f 030f 	mvn.w	r3, #15
 800c500:	e09f      	b.n	800c642 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	895b      	ldrh	r3, [r3, #10]
 800c506:	461a      	mov	r2, r3
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	1ad2      	subs	r2, r2, r3
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	895b      	ldrh	r3, [r3, #10]
 800c510:	4619      	mov	r1, r3
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	1acb      	subs	r3, r1, r3
 800c516:	429a      	cmp	r2, r3
 800c518:	d306      	bcc.n	800c528 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	895b      	ldrh	r3, [r3, #10]
 800c51e:	461a      	mov	r2, r3
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	1ad3      	subs	r3, r2, r3
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	e005      	b.n	800c534 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	895b      	ldrh	r3, [r3, #10]
 800c52c:	461a      	mov	r2, r3
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	685a      	ldr	r2, [r3, #4]
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	18d0      	adds	r0, r2, r3
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	4413      	add	r3, r2
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	4619      	mov	r1, r3
 800c548:	f005 fdc6 	bl	80120d8 <memcpy>
    offset_to += len;
 800c54c:	697a      	ldr	r2, [r7, #20]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	4413      	add	r3, r2
 800c552:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c554:	693a      	ldr	r2, [r7, #16]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	4413      	add	r3, r2
 800c55a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	895b      	ldrh	r3, [r3, #10]
 800c560:	461a      	mov	r2, r3
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	4293      	cmp	r3, r2
 800c566:	d906      	bls.n	800c576 <pbuf_copy+0xb2>
 800c568:	4b38      	ldr	r3, [pc, #224]	; (800c64c <pbuf_copy+0x188>)
 800c56a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c56e:	493a      	ldr	r1, [pc, #232]	; (800c658 <pbuf_copy+0x194>)
 800c570:	4838      	ldr	r0, [pc, #224]	; (800c654 <pbuf_copy+0x190>)
 800c572:	f005 fdc7 	bl	8012104 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	895b      	ldrh	r3, [r3, #10]
 800c57a:	461a      	mov	r2, r3
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	4293      	cmp	r3, r2
 800c580:	d906      	bls.n	800c590 <pbuf_copy+0xcc>
 800c582:	4b32      	ldr	r3, [pc, #200]	; (800c64c <pbuf_copy+0x188>)
 800c584:	f240 32da 	movw	r2, #986	; 0x3da
 800c588:	4934      	ldr	r1, [pc, #208]	; (800c65c <pbuf_copy+0x198>)
 800c58a:	4832      	ldr	r0, [pc, #200]	; (800c654 <pbuf_copy+0x190>)
 800c58c:	f005 fdba 	bl	8012104 <iprintf>
    if (offset_from >= p_from->len) {
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	895b      	ldrh	r3, [r3, #10]
 800c594:	461a      	mov	r2, r3
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	4293      	cmp	r3, r2
 800c59a:	d304      	bcc.n	800c5a6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c59c:	2300      	movs	r3, #0
 800c59e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	895b      	ldrh	r3, [r3, #10]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d114      	bne.n	800c5dc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10c      	bne.n	800c5dc <pbuf_copy+0x118>
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d009      	beq.n	800c5dc <pbuf_copy+0x118>
 800c5c8:	4b20      	ldr	r3, [pc, #128]	; (800c64c <pbuf_copy+0x188>)
 800c5ca:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c5ce:	4924      	ldr	r1, [pc, #144]	; (800c660 <pbuf_copy+0x19c>)
 800c5d0:	4820      	ldr	r0, [pc, #128]	; (800c654 <pbuf_copy+0x190>)
 800c5d2:	f005 fd97 	bl	8012104 <iprintf>
 800c5d6:	f06f 030f 	mvn.w	r3, #15
 800c5da:	e032      	b.n	800c642 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d013      	beq.n	800c60a <pbuf_copy+0x146>
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	895a      	ldrh	r2, [r3, #10]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	891b      	ldrh	r3, [r3, #8]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d10d      	bne.n	800c60a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d009      	beq.n	800c60a <pbuf_copy+0x146>
 800c5f6:	4b15      	ldr	r3, [pc, #84]	; (800c64c <pbuf_copy+0x188>)
 800c5f8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c5fc:	4919      	ldr	r1, [pc, #100]	; (800c664 <pbuf_copy+0x1a0>)
 800c5fe:	4815      	ldr	r0, [pc, #84]	; (800c654 <pbuf_copy+0x190>)
 800c600:	f005 fd80 	bl	8012104 <iprintf>
 800c604:	f06f 0305 	mvn.w	r3, #5
 800c608:	e01b      	b.n	800c642 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d013      	beq.n	800c638 <pbuf_copy+0x174>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	895a      	ldrh	r2, [r3, #10]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	891b      	ldrh	r3, [r3, #8]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d10d      	bne.n	800c638 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d009      	beq.n	800c638 <pbuf_copy+0x174>
 800c624:	4b09      	ldr	r3, [pc, #36]	; (800c64c <pbuf_copy+0x188>)
 800c626:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c62a:	490e      	ldr	r1, [pc, #56]	; (800c664 <pbuf_copy+0x1a0>)
 800c62c:	4809      	ldr	r0, [pc, #36]	; (800c654 <pbuf_copy+0x190>)
 800c62e:	f005 fd69 	bl	8012104 <iprintf>
 800c632:	f06f 0305 	mvn.w	r3, #5
 800c636:	e004      	b.n	800c642 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f47f af61 	bne.w	800c502 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3718      	adds	r7, #24
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	08013f5c 	.word	0x08013f5c
 800c650:	08014228 	.word	0x08014228
 800c654:	08013fe0 	.word	0x08013fe0
 800c658:	08014258 	.word	0x08014258
 800c65c:	08014270 	.word	0x08014270
 800c660:	0801428c 	.word	0x0801428c
 800c664:	0801429c 	.word	0x0801429c

0800c668 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	4611      	mov	r1, r2
 800c674:	461a      	mov	r2, r3
 800c676:	460b      	mov	r3, r1
 800c678:	80fb      	strh	r3, [r7, #6]
 800c67a:	4613      	mov	r3, r2
 800c67c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d108      	bne.n	800c69e <pbuf_copy_partial+0x36>
 800c68c:	4b2b      	ldr	r3, [pc, #172]	; (800c73c <pbuf_copy_partial+0xd4>)
 800c68e:	f240 420a 	movw	r2, #1034	; 0x40a
 800c692:	492b      	ldr	r1, [pc, #172]	; (800c740 <pbuf_copy_partial+0xd8>)
 800c694:	482b      	ldr	r0, [pc, #172]	; (800c744 <pbuf_copy_partial+0xdc>)
 800c696:	f005 fd35 	bl	8012104 <iprintf>
 800c69a:	2300      	movs	r3, #0
 800c69c:	e04a      	b.n	800c734 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d108      	bne.n	800c6b6 <pbuf_copy_partial+0x4e>
 800c6a4:	4b25      	ldr	r3, [pc, #148]	; (800c73c <pbuf_copy_partial+0xd4>)
 800c6a6:	f240 420b 	movw	r2, #1035	; 0x40b
 800c6aa:	4927      	ldr	r1, [pc, #156]	; (800c748 <pbuf_copy_partial+0xe0>)
 800c6ac:	4825      	ldr	r0, [pc, #148]	; (800c744 <pbuf_copy_partial+0xdc>)
 800c6ae:	f005 fd29 	bl	8012104 <iprintf>
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	e03e      	b.n	800c734 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	61fb      	str	r3, [r7, #28]
 800c6ba:	e034      	b.n	800c726 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c6bc:	88bb      	ldrh	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00a      	beq.n	800c6d8 <pbuf_copy_partial+0x70>
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	895b      	ldrh	r3, [r3, #10]
 800c6c6:	88ba      	ldrh	r2, [r7, #4]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d305      	bcc.n	800c6d8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	895b      	ldrh	r3, [r3, #10]
 800c6d0:	88ba      	ldrh	r2, [r7, #4]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	80bb      	strh	r3, [r7, #4]
 800c6d6:	e023      	b.n	800c720 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	895a      	ldrh	r2, [r3, #10]
 800c6dc:	88bb      	ldrh	r3, [r7, #4]
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c6e2:	8b3a      	ldrh	r2, [r7, #24]
 800c6e4:	88fb      	ldrh	r3, [r7, #6]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d901      	bls.n	800c6ee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c6ea:	88fb      	ldrh	r3, [r7, #6]
 800c6ec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c6ee:	8b7b      	ldrh	r3, [r7, #26]
 800c6f0:	68ba      	ldr	r2, [r7, #8]
 800c6f2:	18d0      	adds	r0, r2, r3
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	88bb      	ldrh	r3, [r7, #4]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	8b3a      	ldrh	r2, [r7, #24]
 800c6fe:	4619      	mov	r1, r3
 800c700:	f005 fcea 	bl	80120d8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c704:	8afa      	ldrh	r2, [r7, #22]
 800c706:	8b3b      	ldrh	r3, [r7, #24]
 800c708:	4413      	add	r3, r2
 800c70a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c70c:	8b7a      	ldrh	r2, [r7, #26]
 800c70e:	8b3b      	ldrh	r3, [r7, #24]
 800c710:	4413      	add	r3, r2
 800c712:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c714:	88fa      	ldrh	r2, [r7, #6]
 800c716:	8b3b      	ldrh	r3, [r7, #24]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c71c:	2300      	movs	r3, #0
 800c71e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	61fb      	str	r3, [r7, #28]
 800c726:	88fb      	ldrh	r3, [r7, #6]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d002      	beq.n	800c732 <pbuf_copy_partial+0xca>
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1c4      	bne.n	800c6bc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c732:	8afb      	ldrh	r3, [r7, #22]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3720      	adds	r7, #32
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	08013f5c 	.word	0x08013f5c
 800c740:	080142c8 	.word	0x080142c8
 800c744:	08013fe0 	.word	0x08013fe0
 800c748:	080142e8 	.word	0x080142e8

0800c74c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	4603      	mov	r3, r0
 800c754:	603a      	str	r2, [r7, #0]
 800c756:	71fb      	strb	r3, [r7, #7]
 800c758:	460b      	mov	r3, r1
 800c75a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	8919      	ldrh	r1, [r3, #8]
 800c760:	88ba      	ldrh	r2, [r7, #4]
 800c762:	79fb      	ldrb	r3, [r7, #7]
 800c764:	4618      	mov	r0, r3
 800c766:	f7ff fab1 	bl	800bccc <pbuf_alloc>
 800c76a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <pbuf_clone+0x2a>
    return NULL;
 800c772:	2300      	movs	r3, #0
 800c774:	e011      	b.n	800c79a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c776:	6839      	ldr	r1, [r7, #0]
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f7ff fea3 	bl	800c4c4 <pbuf_copy>
 800c77e:	4603      	mov	r3, r0
 800c780:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c782:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d006      	beq.n	800c798 <pbuf_clone+0x4c>
 800c78a:	4b06      	ldr	r3, [pc, #24]	; (800c7a4 <pbuf_clone+0x58>)
 800c78c:	f240 5224 	movw	r2, #1316	; 0x524
 800c790:	4905      	ldr	r1, [pc, #20]	; (800c7a8 <pbuf_clone+0x5c>)
 800c792:	4806      	ldr	r0, [pc, #24]	; (800c7ac <pbuf_clone+0x60>)
 800c794:	f005 fcb6 	bl	8012104 <iprintf>
  return q;
 800c798:	68fb      	ldr	r3, [r7, #12]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	08013f5c 	.word	0x08013f5c
 800c7a8:	080143f4 	.word	0x080143f4
 800c7ac:	08013fe0 	.word	0x08013fe0

0800c7b0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c7b4:	f005 fcbe 	bl	8012134 <rand>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	4b01      	ldr	r3, [pc, #4]	; (800c7d0 <tcp_init+0x20>)
 800c7ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c7cc:	bf00      	nop
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	24000024 	.word	0x24000024

0800c7d4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	7d1b      	ldrb	r3, [r3, #20]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d105      	bne.n	800c7f0 <tcp_free+0x1c>
 800c7e4:	4b06      	ldr	r3, [pc, #24]	; (800c800 <tcp_free+0x2c>)
 800c7e6:	22d4      	movs	r2, #212	; 0xd4
 800c7e8:	4906      	ldr	r1, [pc, #24]	; (800c804 <tcp_free+0x30>)
 800c7ea:	4807      	ldr	r0, [pc, #28]	; (800c808 <tcp_free+0x34>)
 800c7ec:	f005 fc8a 	bl	8012104 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c7f0:	6879      	ldr	r1, [r7, #4]
 800c7f2:	2001      	movs	r0, #1
 800c7f4:	f7fe fed8 	bl	800b5a8 <memp_free>
}
 800c7f8:	bf00      	nop
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	08014480 	.word	0x08014480
 800c804:	080144d4 	.word	0x080144d4
 800c808:	080144e8 	.word	0x080144e8

0800c80c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	7d1b      	ldrb	r3, [r3, #20]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d105      	bne.n	800c828 <tcp_free_listen+0x1c>
 800c81c:	4b06      	ldr	r3, [pc, #24]	; (800c838 <tcp_free_listen+0x2c>)
 800c81e:	22df      	movs	r2, #223	; 0xdf
 800c820:	4906      	ldr	r1, [pc, #24]	; (800c83c <tcp_free_listen+0x30>)
 800c822:	4807      	ldr	r0, [pc, #28]	; (800c840 <tcp_free_listen+0x34>)
 800c824:	f005 fc6e 	bl	8012104 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c828:	6879      	ldr	r1, [r7, #4]
 800c82a:	2002      	movs	r0, #2
 800c82c:	f7fe febc 	bl	800b5a8 <memp_free>
}
 800c830:	bf00      	nop
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	08014480 	.word	0x08014480
 800c83c:	08014510 	.word	0x08014510
 800c840:	080144e8 	.word	0x080144e8

0800c844 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c848:	f000 fea2 	bl	800d590 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c84c:	4b07      	ldr	r3, [pc, #28]	; (800c86c <tcp_tmr+0x28>)
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	3301      	adds	r3, #1
 800c852:	b2da      	uxtb	r2, r3
 800c854:	4b05      	ldr	r3, [pc, #20]	; (800c86c <tcp_tmr+0x28>)
 800c856:	701a      	strb	r2, [r3, #0]
 800c858:	4b04      	ldr	r3, [pc, #16]	; (800c86c <tcp_tmr+0x28>)
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	f003 0301 	and.w	r3, r3, #1
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c864:	f000 fb54 	bl	800cf10 <tcp_slowtmr>
  }
}
 800c868:	bf00      	nop
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	2400816d 	.word	0x2400816d

0800c870 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d105      	bne.n	800c88c <tcp_remove_listener+0x1c>
 800c880:	4b0d      	ldr	r3, [pc, #52]	; (800c8b8 <tcp_remove_listener+0x48>)
 800c882:	22ff      	movs	r2, #255	; 0xff
 800c884:	490d      	ldr	r1, [pc, #52]	; (800c8bc <tcp_remove_listener+0x4c>)
 800c886:	480e      	ldr	r0, [pc, #56]	; (800c8c0 <tcp_remove_listener+0x50>)
 800c888:	f005 fc3c 	bl	8012104 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	e00a      	b.n	800c8a8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d102      	bne.n	800c8a2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1f1      	bne.n	800c892 <tcp_remove_listener+0x22>
    }
  }
}
 800c8ae:	bf00      	nop
 800c8b0:	bf00      	nop
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	08014480 	.word	0x08014480
 800c8bc:	0801452c 	.word	0x0801452c
 800c8c0:	080144e8 	.word	0x080144e8

0800c8c4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d106      	bne.n	800c8e0 <tcp_listen_closed+0x1c>
 800c8d2:	4b14      	ldr	r3, [pc, #80]	; (800c924 <tcp_listen_closed+0x60>)
 800c8d4:	f240 1211 	movw	r2, #273	; 0x111
 800c8d8:	4913      	ldr	r1, [pc, #76]	; (800c928 <tcp_listen_closed+0x64>)
 800c8da:	4814      	ldr	r0, [pc, #80]	; (800c92c <tcp_listen_closed+0x68>)
 800c8dc:	f005 fc12 	bl	8012104 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	7d1b      	ldrb	r3, [r3, #20]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d006      	beq.n	800c8f6 <tcp_listen_closed+0x32>
 800c8e8:	4b0e      	ldr	r3, [pc, #56]	; (800c924 <tcp_listen_closed+0x60>)
 800c8ea:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c8ee:	4910      	ldr	r1, [pc, #64]	; (800c930 <tcp_listen_closed+0x6c>)
 800c8f0:	480e      	ldr	r0, [pc, #56]	; (800c92c <tcp_listen_closed+0x68>)
 800c8f2:	f005 fc07 	bl	8012104 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	60fb      	str	r3, [r7, #12]
 800c8fa:	e00b      	b.n	800c914 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c8fc:	4a0d      	ldr	r2, [pc, #52]	; (800c934 <tcp_listen_closed+0x70>)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6879      	ldr	r1, [r7, #4]
 800c908:	4618      	mov	r0, r3
 800c90a:	f7ff ffb1 	bl	800c870 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	3301      	adds	r3, #1
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b03      	cmp	r3, #3
 800c918:	d9f0      	bls.n	800c8fc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c91a:	bf00      	nop
 800c91c:	bf00      	nop
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	08014480 	.word	0x08014480
 800c928:	08014554 	.word	0x08014554
 800c92c:	080144e8 	.word	0x080144e8
 800c930:	08014560 	.word	0x08014560
 800c934:	08015e80 	.word	0x08015e80

0800c938 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c938:	b5b0      	push	{r4, r5, r7, lr}
 800c93a:	b088      	sub	sp, #32
 800c93c:	af04      	add	r7, sp, #16
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	460b      	mov	r3, r1
 800c942:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d106      	bne.n	800c958 <tcp_close_shutdown+0x20>
 800c94a:	4b63      	ldr	r3, [pc, #396]	; (800cad8 <tcp_close_shutdown+0x1a0>)
 800c94c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c950:	4962      	ldr	r1, [pc, #392]	; (800cadc <tcp_close_shutdown+0x1a4>)
 800c952:	4863      	ldr	r0, [pc, #396]	; (800cae0 <tcp_close_shutdown+0x1a8>)
 800c954:	f005 fbd6 	bl	8012104 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c958:	78fb      	ldrb	r3, [r7, #3]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d066      	beq.n	800ca2c <tcp_close_shutdown+0xf4>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	7d1b      	ldrb	r3, [r3, #20]
 800c962:	2b04      	cmp	r3, #4
 800c964:	d003      	beq.n	800c96e <tcp_close_shutdown+0x36>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	7d1b      	ldrb	r3, [r3, #20]
 800c96a:	2b07      	cmp	r3, #7
 800c96c:	d15e      	bne.n	800ca2c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c972:	2b00      	cmp	r3, #0
 800c974:	d104      	bne.n	800c980 <tcp_close_shutdown+0x48>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c97a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c97e:	d055      	beq.n	800ca2c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	8b5b      	ldrh	r3, [r3, #26]
 800c984:	f003 0310 	and.w	r3, r3, #16
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d106      	bne.n	800c99a <tcp_close_shutdown+0x62>
 800c98c:	4b52      	ldr	r3, [pc, #328]	; (800cad8 <tcp_close_shutdown+0x1a0>)
 800c98e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c992:	4954      	ldr	r1, [pc, #336]	; (800cae4 <tcp_close_shutdown+0x1ac>)
 800c994:	4852      	ldr	r0, [pc, #328]	; (800cae0 <tcp_close_shutdown+0x1a8>)
 800c996:	f005 fbb5 	bl	8012104 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c9a2:	687d      	ldr	r5, [r7, #4]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	8ad2      	ldrh	r2, [r2, #22]
 800c9ac:	6879      	ldr	r1, [r7, #4]
 800c9ae:	8b09      	ldrh	r1, [r1, #24]
 800c9b0:	9102      	str	r1, [sp, #8]
 800c9b2:	9201      	str	r2, [sp, #4]
 800c9b4:	9300      	str	r3, [sp, #0]
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	4601      	mov	r1, r0
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f004 fe91 	bl	80116e4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f001 f8c6 	bl	800db54 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c9c8:	4b47      	ldr	r3, [pc, #284]	; (800cae8 <tcp_close_shutdown+0x1b0>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d105      	bne.n	800c9de <tcp_close_shutdown+0xa6>
 800c9d2:	4b45      	ldr	r3, [pc, #276]	; (800cae8 <tcp_close_shutdown+0x1b0>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	4a43      	ldr	r2, [pc, #268]	; (800cae8 <tcp_close_shutdown+0x1b0>)
 800c9da:	6013      	str	r3, [r2, #0]
 800c9dc:	e013      	b.n	800ca06 <tcp_close_shutdown+0xce>
 800c9de:	4b42      	ldr	r3, [pc, #264]	; (800cae8 <tcp_close_shutdown+0x1b0>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	60fb      	str	r3, [r7, #12]
 800c9e4:	e00c      	b.n	800ca00 <tcp_close_shutdown+0xc8>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d104      	bne.n	800c9fa <tcp_close_shutdown+0xc2>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	68da      	ldr	r2, [r3, #12]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	60da      	str	r2, [r3, #12]
 800c9f8:	e005      	b.n	800ca06 <tcp_close_shutdown+0xce>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	60fb      	str	r3, [r7, #12]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1ef      	bne.n	800c9e6 <tcp_close_shutdown+0xae>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	60da      	str	r2, [r3, #12]
 800ca0c:	4b37      	ldr	r3, [pc, #220]	; (800caec <tcp_close_shutdown+0x1b4>)
 800ca0e:	2201      	movs	r2, #1
 800ca10:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ca12:	4b37      	ldr	r3, [pc, #220]	; (800caf0 <tcp_close_shutdown+0x1b8>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d102      	bne.n	800ca22 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ca1c:	f003 fd5e 	bl	80104dc <tcp_trigger_input_pcb_close>
 800ca20:	e002      	b.n	800ca28 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7ff fed6 	bl	800c7d4 <tcp_free>
      }
      return ERR_OK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	e050      	b.n	800cace <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	7d1b      	ldrb	r3, [r3, #20]
 800ca30:	2b02      	cmp	r3, #2
 800ca32:	d03b      	beq.n	800caac <tcp_close_shutdown+0x174>
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	dc44      	bgt.n	800cac2 <tcp_close_shutdown+0x18a>
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d002      	beq.n	800ca42 <tcp_close_shutdown+0x10a>
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d02a      	beq.n	800ca96 <tcp_close_shutdown+0x15e>
 800ca40:	e03f      	b.n	800cac2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	8adb      	ldrh	r3, [r3, #22]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d021      	beq.n	800ca8e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ca4a:	4b2a      	ldr	r3, [pc, #168]	; (800caf4 <tcp_close_shutdown+0x1bc>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d105      	bne.n	800ca60 <tcp_close_shutdown+0x128>
 800ca54:	4b27      	ldr	r3, [pc, #156]	; (800caf4 <tcp_close_shutdown+0x1bc>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	4a26      	ldr	r2, [pc, #152]	; (800caf4 <tcp_close_shutdown+0x1bc>)
 800ca5c:	6013      	str	r3, [r2, #0]
 800ca5e:	e013      	b.n	800ca88 <tcp_close_shutdown+0x150>
 800ca60:	4b24      	ldr	r3, [pc, #144]	; (800caf4 <tcp_close_shutdown+0x1bc>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	60bb      	str	r3, [r7, #8]
 800ca66:	e00c      	b.n	800ca82 <tcp_close_shutdown+0x14a>
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d104      	bne.n	800ca7c <tcp_close_shutdown+0x144>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68da      	ldr	r2, [r3, #12]
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	60da      	str	r2, [r3, #12]
 800ca7a:	e005      	b.n	800ca88 <tcp_close_shutdown+0x150>
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	60bb      	str	r3, [r7, #8]
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1ef      	bne.n	800ca68 <tcp_close_shutdown+0x130>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f7ff fea0 	bl	800c7d4 <tcp_free>
      break;
 800ca94:	e01a      	b.n	800cacc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7ff ff14 	bl	800c8c4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ca9c:	6879      	ldr	r1, [r7, #4]
 800ca9e:	4816      	ldr	r0, [pc, #88]	; (800caf8 <tcp_close_shutdown+0x1c0>)
 800caa0:	f001 f8a8 	bl	800dbf4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff feb1 	bl	800c80c <tcp_free_listen>
      break;
 800caaa:	e00f      	b.n	800cacc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800caac:	6879      	ldr	r1, [r7, #4]
 800caae:	480e      	ldr	r0, [pc, #56]	; (800cae8 <tcp_close_shutdown+0x1b0>)
 800cab0:	f001 f8a0 	bl	800dbf4 <tcp_pcb_remove>
 800cab4:	4b0d      	ldr	r3, [pc, #52]	; (800caec <tcp_close_shutdown+0x1b4>)
 800cab6:	2201      	movs	r2, #1
 800cab8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7ff fe8a 	bl	800c7d4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cac0:	e004      	b.n	800cacc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f81a 	bl	800cafc <tcp_close_shutdown_fin>
 800cac8:	4603      	mov	r3, r0
 800caca:	e000      	b.n	800cace <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cacc:	2300      	movs	r3, #0
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3710      	adds	r7, #16
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bdb0      	pop	{r4, r5, r7, pc}
 800cad6:	bf00      	nop
 800cad8:	08014480 	.word	0x08014480
 800cadc:	08014578 	.word	0x08014578
 800cae0:	080144e8 	.word	0x080144e8
 800cae4:	08014598 	.word	0x08014598
 800cae8:	24008164 	.word	0x24008164
 800caec:	2400816c 	.word	0x2400816c
 800caf0:	240081a4 	.word	0x240081a4
 800caf4:	2400815c 	.word	0x2400815c
 800caf8:	24008160 	.word	0x24008160

0800cafc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d106      	bne.n	800cb18 <tcp_close_shutdown_fin+0x1c>
 800cb0a:	4b2e      	ldr	r3, [pc, #184]	; (800cbc4 <tcp_close_shutdown_fin+0xc8>)
 800cb0c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cb10:	492d      	ldr	r1, [pc, #180]	; (800cbc8 <tcp_close_shutdown_fin+0xcc>)
 800cb12:	482e      	ldr	r0, [pc, #184]	; (800cbcc <tcp_close_shutdown_fin+0xd0>)
 800cb14:	f005 faf6 	bl	8012104 <iprintf>

  switch (pcb->state) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	7d1b      	ldrb	r3, [r3, #20]
 800cb1c:	2b07      	cmp	r3, #7
 800cb1e:	d020      	beq.n	800cb62 <tcp_close_shutdown_fin+0x66>
 800cb20:	2b07      	cmp	r3, #7
 800cb22:	dc2b      	bgt.n	800cb7c <tcp_close_shutdown_fin+0x80>
 800cb24:	2b03      	cmp	r3, #3
 800cb26:	d002      	beq.n	800cb2e <tcp_close_shutdown_fin+0x32>
 800cb28:	2b04      	cmp	r3, #4
 800cb2a:	d00d      	beq.n	800cb48 <tcp_close_shutdown_fin+0x4c>
 800cb2c:	e026      	b.n	800cb7c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f003 fee6 	bl	8010900 <tcp_send_fin>
 800cb34:	4603      	mov	r3, r0
 800cb36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d11f      	bne.n	800cb80 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2205      	movs	r2, #5
 800cb44:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb46:	e01b      	b.n	800cb80 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f003 fed9 	bl	8010900 <tcp_send_fin>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d114      	bne.n	800cb84 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2205      	movs	r2, #5
 800cb5e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb60:	e010      	b.n	800cb84 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f003 fecc 	bl	8010900 <tcp_send_fin>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d109      	bne.n	800cb88 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2209      	movs	r2, #9
 800cb78:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb7a:	e005      	b.n	800cb88 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	e01c      	b.n	800cbba <tcp_close_shutdown_fin+0xbe>
      break;
 800cb80:	bf00      	nop
 800cb82:	e002      	b.n	800cb8a <tcp_close_shutdown_fin+0x8e>
      break;
 800cb84:	bf00      	nop
 800cb86:	e000      	b.n	800cb8a <tcp_close_shutdown_fin+0x8e>
      break;
 800cb88:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cb8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d103      	bne.n	800cb9a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f003 fff2 	bl	8010b7c <tcp_output>
 800cb98:	e00d      	b.n	800cbb6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cb9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba2:	d108      	bne.n	800cbb6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	8b5b      	ldrh	r3, [r3, #26]
 800cba8:	f043 0308 	orr.w	r3, r3, #8
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	e001      	b.n	800cbba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cbb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	08014480 	.word	0x08014480
 800cbc8:	08014554 	.word	0x08014554
 800cbcc:	080144e8 	.word	0x080144e8

0800cbd0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d109      	bne.n	800cbf2 <tcp_close+0x22>
 800cbde:	4b0f      	ldr	r3, [pc, #60]	; (800cc1c <tcp_close+0x4c>)
 800cbe0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cbe4:	490e      	ldr	r1, [pc, #56]	; (800cc20 <tcp_close+0x50>)
 800cbe6:	480f      	ldr	r0, [pc, #60]	; (800cc24 <tcp_close+0x54>)
 800cbe8:	f005 fa8c 	bl	8012104 <iprintf>
 800cbec:	f06f 030f 	mvn.w	r3, #15
 800cbf0:	e00f      	b.n	800cc12 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	7d1b      	ldrb	r3, [r3, #20]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d006      	beq.n	800cc08 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	8b5b      	ldrh	r3, [r3, #26]
 800cbfe:	f043 0310 	orr.w	r3, r3, #16
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cc08:	2101      	movs	r1, #1
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff fe94 	bl	800c938 <tcp_close_shutdown>
 800cc10:	4603      	mov	r3, r0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	08014480 	.word	0x08014480
 800cc20:	080145b4 	.word	0x080145b4
 800cc24:	080144e8 	.word	0x080144e8

0800cc28 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08e      	sub	sp, #56	; 0x38
 800cc2c:	af04      	add	r7, sp, #16
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d107      	bne.n	800cc48 <tcp_abandon+0x20>
 800cc38:	4b52      	ldr	r3, [pc, #328]	; (800cd84 <tcp_abandon+0x15c>)
 800cc3a:	f240 223d 	movw	r2, #573	; 0x23d
 800cc3e:	4952      	ldr	r1, [pc, #328]	; (800cd88 <tcp_abandon+0x160>)
 800cc40:	4852      	ldr	r0, [pc, #328]	; (800cd8c <tcp_abandon+0x164>)
 800cc42:	f005 fa5f 	bl	8012104 <iprintf>
 800cc46:	e099      	b.n	800cd7c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	7d1b      	ldrb	r3, [r3, #20]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d106      	bne.n	800cc5e <tcp_abandon+0x36>
 800cc50:	4b4c      	ldr	r3, [pc, #304]	; (800cd84 <tcp_abandon+0x15c>)
 800cc52:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cc56:	494e      	ldr	r1, [pc, #312]	; (800cd90 <tcp_abandon+0x168>)
 800cc58:	484c      	ldr	r0, [pc, #304]	; (800cd8c <tcp_abandon+0x164>)
 800cc5a:	f005 fa53 	bl	8012104 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	7d1b      	ldrb	r3, [r3, #20]
 800cc62:	2b0a      	cmp	r3, #10
 800cc64:	d107      	bne.n	800cc76 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cc66:	6879      	ldr	r1, [r7, #4]
 800cc68:	484a      	ldr	r0, [pc, #296]	; (800cd94 <tcp_abandon+0x16c>)
 800cc6a:	f000 ffc3 	bl	800dbf4 <tcp_pcb_remove>
    tcp_free(pcb);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7ff fdb0 	bl	800c7d4 <tcp_free>
 800cc74:	e082      	b.n	800cd7c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc82:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc88:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc90:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	7d1b      	ldrb	r3, [r3, #20]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d126      	bne.n	800ccee <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	8adb      	ldrh	r3, [r3, #22]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d02e      	beq.n	800cd06 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cca8:	4b3b      	ldr	r3, [pc, #236]	; (800cd98 <tcp_abandon+0x170>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d105      	bne.n	800ccbe <tcp_abandon+0x96>
 800ccb2:	4b39      	ldr	r3, [pc, #228]	; (800cd98 <tcp_abandon+0x170>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	4a37      	ldr	r2, [pc, #220]	; (800cd98 <tcp_abandon+0x170>)
 800ccba:	6013      	str	r3, [r2, #0]
 800ccbc:	e013      	b.n	800cce6 <tcp_abandon+0xbe>
 800ccbe:	4b36      	ldr	r3, [pc, #216]	; (800cd98 <tcp_abandon+0x170>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	61fb      	str	r3, [r7, #28]
 800ccc4:	e00c      	b.n	800cce0 <tcp_abandon+0xb8>
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d104      	bne.n	800ccda <tcp_abandon+0xb2>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68da      	ldr	r2, [r3, #12]
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	60da      	str	r2, [r3, #12]
 800ccd8:	e005      	b.n	800cce6 <tcp_abandon+0xbe>
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	61fb      	str	r3, [r7, #28]
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1ef      	bne.n	800ccc6 <tcp_abandon+0x9e>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	60da      	str	r2, [r3, #12]
 800ccec:	e00b      	b.n	800cd06 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	8adb      	ldrh	r3, [r3, #22]
 800ccf6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ccf8:	6879      	ldr	r1, [r7, #4]
 800ccfa:	4828      	ldr	r0, [pc, #160]	; (800cd9c <tcp_abandon+0x174>)
 800ccfc:	f000 ff7a 	bl	800dbf4 <tcp_pcb_remove>
 800cd00:	4b27      	ldr	r3, [pc, #156]	; (800cda0 <tcp_abandon+0x178>)
 800cd02:	2201      	movs	r2, #1
 800cd04:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d004      	beq.n	800cd18 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd12:	4618      	mov	r0, r3
 800cd14:	f000 fd1c 	bl	800d750 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d004      	beq.n	800cd2a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 fd13 	bl	800d750 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d004      	beq.n	800cd3c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd36:	4618      	mov	r0, r3
 800cd38:	f000 fd0a 	bl	800d750 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00e      	beq.n	800cd60 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cd42:	6879      	ldr	r1, [r7, #4]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	3304      	adds	r3, #4
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	8b12      	ldrh	r2, [r2, #24]
 800cd4c:	9202      	str	r2, [sp, #8]
 800cd4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd50:	9201      	str	r2, [sp, #4]
 800cd52:	9300      	str	r3, [sp, #0]
 800cd54:	460b      	mov	r3, r1
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	69b9      	ldr	r1, [r7, #24]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f004 fcc2 	bl	80116e4 <tcp_rst>
    }
    last_state = pcb->state;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	7d1b      	ldrb	r3, [r3, #20]
 800cd64:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7ff fd34 	bl	800c7d4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d004      	beq.n	800cd7c <tcp_abandon+0x154>
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	f06f 010c 	mvn.w	r1, #12
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	4798      	blx	r3
  }
}
 800cd7c:	3728      	adds	r7, #40	; 0x28
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	08014480 	.word	0x08014480
 800cd88:	080145e8 	.word	0x080145e8
 800cd8c:	080144e8 	.word	0x080144e8
 800cd90:	08014604 	.word	0x08014604
 800cd94:	24008168 	.word	0x24008168
 800cd98:	2400815c 	.word	0x2400815c
 800cd9c:	24008164 	.word	0x24008164
 800cda0:	2400816c 	.word	0x2400816c

0800cda4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cdac:	2101      	movs	r1, #1
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f7ff ff3a 	bl	800cc28 <tcp_abandon>
}
 800cdb4:	bf00      	nop
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d106      	bne.n	800cdd8 <tcp_update_rcv_ann_wnd+0x1c>
 800cdca:	4b25      	ldr	r3, [pc, #148]	; (800ce60 <tcp_update_rcv_ann_wnd+0xa4>)
 800cdcc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cdd0:	4924      	ldr	r1, [pc, #144]	; (800ce64 <tcp_update_rcv_ann_wnd+0xa8>)
 800cdd2:	4825      	ldr	r0, [pc, #148]	; (800ce68 <tcp_update_rcv_ann_wnd+0xac>)
 800cdd4:	f005 f996 	bl	8012104 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cde0:	4413      	add	r3, r2
 800cde2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cdec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cdf0:	bf28      	it	cs
 800cdf2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cdf6:	b292      	uxth	r2, r2
 800cdf8:	4413      	add	r3, r2
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	db08      	blt.n	800ce14 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	e020      	b.n	800ce56 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	1ad3      	subs	r3, r2, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	dd03      	ble.n	800ce2a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce28:	e014      	b.n	800ce54 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce3c:	d306      	bcc.n	800ce4c <tcp_update_rcv_ann_wnd+0x90>
 800ce3e:	4b08      	ldr	r3, [pc, #32]	; (800ce60 <tcp_update_rcv_ann_wnd+0xa4>)
 800ce40:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ce44:	4909      	ldr	r1, [pc, #36]	; (800ce6c <tcp_update_rcv_ann_wnd+0xb0>)
 800ce46:	4808      	ldr	r0, [pc, #32]	; (800ce68 <tcp_update_rcv_ann_wnd+0xac>)
 800ce48:	f005 f95c 	bl	8012104 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ce54:	2300      	movs	r3, #0
  }
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	08014480 	.word	0x08014480
 800ce64:	08014700 	.word	0x08014700
 800ce68:	080144e8 	.word	0x080144e8
 800ce6c:	08014724 	.word	0x08014724

0800ce70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d107      	bne.n	800ce92 <tcp_recved+0x22>
 800ce82:	4b1f      	ldr	r3, [pc, #124]	; (800cf00 <tcp_recved+0x90>)
 800ce84:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ce88:	491e      	ldr	r1, [pc, #120]	; (800cf04 <tcp_recved+0x94>)
 800ce8a:	481f      	ldr	r0, [pc, #124]	; (800cf08 <tcp_recved+0x98>)
 800ce8c:	f005 f93a 	bl	8012104 <iprintf>
 800ce90:	e032      	b.n	800cef8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	7d1b      	ldrb	r3, [r3, #20]
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d106      	bne.n	800cea8 <tcp_recved+0x38>
 800ce9a:	4b19      	ldr	r3, [pc, #100]	; (800cf00 <tcp_recved+0x90>)
 800ce9c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800cea0:	491a      	ldr	r1, [pc, #104]	; (800cf0c <tcp_recved+0x9c>)
 800cea2:	4819      	ldr	r0, [pc, #100]	; (800cf08 <tcp_recved+0x98>)
 800cea4:	f005 f92e 	bl	8012104 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ceac:	887b      	ldrh	r3, [r7, #2]
 800ceae:	4413      	add	r3, r2
 800ceb0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ceb2:	89fb      	ldrh	r3, [r7, #14]
 800ceb4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ceb8:	d804      	bhi.n	800cec4 <tcp_recved+0x54>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cebe:	89fa      	ldrh	r2, [r7, #14]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d204      	bcs.n	800cece <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ceca:	851a      	strh	r2, [r3, #40]	; 0x28
 800cecc:	e002      	b.n	800ced4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	89fa      	ldrh	r2, [r7, #14]
 800ced2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f7ff ff71 	bl	800cdbc <tcp_update_rcv_ann_wnd>
 800ceda:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cee2:	d309      	bcc.n	800cef8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	8b5b      	ldrh	r3, [r3, #26]
 800cee8:	f043 0302 	orr.w	r3, r3, #2
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f003 fe42 	bl	8010b7c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	08014480 	.word	0x08014480
 800cf04:	08014740 	.word	0x08014740
 800cf08:	080144e8 	.word	0x080144e8
 800cf0c:	08014758 	.word	0x08014758

0800cf10 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cf10:	b5b0      	push	{r4, r5, r7, lr}
 800cf12:	b090      	sub	sp, #64	; 0x40
 800cf14:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cf16:	2300      	movs	r3, #0
 800cf18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cf1c:	4b94      	ldr	r3, [pc, #592]	; (800d170 <tcp_slowtmr+0x260>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	3301      	adds	r3, #1
 800cf22:	4a93      	ldr	r2, [pc, #588]	; (800d170 <tcp_slowtmr+0x260>)
 800cf24:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cf26:	4b93      	ldr	r3, [pc, #588]	; (800d174 <tcp_slowtmr+0x264>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	4b91      	ldr	r3, [pc, #580]	; (800d174 <tcp_slowtmr+0x264>)
 800cf30:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cf36:	4b90      	ldr	r3, [pc, #576]	; (800d178 <tcp_slowtmr+0x268>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cf3c:	e29d      	b.n	800d47a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf40:	7d1b      	ldrb	r3, [r3, #20]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d106      	bne.n	800cf54 <tcp_slowtmr+0x44>
 800cf46:	4b8d      	ldr	r3, [pc, #564]	; (800d17c <tcp_slowtmr+0x26c>)
 800cf48:	f240 42be 	movw	r2, #1214	; 0x4be
 800cf4c:	498c      	ldr	r1, [pc, #560]	; (800d180 <tcp_slowtmr+0x270>)
 800cf4e:	488d      	ldr	r0, [pc, #564]	; (800d184 <tcp_slowtmr+0x274>)
 800cf50:	f005 f8d8 	bl	8012104 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf56:	7d1b      	ldrb	r3, [r3, #20]
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d106      	bne.n	800cf6a <tcp_slowtmr+0x5a>
 800cf5c:	4b87      	ldr	r3, [pc, #540]	; (800d17c <tcp_slowtmr+0x26c>)
 800cf5e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cf62:	4989      	ldr	r1, [pc, #548]	; (800d188 <tcp_slowtmr+0x278>)
 800cf64:	4887      	ldr	r0, [pc, #540]	; (800d184 <tcp_slowtmr+0x274>)
 800cf66:	f005 f8cd 	bl	8012104 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	7d1b      	ldrb	r3, [r3, #20]
 800cf6e:	2b0a      	cmp	r3, #10
 800cf70:	d106      	bne.n	800cf80 <tcp_slowtmr+0x70>
 800cf72:	4b82      	ldr	r3, [pc, #520]	; (800d17c <tcp_slowtmr+0x26c>)
 800cf74:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cf78:	4984      	ldr	r1, [pc, #528]	; (800d18c <tcp_slowtmr+0x27c>)
 800cf7a:	4882      	ldr	r0, [pc, #520]	; (800d184 <tcp_slowtmr+0x274>)
 800cf7c:	f005 f8c2 	bl	8012104 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf82:	7f9a      	ldrb	r2, [r3, #30]
 800cf84:	4b7b      	ldr	r3, [pc, #492]	; (800d174 <tcp_slowtmr+0x264>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d105      	bne.n	800cf98 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cf96:	e270      	b.n	800d47a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cf98:	4b76      	ldr	r3, [pc, #472]	; (800d174 <tcp_slowtmr+0x264>)
 800cf9a:	781a      	ldrb	r2, [r3, #0]
 800cf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfae:	7d1b      	ldrb	r3, [r3, #20]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d10a      	bne.n	800cfca <tcp_slowtmr+0xba>
 800cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfba:	2b05      	cmp	r3, #5
 800cfbc:	d905      	bls.n	800cfca <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cfbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfc8:	e11e      	b.n	800d208 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfd0:	2b0b      	cmp	r3, #11
 800cfd2:	d905      	bls.n	800cfe0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfd8:	3301      	adds	r3, #1
 800cfda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfde:	e113      	b.n	800d208 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d075      	beq.n	800d0d6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d006      	beq.n	800d000 <tcp_slowtmr+0xf0>
 800cff2:	4b62      	ldr	r3, [pc, #392]	; (800d17c <tcp_slowtmr+0x26c>)
 800cff4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cff8:	4965      	ldr	r1, [pc, #404]	; (800d190 <tcp_slowtmr+0x280>)
 800cffa:	4862      	ldr	r0, [pc, #392]	; (800d184 <tcp_slowtmr+0x274>)
 800cffc:	f005 f882 	bl	8012104 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d004:	2b00      	cmp	r3, #0
 800d006:	d106      	bne.n	800d016 <tcp_slowtmr+0x106>
 800d008:	4b5c      	ldr	r3, [pc, #368]	; (800d17c <tcp_slowtmr+0x26c>)
 800d00a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d00e:	4961      	ldr	r1, [pc, #388]	; (800d194 <tcp_slowtmr+0x284>)
 800d010:	485c      	ldr	r0, [pc, #368]	; (800d184 <tcp_slowtmr+0x274>)
 800d012:	f005 f877 	bl	8012104 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d018:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d01c:	2b0b      	cmp	r3, #11
 800d01e:	d905      	bls.n	800d02c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d024:	3301      	adds	r3, #1
 800d026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d02a:	e0ed      	b.n	800d208 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d032:	3b01      	subs	r3, #1
 800d034:	4a58      	ldr	r2, [pc, #352]	; (800d198 <tcp_slowtmr+0x288>)
 800d036:	5cd3      	ldrb	r3, [r2, r3]
 800d038:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d040:	7c7a      	ldrb	r2, [r7, #17]
 800d042:	429a      	cmp	r2, r3
 800d044:	d907      	bls.n	800d056 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d048:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d04c:	3301      	adds	r3, #1
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d058:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d05c:	7c7a      	ldrb	r2, [r7, #17]
 800d05e:	429a      	cmp	r2, r3
 800d060:	f200 80d2 	bhi.w	800d208 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d064:	2301      	movs	r3, #1
 800d066:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d108      	bne.n	800d084 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d074:	f004 fc2a 	bl	80118cc <tcp_zero_window_probe>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d014      	beq.n	800d0a8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d07e:	2300      	movs	r3, #0
 800d080:	623b      	str	r3, [r7, #32]
 800d082:	e011      	b.n	800d0a8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d08a:	4619      	mov	r1, r3
 800d08c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d08e:	f003 faef 	bl	8010670 <tcp_split_unsent_seg>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d107      	bne.n	800d0a8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d09a:	f003 fd6f 	bl	8010b7c <tcp_output>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d0a8:	6a3b      	ldr	r3, [r7, #32]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f000 80ac 	beq.w	800d208 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d0be:	2b06      	cmp	r3, #6
 800d0c0:	f200 80a2 	bhi.w	800d208 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d0d4:	e098      	b.n	800d208 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	db0f      	blt.n	800d100 <tcp_slowtmr+0x1f0>
 800d0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d0e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d008      	beq.n	800d100 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	b21a      	sxth	r2, r3
 800d0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d102:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d108:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d10c:	429a      	cmp	r2, r3
 800d10e:	db7b      	blt.n	800d208 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d112:	f004 f825 	bl	8011160 <tcp_rexmit_rto_prepare>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d007      	beq.n	800d12c <tcp_slowtmr+0x21c>
 800d11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d120:	2b00      	cmp	r3, #0
 800d122:	d171      	bne.n	800d208 <tcp_slowtmr+0x2f8>
 800d124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d06d      	beq.n	800d208 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	7d1b      	ldrb	r3, [r3, #20]
 800d130:	2b02      	cmp	r3, #2
 800d132:	d03a      	beq.n	800d1aa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d13a:	2b0c      	cmp	r3, #12
 800d13c:	bf28      	it	cs
 800d13e:	230c      	movcs	r3, #12
 800d140:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d144:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d148:	10db      	asrs	r3, r3, #3
 800d14a:	b21b      	sxth	r3, r3
 800d14c:	461a      	mov	r2, r3
 800d14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d150:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d154:	4413      	add	r3, r2
 800d156:	7efa      	ldrb	r2, [r7, #27]
 800d158:	4910      	ldr	r1, [pc, #64]	; (800d19c <tcp_slowtmr+0x28c>)
 800d15a:	5c8a      	ldrb	r2, [r1, r2]
 800d15c:	4093      	lsls	r3, r2
 800d15e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d166:	4293      	cmp	r3, r2
 800d168:	dc1a      	bgt.n	800d1a0 <tcp_slowtmr+0x290>
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	b21a      	sxth	r2, r3
 800d16e:	e019      	b.n	800d1a4 <tcp_slowtmr+0x294>
 800d170:	24008158 	.word	0x24008158
 800d174:	2400816e 	.word	0x2400816e
 800d178:	24008164 	.word	0x24008164
 800d17c:	08014480 	.word	0x08014480
 800d180:	080147e8 	.word	0x080147e8
 800d184:	080144e8 	.word	0x080144e8
 800d188:	08014814 	.word	0x08014814
 800d18c:	08014840 	.word	0x08014840
 800d190:	08014870 	.word	0x08014870
 800d194:	080148a4 	.word	0x080148a4
 800d198:	08015e78 	.word	0x08015e78
 800d19c:	08015e68 	.word	0x08015e68
 800d1a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	bf28      	it	cs
 800d1c0:	4613      	movcs	r3, r2
 800d1c2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d1c4:	8a7b      	ldrh	r3, [r7, #18]
 800d1c6:	085b      	lsrs	r3, r3, #1
 800d1c8:	b29a      	uxth	r2, r3
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1da:	005b      	lsls	r3, r3, #1
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d206      	bcs.n	800d1f0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1e6:	005b      	lsls	r3, r3, #1
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d204:	f004 f81c 	bl	8011240 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20a:	7d1b      	ldrb	r3, [r3, #20]
 800d20c:	2b06      	cmp	r3, #6
 800d20e:	d111      	bne.n	800d234 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d212:	8b5b      	ldrh	r3, [r3, #26]
 800d214:	f003 0310 	and.w	r3, r3, #16
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d00b      	beq.n	800d234 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d21c:	4b9c      	ldr	r3, [pc, #624]	; (800d490 <tcp_slowtmr+0x580>)
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d222:	6a1b      	ldr	r3, [r3, #32]
 800d224:	1ad3      	subs	r3, r2, r3
 800d226:	2b28      	cmp	r3, #40	; 0x28
 800d228:	d904      	bls.n	800d234 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d22a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d22e:	3301      	adds	r3, #1
 800d230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d236:	7a5b      	ldrb	r3, [r3, #9]
 800d238:	f003 0308 	and.w	r3, r3, #8
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d04a      	beq.n	800d2d6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d242:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d244:	2b04      	cmp	r3, #4
 800d246:	d003      	beq.n	800d250 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d24c:	2b07      	cmp	r3, #7
 800d24e:	d142      	bne.n	800d2d6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d250:	4b8f      	ldr	r3, [pc, #572]	; (800d490 <tcp_slowtmr+0x580>)
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d256:	6a1b      	ldr	r3, [r3, #32]
 800d258:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d260:	4b8c      	ldr	r3, [pc, #560]	; (800d494 <tcp_slowtmr+0x584>)
 800d262:	440b      	add	r3, r1
 800d264:	498c      	ldr	r1, [pc, #560]	; (800d498 <tcp_slowtmr+0x588>)
 800d266:	fba1 1303 	umull	r1, r3, r1, r3
 800d26a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d90a      	bls.n	800d286 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d274:	3301      	adds	r3, #1
 800d276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d27a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d27e:	3301      	adds	r3, #1
 800d280:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d284:	e027      	b.n	800d2d6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d286:	4b82      	ldr	r3, [pc, #520]	; (800d490 <tcp_slowtmr+0x580>)
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28c:	6a1b      	ldr	r3, [r3, #32]
 800d28e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d298:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d29c:	4618      	mov	r0, r3
 800d29e:	4b7f      	ldr	r3, [pc, #508]	; (800d49c <tcp_slowtmr+0x58c>)
 800d2a0:	fb00 f303 	mul.w	r3, r0, r3
 800d2a4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d2a6:	497c      	ldr	r1, [pc, #496]	; (800d498 <tcp_slowtmr+0x588>)
 800d2a8:	fba1 1303 	umull	r1, r3, r1, r3
 800d2ac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d911      	bls.n	800d2d6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d2b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2b4:	f004 faca 	bl	801184c <tcp_keepalive>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d2be:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d107      	bne.n	800d2d6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	b2da      	uxtb	r2, r3
 800d2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d011      	beq.n	800d302 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d2de:	4b6c      	ldr	r3, [pc, #432]	; (800d490 <tcp_slowtmr+0x580>)
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	1ad2      	subs	r2, r2, r3
 800d2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	440b      	add	r3, r1
 800d2f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d302      	bcc.n	800d302 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d2fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2fe:	f000 fddd 	bl	800debc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d304:	7d1b      	ldrb	r3, [r3, #20]
 800d306:	2b03      	cmp	r3, #3
 800d308:	d10b      	bne.n	800d322 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d30a:	4b61      	ldr	r3, [pc, #388]	; (800d490 <tcp_slowtmr+0x580>)
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d310:	6a1b      	ldr	r3, [r3, #32]
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	2b28      	cmp	r3, #40	; 0x28
 800d316:	d904      	bls.n	800d322 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d31c:	3301      	adds	r3, #1
 800d31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d324:	7d1b      	ldrb	r3, [r3, #20]
 800d326:	2b09      	cmp	r3, #9
 800d328:	d10b      	bne.n	800d342 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d32a:	4b59      	ldr	r3, [pc, #356]	; (800d490 <tcp_slowtmr+0x580>)
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	6a1b      	ldr	r3, [r3, #32]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	2bf0      	cmp	r3, #240	; 0xf0
 800d336:	d904      	bls.n	800d342 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d33c:	3301      	adds	r3, #1
 800d33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d346:	2b00      	cmp	r3, #0
 800d348:	d060      	beq.n	800d40c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d350:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d354:	f000 fbfe 	bl	800db54 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d010      	beq.n	800d380 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d35e:	4b50      	ldr	r3, [pc, #320]	; (800d4a0 <tcp_slowtmr+0x590>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d364:	429a      	cmp	r2, r3
 800d366:	d106      	bne.n	800d376 <tcp_slowtmr+0x466>
 800d368:	4b4e      	ldr	r3, [pc, #312]	; (800d4a4 <tcp_slowtmr+0x594>)
 800d36a:	f240 526d 	movw	r2, #1389	; 0x56d
 800d36e:	494e      	ldr	r1, [pc, #312]	; (800d4a8 <tcp_slowtmr+0x598>)
 800d370:	484e      	ldr	r0, [pc, #312]	; (800d4ac <tcp_slowtmr+0x59c>)
 800d372:	f004 fec7 	bl	8012104 <iprintf>
        prev->next = pcb->next;
 800d376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d378:	68da      	ldr	r2, [r3, #12]
 800d37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37c:	60da      	str	r2, [r3, #12]
 800d37e:	e00f      	b.n	800d3a0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d380:	4b47      	ldr	r3, [pc, #284]	; (800d4a0 <tcp_slowtmr+0x590>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d386:	429a      	cmp	r2, r3
 800d388:	d006      	beq.n	800d398 <tcp_slowtmr+0x488>
 800d38a:	4b46      	ldr	r3, [pc, #280]	; (800d4a4 <tcp_slowtmr+0x594>)
 800d38c:	f240 5271 	movw	r2, #1393	; 0x571
 800d390:	4947      	ldr	r1, [pc, #284]	; (800d4b0 <tcp_slowtmr+0x5a0>)
 800d392:	4846      	ldr	r0, [pc, #280]	; (800d4ac <tcp_slowtmr+0x59c>)
 800d394:	f004 feb6 	bl	8012104 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	4a40      	ldr	r2, [pc, #256]	; (800d4a0 <tcp_slowtmr+0x590>)
 800d39e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d3a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d013      	beq.n	800d3d0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d3b0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3b8:	8ad2      	ldrh	r2, [r2, #22]
 800d3ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3bc:	8b09      	ldrh	r1, [r1, #24]
 800d3be:	9102      	str	r1, [sp, #8]
 800d3c0:	9201      	str	r2, [sp, #4]
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	462b      	mov	r3, r5
 800d3c6:	4622      	mov	r2, r4
 800d3c8:	4601      	mov	r1, r0
 800d3ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3cc:	f004 f98a 	bl	80116e4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d2:	691b      	ldr	r3, [r3, #16]
 800d3d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d8:	7d1b      	ldrb	r3, [r3, #20]
 800d3da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d3e6:	6838      	ldr	r0, [r7, #0]
 800d3e8:	f7ff f9f4 	bl	800c7d4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d3ec:	4b31      	ldr	r3, [pc, #196]	; (800d4b4 <tcp_slowtmr+0x5a4>)
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d004      	beq.n	800d402 <tcp_slowtmr+0x4f2>
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f06f 010c 	mvn.w	r1, #12
 800d3fe:	68b8      	ldr	r0, [r7, #8]
 800d400:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d402:	4b2c      	ldr	r3, [pc, #176]	; (800d4b4 <tcp_slowtmr+0x5a4>)
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d037      	beq.n	800d47a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d40a:	e592      	b.n	800cf32 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d418:	7f1b      	ldrb	r3, [r3, #28]
 800d41a:	3301      	adds	r3, #1
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d420:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d424:	7f1a      	ldrb	r2, [r3, #28]
 800d426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d428:	7f5b      	ldrb	r3, [r3, #29]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d325      	bcc.n	800d47a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	2200      	movs	r2, #0
 800d432:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d434:	4b1f      	ldr	r3, [pc, #124]	; (800d4b4 <tcp_slowtmr+0x5a4>)
 800d436:	2200      	movs	r2, #0
 800d438:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00b      	beq.n	800d45c <tcp_slowtmr+0x54c>
 800d444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d44c:	6912      	ldr	r2, [r2, #16]
 800d44e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d450:	4610      	mov	r0, r2
 800d452:	4798      	blx	r3
 800d454:	4603      	mov	r3, r0
 800d456:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d45a:	e002      	b.n	800d462 <tcp_slowtmr+0x552>
 800d45c:	2300      	movs	r3, #0
 800d45e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d462:	4b14      	ldr	r3, [pc, #80]	; (800d4b4 <tcp_slowtmr+0x5a4>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d000      	beq.n	800d46c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d46a:	e562      	b.n	800cf32 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d46c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d470:	2b00      	cmp	r3, #0
 800d472:	d102      	bne.n	800d47a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d476:	f003 fb81 	bl	8010b7c <tcp_output>
  while (pcb != NULL) {
 800d47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f47f ad5e 	bne.w	800cf3e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d482:	2300      	movs	r3, #0
 800d484:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d486:	4b0c      	ldr	r3, [pc, #48]	; (800d4b8 <tcp_slowtmr+0x5a8>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d48c:	e069      	b.n	800d562 <tcp_slowtmr+0x652>
 800d48e:	bf00      	nop
 800d490:	24008158 	.word	0x24008158
 800d494:	000a4cb8 	.word	0x000a4cb8
 800d498:	10624dd3 	.word	0x10624dd3
 800d49c:	000124f8 	.word	0x000124f8
 800d4a0:	24008164 	.word	0x24008164
 800d4a4:	08014480 	.word	0x08014480
 800d4a8:	080148dc 	.word	0x080148dc
 800d4ac:	080144e8 	.word	0x080144e8
 800d4b0:	08014908 	.word	0x08014908
 800d4b4:	2400816c 	.word	0x2400816c
 800d4b8:	24008168 	.word	0x24008168
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4be:	7d1b      	ldrb	r3, [r3, #20]
 800d4c0:	2b0a      	cmp	r3, #10
 800d4c2:	d006      	beq.n	800d4d2 <tcp_slowtmr+0x5c2>
 800d4c4:	4b2b      	ldr	r3, [pc, #172]	; (800d574 <tcp_slowtmr+0x664>)
 800d4c6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d4ca:	492b      	ldr	r1, [pc, #172]	; (800d578 <tcp_slowtmr+0x668>)
 800d4cc:	482b      	ldr	r0, [pc, #172]	; (800d57c <tcp_slowtmr+0x66c>)
 800d4ce:	f004 fe19 	bl	8012104 <iprintf>
    pcb_remove = 0;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d4d8:	4b29      	ldr	r3, [pc, #164]	; (800d580 <tcp_slowtmr+0x670>)
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4de:	6a1b      	ldr	r3, [r3, #32]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	2bf0      	cmp	r3, #240	; 0xf0
 800d4e4:	d904      	bls.n	800d4f0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d4e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d02f      	beq.n	800d558 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d4f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4fa:	f000 fb2b 	bl	800db54 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d500:	2b00      	cmp	r3, #0
 800d502:	d010      	beq.n	800d526 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d504:	4b1f      	ldr	r3, [pc, #124]	; (800d584 <tcp_slowtmr+0x674>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d106      	bne.n	800d51c <tcp_slowtmr+0x60c>
 800d50e:	4b19      	ldr	r3, [pc, #100]	; (800d574 <tcp_slowtmr+0x664>)
 800d510:	f240 52af 	movw	r2, #1455	; 0x5af
 800d514:	491c      	ldr	r1, [pc, #112]	; (800d588 <tcp_slowtmr+0x678>)
 800d516:	4819      	ldr	r0, [pc, #100]	; (800d57c <tcp_slowtmr+0x66c>)
 800d518:	f004 fdf4 	bl	8012104 <iprintf>
        prev->next = pcb->next;
 800d51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51e:	68da      	ldr	r2, [r3, #12]
 800d520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d522:	60da      	str	r2, [r3, #12]
 800d524:	e00f      	b.n	800d546 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d526:	4b17      	ldr	r3, [pc, #92]	; (800d584 <tcp_slowtmr+0x674>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d006      	beq.n	800d53e <tcp_slowtmr+0x62e>
 800d530:	4b10      	ldr	r3, [pc, #64]	; (800d574 <tcp_slowtmr+0x664>)
 800d532:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d536:	4915      	ldr	r1, [pc, #84]	; (800d58c <tcp_slowtmr+0x67c>)
 800d538:	4810      	ldr	r0, [pc, #64]	; (800d57c <tcp_slowtmr+0x66c>)
 800d53a:	f004 fde3 	bl	8012104 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	4a10      	ldr	r2, [pc, #64]	; (800d584 <tcp_slowtmr+0x674>)
 800d544:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d550:	69f8      	ldr	r0, [r7, #28]
 800d552:	f7ff f93f 	bl	800c7d4 <tcp_free>
 800d556:	e004      	b.n	800d562 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d564:	2b00      	cmp	r3, #0
 800d566:	d1a9      	bne.n	800d4bc <tcp_slowtmr+0x5ac>
    }
  }
}
 800d568:	bf00      	nop
 800d56a:	bf00      	nop
 800d56c:	3730      	adds	r7, #48	; 0x30
 800d56e:	46bd      	mov	sp, r7
 800d570:	bdb0      	pop	{r4, r5, r7, pc}
 800d572:	bf00      	nop
 800d574:	08014480 	.word	0x08014480
 800d578:	08014934 	.word	0x08014934
 800d57c:	080144e8 	.word	0x080144e8
 800d580:	24008158 	.word	0x24008158
 800d584:	24008168 	.word	0x24008168
 800d588:	08014964 	.word	0x08014964
 800d58c:	0801498c 	.word	0x0801498c

0800d590 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d596:	4b2d      	ldr	r3, [pc, #180]	; (800d64c <tcp_fasttmr+0xbc>)
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	3301      	adds	r3, #1
 800d59c:	b2da      	uxtb	r2, r3
 800d59e:	4b2b      	ldr	r3, [pc, #172]	; (800d64c <tcp_fasttmr+0xbc>)
 800d5a0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d5a2:	4b2b      	ldr	r3, [pc, #172]	; (800d650 <tcp_fasttmr+0xc0>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d5a8:	e048      	b.n	800d63c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	7f9a      	ldrb	r2, [r3, #30]
 800d5ae:	4b27      	ldr	r3, [pc, #156]	; (800d64c <tcp_fasttmr+0xbc>)
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d03f      	beq.n	800d636 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d5b6:	4b25      	ldr	r3, [pc, #148]	; (800d64c <tcp_fasttmr+0xbc>)
 800d5b8:	781a      	ldrb	r2, [r3, #0]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	8b5b      	ldrh	r3, [r3, #26]
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d010      	beq.n	800d5ec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	8b5b      	ldrh	r3, [r3, #26]
 800d5ce:	f043 0302 	orr.w	r3, r3, #2
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f003 facf 	bl	8010b7c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	8b5b      	ldrh	r3, [r3, #26]
 800d5e2:	f023 0303 	bic.w	r3, r3, #3
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	8b5b      	ldrh	r3, [r3, #26]
 800d5f0:	f003 0308 	and.w	r3, r3, #8
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d009      	beq.n	800d60c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	8b5b      	ldrh	r3, [r3, #26]
 800d5fc:	f023 0308 	bic.w	r3, r3, #8
 800d600:	b29a      	uxth	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f7ff fa78 	bl	800cafc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00a      	beq.n	800d630 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d61a:	4b0e      	ldr	r3, [pc, #56]	; (800d654 <tcp_fasttmr+0xc4>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 f819 	bl	800d658 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d626:	4b0b      	ldr	r3, [pc, #44]	; (800d654 <tcp_fasttmr+0xc4>)
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d000      	beq.n	800d630 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d62e:	e7b8      	b.n	800d5a2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	607b      	str	r3, [r7, #4]
 800d634:	e002      	b.n	800d63c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1b3      	bne.n	800d5aa <tcp_fasttmr+0x1a>
    }
  }
}
 800d642:	bf00      	nop
 800d644:	bf00      	nop
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	2400816e 	.word	0x2400816e
 800d650:	24008164 	.word	0x24008164
 800d654:	2400816c 	.word	0x2400816c

0800d658 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d658:	b590      	push	{r4, r7, lr}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d109      	bne.n	800d67a <tcp_process_refused_data+0x22>
 800d666:	4b37      	ldr	r3, [pc, #220]	; (800d744 <tcp_process_refused_data+0xec>)
 800d668:	f240 6209 	movw	r2, #1545	; 0x609
 800d66c:	4936      	ldr	r1, [pc, #216]	; (800d748 <tcp_process_refused_data+0xf0>)
 800d66e:	4837      	ldr	r0, [pc, #220]	; (800d74c <tcp_process_refused_data+0xf4>)
 800d670:	f004 fd48 	bl	8012104 <iprintf>
 800d674:	f06f 030f 	mvn.w	r3, #15
 800d678:	e060      	b.n	800d73c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d67e:	7b5b      	ldrb	r3, [r3, #13]
 800d680:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d686:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00b      	beq.n	800d6b0 <tcp_process_refused_data+0x58>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6918      	ldr	r0, [r3, #16]
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	6879      	ldr	r1, [r7, #4]
 800d6a8:	47a0      	blx	r4
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	73fb      	strb	r3, [r7, #15]
 800d6ae:	e007      	b.n	800d6c0 <tcp_process_refused_data+0x68>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	6879      	ldr	r1, [r7, #4]
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	f000 f8a4 	bl	800d804 <tcp_recv_null>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d6c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d12a      	bne.n	800d71e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d6c8:	7bbb      	ldrb	r3, [r7, #14]
 800d6ca:	f003 0320 	and.w	r3, r3, #32
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d033      	beq.n	800d73a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d6da:	d005      	beq.n	800d6e8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d00b      	beq.n	800d70a <tcp_process_refused_data+0xb2>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6918      	ldr	r0, [r3, #16]
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	2200      	movs	r2, #0
 800d700:	6879      	ldr	r1, [r7, #4]
 800d702:	47a0      	blx	r4
 800d704:	4603      	mov	r3, r0
 800d706:	73fb      	strb	r3, [r7, #15]
 800d708:	e001      	b.n	800d70e <tcp_process_refused_data+0xb6>
 800d70a:	2300      	movs	r3, #0
 800d70c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d712:	f113 0f0d 	cmn.w	r3, #13
 800d716:	d110      	bne.n	800d73a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d718:	f06f 030c 	mvn.w	r3, #12
 800d71c:	e00e      	b.n	800d73c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d722:	f113 0f0d 	cmn.w	r3, #13
 800d726:	d102      	bne.n	800d72e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d728:	f06f 030c 	mvn.w	r3, #12
 800d72c:	e006      	b.n	800d73c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	68ba      	ldr	r2, [r7, #8]
 800d732:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d734:	f06f 0304 	mvn.w	r3, #4
 800d738:	e000      	b.n	800d73c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	bd90      	pop	{r4, r7, pc}
 800d744:	08014480 	.word	0x08014480
 800d748:	080149b4 	.word	0x080149b4
 800d74c:	080144e8 	.word	0x080144e8

0800d750 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d758:	e007      	b.n	800d76a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f80a 	bl	800d77a <tcp_seg_free>
    seg = next;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1f4      	bne.n	800d75a <tcp_segs_free+0xa>
  }
}
 800d770:	bf00      	nop
 800d772:	bf00      	nop
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00c      	beq.n	800d7a2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d004      	beq.n	800d79a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	4618      	mov	r0, r3
 800d796:	f7fe fd7d 	bl	800c294 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d79a:	6879      	ldr	r1, [r7, #4]
 800d79c:	2003      	movs	r0, #3
 800d79e:	f7fd ff03 	bl	800b5a8 <memp_free>
  }
}
 800d7a2:	bf00      	nop
 800d7a4:	3708      	adds	r7, #8
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
	...

0800d7ac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d106      	bne.n	800d7c8 <tcp_seg_copy+0x1c>
 800d7ba:	4b0f      	ldr	r3, [pc, #60]	; (800d7f8 <tcp_seg_copy+0x4c>)
 800d7bc:	f240 6282 	movw	r2, #1666	; 0x682
 800d7c0:	490e      	ldr	r1, [pc, #56]	; (800d7fc <tcp_seg_copy+0x50>)
 800d7c2:	480f      	ldr	r0, [pc, #60]	; (800d800 <tcp_seg_copy+0x54>)
 800d7c4:	f004 fc9e 	bl	8012104 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d7c8:	2003      	movs	r0, #3
 800d7ca:	f7fd fe7d 	bl	800b4c8 <memp_malloc>
 800d7ce:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d101      	bne.n	800d7da <tcp_seg_copy+0x2e>
    return NULL;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	e00a      	b.n	800d7f0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d7da:	2210      	movs	r2, #16
 800d7dc:	6879      	ldr	r1, [r7, #4]
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f004 fc7a 	bl	80120d8 <memcpy>
  pbuf_ref(cseg->p);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7fe fdf3 	bl	800c3d4 <pbuf_ref>
  return cseg;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	08014480 	.word	0x08014480
 800d7fc:	080149f8 	.word	0x080149f8
 800d800:	080144e8 	.word	0x080144e8

0800d804 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
 800d810:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d109      	bne.n	800d82c <tcp_recv_null+0x28>
 800d818:	4b12      	ldr	r3, [pc, #72]	; (800d864 <tcp_recv_null+0x60>)
 800d81a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d81e:	4912      	ldr	r1, [pc, #72]	; (800d868 <tcp_recv_null+0x64>)
 800d820:	4812      	ldr	r0, [pc, #72]	; (800d86c <tcp_recv_null+0x68>)
 800d822:	f004 fc6f 	bl	8012104 <iprintf>
 800d826:	f06f 030f 	mvn.w	r3, #15
 800d82a:	e016      	b.n	800d85a <tcp_recv_null+0x56>

  if (p != NULL) {
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d009      	beq.n	800d846 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	891b      	ldrh	r3, [r3, #8]
 800d836:	4619      	mov	r1, r3
 800d838:	68b8      	ldr	r0, [r7, #8]
 800d83a:	f7ff fb19 	bl	800ce70 <tcp_recved>
    pbuf_free(p);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7fe fd28 	bl	800c294 <pbuf_free>
 800d844:	e008      	b.n	800d858 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d104      	bne.n	800d858 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d84e:	68b8      	ldr	r0, [r7, #8]
 800d850:	f7ff f9be 	bl	800cbd0 <tcp_close>
 800d854:	4603      	mov	r3, r0
 800d856:	e000      	b.n	800d85a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	08014480 	.word	0x08014480
 800d868:	08014a14 	.word	0x08014a14
 800d86c:	080144e8 	.word	0x080144e8

0800d870 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b086      	sub	sp, #24
 800d874:	af00      	add	r7, sp, #0
 800d876:	4603      	mov	r3, r0
 800d878:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d87a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	db01      	blt.n	800d886 <tcp_kill_prio+0x16>
 800d882:	79fb      	ldrb	r3, [r7, #7]
 800d884:	e000      	b.n	800d888 <tcp_kill_prio+0x18>
 800d886:	237f      	movs	r3, #127	; 0x7f
 800d888:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d88a:	7afb      	ldrb	r3, [r7, #11]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d034      	beq.n	800d8fa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d890:	7afb      	ldrb	r3, [r7, #11]
 800d892:	3b01      	subs	r3, #1
 800d894:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d896:	2300      	movs	r3, #0
 800d898:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d89a:	2300      	movs	r3, #0
 800d89c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d89e:	4b19      	ldr	r3, [pc, #100]	; (800d904 <tcp_kill_prio+0x94>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	e01f      	b.n	800d8e6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	7d5b      	ldrb	r3, [r3, #21]
 800d8aa:	7afa      	ldrb	r2, [r7, #11]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d80c      	bhi.n	800d8ca <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d8b4:	7afa      	ldrb	r2, [r7, #11]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d112      	bne.n	800d8e0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d8ba:	4b13      	ldr	r3, [pc, #76]	; (800d908 <tcp_kill_prio+0x98>)
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	1ad3      	subs	r3, r2, r3
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d80a      	bhi.n	800d8e0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d8ca:	4b0f      	ldr	r3, [pc, #60]	; (800d908 <tcp_kill_prio+0x98>)
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	7d5b      	ldrb	r3, [r3, #21]
 800d8de:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	617b      	str	r3, [r7, #20]
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1dc      	bne.n	800d8a6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d004      	beq.n	800d8fc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d8f2:	6938      	ldr	r0, [r7, #16]
 800d8f4:	f7ff fa56 	bl	800cda4 <tcp_abort>
 800d8f8:	e000      	b.n	800d8fc <tcp_kill_prio+0x8c>
    return;
 800d8fa:	bf00      	nop
  }
}
 800d8fc:	3718      	adds	r7, #24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	24008164 	.word	0x24008164
 800d908:	24008158 	.word	0x24008158

0800d90c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	4603      	mov	r3, r0
 800d914:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d916:	79fb      	ldrb	r3, [r7, #7]
 800d918:	2b08      	cmp	r3, #8
 800d91a:	d009      	beq.n	800d930 <tcp_kill_state+0x24>
 800d91c:	79fb      	ldrb	r3, [r7, #7]
 800d91e:	2b09      	cmp	r3, #9
 800d920:	d006      	beq.n	800d930 <tcp_kill_state+0x24>
 800d922:	4b1a      	ldr	r3, [pc, #104]	; (800d98c <tcp_kill_state+0x80>)
 800d924:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d928:	4919      	ldr	r1, [pc, #100]	; (800d990 <tcp_kill_state+0x84>)
 800d92a:	481a      	ldr	r0, [pc, #104]	; (800d994 <tcp_kill_state+0x88>)
 800d92c:	f004 fbea 	bl	8012104 <iprintf>

  inactivity = 0;
 800d930:	2300      	movs	r3, #0
 800d932:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d934:	2300      	movs	r3, #0
 800d936:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d938:	4b17      	ldr	r3, [pc, #92]	; (800d998 <tcp_kill_state+0x8c>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	617b      	str	r3, [r7, #20]
 800d93e:	e017      	b.n	800d970 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	7d1b      	ldrb	r3, [r3, #20]
 800d944:	79fa      	ldrb	r2, [r7, #7]
 800d946:	429a      	cmp	r2, r3
 800d948:	d10f      	bne.n	800d96a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d94a:	4b14      	ldr	r3, [pc, #80]	; (800d99c <tcp_kill_state+0x90>)
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	429a      	cmp	r2, r3
 800d958:	d807      	bhi.n	800d96a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d95a:	4b10      	ldr	r3, [pc, #64]	; (800d99c <tcp_kill_state+0x90>)
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	6a1b      	ldr	r3, [r3, #32]
 800d962:	1ad3      	subs	r3, r2, r3
 800d964:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	617b      	str	r3, [r7, #20]
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1e4      	bne.n	800d940 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d003      	beq.n	800d984 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d97c:	2100      	movs	r1, #0
 800d97e:	6938      	ldr	r0, [r7, #16]
 800d980:	f7ff f952 	bl	800cc28 <tcp_abandon>
  }
}
 800d984:	bf00      	nop
 800d986:	3718      	adds	r7, #24
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	08014480 	.word	0x08014480
 800d990:	08014a30 	.word	0x08014a30
 800d994:	080144e8 	.word	0x080144e8
 800d998:	24008164 	.word	0x24008164
 800d99c:	24008158 	.word	0x24008158

0800d9a0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9ae:	4b12      	ldr	r3, [pc, #72]	; (800d9f8 <tcp_kill_timewait+0x58>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	e012      	b.n	800d9dc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d9b6:	4b11      	ldr	r3, [pc, #68]	; (800d9fc <tcp_kill_timewait+0x5c>)
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d807      	bhi.n	800d9d6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d9c6:	4b0d      	ldr	r3, [pc, #52]	; (800d9fc <tcp_kill_timewait+0x5c>)
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6a1b      	ldr	r3, [r3, #32]
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d1e9      	bne.n	800d9b6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d002      	beq.n	800d9ee <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d9e8:	68b8      	ldr	r0, [r7, #8]
 800d9ea:	f7ff f9db 	bl	800cda4 <tcp_abort>
  }
}
 800d9ee:	bf00      	nop
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	24008168 	.word	0x24008168
 800d9fc:	24008158 	.word	0x24008158

0800da00 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800da06:	4b10      	ldr	r3, [pc, #64]	; (800da48 <tcp_handle_closepend+0x48>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800da0c:	e014      	b.n	800da38 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	8b5b      	ldrh	r3, [r3, #26]
 800da18:	f003 0308 	and.w	r3, r3, #8
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d009      	beq.n	800da34 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	8b5b      	ldrh	r3, [r3, #26]
 800da24:	f023 0308 	bic.w	r3, r3, #8
 800da28:	b29a      	uxth	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f7ff f864 	bl	800cafc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1e7      	bne.n	800da0e <tcp_handle_closepend+0xe>
  }
}
 800da3e:	bf00      	nop
 800da40:	bf00      	nop
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	24008164 	.word	0x24008164

0800da4c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	4603      	mov	r3, r0
 800da54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da56:	2001      	movs	r0, #1
 800da58:	f7fd fd36 	bl	800b4c8 <memp_malloc>
 800da5c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d126      	bne.n	800dab2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800da64:	f7ff ffcc 	bl	800da00 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800da68:	f7ff ff9a 	bl	800d9a0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da6c:	2001      	movs	r0, #1
 800da6e:	f7fd fd2b 	bl	800b4c8 <memp_malloc>
 800da72:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d11b      	bne.n	800dab2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800da7a:	2009      	movs	r0, #9
 800da7c:	f7ff ff46 	bl	800d90c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da80:	2001      	movs	r0, #1
 800da82:	f7fd fd21 	bl	800b4c8 <memp_malloc>
 800da86:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d111      	bne.n	800dab2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800da8e:	2008      	movs	r0, #8
 800da90:	f7ff ff3c 	bl	800d90c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da94:	2001      	movs	r0, #1
 800da96:	f7fd fd17 	bl	800b4c8 <memp_malloc>
 800da9a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d107      	bne.n	800dab2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800daa2:	79fb      	ldrb	r3, [r7, #7]
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7ff fee3 	bl	800d870 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800daaa:	2001      	movs	r0, #1
 800daac:	f7fd fd0c 	bl	800b4c8 <memp_malloc>
 800dab0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d03f      	beq.n	800db38 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dab8:	229c      	movs	r2, #156	; 0x9c
 800daba:	2100      	movs	r1, #0
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f004 fb19 	bl	80120f4 <memset>
    pcb->prio = prio;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	79fa      	ldrb	r2, [r7, #7]
 800dac6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dace:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dad8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	22ff      	movs	r2, #255	; 0xff
 800dae6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f44f 7206 	mov.w	r2, #536	; 0x218
 800daee:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2206      	movs	r2, #6
 800daf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2206      	movs	r2, #6
 800dafc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db04:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2201      	movs	r2, #1
 800db0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800db0e:	4b0d      	ldr	r3, [pc, #52]	; (800db44 <tcp_alloc+0xf8>)
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800db16:	4b0c      	ldr	r3, [pc, #48]	; (800db48 <tcp_alloc+0xfc>)
 800db18:	781a      	ldrb	r2, [r3, #0]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800db24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	4a08      	ldr	r2, [pc, #32]	; (800db4c <tcp_alloc+0x100>)
 800db2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	4a07      	ldr	r2, [pc, #28]	; (800db50 <tcp_alloc+0x104>)
 800db34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800db38:	68fb      	ldr	r3, [r7, #12]
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	24008158 	.word	0x24008158
 800db48:	2400816e 	.word	0x2400816e
 800db4c:	0800d805 	.word	0x0800d805
 800db50:	006ddd00 	.word	0x006ddd00

0800db54 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d107      	bne.n	800db72 <tcp_pcb_purge+0x1e>
 800db62:	4b21      	ldr	r3, [pc, #132]	; (800dbe8 <tcp_pcb_purge+0x94>)
 800db64:	f640 0251 	movw	r2, #2129	; 0x851
 800db68:	4920      	ldr	r1, [pc, #128]	; (800dbec <tcp_pcb_purge+0x98>)
 800db6a:	4821      	ldr	r0, [pc, #132]	; (800dbf0 <tcp_pcb_purge+0x9c>)
 800db6c:	f004 faca 	bl	8012104 <iprintf>
 800db70:	e037      	b.n	800dbe2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	7d1b      	ldrb	r3, [r3, #20]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d033      	beq.n	800dbe2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800db7e:	2b0a      	cmp	r3, #10
 800db80:	d02f      	beq.n	800dbe2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800db86:	2b01      	cmp	r3, #1
 800db88:	d02b      	beq.n	800dbe2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d007      	beq.n	800dba2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db96:	4618      	mov	r0, r3
 800db98:	f7fe fb7c 	bl	800c294 <pbuf_free>
      pcb->refused_data = NULL;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d002      	beq.n	800dbb0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 f986 	bl	800debc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbb6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7ff fdc7 	bl	800d750 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7ff fdc2 	bl	800d750 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	66da      	str	r2, [r3, #108]	; 0x6c
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	08014480 	.word	0x08014480
 800dbec:	08014af0 	.word	0x08014af0
 800dbf0:	080144e8 	.word	0x080144e8

0800dbf4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d106      	bne.n	800dc12 <tcp_pcb_remove+0x1e>
 800dc04:	4b3e      	ldr	r3, [pc, #248]	; (800dd00 <tcp_pcb_remove+0x10c>)
 800dc06:	f640 0283 	movw	r2, #2179	; 0x883
 800dc0a:	493e      	ldr	r1, [pc, #248]	; (800dd04 <tcp_pcb_remove+0x110>)
 800dc0c:	483e      	ldr	r0, [pc, #248]	; (800dd08 <tcp_pcb_remove+0x114>)
 800dc0e:	f004 fa79 	bl	8012104 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d106      	bne.n	800dc26 <tcp_pcb_remove+0x32>
 800dc18:	4b39      	ldr	r3, [pc, #228]	; (800dd00 <tcp_pcb_remove+0x10c>)
 800dc1a:	f640 0284 	movw	r2, #2180	; 0x884
 800dc1e:	493b      	ldr	r1, [pc, #236]	; (800dd0c <tcp_pcb_remove+0x118>)
 800dc20:	4839      	ldr	r0, [pc, #228]	; (800dd08 <tcp_pcb_remove+0x114>)
 800dc22:	f004 fa6f 	bl	8012104 <iprintf>

  TCP_RMV(pcblist, pcb);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	683a      	ldr	r2, [r7, #0]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d105      	bne.n	800dc3c <tcp_pcb_remove+0x48>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	68da      	ldr	r2, [r3, #12]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	601a      	str	r2, [r3, #0]
 800dc3a:	e013      	b.n	800dc64 <tcp_pcb_remove+0x70>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	60fb      	str	r3, [r7, #12]
 800dc42:	e00c      	b.n	800dc5e <tcp_pcb_remove+0x6a>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	683a      	ldr	r2, [r7, #0]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d104      	bne.n	800dc58 <tcp_pcb_remove+0x64>
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	68da      	ldr	r2, [r3, #12]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	60da      	str	r2, [r3, #12]
 800dc56:	e005      	b.n	800dc64 <tcp_pcb_remove+0x70>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	68db      	ldr	r3, [r3, #12]
 800dc5c:	60fb      	str	r3, [r7, #12]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d1ef      	bne.n	800dc44 <tcp_pcb_remove+0x50>
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	2200      	movs	r2, #0
 800dc68:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dc6a:	6838      	ldr	r0, [r7, #0]
 800dc6c:	f7ff ff72 	bl	800db54 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	7d1b      	ldrb	r3, [r3, #20]
 800dc74:	2b0a      	cmp	r3, #10
 800dc76:	d013      	beq.n	800dca0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d00f      	beq.n	800dca0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	8b5b      	ldrh	r3, [r3, #26]
 800dc84:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d009      	beq.n	800dca0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	8b5b      	ldrh	r3, [r3, #26]
 800dc90:	f043 0302 	orr.w	r3, r3, #2
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dc9a:	6838      	ldr	r0, [r7, #0]
 800dc9c:	f002 ff6e 	bl	8010b7c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	7d1b      	ldrb	r3, [r3, #20]
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d020      	beq.n	800dcea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d006      	beq.n	800dcbe <tcp_pcb_remove+0xca>
 800dcb0:	4b13      	ldr	r3, [pc, #76]	; (800dd00 <tcp_pcb_remove+0x10c>)
 800dcb2:	f640 0293 	movw	r2, #2195	; 0x893
 800dcb6:	4916      	ldr	r1, [pc, #88]	; (800dd10 <tcp_pcb_remove+0x11c>)
 800dcb8:	4813      	ldr	r0, [pc, #76]	; (800dd08 <tcp_pcb_remove+0x114>)
 800dcba:	f004 fa23 	bl	8012104 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d006      	beq.n	800dcd4 <tcp_pcb_remove+0xe0>
 800dcc6:	4b0e      	ldr	r3, [pc, #56]	; (800dd00 <tcp_pcb_remove+0x10c>)
 800dcc8:	f640 0294 	movw	r2, #2196	; 0x894
 800dccc:	4911      	ldr	r1, [pc, #68]	; (800dd14 <tcp_pcb_remove+0x120>)
 800dcce:	480e      	ldr	r0, [pc, #56]	; (800dd08 <tcp_pcb_remove+0x114>)
 800dcd0:	f004 fa18 	bl	8012104 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d006      	beq.n	800dcea <tcp_pcb_remove+0xf6>
 800dcdc:	4b08      	ldr	r3, [pc, #32]	; (800dd00 <tcp_pcb_remove+0x10c>)
 800dcde:	f640 0296 	movw	r2, #2198	; 0x896
 800dce2:	490d      	ldr	r1, [pc, #52]	; (800dd18 <tcp_pcb_remove+0x124>)
 800dce4:	4808      	ldr	r0, [pc, #32]	; (800dd08 <tcp_pcb_remove+0x114>)
 800dce6:	f004 fa0d 	bl	8012104 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	2200      	movs	r2, #0
 800dcee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dcf6:	bf00      	nop
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	08014480 	.word	0x08014480
 800dd04:	08014b0c 	.word	0x08014b0c
 800dd08:	080144e8 	.word	0x080144e8
 800dd0c:	08014b28 	.word	0x08014b28
 800dd10:	08014b48 	.word	0x08014b48
 800dd14:	08014b60 	.word	0x08014b60
 800dd18:	08014b7c 	.word	0x08014b7c

0800dd1c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d106      	bne.n	800dd38 <tcp_next_iss+0x1c>
 800dd2a:	4b0a      	ldr	r3, [pc, #40]	; (800dd54 <tcp_next_iss+0x38>)
 800dd2c:	f640 02af 	movw	r2, #2223	; 0x8af
 800dd30:	4909      	ldr	r1, [pc, #36]	; (800dd58 <tcp_next_iss+0x3c>)
 800dd32:	480a      	ldr	r0, [pc, #40]	; (800dd5c <tcp_next_iss+0x40>)
 800dd34:	f004 f9e6 	bl	8012104 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dd38:	4b09      	ldr	r3, [pc, #36]	; (800dd60 <tcp_next_iss+0x44>)
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	4b09      	ldr	r3, [pc, #36]	; (800dd64 <tcp_next_iss+0x48>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4413      	add	r3, r2
 800dd42:	4a07      	ldr	r2, [pc, #28]	; (800dd60 <tcp_next_iss+0x44>)
 800dd44:	6013      	str	r3, [r2, #0]
  return iss;
 800dd46:	4b06      	ldr	r3, [pc, #24]	; (800dd60 <tcp_next_iss+0x44>)
 800dd48:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	08014480 	.word	0x08014480
 800dd58:	08014b94 	.word	0x08014b94
 800dd5c:	080144e8 	.word	0x080144e8
 800dd60:	24000028 	.word	0x24000028
 800dd64:	24008158 	.word	0x24008158

0800dd68 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	4603      	mov	r3, r0
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
 800dd74:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d106      	bne.n	800dd8a <tcp_eff_send_mss_netif+0x22>
 800dd7c:	4b14      	ldr	r3, [pc, #80]	; (800ddd0 <tcp_eff_send_mss_netif+0x68>)
 800dd7e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dd82:	4914      	ldr	r1, [pc, #80]	; (800ddd4 <tcp_eff_send_mss_netif+0x6c>)
 800dd84:	4814      	ldr	r0, [pc, #80]	; (800ddd8 <tcp_eff_send_mss_netif+0x70>)
 800dd86:	f004 f9bd 	bl	8012104 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d101      	bne.n	800dd94 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dd90:	89fb      	ldrh	r3, [r7, #14]
 800dd92:	e019      	b.n	800ddc8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dd98:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dd9a:	8afb      	ldrh	r3, [r7, #22]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d012      	beq.n	800ddc6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dda0:	2328      	movs	r3, #40	; 0x28
 800dda2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dda4:	8afa      	ldrh	r2, [r7, #22]
 800dda6:	8abb      	ldrh	r3, [r7, #20]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d904      	bls.n	800ddb6 <tcp_eff_send_mss_netif+0x4e>
 800ddac:	8afa      	ldrh	r2, [r7, #22]
 800ddae:	8abb      	ldrh	r3, [r7, #20]
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	e000      	b.n	800ddb8 <tcp_eff_send_mss_netif+0x50>
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ddba:	8a7a      	ldrh	r2, [r7, #18]
 800ddbc:	89fb      	ldrh	r3, [r7, #14]
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	bf28      	it	cs
 800ddc2:	4613      	movcs	r3, r2
 800ddc4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ddc6:	89fb      	ldrh	r3, [r7, #14]
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3718      	adds	r7, #24
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	08014480 	.word	0x08014480
 800ddd4:	08014bb0 	.word	0x08014bb0
 800ddd8:	080144e8 	.word	0x080144e8

0800dddc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d119      	bne.n	800de24 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ddf0:	4b10      	ldr	r3, [pc, #64]	; (800de34 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ddf2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ddf6:	4910      	ldr	r1, [pc, #64]	; (800de38 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ddf8:	4810      	ldr	r0, [pc, #64]	; (800de3c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ddfa:	f004 f983 	bl	8012104 <iprintf>

  while (pcb != NULL) {
 800ddfe:	e011      	b.n	800de24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d108      	bne.n	800de1e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f7fe ffc6 	bl	800cda4 <tcp_abort>
      pcb = next;
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	60fb      	str	r3, [r7, #12]
 800de1c:	e002      	b.n	800de24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1ea      	bne.n	800de00 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800de2a:	bf00      	nop
 800de2c:	bf00      	nop
 800de2e:	3710      	adds	r7, #16
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	08014480 	.word	0x08014480
 800de38:	08014bd8 	.word	0x08014bd8
 800de3c:	080144e8 	.word	0x080144e8

0800de40 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d02a      	beq.n	800dea6 <tcp_netif_ip_addr_changed+0x66>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d026      	beq.n	800dea6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800de58:	4b15      	ldr	r3, [pc, #84]	; (800deb0 <tcp_netif_ip_addr_changed+0x70>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4619      	mov	r1, r3
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7ff ffbc 	bl	800dddc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800de64:	4b13      	ldr	r3, [pc, #76]	; (800deb4 <tcp_netif_ip_addr_changed+0x74>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4619      	mov	r1, r3
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7ff ffb6 	bl	800dddc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d017      	beq.n	800dea6 <tcp_netif_ip_addr_changed+0x66>
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d013      	beq.n	800dea6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de7e:	4b0e      	ldr	r3, [pc, #56]	; (800deb8 <tcp_netif_ip_addr_changed+0x78>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	60fb      	str	r3, [r7, #12]
 800de84:	e00c      	b.n	800dea0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d103      	bne.n	800de9a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	60fb      	str	r3, [r7, #12]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1ef      	bne.n	800de86 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dea6:	bf00      	nop
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	24008164 	.word	0x24008164
 800deb4:	2400815c 	.word	0x2400815c
 800deb8:	24008160 	.word	0x24008160

0800debc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d007      	beq.n	800dedc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7ff fc3d 	bl	800d750 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2200      	movs	r2, #0
 800deda:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dedc:	bf00      	nop
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dee4:	b590      	push	{r4, r7, lr}
 800dee6:	b08d      	sub	sp, #52	; 0x34
 800dee8:	af04      	add	r7, sp, #16
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d105      	bne.n	800df00 <tcp_input+0x1c>
 800def4:	4b9b      	ldr	r3, [pc, #620]	; (800e164 <tcp_input+0x280>)
 800def6:	2283      	movs	r2, #131	; 0x83
 800def8:	499b      	ldr	r1, [pc, #620]	; (800e168 <tcp_input+0x284>)
 800defa:	489c      	ldr	r0, [pc, #624]	; (800e16c <tcp_input+0x288>)
 800defc:	f004 f902 	bl	8012104 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	4a9a      	ldr	r2, [pc, #616]	; (800e170 <tcp_input+0x28c>)
 800df06:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	895b      	ldrh	r3, [r3, #10]
 800df0c:	2b13      	cmp	r3, #19
 800df0e:	f240 83d1 	bls.w	800e6b4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800df12:	4b98      	ldr	r3, [pc, #608]	; (800e174 <tcp_input+0x290>)
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	4a97      	ldr	r2, [pc, #604]	; (800e174 <tcp_input+0x290>)
 800df18:	6812      	ldr	r2, [r2, #0]
 800df1a:	4611      	mov	r1, r2
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fc f823 	bl	8009f68 <ip4_addr_isbroadcast_u32>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	f040 83c7 	bne.w	800e6b8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800df2a:	4b92      	ldr	r3, [pc, #584]	; (800e174 <tcp_input+0x290>)
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800df32:	2be0      	cmp	r3, #224	; 0xe0
 800df34:	f000 83c0 	beq.w	800e6b8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800df38:	4b8d      	ldr	r3, [pc, #564]	; (800e170 <tcp_input+0x28c>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	899b      	ldrh	r3, [r3, #12]
 800df3e:	b29b      	uxth	r3, r3
 800df40:	4618      	mov	r0, r3
 800df42:	f7fa faa5 	bl	8008490 <lwip_htons>
 800df46:	4603      	mov	r3, r0
 800df48:	0b1b      	lsrs	r3, r3, #12
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800df52:	7cbb      	ldrb	r3, [r7, #18]
 800df54:	2b13      	cmp	r3, #19
 800df56:	f240 83b1 	bls.w	800e6bc <tcp_input+0x7d8>
 800df5a:	7cbb      	ldrb	r3, [r7, #18]
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	891b      	ldrh	r3, [r3, #8]
 800df62:	429a      	cmp	r2, r3
 800df64:	f200 83aa 	bhi.w	800e6bc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800df68:	7cbb      	ldrb	r3, [r7, #18]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	3b14      	subs	r3, #20
 800df6e:	b29a      	uxth	r2, r3
 800df70:	4b81      	ldr	r3, [pc, #516]	; (800e178 <tcp_input+0x294>)
 800df72:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800df74:	4b81      	ldr	r3, [pc, #516]	; (800e17c <tcp_input+0x298>)
 800df76:	2200      	movs	r2, #0
 800df78:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	895a      	ldrh	r2, [r3, #10]
 800df7e:	7cbb      	ldrb	r3, [r7, #18]
 800df80:	b29b      	uxth	r3, r3
 800df82:	429a      	cmp	r2, r3
 800df84:	d309      	bcc.n	800df9a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800df86:	4b7c      	ldr	r3, [pc, #496]	; (800e178 <tcp_input+0x294>)
 800df88:	881a      	ldrh	r2, [r3, #0]
 800df8a:	4b7d      	ldr	r3, [pc, #500]	; (800e180 <tcp_input+0x29c>)
 800df8c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800df8e:	7cbb      	ldrb	r3, [r7, #18]
 800df90:	4619      	mov	r1, r3
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7fe f8f8 	bl	800c188 <pbuf_remove_header>
 800df98:	e04e      	b.n	800e038 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d105      	bne.n	800dfae <tcp_input+0xca>
 800dfa2:	4b70      	ldr	r3, [pc, #448]	; (800e164 <tcp_input+0x280>)
 800dfa4:	22c2      	movs	r2, #194	; 0xc2
 800dfa6:	4977      	ldr	r1, [pc, #476]	; (800e184 <tcp_input+0x2a0>)
 800dfa8:	4870      	ldr	r0, [pc, #448]	; (800e16c <tcp_input+0x288>)
 800dfaa:	f004 f8ab 	bl	8012104 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dfae:	2114      	movs	r1, #20
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f7fe f8e9 	bl	800c188 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	895a      	ldrh	r2, [r3, #10]
 800dfba:	4b71      	ldr	r3, [pc, #452]	; (800e180 <tcp_input+0x29c>)
 800dfbc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dfbe:	4b6e      	ldr	r3, [pc, #440]	; (800e178 <tcp_input+0x294>)
 800dfc0:	881a      	ldrh	r2, [r3, #0]
 800dfc2:	4b6f      	ldr	r3, [pc, #444]	; (800e180 <tcp_input+0x29c>)
 800dfc4:	881b      	ldrh	r3, [r3, #0]
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dfca:	4b6d      	ldr	r3, [pc, #436]	; (800e180 <tcp_input+0x29c>)
 800dfcc:	881b      	ldrh	r3, [r3, #0]
 800dfce:	4619      	mov	r1, r3
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7fe f8d9 	bl	800c188 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	895b      	ldrh	r3, [r3, #10]
 800dfdc:	8a3a      	ldrh	r2, [r7, #16]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	f200 836e 	bhi.w	800e6c0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	4a64      	ldr	r2, [pc, #400]	; (800e17c <tcp_input+0x298>)
 800dfec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	8a3a      	ldrh	r2, [r7, #16]
 800dff4:	4611      	mov	r1, r2
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fe f8c6 	bl	800c188 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	891a      	ldrh	r2, [r3, #8]
 800e000:	8a3b      	ldrh	r3, [r7, #16]
 800e002:	1ad3      	subs	r3, r2, r3
 800e004:	b29a      	uxth	r2, r3
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	895b      	ldrh	r3, [r3, #10]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d005      	beq.n	800e01e <tcp_input+0x13a>
 800e012:	4b54      	ldr	r3, [pc, #336]	; (800e164 <tcp_input+0x280>)
 800e014:	22df      	movs	r2, #223	; 0xdf
 800e016:	495c      	ldr	r1, [pc, #368]	; (800e188 <tcp_input+0x2a4>)
 800e018:	4854      	ldr	r0, [pc, #336]	; (800e16c <tcp_input+0x288>)
 800e01a:	f004 f873 	bl	8012104 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	891a      	ldrh	r2, [r3, #8]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	891b      	ldrh	r3, [r3, #8]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d005      	beq.n	800e038 <tcp_input+0x154>
 800e02c:	4b4d      	ldr	r3, [pc, #308]	; (800e164 <tcp_input+0x280>)
 800e02e:	22e0      	movs	r2, #224	; 0xe0
 800e030:	4956      	ldr	r1, [pc, #344]	; (800e18c <tcp_input+0x2a8>)
 800e032:	484e      	ldr	r0, [pc, #312]	; (800e16c <tcp_input+0x288>)
 800e034:	f004 f866 	bl	8012104 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e038:	4b4d      	ldr	r3, [pc, #308]	; (800e170 <tcp_input+0x28c>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	b29b      	uxth	r3, r3
 800e040:	4a4b      	ldr	r2, [pc, #300]	; (800e170 <tcp_input+0x28c>)
 800e042:	6814      	ldr	r4, [r2, #0]
 800e044:	4618      	mov	r0, r3
 800e046:	f7fa fa23 	bl	8008490 <lwip_htons>
 800e04a:	4603      	mov	r3, r0
 800e04c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e04e:	4b48      	ldr	r3, [pc, #288]	; (800e170 <tcp_input+0x28c>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	885b      	ldrh	r3, [r3, #2]
 800e054:	b29b      	uxth	r3, r3
 800e056:	4a46      	ldr	r2, [pc, #280]	; (800e170 <tcp_input+0x28c>)
 800e058:	6814      	ldr	r4, [r2, #0]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fa fa18 	bl	8008490 <lwip_htons>
 800e060:	4603      	mov	r3, r0
 800e062:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e064:	4b42      	ldr	r3, [pc, #264]	; (800e170 <tcp_input+0x28c>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	4a41      	ldr	r2, [pc, #260]	; (800e170 <tcp_input+0x28c>)
 800e06c:	6814      	ldr	r4, [r2, #0]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fa fa23 	bl	80084ba <lwip_htonl>
 800e074:	4603      	mov	r3, r0
 800e076:	6063      	str	r3, [r4, #4]
 800e078:	6863      	ldr	r3, [r4, #4]
 800e07a:	4a45      	ldr	r2, [pc, #276]	; (800e190 <tcp_input+0x2ac>)
 800e07c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e07e:	4b3c      	ldr	r3, [pc, #240]	; (800e170 <tcp_input+0x28c>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	4a3a      	ldr	r2, [pc, #232]	; (800e170 <tcp_input+0x28c>)
 800e086:	6814      	ldr	r4, [r2, #0]
 800e088:	4618      	mov	r0, r3
 800e08a:	f7fa fa16 	bl	80084ba <lwip_htonl>
 800e08e:	4603      	mov	r3, r0
 800e090:	60a3      	str	r3, [r4, #8]
 800e092:	68a3      	ldr	r3, [r4, #8]
 800e094:	4a3f      	ldr	r2, [pc, #252]	; (800e194 <tcp_input+0x2b0>)
 800e096:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e098:	4b35      	ldr	r3, [pc, #212]	; (800e170 <tcp_input+0x28c>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	89db      	ldrh	r3, [r3, #14]
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	4a33      	ldr	r2, [pc, #204]	; (800e170 <tcp_input+0x28c>)
 800e0a2:	6814      	ldr	r4, [r2, #0]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fa f9f3 	bl	8008490 <lwip_htons>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e0ae:	4b30      	ldr	r3, [pc, #192]	; (800e170 <tcp_input+0x28c>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	899b      	ldrh	r3, [r3, #12]
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fa f9ea 	bl	8008490 <lwip_htons>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0c4:	b2da      	uxtb	r2, r3
 800e0c6:	4b34      	ldr	r3, [pc, #208]	; (800e198 <tcp_input+0x2b4>)
 800e0c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	891a      	ldrh	r2, [r3, #8]
 800e0ce:	4b33      	ldr	r3, [pc, #204]	; (800e19c <tcp_input+0x2b8>)
 800e0d0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e0d2:	4b31      	ldr	r3, [pc, #196]	; (800e198 <tcp_input+0x2b4>)
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	f003 0303 	and.w	r3, r3, #3
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d00c      	beq.n	800e0f8 <tcp_input+0x214>
    tcplen++;
 800e0de:	4b2f      	ldr	r3, [pc, #188]	; (800e19c <tcp_input+0x2b8>)
 800e0e0:	881b      	ldrh	r3, [r3, #0]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	4b2d      	ldr	r3, [pc, #180]	; (800e19c <tcp_input+0x2b8>)
 800e0e8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	891a      	ldrh	r2, [r3, #8]
 800e0ee:	4b2b      	ldr	r3, [pc, #172]	; (800e19c <tcp_input+0x2b8>)
 800e0f0:	881b      	ldrh	r3, [r3, #0]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	f200 82e6 	bhi.w	800e6c4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0fc:	4b28      	ldr	r3, [pc, #160]	; (800e1a0 <tcp_input+0x2bc>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	61fb      	str	r3, [r7, #28]
 800e102:	e09d      	b.n	800e240 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	7d1b      	ldrb	r3, [r3, #20]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d105      	bne.n	800e118 <tcp_input+0x234>
 800e10c:	4b15      	ldr	r3, [pc, #84]	; (800e164 <tcp_input+0x280>)
 800e10e:	22fb      	movs	r2, #251	; 0xfb
 800e110:	4924      	ldr	r1, [pc, #144]	; (800e1a4 <tcp_input+0x2c0>)
 800e112:	4816      	ldr	r0, [pc, #88]	; (800e16c <tcp_input+0x288>)
 800e114:	f003 fff6 	bl	8012104 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	7d1b      	ldrb	r3, [r3, #20]
 800e11c:	2b0a      	cmp	r3, #10
 800e11e:	d105      	bne.n	800e12c <tcp_input+0x248>
 800e120:	4b10      	ldr	r3, [pc, #64]	; (800e164 <tcp_input+0x280>)
 800e122:	22fc      	movs	r2, #252	; 0xfc
 800e124:	4920      	ldr	r1, [pc, #128]	; (800e1a8 <tcp_input+0x2c4>)
 800e126:	4811      	ldr	r0, [pc, #68]	; (800e16c <tcp_input+0x288>)
 800e128:	f003 ffec 	bl	8012104 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	7d1b      	ldrb	r3, [r3, #20]
 800e130:	2b01      	cmp	r3, #1
 800e132:	d105      	bne.n	800e140 <tcp_input+0x25c>
 800e134:	4b0b      	ldr	r3, [pc, #44]	; (800e164 <tcp_input+0x280>)
 800e136:	22fd      	movs	r2, #253	; 0xfd
 800e138:	491c      	ldr	r1, [pc, #112]	; (800e1ac <tcp_input+0x2c8>)
 800e13a:	480c      	ldr	r0, [pc, #48]	; (800e16c <tcp_input+0x288>)
 800e13c:	f003 ffe2 	bl	8012104 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	7a1b      	ldrb	r3, [r3, #8]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d033      	beq.n	800e1b0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	7a1a      	ldrb	r2, [r3, #8]
 800e14c:	4b09      	ldr	r3, [pc, #36]	; (800e174 <tcp_input+0x290>)
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e154:	3301      	adds	r3, #1
 800e156:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e158:	429a      	cmp	r2, r3
 800e15a:	d029      	beq.n	800e1b0 <tcp_input+0x2cc>
      prev = pcb;
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	61bb      	str	r3, [r7, #24]
      continue;
 800e160:	e06b      	b.n	800e23a <tcp_input+0x356>
 800e162:	bf00      	nop
 800e164:	08014c0c 	.word	0x08014c0c
 800e168:	08014c60 	.word	0x08014c60
 800e16c:	08014c78 	.word	0x08014c78
 800e170:	24008180 	.word	0x24008180
 800e174:	24005230 	.word	0x24005230
 800e178:	24008184 	.word	0x24008184
 800e17c:	24008188 	.word	0x24008188
 800e180:	24008186 	.word	0x24008186
 800e184:	08014ca0 	.word	0x08014ca0
 800e188:	08014cb0 	.word	0x08014cb0
 800e18c:	08014cbc 	.word	0x08014cbc
 800e190:	24008190 	.word	0x24008190
 800e194:	24008194 	.word	0x24008194
 800e198:	2400819c 	.word	0x2400819c
 800e19c:	2400819a 	.word	0x2400819a
 800e1a0:	24008164 	.word	0x24008164
 800e1a4:	08014cdc 	.word	0x08014cdc
 800e1a8:	08014d04 	.word	0x08014d04
 800e1ac:	08014d30 	.word	0x08014d30
    }

    if (pcb->remote_port == tcphdr->src &&
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	8b1a      	ldrh	r2, [r3, #24]
 800e1b4:	4b72      	ldr	r3, [pc, #456]	; (800e380 <tcp_input+0x49c>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	881b      	ldrh	r3, [r3, #0]
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d13a      	bne.n	800e236 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	8ada      	ldrh	r2, [r3, #22]
 800e1c4:	4b6e      	ldr	r3, [pc, #440]	; (800e380 <tcp_input+0x49c>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	885b      	ldrh	r3, [r3, #2]
 800e1ca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d132      	bne.n	800e236 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	685a      	ldr	r2, [r3, #4]
 800e1d4:	4b6b      	ldr	r3, [pc, #428]	; (800e384 <tcp_input+0x4a0>)
 800e1d6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d12c      	bne.n	800e236 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	4b68      	ldr	r3, [pc, #416]	; (800e384 <tcp_input+0x4a0>)
 800e1e2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d126      	bne.n	800e236 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	69fa      	ldr	r2, [r7, #28]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d106      	bne.n	800e200 <tcp_input+0x31c>
 800e1f2:	4b65      	ldr	r3, [pc, #404]	; (800e388 <tcp_input+0x4a4>)
 800e1f4:	f240 120d 	movw	r2, #269	; 0x10d
 800e1f8:	4964      	ldr	r1, [pc, #400]	; (800e38c <tcp_input+0x4a8>)
 800e1fa:	4865      	ldr	r0, [pc, #404]	; (800e390 <tcp_input+0x4ac>)
 800e1fc:	f003 ff82 	bl	8012104 <iprintf>
      if (prev != NULL) {
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00a      	beq.n	800e21c <tcp_input+0x338>
        prev->next = pcb->next;
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	68da      	ldr	r2, [r3, #12]
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e20e:	4b61      	ldr	r3, [pc, #388]	; (800e394 <tcp_input+0x4b0>)
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e216:	4a5f      	ldr	r2, [pc, #380]	; (800e394 <tcp_input+0x4b0>)
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	69fa      	ldr	r2, [r7, #28]
 800e222:	429a      	cmp	r2, r3
 800e224:	d111      	bne.n	800e24a <tcp_input+0x366>
 800e226:	4b58      	ldr	r3, [pc, #352]	; (800e388 <tcp_input+0x4a4>)
 800e228:	f240 1215 	movw	r2, #277	; 0x115
 800e22c:	495a      	ldr	r1, [pc, #360]	; (800e398 <tcp_input+0x4b4>)
 800e22e:	4858      	ldr	r0, [pc, #352]	; (800e390 <tcp_input+0x4ac>)
 800e230:	f003 ff68 	bl	8012104 <iprintf>
      break;
 800e234:	e009      	b.n	800e24a <tcp_input+0x366>
    }
    prev = pcb;
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e23a:	69fb      	ldr	r3, [r7, #28]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	61fb      	str	r3, [r7, #28]
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	2b00      	cmp	r3, #0
 800e244:	f47f af5e 	bne.w	800e104 <tcp_input+0x220>
 800e248:	e000      	b.n	800e24c <tcp_input+0x368>
      break;
 800e24a:	bf00      	nop
  }

  if (pcb == NULL) {
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	f040 80aa 	bne.w	800e3a8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e254:	4b51      	ldr	r3, [pc, #324]	; (800e39c <tcp_input+0x4b8>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	61fb      	str	r3, [r7, #28]
 800e25a:	e03f      	b.n	800e2dc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	7d1b      	ldrb	r3, [r3, #20]
 800e260:	2b0a      	cmp	r3, #10
 800e262:	d006      	beq.n	800e272 <tcp_input+0x38e>
 800e264:	4b48      	ldr	r3, [pc, #288]	; (800e388 <tcp_input+0x4a4>)
 800e266:	f240 121f 	movw	r2, #287	; 0x11f
 800e26a:	494d      	ldr	r1, [pc, #308]	; (800e3a0 <tcp_input+0x4bc>)
 800e26c:	4848      	ldr	r0, [pc, #288]	; (800e390 <tcp_input+0x4ac>)
 800e26e:	f003 ff49 	bl	8012104 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	7a1b      	ldrb	r3, [r3, #8]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d009      	beq.n	800e28e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	7a1a      	ldrb	r2, [r3, #8]
 800e27e:	4b41      	ldr	r3, [pc, #260]	; (800e384 <tcp_input+0x4a0>)
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e286:	3301      	adds	r3, #1
 800e288:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d122      	bne.n	800e2d4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	8b1a      	ldrh	r2, [r3, #24]
 800e292:	4b3b      	ldr	r3, [pc, #236]	; (800e380 <tcp_input+0x49c>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d11b      	bne.n	800e2d6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	8ada      	ldrh	r2, [r3, #22]
 800e2a2:	4b37      	ldr	r3, [pc, #220]	; (800e380 <tcp_input+0x49c>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	885b      	ldrh	r3, [r3, #2]
 800e2a8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d113      	bne.n	800e2d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	685a      	ldr	r2, [r3, #4]
 800e2b2:	4b34      	ldr	r3, [pc, #208]	; (800e384 <tcp_input+0x4a0>)
 800e2b4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d10d      	bne.n	800e2d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	4b31      	ldr	r3, [pc, #196]	; (800e384 <tcp_input+0x4a0>)
 800e2c0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d107      	bne.n	800e2d6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e2c6:	69f8      	ldr	r0, [r7, #28]
 800e2c8:	f000 fb56 	bl	800e978 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7fd ffe1 	bl	800c294 <pbuf_free>
        return;
 800e2d2:	e1fd      	b.n	800e6d0 <tcp_input+0x7ec>
        continue;
 800e2d4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	61fb      	str	r3, [r7, #28]
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1bc      	bne.n	800e25c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e2e6:	4b2f      	ldr	r3, [pc, #188]	; (800e3a4 <tcp_input+0x4c0>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	617b      	str	r3, [r7, #20]
 800e2ec:	e02a      	b.n	800e344 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	7a1b      	ldrb	r3, [r3, #8]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00c      	beq.n	800e310 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	7a1a      	ldrb	r2, [r3, #8]
 800e2fa:	4b22      	ldr	r3, [pc, #136]	; (800e384 <tcp_input+0x4a0>)
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e302:	3301      	adds	r3, #1
 800e304:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e306:	429a      	cmp	r2, r3
 800e308:	d002      	beq.n	800e310 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	61bb      	str	r3, [r7, #24]
        continue;
 800e30e:	e016      	b.n	800e33e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	8ada      	ldrh	r2, [r3, #22]
 800e314:	4b1a      	ldr	r3, [pc, #104]	; (800e380 <tcp_input+0x49c>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	885b      	ldrh	r3, [r3, #2]
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d10c      	bne.n	800e33a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	4b17      	ldr	r3, [pc, #92]	; (800e384 <tcp_input+0x4a0>)
 800e326:	695b      	ldr	r3, [r3, #20]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d00f      	beq.n	800e34c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00d      	beq.n	800e34e <tcp_input+0x46a>
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d009      	beq.n	800e34e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	68db      	ldr	r3, [r3, #12]
 800e342:	617b      	str	r3, [r7, #20]
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1d1      	bne.n	800e2ee <tcp_input+0x40a>
 800e34a:	e000      	b.n	800e34e <tcp_input+0x46a>
            break;
 800e34c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d029      	beq.n	800e3a8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00a      	beq.n	800e370 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	68da      	ldr	r2, [r3, #12]
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e362:	4b10      	ldr	r3, [pc, #64]	; (800e3a4 <tcp_input+0x4c0>)
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e36a:	4a0e      	ldr	r2, [pc, #56]	; (800e3a4 <tcp_input+0x4c0>)
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e370:	6978      	ldr	r0, [r7, #20]
 800e372:	f000 fa03 	bl	800e77c <tcp_listen_input>
      }
      pbuf_free(p);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f7fd ff8c 	bl	800c294 <pbuf_free>
      return;
 800e37c:	e1a8      	b.n	800e6d0 <tcp_input+0x7ec>
 800e37e:	bf00      	nop
 800e380:	24008180 	.word	0x24008180
 800e384:	24005230 	.word	0x24005230
 800e388:	08014c0c 	.word	0x08014c0c
 800e38c:	08014d58 	.word	0x08014d58
 800e390:	08014c78 	.word	0x08014c78
 800e394:	24008164 	.word	0x24008164
 800e398:	08014d84 	.word	0x08014d84
 800e39c:	24008168 	.word	0x24008168
 800e3a0:	08014db0 	.word	0x08014db0
 800e3a4:	24008160 	.word	0x24008160
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f000 8158 	beq.w	800e660 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e3b0:	4b95      	ldr	r3, [pc, #596]	; (800e608 <tcp_input+0x724>)
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	891a      	ldrh	r2, [r3, #8]
 800e3ba:	4b93      	ldr	r3, [pc, #588]	; (800e608 <tcp_input+0x724>)
 800e3bc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e3be:	4a92      	ldr	r2, [pc, #584]	; (800e608 <tcp_input+0x724>)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e3c4:	4b91      	ldr	r3, [pc, #580]	; (800e60c <tcp_input+0x728>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a8f      	ldr	r2, [pc, #572]	; (800e608 <tcp_input+0x724>)
 800e3ca:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e3cc:	4b90      	ldr	r3, [pc, #576]	; (800e610 <tcp_input+0x72c>)
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e3d2:	4b90      	ldr	r3, [pc, #576]	; (800e614 <tcp_input+0x730>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e3d8:	4b8f      	ldr	r3, [pc, #572]	; (800e618 <tcp_input+0x734>)
 800e3da:	2200      	movs	r2, #0
 800e3dc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e3de:	4b8f      	ldr	r3, [pc, #572]	; (800e61c <tcp_input+0x738>)
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	f003 0308 	and.w	r3, r3, #8
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d006      	beq.n	800e3f8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	7b5b      	ldrb	r3, [r3, #13]
 800e3ee:	f043 0301 	orr.w	r3, r3, #1
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d017      	beq.n	800e430 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e400:	69f8      	ldr	r0, [r7, #28]
 800e402:	f7ff f929 	bl	800d658 <tcp_process_refused_data>
 800e406:	4603      	mov	r3, r0
 800e408:	f113 0f0d 	cmn.w	r3, #13
 800e40c:	d007      	beq.n	800e41e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00c      	beq.n	800e430 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e416:	4b82      	ldr	r3, [pc, #520]	; (800e620 <tcp_input+0x73c>)
 800e418:	881b      	ldrh	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d008      	beq.n	800e430 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e422:	2b00      	cmp	r3, #0
 800e424:	f040 80e3 	bne.w	800e5ee <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e428:	69f8      	ldr	r0, [r7, #28]
 800e42a:	f003 f9ad 	bl	8011788 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e42e:	e0de      	b.n	800e5ee <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e430:	4a7c      	ldr	r2, [pc, #496]	; (800e624 <tcp_input+0x740>)
 800e432:	69fb      	ldr	r3, [r7, #28]
 800e434:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e436:	69f8      	ldr	r0, [r7, #28]
 800e438:	f000 fb18 	bl	800ea6c <tcp_process>
 800e43c:	4603      	mov	r3, r0
 800e43e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e440:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e444:	f113 0f0d 	cmn.w	r3, #13
 800e448:	f000 80d3 	beq.w	800e5f2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e44c:	4b71      	ldr	r3, [pc, #452]	; (800e614 <tcp_input+0x730>)
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	f003 0308 	and.w	r3, r3, #8
 800e454:	2b00      	cmp	r3, #0
 800e456:	d015      	beq.n	800e484 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d008      	beq.n	800e474 <tcp_input+0x590>
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e468:	69fa      	ldr	r2, [r7, #28]
 800e46a:	6912      	ldr	r2, [r2, #16]
 800e46c:	f06f 010d 	mvn.w	r1, #13
 800e470:	4610      	mov	r0, r2
 800e472:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e474:	69f9      	ldr	r1, [r7, #28]
 800e476:	486c      	ldr	r0, [pc, #432]	; (800e628 <tcp_input+0x744>)
 800e478:	f7ff fbbc 	bl	800dbf4 <tcp_pcb_remove>
        tcp_free(pcb);
 800e47c:	69f8      	ldr	r0, [r7, #28]
 800e47e:	f7fe f9a9 	bl	800c7d4 <tcp_free>
 800e482:	e0da      	b.n	800e63a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e484:	2300      	movs	r3, #0
 800e486:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e488:	4b63      	ldr	r3, [pc, #396]	; (800e618 <tcp_input+0x734>)
 800e48a:	881b      	ldrh	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d01d      	beq.n	800e4cc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e490:	4b61      	ldr	r3, [pc, #388]	; (800e618 <tcp_input+0x734>)
 800e492:	881b      	ldrh	r3, [r3, #0]
 800e494:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00a      	beq.n	800e4b6 <tcp_input+0x5d2>
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4a6:	69fa      	ldr	r2, [r7, #28]
 800e4a8:	6910      	ldr	r0, [r2, #16]
 800e4aa:	89fa      	ldrh	r2, [r7, #14]
 800e4ac:	69f9      	ldr	r1, [r7, #28]
 800e4ae:	4798      	blx	r3
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	74fb      	strb	r3, [r7, #19]
 800e4b4:	e001      	b.n	800e4ba <tcp_input+0x5d6>
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e4ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4be:	f113 0f0d 	cmn.w	r3, #13
 800e4c2:	f000 8098 	beq.w	800e5f6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e4c6:	4b54      	ldr	r3, [pc, #336]	; (800e618 <tcp_input+0x734>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e4cc:	69f8      	ldr	r0, [r7, #28]
 800e4ce:	f000 f915 	bl	800e6fc <tcp_input_delayed_close>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f040 8090 	bne.w	800e5fa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e4da:	4b4d      	ldr	r3, [pc, #308]	; (800e610 <tcp_input+0x72c>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d041      	beq.n	800e566 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d006      	beq.n	800e4f8 <tcp_input+0x614>
 800e4ea:	4b50      	ldr	r3, [pc, #320]	; (800e62c <tcp_input+0x748>)
 800e4ec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e4f0:	494f      	ldr	r1, [pc, #316]	; (800e630 <tcp_input+0x74c>)
 800e4f2:	4850      	ldr	r0, [pc, #320]	; (800e634 <tcp_input+0x750>)
 800e4f4:	f003 fe06 	bl	8012104 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	8b5b      	ldrh	r3, [r3, #26]
 800e4fc:	f003 0310 	and.w	r3, r3, #16
 800e500:	2b00      	cmp	r3, #0
 800e502:	d008      	beq.n	800e516 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e504:	4b42      	ldr	r3, [pc, #264]	; (800e610 <tcp_input+0x72c>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fd fec3 	bl	800c294 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e50e:	69f8      	ldr	r0, [r7, #28]
 800e510:	f7fe fc48 	bl	800cda4 <tcp_abort>
            goto aborted;
 800e514:	e091      	b.n	800e63a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d00c      	beq.n	800e53a <tcp_input+0x656>
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	6918      	ldr	r0, [r3, #16]
 800e52a:	4b39      	ldr	r3, [pc, #228]	; (800e610 <tcp_input+0x72c>)
 800e52c:	681a      	ldr	r2, [r3, #0]
 800e52e:	2300      	movs	r3, #0
 800e530:	69f9      	ldr	r1, [r7, #28]
 800e532:	47a0      	blx	r4
 800e534:	4603      	mov	r3, r0
 800e536:	74fb      	strb	r3, [r7, #19]
 800e538:	e008      	b.n	800e54c <tcp_input+0x668>
 800e53a:	4b35      	ldr	r3, [pc, #212]	; (800e610 <tcp_input+0x72c>)
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	2300      	movs	r3, #0
 800e540:	69f9      	ldr	r1, [r7, #28]
 800e542:	2000      	movs	r0, #0
 800e544:	f7ff f95e 	bl	800d804 <tcp_recv_null>
 800e548:	4603      	mov	r3, r0
 800e54a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e54c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e550:	f113 0f0d 	cmn.w	r3, #13
 800e554:	d053      	beq.n	800e5fe <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e556:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d003      	beq.n	800e566 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e55e:	4b2c      	ldr	r3, [pc, #176]	; (800e610 <tcp_input+0x72c>)
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e566:	4b2b      	ldr	r3, [pc, #172]	; (800e614 <tcp_input+0x730>)
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	f003 0320 	and.w	r3, r3, #32
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d030      	beq.n	800e5d4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e576:	2b00      	cmp	r3, #0
 800e578:	d009      	beq.n	800e58e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e57a:	69fb      	ldr	r3, [r7, #28]
 800e57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e57e:	7b5a      	ldrb	r2, [r3, #13]
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e584:	f042 0220 	orr.w	r2, r2, #32
 800e588:	b2d2      	uxtb	r2, r2
 800e58a:	735a      	strb	r2, [r3, #13]
 800e58c:	e022      	b.n	800e5d4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e592:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e596:	d005      	beq.n	800e5a4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e59c:	3301      	adds	r3, #1
 800e59e:	b29a      	uxth	r2, r3
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00b      	beq.n	800e5c6 <tcp_input+0x6e2>
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	6918      	ldr	r0, [r3, #16]
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	69f9      	ldr	r1, [r7, #28]
 800e5be:	47a0      	blx	r4
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	74fb      	strb	r3, [r7, #19]
 800e5c4:	e001      	b.n	800e5ca <tcp_input+0x6e6>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e5ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5ce:	f113 0f0d 	cmn.w	r3, #13
 800e5d2:	d016      	beq.n	800e602 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e5d4:	4b13      	ldr	r3, [pc, #76]	; (800e624 <tcp_input+0x740>)
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e5da:	69f8      	ldr	r0, [r7, #28]
 800e5dc:	f000 f88e 	bl	800e6fc <tcp_input_delayed_close>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d128      	bne.n	800e638 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e5e6:	69f8      	ldr	r0, [r7, #28]
 800e5e8:	f002 fac8 	bl	8010b7c <tcp_output>
 800e5ec:	e025      	b.n	800e63a <tcp_input+0x756>
        goto aborted;
 800e5ee:	bf00      	nop
 800e5f0:	e023      	b.n	800e63a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e5f2:	bf00      	nop
 800e5f4:	e021      	b.n	800e63a <tcp_input+0x756>
              goto aborted;
 800e5f6:	bf00      	nop
 800e5f8:	e01f      	b.n	800e63a <tcp_input+0x756>
          goto aborted;
 800e5fa:	bf00      	nop
 800e5fc:	e01d      	b.n	800e63a <tcp_input+0x756>
            goto aborted;
 800e5fe:	bf00      	nop
 800e600:	e01b      	b.n	800e63a <tcp_input+0x756>
              goto aborted;
 800e602:	bf00      	nop
 800e604:	e019      	b.n	800e63a <tcp_input+0x756>
 800e606:	bf00      	nop
 800e608:	24008170 	.word	0x24008170
 800e60c:	24008180 	.word	0x24008180
 800e610:	240081a0 	.word	0x240081a0
 800e614:	2400819d 	.word	0x2400819d
 800e618:	24008198 	.word	0x24008198
 800e61c:	2400819c 	.word	0x2400819c
 800e620:	2400819a 	.word	0x2400819a
 800e624:	240081a4 	.word	0x240081a4
 800e628:	24008164 	.word	0x24008164
 800e62c:	08014c0c 	.word	0x08014c0c
 800e630:	08014de0 	.word	0x08014de0
 800e634:	08014c78 	.word	0x08014c78
          goto aborted;
 800e638:	bf00      	nop
    tcp_input_pcb = NULL;
 800e63a:	4b27      	ldr	r3, [pc, #156]	; (800e6d8 <tcp_input+0x7f4>)
 800e63c:	2200      	movs	r2, #0
 800e63e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e640:	4b26      	ldr	r3, [pc, #152]	; (800e6dc <tcp_input+0x7f8>)
 800e642:	2200      	movs	r2, #0
 800e644:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e646:	4b26      	ldr	r3, [pc, #152]	; (800e6e0 <tcp_input+0x7fc>)
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d03f      	beq.n	800e6ce <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e64e:	4b24      	ldr	r3, [pc, #144]	; (800e6e0 <tcp_input+0x7fc>)
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	4618      	mov	r0, r3
 800e654:	f7fd fe1e 	bl	800c294 <pbuf_free>
      inseg.p = NULL;
 800e658:	4b21      	ldr	r3, [pc, #132]	; (800e6e0 <tcp_input+0x7fc>)
 800e65a:	2200      	movs	r2, #0
 800e65c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e65e:	e036      	b.n	800e6ce <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e660:	4b20      	ldr	r3, [pc, #128]	; (800e6e4 <tcp_input+0x800>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	899b      	ldrh	r3, [r3, #12]
 800e666:	b29b      	uxth	r3, r3
 800e668:	4618      	mov	r0, r3
 800e66a:	f7f9 ff11 	bl	8008490 <lwip_htons>
 800e66e:	4603      	mov	r3, r0
 800e670:	b2db      	uxtb	r3, r3
 800e672:	f003 0304 	and.w	r3, r3, #4
 800e676:	2b00      	cmp	r3, #0
 800e678:	d118      	bne.n	800e6ac <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e67a:	4b1b      	ldr	r3, [pc, #108]	; (800e6e8 <tcp_input+0x804>)
 800e67c:	6819      	ldr	r1, [r3, #0]
 800e67e:	4b1b      	ldr	r3, [pc, #108]	; (800e6ec <tcp_input+0x808>)
 800e680:	881b      	ldrh	r3, [r3, #0]
 800e682:	461a      	mov	r2, r3
 800e684:	4b1a      	ldr	r3, [pc, #104]	; (800e6f0 <tcp_input+0x80c>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e68a:	4b16      	ldr	r3, [pc, #88]	; (800e6e4 <tcp_input+0x800>)
 800e68c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e68e:	885b      	ldrh	r3, [r3, #2]
 800e690:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e692:	4a14      	ldr	r2, [pc, #80]	; (800e6e4 <tcp_input+0x800>)
 800e694:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e696:	8812      	ldrh	r2, [r2, #0]
 800e698:	b292      	uxth	r2, r2
 800e69a:	9202      	str	r2, [sp, #8]
 800e69c:	9301      	str	r3, [sp, #4]
 800e69e:	4b15      	ldr	r3, [pc, #84]	; (800e6f4 <tcp_input+0x810>)
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	4b15      	ldr	r3, [pc, #84]	; (800e6f8 <tcp_input+0x814>)
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	f003 f81c 	bl	80116e4 <tcp_rst>
    pbuf_free(p);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7fd fdf1 	bl	800c294 <pbuf_free>
  return;
 800e6b2:	e00c      	b.n	800e6ce <tcp_input+0x7ea>
    goto dropped;
 800e6b4:	bf00      	nop
 800e6b6:	e006      	b.n	800e6c6 <tcp_input+0x7e2>
    goto dropped;
 800e6b8:	bf00      	nop
 800e6ba:	e004      	b.n	800e6c6 <tcp_input+0x7e2>
    goto dropped;
 800e6bc:	bf00      	nop
 800e6be:	e002      	b.n	800e6c6 <tcp_input+0x7e2>
      goto dropped;
 800e6c0:	bf00      	nop
 800e6c2:	e000      	b.n	800e6c6 <tcp_input+0x7e2>
      goto dropped;
 800e6c4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7fd fde4 	bl	800c294 <pbuf_free>
 800e6cc:	e000      	b.n	800e6d0 <tcp_input+0x7ec>
  return;
 800e6ce:	bf00      	nop
}
 800e6d0:	3724      	adds	r7, #36	; 0x24
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd90      	pop	{r4, r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	240081a4 	.word	0x240081a4
 800e6dc:	240081a0 	.word	0x240081a0
 800e6e0:	24008170 	.word	0x24008170
 800e6e4:	24008180 	.word	0x24008180
 800e6e8:	24008194 	.word	0x24008194
 800e6ec:	2400819a 	.word	0x2400819a
 800e6f0:	24008190 	.word	0x24008190
 800e6f4:	24005240 	.word	0x24005240
 800e6f8:	24005244 	.word	0x24005244

0800e6fc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d106      	bne.n	800e718 <tcp_input_delayed_close+0x1c>
 800e70a:	4b17      	ldr	r3, [pc, #92]	; (800e768 <tcp_input_delayed_close+0x6c>)
 800e70c:	f240 225a 	movw	r2, #602	; 0x25a
 800e710:	4916      	ldr	r1, [pc, #88]	; (800e76c <tcp_input_delayed_close+0x70>)
 800e712:	4817      	ldr	r0, [pc, #92]	; (800e770 <tcp_input_delayed_close+0x74>)
 800e714:	f003 fcf6 	bl	8012104 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e718:	4b16      	ldr	r3, [pc, #88]	; (800e774 <tcp_input_delayed_close+0x78>)
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	f003 0310 	and.w	r3, r3, #16
 800e720:	2b00      	cmp	r3, #0
 800e722:	d01c      	beq.n	800e75e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	8b5b      	ldrh	r3, [r3, #26]
 800e728:	f003 0310 	and.w	r3, r3, #16
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10d      	bne.n	800e74c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e736:	2b00      	cmp	r3, #0
 800e738:	d008      	beq.n	800e74c <tcp_input_delayed_close+0x50>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	6912      	ldr	r2, [r2, #16]
 800e744:	f06f 010e 	mvn.w	r1, #14
 800e748:	4610      	mov	r0, r2
 800e74a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e74c:	6879      	ldr	r1, [r7, #4]
 800e74e:	480a      	ldr	r0, [pc, #40]	; (800e778 <tcp_input_delayed_close+0x7c>)
 800e750:	f7ff fa50 	bl	800dbf4 <tcp_pcb_remove>
    tcp_free(pcb);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7fe f83d 	bl	800c7d4 <tcp_free>
    return 1;
 800e75a:	2301      	movs	r3, #1
 800e75c:	e000      	b.n	800e760 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e75e:	2300      	movs	r3, #0
}
 800e760:	4618      	mov	r0, r3
 800e762:	3708      	adds	r7, #8
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	08014c0c 	.word	0x08014c0c
 800e76c:	08014dfc 	.word	0x08014dfc
 800e770:	08014c78 	.word	0x08014c78
 800e774:	2400819d 	.word	0x2400819d
 800e778:	24008164 	.word	0x24008164

0800e77c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e77c:	b590      	push	{r4, r7, lr}
 800e77e:	b08b      	sub	sp, #44	; 0x2c
 800e780:	af04      	add	r7, sp, #16
 800e782:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e784:	4b6f      	ldr	r3, [pc, #444]	; (800e944 <tcp_listen_input+0x1c8>)
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	f003 0304 	and.w	r3, r3, #4
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f040 80d2 	bne.w	800e936 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d106      	bne.n	800e7a6 <tcp_listen_input+0x2a>
 800e798:	4b6b      	ldr	r3, [pc, #428]	; (800e948 <tcp_listen_input+0x1cc>)
 800e79a:	f240 2281 	movw	r2, #641	; 0x281
 800e79e:	496b      	ldr	r1, [pc, #428]	; (800e94c <tcp_listen_input+0x1d0>)
 800e7a0:	486b      	ldr	r0, [pc, #428]	; (800e950 <tcp_listen_input+0x1d4>)
 800e7a2:	f003 fcaf 	bl	8012104 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e7a6:	4b67      	ldr	r3, [pc, #412]	; (800e944 <tcp_listen_input+0x1c8>)
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	f003 0310 	and.w	r3, r3, #16
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d019      	beq.n	800e7e6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7b2:	4b68      	ldr	r3, [pc, #416]	; (800e954 <tcp_listen_input+0x1d8>)
 800e7b4:	6819      	ldr	r1, [r3, #0]
 800e7b6:	4b68      	ldr	r3, [pc, #416]	; (800e958 <tcp_listen_input+0x1dc>)
 800e7b8:	881b      	ldrh	r3, [r3, #0]
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	4b67      	ldr	r3, [pc, #412]	; (800e95c <tcp_listen_input+0x1e0>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7c2:	4b67      	ldr	r3, [pc, #412]	; (800e960 <tcp_listen_input+0x1e4>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7c6:	885b      	ldrh	r3, [r3, #2]
 800e7c8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7ca:	4a65      	ldr	r2, [pc, #404]	; (800e960 <tcp_listen_input+0x1e4>)
 800e7cc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7ce:	8812      	ldrh	r2, [r2, #0]
 800e7d0:	b292      	uxth	r2, r2
 800e7d2:	9202      	str	r2, [sp, #8]
 800e7d4:	9301      	str	r3, [sp, #4]
 800e7d6:	4b63      	ldr	r3, [pc, #396]	; (800e964 <tcp_listen_input+0x1e8>)
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	4b63      	ldr	r3, [pc, #396]	; (800e968 <tcp_listen_input+0x1ec>)
 800e7dc:	4602      	mov	r2, r0
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f002 ff80 	bl	80116e4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e7e4:	e0a9      	b.n	800e93a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e7e6:	4b57      	ldr	r3, [pc, #348]	; (800e944 <tcp_listen_input+0x1c8>)
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	f003 0302 	and.w	r3, r3, #2
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f000 80a3 	beq.w	800e93a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	7d5b      	ldrb	r3, [r3, #21]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7ff f927 	bl	800da4c <tcp_alloc>
 800e7fe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d111      	bne.n	800e82a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	699b      	ldr	r3, [r3, #24]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00a      	beq.n	800e824 <tcp_listen_input+0xa8>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	699b      	ldr	r3, [r3, #24]
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	6910      	ldr	r0, [r2, #16]
 800e816:	f04f 32ff 	mov.w	r2, #4294967295
 800e81a:	2100      	movs	r1, #0
 800e81c:	4798      	blx	r3
 800e81e:	4603      	mov	r3, r0
 800e820:	73bb      	strb	r3, [r7, #14]
      return;
 800e822:	e08b      	b.n	800e93c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e824:	23f0      	movs	r3, #240	; 0xf0
 800e826:	73bb      	strb	r3, [r7, #14]
      return;
 800e828:	e088      	b.n	800e93c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e82a:	4b50      	ldr	r3, [pc, #320]	; (800e96c <tcp_listen_input+0x1f0>)
 800e82c:	695a      	ldr	r2, [r3, #20]
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e832:	4b4e      	ldr	r3, [pc, #312]	; (800e96c <tcp_listen_input+0x1f0>)
 800e834:	691a      	ldr	r2, [r3, #16]
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	8ada      	ldrh	r2, [r3, #22]
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e842:	4b47      	ldr	r3, [pc, #284]	; (800e960 <tcp_listen_input+0x1e4>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	881b      	ldrh	r3, [r3, #0]
 800e848:	b29a      	uxth	r2, r3
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2203      	movs	r2, #3
 800e852:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e854:	4b41      	ldr	r3, [pc, #260]	; (800e95c <tcp_listen_input+0x1e0>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	1c5a      	adds	r2, r3, #1
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e866:	6978      	ldr	r0, [r7, #20]
 800e868:	f7ff fa58 	bl	800dd1c <tcp_next_iss>
 800e86c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	693a      	ldr	r2, [r7, #16]
 800e872:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	693a      	ldr	r2, [r7, #16]
 800e87e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	693a      	ldr	r2, [r7, #16]
 800e884:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e886:	4b35      	ldr	r3, [pc, #212]	; (800e95c <tcp_listen_input+0x1e0>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	1e5a      	subs	r2, r3, #1
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	691a      	ldr	r2, [r3, #16]
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	7a5b      	ldrb	r3, [r3, #9]
 800e8a2:	f003 030c 	and.w	r3, r3, #12
 800e8a6:	b2da      	uxtb	r2, r3
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	7a1a      	ldrb	r2, [r3, #8]
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e8b4:	4b2e      	ldr	r3, [pc, #184]	; (800e970 <tcp_listen_input+0x1f4>)
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	60da      	str	r2, [r3, #12]
 800e8bc:	4a2c      	ldr	r2, [pc, #176]	; (800e970 <tcp_listen_input+0x1f4>)
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	6013      	str	r3, [r2, #0]
 800e8c2:	f003 f8d1 	bl	8011a68 <tcp_timer_needed>
 800e8c6:	4b2b      	ldr	r3, [pc, #172]	; (800e974 <tcp_listen_input+0x1f8>)
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e8cc:	6978      	ldr	r0, [r7, #20]
 800e8ce:	f001 fd8f 	bl	80103f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e8d2:	4b23      	ldr	r3, [pc, #140]	; (800e960 <tcp_listen_input+0x1e4>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	89db      	ldrh	r3, [r3, #14]
 800e8d8:	b29a      	uxth	r2, r3
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fb f8a1 	bl	8009a3c <ip4_route>
 800e8fa:	4601      	mov	r1, r0
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	3304      	adds	r3, #4
 800e900:	461a      	mov	r2, r3
 800e902:	4620      	mov	r0, r4
 800e904:	f7ff fa30 	bl	800dd68 <tcp_eff_send_mss_netif>
 800e908:	4603      	mov	r3, r0
 800e90a:	461a      	mov	r2, r3
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e910:	2112      	movs	r1, #18
 800e912:	6978      	ldr	r0, [r7, #20]
 800e914:	f002 f844 	bl	80109a0 <tcp_enqueue_flags>
 800e918:	4603      	mov	r3, r0
 800e91a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e91c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d004      	beq.n	800e92e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e924:	2100      	movs	r1, #0
 800e926:	6978      	ldr	r0, [r7, #20]
 800e928:	f7fe f97e 	bl	800cc28 <tcp_abandon>
      return;
 800e92c:	e006      	b.n	800e93c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e92e:	6978      	ldr	r0, [r7, #20]
 800e930:	f002 f924 	bl	8010b7c <tcp_output>
  return;
 800e934:	e001      	b.n	800e93a <tcp_listen_input+0x1be>
    return;
 800e936:	bf00      	nop
 800e938:	e000      	b.n	800e93c <tcp_listen_input+0x1c0>
  return;
 800e93a:	bf00      	nop
}
 800e93c:	371c      	adds	r7, #28
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd90      	pop	{r4, r7, pc}
 800e942:	bf00      	nop
 800e944:	2400819c 	.word	0x2400819c
 800e948:	08014c0c 	.word	0x08014c0c
 800e94c:	08014e24 	.word	0x08014e24
 800e950:	08014c78 	.word	0x08014c78
 800e954:	24008194 	.word	0x24008194
 800e958:	2400819a 	.word	0x2400819a
 800e95c:	24008190 	.word	0x24008190
 800e960:	24008180 	.word	0x24008180
 800e964:	24005240 	.word	0x24005240
 800e968:	24005244 	.word	0x24005244
 800e96c:	24005230 	.word	0x24005230
 800e970:	24008164 	.word	0x24008164
 800e974:	2400816c 	.word	0x2400816c

0800e978 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b086      	sub	sp, #24
 800e97c:	af04      	add	r7, sp, #16
 800e97e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e980:	4b2f      	ldr	r3, [pc, #188]	; (800ea40 <tcp_timewait_input+0xc8>)
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	f003 0304 	and.w	r3, r3, #4
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d153      	bne.n	800ea34 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d106      	bne.n	800e9a0 <tcp_timewait_input+0x28>
 800e992:	4b2c      	ldr	r3, [pc, #176]	; (800ea44 <tcp_timewait_input+0xcc>)
 800e994:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e998:	492b      	ldr	r1, [pc, #172]	; (800ea48 <tcp_timewait_input+0xd0>)
 800e99a:	482c      	ldr	r0, [pc, #176]	; (800ea4c <tcp_timewait_input+0xd4>)
 800e99c:	f003 fbb2 	bl	8012104 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e9a0:	4b27      	ldr	r3, [pc, #156]	; (800ea40 <tcp_timewait_input+0xc8>)
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	f003 0302 	and.w	r3, r3, #2
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d02a      	beq.n	800ea02 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e9ac:	4b28      	ldr	r3, [pc, #160]	; (800ea50 <tcp_timewait_input+0xd8>)
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	db2d      	blt.n	800ea16 <tcp_timewait_input+0x9e>
 800e9ba:	4b25      	ldr	r3, [pc, #148]	; (800ea50 <tcp_timewait_input+0xd8>)
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c2:	6879      	ldr	r1, [r7, #4]
 800e9c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e9c6:	440b      	add	r3, r1
 800e9c8:	1ad3      	subs	r3, r2, r3
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	dc23      	bgt.n	800ea16 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9ce:	4b21      	ldr	r3, [pc, #132]	; (800ea54 <tcp_timewait_input+0xdc>)
 800e9d0:	6819      	ldr	r1, [r3, #0]
 800e9d2:	4b21      	ldr	r3, [pc, #132]	; (800ea58 <tcp_timewait_input+0xe0>)
 800e9d4:	881b      	ldrh	r3, [r3, #0]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	4b1d      	ldr	r3, [pc, #116]	; (800ea50 <tcp_timewait_input+0xd8>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9de:	4b1f      	ldr	r3, [pc, #124]	; (800ea5c <tcp_timewait_input+0xe4>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9e2:	885b      	ldrh	r3, [r3, #2]
 800e9e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9e6:	4a1d      	ldr	r2, [pc, #116]	; (800ea5c <tcp_timewait_input+0xe4>)
 800e9e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9ea:	8812      	ldrh	r2, [r2, #0]
 800e9ec:	b292      	uxth	r2, r2
 800e9ee:	9202      	str	r2, [sp, #8]
 800e9f0:	9301      	str	r3, [sp, #4]
 800e9f2:	4b1b      	ldr	r3, [pc, #108]	; (800ea60 <tcp_timewait_input+0xe8>)
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	4b1b      	ldr	r3, [pc, #108]	; (800ea64 <tcp_timewait_input+0xec>)
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f002 fe72 	bl	80116e4 <tcp_rst>
      return;
 800ea00:	e01b      	b.n	800ea3a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ea02:	4b0f      	ldr	r3, [pc, #60]	; (800ea40 <tcp_timewait_input+0xc8>)
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	f003 0301 	and.w	r3, r3, #1
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d003      	beq.n	800ea16 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ea0e:	4b16      	ldr	r3, [pc, #88]	; (800ea68 <tcp_timewait_input+0xf0>)
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ea16:	4b10      	ldr	r3, [pc, #64]	; (800ea58 <tcp_timewait_input+0xe0>)
 800ea18:	881b      	ldrh	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00c      	beq.n	800ea38 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	8b5b      	ldrh	r3, [r3, #26]
 800ea22:	f043 0302 	orr.w	r3, r3, #2
 800ea26:	b29a      	uxth	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f002 f8a5 	bl	8010b7c <tcp_output>
  }
  return;
 800ea32:	e001      	b.n	800ea38 <tcp_timewait_input+0xc0>
    return;
 800ea34:	bf00      	nop
 800ea36:	e000      	b.n	800ea3a <tcp_timewait_input+0xc2>
  return;
 800ea38:	bf00      	nop
}
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	2400819c 	.word	0x2400819c
 800ea44:	08014c0c 	.word	0x08014c0c
 800ea48:	08014e44 	.word	0x08014e44
 800ea4c:	08014c78 	.word	0x08014c78
 800ea50:	24008190 	.word	0x24008190
 800ea54:	24008194 	.word	0x24008194
 800ea58:	2400819a 	.word	0x2400819a
 800ea5c:	24008180 	.word	0x24008180
 800ea60:	24005240 	.word	0x24005240
 800ea64:	24005244 	.word	0x24005244
 800ea68:	24008158 	.word	0x24008158

0800ea6c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ea6c:	b590      	push	{r4, r7, lr}
 800ea6e:	b08d      	sub	sp, #52	; 0x34
 800ea70:	af04      	add	r7, sp, #16
 800ea72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ea74:	2300      	movs	r3, #0
 800ea76:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d106      	bne.n	800ea90 <tcp_process+0x24>
 800ea82:	4b9d      	ldr	r3, [pc, #628]	; (800ecf8 <tcp_process+0x28c>)
 800ea84:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ea88:	499c      	ldr	r1, [pc, #624]	; (800ecfc <tcp_process+0x290>)
 800ea8a:	489d      	ldr	r0, [pc, #628]	; (800ed00 <tcp_process+0x294>)
 800ea8c:	f003 fb3a 	bl	8012104 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ea90:	4b9c      	ldr	r3, [pc, #624]	; (800ed04 <tcp_process+0x298>)
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	f003 0304 	and.w	r3, r3, #4
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d04e      	beq.n	800eb3a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	7d1b      	ldrb	r3, [r3, #20]
 800eaa0:	2b02      	cmp	r3, #2
 800eaa2:	d108      	bne.n	800eab6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eaa8:	4b97      	ldr	r3, [pc, #604]	; (800ed08 <tcp_process+0x29c>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d123      	bne.n	800eaf8 <tcp_process+0x8c>
        acceptable = 1;
 800eab0:	2301      	movs	r3, #1
 800eab2:	76fb      	strb	r3, [r7, #27]
 800eab4:	e020      	b.n	800eaf8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eaba:	4b94      	ldr	r3, [pc, #592]	; (800ed0c <tcp_process+0x2a0>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d102      	bne.n	800eac8 <tcp_process+0x5c>
        acceptable = 1;
 800eac2:	2301      	movs	r3, #1
 800eac4:	76fb      	strb	r3, [r7, #27]
 800eac6:	e017      	b.n	800eaf8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eac8:	4b90      	ldr	r3, [pc, #576]	; (800ed0c <tcp_process+0x2a0>)
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	db10      	blt.n	800eaf8 <tcp_process+0x8c>
 800ead6:	4b8d      	ldr	r3, [pc, #564]	; (800ed0c <tcp_process+0x2a0>)
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eade:	6879      	ldr	r1, [r7, #4]
 800eae0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eae2:	440b      	add	r3, r1
 800eae4:	1ad3      	subs	r3, r2, r3
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	dc06      	bgt.n	800eaf8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	8b5b      	ldrh	r3, [r3, #26]
 800eaee:	f043 0302 	orr.w	r3, r3, #2
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800eaf8:	7efb      	ldrb	r3, [r7, #27]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d01b      	beq.n	800eb36 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	7d1b      	ldrb	r3, [r3, #20]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d106      	bne.n	800eb14 <tcp_process+0xa8>
 800eb06:	4b7c      	ldr	r3, [pc, #496]	; (800ecf8 <tcp_process+0x28c>)
 800eb08:	f44f 724e 	mov.w	r2, #824	; 0x338
 800eb0c:	4980      	ldr	r1, [pc, #512]	; (800ed10 <tcp_process+0x2a4>)
 800eb0e:	487c      	ldr	r0, [pc, #496]	; (800ed00 <tcp_process+0x294>)
 800eb10:	f003 faf8 	bl	8012104 <iprintf>
      recv_flags |= TF_RESET;
 800eb14:	4b7f      	ldr	r3, [pc, #508]	; (800ed14 <tcp_process+0x2a8>)
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	f043 0308 	orr.w	r3, r3, #8
 800eb1c:	b2da      	uxtb	r2, r3
 800eb1e:	4b7d      	ldr	r3, [pc, #500]	; (800ed14 <tcp_process+0x2a8>)
 800eb20:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	8b5b      	ldrh	r3, [r3, #26]
 800eb26:	f023 0301 	bic.w	r3, r3, #1
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800eb30:	f06f 030d 	mvn.w	r3, #13
 800eb34:	e37a      	b.n	800f22c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800eb36:	2300      	movs	r3, #0
 800eb38:	e378      	b.n	800f22c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800eb3a:	4b72      	ldr	r3, [pc, #456]	; (800ed04 <tcp_process+0x298>)
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	f003 0302 	and.w	r3, r3, #2
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d010      	beq.n	800eb68 <tcp_process+0xfc>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	7d1b      	ldrb	r3, [r3, #20]
 800eb4a:	2b02      	cmp	r3, #2
 800eb4c:	d00c      	beq.n	800eb68 <tcp_process+0xfc>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	7d1b      	ldrb	r3, [r3, #20]
 800eb52:	2b03      	cmp	r3, #3
 800eb54:	d008      	beq.n	800eb68 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	8b5b      	ldrh	r3, [r3, #26]
 800eb5a:	f043 0302 	orr.w	r3, r3, #2
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800eb64:	2300      	movs	r3, #0
 800eb66:	e361      	b.n	800f22c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	8b5b      	ldrh	r3, [r3, #26]
 800eb6c:	f003 0310 	and.w	r3, r3, #16
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d103      	bne.n	800eb7c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800eb74:	4b68      	ldr	r3, [pc, #416]	; (800ed18 <tcp_process+0x2ac>)
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f001 fc2f 	bl	80103f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	7d1b      	ldrb	r3, [r3, #20]
 800eb96:	3b02      	subs	r3, #2
 800eb98:	2b07      	cmp	r3, #7
 800eb9a:	f200 8337 	bhi.w	800f20c <tcp_process+0x7a0>
 800eb9e:	a201      	add	r2, pc, #4	; (adr r2, 800eba4 <tcp_process+0x138>)
 800eba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba4:	0800ebc5 	.word	0x0800ebc5
 800eba8:	0800edf5 	.word	0x0800edf5
 800ebac:	0800ef6d 	.word	0x0800ef6d
 800ebb0:	0800ef97 	.word	0x0800ef97
 800ebb4:	0800f0bb 	.word	0x0800f0bb
 800ebb8:	0800ef6d 	.word	0x0800ef6d
 800ebbc:	0800f147 	.word	0x0800f147
 800ebc0:	0800f1d7 	.word	0x0800f1d7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ebc4:	4b4f      	ldr	r3, [pc, #316]	; (800ed04 <tcp_process+0x298>)
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	f003 0310 	and.w	r3, r3, #16
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f000 80e4 	beq.w	800ed9a <tcp_process+0x32e>
 800ebd2:	4b4c      	ldr	r3, [pc, #304]	; (800ed04 <tcp_process+0x298>)
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	f003 0302 	and.w	r3, r3, #2
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f000 80dd 	beq.w	800ed9a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebe4:	1c5a      	adds	r2, r3, #1
 800ebe6:	4b48      	ldr	r3, [pc, #288]	; (800ed08 <tcp_process+0x29c>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	f040 80d5 	bne.w	800ed9a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ebf0:	4b46      	ldr	r3, [pc, #280]	; (800ed0c <tcp_process+0x2a0>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	1c5a      	adds	r2, r3, #1
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ec02:	4b41      	ldr	r3, [pc, #260]	; (800ed08 <tcp_process+0x29c>)
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ec0a:	4b44      	ldr	r3, [pc, #272]	; (800ed1c <tcp_process+0x2b0>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	89db      	ldrh	r3, [r3, #14]
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ec24:	4b39      	ldr	r3, [pc, #228]	; (800ed0c <tcp_process+0x2a0>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	1e5a      	subs	r2, r3, #1
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2204      	movs	r2, #4
 800ec32:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	3304      	adds	r3, #4
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7fa fefd 	bl	8009a3c <ip4_route>
 800ec42:	4601      	mov	r1, r0
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	3304      	adds	r3, #4
 800ec48:	461a      	mov	r2, r3
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f7ff f88c 	bl	800dd68 <tcp_eff_send_mss_netif>
 800ec50:	4603      	mov	r3, r0
 800ec52:	461a      	mov	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec5c:	009a      	lsls	r2, r3, #2
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	f241 111c 	movw	r1, #4380	; 0x111c
 800ec68:	428b      	cmp	r3, r1
 800ec6a:	bf38      	it	cc
 800ec6c:	460b      	movcc	r3, r1
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d204      	bcs.n	800ec7c <tcp_process+0x210>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	e00d      	b.n	800ec98 <tcp_process+0x22c>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	f241 121c 	movw	r2, #4380	; 0x111c
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d904      	bls.n	800ec94 <tcp_process+0x228>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec8e:	005b      	lsls	r3, r3, #1
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	e001      	b.n	800ec98 <tcp_process+0x22c>
 800ec94:	f241 131c 	movw	r3, #4380	; 0x111c
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d106      	bne.n	800ecb6 <tcp_process+0x24a>
 800eca8:	4b13      	ldr	r3, [pc, #76]	; (800ecf8 <tcp_process+0x28c>)
 800ecaa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ecae:	491c      	ldr	r1, [pc, #112]	; (800ed20 <tcp_process+0x2b4>)
 800ecb0:	4813      	ldr	r0, [pc, #76]	; (800ed00 <tcp_process+0x294>)
 800ecb2:	f003 fa27 	bl	8012104 <iprintf>
        --pcb->snd_queuelen;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d12a      	bne.n	800ed28 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecd6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d106      	bne.n	800ecec <tcp_process+0x280>
 800ecde:	4b06      	ldr	r3, [pc, #24]	; (800ecf8 <tcp_process+0x28c>)
 800ece0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ece4:	490f      	ldr	r1, [pc, #60]	; (800ed24 <tcp_process+0x2b8>)
 800ece6:	4806      	ldr	r0, [pc, #24]	; (800ed00 <tcp_process+0x294>)
 800ece8:	f003 fa0c 	bl	8012104 <iprintf>
          pcb->unsent = rseg->next;
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	66da      	str	r2, [r3, #108]	; 0x6c
 800ecf4:	e01c      	b.n	800ed30 <tcp_process+0x2c4>
 800ecf6:	bf00      	nop
 800ecf8:	08014c0c 	.word	0x08014c0c
 800ecfc:	08014e64 	.word	0x08014e64
 800ed00:	08014c78 	.word	0x08014c78
 800ed04:	2400819c 	.word	0x2400819c
 800ed08:	24008194 	.word	0x24008194
 800ed0c:	24008190 	.word	0x24008190
 800ed10:	08014e80 	.word	0x08014e80
 800ed14:	2400819d 	.word	0x2400819d
 800ed18:	24008158 	.word	0x24008158
 800ed1c:	24008180 	.word	0x24008180
 800ed20:	08014ea0 	.word	0x08014ea0
 800ed24:	08014eb8 	.word	0x08014eb8
        } else {
          pcb->unacked = rseg->next;
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ed30:	69f8      	ldr	r0, [r7, #28]
 800ed32:	f7fe fd22 	bl	800d77a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d104      	bne.n	800ed48 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed44:	861a      	strh	r2, [r3, #48]	; 0x30
 800ed46:	e006      	b.n	800ed56 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d00a      	beq.n	800ed76 <tcp_process+0x30a>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	6910      	ldr	r0, [r2, #16]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	6879      	ldr	r1, [r7, #4]
 800ed6e:	4798      	blx	r3
 800ed70:	4603      	mov	r3, r0
 800ed72:	76bb      	strb	r3, [r7, #26]
 800ed74:	e001      	b.n	800ed7a <tcp_process+0x30e>
 800ed76:	2300      	movs	r3, #0
 800ed78:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ed7a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed7e:	f113 0f0d 	cmn.w	r3, #13
 800ed82:	d102      	bne.n	800ed8a <tcp_process+0x31e>
          return ERR_ABRT;
 800ed84:	f06f 030c 	mvn.w	r3, #12
 800ed88:	e250      	b.n	800f22c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	8b5b      	ldrh	r3, [r3, #26]
 800ed8e:	f043 0302 	orr.w	r3, r3, #2
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ed98:	e23a      	b.n	800f210 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ed9a:	4b98      	ldr	r3, [pc, #608]	; (800effc <tcp_process+0x590>)
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	f003 0310 	and.w	r3, r3, #16
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f000 8234 	beq.w	800f210 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eda8:	4b95      	ldr	r3, [pc, #596]	; (800f000 <tcp_process+0x594>)
 800edaa:	6819      	ldr	r1, [r3, #0]
 800edac:	4b95      	ldr	r3, [pc, #596]	; (800f004 <tcp_process+0x598>)
 800edae:	881b      	ldrh	r3, [r3, #0]
 800edb0:	461a      	mov	r2, r3
 800edb2:	4b95      	ldr	r3, [pc, #596]	; (800f008 <tcp_process+0x59c>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edb8:	4b94      	ldr	r3, [pc, #592]	; (800f00c <tcp_process+0x5a0>)
 800edba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edbc:	885b      	ldrh	r3, [r3, #2]
 800edbe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edc0:	4a92      	ldr	r2, [pc, #584]	; (800f00c <tcp_process+0x5a0>)
 800edc2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edc4:	8812      	ldrh	r2, [r2, #0]
 800edc6:	b292      	uxth	r2, r2
 800edc8:	9202      	str	r2, [sp, #8]
 800edca:	9301      	str	r3, [sp, #4]
 800edcc:	4b90      	ldr	r3, [pc, #576]	; (800f010 <tcp_process+0x5a4>)
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	4b90      	ldr	r3, [pc, #576]	; (800f014 <tcp_process+0x5a8>)
 800edd2:	4602      	mov	r2, r0
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f002 fc85 	bl	80116e4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ede0:	2b05      	cmp	r3, #5
 800ede2:	f200 8215 	bhi.w	800f210 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2200      	movs	r2, #0
 800edea:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f002 fa4f 	bl	8011290 <tcp_rexmit_rto>
      break;
 800edf2:	e20d      	b.n	800f210 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800edf4:	4b81      	ldr	r3, [pc, #516]	; (800effc <tcp_process+0x590>)
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	f003 0310 	and.w	r3, r3, #16
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f000 80a1 	beq.w	800ef44 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee02:	4b7f      	ldr	r3, [pc, #508]	; (800f000 <tcp_process+0x594>)
 800ee04:	681a      	ldr	r2, [r3, #0]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee0a:	1ad3      	subs	r3, r2, r3
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	db7e      	blt.n	800ef10 <tcp_process+0x4a4>
 800ee12:	4b7b      	ldr	r3, [pc, #492]	; (800f000 <tcp_process+0x594>)
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee1a:	1ad3      	subs	r3, r2, r3
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	dc77      	bgt.n	800ef10 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2204      	movs	r2, #4
 800ee24:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d102      	bne.n	800ee34 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ee2e:	23fa      	movs	r3, #250	; 0xfa
 800ee30:	76bb      	strb	r3, [r7, #26]
 800ee32:	e01d      	b.n	800ee70 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee38:	699b      	ldr	r3, [r3, #24]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d106      	bne.n	800ee4c <tcp_process+0x3e0>
 800ee3e:	4b76      	ldr	r3, [pc, #472]	; (800f018 <tcp_process+0x5ac>)
 800ee40:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ee44:	4975      	ldr	r1, [pc, #468]	; (800f01c <tcp_process+0x5b0>)
 800ee46:	4876      	ldr	r0, [pc, #472]	; (800f020 <tcp_process+0x5b4>)
 800ee48:	f003 f95c 	bl	8012104 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee50:	699b      	ldr	r3, [r3, #24]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d00a      	beq.n	800ee6c <tcp_process+0x400>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	6910      	ldr	r0, [r2, #16]
 800ee60:	2200      	movs	r2, #0
 800ee62:	6879      	ldr	r1, [r7, #4]
 800ee64:	4798      	blx	r3
 800ee66:	4603      	mov	r3, r0
 800ee68:	76bb      	strb	r3, [r7, #26]
 800ee6a:	e001      	b.n	800ee70 <tcp_process+0x404>
 800ee6c:	23f0      	movs	r3, #240	; 0xf0
 800ee6e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ee70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d00a      	beq.n	800ee8e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ee78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee7c:	f113 0f0d 	cmn.w	r3, #13
 800ee80:	d002      	beq.n	800ee88 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f7fd ff8e 	bl	800cda4 <tcp_abort>
            }
            return ERR_ABRT;
 800ee88:	f06f 030c 	mvn.w	r3, #12
 800ee8c:	e1ce      	b.n	800f22c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f000 fae0 	bl	800f454 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ee94:	4b63      	ldr	r3, [pc, #396]	; (800f024 <tcp_process+0x5b8>)
 800ee96:	881b      	ldrh	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d005      	beq.n	800eea8 <tcp_process+0x43c>
            recv_acked--;
 800ee9c:	4b61      	ldr	r3, [pc, #388]	; (800f024 <tcp_process+0x5b8>)
 800ee9e:	881b      	ldrh	r3, [r3, #0]
 800eea0:	3b01      	subs	r3, #1
 800eea2:	b29a      	uxth	r2, r3
 800eea4:	4b5f      	ldr	r3, [pc, #380]	; (800f024 <tcp_process+0x5b8>)
 800eea6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eeac:	009a      	lsls	r2, r3, #2
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eeb2:	005b      	lsls	r3, r3, #1
 800eeb4:	f241 111c 	movw	r1, #4380	; 0x111c
 800eeb8:	428b      	cmp	r3, r1
 800eeba:	bf38      	it	cc
 800eebc:	460b      	movcc	r3, r1
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d204      	bcs.n	800eecc <tcp_process+0x460>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	e00d      	b.n	800eee8 <tcp_process+0x47c>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eed0:	005b      	lsls	r3, r3, #1
 800eed2:	f241 121c 	movw	r2, #4380	; 0x111c
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d904      	bls.n	800eee4 <tcp_process+0x478>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eede:	005b      	lsls	r3, r3, #1
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	e001      	b.n	800eee8 <tcp_process+0x47c>
 800eee4:	f241 131c 	movw	r3, #4380	; 0x111c
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800eeee:	4b4e      	ldr	r3, [pc, #312]	; (800f028 <tcp_process+0x5bc>)
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	f003 0320 	and.w	r3, r3, #32
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d037      	beq.n	800ef6a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	8b5b      	ldrh	r3, [r3, #26]
 800eefe:	f043 0302 	orr.w	r3, r3, #2
 800ef02:	b29a      	uxth	r2, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2207      	movs	r2, #7
 800ef0c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ef0e:	e02c      	b.n	800ef6a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef10:	4b3b      	ldr	r3, [pc, #236]	; (800f000 <tcp_process+0x594>)
 800ef12:	6819      	ldr	r1, [r3, #0]
 800ef14:	4b3b      	ldr	r3, [pc, #236]	; (800f004 <tcp_process+0x598>)
 800ef16:	881b      	ldrh	r3, [r3, #0]
 800ef18:	461a      	mov	r2, r3
 800ef1a:	4b3b      	ldr	r3, [pc, #236]	; (800f008 <tcp_process+0x59c>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef20:	4b3a      	ldr	r3, [pc, #232]	; (800f00c <tcp_process+0x5a0>)
 800ef22:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef24:	885b      	ldrh	r3, [r3, #2]
 800ef26:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef28:	4a38      	ldr	r2, [pc, #224]	; (800f00c <tcp_process+0x5a0>)
 800ef2a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef2c:	8812      	ldrh	r2, [r2, #0]
 800ef2e:	b292      	uxth	r2, r2
 800ef30:	9202      	str	r2, [sp, #8]
 800ef32:	9301      	str	r3, [sp, #4]
 800ef34:	4b36      	ldr	r3, [pc, #216]	; (800f010 <tcp_process+0x5a4>)
 800ef36:	9300      	str	r3, [sp, #0]
 800ef38:	4b36      	ldr	r3, [pc, #216]	; (800f014 <tcp_process+0x5a8>)
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f002 fbd1 	bl	80116e4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ef42:	e167      	b.n	800f214 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ef44:	4b2d      	ldr	r3, [pc, #180]	; (800effc <tcp_process+0x590>)
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	f003 0302 	and.w	r3, r3, #2
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	f000 8161 	beq.w	800f214 <tcp_process+0x7a8>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef56:	1e5a      	subs	r2, r3, #1
 800ef58:	4b2b      	ldr	r3, [pc, #172]	; (800f008 <tcp_process+0x59c>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	f040 8159 	bne.w	800f214 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f002 f9b6 	bl	80112d4 <tcp_rexmit>
      break;
 800ef68:	e154      	b.n	800f214 <tcp_process+0x7a8>
 800ef6a:	e153      	b.n	800f214 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 fa71 	bl	800f454 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ef72:	4b2d      	ldr	r3, [pc, #180]	; (800f028 <tcp_process+0x5bc>)
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	f003 0320 	and.w	r3, r3, #32
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f000 814c 	beq.w	800f218 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	8b5b      	ldrh	r3, [r3, #26]
 800ef84:	f043 0302 	orr.w	r3, r3, #2
 800ef88:	b29a      	uxth	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2207      	movs	r2, #7
 800ef92:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef94:	e140      	b.n	800f218 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 fa5c 	bl	800f454 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef9c:	4b22      	ldr	r3, [pc, #136]	; (800f028 <tcp_process+0x5bc>)
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	f003 0320 	and.w	r3, r3, #32
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d071      	beq.n	800f08c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efa8:	4b14      	ldr	r3, [pc, #80]	; (800effc <tcp_process+0x590>)
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	f003 0310 	and.w	r3, r3, #16
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d060      	beq.n	800f076 <tcp_process+0x60a>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efb8:	4b11      	ldr	r3, [pc, #68]	; (800f000 <tcp_process+0x594>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d15a      	bne.n	800f076 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d156      	bne.n	800f076 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	8b5b      	ldrh	r3, [r3, #26]
 800efcc:	f043 0302 	orr.w	r3, r3, #2
 800efd0:	b29a      	uxth	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f7fe fdbc 	bl	800db54 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800efdc:	4b13      	ldr	r3, [pc, #76]	; (800f02c <tcp_process+0x5c0>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d105      	bne.n	800eff2 <tcp_process+0x586>
 800efe6:	4b11      	ldr	r3, [pc, #68]	; (800f02c <tcp_process+0x5c0>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	4a0f      	ldr	r2, [pc, #60]	; (800f02c <tcp_process+0x5c0>)
 800efee:	6013      	str	r3, [r2, #0]
 800eff0:	e02e      	b.n	800f050 <tcp_process+0x5e4>
 800eff2:	4b0e      	ldr	r3, [pc, #56]	; (800f02c <tcp_process+0x5c0>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	617b      	str	r3, [r7, #20]
 800eff8:	e027      	b.n	800f04a <tcp_process+0x5de>
 800effa:	bf00      	nop
 800effc:	2400819c 	.word	0x2400819c
 800f000:	24008194 	.word	0x24008194
 800f004:	2400819a 	.word	0x2400819a
 800f008:	24008190 	.word	0x24008190
 800f00c:	24008180 	.word	0x24008180
 800f010:	24005240 	.word	0x24005240
 800f014:	24005244 	.word	0x24005244
 800f018:	08014c0c 	.word	0x08014c0c
 800f01c:	08014ecc 	.word	0x08014ecc
 800f020:	08014c78 	.word	0x08014c78
 800f024:	24008198 	.word	0x24008198
 800f028:	2400819d 	.word	0x2400819d
 800f02c:	24008164 	.word	0x24008164
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	429a      	cmp	r2, r3
 800f038:	d104      	bne.n	800f044 <tcp_process+0x5d8>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	68da      	ldr	r2, [r3, #12]
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	60da      	str	r2, [r3, #12]
 800f042:	e005      	b.n	800f050 <tcp_process+0x5e4>
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	617b      	str	r3, [r7, #20]
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1ef      	bne.n	800f030 <tcp_process+0x5c4>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2200      	movs	r2, #0
 800f054:	60da      	str	r2, [r3, #12]
 800f056:	4b77      	ldr	r3, [pc, #476]	; (800f234 <tcp_process+0x7c8>)
 800f058:	2201      	movs	r2, #1
 800f05a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	220a      	movs	r2, #10
 800f060:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f062:	4b75      	ldr	r3, [pc, #468]	; (800f238 <tcp_process+0x7cc>)
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	60da      	str	r2, [r3, #12]
 800f06a:	4a73      	ldr	r2, [pc, #460]	; (800f238 <tcp_process+0x7cc>)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6013      	str	r3, [r2, #0]
 800f070:	f002 fcfa 	bl	8011a68 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f074:	e0d2      	b.n	800f21c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	8b5b      	ldrh	r3, [r3, #26]
 800f07a:	f043 0302 	orr.w	r3, r3, #2
 800f07e:	b29a      	uxth	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2208      	movs	r2, #8
 800f088:	751a      	strb	r2, [r3, #20]
      break;
 800f08a:	e0c7      	b.n	800f21c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f08c:	4b6b      	ldr	r3, [pc, #428]	; (800f23c <tcp_process+0x7d0>)
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	f003 0310 	and.w	r3, r3, #16
 800f094:	2b00      	cmp	r3, #0
 800f096:	f000 80c1 	beq.w	800f21c <tcp_process+0x7b0>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f09e:	4b68      	ldr	r3, [pc, #416]	; (800f240 <tcp_process+0x7d4>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	f040 80ba 	bne.w	800f21c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	f040 80b5 	bne.w	800f21c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2206      	movs	r2, #6
 800f0b6:	751a      	strb	r2, [r3, #20]
      break;
 800f0b8:	e0b0      	b.n	800f21c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 f9ca 	bl	800f454 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f0c0:	4b60      	ldr	r3, [pc, #384]	; (800f244 <tcp_process+0x7d8>)
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	f003 0320 	and.w	r3, r3, #32
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f000 80a9 	beq.w	800f220 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	8b5b      	ldrh	r3, [r3, #26]
 800f0d2:	f043 0302 	orr.w	r3, r3, #2
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7fe fd39 	bl	800db54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f0e2:	4b59      	ldr	r3, [pc, #356]	; (800f248 <tcp_process+0x7dc>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d105      	bne.n	800f0f8 <tcp_process+0x68c>
 800f0ec:	4b56      	ldr	r3, [pc, #344]	; (800f248 <tcp_process+0x7dc>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	4a55      	ldr	r2, [pc, #340]	; (800f248 <tcp_process+0x7dc>)
 800f0f4:	6013      	str	r3, [r2, #0]
 800f0f6:	e013      	b.n	800f120 <tcp_process+0x6b4>
 800f0f8:	4b53      	ldr	r3, [pc, #332]	; (800f248 <tcp_process+0x7dc>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	613b      	str	r3, [r7, #16]
 800f0fe:	e00c      	b.n	800f11a <tcp_process+0x6ae>
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	429a      	cmp	r2, r3
 800f108:	d104      	bne.n	800f114 <tcp_process+0x6a8>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	68da      	ldr	r2, [r3, #12]
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	60da      	str	r2, [r3, #12]
 800f112:	e005      	b.n	800f120 <tcp_process+0x6b4>
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	613b      	str	r3, [r7, #16]
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d1ef      	bne.n	800f100 <tcp_process+0x694>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	60da      	str	r2, [r3, #12]
 800f126:	4b43      	ldr	r3, [pc, #268]	; (800f234 <tcp_process+0x7c8>)
 800f128:	2201      	movs	r2, #1
 800f12a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	220a      	movs	r2, #10
 800f130:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f132:	4b41      	ldr	r3, [pc, #260]	; (800f238 <tcp_process+0x7cc>)
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	60da      	str	r2, [r3, #12]
 800f13a:	4a3f      	ldr	r2, [pc, #252]	; (800f238 <tcp_process+0x7cc>)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6013      	str	r3, [r2, #0]
 800f140:	f002 fc92 	bl	8011a68 <tcp_timer_needed>
      }
      break;
 800f144:	e06c      	b.n	800f220 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f984 	bl	800f454 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f14c:	4b3b      	ldr	r3, [pc, #236]	; (800f23c <tcp_process+0x7d0>)
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	f003 0310 	and.w	r3, r3, #16
 800f154:	2b00      	cmp	r3, #0
 800f156:	d065      	beq.n	800f224 <tcp_process+0x7b8>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f15c:	4b38      	ldr	r3, [pc, #224]	; (800f240 <tcp_process+0x7d4>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	429a      	cmp	r2, r3
 800f162:	d15f      	bne.n	800f224 <tcp_process+0x7b8>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d15b      	bne.n	800f224 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f7fe fcf1 	bl	800db54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f172:	4b35      	ldr	r3, [pc, #212]	; (800f248 <tcp_process+0x7dc>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d105      	bne.n	800f188 <tcp_process+0x71c>
 800f17c:	4b32      	ldr	r3, [pc, #200]	; (800f248 <tcp_process+0x7dc>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	4a31      	ldr	r2, [pc, #196]	; (800f248 <tcp_process+0x7dc>)
 800f184:	6013      	str	r3, [r2, #0]
 800f186:	e013      	b.n	800f1b0 <tcp_process+0x744>
 800f188:	4b2f      	ldr	r3, [pc, #188]	; (800f248 <tcp_process+0x7dc>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	60fb      	str	r3, [r7, #12]
 800f18e:	e00c      	b.n	800f1aa <tcp_process+0x73e>
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	429a      	cmp	r2, r3
 800f198:	d104      	bne.n	800f1a4 <tcp_process+0x738>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	68da      	ldr	r2, [r3, #12]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	60da      	str	r2, [r3, #12]
 800f1a2:	e005      	b.n	800f1b0 <tcp_process+0x744>
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	60fb      	str	r3, [r7, #12]
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d1ef      	bne.n	800f190 <tcp_process+0x724>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	60da      	str	r2, [r3, #12]
 800f1b6:	4b1f      	ldr	r3, [pc, #124]	; (800f234 <tcp_process+0x7c8>)
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	220a      	movs	r2, #10
 800f1c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f1c2:	4b1d      	ldr	r3, [pc, #116]	; (800f238 <tcp_process+0x7cc>)
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	60da      	str	r2, [r3, #12]
 800f1ca:	4a1b      	ldr	r2, [pc, #108]	; (800f238 <tcp_process+0x7cc>)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6013      	str	r3, [r2, #0]
 800f1d0:	f002 fc4a 	bl	8011a68 <tcp_timer_needed>
      }
      break;
 800f1d4:	e026      	b.n	800f224 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 f93c 	bl	800f454 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f1dc:	4b17      	ldr	r3, [pc, #92]	; (800f23c <tcp_process+0x7d0>)
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	f003 0310 	and.w	r3, r3, #16
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d01f      	beq.n	800f228 <tcp_process+0x7bc>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f1ec:	4b14      	ldr	r3, [pc, #80]	; (800f240 <tcp_process+0x7d4>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d119      	bne.n	800f228 <tcp_process+0x7bc>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d115      	bne.n	800f228 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f1fc:	4b11      	ldr	r3, [pc, #68]	; (800f244 <tcp_process+0x7d8>)
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	f043 0310 	orr.w	r3, r3, #16
 800f204:	b2da      	uxtb	r2, r3
 800f206:	4b0f      	ldr	r3, [pc, #60]	; (800f244 <tcp_process+0x7d8>)
 800f208:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f20a:	e00d      	b.n	800f228 <tcp_process+0x7bc>
    default:
      break;
 800f20c:	bf00      	nop
 800f20e:	e00c      	b.n	800f22a <tcp_process+0x7be>
      break;
 800f210:	bf00      	nop
 800f212:	e00a      	b.n	800f22a <tcp_process+0x7be>
      break;
 800f214:	bf00      	nop
 800f216:	e008      	b.n	800f22a <tcp_process+0x7be>
      break;
 800f218:	bf00      	nop
 800f21a:	e006      	b.n	800f22a <tcp_process+0x7be>
      break;
 800f21c:	bf00      	nop
 800f21e:	e004      	b.n	800f22a <tcp_process+0x7be>
      break;
 800f220:	bf00      	nop
 800f222:	e002      	b.n	800f22a <tcp_process+0x7be>
      break;
 800f224:	bf00      	nop
 800f226:	e000      	b.n	800f22a <tcp_process+0x7be>
      break;
 800f228:	bf00      	nop
  }
  return ERR_OK;
 800f22a:	2300      	movs	r3, #0
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3724      	adds	r7, #36	; 0x24
 800f230:	46bd      	mov	sp, r7
 800f232:	bd90      	pop	{r4, r7, pc}
 800f234:	2400816c 	.word	0x2400816c
 800f238:	24008168 	.word	0x24008168
 800f23c:	2400819c 	.word	0x2400819c
 800f240:	24008194 	.word	0x24008194
 800f244:	2400819d 	.word	0x2400819d
 800f248:	24008164 	.word	0x24008164

0800f24c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f24c:	b590      	push	{r4, r7, lr}
 800f24e:	b085      	sub	sp, #20
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d106      	bne.n	800f26a <tcp_oos_insert_segment+0x1e>
 800f25c:	4b3b      	ldr	r3, [pc, #236]	; (800f34c <tcp_oos_insert_segment+0x100>)
 800f25e:	f240 421f 	movw	r2, #1055	; 0x41f
 800f262:	493b      	ldr	r1, [pc, #236]	; (800f350 <tcp_oos_insert_segment+0x104>)
 800f264:	483b      	ldr	r0, [pc, #236]	; (800f354 <tcp_oos_insert_segment+0x108>)
 800f266:	f002 ff4d 	bl	8012104 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	68db      	ldr	r3, [r3, #12]
 800f26e:	899b      	ldrh	r3, [r3, #12]
 800f270:	b29b      	uxth	r3, r3
 800f272:	4618      	mov	r0, r3
 800f274:	f7f9 f90c 	bl	8008490 <lwip_htons>
 800f278:	4603      	mov	r3, r0
 800f27a:	b2db      	uxtb	r3, r3
 800f27c:	f003 0301 	and.w	r3, r3, #1
 800f280:	2b00      	cmp	r3, #0
 800f282:	d028      	beq.n	800f2d6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f284:	6838      	ldr	r0, [r7, #0]
 800f286:	f7fe fa63 	bl	800d750 <tcp_segs_free>
    next = NULL;
 800f28a:	2300      	movs	r3, #0
 800f28c:	603b      	str	r3, [r7, #0]
 800f28e:	e056      	b.n	800f33e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	899b      	ldrh	r3, [r3, #12]
 800f296:	b29b      	uxth	r3, r3
 800f298:	4618      	mov	r0, r3
 800f29a:	f7f9 f8f9 	bl	8008490 <lwip_htons>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	f003 0301 	and.w	r3, r3, #1
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00d      	beq.n	800f2c6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	68db      	ldr	r3, [r3, #12]
 800f2ae:	899b      	ldrh	r3, [r3, #12]
 800f2b0:	b29c      	uxth	r4, r3
 800f2b2:	2001      	movs	r0, #1
 800f2b4:	f7f9 f8ec 	bl	8008490 <lwip_htons>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	4322      	orrs	r2, r4
 800f2c2:	b292      	uxth	r2, r2
 800f2c4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	f7fe fa52 	bl	800d77a <tcp_seg_free>
    while (next &&
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d00e      	beq.n	800f2fa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	891b      	ldrh	r3, [r3, #8]
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	4b1d      	ldr	r3, [pc, #116]	; (800f358 <tcp_oos_insert_segment+0x10c>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	441a      	add	r2, r3
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	6839      	ldr	r1, [r7, #0]
 800f2f0:	8909      	ldrh	r1, [r1, #8]
 800f2f2:	440b      	add	r3, r1
 800f2f4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	daca      	bge.n	800f290 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d01e      	beq.n	800f33e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	891b      	ldrh	r3, [r3, #8]
 800f304:	461a      	mov	r2, r3
 800f306:	4b14      	ldr	r3, [pc, #80]	; (800f358 <tcp_oos_insert_segment+0x10c>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	441a      	add	r2, r3
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f314:	2b00      	cmp	r3, #0
 800f316:	dd12      	ble.n	800f33e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	b29a      	uxth	r2, r3
 800f320:	4b0d      	ldr	r3, [pc, #52]	; (800f358 <tcp_oos_insert_segment+0x10c>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	b29b      	uxth	r3, r3
 800f326:	1ad3      	subs	r3, r2, r3
 800f328:	b29a      	uxth	r2, r3
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	685a      	ldr	r2, [r3, #4]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	891b      	ldrh	r3, [r3, #8]
 800f336:	4619      	mov	r1, r3
 800f338:	4610      	mov	r0, r2
 800f33a:	f7fc fe25 	bl	800bf88 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	683a      	ldr	r2, [r7, #0]
 800f342:	601a      	str	r2, [r3, #0]
}
 800f344:	bf00      	nop
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd90      	pop	{r4, r7, pc}
 800f34c:	08014c0c 	.word	0x08014c0c
 800f350:	08014eec 	.word	0x08014eec
 800f354:	08014c78 	.word	0x08014c78
 800f358:	24008190 	.word	0x24008190

0800f35c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f35c:	b5b0      	push	{r4, r5, r7, lr}
 800f35e:	b086      	sub	sp, #24
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
 800f368:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f36a:	e03e      	b.n	800f3ea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fd f812 	bl	800c3a4 <pbuf_clen>
 800f380:	4603      	mov	r3, r0
 800f382:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f38a:	8a7a      	ldrh	r2, [r7, #18]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d906      	bls.n	800f39e <tcp_free_acked_segments+0x42>
 800f390:	4b2a      	ldr	r3, [pc, #168]	; (800f43c <tcp_free_acked_segments+0xe0>)
 800f392:	f240 4257 	movw	r2, #1111	; 0x457
 800f396:	492a      	ldr	r1, [pc, #168]	; (800f440 <tcp_free_acked_segments+0xe4>)
 800f398:	482a      	ldr	r0, [pc, #168]	; (800f444 <tcp_free_acked_segments+0xe8>)
 800f39a:	f002 feb3 	bl	8012104 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f3a4:	8a7b      	ldrh	r3, [r7, #18]
 800f3a6:	1ad3      	subs	r3, r2, r3
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	891a      	ldrh	r2, [r3, #8]
 800f3b4:	4b24      	ldr	r3, [pc, #144]	; (800f448 <tcp_free_acked_segments+0xec>)
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	4b22      	ldr	r3, [pc, #136]	; (800f448 <tcp_free_acked_segments+0xec>)
 800f3be:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f3c0:	6978      	ldr	r0, [r7, #20]
 800f3c2:	f7fe f9da 	bl	800d77a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d00c      	beq.n	800f3ea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d109      	bne.n	800f3ea <tcp_free_acked_segments+0x8e>
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d106      	bne.n	800f3ea <tcp_free_acked_segments+0x8e>
 800f3dc:	4b17      	ldr	r3, [pc, #92]	; (800f43c <tcp_free_acked_segments+0xe0>)
 800f3de:	f240 4261 	movw	r2, #1121	; 0x461
 800f3e2:	491a      	ldr	r1, [pc, #104]	; (800f44c <tcp_free_acked_segments+0xf0>)
 800f3e4:	4817      	ldr	r0, [pc, #92]	; (800f444 <tcp_free_acked_segments+0xe8>)
 800f3e6:	f002 fe8d 	bl	8012104 <iprintf>
  while (seg_list != NULL &&
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d020      	beq.n	800f432 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7f9 f85f 	bl	80084ba <lwip_htonl>
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	891b      	ldrh	r3, [r3, #8]
 800f402:	461d      	mov	r5, r3
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	68db      	ldr	r3, [r3, #12]
 800f408:	899b      	ldrh	r3, [r3, #12]
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7f9 f83f 	bl	8008490 <lwip_htons>
 800f412:	4603      	mov	r3, r0
 800f414:	b2db      	uxtb	r3, r3
 800f416:	f003 0303 	and.w	r3, r3, #3
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d001      	beq.n	800f422 <tcp_free_acked_segments+0xc6>
 800f41e:	2301      	movs	r3, #1
 800f420:	e000      	b.n	800f424 <tcp_free_acked_segments+0xc8>
 800f422:	2300      	movs	r3, #0
 800f424:	442b      	add	r3, r5
 800f426:	18e2      	adds	r2, r4, r3
 800f428:	4b09      	ldr	r3, [pc, #36]	; (800f450 <tcp_free_acked_segments+0xf4>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f42e:	2b00      	cmp	r3, #0
 800f430:	dd9c      	ble.n	800f36c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f432:	68bb      	ldr	r3, [r7, #8]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3718      	adds	r7, #24
 800f438:	46bd      	mov	sp, r7
 800f43a:	bdb0      	pop	{r4, r5, r7, pc}
 800f43c:	08014c0c 	.word	0x08014c0c
 800f440:	08014f14 	.word	0x08014f14
 800f444:	08014c78 	.word	0x08014c78
 800f448:	24008198 	.word	0x24008198
 800f44c:	08014f3c 	.word	0x08014f3c
 800f450:	24008194 	.word	0x24008194

0800f454 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f454:	b5b0      	push	{r4, r5, r7, lr}
 800f456:	b094      	sub	sp, #80	; 0x50
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f45c:	2300      	movs	r3, #0
 800f45e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d106      	bne.n	800f474 <tcp_receive+0x20>
 800f466:	4b91      	ldr	r3, [pc, #580]	; (800f6ac <tcp_receive+0x258>)
 800f468:	f240 427b 	movw	r2, #1147	; 0x47b
 800f46c:	4990      	ldr	r1, [pc, #576]	; (800f6b0 <tcp_receive+0x25c>)
 800f46e:	4891      	ldr	r0, [pc, #580]	; (800f6b4 <tcp_receive+0x260>)
 800f470:	f002 fe48 	bl	8012104 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	7d1b      	ldrb	r3, [r3, #20]
 800f478:	2b03      	cmp	r3, #3
 800f47a:	d806      	bhi.n	800f48a <tcp_receive+0x36>
 800f47c:	4b8b      	ldr	r3, [pc, #556]	; (800f6ac <tcp_receive+0x258>)
 800f47e:	f240 427c 	movw	r2, #1148	; 0x47c
 800f482:	498d      	ldr	r1, [pc, #564]	; (800f6b8 <tcp_receive+0x264>)
 800f484:	488b      	ldr	r0, [pc, #556]	; (800f6b4 <tcp_receive+0x260>)
 800f486:	f002 fe3d 	bl	8012104 <iprintf>

  if (flags & TCP_ACK) {
 800f48a:	4b8c      	ldr	r3, [pc, #560]	; (800f6bc <tcp_receive+0x268>)
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	f003 0310 	and.w	r3, r3, #16
 800f492:	2b00      	cmp	r3, #0
 800f494:	f000 8264 	beq.w	800f960 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f49e:	461a      	mov	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4a4:	4413      	add	r3, r2
 800f4a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4ac:	4b84      	ldr	r3, [pc, #528]	; (800f6c0 <tcp_receive+0x26c>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	1ad3      	subs	r3, r2, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	db1b      	blt.n	800f4ee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4ba:	4b81      	ldr	r3, [pc, #516]	; (800f6c0 <tcp_receive+0x26c>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d106      	bne.n	800f4d0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f4c6:	4b7f      	ldr	r3, [pc, #508]	; (800f6c4 <tcp_receive+0x270>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	db0e      	blt.n	800f4ee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f4d4:	4b7b      	ldr	r3, [pc, #492]	; (800f6c4 <tcp_receive+0x270>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d125      	bne.n	800f528 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f4dc:	4b7a      	ldr	r3, [pc, #488]	; (800f6c8 <tcp_receive+0x274>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	89db      	ldrh	r3, [r3, #14]
 800f4e2:	b29a      	uxth	r2, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d91c      	bls.n	800f528 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f4ee:	4b76      	ldr	r3, [pc, #472]	; (800f6c8 <tcp_receive+0x274>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	89db      	ldrh	r3, [r3, #14]
 800f4f4:	b29a      	uxth	r2, r3
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f508:	429a      	cmp	r2, r3
 800f50a:	d205      	bcs.n	800f518 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f518:	4b69      	ldr	r3, [pc, #420]	; (800f6c0 <tcp_receive+0x26c>)
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f520:	4b68      	ldr	r3, [pc, #416]	; (800f6c4 <tcp_receive+0x270>)
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f528:	4b66      	ldr	r3, [pc, #408]	; (800f6c4 <tcp_receive+0x270>)
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	2b00      	cmp	r3, #0
 800f534:	dc58      	bgt.n	800f5e8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f536:	4b65      	ldr	r3, [pc, #404]	; (800f6cc <tcp_receive+0x278>)
 800f538:	881b      	ldrh	r3, [r3, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d14b      	bne.n	800f5d6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f548:	4413      	add	r3, r2
 800f54a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d142      	bne.n	800f5d6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f556:	2b00      	cmp	r3, #0
 800f558:	db3d      	blt.n	800f5d6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f55e:	4b59      	ldr	r3, [pc, #356]	; (800f6c4 <tcp_receive+0x270>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	429a      	cmp	r2, r3
 800f564:	d137      	bne.n	800f5d6 <tcp_receive+0x182>
              found_dupack = 1;
 800f566:	2301      	movs	r3, #1
 800f568:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f570:	2bff      	cmp	r3, #255	; 0xff
 800f572:	d007      	beq.n	800f584 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f57a:	3301      	adds	r3, #1
 800f57c:	b2da      	uxtb	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f58a:	2b03      	cmp	r3, #3
 800f58c:	d91b      	bls.n	800f5c6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f598:	4413      	add	r3, r2
 800f59a:	b29a      	uxth	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d30a      	bcc.n	800f5bc <tcp_receive+0x168>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5b0:	4413      	add	r3, r2
 800f5b2:	b29a      	uxth	r2, r3
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f5ba:	e004      	b.n	800f5c6 <tcp_receive+0x172>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f5cc:	2b02      	cmp	r3, #2
 800f5ce:	d902      	bls.n	800f5d6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f001 feeb 	bl	80113ac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f5d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f040 8161 	bne.w	800f8a0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f5e6:	e15b      	b.n	800f8a0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f5e8:	4b36      	ldr	r3, [pc, #216]	; (800f6c4 <tcp_receive+0x270>)
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f2c0 814e 	blt.w	800f896 <tcp_receive+0x442>
 800f5fa:	4b32      	ldr	r3, [pc, #200]	; (800f6c4 <tcp_receive+0x270>)
 800f5fc:	681a      	ldr	r2, [r3, #0]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f602:	1ad3      	subs	r3, r2, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	f300 8146 	bgt.w	800f896 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	8b5b      	ldrh	r3, [r3, #26]
 800f60e:	f003 0304 	and.w	r3, r3, #4
 800f612:	2b00      	cmp	r3, #0
 800f614:	d010      	beq.n	800f638 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	8b5b      	ldrh	r3, [r3, #26]
 800f61a:	f023 0304 	bic.w	r3, r3, #4
 800f61e:	b29a      	uxth	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2200      	movs	r2, #0
 800f634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2200      	movs	r2, #0
 800f63c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f646:	10db      	asrs	r3, r3, #3
 800f648:	b21b      	sxth	r3, r3
 800f64a:	b29a      	uxth	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f652:	b29b      	uxth	r3, r3
 800f654:	4413      	add	r3, r2
 800f656:	b29b      	uxth	r3, r3
 800f658:	b21a      	sxth	r2, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f660:	4b18      	ldr	r3, [pc, #96]	; (800f6c4 <tcp_receive+0x270>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	b29a      	uxth	r2, r3
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	1ad3      	subs	r3, r2, r3
 800f66e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f678:	4b12      	ldr	r3, [pc, #72]	; (800f6c4 <tcp_receive+0x270>)
 800f67a:	681a      	ldr	r2, [r3, #0]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	7d1b      	ldrb	r3, [r3, #20]
 800f684:	2b03      	cmp	r3, #3
 800f686:	f240 8097 	bls.w	800f7b8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f696:	429a      	cmp	r2, r3
 800f698:	d245      	bcs.n	800f726 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	8b5b      	ldrh	r3, [r3, #26]
 800f69e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d014      	beq.n	800f6d0 <tcp_receive+0x27c>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e013      	b.n	800f6d2 <tcp_receive+0x27e>
 800f6aa:	bf00      	nop
 800f6ac:	08014c0c 	.word	0x08014c0c
 800f6b0:	08014f5c 	.word	0x08014f5c
 800f6b4:	08014c78 	.word	0x08014c78
 800f6b8:	08014f78 	.word	0x08014f78
 800f6bc:	2400819c 	.word	0x2400819c
 800f6c0:	24008190 	.word	0x24008190
 800f6c4:	24008194 	.word	0x24008194
 800f6c8:	24008180 	.word	0x24008180
 800f6cc:	2400819a 	.word	0x2400819a
 800f6d0:	2302      	movs	r3, #2
 800f6d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f6d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6e0:	fb12 f303 	smulbb	r3, r2, r3
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	bf28      	it	cs
 800f6ec:	4613      	movcs	r3, r2
 800f6ee:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f6f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f6f8:	4413      	add	r3, r2
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f702:	429a      	cmp	r2, r3
 800f704:	d309      	bcc.n	800f71a <tcp_receive+0x2c6>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f70c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f70e:	4413      	add	r3, r2
 800f710:	b29a      	uxth	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f718:	e04e      	b.n	800f7b8 <tcp_receive+0x364>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f720:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f724:	e048      	b.n	800f7b8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f72c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f72e:	4413      	add	r3, r2
 800f730:	b29a      	uxth	r2, r3
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f738:	429a      	cmp	r2, r3
 800f73a:	d309      	bcc.n	800f750 <tcp_receive+0x2fc>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f742:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f744:	4413      	add	r3, r2
 800f746:	b29a      	uxth	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f74e:	e004      	b.n	800f75a <tcp_receive+0x306>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f756:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f766:	429a      	cmp	r2, r3
 800f768:	d326      	bcc.n	800f7b8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f776:	1ad3      	subs	r3, r2, r3
 800f778:	b29a      	uxth	r2, r3
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f78a:	4413      	add	r3, r2
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f794:	429a      	cmp	r2, r3
 800f796:	d30a      	bcc.n	800f7ae <tcp_receive+0x35a>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7a2:	4413      	add	r3, r2
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f7ac:	e004      	b.n	800f7b8 <tcp_receive+0x364>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7c0:	4a98      	ldr	r2, [pc, #608]	; (800fa24 <tcp_receive+0x5d0>)
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f7ff fdca 	bl	800f35c <tcp_free_acked_segments>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7d6:	4a94      	ldr	r2, [pc, #592]	; (800fa28 <tcp_receive+0x5d4>)
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7ff fdbf 	bl	800f35c <tcp_free_acked_segments>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d104      	bne.n	800f7f6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7f2:	861a      	strh	r2, [r3, #48]	; 0x30
 800f7f4:	e002      	b.n	800f7fc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2200      	movs	r2, #0
 800f800:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f806:	2b00      	cmp	r3, #0
 800f808:	d103      	bne.n	800f812 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2200      	movs	r2, #0
 800f80e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f818:	4b84      	ldr	r3, [pc, #528]	; (800fa2c <tcp_receive+0x5d8>)
 800f81a:	881b      	ldrh	r3, [r3, #0]
 800f81c:	4413      	add	r3, r2
 800f81e:	b29a      	uxth	r2, r3
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	8b5b      	ldrh	r3, [r3, #26]
 800f82a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d035      	beq.n	800f89e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f836:	2b00      	cmp	r3, #0
 800f838:	d118      	bne.n	800f86c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00c      	beq.n	800f85c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	4618      	mov	r0, r3
 800f850:	f7f8 fe33 	bl	80084ba <lwip_htonl>
 800f854:	4603      	mov	r3, r0
 800f856:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f858:	2b00      	cmp	r3, #0
 800f85a:	dc20      	bgt.n	800f89e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	8b5b      	ldrh	r3, [r3, #26]
 800f860:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f864:	b29a      	uxth	r2, r3
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f86a:	e018      	b.n	800f89e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	4618      	mov	r0, r3
 800f87a:	f7f8 fe1e 	bl	80084ba <lwip_htonl>
 800f87e:	4603      	mov	r3, r0
 800f880:	1ae3      	subs	r3, r4, r3
 800f882:	2b00      	cmp	r3, #0
 800f884:	dc0b      	bgt.n	800f89e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	8b5b      	ldrh	r3, [r3, #26]
 800f88a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f88e:	b29a      	uxth	r2, r3
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f894:	e003      	b.n	800f89e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f001 ff76 	bl	8011788 <tcp_send_empty_ack>
 800f89c:	e000      	b.n	800f8a0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f89e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d05b      	beq.n	800f960 <tcp_receive+0x50c>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8ac:	4b60      	ldr	r3, [pc, #384]	; (800fa30 <tcp_receive+0x5dc>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	da54      	bge.n	800f960 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f8b6:	4b5f      	ldr	r3, [pc, #380]	; (800fa34 <tcp_receive+0x5e0>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	1ad3      	subs	r3, r2, r3
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f8ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f8d4:	10db      	asrs	r3, r3, #3
 800f8d6:	b21b      	sxth	r3, r3
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	1ad3      	subs	r3, r2, r3
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f8e8:	b29a      	uxth	r2, r3
 800f8ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f8ee:	4413      	add	r3, r2
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	b21a      	sxth	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f8f8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	da05      	bge.n	800f90c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f904:	425b      	negs	r3, r3
 800f906:	b29b      	uxth	r3, r3
 800f908:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f90c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f916:	109b      	asrs	r3, r3, #2
 800f918:	b21b      	sxth	r3, r3
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	1ad3      	subs	r3, r2, r3
 800f91e:	b29b      	uxth	r3, r3
 800f920:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f930:	4413      	add	r3, r2
 800f932:	b29b      	uxth	r3, r3
 800f934:	b21a      	sxth	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f940:	10db      	asrs	r3, r3, #3
 800f942:	b21b      	sxth	r3, r3
 800f944:	b29a      	uxth	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	4413      	add	r3, r2
 800f950:	b29b      	uxth	r3, r3
 800f952:	b21a      	sxth	r2, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2200      	movs	r2, #0
 800f95e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f960:	4b35      	ldr	r3, [pc, #212]	; (800fa38 <tcp_receive+0x5e4>)
 800f962:	881b      	ldrh	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	f000 84e2 	beq.w	801032e <tcp_receive+0xeda>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	7d1b      	ldrb	r3, [r3, #20]
 800f96e:	2b06      	cmp	r3, #6
 800f970:	f200 84dd 	bhi.w	801032e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f978:	4b30      	ldr	r3, [pc, #192]	; (800fa3c <tcp_receive+0x5e8>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	3b01      	subs	r3, #1
 800f980:	2b00      	cmp	r3, #0
 800f982:	f2c0 808f 	blt.w	800faa4 <tcp_receive+0x650>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f98a:	4b2b      	ldr	r3, [pc, #172]	; (800fa38 <tcp_receive+0x5e4>)
 800f98c:	881b      	ldrh	r3, [r3, #0]
 800f98e:	4619      	mov	r1, r3
 800f990:	4b2a      	ldr	r3, [pc, #168]	; (800fa3c <tcp_receive+0x5e8>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	440b      	add	r3, r1
 800f996:	1ad3      	subs	r3, r2, r3
 800f998:	3301      	adds	r3, #1
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f300 8082 	bgt.w	800faa4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f9a0:	4b27      	ldr	r3, [pc, #156]	; (800fa40 <tcp_receive+0x5ec>)
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9aa:	4b24      	ldr	r3, [pc, #144]	; (800fa3c <tcp_receive+0x5e8>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	1ad3      	subs	r3, r2, r3
 800f9b0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f9b2:	4b23      	ldr	r3, [pc, #140]	; (800fa40 <tcp_receive+0x5ec>)
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d106      	bne.n	800f9c8 <tcp_receive+0x574>
 800f9ba:	4b22      	ldr	r3, [pc, #136]	; (800fa44 <tcp_receive+0x5f0>)
 800f9bc:	f240 5294 	movw	r2, #1428	; 0x594
 800f9c0:	4921      	ldr	r1, [pc, #132]	; (800fa48 <tcp_receive+0x5f4>)
 800f9c2:	4822      	ldr	r0, [pc, #136]	; (800fa4c <tcp_receive+0x5f8>)
 800f9c4:	f002 fb9e 	bl	8012104 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d906      	bls.n	800f9e0 <tcp_receive+0x58c>
 800f9d2:	4b1c      	ldr	r3, [pc, #112]	; (800fa44 <tcp_receive+0x5f0>)
 800f9d4:	f240 5295 	movw	r2, #1429	; 0x595
 800f9d8:	491d      	ldr	r1, [pc, #116]	; (800fa50 <tcp_receive+0x5fc>)
 800f9da:	481c      	ldr	r0, [pc, #112]	; (800fa4c <tcp_receive+0x5f8>)
 800f9dc:	f002 fb92 	bl	8012104 <iprintf>
      off = (u16_t)off32;
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f9e6:	4b16      	ldr	r3, [pc, #88]	; (800fa40 <tcp_receive+0x5ec>)
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	891b      	ldrh	r3, [r3, #8]
 800f9ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d906      	bls.n	800fa02 <tcp_receive+0x5ae>
 800f9f4:	4b13      	ldr	r3, [pc, #76]	; (800fa44 <tcp_receive+0x5f0>)
 800f9f6:	f240 5297 	movw	r2, #1431	; 0x597
 800f9fa:	4916      	ldr	r1, [pc, #88]	; (800fa54 <tcp_receive+0x600>)
 800f9fc:	4813      	ldr	r0, [pc, #76]	; (800fa4c <tcp_receive+0x5f8>)
 800f9fe:	f002 fb81 	bl	8012104 <iprintf>
      inseg.len -= off;
 800fa02:	4b0f      	ldr	r3, [pc, #60]	; (800fa40 <tcp_receive+0x5ec>)
 800fa04:	891a      	ldrh	r2, [r3, #8]
 800fa06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa0a:	1ad3      	subs	r3, r2, r3
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	4b0c      	ldr	r3, [pc, #48]	; (800fa40 <tcp_receive+0x5ec>)
 800fa10:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fa12:	4b0b      	ldr	r3, [pc, #44]	; (800fa40 <tcp_receive+0x5ec>)
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	891a      	ldrh	r2, [r3, #8]
 800fa18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa1c:	1ad3      	subs	r3, r2, r3
 800fa1e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fa20:	e02a      	b.n	800fa78 <tcp_receive+0x624>
 800fa22:	bf00      	nop
 800fa24:	08014f94 	.word	0x08014f94
 800fa28:	08014f9c 	.word	0x08014f9c
 800fa2c:	24008198 	.word	0x24008198
 800fa30:	24008194 	.word	0x24008194
 800fa34:	24008158 	.word	0x24008158
 800fa38:	2400819a 	.word	0x2400819a
 800fa3c:	24008190 	.word	0x24008190
 800fa40:	24008170 	.word	0x24008170
 800fa44:	08014c0c 	.word	0x08014c0c
 800fa48:	08014fa4 	.word	0x08014fa4
 800fa4c:	08014c78 	.word	0x08014c78
 800fa50:	08014fb4 	.word	0x08014fb4
 800fa54:	08014fc4 	.word	0x08014fc4
        off -= p->len;
 800fa58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa5a:	895b      	ldrh	r3, [r3, #10]
 800fa5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa60:	1ad3      	subs	r3, r2, r3
 800fa62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fa66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fa6a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fa6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa6e:	2200      	movs	r2, #0
 800fa70:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fa72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fa78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa7a:	895b      	ldrh	r3, [r3, #10]
 800fa7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d8e9      	bhi.n	800fa58 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fa84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa88:	4619      	mov	r1, r3
 800fa8a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fa8c:	f7fc fb7c 	bl	800c188 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa94:	4a91      	ldr	r2, [pc, #580]	; (800fcdc <tcp_receive+0x888>)
 800fa96:	6013      	str	r3, [r2, #0]
 800fa98:	4b91      	ldr	r3, [pc, #580]	; (800fce0 <tcp_receive+0x88c>)
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	4a8f      	ldr	r2, [pc, #572]	; (800fcdc <tcp_receive+0x888>)
 800fa9e:	6812      	ldr	r2, [r2, #0]
 800faa0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800faa2:	e00d      	b.n	800fac0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800faa4:	4b8d      	ldr	r3, [pc, #564]	; (800fcdc <tcp_receive+0x888>)
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faac:	1ad3      	subs	r3, r2, r3
 800faae:	2b00      	cmp	r3, #0
 800fab0:	da06      	bge.n	800fac0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	8b5b      	ldrh	r3, [r3, #26]
 800fab6:	f043 0302 	orr.w	r3, r3, #2
 800faba:	b29a      	uxth	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fac0:	4b86      	ldr	r3, [pc, #536]	; (800fcdc <tcp_receive+0x888>)
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac8:	1ad3      	subs	r3, r2, r3
 800faca:	2b00      	cmp	r3, #0
 800facc:	f2c0 842a 	blt.w	8010324 <tcp_receive+0xed0>
 800fad0:	4b82      	ldr	r3, [pc, #520]	; (800fcdc <tcp_receive+0x888>)
 800fad2:	681a      	ldr	r2, [r3, #0]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad8:	6879      	ldr	r1, [r7, #4]
 800fada:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fadc:	440b      	add	r3, r1
 800fade:	1ad3      	subs	r3, r2, r3
 800fae0:	3301      	adds	r3, #1
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f300 841e 	bgt.w	8010324 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800faec:	4b7b      	ldr	r3, [pc, #492]	; (800fcdc <tcp_receive+0x888>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	f040 829a 	bne.w	801002a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800faf6:	4b7a      	ldr	r3, [pc, #488]	; (800fce0 <tcp_receive+0x88c>)
 800faf8:	891c      	ldrh	r4, [r3, #8]
 800fafa:	4b79      	ldr	r3, [pc, #484]	; (800fce0 <tcp_receive+0x88c>)
 800fafc:	68db      	ldr	r3, [r3, #12]
 800fafe:	899b      	ldrh	r3, [r3, #12]
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7f8 fcc4 	bl	8008490 <lwip_htons>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	f003 0303 	and.w	r3, r3, #3
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d001      	beq.n	800fb18 <tcp_receive+0x6c4>
 800fb14:	2301      	movs	r3, #1
 800fb16:	e000      	b.n	800fb1a <tcp_receive+0x6c6>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	4423      	add	r3, r4
 800fb1c:	b29a      	uxth	r2, r3
 800fb1e:	4b71      	ldr	r3, [pc, #452]	; (800fce4 <tcp_receive+0x890>)
 800fb20:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb26:	4b6f      	ldr	r3, [pc, #444]	; (800fce4 <tcp_receive+0x890>)
 800fb28:	881b      	ldrh	r3, [r3, #0]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d275      	bcs.n	800fc1a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fb2e:	4b6c      	ldr	r3, [pc, #432]	; (800fce0 <tcp_receive+0x88c>)
 800fb30:	68db      	ldr	r3, [r3, #12]
 800fb32:	899b      	ldrh	r3, [r3, #12]
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7f8 fcaa 	bl	8008490 <lwip_htons>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	f003 0301 	and.w	r3, r3, #1
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d01f      	beq.n	800fb88 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fb48:	4b65      	ldr	r3, [pc, #404]	; (800fce0 <tcp_receive+0x88c>)
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	899b      	ldrh	r3, [r3, #12]
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	b21b      	sxth	r3, r3
 800fb52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fb56:	b21c      	sxth	r4, r3
 800fb58:	4b61      	ldr	r3, [pc, #388]	; (800fce0 <tcp_receive+0x88c>)
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	899b      	ldrh	r3, [r3, #12]
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7f8 fc95 	bl	8008490 <lwip_htons>
 800fb66:	4603      	mov	r3, r0
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7f8 fc8c 	bl	8008490 <lwip_htons>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	b21b      	sxth	r3, r3
 800fb7c:	4323      	orrs	r3, r4
 800fb7e:	b21a      	sxth	r2, r3
 800fb80:	4b57      	ldr	r3, [pc, #348]	; (800fce0 <tcp_receive+0x88c>)
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	b292      	uxth	r2, r2
 800fb86:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb8c:	4b54      	ldr	r3, [pc, #336]	; (800fce0 <tcp_receive+0x88c>)
 800fb8e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fb90:	4b53      	ldr	r3, [pc, #332]	; (800fce0 <tcp_receive+0x88c>)
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	899b      	ldrh	r3, [r3, #12]
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7f8 fc79 	bl	8008490 <lwip_htons>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	f003 0302 	and.w	r3, r3, #2
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d005      	beq.n	800fbb6 <tcp_receive+0x762>
            inseg.len -= 1;
 800fbaa:	4b4d      	ldr	r3, [pc, #308]	; (800fce0 <tcp_receive+0x88c>)
 800fbac:	891b      	ldrh	r3, [r3, #8]
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	4b4b      	ldr	r3, [pc, #300]	; (800fce0 <tcp_receive+0x88c>)
 800fbb4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fbb6:	4b4a      	ldr	r3, [pc, #296]	; (800fce0 <tcp_receive+0x88c>)
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	4a49      	ldr	r2, [pc, #292]	; (800fce0 <tcp_receive+0x88c>)
 800fbbc:	8912      	ldrh	r2, [r2, #8]
 800fbbe:	4611      	mov	r1, r2
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fc f9e1 	bl	800bf88 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fbc6:	4b46      	ldr	r3, [pc, #280]	; (800fce0 <tcp_receive+0x88c>)
 800fbc8:	891c      	ldrh	r4, [r3, #8]
 800fbca:	4b45      	ldr	r3, [pc, #276]	; (800fce0 <tcp_receive+0x88c>)
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	899b      	ldrh	r3, [r3, #12]
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7f8 fc5c 	bl	8008490 <lwip_htons>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	b2db      	uxtb	r3, r3
 800fbdc:	f003 0303 	and.w	r3, r3, #3
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d001      	beq.n	800fbe8 <tcp_receive+0x794>
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e000      	b.n	800fbea <tcp_receive+0x796>
 800fbe8:	2300      	movs	r3, #0
 800fbea:	4423      	add	r3, r4
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	4b3d      	ldr	r3, [pc, #244]	; (800fce4 <tcp_receive+0x890>)
 800fbf0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fbf2:	4b3c      	ldr	r3, [pc, #240]	; (800fce4 <tcp_receive+0x890>)
 800fbf4:	881b      	ldrh	r3, [r3, #0]
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	4b38      	ldr	r3, [pc, #224]	; (800fcdc <tcp_receive+0x888>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	441a      	add	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc02:	6879      	ldr	r1, [r7, #4]
 800fc04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc06:	440b      	add	r3, r1
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d006      	beq.n	800fc1a <tcp_receive+0x7c6>
 800fc0c:	4b36      	ldr	r3, [pc, #216]	; (800fce8 <tcp_receive+0x894>)
 800fc0e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fc12:	4936      	ldr	r1, [pc, #216]	; (800fcec <tcp_receive+0x898>)
 800fc14:	4836      	ldr	r0, [pc, #216]	; (800fcf0 <tcp_receive+0x89c>)
 800fc16:	f002 fa75 	bl	8012104 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f000 80e7 	beq.w	800fdf2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc24:	4b2e      	ldr	r3, [pc, #184]	; (800fce0 <tcp_receive+0x88c>)
 800fc26:	68db      	ldr	r3, [r3, #12]
 800fc28:	899b      	ldrh	r3, [r3, #12]
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7f8 fc2f 	bl	8008490 <lwip_htons>
 800fc32:	4603      	mov	r3, r0
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	f003 0301 	and.w	r3, r3, #1
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d010      	beq.n	800fc60 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fc3e:	e00a      	b.n	800fc56 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc44:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f7fd fd92 	bl	800d77a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d1f0      	bne.n	800fc40 <tcp_receive+0x7ec>
 800fc5e:	e0c8      	b.n	800fdf2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc64:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fc66:	e052      	b.n	800fd0e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fc68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	899b      	ldrh	r3, [r3, #12]
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7f8 fc0d 	bl	8008490 <lwip_htons>
 800fc76:	4603      	mov	r3, r0
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	f003 0301 	and.w	r3, r3, #1
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d03d      	beq.n	800fcfe <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fc82:	4b17      	ldr	r3, [pc, #92]	; (800fce0 <tcp_receive+0x88c>)
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	899b      	ldrh	r3, [r3, #12]
 800fc88:	b29b      	uxth	r3, r3
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7f8 fc00 	bl	8008490 <lwip_htons>
 800fc90:	4603      	mov	r3, r0
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d130      	bne.n	800fcfe <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fc9c:	4b10      	ldr	r3, [pc, #64]	; (800fce0 <tcp_receive+0x88c>)
 800fc9e:	68db      	ldr	r3, [r3, #12]
 800fca0:	899b      	ldrh	r3, [r3, #12]
 800fca2:	b29c      	uxth	r4, r3
 800fca4:	2001      	movs	r0, #1
 800fca6:	f7f8 fbf3 	bl	8008490 <lwip_htons>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	461a      	mov	r2, r3
 800fcae:	4b0c      	ldr	r3, [pc, #48]	; (800fce0 <tcp_receive+0x88c>)
 800fcb0:	68db      	ldr	r3, [r3, #12]
 800fcb2:	4322      	orrs	r2, r4
 800fcb4:	b292      	uxth	r2, r2
 800fcb6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fcb8:	4b09      	ldr	r3, [pc, #36]	; (800fce0 <tcp_receive+0x88c>)
 800fcba:	891c      	ldrh	r4, [r3, #8]
 800fcbc:	4b08      	ldr	r3, [pc, #32]	; (800fce0 <tcp_receive+0x88c>)
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	899b      	ldrh	r3, [r3, #12]
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7f8 fbe3 	bl	8008490 <lwip_htons>
 800fcca:	4603      	mov	r3, r0
 800fccc:	b2db      	uxtb	r3, r3
 800fcce:	f003 0303 	and.w	r3, r3, #3
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00e      	beq.n	800fcf4 <tcp_receive+0x8a0>
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	e00d      	b.n	800fcf6 <tcp_receive+0x8a2>
 800fcda:	bf00      	nop
 800fcdc:	24008190 	.word	0x24008190
 800fce0:	24008170 	.word	0x24008170
 800fce4:	2400819a 	.word	0x2400819a
 800fce8:	08014c0c 	.word	0x08014c0c
 800fcec:	08014fd4 	.word	0x08014fd4
 800fcf0:	08014c78 	.word	0x08014c78
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	4423      	add	r3, r4
 800fcf8:	b29a      	uxth	r2, r3
 800fcfa:	4b98      	ldr	r3, [pc, #608]	; (800ff5c <tcp_receive+0xb08>)
 800fcfc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fcfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd00:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fd08:	6938      	ldr	r0, [r7, #16]
 800fd0a:	f7fd fd36 	bl	800d77a <tcp_seg_free>
            while (next &&
 800fd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d00e      	beq.n	800fd32 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fd14:	4b91      	ldr	r3, [pc, #580]	; (800ff5c <tcp_receive+0xb08>)
 800fd16:	881b      	ldrh	r3, [r3, #0]
 800fd18:	461a      	mov	r2, r3
 800fd1a:	4b91      	ldr	r3, [pc, #580]	; (800ff60 <tcp_receive+0xb0c>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	441a      	add	r2, r3
 800fd20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd28:	8909      	ldrh	r1, [r1, #8]
 800fd2a:	440b      	add	r3, r1
 800fd2c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	da9a      	bge.n	800fc68 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d059      	beq.n	800fdec <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800fd38:	4b88      	ldr	r3, [pc, #544]	; (800ff5c <tcp_receive+0xb08>)
 800fd3a:	881b      	ldrh	r3, [r3, #0]
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	4b88      	ldr	r3, [pc, #544]	; (800ff60 <tcp_receive+0xb0c>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	441a      	add	r2, r3
 800fd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	dd4d      	ble.n	800fdec <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	4b81      	ldr	r3, [pc, #516]	; (800ff60 <tcp_receive+0xb0c>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	1ad3      	subs	r3, r2, r3
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	4b80      	ldr	r3, [pc, #512]	; (800ff64 <tcp_receive+0xb10>)
 800fd64:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fd66:	4b7f      	ldr	r3, [pc, #508]	; (800ff64 <tcp_receive+0xb10>)
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	899b      	ldrh	r3, [r3, #12]
 800fd6c:	b29b      	uxth	r3, r3
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7f8 fb8e 	bl	8008490 <lwip_htons>
 800fd74:	4603      	mov	r3, r0
 800fd76:	b2db      	uxtb	r3, r3
 800fd78:	f003 0302 	and.w	r3, r3, #2
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d005      	beq.n	800fd8c <tcp_receive+0x938>
                inseg.len -= 1;
 800fd80:	4b78      	ldr	r3, [pc, #480]	; (800ff64 <tcp_receive+0xb10>)
 800fd82:	891b      	ldrh	r3, [r3, #8]
 800fd84:	3b01      	subs	r3, #1
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	4b76      	ldr	r3, [pc, #472]	; (800ff64 <tcp_receive+0xb10>)
 800fd8a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fd8c:	4b75      	ldr	r3, [pc, #468]	; (800ff64 <tcp_receive+0xb10>)
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	4a74      	ldr	r2, [pc, #464]	; (800ff64 <tcp_receive+0xb10>)
 800fd92:	8912      	ldrh	r2, [r2, #8]
 800fd94:	4611      	mov	r1, r2
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7fc f8f6 	bl	800bf88 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fd9c:	4b71      	ldr	r3, [pc, #452]	; (800ff64 <tcp_receive+0xb10>)
 800fd9e:	891c      	ldrh	r4, [r3, #8]
 800fda0:	4b70      	ldr	r3, [pc, #448]	; (800ff64 <tcp_receive+0xb10>)
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	899b      	ldrh	r3, [r3, #12]
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7f8 fb71 	bl	8008490 <lwip_htons>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	f003 0303 	and.w	r3, r3, #3
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d001      	beq.n	800fdbe <tcp_receive+0x96a>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e000      	b.n	800fdc0 <tcp_receive+0x96c>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	4423      	add	r3, r4
 800fdc2:	b29a      	uxth	r2, r3
 800fdc4:	4b65      	ldr	r3, [pc, #404]	; (800ff5c <tcp_receive+0xb08>)
 800fdc6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fdc8:	4b64      	ldr	r3, [pc, #400]	; (800ff5c <tcp_receive+0xb08>)
 800fdca:	881b      	ldrh	r3, [r3, #0]
 800fdcc:	461a      	mov	r2, r3
 800fdce:	4b64      	ldr	r3, [pc, #400]	; (800ff60 <tcp_receive+0xb0c>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	441a      	add	r2, r3
 800fdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdd6:	68db      	ldr	r3, [r3, #12]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d006      	beq.n	800fdec <tcp_receive+0x998>
 800fdde:	4b62      	ldr	r3, [pc, #392]	; (800ff68 <tcp_receive+0xb14>)
 800fde0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fde4:	4961      	ldr	r1, [pc, #388]	; (800ff6c <tcp_receive+0xb18>)
 800fde6:	4862      	ldr	r0, [pc, #392]	; (800ff70 <tcp_receive+0xb1c>)
 800fde8:	f002 f98c 	bl	8012104 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fdf0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fdf2:	4b5a      	ldr	r3, [pc, #360]	; (800ff5c <tcp_receive+0xb08>)
 800fdf4:	881b      	ldrh	r3, [r3, #0]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	4b59      	ldr	r3, [pc, #356]	; (800ff60 <tcp_receive+0xb0c>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	441a      	add	r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fe06:	4b55      	ldr	r3, [pc, #340]	; (800ff5c <tcp_receive+0xb08>)
 800fe08:	881b      	ldrh	r3, [r3, #0]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d206      	bcs.n	800fe1c <tcp_receive+0x9c8>
 800fe0e:	4b56      	ldr	r3, [pc, #344]	; (800ff68 <tcp_receive+0xb14>)
 800fe10:	f240 6207 	movw	r2, #1543	; 0x607
 800fe14:	4957      	ldr	r1, [pc, #348]	; (800ff74 <tcp_receive+0xb20>)
 800fe16:	4856      	ldr	r0, [pc, #344]	; (800ff70 <tcp_receive+0xb1c>)
 800fe18:	f002 f974 	bl	8012104 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fe20:	4b4e      	ldr	r3, [pc, #312]	; (800ff5c <tcp_receive+0xb08>)
 800fe22:	881b      	ldrh	r3, [r3, #0]
 800fe24:	1ad3      	subs	r3, r2, r3
 800fe26:	b29a      	uxth	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7fc ffc5 	bl	800cdbc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fe32:	4b4c      	ldr	r3, [pc, #304]	; (800ff64 <tcp_receive+0xb10>)
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	891b      	ldrh	r3, [r3, #8]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d006      	beq.n	800fe4a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800fe3c:	4b49      	ldr	r3, [pc, #292]	; (800ff64 <tcp_receive+0xb10>)
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	4a4d      	ldr	r2, [pc, #308]	; (800ff78 <tcp_receive+0xb24>)
 800fe42:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fe44:	4b47      	ldr	r3, [pc, #284]	; (800ff64 <tcp_receive+0xb10>)
 800fe46:	2200      	movs	r2, #0
 800fe48:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fe4a:	4b46      	ldr	r3, [pc, #280]	; (800ff64 <tcp_receive+0xb10>)
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	899b      	ldrh	r3, [r3, #12]
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7f8 fb1c 	bl	8008490 <lwip_htons>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	f003 0301 	and.w	r3, r3, #1
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	f000 80b8 	beq.w	800ffd6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fe66:	4b45      	ldr	r3, [pc, #276]	; (800ff7c <tcp_receive+0xb28>)
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	f043 0320 	orr.w	r3, r3, #32
 800fe6e:	b2da      	uxtb	r2, r3
 800fe70:	4b42      	ldr	r3, [pc, #264]	; (800ff7c <tcp_receive+0xb28>)
 800fe72:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fe74:	e0af      	b.n	800ffd6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe7a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	4a36      	ldr	r2, [pc, #216]	; (800ff60 <tcp_receive+0xb0c>)
 800fe86:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	891b      	ldrh	r3, [r3, #8]
 800fe8c:	461c      	mov	r4, r3
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	68db      	ldr	r3, [r3, #12]
 800fe92:	899b      	ldrh	r3, [r3, #12]
 800fe94:	b29b      	uxth	r3, r3
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7f8 fafa 	bl	8008490 <lwip_htons>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	f003 0303 	and.w	r3, r3, #3
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d001      	beq.n	800feac <tcp_receive+0xa58>
 800fea8:	2301      	movs	r3, #1
 800feaa:	e000      	b.n	800feae <tcp_receive+0xa5a>
 800feac:	2300      	movs	r3, #0
 800feae:	191a      	adds	r2, r3, r4
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb4:	441a      	add	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800febe:	461c      	mov	r4, r3
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	891b      	ldrh	r3, [r3, #8]
 800fec4:	461d      	mov	r5, r3
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	68db      	ldr	r3, [r3, #12]
 800feca:	899b      	ldrh	r3, [r3, #12]
 800fecc:	b29b      	uxth	r3, r3
 800fece:	4618      	mov	r0, r3
 800fed0:	f7f8 fade 	bl	8008490 <lwip_htons>
 800fed4:	4603      	mov	r3, r0
 800fed6:	b2db      	uxtb	r3, r3
 800fed8:	f003 0303 	and.w	r3, r3, #3
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d001      	beq.n	800fee4 <tcp_receive+0xa90>
 800fee0:	2301      	movs	r3, #1
 800fee2:	e000      	b.n	800fee6 <tcp_receive+0xa92>
 800fee4:	2300      	movs	r3, #0
 800fee6:	442b      	add	r3, r5
 800fee8:	429c      	cmp	r4, r3
 800feea:	d206      	bcs.n	800fefa <tcp_receive+0xaa6>
 800feec:	4b1e      	ldr	r3, [pc, #120]	; (800ff68 <tcp_receive+0xb14>)
 800feee:	f240 622b 	movw	r2, #1579	; 0x62b
 800fef2:	4923      	ldr	r1, [pc, #140]	; (800ff80 <tcp_receive+0xb2c>)
 800fef4:	481e      	ldr	r0, [pc, #120]	; (800ff70 <tcp_receive+0xb1c>)
 800fef6:	f002 f905 	bl	8012104 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	891b      	ldrh	r3, [r3, #8]
 800fefe:	461c      	mov	r4, r3
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	899b      	ldrh	r3, [r3, #12]
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7f8 fac1 	bl	8008490 <lwip_htons>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	f003 0303 	and.w	r3, r3, #3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d001      	beq.n	800ff1e <tcp_receive+0xaca>
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	e000      	b.n	800ff20 <tcp_receive+0xacc>
 800ff1e:	2300      	movs	r3, #0
 800ff20:	1919      	adds	r1, r3, r4
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff26:	b28b      	uxth	r3, r1
 800ff28:	1ad3      	subs	r3, r2, r3
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7fc ff43 	bl	800cdbc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	891b      	ldrh	r3, [r3, #8]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d028      	beq.n	800ff92 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ff40:	4b0d      	ldr	r3, [pc, #52]	; (800ff78 <tcp_receive+0xb24>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d01d      	beq.n	800ff84 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800ff48:	4b0b      	ldr	r3, [pc, #44]	; (800ff78 <tcp_receive+0xb24>)
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	4619      	mov	r1, r3
 800ff52:	4610      	mov	r0, r2
 800ff54:	f7fc fa60 	bl	800c418 <pbuf_cat>
 800ff58:	e018      	b.n	800ff8c <tcp_receive+0xb38>
 800ff5a:	bf00      	nop
 800ff5c:	2400819a 	.word	0x2400819a
 800ff60:	24008190 	.word	0x24008190
 800ff64:	24008170 	.word	0x24008170
 800ff68:	08014c0c 	.word	0x08014c0c
 800ff6c:	0801500c 	.word	0x0801500c
 800ff70:	08014c78 	.word	0x08014c78
 800ff74:	08015048 	.word	0x08015048
 800ff78:	240081a0 	.word	0x240081a0
 800ff7c:	2400819d 	.word	0x2400819d
 800ff80:	08015068 	.word	0x08015068
            } else {
              recv_data = cseg->p;
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	4a70      	ldr	r2, [pc, #448]	; (801014c <tcp_receive+0xcf8>)
 800ff8a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	899b      	ldrh	r3, [r3, #12]
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7f8 fa78 	bl	8008490 <lwip_htons>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	f003 0301 	and.w	r3, r3, #1
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d00d      	beq.n	800ffc8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ffac:	4b68      	ldr	r3, [pc, #416]	; (8010150 <tcp_receive+0xcfc>)
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	f043 0320 	orr.w	r3, r3, #32
 800ffb4:	b2da      	uxtb	r2, r3
 800ffb6:	4b66      	ldr	r3, [pc, #408]	; (8010150 <tcp_receive+0xcfc>)
 800ffb8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	7d1b      	ldrb	r3, [r3, #20]
 800ffbe:	2b04      	cmp	r3, #4
 800ffc0:	d102      	bne.n	800ffc8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2207      	movs	r2, #7
 800ffc6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ffd0:	68b8      	ldr	r0, [r7, #8]
 800ffd2:	f7fd fbd2 	bl	800d77a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d008      	beq.n	800fff0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	685a      	ldr	r2, [r3, #4]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ffea:	429a      	cmp	r2, r3
 800ffec:	f43f af43 	beq.w	800fe76 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	8b5b      	ldrh	r3, [r3, #26]
 800fff4:	f003 0301 	and.w	r3, r3, #1
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d00e      	beq.n	801001a <tcp_receive+0xbc6>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	8b5b      	ldrh	r3, [r3, #26]
 8010000:	f023 0301 	bic.w	r3, r3, #1
 8010004:	b29a      	uxth	r2, r3
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	835a      	strh	r2, [r3, #26]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	8b5b      	ldrh	r3, [r3, #26]
 801000e:	f043 0302 	orr.w	r3, r3, #2
 8010012:	b29a      	uxth	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010018:	e188      	b.n	801032c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	8b5b      	ldrh	r3, [r3, #26]
 801001e:	f043 0301 	orr.w	r3, r3, #1
 8010022:	b29a      	uxth	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010028:	e180      	b.n	801032c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801002e:	2b00      	cmp	r3, #0
 8010030:	d106      	bne.n	8010040 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010032:	4848      	ldr	r0, [pc, #288]	; (8010154 <tcp_receive+0xd00>)
 8010034:	f7fd fbba 	bl	800d7ac <tcp_seg_copy>
 8010038:	4602      	mov	r2, r0
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	675a      	str	r2, [r3, #116]	; 0x74
 801003e:	e16d      	b.n	801031c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010040:	2300      	movs	r3, #0
 8010042:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010048:	63bb      	str	r3, [r7, #56]	; 0x38
 801004a:	e157      	b.n	80102fc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801004c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	685a      	ldr	r2, [r3, #4]
 8010052:	4b41      	ldr	r3, [pc, #260]	; (8010158 <tcp_receive+0xd04>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	429a      	cmp	r2, r3
 8010058:	d11d      	bne.n	8010096 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801005a:	4b3e      	ldr	r3, [pc, #248]	; (8010154 <tcp_receive+0xd00>)
 801005c:	891a      	ldrh	r2, [r3, #8]
 801005e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010060:	891b      	ldrh	r3, [r3, #8]
 8010062:	429a      	cmp	r2, r3
 8010064:	f240 814f 	bls.w	8010306 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010068:	483a      	ldr	r0, [pc, #232]	; (8010154 <tcp_receive+0xd00>)
 801006a:	f7fd fb9f 	bl	800d7ac <tcp_seg_copy>
 801006e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	2b00      	cmp	r3, #0
 8010074:	f000 8149 	beq.w	801030a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801007a:	2b00      	cmp	r3, #0
 801007c:	d003      	beq.n	8010086 <tcp_receive+0xc32>
                    prev->next = cseg;
 801007e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010080:	697a      	ldr	r2, [r7, #20]
 8010082:	601a      	str	r2, [r3, #0]
 8010084:	e002      	b.n	801008c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	697a      	ldr	r2, [r7, #20]
 801008a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801008c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801008e:	6978      	ldr	r0, [r7, #20]
 8010090:	f7ff f8dc 	bl	800f24c <tcp_oos_insert_segment>
                }
                break;
 8010094:	e139      	b.n	801030a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010098:	2b00      	cmp	r3, #0
 801009a:	d117      	bne.n	80100cc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801009c:	4b2e      	ldr	r3, [pc, #184]	; (8010158 <tcp_receive+0xd04>)
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	da57      	bge.n	801015c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80100ac:	4829      	ldr	r0, [pc, #164]	; (8010154 <tcp_receive+0xd00>)
 80100ae:	f7fd fb7d 	bl	800d7ac <tcp_seg_copy>
 80100b2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80100b4:	69bb      	ldr	r3, [r7, #24]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f000 8129 	beq.w	801030e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	69ba      	ldr	r2, [r7, #24]
 80100c0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80100c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80100c4:	69b8      	ldr	r0, [r7, #24]
 80100c6:	f7ff f8c1 	bl	800f24c <tcp_oos_insert_segment>
                  }
                  break;
 80100ca:	e120      	b.n	801030e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80100cc:	4b22      	ldr	r3, [pc, #136]	; (8010158 <tcp_receive+0xd04>)
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	3b01      	subs	r3, #1
 80100da:	2b00      	cmp	r3, #0
 80100dc:	db3e      	blt.n	801015c <tcp_receive+0xd08>
 80100de:	4b1e      	ldr	r3, [pc, #120]	; (8010158 <tcp_receive+0xd04>)
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	1ad3      	subs	r3, r2, r3
 80100ea:	3301      	adds	r3, #1
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	dc35      	bgt.n	801015c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80100f0:	4818      	ldr	r0, [pc, #96]	; (8010154 <tcp_receive+0xd00>)
 80100f2:	f7fd fb5b 	bl	800d7ac <tcp_seg_copy>
 80100f6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	f000 8109 	beq.w	8010312 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010108:	8912      	ldrh	r2, [r2, #8]
 801010a:	441a      	add	r2, r3
 801010c:	4b12      	ldr	r3, [pc, #72]	; (8010158 <tcp_receive+0xd04>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	1ad3      	subs	r3, r2, r3
 8010112:	2b00      	cmp	r3, #0
 8010114:	dd12      	ble.n	801013c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010116:	4b10      	ldr	r3, [pc, #64]	; (8010158 <tcp_receive+0xd04>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	b29a      	uxth	r2, r3
 801011c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	b29b      	uxth	r3, r3
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	b29a      	uxth	r2, r3
 8010128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801012c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012e:	685a      	ldr	r2, [r3, #4]
 8010130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010132:	891b      	ldrh	r3, [r3, #8]
 8010134:	4619      	mov	r1, r3
 8010136:	4610      	mov	r0, r2
 8010138:	f7fb ff26 	bl	800bf88 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801013c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801013e:	69fa      	ldr	r2, [r7, #28]
 8010140:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010142:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010144:	69f8      	ldr	r0, [r7, #28]
 8010146:	f7ff f881 	bl	800f24c <tcp_oos_insert_segment>
                  }
                  break;
 801014a:	e0e2      	b.n	8010312 <tcp_receive+0xebe>
 801014c:	240081a0 	.word	0x240081a0
 8010150:	2400819d 	.word	0x2400819d
 8010154:	24008170 	.word	0x24008170
 8010158:	24008190 	.word	0x24008190
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801015c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	f040 80c6 	bne.w	80102f6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801016a:	4b80      	ldr	r3, [pc, #512]	; (801036c <tcp_receive+0xf18>)
 801016c:	681a      	ldr	r2, [r3, #0]
 801016e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010176:	2b00      	cmp	r3, #0
 8010178:	f340 80bd 	ble.w	80102f6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801017c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	899b      	ldrh	r3, [r3, #12]
 8010182:	b29b      	uxth	r3, r3
 8010184:	4618      	mov	r0, r3
 8010186:	f7f8 f983 	bl	8008490 <lwip_htons>
 801018a:	4603      	mov	r3, r0
 801018c:	b2db      	uxtb	r3, r3
 801018e:	f003 0301 	and.w	r3, r3, #1
 8010192:	2b00      	cmp	r3, #0
 8010194:	f040 80bf 	bne.w	8010316 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010198:	4875      	ldr	r0, [pc, #468]	; (8010370 <tcp_receive+0xf1c>)
 801019a:	f7fd fb07 	bl	800d7ac <tcp_seg_copy>
 801019e:	4602      	mov	r2, r0
 80101a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80101a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	f000 80b6 	beq.w	801031a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80101ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b0:	68db      	ldr	r3, [r3, #12]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101b6:	8912      	ldrh	r2, [r2, #8]
 80101b8:	441a      	add	r2, r3
 80101ba:	4b6c      	ldr	r3, [pc, #432]	; (801036c <tcp_receive+0xf18>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	1ad3      	subs	r3, r2, r3
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	dd12      	ble.n	80101ea <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80101c4:	4b69      	ldr	r3, [pc, #420]	; (801036c <tcp_receive+0xf18>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	b29a      	uxth	r2, r3
 80101ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101cc:	68db      	ldr	r3, [r3, #12]
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	1ad3      	subs	r3, r2, r3
 80101d4:	b29a      	uxth	r2, r3
 80101d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80101da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101dc:	685a      	ldr	r2, [r3, #4]
 80101de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e0:	891b      	ldrh	r3, [r3, #8]
 80101e2:	4619      	mov	r1, r3
 80101e4:	4610      	mov	r0, r2
 80101e6:	f7fb fecf 	bl	800bf88 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80101ea:	4b62      	ldr	r3, [pc, #392]	; (8010374 <tcp_receive+0xf20>)
 80101ec:	881b      	ldrh	r3, [r3, #0]
 80101ee:	461a      	mov	r2, r3
 80101f0:	4b5e      	ldr	r3, [pc, #376]	; (801036c <tcp_receive+0xf18>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	441a      	add	r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101fa:	6879      	ldr	r1, [r7, #4]
 80101fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101fe:	440b      	add	r3, r1
 8010200:	1ad3      	subs	r3, r2, r3
 8010202:	2b00      	cmp	r3, #0
 8010204:	f340 8089 	ble.w	801031a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	899b      	ldrh	r3, [r3, #12]
 8010210:	b29b      	uxth	r3, r3
 8010212:	4618      	mov	r0, r3
 8010214:	f7f8 f93c 	bl	8008490 <lwip_htons>
 8010218:	4603      	mov	r3, r0
 801021a:	b2db      	uxtb	r3, r3
 801021c:	f003 0301 	and.w	r3, r3, #1
 8010220:	2b00      	cmp	r3, #0
 8010222:	d022      	beq.n	801026a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	68db      	ldr	r3, [r3, #12]
 801022a:	899b      	ldrh	r3, [r3, #12]
 801022c:	b29b      	uxth	r3, r3
 801022e:	b21b      	sxth	r3, r3
 8010230:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010234:	b21c      	sxth	r4, r3
 8010236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	899b      	ldrh	r3, [r3, #12]
 801023e:	b29b      	uxth	r3, r3
 8010240:	4618      	mov	r0, r3
 8010242:	f7f8 f925 	bl	8008490 <lwip_htons>
 8010246:	4603      	mov	r3, r0
 8010248:	b2db      	uxtb	r3, r3
 801024a:	b29b      	uxth	r3, r3
 801024c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010250:	b29b      	uxth	r3, r3
 8010252:	4618      	mov	r0, r3
 8010254:	f7f8 f91c 	bl	8008490 <lwip_htons>
 8010258:	4603      	mov	r3, r0
 801025a:	b21b      	sxth	r3, r3
 801025c:	4323      	orrs	r3, r4
 801025e:	b21a      	sxth	r2, r3
 8010260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	b292      	uxth	r2, r2
 8010268:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801026e:	b29a      	uxth	r2, r3
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010274:	4413      	add	r3, r2
 8010276:	b299      	uxth	r1, r3
 8010278:	4b3c      	ldr	r3, [pc, #240]	; (801036c <tcp_receive+0xf18>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	b29a      	uxth	r2, r3
 801027e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	1a8a      	subs	r2, r1, r2
 8010284:	b292      	uxth	r2, r2
 8010286:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	685a      	ldr	r2, [r3, #4]
 801028e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	891b      	ldrh	r3, [r3, #8]
 8010294:	4619      	mov	r1, r3
 8010296:	4610      	mov	r0, r2
 8010298:	f7fb fe76 	bl	800bf88 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801029c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	891c      	ldrh	r4, [r3, #8]
 80102a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	899b      	ldrh	r3, [r3, #12]
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7f8 f8ef 	bl	8008490 <lwip_htons>
 80102b2:	4603      	mov	r3, r0
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	f003 0303 	and.w	r3, r3, #3
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d001      	beq.n	80102c2 <tcp_receive+0xe6e>
 80102be:	2301      	movs	r3, #1
 80102c0:	e000      	b.n	80102c4 <tcp_receive+0xe70>
 80102c2:	2300      	movs	r3, #0
 80102c4:	4423      	add	r3, r4
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	4b2a      	ldr	r3, [pc, #168]	; (8010374 <tcp_receive+0xf20>)
 80102ca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80102cc:	4b29      	ldr	r3, [pc, #164]	; (8010374 <tcp_receive+0xf20>)
 80102ce:	881b      	ldrh	r3, [r3, #0]
 80102d0:	461a      	mov	r2, r3
 80102d2:	4b26      	ldr	r3, [pc, #152]	; (801036c <tcp_receive+0xf18>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	441a      	add	r2, r3
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102dc:	6879      	ldr	r1, [r7, #4]
 80102de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80102e0:	440b      	add	r3, r1
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d019      	beq.n	801031a <tcp_receive+0xec6>
 80102e6:	4b24      	ldr	r3, [pc, #144]	; (8010378 <tcp_receive+0xf24>)
 80102e8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80102ec:	4923      	ldr	r1, [pc, #140]	; (801037c <tcp_receive+0xf28>)
 80102ee:	4824      	ldr	r0, [pc, #144]	; (8010380 <tcp_receive+0xf2c>)
 80102f0:	f001 ff08 	bl	8012104 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80102f4:	e011      	b.n	801031a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80102f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80102fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f47f aea4 	bne.w	801004c <tcp_receive+0xbf8>
 8010304:	e00a      	b.n	801031c <tcp_receive+0xec8>
                break;
 8010306:	bf00      	nop
 8010308:	e008      	b.n	801031c <tcp_receive+0xec8>
                break;
 801030a:	bf00      	nop
 801030c:	e006      	b.n	801031c <tcp_receive+0xec8>
                  break;
 801030e:	bf00      	nop
 8010310:	e004      	b.n	801031c <tcp_receive+0xec8>
                  break;
 8010312:	bf00      	nop
 8010314:	e002      	b.n	801031c <tcp_receive+0xec8>
                  break;
 8010316:	bf00      	nop
 8010318:	e000      	b.n	801031c <tcp_receive+0xec8>
                break;
 801031a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f001 fa33 	bl	8011788 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010322:	e003      	b.n	801032c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f001 fa2f 	bl	8011788 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801032a:	e01a      	b.n	8010362 <tcp_receive+0xf0e>
 801032c:	e019      	b.n	8010362 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801032e:	4b0f      	ldr	r3, [pc, #60]	; (801036c <tcp_receive+0xf18>)
 8010330:	681a      	ldr	r2, [r3, #0]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010336:	1ad3      	subs	r3, r2, r3
 8010338:	2b00      	cmp	r3, #0
 801033a:	db0a      	blt.n	8010352 <tcp_receive+0xefe>
 801033c:	4b0b      	ldr	r3, [pc, #44]	; (801036c <tcp_receive+0xf18>)
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010344:	6879      	ldr	r1, [r7, #4]
 8010346:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010348:	440b      	add	r3, r1
 801034a:	1ad3      	subs	r3, r2, r3
 801034c:	3301      	adds	r3, #1
 801034e:	2b00      	cmp	r3, #0
 8010350:	dd07      	ble.n	8010362 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	8b5b      	ldrh	r3, [r3, #26]
 8010356:	f043 0302 	orr.w	r3, r3, #2
 801035a:	b29a      	uxth	r2, r3
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010360:	e7ff      	b.n	8010362 <tcp_receive+0xf0e>
 8010362:	bf00      	nop
 8010364:	3750      	adds	r7, #80	; 0x50
 8010366:	46bd      	mov	sp, r7
 8010368:	bdb0      	pop	{r4, r5, r7, pc}
 801036a:	bf00      	nop
 801036c:	24008190 	.word	0x24008190
 8010370:	24008170 	.word	0x24008170
 8010374:	2400819a 	.word	0x2400819a
 8010378:	08014c0c 	.word	0x08014c0c
 801037c:	08014fd4 	.word	0x08014fd4
 8010380:	08014c78 	.word	0x08014c78

08010384 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801038a:	4b15      	ldr	r3, [pc, #84]	; (80103e0 <tcp_get_next_optbyte+0x5c>)
 801038c:	881b      	ldrh	r3, [r3, #0]
 801038e:	1c5a      	adds	r2, r3, #1
 8010390:	b291      	uxth	r1, r2
 8010392:	4a13      	ldr	r2, [pc, #76]	; (80103e0 <tcp_get_next_optbyte+0x5c>)
 8010394:	8011      	strh	r1, [r2, #0]
 8010396:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010398:	4b12      	ldr	r3, [pc, #72]	; (80103e4 <tcp_get_next_optbyte+0x60>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d004      	beq.n	80103aa <tcp_get_next_optbyte+0x26>
 80103a0:	4b11      	ldr	r3, [pc, #68]	; (80103e8 <tcp_get_next_optbyte+0x64>)
 80103a2:	881b      	ldrh	r3, [r3, #0]
 80103a4:	88fa      	ldrh	r2, [r7, #6]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d208      	bcs.n	80103bc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80103aa:	4b10      	ldr	r3, [pc, #64]	; (80103ec <tcp_get_next_optbyte+0x68>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	3314      	adds	r3, #20
 80103b0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80103b2:	88fb      	ldrh	r3, [r7, #6]
 80103b4:	683a      	ldr	r2, [r7, #0]
 80103b6:	4413      	add	r3, r2
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	e00b      	b.n	80103d4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80103bc:	88fb      	ldrh	r3, [r7, #6]
 80103be:	b2da      	uxtb	r2, r3
 80103c0:	4b09      	ldr	r3, [pc, #36]	; (80103e8 <tcp_get_next_optbyte+0x64>)
 80103c2:	881b      	ldrh	r3, [r3, #0]
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	1ad3      	subs	r3, r2, r3
 80103c8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80103ca:	4b06      	ldr	r3, [pc, #24]	; (80103e4 <tcp_get_next_optbyte+0x60>)
 80103cc:	681a      	ldr	r2, [r3, #0]
 80103ce:	797b      	ldrb	r3, [r7, #5]
 80103d0:	4413      	add	r3, r2
 80103d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	370c      	adds	r7, #12
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr
 80103e0:	2400818c 	.word	0x2400818c
 80103e4:	24008188 	.word	0x24008188
 80103e8:	24008186 	.word	0x24008186
 80103ec:	24008180 	.word	0x24008180

080103f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d106      	bne.n	801040c <tcp_parseopt+0x1c>
 80103fe:	4b32      	ldr	r3, [pc, #200]	; (80104c8 <tcp_parseopt+0xd8>)
 8010400:	f240 727d 	movw	r2, #1917	; 0x77d
 8010404:	4931      	ldr	r1, [pc, #196]	; (80104cc <tcp_parseopt+0xdc>)
 8010406:	4832      	ldr	r0, [pc, #200]	; (80104d0 <tcp_parseopt+0xe0>)
 8010408:	f001 fe7c 	bl	8012104 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801040c:	4b31      	ldr	r3, [pc, #196]	; (80104d4 <tcp_parseopt+0xe4>)
 801040e:	881b      	ldrh	r3, [r3, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d055      	beq.n	80104c0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010414:	4b30      	ldr	r3, [pc, #192]	; (80104d8 <tcp_parseopt+0xe8>)
 8010416:	2200      	movs	r2, #0
 8010418:	801a      	strh	r2, [r3, #0]
 801041a:	e045      	b.n	80104a8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801041c:	f7ff ffb2 	bl	8010384 <tcp_get_next_optbyte>
 8010420:	4603      	mov	r3, r0
 8010422:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010424:	7bfb      	ldrb	r3, [r7, #15]
 8010426:	2b02      	cmp	r3, #2
 8010428:	d006      	beq.n	8010438 <tcp_parseopt+0x48>
 801042a:	2b02      	cmp	r3, #2
 801042c:	dc2b      	bgt.n	8010486 <tcp_parseopt+0x96>
 801042e:	2b00      	cmp	r3, #0
 8010430:	d041      	beq.n	80104b6 <tcp_parseopt+0xc6>
 8010432:	2b01      	cmp	r3, #1
 8010434:	d127      	bne.n	8010486 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010436:	e037      	b.n	80104a8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010438:	f7ff ffa4 	bl	8010384 <tcp_get_next_optbyte>
 801043c:	4603      	mov	r3, r0
 801043e:	2b04      	cmp	r3, #4
 8010440:	d13b      	bne.n	80104ba <tcp_parseopt+0xca>
 8010442:	4b25      	ldr	r3, [pc, #148]	; (80104d8 <tcp_parseopt+0xe8>)
 8010444:	881b      	ldrh	r3, [r3, #0]
 8010446:	3301      	adds	r3, #1
 8010448:	4a22      	ldr	r2, [pc, #136]	; (80104d4 <tcp_parseopt+0xe4>)
 801044a:	8812      	ldrh	r2, [r2, #0]
 801044c:	4293      	cmp	r3, r2
 801044e:	da34      	bge.n	80104ba <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010450:	f7ff ff98 	bl	8010384 <tcp_get_next_optbyte>
 8010454:	4603      	mov	r3, r0
 8010456:	b29b      	uxth	r3, r3
 8010458:	021b      	lsls	r3, r3, #8
 801045a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801045c:	f7ff ff92 	bl	8010384 <tcp_get_next_optbyte>
 8010460:	4603      	mov	r3, r0
 8010462:	b29a      	uxth	r2, r3
 8010464:	89bb      	ldrh	r3, [r7, #12]
 8010466:	4313      	orrs	r3, r2
 8010468:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801046a:	89bb      	ldrh	r3, [r7, #12]
 801046c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010470:	d804      	bhi.n	801047c <tcp_parseopt+0x8c>
 8010472:	89bb      	ldrh	r3, [r7, #12]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d001      	beq.n	801047c <tcp_parseopt+0x8c>
 8010478:	89ba      	ldrh	r2, [r7, #12]
 801047a:	e001      	b.n	8010480 <tcp_parseopt+0x90>
 801047c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010484:	e010      	b.n	80104a8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010486:	f7ff ff7d 	bl	8010384 <tcp_get_next_optbyte>
 801048a:	4603      	mov	r3, r0
 801048c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801048e:	7afb      	ldrb	r3, [r7, #11]
 8010490:	2b01      	cmp	r3, #1
 8010492:	d914      	bls.n	80104be <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010494:	7afb      	ldrb	r3, [r7, #11]
 8010496:	b29a      	uxth	r2, r3
 8010498:	4b0f      	ldr	r3, [pc, #60]	; (80104d8 <tcp_parseopt+0xe8>)
 801049a:	881b      	ldrh	r3, [r3, #0]
 801049c:	4413      	add	r3, r2
 801049e:	b29b      	uxth	r3, r3
 80104a0:	3b02      	subs	r3, #2
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	4b0c      	ldr	r3, [pc, #48]	; (80104d8 <tcp_parseopt+0xe8>)
 80104a6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80104a8:	4b0b      	ldr	r3, [pc, #44]	; (80104d8 <tcp_parseopt+0xe8>)
 80104aa:	881a      	ldrh	r2, [r3, #0]
 80104ac:	4b09      	ldr	r3, [pc, #36]	; (80104d4 <tcp_parseopt+0xe4>)
 80104ae:	881b      	ldrh	r3, [r3, #0]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d3b3      	bcc.n	801041c <tcp_parseopt+0x2c>
 80104b4:	e004      	b.n	80104c0 <tcp_parseopt+0xd0>
          return;
 80104b6:	bf00      	nop
 80104b8:	e002      	b.n	80104c0 <tcp_parseopt+0xd0>
            return;
 80104ba:	bf00      	nop
 80104bc:	e000      	b.n	80104c0 <tcp_parseopt+0xd0>
            return;
 80104be:	bf00      	nop
      }
    }
  }
}
 80104c0:	3710      	adds	r7, #16
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	08014c0c 	.word	0x08014c0c
 80104cc:	08015090 	.word	0x08015090
 80104d0:	08014c78 	.word	0x08014c78
 80104d4:	24008184 	.word	0x24008184
 80104d8:	2400818c 	.word	0x2400818c

080104dc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80104dc:	b480      	push	{r7}
 80104de:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80104e0:	4b05      	ldr	r3, [pc, #20]	; (80104f8 <tcp_trigger_input_pcb_close+0x1c>)
 80104e2:	781b      	ldrb	r3, [r3, #0]
 80104e4:	f043 0310 	orr.w	r3, r3, #16
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	4b03      	ldr	r3, [pc, #12]	; (80104f8 <tcp_trigger_input_pcb_close+0x1c>)
 80104ec:	701a      	strb	r2, [r3, #0]
}
 80104ee:	bf00      	nop
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr
 80104f8:	2400819d 	.word	0x2400819d

080104fc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d00a      	beq.n	8010524 <tcp_route+0x28>
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	7a1b      	ldrb	r3, [r3, #8]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d006      	beq.n	8010524 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	7a1b      	ldrb	r3, [r3, #8]
 801051a:	4618      	mov	r0, r3
 801051c:	f7fb fb5a 	bl	800bbd4 <netif_get_by_index>
 8010520:	4603      	mov	r3, r0
 8010522:	e003      	b.n	801052c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7f9 fa89 	bl	8009a3c <ip4_route>
 801052a:	4603      	mov	r3, r0
  }
}
 801052c:	4618      	mov	r0, r3
 801052e:	3710      	adds	r7, #16
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010534:	b590      	push	{r4, r7, lr}
 8010536:	b087      	sub	sp, #28
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	603b      	str	r3, [r7, #0]
 8010540:	4613      	mov	r3, r2
 8010542:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d105      	bne.n	8010556 <tcp_create_segment+0x22>
 801054a:	4b44      	ldr	r3, [pc, #272]	; (801065c <tcp_create_segment+0x128>)
 801054c:	22a3      	movs	r2, #163	; 0xa3
 801054e:	4944      	ldr	r1, [pc, #272]	; (8010660 <tcp_create_segment+0x12c>)
 8010550:	4844      	ldr	r0, [pc, #272]	; (8010664 <tcp_create_segment+0x130>)
 8010552:	f001 fdd7 	bl	8012104 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d105      	bne.n	8010568 <tcp_create_segment+0x34>
 801055c:	4b3f      	ldr	r3, [pc, #252]	; (801065c <tcp_create_segment+0x128>)
 801055e:	22a4      	movs	r2, #164	; 0xa4
 8010560:	4941      	ldr	r1, [pc, #260]	; (8010668 <tcp_create_segment+0x134>)
 8010562:	4840      	ldr	r0, [pc, #256]	; (8010664 <tcp_create_segment+0x130>)
 8010564:	f001 fdce 	bl	8012104 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010568:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801056c:	009b      	lsls	r3, r3, #2
 801056e:	b2db      	uxtb	r3, r3
 8010570:	f003 0304 	and.w	r3, r3, #4
 8010574:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010576:	2003      	movs	r0, #3
 8010578:	f7fa ffa6 	bl	800b4c8 <memp_malloc>
 801057c:	6138      	str	r0, [r7, #16]
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d104      	bne.n	801058e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010584:	68b8      	ldr	r0, [r7, #8]
 8010586:	f7fb fe85 	bl	800c294 <pbuf_free>
    return NULL;
 801058a:	2300      	movs	r3, #0
 801058c:	e061      	b.n	8010652 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010594:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	2200      	movs	r2, #0
 801059a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	68ba      	ldr	r2, [r7, #8]
 80105a0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	891a      	ldrh	r2, [r3, #8]
 80105a6:	7dfb      	ldrb	r3, [r7, #23]
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d205      	bcs.n	80105ba <tcp_create_segment+0x86>
 80105ae:	4b2b      	ldr	r3, [pc, #172]	; (801065c <tcp_create_segment+0x128>)
 80105b0:	22b0      	movs	r2, #176	; 0xb0
 80105b2:	492e      	ldr	r1, [pc, #184]	; (801066c <tcp_create_segment+0x138>)
 80105b4:	482b      	ldr	r0, [pc, #172]	; (8010664 <tcp_create_segment+0x130>)
 80105b6:	f001 fda5 	bl	8012104 <iprintf>
  seg->len = p->tot_len - optlen;
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	891a      	ldrh	r2, [r3, #8]
 80105be:	7dfb      	ldrb	r3, [r7, #23]
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80105ca:	2114      	movs	r1, #20
 80105cc:	68b8      	ldr	r0, [r7, #8]
 80105ce:	f7fb fdcb 	bl	800c168 <pbuf_add_header>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d004      	beq.n	80105e2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80105d8:	6938      	ldr	r0, [r7, #16]
 80105da:	f7fd f8ce 	bl	800d77a <tcp_seg_free>
    return NULL;
 80105de:	2300      	movs	r3, #0
 80105e0:	e037      	b.n	8010652 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	685a      	ldr	r2, [r3, #4]
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	8ada      	ldrh	r2, [r3, #22]
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	68dc      	ldr	r4, [r3, #12]
 80105f4:	4610      	mov	r0, r2
 80105f6:	f7f7 ff4b 	bl	8008490 <lwip_htons>
 80105fa:	4603      	mov	r3, r0
 80105fc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	8b1a      	ldrh	r2, [r3, #24]
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	68dc      	ldr	r4, [r3, #12]
 8010606:	4610      	mov	r0, r2
 8010608:	f7f7 ff42 	bl	8008490 <lwip_htons>
 801060c:	4603      	mov	r3, r0
 801060e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	68dc      	ldr	r4, [r3, #12]
 8010614:	6838      	ldr	r0, [r7, #0]
 8010616:	f7f7 ff50 	bl	80084ba <lwip_htonl>
 801061a:	4603      	mov	r3, r0
 801061c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801061e:	7dfb      	ldrb	r3, [r7, #23]
 8010620:	089b      	lsrs	r3, r3, #2
 8010622:	b2db      	uxtb	r3, r3
 8010624:	b29b      	uxth	r3, r3
 8010626:	3305      	adds	r3, #5
 8010628:	b29b      	uxth	r3, r3
 801062a:	031b      	lsls	r3, r3, #12
 801062c:	b29a      	uxth	r2, r3
 801062e:	79fb      	ldrb	r3, [r7, #7]
 8010630:	b29b      	uxth	r3, r3
 8010632:	4313      	orrs	r3, r2
 8010634:	b29a      	uxth	r2, r3
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	68dc      	ldr	r4, [r3, #12]
 801063a:	4610      	mov	r0, r2
 801063c:	f7f7 ff28 	bl	8008490 <lwip_htons>
 8010640:	4603      	mov	r3, r0
 8010642:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	2200      	movs	r2, #0
 801064a:	749a      	strb	r2, [r3, #18]
 801064c:	2200      	movs	r2, #0
 801064e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010650:	693b      	ldr	r3, [r7, #16]
}
 8010652:	4618      	mov	r0, r3
 8010654:	371c      	adds	r7, #28
 8010656:	46bd      	mov	sp, r7
 8010658:	bd90      	pop	{r4, r7, pc}
 801065a:	bf00      	nop
 801065c:	080150ac 	.word	0x080150ac
 8010660:	08015104 	.word	0x08015104
 8010664:	08015124 	.word	0x08015124
 8010668:	0801514c 	.word	0x0801514c
 801066c:	08015170 	.word	0x08015170

08010670 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010670:	b590      	push	{r4, r7, lr}
 8010672:	b08b      	sub	sp, #44	; 0x2c
 8010674:	af02      	add	r7, sp, #8
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	460b      	mov	r3, r1
 801067a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801067c:	2300      	movs	r3, #0
 801067e:	61fb      	str	r3, [r7, #28]
 8010680:	2300      	movs	r3, #0
 8010682:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010684:	2300      	movs	r3, #0
 8010686:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d106      	bne.n	801069c <tcp_split_unsent_seg+0x2c>
 801068e:	4b95      	ldr	r3, [pc, #596]	; (80108e4 <tcp_split_unsent_seg+0x274>)
 8010690:	f240 324b 	movw	r2, #843	; 0x34b
 8010694:	4994      	ldr	r1, [pc, #592]	; (80108e8 <tcp_split_unsent_seg+0x278>)
 8010696:	4895      	ldr	r0, [pc, #596]	; (80108ec <tcp_split_unsent_seg+0x27c>)
 8010698:	f001 fd34 	bl	8012104 <iprintf>

  useg = pcb->unsent;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106a0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d102      	bne.n	80106ae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80106a8:	f04f 33ff 	mov.w	r3, #4294967295
 80106ac:	e116      	b.n	80108dc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80106ae:	887b      	ldrh	r3, [r7, #2]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d109      	bne.n	80106c8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80106b4:	4b8b      	ldr	r3, [pc, #556]	; (80108e4 <tcp_split_unsent_seg+0x274>)
 80106b6:	f240 3253 	movw	r2, #851	; 0x353
 80106ba:	498d      	ldr	r1, [pc, #564]	; (80108f0 <tcp_split_unsent_seg+0x280>)
 80106bc:	488b      	ldr	r0, [pc, #556]	; (80108ec <tcp_split_unsent_seg+0x27c>)
 80106be:	f001 fd21 	bl	8012104 <iprintf>
    return ERR_VAL;
 80106c2:	f06f 0305 	mvn.w	r3, #5
 80106c6:	e109      	b.n	80108dc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	891b      	ldrh	r3, [r3, #8]
 80106cc:	887a      	ldrh	r2, [r7, #2]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d301      	bcc.n	80106d6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80106d2:	2300      	movs	r3, #0
 80106d4:	e102      	b.n	80108dc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106da:	887a      	ldrh	r2, [r7, #2]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d906      	bls.n	80106ee <tcp_split_unsent_seg+0x7e>
 80106e0:	4b80      	ldr	r3, [pc, #512]	; (80108e4 <tcp_split_unsent_seg+0x274>)
 80106e2:	f240 325b 	movw	r2, #859	; 0x35b
 80106e6:	4983      	ldr	r1, [pc, #524]	; (80108f4 <tcp_split_unsent_seg+0x284>)
 80106e8:	4880      	ldr	r0, [pc, #512]	; (80108ec <tcp_split_unsent_seg+0x27c>)
 80106ea:	f001 fd0b 	bl	8012104 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	891b      	ldrh	r3, [r3, #8]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d106      	bne.n	8010704 <tcp_split_unsent_seg+0x94>
 80106f6:	4b7b      	ldr	r3, [pc, #492]	; (80108e4 <tcp_split_unsent_seg+0x274>)
 80106f8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80106fc:	497e      	ldr	r1, [pc, #504]	; (80108f8 <tcp_split_unsent_seg+0x288>)
 80106fe:	487b      	ldr	r0, [pc, #492]	; (80108ec <tcp_split_unsent_seg+0x27c>)
 8010700:	f001 fd00 	bl	8012104 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	7a9b      	ldrb	r3, [r3, #10]
 8010708:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801070a:	7bfb      	ldrb	r3, [r7, #15]
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	b2db      	uxtb	r3, r3
 8010710:	f003 0304 	and.w	r3, r3, #4
 8010714:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	891a      	ldrh	r2, [r3, #8]
 801071a:	887b      	ldrh	r3, [r7, #2]
 801071c:	1ad3      	subs	r3, r2, r3
 801071e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010720:	7bbb      	ldrb	r3, [r7, #14]
 8010722:	b29a      	uxth	r2, r3
 8010724:	89bb      	ldrh	r3, [r7, #12]
 8010726:	4413      	add	r3, r2
 8010728:	b29b      	uxth	r3, r3
 801072a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801072e:	4619      	mov	r1, r3
 8010730:	2036      	movs	r0, #54	; 0x36
 8010732:	f7fb facb 	bl	800bccc <pbuf_alloc>
 8010736:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	2b00      	cmp	r3, #0
 801073c:	f000 80b7 	beq.w	80108ae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	891a      	ldrh	r2, [r3, #8]
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	891b      	ldrh	r3, [r3, #8]
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	b29a      	uxth	r2, r3
 801074e:	887b      	ldrh	r3, [r7, #2]
 8010750:	4413      	add	r3, r2
 8010752:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	6858      	ldr	r0, [r3, #4]
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	685a      	ldr	r2, [r3, #4]
 801075c:	7bbb      	ldrb	r3, [r7, #14]
 801075e:	18d1      	adds	r1, r2, r3
 8010760:	897b      	ldrh	r3, [r7, #10]
 8010762:	89ba      	ldrh	r2, [r7, #12]
 8010764:	f7fb ff80 	bl	800c668 <pbuf_copy_partial>
 8010768:	4603      	mov	r3, r0
 801076a:	461a      	mov	r2, r3
 801076c:	89bb      	ldrh	r3, [r7, #12]
 801076e:	4293      	cmp	r3, r2
 8010770:	f040 809f 	bne.w	80108b2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	899b      	ldrh	r3, [r3, #12]
 801077a:	b29b      	uxth	r3, r3
 801077c:	4618      	mov	r0, r3
 801077e:	f7f7 fe87 	bl	8008490 <lwip_htons>
 8010782:	4603      	mov	r3, r0
 8010784:	b2db      	uxtb	r3, r3
 8010786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801078a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801078c:	2300      	movs	r3, #0
 801078e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010790:	7efb      	ldrb	r3, [r7, #27]
 8010792:	f003 0308 	and.w	r3, r3, #8
 8010796:	2b00      	cmp	r3, #0
 8010798:	d007      	beq.n	80107aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801079a:	7efb      	ldrb	r3, [r7, #27]
 801079c:	f023 0308 	bic.w	r3, r3, #8
 80107a0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80107a2:	7ebb      	ldrb	r3, [r7, #26]
 80107a4:	f043 0308 	orr.w	r3, r3, #8
 80107a8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80107aa:	7efb      	ldrb	r3, [r7, #27]
 80107ac:	f003 0301 	and.w	r3, r3, #1
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d007      	beq.n	80107c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80107b4:	7efb      	ldrb	r3, [r7, #27]
 80107b6:	f023 0301 	bic.w	r3, r3, #1
 80107ba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80107bc:	7ebb      	ldrb	r3, [r7, #26]
 80107be:	f043 0301 	orr.w	r3, r3, #1
 80107c2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	685b      	ldr	r3, [r3, #4]
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7f7 fe75 	bl	80084ba <lwip_htonl>
 80107d0:	4602      	mov	r2, r0
 80107d2:	887b      	ldrh	r3, [r7, #2]
 80107d4:	18d1      	adds	r1, r2, r3
 80107d6:	7eba      	ldrb	r2, [r7, #26]
 80107d8:	7bfb      	ldrb	r3, [r7, #15]
 80107da:	9300      	str	r3, [sp, #0]
 80107dc:	460b      	mov	r3, r1
 80107de:	6939      	ldr	r1, [r7, #16]
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7ff fea7 	bl	8010534 <tcp_create_segment>
 80107e6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80107e8:	69fb      	ldr	r3, [r7, #28]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d063      	beq.n	80108b6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	685b      	ldr	r3, [r3, #4]
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7fb fdd6 	bl	800c3a4 <pbuf_clen>
 80107f8:	4603      	mov	r3, r0
 80107fa:	461a      	mov	r2, r3
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010802:	1a9b      	subs	r3, r3, r2
 8010804:	b29a      	uxth	r2, r3
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	6858      	ldr	r0, [r3, #4]
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	891a      	ldrh	r2, [r3, #8]
 8010816:	89bb      	ldrh	r3, [r7, #12]
 8010818:	1ad3      	subs	r3, r2, r3
 801081a:	b29b      	uxth	r3, r3
 801081c:	4619      	mov	r1, r3
 801081e:	f7fb fbb3 	bl	800bf88 <pbuf_realloc>
  useg->len -= remainder;
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	891a      	ldrh	r2, [r3, #8]
 8010826:	89bb      	ldrh	r3, [r7, #12]
 8010828:	1ad3      	subs	r3, r2, r3
 801082a:	b29a      	uxth	r2, r3
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	899b      	ldrh	r3, [r3, #12]
 8010836:	b29c      	uxth	r4, r3
 8010838:	7efb      	ldrb	r3, [r7, #27]
 801083a:	b29b      	uxth	r3, r3
 801083c:	4618      	mov	r0, r3
 801083e:	f7f7 fe27 	bl	8008490 <lwip_htons>
 8010842:	4603      	mov	r3, r0
 8010844:	461a      	mov	r2, r3
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	68db      	ldr	r3, [r3, #12]
 801084a:	4322      	orrs	r2, r4
 801084c:	b292      	uxth	r2, r2
 801084e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	685b      	ldr	r3, [r3, #4]
 8010854:	4618      	mov	r0, r3
 8010856:	f7fb fda5 	bl	800c3a4 <pbuf_clen>
 801085a:	4603      	mov	r3, r0
 801085c:	461a      	mov	r2, r3
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010864:	4413      	add	r3, r2
 8010866:	b29a      	uxth	r2, r3
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801086e:	69fb      	ldr	r3, [r7, #28]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	4618      	mov	r0, r3
 8010874:	f7fb fd96 	bl	800c3a4 <pbuf_clen>
 8010878:	4603      	mov	r3, r0
 801087a:	461a      	mov	r2, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010882:	4413      	add	r3, r2
 8010884:	b29a      	uxth	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	69fa      	ldr	r2, [r7, #28]
 8010898:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d103      	bne.n	80108aa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2200      	movs	r2, #0
 80108a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80108aa:	2300      	movs	r3, #0
 80108ac:	e016      	b.n	80108dc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80108ae:	bf00      	nop
 80108b0:	e002      	b.n	80108b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80108b2:	bf00      	nop
 80108b4:	e000      	b.n	80108b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80108b6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d006      	beq.n	80108cc <tcp_split_unsent_seg+0x25c>
 80108be:	4b09      	ldr	r3, [pc, #36]	; (80108e4 <tcp_split_unsent_seg+0x274>)
 80108c0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80108c4:	490d      	ldr	r1, [pc, #52]	; (80108fc <tcp_split_unsent_seg+0x28c>)
 80108c6:	4809      	ldr	r0, [pc, #36]	; (80108ec <tcp_split_unsent_seg+0x27c>)
 80108c8:	f001 fc1c 	bl	8012104 <iprintf>
  if (p != NULL) {
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d002      	beq.n	80108d8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80108d2:	6938      	ldr	r0, [r7, #16]
 80108d4:	f7fb fcde 	bl	800c294 <pbuf_free>
  }

  return ERR_MEM;
 80108d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3724      	adds	r7, #36	; 0x24
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd90      	pop	{r4, r7, pc}
 80108e4:	080150ac 	.word	0x080150ac
 80108e8:	08015464 	.word	0x08015464
 80108ec:	08015124 	.word	0x08015124
 80108f0:	08015488 	.word	0x08015488
 80108f4:	080154ac 	.word	0x080154ac
 80108f8:	080154bc 	.word	0x080154bc
 80108fc:	080154cc 	.word	0x080154cc

08010900 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010900:	b590      	push	{r4, r7, lr}
 8010902:	b085      	sub	sp, #20
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d106      	bne.n	801091c <tcp_send_fin+0x1c>
 801090e:	4b21      	ldr	r3, [pc, #132]	; (8010994 <tcp_send_fin+0x94>)
 8010910:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010914:	4920      	ldr	r1, [pc, #128]	; (8010998 <tcp_send_fin+0x98>)
 8010916:	4821      	ldr	r0, [pc, #132]	; (801099c <tcp_send_fin+0x9c>)
 8010918:	f001 fbf4 	bl	8012104 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010920:	2b00      	cmp	r3, #0
 8010922:	d02e      	beq.n	8010982 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010928:	60fb      	str	r3, [r7, #12]
 801092a:	e002      	b.n	8010932 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1f8      	bne.n	801092c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	68db      	ldr	r3, [r3, #12]
 801093e:	899b      	ldrh	r3, [r3, #12]
 8010940:	b29b      	uxth	r3, r3
 8010942:	4618      	mov	r0, r3
 8010944:	f7f7 fda4 	bl	8008490 <lwip_htons>
 8010948:	4603      	mov	r3, r0
 801094a:	b2db      	uxtb	r3, r3
 801094c:	f003 0307 	and.w	r3, r3, #7
 8010950:	2b00      	cmp	r3, #0
 8010952:	d116      	bne.n	8010982 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	899b      	ldrh	r3, [r3, #12]
 801095a:	b29c      	uxth	r4, r3
 801095c:	2001      	movs	r0, #1
 801095e:	f7f7 fd97 	bl	8008490 <lwip_htons>
 8010962:	4603      	mov	r3, r0
 8010964:	461a      	mov	r2, r3
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	68db      	ldr	r3, [r3, #12]
 801096a:	4322      	orrs	r2, r4
 801096c:	b292      	uxth	r2, r2
 801096e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	8b5b      	ldrh	r3, [r3, #26]
 8010974:	f043 0320 	orr.w	r3, r3, #32
 8010978:	b29a      	uxth	r2, r3
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801097e:	2300      	movs	r3, #0
 8010980:	e004      	b.n	801098c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010982:	2101      	movs	r1, #1
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f000 f80b 	bl	80109a0 <tcp_enqueue_flags>
 801098a:	4603      	mov	r3, r0
}
 801098c:	4618      	mov	r0, r3
 801098e:	3714      	adds	r7, #20
 8010990:	46bd      	mov	sp, r7
 8010992:	bd90      	pop	{r4, r7, pc}
 8010994:	080150ac 	.word	0x080150ac
 8010998:	080154d8 	.word	0x080154d8
 801099c:	08015124 	.word	0x08015124

080109a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b08a      	sub	sp, #40	; 0x28
 80109a4:	af02      	add	r7, sp, #8
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	460b      	mov	r3, r1
 80109aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80109ac:	2300      	movs	r3, #0
 80109ae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80109b0:	2300      	movs	r3, #0
 80109b2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80109b4:	78fb      	ldrb	r3, [r7, #3]
 80109b6:	f003 0303 	and.w	r3, r3, #3
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d106      	bne.n	80109cc <tcp_enqueue_flags+0x2c>
 80109be:	4b67      	ldr	r3, [pc, #412]	; (8010b5c <tcp_enqueue_flags+0x1bc>)
 80109c0:	f240 4211 	movw	r2, #1041	; 0x411
 80109c4:	4966      	ldr	r1, [pc, #408]	; (8010b60 <tcp_enqueue_flags+0x1c0>)
 80109c6:	4867      	ldr	r0, [pc, #412]	; (8010b64 <tcp_enqueue_flags+0x1c4>)
 80109c8:	f001 fb9c 	bl	8012104 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d106      	bne.n	80109e0 <tcp_enqueue_flags+0x40>
 80109d2:	4b62      	ldr	r3, [pc, #392]	; (8010b5c <tcp_enqueue_flags+0x1bc>)
 80109d4:	f240 4213 	movw	r2, #1043	; 0x413
 80109d8:	4963      	ldr	r1, [pc, #396]	; (8010b68 <tcp_enqueue_flags+0x1c8>)
 80109da:	4862      	ldr	r0, [pc, #392]	; (8010b64 <tcp_enqueue_flags+0x1c4>)
 80109dc:	f001 fb92 	bl	8012104 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80109e0:	78fb      	ldrb	r3, [r7, #3]
 80109e2:	f003 0302 	and.w	r3, r3, #2
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d001      	beq.n	80109ee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80109ea:	2301      	movs	r3, #1
 80109ec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80109ee:	7ffb      	ldrb	r3, [r7, #31]
 80109f0:	009b      	lsls	r3, r3, #2
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	f003 0304 	and.w	r3, r3, #4
 80109f8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80109fa:	7dfb      	ldrb	r3, [r7, #23]
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a02:	4619      	mov	r1, r3
 8010a04:	2036      	movs	r0, #54	; 0x36
 8010a06:	f7fb f961 	bl	800bccc <pbuf_alloc>
 8010a0a:	6138      	str	r0, [r7, #16]
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d109      	bne.n	8010a26 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	8b5b      	ldrh	r3, [r3, #26]
 8010a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a1a:	b29a      	uxth	r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010a20:	f04f 33ff 	mov.w	r3, #4294967295
 8010a24:	e095      	b.n	8010b52 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	895a      	ldrh	r2, [r3, #10]
 8010a2a:	7dfb      	ldrb	r3, [r7, #23]
 8010a2c:	b29b      	uxth	r3, r3
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d206      	bcs.n	8010a40 <tcp_enqueue_flags+0xa0>
 8010a32:	4b4a      	ldr	r3, [pc, #296]	; (8010b5c <tcp_enqueue_flags+0x1bc>)
 8010a34:	f240 4239 	movw	r2, #1081	; 0x439
 8010a38:	494c      	ldr	r1, [pc, #304]	; (8010b6c <tcp_enqueue_flags+0x1cc>)
 8010a3a:	484a      	ldr	r0, [pc, #296]	; (8010b64 <tcp_enqueue_flags+0x1c4>)
 8010a3c:	f001 fb62 	bl	8012104 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010a44:	78fa      	ldrb	r2, [r7, #3]
 8010a46:	7ffb      	ldrb	r3, [r7, #31]
 8010a48:	9300      	str	r3, [sp, #0]
 8010a4a:	460b      	mov	r3, r1
 8010a4c:	6939      	ldr	r1, [r7, #16]
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f7ff fd70 	bl	8010534 <tcp_create_segment>
 8010a54:	60f8      	str	r0, [r7, #12]
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d109      	bne.n	8010a70 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	8b5b      	ldrh	r3, [r3, #26]
 8010a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a6e:	e070      	b.n	8010b52 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	f003 0303 	and.w	r3, r3, #3
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d006      	beq.n	8010a8a <tcp_enqueue_flags+0xea>
 8010a7c:	4b37      	ldr	r3, [pc, #220]	; (8010b5c <tcp_enqueue_flags+0x1bc>)
 8010a7e:	f240 4242 	movw	r2, #1090	; 0x442
 8010a82:	493b      	ldr	r1, [pc, #236]	; (8010b70 <tcp_enqueue_flags+0x1d0>)
 8010a84:	4837      	ldr	r0, [pc, #220]	; (8010b64 <tcp_enqueue_flags+0x1c4>)
 8010a86:	f001 fb3d 	bl	8012104 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	891b      	ldrh	r3, [r3, #8]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d006      	beq.n	8010aa0 <tcp_enqueue_flags+0x100>
 8010a92:	4b32      	ldr	r3, [pc, #200]	; (8010b5c <tcp_enqueue_flags+0x1bc>)
 8010a94:	f240 4243 	movw	r2, #1091	; 0x443
 8010a98:	4936      	ldr	r1, [pc, #216]	; (8010b74 <tcp_enqueue_flags+0x1d4>)
 8010a9a:	4832      	ldr	r0, [pc, #200]	; (8010b64 <tcp_enqueue_flags+0x1c4>)
 8010a9c:	f001 fb32 	bl	8012104 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d103      	bne.n	8010ab0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	68fa      	ldr	r2, [r7, #12]
 8010aac:	66da      	str	r2, [r3, #108]	; 0x6c
 8010aae:	e00d      	b.n	8010acc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ab4:	61bb      	str	r3, [r7, #24]
 8010ab6:	e002      	b.n	8010abe <tcp_enqueue_flags+0x11e>
 8010ab8:	69bb      	ldr	r3, [r7, #24]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	61bb      	str	r3, [r7, #24]
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d1f8      	bne.n	8010ab8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010ac6:	69bb      	ldr	r3, [r7, #24]
 8010ac8:	68fa      	ldr	r2, [r7, #12]
 8010aca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010ad4:	78fb      	ldrb	r3, [r7, #3]
 8010ad6:	f003 0302 	and.w	r3, r3, #2
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d104      	bne.n	8010ae8 <tcp_enqueue_flags+0x148>
 8010ade:	78fb      	ldrb	r3, [r7, #3]
 8010ae0:	f003 0301 	and.w	r3, r3, #1
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d004      	beq.n	8010af2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010aec:	1c5a      	adds	r2, r3, #1
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010af2:	78fb      	ldrb	r3, [r7, #3]
 8010af4:	f003 0301 	and.w	r3, r3, #1
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d006      	beq.n	8010b0a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	8b5b      	ldrh	r3, [r3, #26]
 8010b00:	f043 0320 	orr.w	r3, r3, #32
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7fb fc48 	bl	800c3a4 <pbuf_clen>
 8010b14:	4603      	mov	r3, r0
 8010b16:	461a      	mov	r2, r3
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b1e:	4413      	add	r3, r2
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d00e      	beq.n	8010b50 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d10a      	bne.n	8010b50 <tcp_enqueue_flags+0x1b0>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d106      	bne.n	8010b50 <tcp_enqueue_flags+0x1b0>
 8010b42:	4b06      	ldr	r3, [pc, #24]	; (8010b5c <tcp_enqueue_flags+0x1bc>)
 8010b44:	f240 4265 	movw	r2, #1125	; 0x465
 8010b48:	490b      	ldr	r1, [pc, #44]	; (8010b78 <tcp_enqueue_flags+0x1d8>)
 8010b4a:	4806      	ldr	r0, [pc, #24]	; (8010b64 <tcp_enqueue_flags+0x1c4>)
 8010b4c:	f001 fada 	bl	8012104 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3720      	adds	r7, #32
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	080150ac 	.word	0x080150ac
 8010b60:	080154f4 	.word	0x080154f4
 8010b64:	08015124 	.word	0x08015124
 8010b68:	0801554c 	.word	0x0801554c
 8010b6c:	0801556c 	.word	0x0801556c
 8010b70:	080155a8 	.word	0x080155a8
 8010b74:	080155c0 	.word	0x080155c0
 8010b78:	080155ec 	.word	0x080155ec

08010b7c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010b7c:	b5b0      	push	{r4, r5, r7, lr}
 8010b7e:	b08a      	sub	sp, #40	; 0x28
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d106      	bne.n	8010b98 <tcp_output+0x1c>
 8010b8a:	4b8a      	ldr	r3, [pc, #552]	; (8010db4 <tcp_output+0x238>)
 8010b8c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010b90:	4989      	ldr	r1, [pc, #548]	; (8010db8 <tcp_output+0x23c>)
 8010b92:	488a      	ldr	r0, [pc, #552]	; (8010dbc <tcp_output+0x240>)
 8010b94:	f001 fab6 	bl	8012104 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	7d1b      	ldrb	r3, [r3, #20]
 8010b9c:	2b01      	cmp	r3, #1
 8010b9e:	d106      	bne.n	8010bae <tcp_output+0x32>
 8010ba0:	4b84      	ldr	r3, [pc, #528]	; (8010db4 <tcp_output+0x238>)
 8010ba2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010ba6:	4986      	ldr	r1, [pc, #536]	; (8010dc0 <tcp_output+0x244>)
 8010ba8:	4884      	ldr	r0, [pc, #528]	; (8010dbc <tcp_output+0x240>)
 8010baa:	f001 faab 	bl	8012104 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010bae:	4b85      	ldr	r3, [pc, #532]	; (8010dc4 <tcp_output+0x248>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d101      	bne.n	8010bbc <tcp_output+0x40>
    return ERR_OK;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	e1ce      	b.n	8010f5a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	bf28      	it	cs
 8010bcc:	4613      	movcs	r3, r2
 8010bce:	b29b      	uxth	r3, r3
 8010bd0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d10b      	bne.n	8010bf6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	8b5b      	ldrh	r3, [r3, #26]
 8010be2:	f003 0302 	and.w	r3, r3, #2
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	f000 81aa 	beq.w	8010f40 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f000 fdcb 	bl	8011788 <tcp_send_empty_ack>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	e1b1      	b.n	8010f5a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010bf6:	6879      	ldr	r1, [r7, #4]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	3304      	adds	r3, #4
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f7ff fc7c 	bl	80104fc <tcp_route>
 8010c04:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d102      	bne.n	8010c12 <tcp_output+0x96>
    return ERR_RTE;
 8010c0c:	f06f 0303 	mvn.w	r3, #3
 8010c10:	e1a3      	b.n	8010f5a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d003      	beq.n	8010c20 <tcp_output+0xa4>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d111      	bne.n	8010c44 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d002      	beq.n	8010c2c <tcp_output+0xb0>
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	3304      	adds	r3, #4
 8010c2a:	e000      	b.n	8010c2e <tcp_output+0xb2>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d102      	bne.n	8010c3c <tcp_output+0xc0>
      return ERR_RTE;
 8010c36:	f06f 0303 	mvn.w	r3, #3
 8010c3a:	e18e      	b.n	8010f5a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7f7 fc35 	bl	80084ba <lwip_htonl>
 8010c50:	4602      	mov	r2, r0
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c56:	1ad3      	subs	r3, r2, r3
 8010c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c5a:	8912      	ldrh	r2, [r2, #8]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	69ba      	ldr	r2, [r7, #24]
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d227      	bcs.n	8010cb4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d114      	bne.n	8010c9c <tcp_output+0x120>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d110      	bne.n	8010c9c <tcp_output+0x120>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d10b      	bne.n	8010c9c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2200      	movs	r2, #0
 8010c88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2201      	movs	r2, #1
 8010c90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2200      	movs	r2, #0
 8010c98:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	8b5b      	ldrh	r3, [r3, #26]
 8010ca0:	f003 0302 	and.w	r3, r3, #2
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	f000 814d 	beq.w	8010f44 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 fd6c 	bl	8011788 <tcp_send_empty_ack>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	e152      	b.n	8010f5a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cc0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010cc2:	6a3b      	ldr	r3, [r7, #32]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f000 811c 	beq.w	8010f02 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010cca:	e002      	b.n	8010cd2 <tcp_output+0x156>
 8010ccc:	6a3b      	ldr	r3, [r7, #32]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	623b      	str	r3, [r7, #32]
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1f8      	bne.n	8010ccc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010cda:	e112      	b.n	8010f02 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	899b      	ldrh	r3, [r3, #12]
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7f7 fbd3 	bl	8008490 <lwip_htons>
 8010cea:	4603      	mov	r3, r0
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	f003 0304 	and.w	r3, r3, #4
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d006      	beq.n	8010d04 <tcp_output+0x188>
 8010cf6:	4b2f      	ldr	r3, [pc, #188]	; (8010db4 <tcp_output+0x238>)
 8010cf8:	f240 5236 	movw	r2, #1334	; 0x536
 8010cfc:	4932      	ldr	r1, [pc, #200]	; (8010dc8 <tcp_output+0x24c>)
 8010cfe:	482f      	ldr	r0, [pc, #188]	; (8010dbc <tcp_output+0x240>)
 8010d00:	f001 fa00 	bl	8012104 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d01f      	beq.n	8010d4c <tcp_output+0x1d0>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	8b5b      	ldrh	r3, [r3, #26]
 8010d10:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d119      	bne.n	8010d4c <tcp_output+0x1d0>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d00b      	beq.n	8010d38 <tcp_output+0x1bc>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d110      	bne.n	8010d4c <tcp_output+0x1d0>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d2e:	891a      	ldrh	r2, [r3, #8]
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d209      	bcs.n	8010d4c <tcp_output+0x1d0>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d004      	beq.n	8010d4c <tcp_output+0x1d0>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d48:	2b08      	cmp	r3, #8
 8010d4a:	d901      	bls.n	8010d50 <tcp_output+0x1d4>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e000      	b.n	8010d52 <tcp_output+0x1d6>
 8010d50:	2300      	movs	r3, #0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d106      	bne.n	8010d64 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	8b5b      	ldrh	r3, [r3, #26]
 8010d5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f000 80e4 	beq.w	8010f2c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	7d1b      	ldrb	r3, [r3, #20]
 8010d68:	2b02      	cmp	r3, #2
 8010d6a:	d00d      	beq.n	8010d88 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6e:	68db      	ldr	r3, [r3, #12]
 8010d70:	899b      	ldrh	r3, [r3, #12]
 8010d72:	b29c      	uxth	r4, r3
 8010d74:	2010      	movs	r0, #16
 8010d76:	f7f7 fb8b 	bl	8008490 <lwip_htons>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	461a      	mov	r2, r3
 8010d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d80:	68db      	ldr	r3, [r3, #12]
 8010d82:	4322      	orrs	r2, r4
 8010d84:	b292      	uxth	r2, r2
 8010d86:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010d88:	697a      	ldr	r2, [r7, #20]
 8010d8a:	6879      	ldr	r1, [r7, #4]
 8010d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d8e:	f000 f909 	bl	8010fa4 <tcp_output_segment>
 8010d92:	4603      	mov	r3, r0
 8010d94:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d016      	beq.n	8010dcc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	8b5b      	ldrh	r3, [r3, #26]
 8010da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010da6:	b29a      	uxth	r2, r3
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	835a      	strh	r2, [r3, #26]
      return err;
 8010dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010db0:	e0d3      	b.n	8010f5a <tcp_output+0x3de>
 8010db2:	bf00      	nop
 8010db4:	080150ac 	.word	0x080150ac
 8010db8:	08015614 	.word	0x08015614
 8010dbc:	08015124 	.word	0x08015124
 8010dc0:	0801562c 	.word	0x0801562c
 8010dc4:	240081a4 	.word	0x240081a4
 8010dc8:	08015654 	.word	0x08015654
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	7d1b      	ldrb	r3, [r3, #20]
 8010dd8:	2b02      	cmp	r3, #2
 8010dda:	d006      	beq.n	8010dea <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	8b5b      	ldrh	r3, [r3, #26]
 8010de0:	f023 0303 	bic.w	r3, r3, #3
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7f7 fb62 	bl	80084ba <lwip_htonl>
 8010df6:	4604      	mov	r4, r0
 8010df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfa:	891b      	ldrh	r3, [r3, #8]
 8010dfc:	461d      	mov	r5, r3
 8010dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	899b      	ldrh	r3, [r3, #12]
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7f7 fb42 	bl	8008490 <lwip_htons>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	b2db      	uxtb	r3, r3
 8010e10:	f003 0303 	and.w	r3, r3, #3
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d001      	beq.n	8010e1c <tcp_output+0x2a0>
 8010e18:	2301      	movs	r3, #1
 8010e1a:	e000      	b.n	8010e1e <tcp_output+0x2a2>
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	442b      	add	r3, r5
 8010e20:	4423      	add	r3, r4
 8010e22:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	1ad3      	subs	r3, r2, r3
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	da02      	bge.n	8010e36 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	68ba      	ldr	r2, [r7, #8]
 8010e34:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e38:	891b      	ldrh	r3, [r3, #8]
 8010e3a:	461c      	mov	r4, r3
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	899b      	ldrh	r3, [r3, #12]
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7f7 fb23 	bl	8008490 <lwip_htons>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	f003 0303 	and.w	r3, r3, #3
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d001      	beq.n	8010e5a <tcp_output+0x2de>
 8010e56:	2301      	movs	r3, #1
 8010e58:	e000      	b.n	8010e5c <tcp_output+0x2e0>
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	4423      	add	r3, r4
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d049      	beq.n	8010ef6 <tcp_output+0x37a>
      seg->next = NULL;
 8010e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e64:	2200      	movs	r2, #0
 8010e66:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d105      	bne.n	8010e7c <tcp_output+0x300>
        pcb->unacked = seg;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e74:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e78:	623b      	str	r3, [r7, #32]
 8010e7a:	e03f      	b.n	8010efc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7f7 fb19 	bl	80084ba <lwip_htonl>
 8010e88:	4604      	mov	r4, r0
 8010e8a:	6a3b      	ldr	r3, [r7, #32]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7f7 fb12 	bl	80084ba <lwip_htonl>
 8010e96:	4603      	mov	r3, r0
 8010e98:	1ae3      	subs	r3, r4, r3
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	da24      	bge.n	8010ee8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	3370      	adds	r3, #112	; 0x70
 8010ea2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010ea4:	e002      	b.n	8010eac <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d011      	beq.n	8010ed8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	68db      	ldr	r3, [r3, #12]
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7f7 fafc 	bl	80084ba <lwip_htonl>
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7f7 faf5 	bl	80084ba <lwip_htonl>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	dbe6      	blt.n	8010ea6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	681a      	ldr	r2, [r3, #0]
 8010edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ede:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ee4:	601a      	str	r2, [r3, #0]
 8010ee6:	e009      	b.n	8010efc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010ee8:	6a3b      	ldr	r3, [r7, #32]
 8010eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010eee:	6a3b      	ldr	r3, [r7, #32]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	623b      	str	r3, [r7, #32]
 8010ef4:	e002      	b.n	8010efc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010ef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ef8:	f7fc fc3f 	bl	800d77a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f00:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d012      	beq.n	8010f2e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7f7 fad3 	bl	80084ba <lwip_htonl>
 8010f14:	4602      	mov	r2, r0
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f1a:	1ad3      	subs	r3, r2, r3
 8010f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f1e:	8912      	ldrh	r2, [r2, #8]
 8010f20:	4413      	add	r3, r2
  while (seg != NULL &&
 8010f22:	69ba      	ldr	r2, [r7, #24]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	f4bf aed9 	bcs.w	8010cdc <tcp_output+0x160>
 8010f2a:	e000      	b.n	8010f2e <tcp_output+0x3b2>
      break;
 8010f2c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d108      	bne.n	8010f48 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010f3e:	e004      	b.n	8010f4a <tcp_output+0x3ce>
    goto output_done;
 8010f40:	bf00      	nop
 8010f42:	e002      	b.n	8010f4a <tcp_output+0x3ce>
    goto output_done;
 8010f44:	bf00      	nop
 8010f46:	e000      	b.n	8010f4a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010f48:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	8b5b      	ldrh	r3, [r3, #26]
 8010f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f52:	b29a      	uxth	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010f58:	2300      	movs	r3, #0
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3728      	adds	r7, #40	; 0x28
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bdb0      	pop	{r4, r5, r7, pc}
 8010f62:	bf00      	nop

08010f64 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d106      	bne.n	8010f80 <tcp_output_segment_busy+0x1c>
 8010f72:	4b09      	ldr	r3, [pc, #36]	; (8010f98 <tcp_output_segment_busy+0x34>)
 8010f74:	f240 529a 	movw	r2, #1434	; 0x59a
 8010f78:	4908      	ldr	r1, [pc, #32]	; (8010f9c <tcp_output_segment_busy+0x38>)
 8010f7a:	4809      	ldr	r0, [pc, #36]	; (8010fa0 <tcp_output_segment_busy+0x3c>)
 8010f7c:	f001 f8c2 	bl	8012104 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	7b9b      	ldrb	r3, [r3, #14]
 8010f86:	2b01      	cmp	r3, #1
 8010f88:	d001      	beq.n	8010f8e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	e000      	b.n	8010f90 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010f8e:	2300      	movs	r3, #0
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3708      	adds	r7, #8
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	080150ac 	.word	0x080150ac
 8010f9c:	0801566c 	.word	0x0801566c
 8010fa0:	08015124 	.word	0x08015124

08010fa4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010fa4:	b5b0      	push	{r4, r5, r7, lr}
 8010fa6:	b08c      	sub	sp, #48	; 0x30
 8010fa8:	af04      	add	r7, sp, #16
 8010faa:	60f8      	str	r0, [r7, #12]
 8010fac:	60b9      	str	r1, [r7, #8]
 8010fae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d106      	bne.n	8010fc4 <tcp_output_segment+0x20>
 8010fb6:	4b63      	ldr	r3, [pc, #396]	; (8011144 <tcp_output_segment+0x1a0>)
 8010fb8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010fbc:	4962      	ldr	r1, [pc, #392]	; (8011148 <tcp_output_segment+0x1a4>)
 8010fbe:	4863      	ldr	r0, [pc, #396]	; (801114c <tcp_output_segment+0x1a8>)
 8010fc0:	f001 f8a0 	bl	8012104 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d106      	bne.n	8010fd8 <tcp_output_segment+0x34>
 8010fca:	4b5e      	ldr	r3, [pc, #376]	; (8011144 <tcp_output_segment+0x1a0>)
 8010fcc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010fd0:	495f      	ldr	r1, [pc, #380]	; (8011150 <tcp_output_segment+0x1ac>)
 8010fd2:	485e      	ldr	r0, [pc, #376]	; (801114c <tcp_output_segment+0x1a8>)
 8010fd4:	f001 f896 	bl	8012104 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d106      	bne.n	8010fec <tcp_output_segment+0x48>
 8010fde:	4b59      	ldr	r3, [pc, #356]	; (8011144 <tcp_output_segment+0x1a0>)
 8010fe0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010fe4:	495b      	ldr	r1, [pc, #364]	; (8011154 <tcp_output_segment+0x1b0>)
 8010fe6:	4859      	ldr	r0, [pc, #356]	; (801114c <tcp_output_segment+0x1a8>)
 8010fe8:	f001 f88c 	bl	8012104 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010fec:	68f8      	ldr	r0, [r7, #12]
 8010fee:	f7ff ffb9 	bl	8010f64 <tcp_output_segment_busy>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d001      	beq.n	8010ffc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	e09f      	b.n	801113c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	68dc      	ldr	r4, [r3, #12]
 8011004:	4610      	mov	r0, r2
 8011006:	f7f7 fa58 	bl	80084ba <lwip_htonl>
 801100a:	4603      	mov	r3, r0
 801100c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	68dc      	ldr	r4, [r3, #12]
 8011016:	4610      	mov	r0, r2
 8011018:	f7f7 fa3a 	bl	8008490 <lwip_htons>
 801101c:	4603      	mov	r3, r0
 801101e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011024:	68ba      	ldr	r2, [r7, #8]
 8011026:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011028:	441a      	add	r2, r3
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	68db      	ldr	r3, [r3, #12]
 8011032:	3314      	adds	r3, #20
 8011034:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	7a9b      	ldrb	r3, [r3, #10]
 801103a:	f003 0301 	and.w	r3, r3, #1
 801103e:	2b00      	cmp	r3, #0
 8011040:	d015      	beq.n	801106e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	3304      	adds	r3, #4
 8011046:	461a      	mov	r2, r3
 8011048:	6879      	ldr	r1, [r7, #4]
 801104a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801104e:	f7fc fe8b 	bl	800dd68 <tcp_eff_send_mss_netif>
 8011052:	4603      	mov	r3, r0
 8011054:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011056:	8b7b      	ldrh	r3, [r7, #26]
 8011058:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801105c:	4618      	mov	r0, r3
 801105e:	f7f7 fa2c 	bl	80084ba <lwip_htonl>
 8011062:	4602      	mov	r2, r0
 8011064:	69fb      	ldr	r3, [r7, #28]
 8011066:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011068:	69fb      	ldr	r3, [r7, #28]
 801106a:	3304      	adds	r3, #4
 801106c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011074:	2b00      	cmp	r3, #0
 8011076:	da02      	bge.n	801107e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	2200      	movs	r2, #0
 801107c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011082:	2b00      	cmp	r3, #0
 8011084:	d10c      	bne.n	80110a0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011086:	4b34      	ldr	r3, [pc, #208]	; (8011158 <tcp_output_segment+0x1b4>)
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	4618      	mov	r0, r3
 8011096:	f7f7 fa10 	bl	80084ba <lwip_htonl>
 801109a:	4602      	mov	r2, r0
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	68da      	ldr	r2, [r3, #12]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	1ad3      	subs	r3, r2, r3
 80110ac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	8959      	ldrh	r1, [r3, #10]
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	8b3a      	ldrh	r2, [r7, #24]
 80110ba:	1a8a      	subs	r2, r1, r2
 80110bc:	b292      	uxth	r2, r2
 80110be:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	8919      	ldrh	r1, [r3, #8]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	8b3a      	ldrh	r2, [r7, #24]
 80110cc:	1a8a      	subs	r2, r1, r2
 80110ce:	b292      	uxth	r2, r2
 80110d0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	68fa      	ldr	r2, [r7, #12]
 80110d8:	68d2      	ldr	r2, [r2, #12]
 80110da:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	2200      	movs	r2, #0
 80110e2:	741a      	strb	r2, [r3, #16]
 80110e4:	2200      	movs	r2, #0
 80110e6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	f103 0214 	add.w	r2, r3, #20
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	7a9b      	ldrb	r3, [r3, #10]
 80110f4:	009b      	lsls	r3, r3, #2
 80110f6:	f003 0304 	and.w	r3, r3, #4
 80110fa:	4413      	add	r3, r2
 80110fc:	69fa      	ldr	r2, [r7, #28]
 80110fe:	429a      	cmp	r2, r3
 8011100:	d006      	beq.n	8011110 <tcp_output_segment+0x16c>
 8011102:	4b10      	ldr	r3, [pc, #64]	; (8011144 <tcp_output_segment+0x1a0>)
 8011104:	f240 621c 	movw	r2, #1564	; 0x61c
 8011108:	4914      	ldr	r1, [pc, #80]	; (801115c <tcp_output_segment+0x1b8>)
 801110a:	4810      	ldr	r0, [pc, #64]	; (801114c <tcp_output_segment+0x1a8>)
 801110c:	f000 fffa 	bl	8012104 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	6858      	ldr	r0, [r3, #4]
 8011114:	68b9      	ldr	r1, [r7, #8]
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	1d1c      	adds	r4, r3, #4
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	7add      	ldrb	r5, [r3, #11]
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	7a9b      	ldrb	r3, [r3, #10]
 8011122:	687a      	ldr	r2, [r7, #4]
 8011124:	9202      	str	r2, [sp, #8]
 8011126:	2206      	movs	r2, #6
 8011128:	9201      	str	r2, [sp, #4]
 801112a:	9300      	str	r3, [sp, #0]
 801112c:	462b      	mov	r3, r5
 801112e:	4622      	mov	r2, r4
 8011130:	f7f8 fe42 	bl	8009db8 <ip4_output_if>
 8011134:	4603      	mov	r3, r0
 8011136:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801113c:	4618      	mov	r0, r3
 801113e:	3720      	adds	r7, #32
 8011140:	46bd      	mov	sp, r7
 8011142:	bdb0      	pop	{r4, r5, r7, pc}
 8011144:	080150ac 	.word	0x080150ac
 8011148:	08015694 	.word	0x08015694
 801114c:	08015124 	.word	0x08015124
 8011150:	080156b4 	.word	0x080156b4
 8011154:	080156d4 	.word	0x080156d4
 8011158:	24008158 	.word	0x24008158
 801115c:	080156f8 	.word	0x080156f8

08011160 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011160:	b5b0      	push	{r4, r5, r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d106      	bne.n	801117c <tcp_rexmit_rto_prepare+0x1c>
 801116e:	4b31      	ldr	r3, [pc, #196]	; (8011234 <tcp_rexmit_rto_prepare+0xd4>)
 8011170:	f240 6263 	movw	r2, #1635	; 0x663
 8011174:	4930      	ldr	r1, [pc, #192]	; (8011238 <tcp_rexmit_rto_prepare+0xd8>)
 8011176:	4831      	ldr	r0, [pc, #196]	; (801123c <tcp_rexmit_rto_prepare+0xdc>)
 8011178:	f000 ffc4 	bl	8012104 <iprintf>

  if (pcb->unacked == NULL) {
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011180:	2b00      	cmp	r3, #0
 8011182:	d102      	bne.n	801118a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011184:	f06f 0305 	mvn.w	r3, #5
 8011188:	e050      	b.n	801122c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801118e:	60fb      	str	r3, [r7, #12]
 8011190:	e00b      	b.n	80111aa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011192:	68f8      	ldr	r0, [r7, #12]
 8011194:	f7ff fee6 	bl	8010f64 <tcp_output_segment_busy>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d002      	beq.n	80111a4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801119e:	f06f 0305 	mvn.w	r3, #5
 80111a2:	e043      	b.n	801122c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	60fb      	str	r3, [r7, #12]
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d1ef      	bne.n	8011192 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80111b2:	68f8      	ldr	r0, [r7, #12]
 80111b4:	f7ff fed6 	bl	8010f64 <tcp_output_segment_busy>
 80111b8:	4603      	mov	r3, r0
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d002      	beq.n	80111c4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80111be:	f06f 0305 	mvn.w	r3, #5
 80111c2:	e033      	b.n	801122c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2200      	movs	r2, #0
 80111d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	8b5b      	ldrh	r3, [r3, #26]
 80111de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80111e2:	b29a      	uxth	r2, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7f7 f963 	bl	80084ba <lwip_htonl>
 80111f4:	4604      	mov	r4, r0
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	891b      	ldrh	r3, [r3, #8]
 80111fa:	461d      	mov	r5, r3
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	68db      	ldr	r3, [r3, #12]
 8011200:	899b      	ldrh	r3, [r3, #12]
 8011202:	b29b      	uxth	r3, r3
 8011204:	4618      	mov	r0, r3
 8011206:	f7f7 f943 	bl	8008490 <lwip_htons>
 801120a:	4603      	mov	r3, r0
 801120c:	b2db      	uxtb	r3, r3
 801120e:	f003 0303 	and.w	r3, r3, #3
 8011212:	2b00      	cmp	r3, #0
 8011214:	d001      	beq.n	801121a <tcp_rexmit_rto_prepare+0xba>
 8011216:	2301      	movs	r3, #1
 8011218:	e000      	b.n	801121c <tcp_rexmit_rto_prepare+0xbc>
 801121a:	2300      	movs	r3, #0
 801121c:	442b      	add	r3, r5
 801121e:	18e2      	adds	r2, r4, r3
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2200      	movs	r2, #0
 8011228:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801122a:	2300      	movs	r3, #0
}
 801122c:	4618      	mov	r0, r3
 801122e:	3710      	adds	r7, #16
 8011230:	46bd      	mov	sp, r7
 8011232:	bdb0      	pop	{r4, r5, r7, pc}
 8011234:	080150ac 	.word	0x080150ac
 8011238:	0801570c 	.word	0x0801570c
 801123c:	08015124 	.word	0x08015124

08011240 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d106      	bne.n	801125c <tcp_rexmit_rto_commit+0x1c>
 801124e:	4b0d      	ldr	r3, [pc, #52]	; (8011284 <tcp_rexmit_rto_commit+0x44>)
 8011250:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011254:	490c      	ldr	r1, [pc, #48]	; (8011288 <tcp_rexmit_rto_commit+0x48>)
 8011256:	480d      	ldr	r0, [pc, #52]	; (801128c <tcp_rexmit_rto_commit+0x4c>)
 8011258:	f000 ff54 	bl	8012104 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011262:	2bff      	cmp	r3, #255	; 0xff
 8011264:	d007      	beq.n	8011276 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801126c:	3301      	adds	r3, #1
 801126e:	b2da      	uxtb	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f7ff fc80 	bl	8010b7c <tcp_output>
}
 801127c:	bf00      	nop
 801127e:	3708      	adds	r7, #8
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}
 8011284:	080150ac 	.word	0x080150ac
 8011288:	08015730 	.word	0x08015730
 801128c:	08015124 	.word	0x08015124

08011290 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d106      	bne.n	80112ac <tcp_rexmit_rto+0x1c>
 801129e:	4b0a      	ldr	r3, [pc, #40]	; (80112c8 <tcp_rexmit_rto+0x38>)
 80112a0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80112a4:	4909      	ldr	r1, [pc, #36]	; (80112cc <tcp_rexmit_rto+0x3c>)
 80112a6:	480a      	ldr	r0, [pc, #40]	; (80112d0 <tcp_rexmit_rto+0x40>)
 80112a8:	f000 ff2c 	bl	8012104 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f7ff ff57 	bl	8011160 <tcp_rexmit_rto_prepare>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d102      	bne.n	80112be <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f7ff ffc1 	bl	8011240 <tcp_rexmit_rto_commit>
  }
}
 80112be:	bf00      	nop
 80112c0:	3708      	adds	r7, #8
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	080150ac 	.word	0x080150ac
 80112cc:	08015754 	.word	0x08015754
 80112d0:	08015124 	.word	0x08015124

080112d4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80112d4:	b590      	push	{r4, r7, lr}
 80112d6:	b085      	sub	sp, #20
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d106      	bne.n	80112f0 <tcp_rexmit+0x1c>
 80112e2:	4b2f      	ldr	r3, [pc, #188]	; (80113a0 <tcp_rexmit+0xcc>)
 80112e4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80112e8:	492e      	ldr	r1, [pc, #184]	; (80113a4 <tcp_rexmit+0xd0>)
 80112ea:	482f      	ldr	r0, [pc, #188]	; (80113a8 <tcp_rexmit+0xd4>)
 80112ec:	f000 ff0a 	bl	8012104 <iprintf>

  if (pcb->unacked == NULL) {
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d102      	bne.n	80112fe <tcp_rexmit+0x2a>
    return ERR_VAL;
 80112f8:	f06f 0305 	mvn.w	r3, #5
 80112fc:	e04c      	b.n	8011398 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011302:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011304:	68b8      	ldr	r0, [r7, #8]
 8011306:	f7ff fe2d 	bl	8010f64 <tcp_output_segment_busy>
 801130a:	4603      	mov	r3, r0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d002      	beq.n	8011316 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011310:	f06f 0305 	mvn.w	r3, #5
 8011314:	e040      	b.n	8011398 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	336c      	adds	r3, #108	; 0x6c
 8011322:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011324:	e002      	b.n	801132c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d011      	beq.n	8011358 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	4618      	mov	r0, r3
 801133e:	f7f7 f8bc 	bl	80084ba <lwip_htonl>
 8011342:	4604      	mov	r4, r0
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	4618      	mov	r0, r3
 801134c:	f7f7 f8b5 	bl	80084ba <lwip_htonl>
 8011350:	4603      	mov	r3, r0
 8011352:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011354:	2b00      	cmp	r3, #0
 8011356:	dbe6      	blt.n	8011326 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681a      	ldr	r2, [r3, #0]
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	68ba      	ldr	r2, [r7, #8]
 8011364:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d103      	bne.n	8011376 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2200      	movs	r2, #0
 8011372:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801137c:	2bff      	cmp	r3, #255	; 0xff
 801137e:	d007      	beq.n	8011390 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011386:	3301      	adds	r3, #1
 8011388:	b2da      	uxtb	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2200      	movs	r2, #0
 8011394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011396:	2300      	movs	r3, #0
}
 8011398:	4618      	mov	r0, r3
 801139a:	3714      	adds	r7, #20
 801139c:	46bd      	mov	sp, r7
 801139e:	bd90      	pop	{r4, r7, pc}
 80113a0:	080150ac 	.word	0x080150ac
 80113a4:	08015770 	.word	0x08015770
 80113a8:	08015124 	.word	0x08015124

080113ac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d106      	bne.n	80113c8 <tcp_rexmit_fast+0x1c>
 80113ba:	4b2a      	ldr	r3, [pc, #168]	; (8011464 <tcp_rexmit_fast+0xb8>)
 80113bc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80113c0:	4929      	ldr	r1, [pc, #164]	; (8011468 <tcp_rexmit_fast+0xbc>)
 80113c2:	482a      	ldr	r0, [pc, #168]	; (801146c <tcp_rexmit_fast+0xc0>)
 80113c4:	f000 fe9e 	bl	8012104 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d045      	beq.n	801145c <tcp_rexmit_fast+0xb0>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	8b5b      	ldrh	r3, [r3, #26]
 80113d4:	f003 0304 	and.w	r3, r3, #4
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d13f      	bne.n	801145c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f7ff ff79 	bl	80112d4 <tcp_rexmit>
 80113e2:	4603      	mov	r3, r0
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d139      	bne.n	801145c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80113f4:	4293      	cmp	r3, r2
 80113f6:	bf28      	it	cs
 80113f8:	4613      	movcs	r3, r2
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	da00      	bge.n	8011402 <tcp_rexmit_fast+0x56>
 8011400:	3301      	adds	r3, #1
 8011402:	105b      	asrs	r3, r3, #1
 8011404:	b29a      	uxth	r2, r3
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011412:	461a      	mov	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011418:	005b      	lsls	r3, r3, #1
 801141a:	429a      	cmp	r2, r3
 801141c:	d206      	bcs.n	801142c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011422:	005b      	lsls	r3, r3, #1
 8011424:	b29a      	uxth	r2, r3
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011436:	4619      	mov	r1, r3
 8011438:	0049      	lsls	r1, r1, #1
 801143a:	440b      	add	r3, r1
 801143c:	b29b      	uxth	r3, r3
 801143e:	4413      	add	r3, r2
 8011440:	b29a      	uxth	r2, r3
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	8b5b      	ldrh	r3, [r3, #26]
 801144c:	f043 0304 	orr.w	r3, r3, #4
 8011450:	b29a      	uxth	r2, r3
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2200      	movs	r2, #0
 801145a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801145c:	bf00      	nop
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	080150ac 	.word	0x080150ac
 8011468:	08015788 	.word	0x08015788
 801146c:	08015124 	.word	0x08015124

08011470 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b086      	sub	sp, #24
 8011474:	af00      	add	r7, sp, #0
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	607b      	str	r3, [r7, #4]
 801147a:	460b      	mov	r3, r1
 801147c:	817b      	strh	r3, [r7, #10]
 801147e:	4613      	mov	r3, r2
 8011480:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011482:	897a      	ldrh	r2, [r7, #10]
 8011484:	893b      	ldrh	r3, [r7, #8]
 8011486:	4413      	add	r3, r2
 8011488:	b29b      	uxth	r3, r3
 801148a:	3314      	adds	r3, #20
 801148c:	b29b      	uxth	r3, r3
 801148e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011492:	4619      	mov	r1, r3
 8011494:	2022      	movs	r0, #34	; 0x22
 8011496:	f7fa fc19 	bl	800bccc <pbuf_alloc>
 801149a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d04d      	beq.n	801153e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80114a2:	897b      	ldrh	r3, [r7, #10]
 80114a4:	3313      	adds	r3, #19
 80114a6:	697a      	ldr	r2, [r7, #20]
 80114a8:	8952      	ldrh	r2, [r2, #10]
 80114aa:	4293      	cmp	r3, r2
 80114ac:	db06      	blt.n	80114bc <tcp_output_alloc_header_common+0x4c>
 80114ae:	4b26      	ldr	r3, [pc, #152]	; (8011548 <tcp_output_alloc_header_common+0xd8>)
 80114b0:	f240 7223 	movw	r2, #1827	; 0x723
 80114b4:	4925      	ldr	r1, [pc, #148]	; (801154c <tcp_output_alloc_header_common+0xdc>)
 80114b6:	4826      	ldr	r0, [pc, #152]	; (8011550 <tcp_output_alloc_header_common+0xe0>)
 80114b8:	f000 fe24 	bl	8012104 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80114c2:	8c3b      	ldrh	r3, [r7, #32]
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7f6 ffe3 	bl	8008490 <lwip_htons>
 80114ca:	4603      	mov	r3, r0
 80114cc:	461a      	mov	r2, r3
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80114d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7f6 ffdb 	bl	8008490 <lwip_htons>
 80114da:	4603      	mov	r3, r0
 80114dc:	461a      	mov	r2, r3
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80114e8:	68f8      	ldr	r0, [r7, #12]
 80114ea:	f7f6 ffe6 	bl	80084ba <lwip_htonl>
 80114ee:	4602      	mov	r2, r0
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80114f4:	897b      	ldrh	r3, [r7, #10]
 80114f6:	089b      	lsrs	r3, r3, #2
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	3305      	adds	r3, #5
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	031b      	lsls	r3, r3, #12
 8011500:	b29a      	uxth	r2, r3
 8011502:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011506:	b29b      	uxth	r3, r3
 8011508:	4313      	orrs	r3, r2
 801150a:	b29b      	uxth	r3, r3
 801150c:	4618      	mov	r0, r3
 801150e:	f7f6 ffbf 	bl	8008490 <lwip_htons>
 8011512:	4603      	mov	r3, r0
 8011514:	461a      	mov	r2, r3
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801151a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801151c:	4618      	mov	r0, r3
 801151e:	f7f6 ffb7 	bl	8008490 <lwip_htons>
 8011522:	4603      	mov	r3, r0
 8011524:	461a      	mov	r2, r3
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	2200      	movs	r2, #0
 801152e:	741a      	strb	r2, [r3, #16]
 8011530:	2200      	movs	r2, #0
 8011532:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	2200      	movs	r2, #0
 8011538:	749a      	strb	r2, [r3, #18]
 801153a:	2200      	movs	r2, #0
 801153c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801153e:	697b      	ldr	r3, [r7, #20]
}
 8011540:	4618      	mov	r0, r3
 8011542:	3718      	adds	r7, #24
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	080150ac 	.word	0x080150ac
 801154c:	080157a8 	.word	0x080157a8
 8011550:	08015124 	.word	0x08015124

08011554 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011554:	b5b0      	push	{r4, r5, r7, lr}
 8011556:	b08a      	sub	sp, #40	; 0x28
 8011558:	af04      	add	r7, sp, #16
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	607b      	str	r3, [r7, #4]
 801155e:	460b      	mov	r3, r1
 8011560:	817b      	strh	r3, [r7, #10]
 8011562:	4613      	mov	r3, r2
 8011564:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d106      	bne.n	801157a <tcp_output_alloc_header+0x26>
 801156c:	4b15      	ldr	r3, [pc, #84]	; (80115c4 <tcp_output_alloc_header+0x70>)
 801156e:	f240 7242 	movw	r2, #1858	; 0x742
 8011572:	4915      	ldr	r1, [pc, #84]	; (80115c8 <tcp_output_alloc_header+0x74>)
 8011574:	4815      	ldr	r0, [pc, #84]	; (80115cc <tcp_output_alloc_header+0x78>)
 8011576:	f000 fdc5 	bl	8012104 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	8adb      	ldrh	r3, [r3, #22]
 8011582:	68fa      	ldr	r2, [r7, #12]
 8011584:	8b12      	ldrh	r2, [r2, #24]
 8011586:	68f9      	ldr	r1, [r7, #12]
 8011588:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801158a:	893d      	ldrh	r5, [r7, #8]
 801158c:	897c      	ldrh	r4, [r7, #10]
 801158e:	9103      	str	r1, [sp, #12]
 8011590:	2110      	movs	r1, #16
 8011592:	9102      	str	r1, [sp, #8]
 8011594:	9201      	str	r2, [sp, #4]
 8011596:	9300      	str	r3, [sp, #0]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	462a      	mov	r2, r5
 801159c:	4621      	mov	r1, r4
 801159e:	f7ff ff67 	bl	8011470 <tcp_output_alloc_header_common>
 80115a2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d006      	beq.n	80115b8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ae:	68fa      	ldr	r2, [r7, #12]
 80115b0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80115b2:	441a      	add	r2, r3
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80115b8:	697b      	ldr	r3, [r7, #20]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3718      	adds	r7, #24
 80115be:	46bd      	mov	sp, r7
 80115c0:	bdb0      	pop	{r4, r5, r7, pc}
 80115c2:	bf00      	nop
 80115c4:	080150ac 	.word	0x080150ac
 80115c8:	080157d8 	.word	0x080157d8
 80115cc:	08015124 	.word	0x08015124

080115d0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b088      	sub	sp, #32
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	4611      	mov	r1, r2
 80115dc:	461a      	mov	r2, r3
 80115de:	460b      	mov	r3, r1
 80115e0:	71fb      	strb	r3, [r7, #7]
 80115e2:	4613      	mov	r3, r2
 80115e4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80115e6:	2300      	movs	r3, #0
 80115e8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d106      	bne.n	80115fe <tcp_output_fill_options+0x2e>
 80115f0:	4b13      	ldr	r3, [pc, #76]	; (8011640 <tcp_output_fill_options+0x70>)
 80115f2:	f240 7256 	movw	r2, #1878	; 0x756
 80115f6:	4913      	ldr	r1, [pc, #76]	; (8011644 <tcp_output_fill_options+0x74>)
 80115f8:	4813      	ldr	r0, [pc, #76]	; (8011648 <tcp_output_fill_options+0x78>)
 80115fa:	f000 fd83 	bl	8012104 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011604:	69bb      	ldr	r3, [r7, #24]
 8011606:	3314      	adds	r3, #20
 8011608:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	f103 0214 	add.w	r2, r3, #20
 8011610:	8bfb      	ldrh	r3, [r7, #30]
 8011612:	009b      	lsls	r3, r3, #2
 8011614:	4619      	mov	r1, r3
 8011616:	79fb      	ldrb	r3, [r7, #7]
 8011618:	009b      	lsls	r3, r3, #2
 801161a:	f003 0304 	and.w	r3, r3, #4
 801161e:	440b      	add	r3, r1
 8011620:	4413      	add	r3, r2
 8011622:	697a      	ldr	r2, [r7, #20]
 8011624:	429a      	cmp	r2, r3
 8011626:	d006      	beq.n	8011636 <tcp_output_fill_options+0x66>
 8011628:	4b05      	ldr	r3, [pc, #20]	; (8011640 <tcp_output_fill_options+0x70>)
 801162a:	f240 7275 	movw	r2, #1909	; 0x775
 801162e:	4907      	ldr	r1, [pc, #28]	; (801164c <tcp_output_fill_options+0x7c>)
 8011630:	4805      	ldr	r0, [pc, #20]	; (8011648 <tcp_output_fill_options+0x78>)
 8011632:	f000 fd67 	bl	8012104 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011636:	bf00      	nop
 8011638:	3720      	adds	r7, #32
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop
 8011640:	080150ac 	.word	0x080150ac
 8011644:	08015800 	.word	0x08015800
 8011648:	08015124 	.word	0x08015124
 801164c:	080156f8 	.word	0x080156f8

08011650 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b08a      	sub	sp, #40	; 0x28
 8011654:	af04      	add	r7, sp, #16
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	607a      	str	r2, [r7, #4]
 801165c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d106      	bne.n	8011672 <tcp_output_control_segment+0x22>
 8011664:	4b1c      	ldr	r3, [pc, #112]	; (80116d8 <tcp_output_control_segment+0x88>)
 8011666:	f240 7287 	movw	r2, #1927	; 0x787
 801166a:	491c      	ldr	r1, [pc, #112]	; (80116dc <tcp_output_control_segment+0x8c>)
 801166c:	481c      	ldr	r0, [pc, #112]	; (80116e0 <tcp_output_control_segment+0x90>)
 801166e:	f000 fd49 	bl	8012104 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011672:	683a      	ldr	r2, [r7, #0]
 8011674:	6879      	ldr	r1, [r7, #4]
 8011676:	68f8      	ldr	r0, [r7, #12]
 8011678:	f7fe ff40 	bl	80104fc <tcp_route>
 801167c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d102      	bne.n	801168a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011684:	23fc      	movs	r3, #252	; 0xfc
 8011686:	75fb      	strb	r3, [r7, #23]
 8011688:	e01c      	b.n	80116c4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d006      	beq.n	801169e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	7adb      	ldrb	r3, [r3, #11]
 8011694:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	7a9b      	ldrb	r3, [r3, #10]
 801169a:	757b      	strb	r3, [r7, #21]
 801169c:	e003      	b.n	80116a6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801169e:	23ff      	movs	r3, #255	; 0xff
 80116a0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80116a2:	2300      	movs	r3, #0
 80116a4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80116a6:	7dba      	ldrb	r2, [r7, #22]
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	9302      	str	r3, [sp, #8]
 80116ac:	2306      	movs	r3, #6
 80116ae:	9301      	str	r3, [sp, #4]
 80116b0:	7d7b      	ldrb	r3, [r7, #21]
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	4613      	mov	r3, r2
 80116b6:	683a      	ldr	r2, [r7, #0]
 80116b8:	6879      	ldr	r1, [r7, #4]
 80116ba:	68b8      	ldr	r0, [r7, #8]
 80116bc:	f7f8 fb7c 	bl	8009db8 <ip4_output_if>
 80116c0:	4603      	mov	r3, r0
 80116c2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80116c4:	68b8      	ldr	r0, [r7, #8]
 80116c6:	f7fa fde5 	bl	800c294 <pbuf_free>
  return err;
 80116ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3718      	adds	r7, #24
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	080150ac 	.word	0x080150ac
 80116dc:	08015828 	.word	0x08015828
 80116e0:	08015124 	.word	0x08015124

080116e4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80116e4:	b590      	push	{r4, r7, lr}
 80116e6:	b08b      	sub	sp, #44	; 0x2c
 80116e8:	af04      	add	r7, sp, #16
 80116ea:	60f8      	str	r0, [r7, #12]
 80116ec:	60b9      	str	r1, [r7, #8]
 80116ee:	607a      	str	r2, [r7, #4]
 80116f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d106      	bne.n	8011706 <tcp_rst+0x22>
 80116f8:	4b1f      	ldr	r3, [pc, #124]	; (8011778 <tcp_rst+0x94>)
 80116fa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80116fe:	491f      	ldr	r1, [pc, #124]	; (801177c <tcp_rst+0x98>)
 8011700:	481f      	ldr	r0, [pc, #124]	; (8011780 <tcp_rst+0x9c>)
 8011702:	f000 fcff 	bl	8012104 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011708:	2b00      	cmp	r3, #0
 801170a:	d106      	bne.n	801171a <tcp_rst+0x36>
 801170c:	4b1a      	ldr	r3, [pc, #104]	; (8011778 <tcp_rst+0x94>)
 801170e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011712:	491c      	ldr	r1, [pc, #112]	; (8011784 <tcp_rst+0xa0>)
 8011714:	481a      	ldr	r0, [pc, #104]	; (8011780 <tcp_rst+0x9c>)
 8011716:	f000 fcf5 	bl	8012104 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801171a:	2300      	movs	r3, #0
 801171c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801171e:	f246 0308 	movw	r3, #24584	; 0x6008
 8011722:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011724:	7dfb      	ldrb	r3, [r7, #23]
 8011726:	b29c      	uxth	r4, r3
 8011728:	68b8      	ldr	r0, [r7, #8]
 801172a:	f7f6 fec6 	bl	80084ba <lwip_htonl>
 801172e:	4602      	mov	r2, r0
 8011730:	8abb      	ldrh	r3, [r7, #20]
 8011732:	9303      	str	r3, [sp, #12]
 8011734:	2314      	movs	r3, #20
 8011736:	9302      	str	r3, [sp, #8]
 8011738:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801173a:	9301      	str	r3, [sp, #4]
 801173c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801173e:	9300      	str	r3, [sp, #0]
 8011740:	4613      	mov	r3, r2
 8011742:	2200      	movs	r2, #0
 8011744:	4621      	mov	r1, r4
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f7ff fe92 	bl	8011470 <tcp_output_alloc_header_common>
 801174c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d00c      	beq.n	801176e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011754:	7dfb      	ldrb	r3, [r7, #23]
 8011756:	2200      	movs	r2, #0
 8011758:	6939      	ldr	r1, [r7, #16]
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	f7ff ff38 	bl	80115d0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	6939      	ldr	r1, [r7, #16]
 8011766:	68f8      	ldr	r0, [r7, #12]
 8011768:	f7ff ff72 	bl	8011650 <tcp_output_control_segment>
 801176c:	e000      	b.n	8011770 <tcp_rst+0x8c>
    return;
 801176e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011770:	371c      	adds	r7, #28
 8011772:	46bd      	mov	sp, r7
 8011774:	bd90      	pop	{r4, r7, pc}
 8011776:	bf00      	nop
 8011778:	080150ac 	.word	0x080150ac
 801177c:	08015854 	.word	0x08015854
 8011780:	08015124 	.word	0x08015124
 8011784:	08015870 	.word	0x08015870

08011788 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011788:	b590      	push	{r4, r7, lr}
 801178a:	b087      	sub	sp, #28
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011790:	2300      	movs	r3, #0
 8011792:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011794:	2300      	movs	r3, #0
 8011796:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d106      	bne.n	80117ac <tcp_send_empty_ack+0x24>
 801179e:	4b28      	ldr	r3, [pc, #160]	; (8011840 <tcp_send_empty_ack+0xb8>)
 80117a0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80117a4:	4927      	ldr	r1, [pc, #156]	; (8011844 <tcp_send_empty_ack+0xbc>)
 80117a6:	4828      	ldr	r0, [pc, #160]	; (8011848 <tcp_send_empty_ack+0xc0>)
 80117a8:	f000 fcac 	bl	8012104 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80117ac:	7dfb      	ldrb	r3, [r7, #23]
 80117ae:	009b      	lsls	r3, r3, #2
 80117b0:	b2db      	uxtb	r3, r3
 80117b2:	f003 0304 	and.w	r3, r3, #4
 80117b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80117b8:	7d7b      	ldrb	r3, [r7, #21]
 80117ba:	b29c      	uxth	r4, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7f6 fe7a 	bl	80084ba <lwip_htonl>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2200      	movs	r2, #0
 80117ca:	4621      	mov	r1, r4
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f7ff fec1 	bl	8011554 <tcp_output_alloc_header>
 80117d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d109      	bne.n	80117ee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	8b5b      	ldrh	r3, [r3, #26]
 80117de:	f043 0303 	orr.w	r3, r3, #3
 80117e2:	b29a      	uxth	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80117e8:	f06f 0301 	mvn.w	r3, #1
 80117ec:	e023      	b.n	8011836 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80117ee:	7dbb      	ldrb	r3, [r7, #22]
 80117f0:	7dfa      	ldrb	r2, [r7, #23]
 80117f2:	6939      	ldr	r1, [r7, #16]
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f7ff feeb 	bl	80115d0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	3304      	adds	r3, #4
 8011800:	6939      	ldr	r1, [r7, #16]
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f7ff ff24 	bl	8011650 <tcp_output_control_segment>
 8011808:	4603      	mov	r3, r0
 801180a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801180c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d007      	beq.n	8011824 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	8b5b      	ldrh	r3, [r3, #26]
 8011818:	f043 0303 	orr.w	r3, r3, #3
 801181c:	b29a      	uxth	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	835a      	strh	r2, [r3, #26]
 8011822:	e006      	b.n	8011832 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	8b5b      	ldrh	r3, [r3, #26]
 8011828:	f023 0303 	bic.w	r3, r3, #3
 801182c:	b29a      	uxth	r2, r3
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011832:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011836:	4618      	mov	r0, r3
 8011838:	371c      	adds	r7, #28
 801183a:	46bd      	mov	sp, r7
 801183c:	bd90      	pop	{r4, r7, pc}
 801183e:	bf00      	nop
 8011840:	080150ac 	.word	0x080150ac
 8011844:	0801588c 	.word	0x0801588c
 8011848:	08015124 	.word	0x08015124

0801184c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801184c:	b590      	push	{r4, r7, lr}
 801184e:	b087      	sub	sp, #28
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011854:	2300      	movs	r3, #0
 8011856:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d106      	bne.n	801186c <tcp_keepalive+0x20>
 801185e:	4b18      	ldr	r3, [pc, #96]	; (80118c0 <tcp_keepalive+0x74>)
 8011860:	f640 0224 	movw	r2, #2084	; 0x824
 8011864:	4917      	ldr	r1, [pc, #92]	; (80118c4 <tcp_keepalive+0x78>)
 8011866:	4818      	ldr	r0, [pc, #96]	; (80118c8 <tcp_keepalive+0x7c>)
 8011868:	f000 fc4c 	bl	8012104 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801186c:	7dfb      	ldrb	r3, [r7, #23]
 801186e:	b29c      	uxth	r4, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011874:	3b01      	subs	r3, #1
 8011876:	4618      	mov	r0, r3
 8011878:	f7f6 fe1f 	bl	80084ba <lwip_htonl>
 801187c:	4603      	mov	r3, r0
 801187e:	2200      	movs	r2, #0
 8011880:	4621      	mov	r1, r4
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f7ff fe66 	bl	8011554 <tcp_output_alloc_header>
 8011888:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d102      	bne.n	8011896 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011890:	f04f 33ff 	mov.w	r3, #4294967295
 8011894:	e010      	b.n	80118b8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011896:	7dfb      	ldrb	r3, [r7, #23]
 8011898:	2200      	movs	r2, #0
 801189a:	6939      	ldr	r1, [r7, #16]
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f7ff fe97 	bl	80115d0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80118a2:	687a      	ldr	r2, [r7, #4]
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3304      	adds	r3, #4
 80118a8:	6939      	ldr	r1, [r7, #16]
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f7ff fed0 	bl	8011650 <tcp_output_control_segment>
 80118b0:	4603      	mov	r3, r0
 80118b2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80118b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	371c      	adds	r7, #28
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd90      	pop	{r4, r7, pc}
 80118c0:	080150ac 	.word	0x080150ac
 80118c4:	080158ac 	.word	0x080158ac
 80118c8:	08015124 	.word	0x08015124

080118cc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80118cc:	b590      	push	{r4, r7, lr}
 80118ce:	b08b      	sub	sp, #44	; 0x2c
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80118d4:	2300      	movs	r3, #0
 80118d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d106      	bne.n	80118ee <tcp_zero_window_probe+0x22>
 80118e0:	4b4c      	ldr	r3, [pc, #304]	; (8011a14 <tcp_zero_window_probe+0x148>)
 80118e2:	f640 024f 	movw	r2, #2127	; 0x84f
 80118e6:	494c      	ldr	r1, [pc, #304]	; (8011a18 <tcp_zero_window_probe+0x14c>)
 80118e8:	484c      	ldr	r0, [pc, #304]	; (8011a1c <tcp_zero_window_probe+0x150>)
 80118ea:	f000 fc0b 	bl	8012104 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118f2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80118f4:	6a3b      	ldr	r3, [r7, #32]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d101      	bne.n	80118fe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80118fa:	2300      	movs	r3, #0
 80118fc:	e086      	b.n	8011a0c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011904:	2bff      	cmp	r3, #255	; 0xff
 8011906:	d007      	beq.n	8011918 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801190e:	3301      	adds	r3, #1
 8011910:	b2da      	uxtb	r2, r3
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011918:	6a3b      	ldr	r3, [r7, #32]
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	899b      	ldrh	r3, [r3, #12]
 801191e:	b29b      	uxth	r3, r3
 8011920:	4618      	mov	r0, r3
 8011922:	f7f6 fdb5 	bl	8008490 <lwip_htons>
 8011926:	4603      	mov	r3, r0
 8011928:	b2db      	uxtb	r3, r3
 801192a:	f003 0301 	and.w	r3, r3, #1
 801192e:	2b00      	cmp	r3, #0
 8011930:	d005      	beq.n	801193e <tcp_zero_window_probe+0x72>
 8011932:	6a3b      	ldr	r3, [r7, #32]
 8011934:	891b      	ldrh	r3, [r3, #8]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d101      	bne.n	801193e <tcp_zero_window_probe+0x72>
 801193a:	2301      	movs	r3, #1
 801193c:	e000      	b.n	8011940 <tcp_zero_window_probe+0x74>
 801193e:	2300      	movs	r3, #0
 8011940:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011942:	7ffb      	ldrb	r3, [r7, #31]
 8011944:	2b00      	cmp	r3, #0
 8011946:	bf0c      	ite	eq
 8011948:	2301      	moveq	r3, #1
 801194a:	2300      	movne	r3, #0
 801194c:	b2db      	uxtb	r3, r3
 801194e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011954:	b299      	uxth	r1, r3
 8011956:	6a3b      	ldr	r3, [r7, #32]
 8011958:	68db      	ldr	r3, [r3, #12]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	8bba      	ldrh	r2, [r7, #28]
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f7ff fdf8 	bl	8011554 <tcp_output_alloc_header>
 8011964:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011966:	69bb      	ldr	r3, [r7, #24]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d102      	bne.n	8011972 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801196c:	f04f 33ff 	mov.w	r3, #4294967295
 8011970:	e04c      	b.n	8011a0c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011978:	7ffb      	ldrb	r3, [r7, #31]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d011      	beq.n	80119a2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	899b      	ldrh	r3, [r3, #12]
 8011982:	b29b      	uxth	r3, r3
 8011984:	b21b      	sxth	r3, r3
 8011986:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801198a:	b21c      	sxth	r4, r3
 801198c:	2011      	movs	r0, #17
 801198e:	f7f6 fd7f 	bl	8008490 <lwip_htons>
 8011992:	4603      	mov	r3, r0
 8011994:	b21b      	sxth	r3, r3
 8011996:	4323      	orrs	r3, r4
 8011998:	b21b      	sxth	r3, r3
 801199a:	b29a      	uxth	r2, r3
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	819a      	strh	r2, [r3, #12]
 80119a0:	e010      	b.n	80119c4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	3314      	adds	r3, #20
 80119a8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80119aa:	6a3b      	ldr	r3, [r7, #32]
 80119ac:	6858      	ldr	r0, [r3, #4]
 80119ae:	6a3b      	ldr	r3, [r7, #32]
 80119b0:	685b      	ldr	r3, [r3, #4]
 80119b2:	891a      	ldrh	r2, [r3, #8]
 80119b4:	6a3b      	ldr	r3, [r7, #32]
 80119b6:	891b      	ldrh	r3, [r3, #8]
 80119b8:	1ad3      	subs	r3, r2, r3
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	2201      	movs	r2, #1
 80119be:	6939      	ldr	r1, [r7, #16]
 80119c0:	f7fa fe52 	bl	800c668 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80119c4:	6a3b      	ldr	r3, [r7, #32]
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7f6 fd75 	bl	80084ba <lwip_htonl>
 80119d0:	4603      	mov	r3, r0
 80119d2:	3301      	adds	r3, #1
 80119d4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	1ad3      	subs	r3, r2, r3
 80119de:	2b00      	cmp	r3, #0
 80119e0:	da02      	bge.n	80119e8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	68fa      	ldr	r2, [r7, #12]
 80119e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80119e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119ec:	2200      	movs	r2, #0
 80119ee:	69b9      	ldr	r1, [r7, #24]
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f7ff fded 	bl	80115d0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80119f6:	687a      	ldr	r2, [r7, #4]
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	3304      	adds	r3, #4
 80119fc:	69b9      	ldr	r1, [r7, #24]
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f7ff fe26 	bl	8011650 <tcp_output_control_segment>
 8011a04:	4603      	mov	r3, r0
 8011a06:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011a08:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	372c      	adds	r7, #44	; 0x2c
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd90      	pop	{r4, r7, pc}
 8011a14:	080150ac 	.word	0x080150ac
 8011a18:	080158c8 	.word	0x080158c8
 8011a1c:	08015124 	.word	0x08015124

08011a20 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011a28:	f7fa ff0c 	bl	800c844 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011a2c:	4b0a      	ldr	r3, [pc, #40]	; (8011a58 <tcpip_tcp_timer+0x38>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d103      	bne.n	8011a3c <tcpip_tcp_timer+0x1c>
 8011a34:	4b09      	ldr	r3, [pc, #36]	; (8011a5c <tcpip_tcp_timer+0x3c>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d005      	beq.n	8011a48 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	4908      	ldr	r1, [pc, #32]	; (8011a60 <tcpip_tcp_timer+0x40>)
 8011a40:	20fa      	movs	r0, #250	; 0xfa
 8011a42:	f000 f8f3 	bl	8011c2c <sys_timeout>
 8011a46:	e003      	b.n	8011a50 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011a48:	4b06      	ldr	r3, [pc, #24]	; (8011a64 <tcpip_tcp_timer+0x44>)
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	601a      	str	r2, [r3, #0]
  }
}
 8011a4e:	bf00      	nop
 8011a50:	bf00      	nop
 8011a52:	3708      	adds	r7, #8
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}
 8011a58:	24008164 	.word	0x24008164
 8011a5c:	24008168 	.word	0x24008168
 8011a60:	08011a21 	.word	0x08011a21
 8011a64:	240081b0 	.word	0x240081b0

08011a68 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011a6c:	4b0a      	ldr	r3, [pc, #40]	; (8011a98 <tcp_timer_needed+0x30>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d10f      	bne.n	8011a94 <tcp_timer_needed+0x2c>
 8011a74:	4b09      	ldr	r3, [pc, #36]	; (8011a9c <tcp_timer_needed+0x34>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d103      	bne.n	8011a84 <tcp_timer_needed+0x1c>
 8011a7c:	4b08      	ldr	r3, [pc, #32]	; (8011aa0 <tcp_timer_needed+0x38>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d007      	beq.n	8011a94 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011a84:	4b04      	ldr	r3, [pc, #16]	; (8011a98 <tcp_timer_needed+0x30>)
 8011a86:	2201      	movs	r2, #1
 8011a88:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	4905      	ldr	r1, [pc, #20]	; (8011aa4 <tcp_timer_needed+0x3c>)
 8011a8e:	20fa      	movs	r0, #250	; 0xfa
 8011a90:	f000 f8cc 	bl	8011c2c <sys_timeout>
  }
}
 8011a94:	bf00      	nop
 8011a96:	bd80      	pop	{r7, pc}
 8011a98:	240081b0 	.word	0x240081b0
 8011a9c:	24008164 	.word	0x24008164
 8011aa0:	24008168 	.word	0x24008168
 8011aa4:	08011a21 	.word	0x08011a21

08011aa8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b086      	sub	sp, #24
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011ab4:	2006      	movs	r0, #6
 8011ab6:	f7f9 fd07 	bl	800b4c8 <memp_malloc>
 8011aba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d109      	bne.n	8011ad6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d151      	bne.n	8011b6c <sys_timeout_abs+0xc4>
 8011ac8:	4b2a      	ldr	r3, [pc, #168]	; (8011b74 <sys_timeout_abs+0xcc>)
 8011aca:	22be      	movs	r2, #190	; 0xbe
 8011acc:	492a      	ldr	r1, [pc, #168]	; (8011b78 <sys_timeout_abs+0xd0>)
 8011ace:	482b      	ldr	r0, [pc, #172]	; (8011b7c <sys_timeout_abs+0xd4>)
 8011ad0:	f000 fb18 	bl	8012104 <iprintf>
    return;
 8011ad4:	e04a      	b.n	8011b6c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	68ba      	ldr	r2, [r7, #8]
 8011ae0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	68fa      	ldr	r2, [r7, #12]
 8011aec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011aee:	4b24      	ldr	r3, [pc, #144]	; (8011b80 <sys_timeout_abs+0xd8>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d103      	bne.n	8011afe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011af6:	4a22      	ldr	r2, [pc, #136]	; (8011b80 <sys_timeout_abs+0xd8>)
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	6013      	str	r3, [r2, #0]
    return;
 8011afc:	e037      	b.n	8011b6e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	685a      	ldr	r2, [r3, #4]
 8011b02:	4b1f      	ldr	r3, [pc, #124]	; (8011b80 <sys_timeout_abs+0xd8>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	1ad3      	subs	r3, r2, r3
 8011b0a:	0fdb      	lsrs	r3, r3, #31
 8011b0c:	f003 0301 	and.w	r3, r3, #1
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d007      	beq.n	8011b26 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011b16:	4b1a      	ldr	r3, [pc, #104]	; (8011b80 <sys_timeout_abs+0xd8>)
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011b1e:	4a18      	ldr	r2, [pc, #96]	; (8011b80 <sys_timeout_abs+0xd8>)
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	6013      	str	r3, [r2, #0]
 8011b24:	e023      	b.n	8011b6e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011b26:	4b16      	ldr	r3, [pc, #88]	; (8011b80 <sys_timeout_abs+0xd8>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	617b      	str	r3, [r7, #20]
 8011b2c:	e01a      	b.n	8011b64 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d00b      	beq.n	8011b4e <sys_timeout_abs+0xa6>
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	685a      	ldr	r2, [r3, #4]
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	1ad3      	subs	r3, r2, r3
 8011b42:	0fdb      	lsrs	r3, r3, #31
 8011b44:	f003 0301 	and.w	r3, r3, #1
 8011b48:	b2db      	uxtb	r3, r3
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d007      	beq.n	8011b5e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	681a      	ldr	r2, [r3, #0]
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	693a      	ldr	r2, [r7, #16]
 8011b5a:	601a      	str	r2, [r3, #0]
        break;
 8011b5c:	e007      	b.n	8011b6e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	617b      	str	r3, [r7, #20]
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d1e1      	bne.n	8011b2e <sys_timeout_abs+0x86>
 8011b6a:	e000      	b.n	8011b6e <sys_timeout_abs+0xc6>
    return;
 8011b6c:	bf00      	nop
      }
    }
  }
}
 8011b6e:	3718      	adds	r7, #24
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	080158ec 	.word	0x080158ec
 8011b78:	08015944 	.word	0x08015944
 8011b7c:	08015984 	.word	0x08015984
 8011b80:	240081a8 	.word	0x240081a8

08011b84 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	4798      	blx	r3

  now = sys_now();
 8011b96:	f7f6 fa33 	bl	8008000 <sys_now>
 8011b9a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	681a      	ldr	r2, [r3, #0]
 8011ba0:	4b0f      	ldr	r3, [pc, #60]	; (8011be0 <lwip_cyclic_timer+0x5c>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	4413      	add	r3, r2
 8011ba6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011ba8:	68fa      	ldr	r2, [r7, #12]
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	1ad3      	subs	r3, r2, r3
 8011bae:	0fdb      	lsrs	r3, r3, #31
 8011bb0:	f003 0301 	and.w	r3, r3, #1
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d009      	beq.n	8011bce <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	681a      	ldr	r2, [r3, #0]
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	687a      	ldr	r2, [r7, #4]
 8011bc4:	4907      	ldr	r1, [pc, #28]	; (8011be4 <lwip_cyclic_timer+0x60>)
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7ff ff6e 	bl	8011aa8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011bcc:	e004      	b.n	8011bd8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	4904      	ldr	r1, [pc, #16]	; (8011be4 <lwip_cyclic_timer+0x60>)
 8011bd2:	68f8      	ldr	r0, [r7, #12]
 8011bd4:	f7ff ff68 	bl	8011aa8 <sys_timeout_abs>
}
 8011bd8:	bf00      	nop
 8011bda:	3718      	adds	r7, #24
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	240081ac 	.word	0x240081ac
 8011be4:	08011b85 	.word	0x08011b85

08011be8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011bee:	2301      	movs	r3, #1
 8011bf0:	607b      	str	r3, [r7, #4]
 8011bf2:	e00e      	b.n	8011c12 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011bf4:	4a0b      	ldr	r2, [pc, #44]	; (8011c24 <sys_timeouts_init+0x3c>)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	00db      	lsls	r3, r3, #3
 8011c00:	4a08      	ldr	r2, [pc, #32]	; (8011c24 <sys_timeouts_init+0x3c>)
 8011c02:	4413      	add	r3, r2
 8011c04:	461a      	mov	r2, r3
 8011c06:	4908      	ldr	r1, [pc, #32]	; (8011c28 <sys_timeouts_init+0x40>)
 8011c08:	f000 f810 	bl	8011c2c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	3301      	adds	r3, #1
 8011c10:	607b      	str	r3, [r7, #4]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2b02      	cmp	r3, #2
 8011c16:	d9ed      	bls.n	8011bf4 <sys_timeouts_init+0xc>
  }
}
 8011c18:	bf00      	nop
 8011c1a:	bf00      	nop
 8011c1c:	3708      	adds	r7, #8
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
 8011c22:	bf00      	nop
 8011c24:	08015e90 	.word	0x08015e90
 8011c28:	08011b85 	.word	0x08011b85

08011c2c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b086      	sub	sp, #24
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c3e:	d306      	bcc.n	8011c4e <sys_timeout+0x22>
 8011c40:	4b0a      	ldr	r3, [pc, #40]	; (8011c6c <sys_timeout+0x40>)
 8011c42:	f240 1229 	movw	r2, #297	; 0x129
 8011c46:	490a      	ldr	r1, [pc, #40]	; (8011c70 <sys_timeout+0x44>)
 8011c48:	480a      	ldr	r0, [pc, #40]	; (8011c74 <sys_timeout+0x48>)
 8011c4a:	f000 fa5b 	bl	8012104 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011c4e:	f7f6 f9d7 	bl	8008000 <sys_now>
 8011c52:	4602      	mov	r2, r0
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	4413      	add	r3, r2
 8011c58:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	68b9      	ldr	r1, [r7, #8]
 8011c5e:	6978      	ldr	r0, [r7, #20]
 8011c60:	f7ff ff22 	bl	8011aa8 <sys_timeout_abs>
#endif
}
 8011c64:	bf00      	nop
 8011c66:	3718      	adds	r7, #24
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	080158ec 	.word	0x080158ec
 8011c70:	080159ac 	.word	0x080159ac
 8011c74:	08015984 	.word	0x08015984

08011c78 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011c7e:	f7f6 f9bf 	bl	8008000 <sys_now>
 8011c82:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011c84:	4b1a      	ldr	r3, [pc, #104]	; (8011cf0 <sys_check_timeouts+0x78>)
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	b2db      	uxtb	r3, r3
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d001      	beq.n	8011c92 <sys_check_timeouts+0x1a>
 8011c8e:	f7f9 ffc7 	bl	800bc20 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011c92:	4b18      	ldr	r3, [pc, #96]	; (8011cf4 <sys_check_timeouts+0x7c>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d022      	beq.n	8011ce4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	68fa      	ldr	r2, [r7, #12]
 8011ca4:	1ad3      	subs	r3, r2, r3
 8011ca6:	0fdb      	lsrs	r3, r3, #31
 8011ca8:	f003 0301 	and.w	r3, r3, #1
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d11a      	bne.n	8011ce8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	4a0f      	ldr	r2, [pc, #60]	; (8011cf4 <sys_check_timeouts+0x7c>)
 8011cb8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	689b      	ldr	r3, [r3, #8]
 8011cbe:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	4a0b      	ldr	r2, [pc, #44]	; (8011cf8 <sys_check_timeouts+0x80>)
 8011ccc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011cce:	68b9      	ldr	r1, [r7, #8]
 8011cd0:	2006      	movs	r0, #6
 8011cd2:	f7f9 fc69 	bl	800b5a8 <memp_free>
    if (handler != NULL) {
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d0d3      	beq.n	8011c84 <sys_check_timeouts+0xc>
      handler(arg);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6838      	ldr	r0, [r7, #0]
 8011ce0:	4798      	blx	r3
  do {
 8011ce2:	e7cf      	b.n	8011c84 <sys_check_timeouts+0xc>
      return;
 8011ce4:	bf00      	nop
 8011ce6:	e000      	b.n	8011cea <sys_check_timeouts+0x72>
      return;
 8011ce8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011cea:	3710      	adds	r7, #16
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	24008155 	.word	0x24008155
 8011cf4:	240081a8 	.word	0x240081a8
 8011cf8:	240081ac 	.word	0x240081ac

08011cfc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011d00:	f000 fa18 	bl	8012134 <rand>
 8011d04:	4603      	mov	r3, r0
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	4b01      	ldr	r3, [pc, #4]	; (8011d1c <udp_init+0x20>)
 8011d16:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011d18:	bf00      	nop
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	2400002c 	.word	0x2400002c

08011d20 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b084      	sub	sp, #16
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	60f8      	str	r0, [r7, #12]
 8011d28:	60b9      	str	r1, [r7, #8]
 8011d2a:	4613      	mov	r3, r2
 8011d2c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d105      	bne.n	8011d40 <udp_input_local_match+0x20>
 8011d34:	4b27      	ldr	r3, [pc, #156]	; (8011dd4 <udp_input_local_match+0xb4>)
 8011d36:	2287      	movs	r2, #135	; 0x87
 8011d38:	4927      	ldr	r1, [pc, #156]	; (8011dd8 <udp_input_local_match+0xb8>)
 8011d3a:	4828      	ldr	r0, [pc, #160]	; (8011ddc <udp_input_local_match+0xbc>)
 8011d3c:	f000 f9e2 	bl	8012104 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d105      	bne.n	8011d52 <udp_input_local_match+0x32>
 8011d46:	4b23      	ldr	r3, [pc, #140]	; (8011dd4 <udp_input_local_match+0xb4>)
 8011d48:	2288      	movs	r2, #136	; 0x88
 8011d4a:	4925      	ldr	r1, [pc, #148]	; (8011de0 <udp_input_local_match+0xc0>)
 8011d4c:	4823      	ldr	r0, [pc, #140]	; (8011ddc <udp_input_local_match+0xbc>)
 8011d4e:	f000 f9d9 	bl	8012104 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	7a1b      	ldrb	r3, [r3, #8]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d00b      	beq.n	8011d72 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	7a1a      	ldrb	r2, [r3, #8]
 8011d5e:	4b21      	ldr	r3, [pc, #132]	; (8011de4 <udp_input_local_match+0xc4>)
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011d66:	3301      	adds	r3, #1
 8011d68:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d001      	beq.n	8011d72 <udp_input_local_match+0x52>
    return 0;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	e02b      	b.n	8011dca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011d72:	79fb      	ldrb	r3, [r7, #7]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d018      	beq.n	8011daa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d013      	beq.n	8011da6 <udp_input_local_match+0x86>
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d00f      	beq.n	8011da6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011d86:	4b17      	ldr	r3, [pc, #92]	; (8011de4 <udp_input_local_match+0xc4>)
 8011d88:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d8e:	d00a      	beq.n	8011da6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	4b13      	ldr	r3, [pc, #76]	; (8011de4 <udp_input_local_match+0xc4>)
 8011d96:	695b      	ldr	r3, [r3, #20]
 8011d98:	405a      	eors	r2, r3
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	3308      	adds	r3, #8
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d110      	bne.n	8011dc8 <udp_input_local_match+0xa8>
          return 1;
 8011da6:	2301      	movs	r3, #1
 8011da8:	e00f      	b.n	8011dca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d009      	beq.n	8011dc4 <udp_input_local_match+0xa4>
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d005      	beq.n	8011dc4 <udp_input_local_match+0xa4>
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	4b09      	ldr	r3, [pc, #36]	; (8011de4 <udp_input_local_match+0xc4>)
 8011dbe:	695b      	ldr	r3, [r3, #20]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d101      	bne.n	8011dc8 <udp_input_local_match+0xa8>
        return 1;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	e000      	b.n	8011dca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011dc8:	2300      	movs	r3, #0
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3710      	adds	r7, #16
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	080159f8 	.word	0x080159f8
 8011dd8:	08015a4c 	.word	0x08015a4c
 8011ddc:	08015a70 	.word	0x08015a70
 8011de0:	08015a98 	.word	0x08015a98
 8011de4:	24005230 	.word	0x24005230

08011de8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011de8:	b590      	push	{r4, r7, lr}
 8011dea:	b08d      	sub	sp, #52	; 0x34
 8011dec:	af02      	add	r7, sp, #8
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011df2:	2300      	movs	r3, #0
 8011df4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d105      	bne.n	8011e08 <udp_input+0x20>
 8011dfc:	4b7c      	ldr	r3, [pc, #496]	; (8011ff0 <udp_input+0x208>)
 8011dfe:	22cf      	movs	r2, #207	; 0xcf
 8011e00:	497c      	ldr	r1, [pc, #496]	; (8011ff4 <udp_input+0x20c>)
 8011e02:	487d      	ldr	r0, [pc, #500]	; (8011ff8 <udp_input+0x210>)
 8011e04:	f000 f97e 	bl	8012104 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d105      	bne.n	8011e1a <udp_input+0x32>
 8011e0e:	4b78      	ldr	r3, [pc, #480]	; (8011ff0 <udp_input+0x208>)
 8011e10:	22d0      	movs	r2, #208	; 0xd0
 8011e12:	497a      	ldr	r1, [pc, #488]	; (8011ffc <udp_input+0x214>)
 8011e14:	4878      	ldr	r0, [pc, #480]	; (8011ff8 <udp_input+0x210>)
 8011e16:	f000 f975 	bl	8012104 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	895b      	ldrh	r3, [r3, #10]
 8011e1e:	2b07      	cmp	r3, #7
 8011e20:	d803      	bhi.n	8011e2a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f7fa fa36 	bl	800c294 <pbuf_free>
    goto end;
 8011e28:	e0de      	b.n	8011fe8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011e30:	4b73      	ldr	r3, [pc, #460]	; (8012000 <udp_input+0x218>)
 8011e32:	695b      	ldr	r3, [r3, #20]
 8011e34:	4a72      	ldr	r2, [pc, #456]	; (8012000 <udp_input+0x218>)
 8011e36:	6812      	ldr	r2, [r2, #0]
 8011e38:	4611      	mov	r1, r2
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7f8 f894 	bl	8009f68 <ip4_addr_isbroadcast_u32>
 8011e40:	4603      	mov	r3, r0
 8011e42:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	881b      	ldrh	r3, [r3, #0]
 8011e48:	b29b      	uxth	r3, r3
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7f6 fb20 	bl	8008490 <lwip_htons>
 8011e50:	4603      	mov	r3, r0
 8011e52:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	885b      	ldrh	r3, [r3, #2]
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7f6 fb18 	bl	8008490 <lwip_htons>
 8011e60:	4603      	mov	r3, r0
 8011e62:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011e64:	2300      	movs	r3, #0
 8011e66:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e70:	4b64      	ldr	r3, [pc, #400]	; (8012004 <udp_input+0x21c>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	627b      	str	r3, [r7, #36]	; 0x24
 8011e76:	e054      	b.n	8011f22 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7a:	8a5b      	ldrh	r3, [r3, #18]
 8011e7c:	89fa      	ldrh	r2, [r7, #14]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d14a      	bne.n	8011f18 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011e82:	7cfb      	ldrb	r3, [r7, #19]
 8011e84:	461a      	mov	r2, r3
 8011e86:	6839      	ldr	r1, [r7, #0]
 8011e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e8a:	f7ff ff49 	bl	8011d20 <udp_input_local_match>
 8011e8e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d041      	beq.n	8011f18 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e96:	7c1b      	ldrb	r3, [r3, #16]
 8011e98:	f003 0304 	and.w	r3, r3, #4
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d11d      	bne.n	8011edc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d102      	bne.n	8011eac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea8:	61fb      	str	r3, [r7, #28]
 8011eaa:	e017      	b.n	8011edc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011eac:	7cfb      	ldrb	r3, [r7, #19]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d014      	beq.n	8011edc <udp_input+0xf4>
 8011eb2:	4b53      	ldr	r3, [pc, #332]	; (8012000 <udp_input+0x218>)
 8011eb4:	695b      	ldr	r3, [r3, #20]
 8011eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eba:	d10f      	bne.n	8011edc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011ebc:	69fb      	ldr	r3, [r7, #28]
 8011ebe:	681a      	ldr	r2, [r3, #0]
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	3304      	adds	r3, #4
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d008      	beq.n	8011edc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ecc:	681a      	ldr	r2, [r3, #0]
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	3304      	adds	r3, #4
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d101      	bne.n	8011edc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eda:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ede:	8a9b      	ldrh	r3, [r3, #20]
 8011ee0:	8a3a      	ldrh	r2, [r7, #16]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d118      	bne.n	8011f18 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d005      	beq.n	8011efa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef0:	685a      	ldr	r2, [r3, #4]
 8011ef2:	4b43      	ldr	r3, [pc, #268]	; (8012000 <udp_input+0x218>)
 8011ef4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d10e      	bne.n	8011f18 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011efa:	6a3b      	ldr	r3, [r7, #32]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d014      	beq.n	8011f2a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f02:	68da      	ldr	r2, [r3, #12]
 8011f04:	6a3b      	ldr	r3, [r7, #32]
 8011f06:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011f08:	4b3e      	ldr	r3, [pc, #248]	; (8012004 <udp_input+0x21c>)
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011f10:	4a3c      	ldr	r2, [pc, #240]	; (8012004 <udp_input+0x21c>)
 8011f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f14:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011f16:	e008      	b.n	8011f2a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1e:	68db      	ldr	r3, [r3, #12]
 8011f20:	627b      	str	r3, [r7, #36]	; 0x24
 8011f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d1a7      	bne.n	8011e78 <udp_input+0x90>
 8011f28:	e000      	b.n	8011f2c <udp_input+0x144>
        break;
 8011f2a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d101      	bne.n	8011f36 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d002      	beq.n	8011f42 <udp_input+0x15a>
    for_us = 1;
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	76fb      	strb	r3, [r7, #27]
 8011f40:	e00a      	b.n	8011f58 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	3304      	adds	r3, #4
 8011f46:	681a      	ldr	r2, [r3, #0]
 8011f48:	4b2d      	ldr	r3, [pc, #180]	; (8012000 <udp_input+0x218>)
 8011f4a:	695b      	ldr	r3, [r3, #20]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	bf0c      	ite	eq
 8011f50:	2301      	moveq	r3, #1
 8011f52:	2300      	movne	r3, #0
 8011f54:	b2db      	uxtb	r3, r3
 8011f56:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011f58:	7efb      	ldrb	r3, [r7, #27]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d041      	beq.n	8011fe2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011f5e:	2108      	movs	r1, #8
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f7fa f911 	bl	800c188 <pbuf_remove_header>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d00a      	beq.n	8011f82 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011f6c:	4b20      	ldr	r3, [pc, #128]	; (8011ff0 <udp_input+0x208>)
 8011f6e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011f72:	4925      	ldr	r1, [pc, #148]	; (8012008 <udp_input+0x220>)
 8011f74:	4820      	ldr	r0, [pc, #128]	; (8011ff8 <udp_input+0x210>)
 8011f76:	f000 f8c5 	bl	8012104 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	f7fa f98a 	bl	800c294 <pbuf_free>
      goto end;
 8011f80:	e032      	b.n	8011fe8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d012      	beq.n	8011fae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8a:	699b      	ldr	r3, [r3, #24]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d00a      	beq.n	8011fa6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f92:	699c      	ldr	r4, [r3, #24]
 8011f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f96:	69d8      	ldr	r0, [r3, #28]
 8011f98:	8a3b      	ldrh	r3, [r7, #16]
 8011f9a:	9300      	str	r3, [sp, #0]
 8011f9c:	4b1b      	ldr	r3, [pc, #108]	; (801200c <udp_input+0x224>)
 8011f9e:	687a      	ldr	r2, [r7, #4]
 8011fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011fa2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011fa4:	e021      	b.n	8011fea <udp_input+0x202>
        pbuf_free(p);
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f7fa f974 	bl	800c294 <pbuf_free>
        goto end;
 8011fac:	e01c      	b.n	8011fe8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011fae:	7cfb      	ldrb	r3, [r7, #19]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d112      	bne.n	8011fda <udp_input+0x1f2>
 8011fb4:	4b12      	ldr	r3, [pc, #72]	; (8012000 <udp_input+0x218>)
 8011fb6:	695b      	ldr	r3, [r3, #20]
 8011fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011fbc:	2be0      	cmp	r3, #224	; 0xe0
 8011fbe:	d00c      	beq.n	8011fda <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011fc0:	4b0f      	ldr	r3, [pc, #60]	; (8012000 <udp_input+0x218>)
 8011fc2:	899b      	ldrh	r3, [r3, #12]
 8011fc4:	3308      	adds	r3, #8
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	b21b      	sxth	r3, r3
 8011fca:	4619      	mov	r1, r3
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7fa f94e 	bl	800c26e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011fd2:	2103      	movs	r1, #3
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f7f7 fbcb 	bl	8009770 <icmp_dest_unreach>
      pbuf_free(p);
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7fa f95a 	bl	800c294 <pbuf_free>
  return;
 8011fe0:	e003      	b.n	8011fea <udp_input+0x202>
    pbuf_free(p);
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f7fa f956 	bl	800c294 <pbuf_free>
  return;
 8011fe8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011fea:	372c      	adds	r7, #44	; 0x2c
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd90      	pop	{r4, r7, pc}
 8011ff0:	080159f8 	.word	0x080159f8
 8011ff4:	08015ac0 	.word	0x08015ac0
 8011ff8:	08015a70 	.word	0x08015a70
 8011ffc:	08015ad8 	.word	0x08015ad8
 8012000:	24005230 	.word	0x24005230
 8012004:	240081b4 	.word	0x240081b4
 8012008:	08015af4 	.word	0x08015af4
 801200c:	24005240 	.word	0x24005240

08012010 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012010:	b480      	push	{r7}
 8012012:	b085      	sub	sp, #20
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d01e      	beq.n	801205e <udp_netif_ip_addr_changed+0x4e>
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d01a      	beq.n	801205e <udp_netif_ip_addr_changed+0x4e>
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d017      	beq.n	801205e <udp_netif_ip_addr_changed+0x4e>
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d013      	beq.n	801205e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012036:	4b0d      	ldr	r3, [pc, #52]	; (801206c <udp_netif_ip_addr_changed+0x5c>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	60fb      	str	r3, [r7, #12]
 801203c:	e00c      	b.n	8012058 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	429a      	cmp	r2, r3
 8012048:	d103      	bne.n	8012052 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	68db      	ldr	r3, [r3, #12]
 8012056:	60fb      	str	r3, [r7, #12]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d1ef      	bne.n	801203e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801205e:	bf00      	nop
 8012060:	3714      	adds	r7, #20
 8012062:	46bd      	mov	sp, r7
 8012064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop
 801206c:	240081b4 	.word	0x240081b4

08012070 <__libc_init_array>:
 8012070:	b570      	push	{r4, r5, r6, lr}
 8012072:	4d0d      	ldr	r5, [pc, #52]	; (80120a8 <__libc_init_array+0x38>)
 8012074:	4c0d      	ldr	r4, [pc, #52]	; (80120ac <__libc_init_array+0x3c>)
 8012076:	1b64      	subs	r4, r4, r5
 8012078:	10a4      	asrs	r4, r4, #2
 801207a:	2600      	movs	r6, #0
 801207c:	42a6      	cmp	r6, r4
 801207e:	d109      	bne.n	8012094 <__libc_init_array+0x24>
 8012080:	4d0b      	ldr	r5, [pc, #44]	; (80120b0 <__libc_init_array+0x40>)
 8012082:	4c0c      	ldr	r4, [pc, #48]	; (80120b4 <__libc_init_array+0x44>)
 8012084:	f001 f88e 	bl	80131a4 <_init>
 8012088:	1b64      	subs	r4, r4, r5
 801208a:	10a4      	asrs	r4, r4, #2
 801208c:	2600      	movs	r6, #0
 801208e:	42a6      	cmp	r6, r4
 8012090:	d105      	bne.n	801209e <__libc_init_array+0x2e>
 8012092:	bd70      	pop	{r4, r5, r6, pc}
 8012094:	f855 3b04 	ldr.w	r3, [r5], #4
 8012098:	4798      	blx	r3
 801209a:	3601      	adds	r6, #1
 801209c:	e7ee      	b.n	801207c <__libc_init_array+0xc>
 801209e:	f855 3b04 	ldr.w	r3, [r5], #4
 80120a2:	4798      	blx	r3
 80120a4:	3601      	adds	r6, #1
 80120a6:	e7f2      	b.n	801208e <__libc_init_array+0x1e>
 80120a8:	08015ff8 	.word	0x08015ff8
 80120ac:	08015ff8 	.word	0x08015ff8
 80120b0:	08015ff8 	.word	0x08015ff8
 80120b4:	08015ffc 	.word	0x08015ffc

080120b8 <memcmp>:
 80120b8:	b510      	push	{r4, lr}
 80120ba:	3901      	subs	r1, #1
 80120bc:	4402      	add	r2, r0
 80120be:	4290      	cmp	r0, r2
 80120c0:	d101      	bne.n	80120c6 <memcmp+0xe>
 80120c2:	2000      	movs	r0, #0
 80120c4:	e005      	b.n	80120d2 <memcmp+0x1a>
 80120c6:	7803      	ldrb	r3, [r0, #0]
 80120c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80120cc:	42a3      	cmp	r3, r4
 80120ce:	d001      	beq.n	80120d4 <memcmp+0x1c>
 80120d0:	1b18      	subs	r0, r3, r4
 80120d2:	bd10      	pop	{r4, pc}
 80120d4:	3001      	adds	r0, #1
 80120d6:	e7f2      	b.n	80120be <memcmp+0x6>

080120d8 <memcpy>:
 80120d8:	440a      	add	r2, r1
 80120da:	4291      	cmp	r1, r2
 80120dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80120e0:	d100      	bne.n	80120e4 <memcpy+0xc>
 80120e2:	4770      	bx	lr
 80120e4:	b510      	push	{r4, lr}
 80120e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120ee:	4291      	cmp	r1, r2
 80120f0:	d1f9      	bne.n	80120e6 <memcpy+0xe>
 80120f2:	bd10      	pop	{r4, pc}

080120f4 <memset>:
 80120f4:	4402      	add	r2, r0
 80120f6:	4603      	mov	r3, r0
 80120f8:	4293      	cmp	r3, r2
 80120fa:	d100      	bne.n	80120fe <memset+0xa>
 80120fc:	4770      	bx	lr
 80120fe:	f803 1b01 	strb.w	r1, [r3], #1
 8012102:	e7f9      	b.n	80120f8 <memset+0x4>

08012104 <iprintf>:
 8012104:	b40f      	push	{r0, r1, r2, r3}
 8012106:	4b0a      	ldr	r3, [pc, #40]	; (8012130 <iprintf+0x2c>)
 8012108:	b513      	push	{r0, r1, r4, lr}
 801210a:	681c      	ldr	r4, [r3, #0]
 801210c:	b124      	cbz	r4, 8012118 <iprintf+0x14>
 801210e:	69a3      	ldr	r3, [r4, #24]
 8012110:	b913      	cbnz	r3, 8012118 <iprintf+0x14>
 8012112:	4620      	mov	r0, r4
 8012114:	f000 f8c2 	bl	801229c <__sinit>
 8012118:	ab05      	add	r3, sp, #20
 801211a:	9a04      	ldr	r2, [sp, #16]
 801211c:	68a1      	ldr	r1, [r4, #8]
 801211e:	9301      	str	r3, [sp, #4]
 8012120:	4620      	mov	r0, r4
 8012122:	f000 fa7f 	bl	8012624 <_vfiprintf_r>
 8012126:	b002      	add	sp, #8
 8012128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801212c:	b004      	add	sp, #16
 801212e:	4770      	bx	lr
 8012130:	24000030 	.word	0x24000030

08012134 <rand>:
 8012134:	4b16      	ldr	r3, [pc, #88]	; (8012190 <rand+0x5c>)
 8012136:	b510      	push	{r4, lr}
 8012138:	681c      	ldr	r4, [r3, #0]
 801213a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801213c:	b9b3      	cbnz	r3, 801216c <rand+0x38>
 801213e:	2018      	movs	r0, #24
 8012140:	f000 f95e 	bl	8012400 <malloc>
 8012144:	63a0      	str	r0, [r4, #56]	; 0x38
 8012146:	b928      	cbnz	r0, 8012154 <rand+0x20>
 8012148:	4602      	mov	r2, r0
 801214a:	4b12      	ldr	r3, [pc, #72]	; (8012194 <rand+0x60>)
 801214c:	4812      	ldr	r0, [pc, #72]	; (8012198 <rand+0x64>)
 801214e:	214e      	movs	r1, #78	; 0x4e
 8012150:	f000 f82e 	bl	80121b0 <__assert_func>
 8012154:	4a11      	ldr	r2, [pc, #68]	; (801219c <rand+0x68>)
 8012156:	4b12      	ldr	r3, [pc, #72]	; (80121a0 <rand+0x6c>)
 8012158:	e9c0 2300 	strd	r2, r3, [r0]
 801215c:	4b11      	ldr	r3, [pc, #68]	; (80121a4 <rand+0x70>)
 801215e:	6083      	str	r3, [r0, #8]
 8012160:	230b      	movs	r3, #11
 8012162:	8183      	strh	r3, [r0, #12]
 8012164:	2201      	movs	r2, #1
 8012166:	2300      	movs	r3, #0
 8012168:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801216c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801216e:	4a0e      	ldr	r2, [pc, #56]	; (80121a8 <rand+0x74>)
 8012170:	6920      	ldr	r0, [r4, #16]
 8012172:	6963      	ldr	r3, [r4, #20]
 8012174:	490d      	ldr	r1, [pc, #52]	; (80121ac <rand+0x78>)
 8012176:	4342      	muls	r2, r0
 8012178:	fb01 2203 	mla	r2, r1, r3, r2
 801217c:	fba0 0101 	umull	r0, r1, r0, r1
 8012180:	1c43      	adds	r3, r0, #1
 8012182:	eb42 0001 	adc.w	r0, r2, r1
 8012186:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801218a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801218e:	bd10      	pop	{r4, pc}
 8012190:	24000030 	.word	0x24000030
 8012194:	08015eac 	.word	0x08015eac
 8012198:	08015ec3 	.word	0x08015ec3
 801219c:	abcd330e 	.word	0xabcd330e
 80121a0:	e66d1234 	.word	0xe66d1234
 80121a4:	0005deec 	.word	0x0005deec
 80121a8:	5851f42d 	.word	0x5851f42d
 80121ac:	4c957f2d 	.word	0x4c957f2d

080121b0 <__assert_func>:
 80121b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121b2:	4614      	mov	r4, r2
 80121b4:	461a      	mov	r2, r3
 80121b6:	4b09      	ldr	r3, [pc, #36]	; (80121dc <__assert_func+0x2c>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	4605      	mov	r5, r0
 80121bc:	68d8      	ldr	r0, [r3, #12]
 80121be:	b14c      	cbz	r4, 80121d4 <__assert_func+0x24>
 80121c0:	4b07      	ldr	r3, [pc, #28]	; (80121e0 <__assert_func+0x30>)
 80121c2:	9100      	str	r1, [sp, #0]
 80121c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80121c8:	4906      	ldr	r1, [pc, #24]	; (80121e4 <__assert_func+0x34>)
 80121ca:	462b      	mov	r3, r5
 80121cc:	f000 f8e4 	bl	8012398 <fiprintf>
 80121d0:	f000 fe12 	bl	8012df8 <abort>
 80121d4:	4b04      	ldr	r3, [pc, #16]	; (80121e8 <__assert_func+0x38>)
 80121d6:	461c      	mov	r4, r3
 80121d8:	e7f3      	b.n	80121c2 <__assert_func+0x12>
 80121da:	bf00      	nop
 80121dc:	24000030 	.word	0x24000030
 80121e0:	08015f1e 	.word	0x08015f1e
 80121e4:	08015f2b 	.word	0x08015f2b
 80121e8:	08015f59 	.word	0x08015f59

080121ec <std>:
 80121ec:	2300      	movs	r3, #0
 80121ee:	b510      	push	{r4, lr}
 80121f0:	4604      	mov	r4, r0
 80121f2:	e9c0 3300 	strd	r3, r3, [r0]
 80121f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80121fa:	6083      	str	r3, [r0, #8]
 80121fc:	8181      	strh	r1, [r0, #12]
 80121fe:	6643      	str	r3, [r0, #100]	; 0x64
 8012200:	81c2      	strh	r2, [r0, #14]
 8012202:	6183      	str	r3, [r0, #24]
 8012204:	4619      	mov	r1, r3
 8012206:	2208      	movs	r2, #8
 8012208:	305c      	adds	r0, #92	; 0x5c
 801220a:	f7ff ff73 	bl	80120f4 <memset>
 801220e:	4b05      	ldr	r3, [pc, #20]	; (8012224 <std+0x38>)
 8012210:	6263      	str	r3, [r4, #36]	; 0x24
 8012212:	4b05      	ldr	r3, [pc, #20]	; (8012228 <std+0x3c>)
 8012214:	62a3      	str	r3, [r4, #40]	; 0x28
 8012216:	4b05      	ldr	r3, [pc, #20]	; (801222c <std+0x40>)
 8012218:	62e3      	str	r3, [r4, #44]	; 0x2c
 801221a:	4b05      	ldr	r3, [pc, #20]	; (8012230 <std+0x44>)
 801221c:	6224      	str	r4, [r4, #32]
 801221e:	6323      	str	r3, [r4, #48]	; 0x30
 8012220:	bd10      	pop	{r4, pc}
 8012222:	bf00      	nop
 8012224:	08012bcd 	.word	0x08012bcd
 8012228:	08012bef 	.word	0x08012bef
 801222c:	08012c27 	.word	0x08012c27
 8012230:	08012c4b 	.word	0x08012c4b

08012234 <_cleanup_r>:
 8012234:	4901      	ldr	r1, [pc, #4]	; (801223c <_cleanup_r+0x8>)
 8012236:	f000 b8c1 	b.w	80123bc <_fwalk_reent>
 801223a:	bf00      	nop
 801223c:	08012f35 	.word	0x08012f35

08012240 <__sfmoreglue>:
 8012240:	b570      	push	{r4, r5, r6, lr}
 8012242:	2268      	movs	r2, #104	; 0x68
 8012244:	1e4d      	subs	r5, r1, #1
 8012246:	4355      	muls	r5, r2
 8012248:	460e      	mov	r6, r1
 801224a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801224e:	f000 f94b 	bl	80124e8 <_malloc_r>
 8012252:	4604      	mov	r4, r0
 8012254:	b140      	cbz	r0, 8012268 <__sfmoreglue+0x28>
 8012256:	2100      	movs	r1, #0
 8012258:	e9c0 1600 	strd	r1, r6, [r0]
 801225c:	300c      	adds	r0, #12
 801225e:	60a0      	str	r0, [r4, #8]
 8012260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012264:	f7ff ff46 	bl	80120f4 <memset>
 8012268:	4620      	mov	r0, r4
 801226a:	bd70      	pop	{r4, r5, r6, pc}

0801226c <__sfp_lock_acquire>:
 801226c:	4801      	ldr	r0, [pc, #4]	; (8012274 <__sfp_lock_acquire+0x8>)
 801226e:	f000 b8c5 	b.w	80123fc <__retarget_lock_acquire_recursive>
 8012272:	bf00      	nop
 8012274:	240081bd 	.word	0x240081bd

08012278 <__sfp_lock_release>:
 8012278:	4801      	ldr	r0, [pc, #4]	; (8012280 <__sfp_lock_release+0x8>)
 801227a:	f000 b8c0 	b.w	80123fe <__retarget_lock_release_recursive>
 801227e:	bf00      	nop
 8012280:	240081bd 	.word	0x240081bd

08012284 <__sinit_lock_acquire>:
 8012284:	4801      	ldr	r0, [pc, #4]	; (801228c <__sinit_lock_acquire+0x8>)
 8012286:	f000 b8b9 	b.w	80123fc <__retarget_lock_acquire_recursive>
 801228a:	bf00      	nop
 801228c:	240081be 	.word	0x240081be

08012290 <__sinit_lock_release>:
 8012290:	4801      	ldr	r0, [pc, #4]	; (8012298 <__sinit_lock_release+0x8>)
 8012292:	f000 b8b4 	b.w	80123fe <__retarget_lock_release_recursive>
 8012296:	bf00      	nop
 8012298:	240081be 	.word	0x240081be

0801229c <__sinit>:
 801229c:	b510      	push	{r4, lr}
 801229e:	4604      	mov	r4, r0
 80122a0:	f7ff fff0 	bl	8012284 <__sinit_lock_acquire>
 80122a4:	69a3      	ldr	r3, [r4, #24]
 80122a6:	b11b      	cbz	r3, 80122b0 <__sinit+0x14>
 80122a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122ac:	f7ff bff0 	b.w	8012290 <__sinit_lock_release>
 80122b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80122b4:	6523      	str	r3, [r4, #80]	; 0x50
 80122b6:	4b13      	ldr	r3, [pc, #76]	; (8012304 <__sinit+0x68>)
 80122b8:	4a13      	ldr	r2, [pc, #76]	; (8012308 <__sinit+0x6c>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80122be:	42a3      	cmp	r3, r4
 80122c0:	bf04      	itt	eq
 80122c2:	2301      	moveq	r3, #1
 80122c4:	61a3      	streq	r3, [r4, #24]
 80122c6:	4620      	mov	r0, r4
 80122c8:	f000 f820 	bl	801230c <__sfp>
 80122cc:	6060      	str	r0, [r4, #4]
 80122ce:	4620      	mov	r0, r4
 80122d0:	f000 f81c 	bl	801230c <__sfp>
 80122d4:	60a0      	str	r0, [r4, #8]
 80122d6:	4620      	mov	r0, r4
 80122d8:	f000 f818 	bl	801230c <__sfp>
 80122dc:	2200      	movs	r2, #0
 80122de:	60e0      	str	r0, [r4, #12]
 80122e0:	2104      	movs	r1, #4
 80122e2:	6860      	ldr	r0, [r4, #4]
 80122e4:	f7ff ff82 	bl	80121ec <std>
 80122e8:	68a0      	ldr	r0, [r4, #8]
 80122ea:	2201      	movs	r2, #1
 80122ec:	2109      	movs	r1, #9
 80122ee:	f7ff ff7d 	bl	80121ec <std>
 80122f2:	68e0      	ldr	r0, [r4, #12]
 80122f4:	2202      	movs	r2, #2
 80122f6:	2112      	movs	r1, #18
 80122f8:	f7ff ff78 	bl	80121ec <std>
 80122fc:	2301      	movs	r3, #1
 80122fe:	61a3      	str	r3, [r4, #24]
 8012300:	e7d2      	b.n	80122a8 <__sinit+0xc>
 8012302:	bf00      	nop
 8012304:	08015ea8 	.word	0x08015ea8
 8012308:	08012235 	.word	0x08012235

0801230c <__sfp>:
 801230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801230e:	4607      	mov	r7, r0
 8012310:	f7ff ffac 	bl	801226c <__sfp_lock_acquire>
 8012314:	4b1e      	ldr	r3, [pc, #120]	; (8012390 <__sfp+0x84>)
 8012316:	681e      	ldr	r6, [r3, #0]
 8012318:	69b3      	ldr	r3, [r6, #24]
 801231a:	b913      	cbnz	r3, 8012322 <__sfp+0x16>
 801231c:	4630      	mov	r0, r6
 801231e:	f7ff ffbd 	bl	801229c <__sinit>
 8012322:	3648      	adds	r6, #72	; 0x48
 8012324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012328:	3b01      	subs	r3, #1
 801232a:	d503      	bpl.n	8012334 <__sfp+0x28>
 801232c:	6833      	ldr	r3, [r6, #0]
 801232e:	b30b      	cbz	r3, 8012374 <__sfp+0x68>
 8012330:	6836      	ldr	r6, [r6, #0]
 8012332:	e7f7      	b.n	8012324 <__sfp+0x18>
 8012334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012338:	b9d5      	cbnz	r5, 8012370 <__sfp+0x64>
 801233a:	4b16      	ldr	r3, [pc, #88]	; (8012394 <__sfp+0x88>)
 801233c:	60e3      	str	r3, [r4, #12]
 801233e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012342:	6665      	str	r5, [r4, #100]	; 0x64
 8012344:	f000 f859 	bl	80123fa <__retarget_lock_init_recursive>
 8012348:	f7ff ff96 	bl	8012278 <__sfp_lock_release>
 801234c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012354:	6025      	str	r5, [r4, #0]
 8012356:	61a5      	str	r5, [r4, #24]
 8012358:	2208      	movs	r2, #8
 801235a:	4629      	mov	r1, r5
 801235c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012360:	f7ff fec8 	bl	80120f4 <memset>
 8012364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801236c:	4620      	mov	r0, r4
 801236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012370:	3468      	adds	r4, #104	; 0x68
 8012372:	e7d9      	b.n	8012328 <__sfp+0x1c>
 8012374:	2104      	movs	r1, #4
 8012376:	4638      	mov	r0, r7
 8012378:	f7ff ff62 	bl	8012240 <__sfmoreglue>
 801237c:	4604      	mov	r4, r0
 801237e:	6030      	str	r0, [r6, #0]
 8012380:	2800      	cmp	r0, #0
 8012382:	d1d5      	bne.n	8012330 <__sfp+0x24>
 8012384:	f7ff ff78 	bl	8012278 <__sfp_lock_release>
 8012388:	230c      	movs	r3, #12
 801238a:	603b      	str	r3, [r7, #0]
 801238c:	e7ee      	b.n	801236c <__sfp+0x60>
 801238e:	bf00      	nop
 8012390:	08015ea8 	.word	0x08015ea8
 8012394:	ffff0001 	.word	0xffff0001

08012398 <fiprintf>:
 8012398:	b40e      	push	{r1, r2, r3}
 801239a:	b503      	push	{r0, r1, lr}
 801239c:	4601      	mov	r1, r0
 801239e:	ab03      	add	r3, sp, #12
 80123a0:	4805      	ldr	r0, [pc, #20]	; (80123b8 <fiprintf+0x20>)
 80123a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80123a6:	6800      	ldr	r0, [r0, #0]
 80123a8:	9301      	str	r3, [sp, #4]
 80123aa:	f000 f93b 	bl	8012624 <_vfiprintf_r>
 80123ae:	b002      	add	sp, #8
 80123b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80123b4:	b003      	add	sp, #12
 80123b6:	4770      	bx	lr
 80123b8:	24000030 	.word	0x24000030

080123bc <_fwalk_reent>:
 80123bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123c0:	4606      	mov	r6, r0
 80123c2:	4688      	mov	r8, r1
 80123c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80123c8:	2700      	movs	r7, #0
 80123ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80123ce:	f1b9 0901 	subs.w	r9, r9, #1
 80123d2:	d505      	bpl.n	80123e0 <_fwalk_reent+0x24>
 80123d4:	6824      	ldr	r4, [r4, #0]
 80123d6:	2c00      	cmp	r4, #0
 80123d8:	d1f7      	bne.n	80123ca <_fwalk_reent+0xe>
 80123da:	4638      	mov	r0, r7
 80123dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123e0:	89ab      	ldrh	r3, [r5, #12]
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	d907      	bls.n	80123f6 <_fwalk_reent+0x3a>
 80123e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80123ea:	3301      	adds	r3, #1
 80123ec:	d003      	beq.n	80123f6 <_fwalk_reent+0x3a>
 80123ee:	4629      	mov	r1, r5
 80123f0:	4630      	mov	r0, r6
 80123f2:	47c0      	blx	r8
 80123f4:	4307      	orrs	r7, r0
 80123f6:	3568      	adds	r5, #104	; 0x68
 80123f8:	e7e9      	b.n	80123ce <_fwalk_reent+0x12>

080123fa <__retarget_lock_init_recursive>:
 80123fa:	4770      	bx	lr

080123fc <__retarget_lock_acquire_recursive>:
 80123fc:	4770      	bx	lr

080123fe <__retarget_lock_release_recursive>:
 80123fe:	4770      	bx	lr

08012400 <malloc>:
 8012400:	4b02      	ldr	r3, [pc, #8]	; (801240c <malloc+0xc>)
 8012402:	4601      	mov	r1, r0
 8012404:	6818      	ldr	r0, [r3, #0]
 8012406:	f000 b86f 	b.w	80124e8 <_malloc_r>
 801240a:	bf00      	nop
 801240c:	24000030 	.word	0x24000030

08012410 <_free_r>:
 8012410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012412:	2900      	cmp	r1, #0
 8012414:	d044      	beq.n	80124a0 <_free_r+0x90>
 8012416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801241a:	9001      	str	r0, [sp, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	f1a1 0404 	sub.w	r4, r1, #4
 8012422:	bfb8      	it	lt
 8012424:	18e4      	addlt	r4, r4, r3
 8012426:	f000 fe39 	bl	801309c <__malloc_lock>
 801242a:	4a1e      	ldr	r2, [pc, #120]	; (80124a4 <_free_r+0x94>)
 801242c:	9801      	ldr	r0, [sp, #4]
 801242e:	6813      	ldr	r3, [r2, #0]
 8012430:	b933      	cbnz	r3, 8012440 <_free_r+0x30>
 8012432:	6063      	str	r3, [r4, #4]
 8012434:	6014      	str	r4, [r2, #0]
 8012436:	b003      	add	sp, #12
 8012438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801243c:	f000 be34 	b.w	80130a8 <__malloc_unlock>
 8012440:	42a3      	cmp	r3, r4
 8012442:	d908      	bls.n	8012456 <_free_r+0x46>
 8012444:	6825      	ldr	r5, [r4, #0]
 8012446:	1961      	adds	r1, r4, r5
 8012448:	428b      	cmp	r3, r1
 801244a:	bf01      	itttt	eq
 801244c:	6819      	ldreq	r1, [r3, #0]
 801244e:	685b      	ldreq	r3, [r3, #4]
 8012450:	1949      	addeq	r1, r1, r5
 8012452:	6021      	streq	r1, [r4, #0]
 8012454:	e7ed      	b.n	8012432 <_free_r+0x22>
 8012456:	461a      	mov	r2, r3
 8012458:	685b      	ldr	r3, [r3, #4]
 801245a:	b10b      	cbz	r3, 8012460 <_free_r+0x50>
 801245c:	42a3      	cmp	r3, r4
 801245e:	d9fa      	bls.n	8012456 <_free_r+0x46>
 8012460:	6811      	ldr	r1, [r2, #0]
 8012462:	1855      	adds	r5, r2, r1
 8012464:	42a5      	cmp	r5, r4
 8012466:	d10b      	bne.n	8012480 <_free_r+0x70>
 8012468:	6824      	ldr	r4, [r4, #0]
 801246a:	4421      	add	r1, r4
 801246c:	1854      	adds	r4, r2, r1
 801246e:	42a3      	cmp	r3, r4
 8012470:	6011      	str	r1, [r2, #0]
 8012472:	d1e0      	bne.n	8012436 <_free_r+0x26>
 8012474:	681c      	ldr	r4, [r3, #0]
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	6053      	str	r3, [r2, #4]
 801247a:	4421      	add	r1, r4
 801247c:	6011      	str	r1, [r2, #0]
 801247e:	e7da      	b.n	8012436 <_free_r+0x26>
 8012480:	d902      	bls.n	8012488 <_free_r+0x78>
 8012482:	230c      	movs	r3, #12
 8012484:	6003      	str	r3, [r0, #0]
 8012486:	e7d6      	b.n	8012436 <_free_r+0x26>
 8012488:	6825      	ldr	r5, [r4, #0]
 801248a:	1961      	adds	r1, r4, r5
 801248c:	428b      	cmp	r3, r1
 801248e:	bf04      	itt	eq
 8012490:	6819      	ldreq	r1, [r3, #0]
 8012492:	685b      	ldreq	r3, [r3, #4]
 8012494:	6063      	str	r3, [r4, #4]
 8012496:	bf04      	itt	eq
 8012498:	1949      	addeq	r1, r1, r5
 801249a:	6021      	streq	r1, [r4, #0]
 801249c:	6054      	str	r4, [r2, #4]
 801249e:	e7ca      	b.n	8012436 <_free_r+0x26>
 80124a0:	b003      	add	sp, #12
 80124a2:	bd30      	pop	{r4, r5, pc}
 80124a4:	240081c0 	.word	0x240081c0

080124a8 <sbrk_aligned>:
 80124a8:	b570      	push	{r4, r5, r6, lr}
 80124aa:	4e0e      	ldr	r6, [pc, #56]	; (80124e4 <sbrk_aligned+0x3c>)
 80124ac:	460c      	mov	r4, r1
 80124ae:	6831      	ldr	r1, [r6, #0]
 80124b0:	4605      	mov	r5, r0
 80124b2:	b911      	cbnz	r1, 80124ba <sbrk_aligned+0x12>
 80124b4:	f000 fb7a 	bl	8012bac <_sbrk_r>
 80124b8:	6030      	str	r0, [r6, #0]
 80124ba:	4621      	mov	r1, r4
 80124bc:	4628      	mov	r0, r5
 80124be:	f000 fb75 	bl	8012bac <_sbrk_r>
 80124c2:	1c43      	adds	r3, r0, #1
 80124c4:	d00a      	beq.n	80124dc <sbrk_aligned+0x34>
 80124c6:	1cc4      	adds	r4, r0, #3
 80124c8:	f024 0403 	bic.w	r4, r4, #3
 80124cc:	42a0      	cmp	r0, r4
 80124ce:	d007      	beq.n	80124e0 <sbrk_aligned+0x38>
 80124d0:	1a21      	subs	r1, r4, r0
 80124d2:	4628      	mov	r0, r5
 80124d4:	f000 fb6a 	bl	8012bac <_sbrk_r>
 80124d8:	3001      	adds	r0, #1
 80124da:	d101      	bne.n	80124e0 <sbrk_aligned+0x38>
 80124dc:	f04f 34ff 	mov.w	r4, #4294967295
 80124e0:	4620      	mov	r0, r4
 80124e2:	bd70      	pop	{r4, r5, r6, pc}
 80124e4:	240081c4 	.word	0x240081c4

080124e8 <_malloc_r>:
 80124e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124ec:	1ccd      	adds	r5, r1, #3
 80124ee:	f025 0503 	bic.w	r5, r5, #3
 80124f2:	3508      	adds	r5, #8
 80124f4:	2d0c      	cmp	r5, #12
 80124f6:	bf38      	it	cc
 80124f8:	250c      	movcc	r5, #12
 80124fa:	2d00      	cmp	r5, #0
 80124fc:	4607      	mov	r7, r0
 80124fe:	db01      	blt.n	8012504 <_malloc_r+0x1c>
 8012500:	42a9      	cmp	r1, r5
 8012502:	d905      	bls.n	8012510 <_malloc_r+0x28>
 8012504:	230c      	movs	r3, #12
 8012506:	603b      	str	r3, [r7, #0]
 8012508:	2600      	movs	r6, #0
 801250a:	4630      	mov	r0, r6
 801250c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012510:	4e2e      	ldr	r6, [pc, #184]	; (80125cc <_malloc_r+0xe4>)
 8012512:	f000 fdc3 	bl	801309c <__malloc_lock>
 8012516:	6833      	ldr	r3, [r6, #0]
 8012518:	461c      	mov	r4, r3
 801251a:	bb34      	cbnz	r4, 801256a <_malloc_r+0x82>
 801251c:	4629      	mov	r1, r5
 801251e:	4638      	mov	r0, r7
 8012520:	f7ff ffc2 	bl	80124a8 <sbrk_aligned>
 8012524:	1c43      	adds	r3, r0, #1
 8012526:	4604      	mov	r4, r0
 8012528:	d14d      	bne.n	80125c6 <_malloc_r+0xde>
 801252a:	6834      	ldr	r4, [r6, #0]
 801252c:	4626      	mov	r6, r4
 801252e:	2e00      	cmp	r6, #0
 8012530:	d140      	bne.n	80125b4 <_malloc_r+0xcc>
 8012532:	6823      	ldr	r3, [r4, #0]
 8012534:	4631      	mov	r1, r6
 8012536:	4638      	mov	r0, r7
 8012538:	eb04 0803 	add.w	r8, r4, r3
 801253c:	f000 fb36 	bl	8012bac <_sbrk_r>
 8012540:	4580      	cmp	r8, r0
 8012542:	d13a      	bne.n	80125ba <_malloc_r+0xd2>
 8012544:	6821      	ldr	r1, [r4, #0]
 8012546:	3503      	adds	r5, #3
 8012548:	1a6d      	subs	r5, r5, r1
 801254a:	f025 0503 	bic.w	r5, r5, #3
 801254e:	3508      	adds	r5, #8
 8012550:	2d0c      	cmp	r5, #12
 8012552:	bf38      	it	cc
 8012554:	250c      	movcc	r5, #12
 8012556:	4629      	mov	r1, r5
 8012558:	4638      	mov	r0, r7
 801255a:	f7ff ffa5 	bl	80124a8 <sbrk_aligned>
 801255e:	3001      	adds	r0, #1
 8012560:	d02b      	beq.n	80125ba <_malloc_r+0xd2>
 8012562:	6823      	ldr	r3, [r4, #0]
 8012564:	442b      	add	r3, r5
 8012566:	6023      	str	r3, [r4, #0]
 8012568:	e00e      	b.n	8012588 <_malloc_r+0xa0>
 801256a:	6822      	ldr	r2, [r4, #0]
 801256c:	1b52      	subs	r2, r2, r5
 801256e:	d41e      	bmi.n	80125ae <_malloc_r+0xc6>
 8012570:	2a0b      	cmp	r2, #11
 8012572:	d916      	bls.n	80125a2 <_malloc_r+0xba>
 8012574:	1961      	adds	r1, r4, r5
 8012576:	42a3      	cmp	r3, r4
 8012578:	6025      	str	r5, [r4, #0]
 801257a:	bf18      	it	ne
 801257c:	6059      	strne	r1, [r3, #4]
 801257e:	6863      	ldr	r3, [r4, #4]
 8012580:	bf08      	it	eq
 8012582:	6031      	streq	r1, [r6, #0]
 8012584:	5162      	str	r2, [r4, r5]
 8012586:	604b      	str	r3, [r1, #4]
 8012588:	4638      	mov	r0, r7
 801258a:	f104 060b 	add.w	r6, r4, #11
 801258e:	f000 fd8b 	bl	80130a8 <__malloc_unlock>
 8012592:	f026 0607 	bic.w	r6, r6, #7
 8012596:	1d23      	adds	r3, r4, #4
 8012598:	1af2      	subs	r2, r6, r3
 801259a:	d0b6      	beq.n	801250a <_malloc_r+0x22>
 801259c:	1b9b      	subs	r3, r3, r6
 801259e:	50a3      	str	r3, [r4, r2]
 80125a0:	e7b3      	b.n	801250a <_malloc_r+0x22>
 80125a2:	6862      	ldr	r2, [r4, #4]
 80125a4:	42a3      	cmp	r3, r4
 80125a6:	bf0c      	ite	eq
 80125a8:	6032      	streq	r2, [r6, #0]
 80125aa:	605a      	strne	r2, [r3, #4]
 80125ac:	e7ec      	b.n	8012588 <_malloc_r+0xa0>
 80125ae:	4623      	mov	r3, r4
 80125b0:	6864      	ldr	r4, [r4, #4]
 80125b2:	e7b2      	b.n	801251a <_malloc_r+0x32>
 80125b4:	4634      	mov	r4, r6
 80125b6:	6876      	ldr	r6, [r6, #4]
 80125b8:	e7b9      	b.n	801252e <_malloc_r+0x46>
 80125ba:	230c      	movs	r3, #12
 80125bc:	603b      	str	r3, [r7, #0]
 80125be:	4638      	mov	r0, r7
 80125c0:	f000 fd72 	bl	80130a8 <__malloc_unlock>
 80125c4:	e7a1      	b.n	801250a <_malloc_r+0x22>
 80125c6:	6025      	str	r5, [r4, #0]
 80125c8:	e7de      	b.n	8012588 <_malloc_r+0xa0>
 80125ca:	bf00      	nop
 80125cc:	240081c0 	.word	0x240081c0

080125d0 <__sfputc_r>:
 80125d0:	6893      	ldr	r3, [r2, #8]
 80125d2:	3b01      	subs	r3, #1
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	b410      	push	{r4}
 80125d8:	6093      	str	r3, [r2, #8]
 80125da:	da08      	bge.n	80125ee <__sfputc_r+0x1e>
 80125dc:	6994      	ldr	r4, [r2, #24]
 80125de:	42a3      	cmp	r3, r4
 80125e0:	db01      	blt.n	80125e6 <__sfputc_r+0x16>
 80125e2:	290a      	cmp	r1, #10
 80125e4:	d103      	bne.n	80125ee <__sfputc_r+0x1e>
 80125e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125ea:	f000 bb33 	b.w	8012c54 <__swbuf_r>
 80125ee:	6813      	ldr	r3, [r2, #0]
 80125f0:	1c58      	adds	r0, r3, #1
 80125f2:	6010      	str	r0, [r2, #0]
 80125f4:	7019      	strb	r1, [r3, #0]
 80125f6:	4608      	mov	r0, r1
 80125f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125fc:	4770      	bx	lr

080125fe <__sfputs_r>:
 80125fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012600:	4606      	mov	r6, r0
 8012602:	460f      	mov	r7, r1
 8012604:	4614      	mov	r4, r2
 8012606:	18d5      	adds	r5, r2, r3
 8012608:	42ac      	cmp	r4, r5
 801260a:	d101      	bne.n	8012610 <__sfputs_r+0x12>
 801260c:	2000      	movs	r0, #0
 801260e:	e007      	b.n	8012620 <__sfputs_r+0x22>
 8012610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012614:	463a      	mov	r2, r7
 8012616:	4630      	mov	r0, r6
 8012618:	f7ff ffda 	bl	80125d0 <__sfputc_r>
 801261c:	1c43      	adds	r3, r0, #1
 801261e:	d1f3      	bne.n	8012608 <__sfputs_r+0xa>
 8012620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012624 <_vfiprintf_r>:
 8012624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012628:	460d      	mov	r5, r1
 801262a:	b09d      	sub	sp, #116	; 0x74
 801262c:	4614      	mov	r4, r2
 801262e:	4698      	mov	r8, r3
 8012630:	4606      	mov	r6, r0
 8012632:	b118      	cbz	r0, 801263c <_vfiprintf_r+0x18>
 8012634:	6983      	ldr	r3, [r0, #24]
 8012636:	b90b      	cbnz	r3, 801263c <_vfiprintf_r+0x18>
 8012638:	f7ff fe30 	bl	801229c <__sinit>
 801263c:	4b89      	ldr	r3, [pc, #548]	; (8012864 <_vfiprintf_r+0x240>)
 801263e:	429d      	cmp	r5, r3
 8012640:	d11b      	bne.n	801267a <_vfiprintf_r+0x56>
 8012642:	6875      	ldr	r5, [r6, #4]
 8012644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012646:	07d9      	lsls	r1, r3, #31
 8012648:	d405      	bmi.n	8012656 <_vfiprintf_r+0x32>
 801264a:	89ab      	ldrh	r3, [r5, #12]
 801264c:	059a      	lsls	r2, r3, #22
 801264e:	d402      	bmi.n	8012656 <_vfiprintf_r+0x32>
 8012650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012652:	f7ff fed3 	bl	80123fc <__retarget_lock_acquire_recursive>
 8012656:	89ab      	ldrh	r3, [r5, #12]
 8012658:	071b      	lsls	r3, r3, #28
 801265a:	d501      	bpl.n	8012660 <_vfiprintf_r+0x3c>
 801265c:	692b      	ldr	r3, [r5, #16]
 801265e:	b9eb      	cbnz	r3, 801269c <_vfiprintf_r+0x78>
 8012660:	4629      	mov	r1, r5
 8012662:	4630      	mov	r0, r6
 8012664:	f000 fb5a 	bl	8012d1c <__swsetup_r>
 8012668:	b1c0      	cbz	r0, 801269c <_vfiprintf_r+0x78>
 801266a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801266c:	07dc      	lsls	r4, r3, #31
 801266e:	d50e      	bpl.n	801268e <_vfiprintf_r+0x6a>
 8012670:	f04f 30ff 	mov.w	r0, #4294967295
 8012674:	b01d      	add	sp, #116	; 0x74
 8012676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801267a:	4b7b      	ldr	r3, [pc, #492]	; (8012868 <_vfiprintf_r+0x244>)
 801267c:	429d      	cmp	r5, r3
 801267e:	d101      	bne.n	8012684 <_vfiprintf_r+0x60>
 8012680:	68b5      	ldr	r5, [r6, #8]
 8012682:	e7df      	b.n	8012644 <_vfiprintf_r+0x20>
 8012684:	4b79      	ldr	r3, [pc, #484]	; (801286c <_vfiprintf_r+0x248>)
 8012686:	429d      	cmp	r5, r3
 8012688:	bf08      	it	eq
 801268a:	68f5      	ldreq	r5, [r6, #12]
 801268c:	e7da      	b.n	8012644 <_vfiprintf_r+0x20>
 801268e:	89ab      	ldrh	r3, [r5, #12]
 8012690:	0598      	lsls	r0, r3, #22
 8012692:	d4ed      	bmi.n	8012670 <_vfiprintf_r+0x4c>
 8012694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012696:	f7ff feb2 	bl	80123fe <__retarget_lock_release_recursive>
 801269a:	e7e9      	b.n	8012670 <_vfiprintf_r+0x4c>
 801269c:	2300      	movs	r3, #0
 801269e:	9309      	str	r3, [sp, #36]	; 0x24
 80126a0:	2320      	movs	r3, #32
 80126a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80126aa:	2330      	movs	r3, #48	; 0x30
 80126ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012870 <_vfiprintf_r+0x24c>
 80126b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126b4:	f04f 0901 	mov.w	r9, #1
 80126b8:	4623      	mov	r3, r4
 80126ba:	469a      	mov	sl, r3
 80126bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126c0:	b10a      	cbz	r2, 80126c6 <_vfiprintf_r+0xa2>
 80126c2:	2a25      	cmp	r2, #37	; 0x25
 80126c4:	d1f9      	bne.n	80126ba <_vfiprintf_r+0x96>
 80126c6:	ebba 0b04 	subs.w	fp, sl, r4
 80126ca:	d00b      	beq.n	80126e4 <_vfiprintf_r+0xc0>
 80126cc:	465b      	mov	r3, fp
 80126ce:	4622      	mov	r2, r4
 80126d0:	4629      	mov	r1, r5
 80126d2:	4630      	mov	r0, r6
 80126d4:	f7ff ff93 	bl	80125fe <__sfputs_r>
 80126d8:	3001      	adds	r0, #1
 80126da:	f000 80aa 	beq.w	8012832 <_vfiprintf_r+0x20e>
 80126de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126e0:	445a      	add	r2, fp
 80126e2:	9209      	str	r2, [sp, #36]	; 0x24
 80126e4:	f89a 3000 	ldrb.w	r3, [sl]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	f000 80a2 	beq.w	8012832 <_vfiprintf_r+0x20e>
 80126ee:	2300      	movs	r3, #0
 80126f0:	f04f 32ff 	mov.w	r2, #4294967295
 80126f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126f8:	f10a 0a01 	add.w	sl, sl, #1
 80126fc:	9304      	str	r3, [sp, #16]
 80126fe:	9307      	str	r3, [sp, #28]
 8012700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012704:	931a      	str	r3, [sp, #104]	; 0x68
 8012706:	4654      	mov	r4, sl
 8012708:	2205      	movs	r2, #5
 801270a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801270e:	4858      	ldr	r0, [pc, #352]	; (8012870 <_vfiprintf_r+0x24c>)
 8012710:	f7ed fde6 	bl	80002e0 <memchr>
 8012714:	9a04      	ldr	r2, [sp, #16]
 8012716:	b9d8      	cbnz	r0, 8012750 <_vfiprintf_r+0x12c>
 8012718:	06d1      	lsls	r1, r2, #27
 801271a:	bf44      	itt	mi
 801271c:	2320      	movmi	r3, #32
 801271e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012722:	0713      	lsls	r3, r2, #28
 8012724:	bf44      	itt	mi
 8012726:	232b      	movmi	r3, #43	; 0x2b
 8012728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801272c:	f89a 3000 	ldrb.w	r3, [sl]
 8012730:	2b2a      	cmp	r3, #42	; 0x2a
 8012732:	d015      	beq.n	8012760 <_vfiprintf_r+0x13c>
 8012734:	9a07      	ldr	r2, [sp, #28]
 8012736:	4654      	mov	r4, sl
 8012738:	2000      	movs	r0, #0
 801273a:	f04f 0c0a 	mov.w	ip, #10
 801273e:	4621      	mov	r1, r4
 8012740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012744:	3b30      	subs	r3, #48	; 0x30
 8012746:	2b09      	cmp	r3, #9
 8012748:	d94e      	bls.n	80127e8 <_vfiprintf_r+0x1c4>
 801274a:	b1b0      	cbz	r0, 801277a <_vfiprintf_r+0x156>
 801274c:	9207      	str	r2, [sp, #28]
 801274e:	e014      	b.n	801277a <_vfiprintf_r+0x156>
 8012750:	eba0 0308 	sub.w	r3, r0, r8
 8012754:	fa09 f303 	lsl.w	r3, r9, r3
 8012758:	4313      	orrs	r3, r2
 801275a:	9304      	str	r3, [sp, #16]
 801275c:	46a2      	mov	sl, r4
 801275e:	e7d2      	b.n	8012706 <_vfiprintf_r+0xe2>
 8012760:	9b03      	ldr	r3, [sp, #12]
 8012762:	1d19      	adds	r1, r3, #4
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	9103      	str	r1, [sp, #12]
 8012768:	2b00      	cmp	r3, #0
 801276a:	bfbb      	ittet	lt
 801276c:	425b      	neglt	r3, r3
 801276e:	f042 0202 	orrlt.w	r2, r2, #2
 8012772:	9307      	strge	r3, [sp, #28]
 8012774:	9307      	strlt	r3, [sp, #28]
 8012776:	bfb8      	it	lt
 8012778:	9204      	strlt	r2, [sp, #16]
 801277a:	7823      	ldrb	r3, [r4, #0]
 801277c:	2b2e      	cmp	r3, #46	; 0x2e
 801277e:	d10c      	bne.n	801279a <_vfiprintf_r+0x176>
 8012780:	7863      	ldrb	r3, [r4, #1]
 8012782:	2b2a      	cmp	r3, #42	; 0x2a
 8012784:	d135      	bne.n	80127f2 <_vfiprintf_r+0x1ce>
 8012786:	9b03      	ldr	r3, [sp, #12]
 8012788:	1d1a      	adds	r2, r3, #4
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	9203      	str	r2, [sp, #12]
 801278e:	2b00      	cmp	r3, #0
 8012790:	bfb8      	it	lt
 8012792:	f04f 33ff 	movlt.w	r3, #4294967295
 8012796:	3402      	adds	r4, #2
 8012798:	9305      	str	r3, [sp, #20]
 801279a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012880 <_vfiprintf_r+0x25c>
 801279e:	7821      	ldrb	r1, [r4, #0]
 80127a0:	2203      	movs	r2, #3
 80127a2:	4650      	mov	r0, sl
 80127a4:	f7ed fd9c 	bl	80002e0 <memchr>
 80127a8:	b140      	cbz	r0, 80127bc <_vfiprintf_r+0x198>
 80127aa:	2340      	movs	r3, #64	; 0x40
 80127ac:	eba0 000a 	sub.w	r0, r0, sl
 80127b0:	fa03 f000 	lsl.w	r0, r3, r0
 80127b4:	9b04      	ldr	r3, [sp, #16]
 80127b6:	4303      	orrs	r3, r0
 80127b8:	3401      	adds	r4, #1
 80127ba:	9304      	str	r3, [sp, #16]
 80127bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127c0:	482c      	ldr	r0, [pc, #176]	; (8012874 <_vfiprintf_r+0x250>)
 80127c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127c6:	2206      	movs	r2, #6
 80127c8:	f7ed fd8a 	bl	80002e0 <memchr>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	d03f      	beq.n	8012850 <_vfiprintf_r+0x22c>
 80127d0:	4b29      	ldr	r3, [pc, #164]	; (8012878 <_vfiprintf_r+0x254>)
 80127d2:	bb1b      	cbnz	r3, 801281c <_vfiprintf_r+0x1f8>
 80127d4:	9b03      	ldr	r3, [sp, #12]
 80127d6:	3307      	adds	r3, #7
 80127d8:	f023 0307 	bic.w	r3, r3, #7
 80127dc:	3308      	adds	r3, #8
 80127de:	9303      	str	r3, [sp, #12]
 80127e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127e2:	443b      	add	r3, r7
 80127e4:	9309      	str	r3, [sp, #36]	; 0x24
 80127e6:	e767      	b.n	80126b8 <_vfiprintf_r+0x94>
 80127e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80127ec:	460c      	mov	r4, r1
 80127ee:	2001      	movs	r0, #1
 80127f0:	e7a5      	b.n	801273e <_vfiprintf_r+0x11a>
 80127f2:	2300      	movs	r3, #0
 80127f4:	3401      	adds	r4, #1
 80127f6:	9305      	str	r3, [sp, #20]
 80127f8:	4619      	mov	r1, r3
 80127fa:	f04f 0c0a 	mov.w	ip, #10
 80127fe:	4620      	mov	r0, r4
 8012800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012804:	3a30      	subs	r2, #48	; 0x30
 8012806:	2a09      	cmp	r2, #9
 8012808:	d903      	bls.n	8012812 <_vfiprintf_r+0x1ee>
 801280a:	2b00      	cmp	r3, #0
 801280c:	d0c5      	beq.n	801279a <_vfiprintf_r+0x176>
 801280e:	9105      	str	r1, [sp, #20]
 8012810:	e7c3      	b.n	801279a <_vfiprintf_r+0x176>
 8012812:	fb0c 2101 	mla	r1, ip, r1, r2
 8012816:	4604      	mov	r4, r0
 8012818:	2301      	movs	r3, #1
 801281a:	e7f0      	b.n	80127fe <_vfiprintf_r+0x1da>
 801281c:	ab03      	add	r3, sp, #12
 801281e:	9300      	str	r3, [sp, #0]
 8012820:	462a      	mov	r2, r5
 8012822:	4b16      	ldr	r3, [pc, #88]	; (801287c <_vfiprintf_r+0x258>)
 8012824:	a904      	add	r1, sp, #16
 8012826:	4630      	mov	r0, r6
 8012828:	f3af 8000 	nop.w
 801282c:	4607      	mov	r7, r0
 801282e:	1c78      	adds	r0, r7, #1
 8012830:	d1d6      	bne.n	80127e0 <_vfiprintf_r+0x1bc>
 8012832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012834:	07d9      	lsls	r1, r3, #31
 8012836:	d405      	bmi.n	8012844 <_vfiprintf_r+0x220>
 8012838:	89ab      	ldrh	r3, [r5, #12]
 801283a:	059a      	lsls	r2, r3, #22
 801283c:	d402      	bmi.n	8012844 <_vfiprintf_r+0x220>
 801283e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012840:	f7ff fddd 	bl	80123fe <__retarget_lock_release_recursive>
 8012844:	89ab      	ldrh	r3, [r5, #12]
 8012846:	065b      	lsls	r3, r3, #25
 8012848:	f53f af12 	bmi.w	8012670 <_vfiprintf_r+0x4c>
 801284c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801284e:	e711      	b.n	8012674 <_vfiprintf_r+0x50>
 8012850:	ab03      	add	r3, sp, #12
 8012852:	9300      	str	r3, [sp, #0]
 8012854:	462a      	mov	r2, r5
 8012856:	4b09      	ldr	r3, [pc, #36]	; (801287c <_vfiprintf_r+0x258>)
 8012858:	a904      	add	r1, sp, #16
 801285a:	4630      	mov	r0, r6
 801285c:	f000 f880 	bl	8012960 <_printf_i>
 8012860:	e7e4      	b.n	801282c <_vfiprintf_r+0x208>
 8012862:	bf00      	nop
 8012864:	08015f7c 	.word	0x08015f7c
 8012868:	08015f9c 	.word	0x08015f9c
 801286c:	08015f5c 	.word	0x08015f5c
 8012870:	08015fbc 	.word	0x08015fbc
 8012874:	08015fc6 	.word	0x08015fc6
 8012878:	00000000 	.word	0x00000000
 801287c:	080125ff 	.word	0x080125ff
 8012880:	08015fc2 	.word	0x08015fc2

08012884 <_printf_common>:
 8012884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012888:	4616      	mov	r6, r2
 801288a:	4699      	mov	r9, r3
 801288c:	688a      	ldr	r2, [r1, #8]
 801288e:	690b      	ldr	r3, [r1, #16]
 8012890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012894:	4293      	cmp	r3, r2
 8012896:	bfb8      	it	lt
 8012898:	4613      	movlt	r3, r2
 801289a:	6033      	str	r3, [r6, #0]
 801289c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80128a0:	4607      	mov	r7, r0
 80128a2:	460c      	mov	r4, r1
 80128a4:	b10a      	cbz	r2, 80128aa <_printf_common+0x26>
 80128a6:	3301      	adds	r3, #1
 80128a8:	6033      	str	r3, [r6, #0]
 80128aa:	6823      	ldr	r3, [r4, #0]
 80128ac:	0699      	lsls	r1, r3, #26
 80128ae:	bf42      	ittt	mi
 80128b0:	6833      	ldrmi	r3, [r6, #0]
 80128b2:	3302      	addmi	r3, #2
 80128b4:	6033      	strmi	r3, [r6, #0]
 80128b6:	6825      	ldr	r5, [r4, #0]
 80128b8:	f015 0506 	ands.w	r5, r5, #6
 80128bc:	d106      	bne.n	80128cc <_printf_common+0x48>
 80128be:	f104 0a19 	add.w	sl, r4, #25
 80128c2:	68e3      	ldr	r3, [r4, #12]
 80128c4:	6832      	ldr	r2, [r6, #0]
 80128c6:	1a9b      	subs	r3, r3, r2
 80128c8:	42ab      	cmp	r3, r5
 80128ca:	dc26      	bgt.n	801291a <_printf_common+0x96>
 80128cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80128d0:	1e13      	subs	r3, r2, #0
 80128d2:	6822      	ldr	r2, [r4, #0]
 80128d4:	bf18      	it	ne
 80128d6:	2301      	movne	r3, #1
 80128d8:	0692      	lsls	r2, r2, #26
 80128da:	d42b      	bmi.n	8012934 <_printf_common+0xb0>
 80128dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80128e0:	4649      	mov	r1, r9
 80128e2:	4638      	mov	r0, r7
 80128e4:	47c0      	blx	r8
 80128e6:	3001      	adds	r0, #1
 80128e8:	d01e      	beq.n	8012928 <_printf_common+0xa4>
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	68e5      	ldr	r5, [r4, #12]
 80128ee:	6832      	ldr	r2, [r6, #0]
 80128f0:	f003 0306 	and.w	r3, r3, #6
 80128f4:	2b04      	cmp	r3, #4
 80128f6:	bf08      	it	eq
 80128f8:	1aad      	subeq	r5, r5, r2
 80128fa:	68a3      	ldr	r3, [r4, #8]
 80128fc:	6922      	ldr	r2, [r4, #16]
 80128fe:	bf0c      	ite	eq
 8012900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012904:	2500      	movne	r5, #0
 8012906:	4293      	cmp	r3, r2
 8012908:	bfc4      	itt	gt
 801290a:	1a9b      	subgt	r3, r3, r2
 801290c:	18ed      	addgt	r5, r5, r3
 801290e:	2600      	movs	r6, #0
 8012910:	341a      	adds	r4, #26
 8012912:	42b5      	cmp	r5, r6
 8012914:	d11a      	bne.n	801294c <_printf_common+0xc8>
 8012916:	2000      	movs	r0, #0
 8012918:	e008      	b.n	801292c <_printf_common+0xa8>
 801291a:	2301      	movs	r3, #1
 801291c:	4652      	mov	r2, sl
 801291e:	4649      	mov	r1, r9
 8012920:	4638      	mov	r0, r7
 8012922:	47c0      	blx	r8
 8012924:	3001      	adds	r0, #1
 8012926:	d103      	bne.n	8012930 <_printf_common+0xac>
 8012928:	f04f 30ff 	mov.w	r0, #4294967295
 801292c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012930:	3501      	adds	r5, #1
 8012932:	e7c6      	b.n	80128c2 <_printf_common+0x3e>
 8012934:	18e1      	adds	r1, r4, r3
 8012936:	1c5a      	adds	r2, r3, #1
 8012938:	2030      	movs	r0, #48	; 0x30
 801293a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801293e:	4422      	add	r2, r4
 8012940:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012944:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012948:	3302      	adds	r3, #2
 801294a:	e7c7      	b.n	80128dc <_printf_common+0x58>
 801294c:	2301      	movs	r3, #1
 801294e:	4622      	mov	r2, r4
 8012950:	4649      	mov	r1, r9
 8012952:	4638      	mov	r0, r7
 8012954:	47c0      	blx	r8
 8012956:	3001      	adds	r0, #1
 8012958:	d0e6      	beq.n	8012928 <_printf_common+0xa4>
 801295a:	3601      	adds	r6, #1
 801295c:	e7d9      	b.n	8012912 <_printf_common+0x8e>
	...

08012960 <_printf_i>:
 8012960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012964:	7e0f      	ldrb	r7, [r1, #24]
 8012966:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012968:	2f78      	cmp	r7, #120	; 0x78
 801296a:	4691      	mov	r9, r2
 801296c:	4680      	mov	r8, r0
 801296e:	460c      	mov	r4, r1
 8012970:	469a      	mov	sl, r3
 8012972:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012976:	d807      	bhi.n	8012988 <_printf_i+0x28>
 8012978:	2f62      	cmp	r7, #98	; 0x62
 801297a:	d80a      	bhi.n	8012992 <_printf_i+0x32>
 801297c:	2f00      	cmp	r7, #0
 801297e:	f000 80d8 	beq.w	8012b32 <_printf_i+0x1d2>
 8012982:	2f58      	cmp	r7, #88	; 0x58
 8012984:	f000 80a3 	beq.w	8012ace <_printf_i+0x16e>
 8012988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801298c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012990:	e03a      	b.n	8012a08 <_printf_i+0xa8>
 8012992:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012996:	2b15      	cmp	r3, #21
 8012998:	d8f6      	bhi.n	8012988 <_printf_i+0x28>
 801299a:	a101      	add	r1, pc, #4	; (adr r1, 80129a0 <_printf_i+0x40>)
 801299c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80129a0:	080129f9 	.word	0x080129f9
 80129a4:	08012a0d 	.word	0x08012a0d
 80129a8:	08012989 	.word	0x08012989
 80129ac:	08012989 	.word	0x08012989
 80129b0:	08012989 	.word	0x08012989
 80129b4:	08012989 	.word	0x08012989
 80129b8:	08012a0d 	.word	0x08012a0d
 80129bc:	08012989 	.word	0x08012989
 80129c0:	08012989 	.word	0x08012989
 80129c4:	08012989 	.word	0x08012989
 80129c8:	08012989 	.word	0x08012989
 80129cc:	08012b19 	.word	0x08012b19
 80129d0:	08012a3d 	.word	0x08012a3d
 80129d4:	08012afb 	.word	0x08012afb
 80129d8:	08012989 	.word	0x08012989
 80129dc:	08012989 	.word	0x08012989
 80129e0:	08012b3b 	.word	0x08012b3b
 80129e4:	08012989 	.word	0x08012989
 80129e8:	08012a3d 	.word	0x08012a3d
 80129ec:	08012989 	.word	0x08012989
 80129f0:	08012989 	.word	0x08012989
 80129f4:	08012b03 	.word	0x08012b03
 80129f8:	682b      	ldr	r3, [r5, #0]
 80129fa:	1d1a      	adds	r2, r3, #4
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	602a      	str	r2, [r5, #0]
 8012a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a08:	2301      	movs	r3, #1
 8012a0a:	e0a3      	b.n	8012b54 <_printf_i+0x1f4>
 8012a0c:	6820      	ldr	r0, [r4, #0]
 8012a0e:	6829      	ldr	r1, [r5, #0]
 8012a10:	0606      	lsls	r6, r0, #24
 8012a12:	f101 0304 	add.w	r3, r1, #4
 8012a16:	d50a      	bpl.n	8012a2e <_printf_i+0xce>
 8012a18:	680e      	ldr	r6, [r1, #0]
 8012a1a:	602b      	str	r3, [r5, #0]
 8012a1c:	2e00      	cmp	r6, #0
 8012a1e:	da03      	bge.n	8012a28 <_printf_i+0xc8>
 8012a20:	232d      	movs	r3, #45	; 0x2d
 8012a22:	4276      	negs	r6, r6
 8012a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a28:	485e      	ldr	r0, [pc, #376]	; (8012ba4 <_printf_i+0x244>)
 8012a2a:	230a      	movs	r3, #10
 8012a2c:	e019      	b.n	8012a62 <_printf_i+0x102>
 8012a2e:	680e      	ldr	r6, [r1, #0]
 8012a30:	602b      	str	r3, [r5, #0]
 8012a32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012a36:	bf18      	it	ne
 8012a38:	b236      	sxthne	r6, r6
 8012a3a:	e7ef      	b.n	8012a1c <_printf_i+0xbc>
 8012a3c:	682b      	ldr	r3, [r5, #0]
 8012a3e:	6820      	ldr	r0, [r4, #0]
 8012a40:	1d19      	adds	r1, r3, #4
 8012a42:	6029      	str	r1, [r5, #0]
 8012a44:	0601      	lsls	r1, r0, #24
 8012a46:	d501      	bpl.n	8012a4c <_printf_i+0xec>
 8012a48:	681e      	ldr	r6, [r3, #0]
 8012a4a:	e002      	b.n	8012a52 <_printf_i+0xf2>
 8012a4c:	0646      	lsls	r6, r0, #25
 8012a4e:	d5fb      	bpl.n	8012a48 <_printf_i+0xe8>
 8012a50:	881e      	ldrh	r6, [r3, #0]
 8012a52:	4854      	ldr	r0, [pc, #336]	; (8012ba4 <_printf_i+0x244>)
 8012a54:	2f6f      	cmp	r7, #111	; 0x6f
 8012a56:	bf0c      	ite	eq
 8012a58:	2308      	moveq	r3, #8
 8012a5a:	230a      	movne	r3, #10
 8012a5c:	2100      	movs	r1, #0
 8012a5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012a62:	6865      	ldr	r5, [r4, #4]
 8012a64:	60a5      	str	r5, [r4, #8]
 8012a66:	2d00      	cmp	r5, #0
 8012a68:	bfa2      	ittt	ge
 8012a6a:	6821      	ldrge	r1, [r4, #0]
 8012a6c:	f021 0104 	bicge.w	r1, r1, #4
 8012a70:	6021      	strge	r1, [r4, #0]
 8012a72:	b90e      	cbnz	r6, 8012a78 <_printf_i+0x118>
 8012a74:	2d00      	cmp	r5, #0
 8012a76:	d04d      	beq.n	8012b14 <_printf_i+0x1b4>
 8012a78:	4615      	mov	r5, r2
 8012a7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8012a7e:	fb03 6711 	mls	r7, r3, r1, r6
 8012a82:	5dc7      	ldrb	r7, [r0, r7]
 8012a84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012a88:	4637      	mov	r7, r6
 8012a8a:	42bb      	cmp	r3, r7
 8012a8c:	460e      	mov	r6, r1
 8012a8e:	d9f4      	bls.n	8012a7a <_printf_i+0x11a>
 8012a90:	2b08      	cmp	r3, #8
 8012a92:	d10b      	bne.n	8012aac <_printf_i+0x14c>
 8012a94:	6823      	ldr	r3, [r4, #0]
 8012a96:	07de      	lsls	r6, r3, #31
 8012a98:	d508      	bpl.n	8012aac <_printf_i+0x14c>
 8012a9a:	6923      	ldr	r3, [r4, #16]
 8012a9c:	6861      	ldr	r1, [r4, #4]
 8012a9e:	4299      	cmp	r1, r3
 8012aa0:	bfde      	ittt	le
 8012aa2:	2330      	movle	r3, #48	; 0x30
 8012aa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012aa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012aac:	1b52      	subs	r2, r2, r5
 8012aae:	6122      	str	r2, [r4, #16]
 8012ab0:	f8cd a000 	str.w	sl, [sp]
 8012ab4:	464b      	mov	r3, r9
 8012ab6:	aa03      	add	r2, sp, #12
 8012ab8:	4621      	mov	r1, r4
 8012aba:	4640      	mov	r0, r8
 8012abc:	f7ff fee2 	bl	8012884 <_printf_common>
 8012ac0:	3001      	adds	r0, #1
 8012ac2:	d14c      	bne.n	8012b5e <_printf_i+0x1fe>
 8012ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ac8:	b004      	add	sp, #16
 8012aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ace:	4835      	ldr	r0, [pc, #212]	; (8012ba4 <_printf_i+0x244>)
 8012ad0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012ad4:	6829      	ldr	r1, [r5, #0]
 8012ad6:	6823      	ldr	r3, [r4, #0]
 8012ad8:	f851 6b04 	ldr.w	r6, [r1], #4
 8012adc:	6029      	str	r1, [r5, #0]
 8012ade:	061d      	lsls	r5, r3, #24
 8012ae0:	d514      	bpl.n	8012b0c <_printf_i+0x1ac>
 8012ae2:	07df      	lsls	r7, r3, #31
 8012ae4:	bf44      	itt	mi
 8012ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8012aea:	6023      	strmi	r3, [r4, #0]
 8012aec:	b91e      	cbnz	r6, 8012af6 <_printf_i+0x196>
 8012aee:	6823      	ldr	r3, [r4, #0]
 8012af0:	f023 0320 	bic.w	r3, r3, #32
 8012af4:	6023      	str	r3, [r4, #0]
 8012af6:	2310      	movs	r3, #16
 8012af8:	e7b0      	b.n	8012a5c <_printf_i+0xfc>
 8012afa:	6823      	ldr	r3, [r4, #0]
 8012afc:	f043 0320 	orr.w	r3, r3, #32
 8012b00:	6023      	str	r3, [r4, #0]
 8012b02:	2378      	movs	r3, #120	; 0x78
 8012b04:	4828      	ldr	r0, [pc, #160]	; (8012ba8 <_printf_i+0x248>)
 8012b06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012b0a:	e7e3      	b.n	8012ad4 <_printf_i+0x174>
 8012b0c:	0659      	lsls	r1, r3, #25
 8012b0e:	bf48      	it	mi
 8012b10:	b2b6      	uxthmi	r6, r6
 8012b12:	e7e6      	b.n	8012ae2 <_printf_i+0x182>
 8012b14:	4615      	mov	r5, r2
 8012b16:	e7bb      	b.n	8012a90 <_printf_i+0x130>
 8012b18:	682b      	ldr	r3, [r5, #0]
 8012b1a:	6826      	ldr	r6, [r4, #0]
 8012b1c:	6961      	ldr	r1, [r4, #20]
 8012b1e:	1d18      	adds	r0, r3, #4
 8012b20:	6028      	str	r0, [r5, #0]
 8012b22:	0635      	lsls	r5, r6, #24
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	d501      	bpl.n	8012b2c <_printf_i+0x1cc>
 8012b28:	6019      	str	r1, [r3, #0]
 8012b2a:	e002      	b.n	8012b32 <_printf_i+0x1d2>
 8012b2c:	0670      	lsls	r0, r6, #25
 8012b2e:	d5fb      	bpl.n	8012b28 <_printf_i+0x1c8>
 8012b30:	8019      	strh	r1, [r3, #0]
 8012b32:	2300      	movs	r3, #0
 8012b34:	6123      	str	r3, [r4, #16]
 8012b36:	4615      	mov	r5, r2
 8012b38:	e7ba      	b.n	8012ab0 <_printf_i+0x150>
 8012b3a:	682b      	ldr	r3, [r5, #0]
 8012b3c:	1d1a      	adds	r2, r3, #4
 8012b3e:	602a      	str	r2, [r5, #0]
 8012b40:	681d      	ldr	r5, [r3, #0]
 8012b42:	6862      	ldr	r2, [r4, #4]
 8012b44:	2100      	movs	r1, #0
 8012b46:	4628      	mov	r0, r5
 8012b48:	f7ed fbca 	bl	80002e0 <memchr>
 8012b4c:	b108      	cbz	r0, 8012b52 <_printf_i+0x1f2>
 8012b4e:	1b40      	subs	r0, r0, r5
 8012b50:	6060      	str	r0, [r4, #4]
 8012b52:	6863      	ldr	r3, [r4, #4]
 8012b54:	6123      	str	r3, [r4, #16]
 8012b56:	2300      	movs	r3, #0
 8012b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b5c:	e7a8      	b.n	8012ab0 <_printf_i+0x150>
 8012b5e:	6923      	ldr	r3, [r4, #16]
 8012b60:	462a      	mov	r2, r5
 8012b62:	4649      	mov	r1, r9
 8012b64:	4640      	mov	r0, r8
 8012b66:	47d0      	blx	sl
 8012b68:	3001      	adds	r0, #1
 8012b6a:	d0ab      	beq.n	8012ac4 <_printf_i+0x164>
 8012b6c:	6823      	ldr	r3, [r4, #0]
 8012b6e:	079b      	lsls	r3, r3, #30
 8012b70:	d413      	bmi.n	8012b9a <_printf_i+0x23a>
 8012b72:	68e0      	ldr	r0, [r4, #12]
 8012b74:	9b03      	ldr	r3, [sp, #12]
 8012b76:	4298      	cmp	r0, r3
 8012b78:	bfb8      	it	lt
 8012b7a:	4618      	movlt	r0, r3
 8012b7c:	e7a4      	b.n	8012ac8 <_printf_i+0x168>
 8012b7e:	2301      	movs	r3, #1
 8012b80:	4632      	mov	r2, r6
 8012b82:	4649      	mov	r1, r9
 8012b84:	4640      	mov	r0, r8
 8012b86:	47d0      	blx	sl
 8012b88:	3001      	adds	r0, #1
 8012b8a:	d09b      	beq.n	8012ac4 <_printf_i+0x164>
 8012b8c:	3501      	adds	r5, #1
 8012b8e:	68e3      	ldr	r3, [r4, #12]
 8012b90:	9903      	ldr	r1, [sp, #12]
 8012b92:	1a5b      	subs	r3, r3, r1
 8012b94:	42ab      	cmp	r3, r5
 8012b96:	dcf2      	bgt.n	8012b7e <_printf_i+0x21e>
 8012b98:	e7eb      	b.n	8012b72 <_printf_i+0x212>
 8012b9a:	2500      	movs	r5, #0
 8012b9c:	f104 0619 	add.w	r6, r4, #25
 8012ba0:	e7f5      	b.n	8012b8e <_printf_i+0x22e>
 8012ba2:	bf00      	nop
 8012ba4:	08015fcd 	.word	0x08015fcd
 8012ba8:	08015fde 	.word	0x08015fde

08012bac <_sbrk_r>:
 8012bac:	b538      	push	{r3, r4, r5, lr}
 8012bae:	4d06      	ldr	r5, [pc, #24]	; (8012bc8 <_sbrk_r+0x1c>)
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	4608      	mov	r0, r1
 8012bb6:	602b      	str	r3, [r5, #0]
 8012bb8:	f7ee fa18 	bl	8000fec <_sbrk>
 8012bbc:	1c43      	adds	r3, r0, #1
 8012bbe:	d102      	bne.n	8012bc6 <_sbrk_r+0x1a>
 8012bc0:	682b      	ldr	r3, [r5, #0]
 8012bc2:	b103      	cbz	r3, 8012bc6 <_sbrk_r+0x1a>
 8012bc4:	6023      	str	r3, [r4, #0]
 8012bc6:	bd38      	pop	{r3, r4, r5, pc}
 8012bc8:	240081b8 	.word	0x240081b8

08012bcc <__sread>:
 8012bcc:	b510      	push	{r4, lr}
 8012bce:	460c      	mov	r4, r1
 8012bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bd4:	f000 fa6e 	bl	80130b4 <_read_r>
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	bfab      	itete	ge
 8012bdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012bde:	89a3      	ldrhlt	r3, [r4, #12]
 8012be0:	181b      	addge	r3, r3, r0
 8012be2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012be6:	bfac      	ite	ge
 8012be8:	6563      	strge	r3, [r4, #84]	; 0x54
 8012bea:	81a3      	strhlt	r3, [r4, #12]
 8012bec:	bd10      	pop	{r4, pc}

08012bee <__swrite>:
 8012bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf2:	461f      	mov	r7, r3
 8012bf4:	898b      	ldrh	r3, [r1, #12]
 8012bf6:	05db      	lsls	r3, r3, #23
 8012bf8:	4605      	mov	r5, r0
 8012bfa:	460c      	mov	r4, r1
 8012bfc:	4616      	mov	r6, r2
 8012bfe:	d505      	bpl.n	8012c0c <__swrite+0x1e>
 8012c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c04:	2302      	movs	r3, #2
 8012c06:	2200      	movs	r2, #0
 8012c08:	f000 f9d0 	bl	8012fac <_lseek_r>
 8012c0c:	89a3      	ldrh	r3, [r4, #12]
 8012c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c16:	81a3      	strh	r3, [r4, #12]
 8012c18:	4632      	mov	r2, r6
 8012c1a:	463b      	mov	r3, r7
 8012c1c:	4628      	mov	r0, r5
 8012c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c22:	f000 b869 	b.w	8012cf8 <_write_r>

08012c26 <__sseek>:
 8012c26:	b510      	push	{r4, lr}
 8012c28:	460c      	mov	r4, r1
 8012c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c2e:	f000 f9bd 	bl	8012fac <_lseek_r>
 8012c32:	1c43      	adds	r3, r0, #1
 8012c34:	89a3      	ldrh	r3, [r4, #12]
 8012c36:	bf15      	itete	ne
 8012c38:	6560      	strne	r0, [r4, #84]	; 0x54
 8012c3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012c3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012c42:	81a3      	strheq	r3, [r4, #12]
 8012c44:	bf18      	it	ne
 8012c46:	81a3      	strhne	r3, [r4, #12]
 8012c48:	bd10      	pop	{r4, pc}

08012c4a <__sclose>:
 8012c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c4e:	f000 b8db 	b.w	8012e08 <_close_r>
	...

08012c54 <__swbuf_r>:
 8012c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c56:	460e      	mov	r6, r1
 8012c58:	4614      	mov	r4, r2
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	b118      	cbz	r0, 8012c66 <__swbuf_r+0x12>
 8012c5e:	6983      	ldr	r3, [r0, #24]
 8012c60:	b90b      	cbnz	r3, 8012c66 <__swbuf_r+0x12>
 8012c62:	f7ff fb1b 	bl	801229c <__sinit>
 8012c66:	4b21      	ldr	r3, [pc, #132]	; (8012cec <__swbuf_r+0x98>)
 8012c68:	429c      	cmp	r4, r3
 8012c6a:	d12b      	bne.n	8012cc4 <__swbuf_r+0x70>
 8012c6c:	686c      	ldr	r4, [r5, #4]
 8012c6e:	69a3      	ldr	r3, [r4, #24]
 8012c70:	60a3      	str	r3, [r4, #8]
 8012c72:	89a3      	ldrh	r3, [r4, #12]
 8012c74:	071a      	lsls	r2, r3, #28
 8012c76:	d52f      	bpl.n	8012cd8 <__swbuf_r+0x84>
 8012c78:	6923      	ldr	r3, [r4, #16]
 8012c7a:	b36b      	cbz	r3, 8012cd8 <__swbuf_r+0x84>
 8012c7c:	6923      	ldr	r3, [r4, #16]
 8012c7e:	6820      	ldr	r0, [r4, #0]
 8012c80:	1ac0      	subs	r0, r0, r3
 8012c82:	6963      	ldr	r3, [r4, #20]
 8012c84:	b2f6      	uxtb	r6, r6
 8012c86:	4283      	cmp	r3, r0
 8012c88:	4637      	mov	r7, r6
 8012c8a:	dc04      	bgt.n	8012c96 <__swbuf_r+0x42>
 8012c8c:	4621      	mov	r1, r4
 8012c8e:	4628      	mov	r0, r5
 8012c90:	f000 f950 	bl	8012f34 <_fflush_r>
 8012c94:	bb30      	cbnz	r0, 8012ce4 <__swbuf_r+0x90>
 8012c96:	68a3      	ldr	r3, [r4, #8]
 8012c98:	3b01      	subs	r3, #1
 8012c9a:	60a3      	str	r3, [r4, #8]
 8012c9c:	6823      	ldr	r3, [r4, #0]
 8012c9e:	1c5a      	adds	r2, r3, #1
 8012ca0:	6022      	str	r2, [r4, #0]
 8012ca2:	701e      	strb	r6, [r3, #0]
 8012ca4:	6963      	ldr	r3, [r4, #20]
 8012ca6:	3001      	adds	r0, #1
 8012ca8:	4283      	cmp	r3, r0
 8012caa:	d004      	beq.n	8012cb6 <__swbuf_r+0x62>
 8012cac:	89a3      	ldrh	r3, [r4, #12]
 8012cae:	07db      	lsls	r3, r3, #31
 8012cb0:	d506      	bpl.n	8012cc0 <__swbuf_r+0x6c>
 8012cb2:	2e0a      	cmp	r6, #10
 8012cb4:	d104      	bne.n	8012cc0 <__swbuf_r+0x6c>
 8012cb6:	4621      	mov	r1, r4
 8012cb8:	4628      	mov	r0, r5
 8012cba:	f000 f93b 	bl	8012f34 <_fflush_r>
 8012cbe:	b988      	cbnz	r0, 8012ce4 <__swbuf_r+0x90>
 8012cc0:	4638      	mov	r0, r7
 8012cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cc4:	4b0a      	ldr	r3, [pc, #40]	; (8012cf0 <__swbuf_r+0x9c>)
 8012cc6:	429c      	cmp	r4, r3
 8012cc8:	d101      	bne.n	8012cce <__swbuf_r+0x7a>
 8012cca:	68ac      	ldr	r4, [r5, #8]
 8012ccc:	e7cf      	b.n	8012c6e <__swbuf_r+0x1a>
 8012cce:	4b09      	ldr	r3, [pc, #36]	; (8012cf4 <__swbuf_r+0xa0>)
 8012cd0:	429c      	cmp	r4, r3
 8012cd2:	bf08      	it	eq
 8012cd4:	68ec      	ldreq	r4, [r5, #12]
 8012cd6:	e7ca      	b.n	8012c6e <__swbuf_r+0x1a>
 8012cd8:	4621      	mov	r1, r4
 8012cda:	4628      	mov	r0, r5
 8012cdc:	f000 f81e 	bl	8012d1c <__swsetup_r>
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	d0cb      	beq.n	8012c7c <__swbuf_r+0x28>
 8012ce4:	f04f 37ff 	mov.w	r7, #4294967295
 8012ce8:	e7ea      	b.n	8012cc0 <__swbuf_r+0x6c>
 8012cea:	bf00      	nop
 8012cec:	08015f7c 	.word	0x08015f7c
 8012cf0:	08015f9c 	.word	0x08015f9c
 8012cf4:	08015f5c 	.word	0x08015f5c

08012cf8 <_write_r>:
 8012cf8:	b538      	push	{r3, r4, r5, lr}
 8012cfa:	4d07      	ldr	r5, [pc, #28]	; (8012d18 <_write_r+0x20>)
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	4608      	mov	r0, r1
 8012d00:	4611      	mov	r1, r2
 8012d02:	2200      	movs	r2, #0
 8012d04:	602a      	str	r2, [r5, #0]
 8012d06:	461a      	mov	r2, r3
 8012d08:	f7ee f91f 	bl	8000f4a <_write>
 8012d0c:	1c43      	adds	r3, r0, #1
 8012d0e:	d102      	bne.n	8012d16 <_write_r+0x1e>
 8012d10:	682b      	ldr	r3, [r5, #0]
 8012d12:	b103      	cbz	r3, 8012d16 <_write_r+0x1e>
 8012d14:	6023      	str	r3, [r4, #0]
 8012d16:	bd38      	pop	{r3, r4, r5, pc}
 8012d18:	240081b8 	.word	0x240081b8

08012d1c <__swsetup_r>:
 8012d1c:	4b32      	ldr	r3, [pc, #200]	; (8012de8 <__swsetup_r+0xcc>)
 8012d1e:	b570      	push	{r4, r5, r6, lr}
 8012d20:	681d      	ldr	r5, [r3, #0]
 8012d22:	4606      	mov	r6, r0
 8012d24:	460c      	mov	r4, r1
 8012d26:	b125      	cbz	r5, 8012d32 <__swsetup_r+0x16>
 8012d28:	69ab      	ldr	r3, [r5, #24]
 8012d2a:	b913      	cbnz	r3, 8012d32 <__swsetup_r+0x16>
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	f7ff fab5 	bl	801229c <__sinit>
 8012d32:	4b2e      	ldr	r3, [pc, #184]	; (8012dec <__swsetup_r+0xd0>)
 8012d34:	429c      	cmp	r4, r3
 8012d36:	d10f      	bne.n	8012d58 <__swsetup_r+0x3c>
 8012d38:	686c      	ldr	r4, [r5, #4]
 8012d3a:	89a3      	ldrh	r3, [r4, #12]
 8012d3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d40:	0719      	lsls	r1, r3, #28
 8012d42:	d42c      	bmi.n	8012d9e <__swsetup_r+0x82>
 8012d44:	06dd      	lsls	r5, r3, #27
 8012d46:	d411      	bmi.n	8012d6c <__swsetup_r+0x50>
 8012d48:	2309      	movs	r3, #9
 8012d4a:	6033      	str	r3, [r6, #0]
 8012d4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d50:	81a3      	strh	r3, [r4, #12]
 8012d52:	f04f 30ff 	mov.w	r0, #4294967295
 8012d56:	e03e      	b.n	8012dd6 <__swsetup_r+0xba>
 8012d58:	4b25      	ldr	r3, [pc, #148]	; (8012df0 <__swsetup_r+0xd4>)
 8012d5a:	429c      	cmp	r4, r3
 8012d5c:	d101      	bne.n	8012d62 <__swsetup_r+0x46>
 8012d5e:	68ac      	ldr	r4, [r5, #8]
 8012d60:	e7eb      	b.n	8012d3a <__swsetup_r+0x1e>
 8012d62:	4b24      	ldr	r3, [pc, #144]	; (8012df4 <__swsetup_r+0xd8>)
 8012d64:	429c      	cmp	r4, r3
 8012d66:	bf08      	it	eq
 8012d68:	68ec      	ldreq	r4, [r5, #12]
 8012d6a:	e7e6      	b.n	8012d3a <__swsetup_r+0x1e>
 8012d6c:	0758      	lsls	r0, r3, #29
 8012d6e:	d512      	bpl.n	8012d96 <__swsetup_r+0x7a>
 8012d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d72:	b141      	cbz	r1, 8012d86 <__swsetup_r+0x6a>
 8012d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d78:	4299      	cmp	r1, r3
 8012d7a:	d002      	beq.n	8012d82 <__swsetup_r+0x66>
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	f7ff fb47 	bl	8012410 <_free_r>
 8012d82:	2300      	movs	r3, #0
 8012d84:	6363      	str	r3, [r4, #52]	; 0x34
 8012d86:	89a3      	ldrh	r3, [r4, #12]
 8012d88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012d8c:	81a3      	strh	r3, [r4, #12]
 8012d8e:	2300      	movs	r3, #0
 8012d90:	6063      	str	r3, [r4, #4]
 8012d92:	6923      	ldr	r3, [r4, #16]
 8012d94:	6023      	str	r3, [r4, #0]
 8012d96:	89a3      	ldrh	r3, [r4, #12]
 8012d98:	f043 0308 	orr.w	r3, r3, #8
 8012d9c:	81a3      	strh	r3, [r4, #12]
 8012d9e:	6923      	ldr	r3, [r4, #16]
 8012da0:	b94b      	cbnz	r3, 8012db6 <__swsetup_r+0x9a>
 8012da2:	89a3      	ldrh	r3, [r4, #12]
 8012da4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012dac:	d003      	beq.n	8012db6 <__swsetup_r+0x9a>
 8012dae:	4621      	mov	r1, r4
 8012db0:	4630      	mov	r0, r6
 8012db2:	f000 f933 	bl	801301c <__smakebuf_r>
 8012db6:	89a0      	ldrh	r0, [r4, #12]
 8012db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012dbc:	f010 0301 	ands.w	r3, r0, #1
 8012dc0:	d00a      	beq.n	8012dd8 <__swsetup_r+0xbc>
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	60a3      	str	r3, [r4, #8]
 8012dc6:	6963      	ldr	r3, [r4, #20]
 8012dc8:	425b      	negs	r3, r3
 8012dca:	61a3      	str	r3, [r4, #24]
 8012dcc:	6923      	ldr	r3, [r4, #16]
 8012dce:	b943      	cbnz	r3, 8012de2 <__swsetup_r+0xc6>
 8012dd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012dd4:	d1ba      	bne.n	8012d4c <__swsetup_r+0x30>
 8012dd6:	bd70      	pop	{r4, r5, r6, pc}
 8012dd8:	0781      	lsls	r1, r0, #30
 8012dda:	bf58      	it	pl
 8012ddc:	6963      	ldrpl	r3, [r4, #20]
 8012dde:	60a3      	str	r3, [r4, #8]
 8012de0:	e7f4      	b.n	8012dcc <__swsetup_r+0xb0>
 8012de2:	2000      	movs	r0, #0
 8012de4:	e7f7      	b.n	8012dd6 <__swsetup_r+0xba>
 8012de6:	bf00      	nop
 8012de8:	24000030 	.word	0x24000030
 8012dec:	08015f7c 	.word	0x08015f7c
 8012df0:	08015f9c 	.word	0x08015f9c
 8012df4:	08015f5c 	.word	0x08015f5c

08012df8 <abort>:
 8012df8:	b508      	push	{r3, lr}
 8012dfa:	2006      	movs	r0, #6
 8012dfc:	f000 f994 	bl	8013128 <raise>
 8012e00:	2001      	movs	r0, #1
 8012e02:	f7ee f87b 	bl	8000efc <_exit>
	...

08012e08 <_close_r>:
 8012e08:	b538      	push	{r3, r4, r5, lr}
 8012e0a:	4d06      	ldr	r5, [pc, #24]	; (8012e24 <_close_r+0x1c>)
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	4604      	mov	r4, r0
 8012e10:	4608      	mov	r0, r1
 8012e12:	602b      	str	r3, [r5, #0]
 8012e14:	f7ee f8b5 	bl	8000f82 <_close>
 8012e18:	1c43      	adds	r3, r0, #1
 8012e1a:	d102      	bne.n	8012e22 <_close_r+0x1a>
 8012e1c:	682b      	ldr	r3, [r5, #0]
 8012e1e:	b103      	cbz	r3, 8012e22 <_close_r+0x1a>
 8012e20:	6023      	str	r3, [r4, #0]
 8012e22:	bd38      	pop	{r3, r4, r5, pc}
 8012e24:	240081b8 	.word	0x240081b8

08012e28 <__sflush_r>:
 8012e28:	898a      	ldrh	r2, [r1, #12]
 8012e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e2e:	4605      	mov	r5, r0
 8012e30:	0710      	lsls	r0, r2, #28
 8012e32:	460c      	mov	r4, r1
 8012e34:	d458      	bmi.n	8012ee8 <__sflush_r+0xc0>
 8012e36:	684b      	ldr	r3, [r1, #4]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	dc05      	bgt.n	8012e48 <__sflush_r+0x20>
 8012e3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	dc02      	bgt.n	8012e48 <__sflush_r+0x20>
 8012e42:	2000      	movs	r0, #0
 8012e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e4a:	2e00      	cmp	r6, #0
 8012e4c:	d0f9      	beq.n	8012e42 <__sflush_r+0x1a>
 8012e4e:	2300      	movs	r3, #0
 8012e50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e54:	682f      	ldr	r7, [r5, #0]
 8012e56:	602b      	str	r3, [r5, #0]
 8012e58:	d032      	beq.n	8012ec0 <__sflush_r+0x98>
 8012e5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e5c:	89a3      	ldrh	r3, [r4, #12]
 8012e5e:	075a      	lsls	r2, r3, #29
 8012e60:	d505      	bpl.n	8012e6e <__sflush_r+0x46>
 8012e62:	6863      	ldr	r3, [r4, #4]
 8012e64:	1ac0      	subs	r0, r0, r3
 8012e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e68:	b10b      	cbz	r3, 8012e6e <__sflush_r+0x46>
 8012e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e6c:	1ac0      	subs	r0, r0, r3
 8012e6e:	2300      	movs	r3, #0
 8012e70:	4602      	mov	r2, r0
 8012e72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e74:	6a21      	ldr	r1, [r4, #32]
 8012e76:	4628      	mov	r0, r5
 8012e78:	47b0      	blx	r6
 8012e7a:	1c43      	adds	r3, r0, #1
 8012e7c:	89a3      	ldrh	r3, [r4, #12]
 8012e7e:	d106      	bne.n	8012e8e <__sflush_r+0x66>
 8012e80:	6829      	ldr	r1, [r5, #0]
 8012e82:	291d      	cmp	r1, #29
 8012e84:	d82c      	bhi.n	8012ee0 <__sflush_r+0xb8>
 8012e86:	4a2a      	ldr	r2, [pc, #168]	; (8012f30 <__sflush_r+0x108>)
 8012e88:	40ca      	lsrs	r2, r1
 8012e8a:	07d6      	lsls	r6, r2, #31
 8012e8c:	d528      	bpl.n	8012ee0 <__sflush_r+0xb8>
 8012e8e:	2200      	movs	r2, #0
 8012e90:	6062      	str	r2, [r4, #4]
 8012e92:	04d9      	lsls	r1, r3, #19
 8012e94:	6922      	ldr	r2, [r4, #16]
 8012e96:	6022      	str	r2, [r4, #0]
 8012e98:	d504      	bpl.n	8012ea4 <__sflush_r+0x7c>
 8012e9a:	1c42      	adds	r2, r0, #1
 8012e9c:	d101      	bne.n	8012ea2 <__sflush_r+0x7a>
 8012e9e:	682b      	ldr	r3, [r5, #0]
 8012ea0:	b903      	cbnz	r3, 8012ea4 <__sflush_r+0x7c>
 8012ea2:	6560      	str	r0, [r4, #84]	; 0x54
 8012ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ea6:	602f      	str	r7, [r5, #0]
 8012ea8:	2900      	cmp	r1, #0
 8012eaa:	d0ca      	beq.n	8012e42 <__sflush_r+0x1a>
 8012eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012eb0:	4299      	cmp	r1, r3
 8012eb2:	d002      	beq.n	8012eba <__sflush_r+0x92>
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	f7ff faab 	bl	8012410 <_free_r>
 8012eba:	2000      	movs	r0, #0
 8012ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8012ebe:	e7c1      	b.n	8012e44 <__sflush_r+0x1c>
 8012ec0:	6a21      	ldr	r1, [r4, #32]
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	47b0      	blx	r6
 8012ec8:	1c41      	adds	r1, r0, #1
 8012eca:	d1c7      	bne.n	8012e5c <__sflush_r+0x34>
 8012ecc:	682b      	ldr	r3, [r5, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d0c4      	beq.n	8012e5c <__sflush_r+0x34>
 8012ed2:	2b1d      	cmp	r3, #29
 8012ed4:	d001      	beq.n	8012eda <__sflush_r+0xb2>
 8012ed6:	2b16      	cmp	r3, #22
 8012ed8:	d101      	bne.n	8012ede <__sflush_r+0xb6>
 8012eda:	602f      	str	r7, [r5, #0]
 8012edc:	e7b1      	b.n	8012e42 <__sflush_r+0x1a>
 8012ede:	89a3      	ldrh	r3, [r4, #12]
 8012ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ee4:	81a3      	strh	r3, [r4, #12]
 8012ee6:	e7ad      	b.n	8012e44 <__sflush_r+0x1c>
 8012ee8:	690f      	ldr	r7, [r1, #16]
 8012eea:	2f00      	cmp	r7, #0
 8012eec:	d0a9      	beq.n	8012e42 <__sflush_r+0x1a>
 8012eee:	0793      	lsls	r3, r2, #30
 8012ef0:	680e      	ldr	r6, [r1, #0]
 8012ef2:	bf08      	it	eq
 8012ef4:	694b      	ldreq	r3, [r1, #20]
 8012ef6:	600f      	str	r7, [r1, #0]
 8012ef8:	bf18      	it	ne
 8012efa:	2300      	movne	r3, #0
 8012efc:	eba6 0807 	sub.w	r8, r6, r7
 8012f00:	608b      	str	r3, [r1, #8]
 8012f02:	f1b8 0f00 	cmp.w	r8, #0
 8012f06:	dd9c      	ble.n	8012e42 <__sflush_r+0x1a>
 8012f08:	6a21      	ldr	r1, [r4, #32]
 8012f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f0c:	4643      	mov	r3, r8
 8012f0e:	463a      	mov	r2, r7
 8012f10:	4628      	mov	r0, r5
 8012f12:	47b0      	blx	r6
 8012f14:	2800      	cmp	r0, #0
 8012f16:	dc06      	bgt.n	8012f26 <__sflush_r+0xfe>
 8012f18:	89a3      	ldrh	r3, [r4, #12]
 8012f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f1e:	81a3      	strh	r3, [r4, #12]
 8012f20:	f04f 30ff 	mov.w	r0, #4294967295
 8012f24:	e78e      	b.n	8012e44 <__sflush_r+0x1c>
 8012f26:	4407      	add	r7, r0
 8012f28:	eba8 0800 	sub.w	r8, r8, r0
 8012f2c:	e7e9      	b.n	8012f02 <__sflush_r+0xda>
 8012f2e:	bf00      	nop
 8012f30:	20400001 	.word	0x20400001

08012f34 <_fflush_r>:
 8012f34:	b538      	push	{r3, r4, r5, lr}
 8012f36:	690b      	ldr	r3, [r1, #16]
 8012f38:	4605      	mov	r5, r0
 8012f3a:	460c      	mov	r4, r1
 8012f3c:	b913      	cbnz	r3, 8012f44 <_fflush_r+0x10>
 8012f3e:	2500      	movs	r5, #0
 8012f40:	4628      	mov	r0, r5
 8012f42:	bd38      	pop	{r3, r4, r5, pc}
 8012f44:	b118      	cbz	r0, 8012f4e <_fflush_r+0x1a>
 8012f46:	6983      	ldr	r3, [r0, #24]
 8012f48:	b90b      	cbnz	r3, 8012f4e <_fflush_r+0x1a>
 8012f4a:	f7ff f9a7 	bl	801229c <__sinit>
 8012f4e:	4b14      	ldr	r3, [pc, #80]	; (8012fa0 <_fflush_r+0x6c>)
 8012f50:	429c      	cmp	r4, r3
 8012f52:	d11b      	bne.n	8012f8c <_fflush_r+0x58>
 8012f54:	686c      	ldr	r4, [r5, #4]
 8012f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d0ef      	beq.n	8012f3e <_fflush_r+0xa>
 8012f5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f60:	07d0      	lsls	r0, r2, #31
 8012f62:	d404      	bmi.n	8012f6e <_fflush_r+0x3a>
 8012f64:	0599      	lsls	r1, r3, #22
 8012f66:	d402      	bmi.n	8012f6e <_fflush_r+0x3a>
 8012f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f6a:	f7ff fa47 	bl	80123fc <__retarget_lock_acquire_recursive>
 8012f6e:	4628      	mov	r0, r5
 8012f70:	4621      	mov	r1, r4
 8012f72:	f7ff ff59 	bl	8012e28 <__sflush_r>
 8012f76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f78:	07da      	lsls	r2, r3, #31
 8012f7a:	4605      	mov	r5, r0
 8012f7c:	d4e0      	bmi.n	8012f40 <_fflush_r+0xc>
 8012f7e:	89a3      	ldrh	r3, [r4, #12]
 8012f80:	059b      	lsls	r3, r3, #22
 8012f82:	d4dd      	bmi.n	8012f40 <_fflush_r+0xc>
 8012f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f86:	f7ff fa3a 	bl	80123fe <__retarget_lock_release_recursive>
 8012f8a:	e7d9      	b.n	8012f40 <_fflush_r+0xc>
 8012f8c:	4b05      	ldr	r3, [pc, #20]	; (8012fa4 <_fflush_r+0x70>)
 8012f8e:	429c      	cmp	r4, r3
 8012f90:	d101      	bne.n	8012f96 <_fflush_r+0x62>
 8012f92:	68ac      	ldr	r4, [r5, #8]
 8012f94:	e7df      	b.n	8012f56 <_fflush_r+0x22>
 8012f96:	4b04      	ldr	r3, [pc, #16]	; (8012fa8 <_fflush_r+0x74>)
 8012f98:	429c      	cmp	r4, r3
 8012f9a:	bf08      	it	eq
 8012f9c:	68ec      	ldreq	r4, [r5, #12]
 8012f9e:	e7da      	b.n	8012f56 <_fflush_r+0x22>
 8012fa0:	08015f7c 	.word	0x08015f7c
 8012fa4:	08015f9c 	.word	0x08015f9c
 8012fa8:	08015f5c 	.word	0x08015f5c

08012fac <_lseek_r>:
 8012fac:	b538      	push	{r3, r4, r5, lr}
 8012fae:	4d07      	ldr	r5, [pc, #28]	; (8012fcc <_lseek_r+0x20>)
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	4608      	mov	r0, r1
 8012fb4:	4611      	mov	r1, r2
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	602a      	str	r2, [r5, #0]
 8012fba:	461a      	mov	r2, r3
 8012fbc:	f7ee f808 	bl	8000fd0 <_lseek>
 8012fc0:	1c43      	adds	r3, r0, #1
 8012fc2:	d102      	bne.n	8012fca <_lseek_r+0x1e>
 8012fc4:	682b      	ldr	r3, [r5, #0]
 8012fc6:	b103      	cbz	r3, 8012fca <_lseek_r+0x1e>
 8012fc8:	6023      	str	r3, [r4, #0]
 8012fca:	bd38      	pop	{r3, r4, r5, pc}
 8012fcc:	240081b8 	.word	0x240081b8

08012fd0 <__swhatbuf_r>:
 8012fd0:	b570      	push	{r4, r5, r6, lr}
 8012fd2:	460e      	mov	r6, r1
 8012fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fd8:	2900      	cmp	r1, #0
 8012fda:	b096      	sub	sp, #88	; 0x58
 8012fdc:	4614      	mov	r4, r2
 8012fde:	461d      	mov	r5, r3
 8012fe0:	da08      	bge.n	8012ff4 <__swhatbuf_r+0x24>
 8012fe2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	602a      	str	r2, [r5, #0]
 8012fea:	061a      	lsls	r2, r3, #24
 8012fec:	d410      	bmi.n	8013010 <__swhatbuf_r+0x40>
 8012fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ff2:	e00e      	b.n	8013012 <__swhatbuf_r+0x42>
 8012ff4:	466a      	mov	r2, sp
 8012ff6:	f000 f8b3 	bl	8013160 <_fstat_r>
 8012ffa:	2800      	cmp	r0, #0
 8012ffc:	dbf1      	blt.n	8012fe2 <__swhatbuf_r+0x12>
 8012ffe:	9a01      	ldr	r2, [sp, #4]
 8013000:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013004:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013008:	425a      	negs	r2, r3
 801300a:	415a      	adcs	r2, r3
 801300c:	602a      	str	r2, [r5, #0]
 801300e:	e7ee      	b.n	8012fee <__swhatbuf_r+0x1e>
 8013010:	2340      	movs	r3, #64	; 0x40
 8013012:	2000      	movs	r0, #0
 8013014:	6023      	str	r3, [r4, #0]
 8013016:	b016      	add	sp, #88	; 0x58
 8013018:	bd70      	pop	{r4, r5, r6, pc}
	...

0801301c <__smakebuf_r>:
 801301c:	898b      	ldrh	r3, [r1, #12]
 801301e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013020:	079d      	lsls	r5, r3, #30
 8013022:	4606      	mov	r6, r0
 8013024:	460c      	mov	r4, r1
 8013026:	d507      	bpl.n	8013038 <__smakebuf_r+0x1c>
 8013028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801302c:	6023      	str	r3, [r4, #0]
 801302e:	6123      	str	r3, [r4, #16]
 8013030:	2301      	movs	r3, #1
 8013032:	6163      	str	r3, [r4, #20]
 8013034:	b002      	add	sp, #8
 8013036:	bd70      	pop	{r4, r5, r6, pc}
 8013038:	ab01      	add	r3, sp, #4
 801303a:	466a      	mov	r2, sp
 801303c:	f7ff ffc8 	bl	8012fd0 <__swhatbuf_r>
 8013040:	9900      	ldr	r1, [sp, #0]
 8013042:	4605      	mov	r5, r0
 8013044:	4630      	mov	r0, r6
 8013046:	f7ff fa4f 	bl	80124e8 <_malloc_r>
 801304a:	b948      	cbnz	r0, 8013060 <__smakebuf_r+0x44>
 801304c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013050:	059a      	lsls	r2, r3, #22
 8013052:	d4ef      	bmi.n	8013034 <__smakebuf_r+0x18>
 8013054:	f023 0303 	bic.w	r3, r3, #3
 8013058:	f043 0302 	orr.w	r3, r3, #2
 801305c:	81a3      	strh	r3, [r4, #12]
 801305e:	e7e3      	b.n	8013028 <__smakebuf_r+0xc>
 8013060:	4b0d      	ldr	r3, [pc, #52]	; (8013098 <__smakebuf_r+0x7c>)
 8013062:	62b3      	str	r3, [r6, #40]	; 0x28
 8013064:	89a3      	ldrh	r3, [r4, #12]
 8013066:	6020      	str	r0, [r4, #0]
 8013068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801306c:	81a3      	strh	r3, [r4, #12]
 801306e:	9b00      	ldr	r3, [sp, #0]
 8013070:	6163      	str	r3, [r4, #20]
 8013072:	9b01      	ldr	r3, [sp, #4]
 8013074:	6120      	str	r0, [r4, #16]
 8013076:	b15b      	cbz	r3, 8013090 <__smakebuf_r+0x74>
 8013078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801307c:	4630      	mov	r0, r6
 801307e:	f000 f881 	bl	8013184 <_isatty_r>
 8013082:	b128      	cbz	r0, 8013090 <__smakebuf_r+0x74>
 8013084:	89a3      	ldrh	r3, [r4, #12]
 8013086:	f023 0303 	bic.w	r3, r3, #3
 801308a:	f043 0301 	orr.w	r3, r3, #1
 801308e:	81a3      	strh	r3, [r4, #12]
 8013090:	89a0      	ldrh	r0, [r4, #12]
 8013092:	4305      	orrs	r5, r0
 8013094:	81a5      	strh	r5, [r4, #12]
 8013096:	e7cd      	b.n	8013034 <__smakebuf_r+0x18>
 8013098:	08012235 	.word	0x08012235

0801309c <__malloc_lock>:
 801309c:	4801      	ldr	r0, [pc, #4]	; (80130a4 <__malloc_lock+0x8>)
 801309e:	f7ff b9ad 	b.w	80123fc <__retarget_lock_acquire_recursive>
 80130a2:	bf00      	nop
 80130a4:	240081bc 	.word	0x240081bc

080130a8 <__malloc_unlock>:
 80130a8:	4801      	ldr	r0, [pc, #4]	; (80130b0 <__malloc_unlock+0x8>)
 80130aa:	f7ff b9a8 	b.w	80123fe <__retarget_lock_release_recursive>
 80130ae:	bf00      	nop
 80130b0:	240081bc 	.word	0x240081bc

080130b4 <_read_r>:
 80130b4:	b538      	push	{r3, r4, r5, lr}
 80130b6:	4d07      	ldr	r5, [pc, #28]	; (80130d4 <_read_r+0x20>)
 80130b8:	4604      	mov	r4, r0
 80130ba:	4608      	mov	r0, r1
 80130bc:	4611      	mov	r1, r2
 80130be:	2200      	movs	r2, #0
 80130c0:	602a      	str	r2, [r5, #0]
 80130c2:	461a      	mov	r2, r3
 80130c4:	f7ed ff24 	bl	8000f10 <_read>
 80130c8:	1c43      	adds	r3, r0, #1
 80130ca:	d102      	bne.n	80130d2 <_read_r+0x1e>
 80130cc:	682b      	ldr	r3, [r5, #0]
 80130ce:	b103      	cbz	r3, 80130d2 <_read_r+0x1e>
 80130d0:	6023      	str	r3, [r4, #0]
 80130d2:	bd38      	pop	{r3, r4, r5, pc}
 80130d4:	240081b8 	.word	0x240081b8

080130d8 <_raise_r>:
 80130d8:	291f      	cmp	r1, #31
 80130da:	b538      	push	{r3, r4, r5, lr}
 80130dc:	4604      	mov	r4, r0
 80130de:	460d      	mov	r5, r1
 80130e0:	d904      	bls.n	80130ec <_raise_r+0x14>
 80130e2:	2316      	movs	r3, #22
 80130e4:	6003      	str	r3, [r0, #0]
 80130e6:	f04f 30ff 	mov.w	r0, #4294967295
 80130ea:	bd38      	pop	{r3, r4, r5, pc}
 80130ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80130ee:	b112      	cbz	r2, 80130f6 <_raise_r+0x1e>
 80130f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80130f4:	b94b      	cbnz	r3, 801310a <_raise_r+0x32>
 80130f6:	4620      	mov	r0, r4
 80130f8:	f000 f830 	bl	801315c <_getpid_r>
 80130fc:	462a      	mov	r2, r5
 80130fe:	4601      	mov	r1, r0
 8013100:	4620      	mov	r0, r4
 8013102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013106:	f000 b817 	b.w	8013138 <_kill_r>
 801310a:	2b01      	cmp	r3, #1
 801310c:	d00a      	beq.n	8013124 <_raise_r+0x4c>
 801310e:	1c59      	adds	r1, r3, #1
 8013110:	d103      	bne.n	801311a <_raise_r+0x42>
 8013112:	2316      	movs	r3, #22
 8013114:	6003      	str	r3, [r0, #0]
 8013116:	2001      	movs	r0, #1
 8013118:	e7e7      	b.n	80130ea <_raise_r+0x12>
 801311a:	2400      	movs	r4, #0
 801311c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013120:	4628      	mov	r0, r5
 8013122:	4798      	blx	r3
 8013124:	2000      	movs	r0, #0
 8013126:	e7e0      	b.n	80130ea <_raise_r+0x12>

08013128 <raise>:
 8013128:	4b02      	ldr	r3, [pc, #8]	; (8013134 <raise+0xc>)
 801312a:	4601      	mov	r1, r0
 801312c:	6818      	ldr	r0, [r3, #0]
 801312e:	f7ff bfd3 	b.w	80130d8 <_raise_r>
 8013132:	bf00      	nop
 8013134:	24000030 	.word	0x24000030

08013138 <_kill_r>:
 8013138:	b538      	push	{r3, r4, r5, lr}
 801313a:	4d07      	ldr	r5, [pc, #28]	; (8013158 <_kill_r+0x20>)
 801313c:	2300      	movs	r3, #0
 801313e:	4604      	mov	r4, r0
 8013140:	4608      	mov	r0, r1
 8013142:	4611      	mov	r1, r2
 8013144:	602b      	str	r3, [r5, #0]
 8013146:	f7ed fec7 	bl	8000ed8 <_kill>
 801314a:	1c43      	adds	r3, r0, #1
 801314c:	d102      	bne.n	8013154 <_kill_r+0x1c>
 801314e:	682b      	ldr	r3, [r5, #0]
 8013150:	b103      	cbz	r3, 8013154 <_kill_r+0x1c>
 8013152:	6023      	str	r3, [r4, #0]
 8013154:	bd38      	pop	{r3, r4, r5, pc}
 8013156:	bf00      	nop
 8013158:	240081b8 	.word	0x240081b8

0801315c <_getpid_r>:
 801315c:	f7ed beb4 	b.w	8000ec8 <_getpid>

08013160 <_fstat_r>:
 8013160:	b538      	push	{r3, r4, r5, lr}
 8013162:	4d07      	ldr	r5, [pc, #28]	; (8013180 <_fstat_r+0x20>)
 8013164:	2300      	movs	r3, #0
 8013166:	4604      	mov	r4, r0
 8013168:	4608      	mov	r0, r1
 801316a:	4611      	mov	r1, r2
 801316c:	602b      	str	r3, [r5, #0]
 801316e:	f7ed ff14 	bl	8000f9a <_fstat>
 8013172:	1c43      	adds	r3, r0, #1
 8013174:	d102      	bne.n	801317c <_fstat_r+0x1c>
 8013176:	682b      	ldr	r3, [r5, #0]
 8013178:	b103      	cbz	r3, 801317c <_fstat_r+0x1c>
 801317a:	6023      	str	r3, [r4, #0]
 801317c:	bd38      	pop	{r3, r4, r5, pc}
 801317e:	bf00      	nop
 8013180:	240081b8 	.word	0x240081b8

08013184 <_isatty_r>:
 8013184:	b538      	push	{r3, r4, r5, lr}
 8013186:	4d06      	ldr	r5, [pc, #24]	; (80131a0 <_isatty_r+0x1c>)
 8013188:	2300      	movs	r3, #0
 801318a:	4604      	mov	r4, r0
 801318c:	4608      	mov	r0, r1
 801318e:	602b      	str	r3, [r5, #0]
 8013190:	f7ed ff13 	bl	8000fba <_isatty>
 8013194:	1c43      	adds	r3, r0, #1
 8013196:	d102      	bne.n	801319e <_isatty_r+0x1a>
 8013198:	682b      	ldr	r3, [r5, #0]
 801319a:	b103      	cbz	r3, 801319e <_isatty_r+0x1a>
 801319c:	6023      	str	r3, [r4, #0]
 801319e:	bd38      	pop	{r3, r4, r5, pc}
 80131a0:	240081b8 	.word	0x240081b8

080131a4 <_init>:
 80131a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131a6:	bf00      	nop
 80131a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131aa:	bc08      	pop	{r3}
 80131ac:	469e      	mov	lr, r3
 80131ae:	4770      	bx	lr

080131b0 <_fini>:
 80131b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131b2:	bf00      	nop
 80131b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131b6:	bc08      	pop	{r3}
 80131b8:	469e      	mov	lr, r3
 80131ba:	4770      	bx	lr
