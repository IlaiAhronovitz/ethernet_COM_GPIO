
LWIPPING_PC_TO_ST_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122bc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ec8  0801255c  0801255c  0002255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015424  08015424  00025424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801542c  0801542c  0002542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015430  08015430  00025430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08015434  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008114  2400007c  080154b0  0003007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24008190  080154b0  00038190  2**0
                  ALLOC
  9 .lwip_sec     00000200  30040000  080154b0  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002945f  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005e3c  00000000  00000000  00059509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ae0  00000000  00000000  0005f348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001a10  00000000  00000000  00060e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000463f0  00000000  00000000  00062838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002e6da  00000000  00000000  000a8c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00190e00  00000000  00000000  000d7302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00268102  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007858  00000000  00000000  00268154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012544 	.word	0x08012544

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	08012544 	.word	0x08012544

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d013      	beq.n	80007f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00b      	beq.n	80007f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007d8:	e000      	b.n	80007dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80007da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f9      	beq.n	80007da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	GPIO_Config();
 8000806:	f000 fa25 	bl	8000c54 <GPIO_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  //int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800080a:	f000 fa73 	bl	8000cf4 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800080e:	4b51      	ldr	r3, [pc, #324]	; (8000954 <main+0x154>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000816:	2b00      	cmp	r3, #0
 8000818:	d11b      	bne.n	8000852 <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800081a:	f3bf 8f4f 	dsb	sy
}
 800081e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000820:	f3bf 8f6f 	isb	sy
}
 8000824:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000826:	4b4b      	ldr	r3, [pc, #300]	; (8000954 <main+0x154>)
 8000828:	2200      	movs	r2, #0
 800082a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800082e:	f3bf 8f4f 	dsb	sy
}
 8000832:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000834:	f3bf 8f6f 	isb	sy
}
 8000838:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800083a:	4b46      	ldr	r3, [pc, #280]	; (8000954 <main+0x154>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a45      	ldr	r2, [pc, #276]	; (8000954 <main+0x154>)
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000846:	f3bf 8f4f 	dsb	sy
}
 800084a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800084c:	f3bf 8f6f 	isb	sy
}
 8000850:	e000      	b.n	8000854 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000852:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000854:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <main+0x154>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d138      	bne.n	80008d2 <main+0xd2>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000860:	4b3c      	ldr	r3, [pc, #240]	; (8000954 <main+0x154>)
 8000862:	2200      	movs	r2, #0
 8000864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000868:	f3bf 8f4f 	dsb	sy
}
 800086c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <main+0x154>)
 8000870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000874:	60bb      	str	r3, [r7, #8]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	0b5b      	lsrs	r3, r3, #13
 800087a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800087e:	607b      	str	r3, [r7, #4]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000888:	603b      	str	r3, [r7, #0]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	015a      	lsls	r2, r3, #5
 800088e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000892:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000898:	492e      	ldr	r1, [pc, #184]	; (8000954 <main+0x154>)
 800089a:	4313      	orrs	r3, r2
 800089c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	1e5a      	subs	r2, r3, #1
 80008a4:	603a      	str	r2, [r7, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1ef      	bne.n	800088a <main+0x8a>
    } while(sets-- != 0U);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1e5      	bne.n	8000880 <main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 80008b4:	f3bf 8f4f 	dsb	sy
}
 80008b8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <main+0x154>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <main+0x154>)
 80008c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
}
 80008ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008cc:	f3bf 8f6f 	isb	sy
}
 80008d0:	e000      	b.n	80008d4 <main+0xd4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008d2:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d4:	f000 fc66 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f83e 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 f938 	bl	8000b50 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008e0:	f000 f8b8 	bl	8000a54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008e4:	f000 f902 	bl	8000aec <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80008e8:	f006 fc68 	bl	80071bc <MX_LWIP_Init>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <main+0x154>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008f4:	f3bf 8f4f 	dsb	sy
}
 80008f8:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <main+0x154>)
 80008fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000900:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	0b5b      	lsrs	r3, r3, #13
 8000906:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800090a:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000914:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	015a      	lsls	r2, r3, #5
 800091a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800091e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000924:	490b      	ldr	r1, [pc, #44]	; (8000954 <main+0x154>)
 8000926:	4313      	orrs	r3, r2
 8000928:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	1e5a      	subs	r2, r3, #1
 8000930:	60fa      	str	r2, [r7, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1ef      	bne.n	8000916 <main+0x116>
    } while(sets-- != 0U);
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	1e5a      	subs	r2, r3, #1
 800093a:	613a      	str	r2, [r7, #16]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1e5      	bne.n	800090c <main+0x10c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000940:	f3bf 8f4f 	dsb	sy
}
 8000944:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000946:	f3bf 8f6f 	isb	sy
}
 800094a:	bf00      	nop
}
 800094c:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //etharp_input(r, &gnetif);

	  MX_LWIP_Process();
 800094e:	f006 fd81 	bl	8007454 <MX_LWIP_Process>
 8000952:	e7fc      	b.n	800094e <main+0x14e>
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09c      	sub	sp, #112	; 0x70
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	224c      	movs	r2, #76	; 0x4c
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f010 fd94 	bl	8011494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2220      	movs	r2, #32
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f010 fd8e 	bl	8011494 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000978:	2004      	movs	r0, #4
 800097a:	f002 f9c3 	bl	8002d04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <SystemClock_Config+0xf4>)
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	4a31      	ldr	r2, [pc, #196]	; (8000a4c <SystemClock_Config+0xf4>)
 8000988:	f023 0301 	bic.w	r3, r3, #1
 800098c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800098e:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <SystemClock_Config+0xf4>)
 8000990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <SystemClock_Config+0xf8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009a0:	4a2b      	ldr	r2, [pc, #172]	; (8000a50 <SystemClock_Config+0xf8>)
 80009a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <SystemClock_Config+0xf8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009b4:	bf00      	nop
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <SystemClock_Config+0xf8>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009c2:	d1f8      	bne.n	80009b6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	2302      	movs	r3, #2
 80009d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80009da:	2312      	movs	r3, #18
 80009dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009de:	2302      	movs	r3, #2
 80009e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009ea:	230c      	movs	r3, #12
 80009ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009ee:	2302      	movs	r3, #2
 80009f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80009f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 f9eb 	bl	8002dd8 <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a08:	f000 f9b4 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	233f      	movs	r3, #63	; 0x3f
 8000a0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a10:	2303      	movs	r3, #3
 8000a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a28:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2101      	movs	r1, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fe2a 	bl	800368c <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a3e:	f000 f999 	bl	8000d74 <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3770      	adds	r7, #112	; 0x70
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	58000400 	.word	0x58000400
 8000a50:	58024800 	.word	0x58024800

08000a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <MX_USART3_UART_Init+0x94>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f004 ffad 	bl	80059fc <HAL_UART_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa8:	f000 f964 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f005 ffaf 	bl	8006a12 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aba:	f000 f95b 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f005 ffe4 	bl	8006a8e <HAL_UARTEx_SetRxFifoThreshold>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000acc:	f000 f952 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f005 ff65 	bl	80069a0 <HAL_UARTEx_DisableFifoMode>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 f94a 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	24000098 	.word	0x24000098
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000af4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af8:	2209      	movs	r2, #9
 8000afa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b34:	f001 ff9e 	bl	8002a74 <HAL_PCD_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b3e:	f000 f919 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2400012c 	.word	0x2400012c
 8000b4c:	40080000 	.word	0x40080000

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b087      	sub	sp, #28
 8000b54:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	4a27      	ldr	r2, [pc, #156]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0a:	bf00      	nop
 8000c0c:	371c      	adds	r7, #28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	58024400 	.word	0x58024400

08000c1c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	int var;
	for (var = 0; var < len; ++var) {
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	e009      	b.n	8000c42 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	60ba      	str	r2, [r7, #8]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fdba 	bl	80007b0 <ITM_SendChar>
	for (var = 0; var < len; ++var) {
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	dbf1      	blt.n	8000c2e <_write+0x12>
	}
	return len;
 8000c4a:	687b      	ldr	r3, [r7, #4]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <GPIO_Config>:

void GPIO_Config(void){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <GPIO_Config+0x94>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <GPIO_Config+0x94>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <GPIO_Config+0x94>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <GPIO_Config+0x94>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <GPIO_Config+0x94>)
 8000c80:	f043 0310 	orr.w	r3, r3, #16
 8000c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <GPIO_Config+0x94>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	f003 0310 	and.w	r3, r3, #16
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOB_init = {};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
	GPIOB_init.Pin = GPIO_PIN_0;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61fb      	str	r3, [r7, #28]
	GPIOB_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIOB_init);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <GPIO_Config+0x98>)
 8000cb6:	f001 fd2d 	bl	8002714 <HAL_GPIO_Init>

	GPIO_InitTypeDef GPIOE_init = {};
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
		GPIOE_init.Pin = GPIO_PIN_1;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	60bb      	str	r3, [r7, #8]
		GPIOE_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(GPIOE, &GPIOE_init);
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <GPIO_Config+0x9c>)
 8000cda:	f001 fd1b 	bl	8002714 <HAL_GPIO_Init>

}
 8000cde:	bf00      	nop
 8000ce0:	3730      	adds	r7, #48	; 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58020400 	.word	0x58020400
 8000cf0:	58021000 	.word	0x58021000

08000cf4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d06:	f000 fc07 	bl	8001518 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MPU_Config+0x78>)
 8000d14:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000d16:	2307      	movs	r3, #7
 8000d18:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d22:	2303      	movs	r3, #3
 8000d24:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d36:	463b      	mov	r3, r7
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fc25 	bl	8001588 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MPU_Config+0x7c>)
 8000d44:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000d46:	230d      	movs	r3, #13
 8000d48:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d56:	463b      	mov	r3, r7
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fc15 	bl	8001588 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f000 fbf2 	bl	8001548 <HAL_MPU_Enable>

}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	30040000 	.word	0x30040000
 8000d70:	30044000 	.word	0x30044000

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_MspInit+0x30>)
 8000d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x30>)
 8000d8e:	f043 0302 	orr.w	r3, r3, #2
 8000d92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x30>)
 8000d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	58024400 	.word	0x58024400

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0ba      	sub	sp, #232	; 0xe8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	22c0      	movs	r2, #192	; 0xc0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f010 fb5d 	bl	8011494 <memset>
  if(huart->Instance==USART3)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a27      	ldr	r2, [pc, #156]	; (8000e7c <HAL_UART_MspInit+0xc8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d146      	bne.n	8000e72 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de4:	f04f 0202 	mov.w	r2, #2
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 ffd2 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e06:	f7ff ffb5 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e60:	2307      	movs	r3, #7
 8000e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_UART_MspInit+0xd0>)
 8000e6e:	f001 fc51 	bl	8002714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	37e8      	adds	r7, #232	; 0xe8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40004800 	.word	0x40004800
 8000e80:	58024400 	.word	0x58024400
 8000e84:	58020c00 	.word	0x58020c00

08000e88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ba      	sub	sp, #232	; 0xe8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	22c0      	movs	r2, #192	; 0xc0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f010 faf3 	bl	8011494 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a38      	ldr	r2, [pc, #224]	; (8000f94 <HAL_PCD_MspInit+0x10c>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d169      	bne.n	8000f8c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000eb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000ec8:	2312      	movs	r3, #18
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000ed8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000edc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000ede:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ee4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 ff57 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000efc:	f7ff ff3a 	bl	8000d74 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f00:	f001 ff5a 	bl	8002db8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f22:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4814      	ldr	r0, [pc, #80]	; (8000f9c <HAL_PCD_MspInit+0x114>)
 8000f4a:	f001 fbe3 	bl	8002714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f66:	4619      	mov	r1, r3
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <HAL_PCD_MspInit+0x114>)
 8000f6a:	f001 fbd3 	bl	8002714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f74:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	37e8      	adds	r7, #232	; 0xe8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40080000 	.word	0x40080000
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020000 	.word	0x58020000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f94c 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return 1;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_kill>:

int _kill(int pid, int sig)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <_kill+0x20>)
 8001010:	2216      	movs	r2, #22
 8001012:	601a      	str	r2, [r3, #0]
  return -1;
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	24008180 	.word	0x24008180

08001028 <_exit>:

void _exit (int status)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffe5 	bl	8001004 <_kill>
  while (1) {}    /* Make sure we hang here */
 800103a:	e7fe      	b.n	800103a <_exit+0x12>

0800103c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e00a      	b.n	8001064 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104e:	f3af 8000 	nop.w
 8001052:	4601      	mov	r1, r0
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	b2ca      	uxtb	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf0      	blt.n	800104e <_read+0x12>
  }

  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800109e:	605a      	str	r2, [r3, #4]
  return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_isatty>:

int _isatty(int file)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d205      	bcs.n	800111c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <_sbrk+0x6c>)
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a06      	ldr	r2, [pc, #24]	; (8001144 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	371c      	adds	r7, #28
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	24080000 	.word	0x24080000
 8001140:	00000400 	.word	0x00000400
 8001144:	24000638 	.word	0x24000638
 8001148:	24008190 	.word	0x24008190
 800114c:	24008180 	.word	0x24008180

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001188 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001154:	f7ff fa96 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117e:	f010 f947 	bl	8011410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff fb3d 	bl	8000800 <main>
  bx  lr
 8001186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800118c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001190:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001194:	08015434 	.word	0x08015434
  ldr r2, =_sbss
 8001198:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 800119c:	24008190 	.word	0x24008190

080011a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC3_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011aa:	2003      	movs	r0, #3
 80011ac:	f000 f982 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011b0:	f002 fc22 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 80011b4:	4602      	mov	r2, r0
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_Init+0x68>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	4913      	ldr	r1, [pc, #76]	; (8001210 <HAL_Init+0x6c>)
 80011c2:	5ccb      	ldrb	r3, [r1, r3]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
 80011cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_Init+0x68>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_Init+0x6c>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_Init+0x70>)
 80011e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011e8:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HAL_Init+0x74>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f814 	bl	800121c <HAL_InitTick>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e002      	b.n	8001204 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011fe:	f7ff fdbf 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58024400 	.word	0x58024400
 8001210:	080151b4 	.word	0x080151b4
 8001214:	24000004 	.word	0x24000004
 8001218:	24000000 	.word	0x24000000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_InitTick+0x60>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e021      	b.n	8001274 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_InitTick+0x64>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_InitTick+0x60>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f959 	bl	80014fe <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f000 f931 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x68>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2400000c 	.word	0x2400000c
 8001280:	24000000 	.word	0x24000000
 8001284:	24000008 	.word	0x24000008

08001288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x20>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x24>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_IncTick+0x24>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	2400000c 	.word	0x2400000c
 80012ac:	2400063c 	.word	0x2400063c

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_GetTick+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	2400063c 	.word	0x2400063c

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff ffee 	bl	80012b0 <HAL_GetTick>
 80012d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d005      	beq.n	80012ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_Delay+0x44>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ee:	bf00      	nop
 80012f0:	f7ff ffde 	bl	80012b0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f7      	bhi.n	80012f0 <HAL_Delay+0x28>
  {
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2400000c 	.word	0x2400000c

08001310 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetREVID+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0c1b      	lsrs	r3, r3, #16
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	5c001000 	.word	0x5c001000

08001328 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001338:	4904      	ldr	r1, [pc, #16]	; (800134c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	58000400 	.word	0x58000400

08001350 <__NVIC_SetPriorityGrouping>:
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <__NVIC_SetPriorityGrouping+0x40>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	4313      	orrs	r3, r2
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <__NVIC_SetPriorityGrouping+0x40>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00
 8001394:	05fa0000 	.word	0x05fa0000

08001398 <__NVIC_GetPriorityGrouping>:
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_SetPriority>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff47 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff5e 	bl	8001398 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff90 	bl	8001408 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5f 	bl	80013b4 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffb2 	bl	8001470 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800151c:	f3bf 8f5f 	dmb	sy
}
 8001520:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_MPU_Disable+0x28>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_MPU_Disable+0x28>)
 8001528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_MPU_Disable+0x2c>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	e000ed90 	.word	0xe000ed90

08001548 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_MPU_Enable+0x38>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_MPU_Enable+0x3c>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <HAL_MPU_Enable+0x3c>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001564:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001566:	f3bf 8f4f 	dsb	sy
}
 800156a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156c:	f3bf 8f6f 	isb	sy
}
 8001570:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed90 	.word	0xe000ed90
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	785a      	ldrb	r2, [r3, #1]
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_MPU_ConfigRegion+0x84>)
 8001596:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d029      	beq.n	80015f4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80015a0:	4a1a      	ldr	r2, [pc, #104]	; (800160c <HAL_MPU_ConfigRegion+0x84>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7b1b      	ldrb	r3, [r3, #12]
 80015ac:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7adb      	ldrb	r3, [r3, #11]
 80015b2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7a9b      	ldrb	r3, [r3, #10]
 80015ba:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7b5b      	ldrb	r3, [r3, #13]
 80015c2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7b9b      	ldrb	r3, [r3, #14]
 80015ca:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7bdb      	ldrb	r3, [r3, #15]
 80015d2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7a5b      	ldrb	r3, [r3, #9]
 80015da:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7a1b      	ldrb	r3, [r3, #8]
 80015e2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015e4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015ee:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015f0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80015f2:	e005      	b.n	8001600 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_MPU_ConfigRegion+0x84>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <HAL_MPU_ConfigRegion+0x84>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed90 	.word	0xe000ed90

08001610 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0cf      	b.n	80017c2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001628:	2b00      	cmp	r3, #0
 800162a:	d106      	bne.n	800163a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2223      	movs	r2, #35	; 0x23
 8001630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f8d1 	bl	80017dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b64      	ldr	r3, [pc, #400]	; (80017cc <HAL_ETH_Init+0x1bc>)
 800163c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001640:	4a62      	ldr	r2, [pc, #392]	; (80017cc <HAL_ETH_Init+0x1bc>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800164a:	4b60      	ldr	r3, [pc, #384]	; (80017cc <HAL_ETH_Init+0x1bc>)
 800164c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7a1b      	ldrb	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d103      	bne.n	8001668 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fe61 	bl	8001328 <HAL_SYSCFG_ETHInterfaceSelect>
 8001666:	e003      	b.n	8001670 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001668:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800166c:	f7ff fe5c 	bl	8001328 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001670:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_ETH_Init+0x1c0>)
 8001672:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800168a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800168c:	f7ff fe10 	bl	80012b0 <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001692:	e011      	b.n	80016b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001694:	f7ff fe0c 	bl	80012b0 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016a2:	d909      	bls.n	80016b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2204      	movs	r2, #4
 80016a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	22e0      	movs	r2, #224	; 0xe0
 80016b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e084      	b.n	80017c2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1e4      	bne.n	8001694 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fa56 	bl	8001b7c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80016d0:	f002 fb0c 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a3f      	ldr	r2, [pc, #252]	; (80017d4 <HAL_ETH_Init+0x1c4>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0c9a      	lsrs	r2, r3, #18
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3a01      	subs	r2, #1
 80016e4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fc41 	bl	8001f70 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80016fa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800170a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	22e0      	movs	r2, #224	; 0xe0
 8001726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e049      	b.n	80017c2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001736:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_ETH_Init+0x1c8>)
 800173c:	4013      	ands	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6952      	ldr	r2, [r2, #20]
 8001742:	0051      	lsls	r1, r2, #1
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	430b      	orrs	r3, r1
 800174a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fca9 	bl	80020aa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fcef 	bl	800213c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	3305      	adds	r3, #5
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	021a      	lsls	r2, r3, #8
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	3304      	adds	r3, #4
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	3303      	adds	r3, #3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	061a      	lsls	r2, r3, #24
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	3302      	adds	r3, #2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	041b      	lsls	r3, r3, #16
 8001790:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800179c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2210      	movs	r2, #16
 80017bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	58024400 	.word	0x58024400
 80017d0:	58000400 	.word	0x58000400
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	ffff8001 	.word	0xffff8001

080017dc <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800181c:	2b23      	cmp	r3, #35	; 0x23
 800181e:	d179      	bne.n	8001914 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001820:	2200      	movs	r2, #0
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 fce7 	bl	80021f8 <ETH_Prepare_Tx_Descriptors>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d009      	beq.n	8001844 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001836:	f043 0202 	orr.w	r2, r3, #2
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e068      	b.n	8001916 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001844:	f3bf 8f4f 	dsb	sy
}
 8001848:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3206      	adds	r2, #6
 8001852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001856:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	2b03      	cmp	r3, #3
 8001868:	d904      	bls.n	8001874 <HAL_ETH_Transmit+0x84>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	1f1a      	subs	r2, r3, #4
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3106      	adds	r1, #6
 8001880:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001884:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001888:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 800188c:	f7ff fd10 	bl	80012b0 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001892:	e039      	b.n	8001908 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80018a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d012      	beq.n	80018ce <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ae:	f043 0208 	orr.w	r2, r3, #8
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c0:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e023      	b.n	8001916 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d018      	beq.n	8001908 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018d6:	f7ff fceb 	bl	80012b0 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d302      	bcc.n	80018ec <HAL_ETH_Transmit+0xfc>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10d      	bne.n	8001908 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f2:	f043 0204 	orr.w	r2, r3, #4
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001902:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e006      	b.n	8001916 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	dbc1      	blt.n	8001894 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	e000      	b.n	8001916 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
  }
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b088      	sub	sp, #32
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193c:	f043 0201 	orr.w	r2, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0a5      	b.n	8001a96 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001950:	2b23      	cmp	r3, #35	; 0x23
 8001952:	d001      	beq.n	8001958 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e09e      	b.n	8001a96 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	3212      	adds	r2, #18
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800196e:	f1c3 0304 	rsb	r3, r3, #4
 8001972:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001974:	e067      	b.n	8001a46 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d103      	bne.n	80019a6 <HAL_ETH_ReadData+0x88>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d03d      	beq.n	8001a22 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00d      	beq.n	80019ec <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019fc:	461a      	mov	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f005 ff11 	bl	8007828 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	441a      	add	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d902      	bls.n	8001a34 <HAL_ETH_ReadData+0x116>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b04      	subs	r3, #4
 8001a32:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	3212      	adds	r2, #18
 8001a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db06      	blt.n	8001a5c <HAL_ETH_ReadData+0x13e>
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d202      	bcs.n	8001a5c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d08c      	beq.n	8001976 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	441a      	add	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f814 	bl	8001a9e <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e000      	b.n	8001a96 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b088      	sub	sp, #32
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ab2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	3212      	adds	r2, #18
 8001aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abe:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ac4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ac6:	e03b      	b.n	8001b40 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d112      	bne.n	8001af6 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 fe77 	bl	80077c8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	74fb      	strb	r3, [r7, #19]
 8001ae4:	e007      	b.n	8001af6 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	461a      	mov	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001af6:	7cfb      	ldrb	r3, [r7, #19]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d021      	beq.n	8001b40 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001afc:	f3bf 8f5f 	dmb	sy
}
 8001b00:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	e003      	b.n	8001b1c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001b1a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d902      	bls.n	8001b2e <ETH_UpdateDescriptor+0x90>
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	3212      	adds	r2, #18
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <ETH_UpdateDescriptor+0xae>
 8001b46:	7cfb      	ldrb	r3, [r7, #19]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1bd      	bne.n	8001ac8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d00d      	beq.n	8001b72 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001b72:	bf00      	nop
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b96:	f002 f8a9 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8001b9a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d908      	bls.n	8001bb6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d804      	bhi.n	8001bb6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e027      	b.n	8001c06 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d908      	bls.n	8001bd0 <HAL_ETH_SetMDIOClockRange+0x54>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d204      	bcs.n	8001bd0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	e01a      	b.n	8001c06 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d303      	bcc.n	8001be0 <HAL_ETH_SetMDIOClockRange+0x64>
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d911      	bls.n	8001c04 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d908      	bls.n	8001bfa <HAL_ETH_SetMDIOClockRange+0x7e>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d804      	bhi.n	8001bfa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	e005      	b.n	8001c06 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e000      	b.n	8001c06 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001c04:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	01312cff 	.word	0x01312cff
 8001c1c:	02160ebf 	.word	0x02160ebf
 8001c20:	03938700 	.word	0x03938700
 8001c24:	05f5e0ff 	.word	0x05f5e0ff
 8001c28:	08f0d17f 	.word	0x08f0d17f

08001c2c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001c3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	791b      	ldrb	r3, [r3, #4]
 8001c44:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	7b1b      	ldrb	r3, [r3, #12]
 8001c4c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	7b5b      	ldrb	r3, [r3, #13]
 8001c54:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	7b9b      	ldrb	r3, [r3, #14]
 8001c5c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	7bdb      	ldrb	r3, [r3, #15]
 8001c64:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c66:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	7c12      	ldrb	r2, [r2, #16]
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	d102      	bne.n	8001c76 <ETH_SetMACConfig+0x4a>
 8001c70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c74:	e000      	b.n	8001c78 <ETH_SetMACConfig+0x4c>
 8001c76:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c78:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	7c52      	ldrb	r2, [r2, #17]
 8001c7e:	2a00      	cmp	r2, #0
 8001c80:	d102      	bne.n	8001c88 <ETH_SetMACConfig+0x5c>
 8001c82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c86:	e000      	b.n	8001c8a <ETH_SetMACConfig+0x5e>
 8001c88:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	7c9b      	ldrb	r3, [r3, #18]
 8001c90:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c92:	431a      	orrs	r2, r3
               macconf->Speed |
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c98:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001c9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	7f1b      	ldrb	r3, [r3, #28]
 8001ca4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001ca6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	7f5b      	ldrb	r3, [r3, #29]
 8001cac:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001cae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	7f92      	ldrb	r2, [r2, #30]
 8001cb4:	2a00      	cmp	r2, #0
 8001cb6:	d102      	bne.n	8001cbe <ETH_SetMACConfig+0x92>
 8001cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cbc:	e000      	b.n	8001cc0 <ETH_SetMACConfig+0x94>
 8001cbe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001cc0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	7fdb      	ldrb	r3, [r3, #31]
 8001cc6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001cc8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cd0:	2a00      	cmp	r2, #0
 8001cd2:	d102      	bne.n	8001cda <ETH_SetMACConfig+0xae>
 8001cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd8:	e000      	b.n	8001cdc <ETH_SetMACConfig+0xb0>
 8001cda:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001cdc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001ce2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cea:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001cec:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b56      	ldr	r3, [pc, #344]	; (8001e58 <ETH_SetMACConfig+0x22c>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	68f9      	ldr	r1, [r7, #12]
 8001d06:	430b      	orrs	r3, r1
 8001d08:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d16:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d18:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d20:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d2a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d2c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d34:	2a00      	cmp	r2, #0
 8001d36:	d102      	bne.n	8001d3e <ETH_SetMACConfig+0x112>
 8001d38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d3c:	e000      	b.n	8001d40 <ETH_SetMACConfig+0x114>
 8001d3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d40:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <ETH_SetMACConfig+0x230>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	68f9      	ldr	r1, [r7, #12]
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d64:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <ETH_SetMACConfig+0x234>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	430b      	orrs	r3, r1
 8001d80:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d88:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d96:	2a00      	cmp	r2, #0
 8001d98:	d101      	bne.n	8001d9e <ETH_SetMACConfig+0x172>
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	e000      	b.n	8001da0 <ETH_SetMACConfig+0x174>
 8001d9e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001da0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001db2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001db6:	4013      	ands	r3, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001dc8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001dd0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	f023 0103 	bic.w	r1, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001df6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	d101      	bne.n	8001e1a <ETH_SetMACConfig+0x1ee>
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	e000      	b.n	8001e1c <ETH_SetMACConfig+0x1f0>
 8001e1a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e1c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e24:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001e2e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e3c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	00048083 	.word	0x00048083
 8001e5c:	c0f88000 	.word	0xc0f88000
 8001e60:	fffffef0 	.word	0xfffffef0

08001e64 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <ETH_SetDMAConfig+0xf8>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	6811      	ldr	r1, [r2, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e8a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	791b      	ldrb	r3, [r3, #4]
 8001e90:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e96:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	7b1b      	ldrb	r3, [r3, #12]
 8001e9c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <ETH_SetDMAConfig+0xfc>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	68f9      	ldr	r1, [r7, #12]
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ebc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	7b5b      	ldrb	r3, [r3, #13]
 8001ec2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <ETH_SetDMAConfig+0x100>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	68f9      	ldr	r1, [r7, #12]
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ee8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	7d1b      	ldrb	r3, [r3, #20]
 8001ef4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ef6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	7f5b      	ldrb	r3, [r3, #29]
 8001efc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f0a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <ETH_SetDMAConfig+0x104>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f1e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	7f1b      	ldrb	r3, [r3, #28]
 8001f26:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f38:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <ETH_SetDMAConfig+0x108>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	68f9      	ldr	r1, [r7, #12]
 8001f46:	430b      	orrs	r3, r1
 8001f48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f4c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	ffff87fd 	.word	0xffff87fd
 8001f60:	ffff2ffe 	.word	0xffff2ffe
 8001f64:	fffec000 	.word	0xfffec000
 8001f68:	ffc0efef 	.word	0xffc0efef
 8001f6c:	7fc0ffff 	.word	0x7fc0ffff

08001f70 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b0a4      	sub	sp, #144	; 0x90
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f94:	2301      	movs	r3, #1
 8001f96:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001fc8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001fcc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001fea:	2300      	movs	r3, #0
 8001fec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002008:	2320      	movs	r3, #32
 800200a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800201a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002020:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002024:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800202c:	2302      	movs	r3, #2
 800202e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002044:	2301      	movs	r3, #1
 8002046:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800204a:	2300      	movs	r3, #0
 800204c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800204e:	2301      	movs	r3, #1
 8002050:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fde6 	bl	8001c2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002060:	2301      	movs	r3, #1
 8002062:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800207a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800207e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002084:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002088:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002090:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff fee1 	bl	8001e64 <ETH_SetDMAConfig>
}
 80020a2:	bf00      	nop
 80020a4:	3790      	adds	r7, #144	; 0x90
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	e01d      	b.n	80020f4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68d9      	ldr	r1, [r3, #12]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2200      	movs	r2, #0
 80020d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	3206      	adds	r2, #6
 80020ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3301      	adds	r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d9de      	bls.n	80020b8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002108:	461a      	mov	r2, r3
 800210a:	2303      	movs	r3, #3
 800210c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e023      	b.n	8002192 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6919      	ldr	r1, [r3, #16]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	3212      	adds	r2, #18
 8002188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3301      	adds	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d9d8      	bls.n	800214a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021be:	461a      	mov	r2, r3
 80021c0:	2303      	movs	r3, #3
 80021c2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b08d      	sub	sp, #52	; 0x34
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3318      	adds	r3, #24
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002222:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800223a:	d007      	beq.n	800224c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	3304      	adds	r3, #4
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800224c:	2302      	movs	r3, #2
 800224e:	e259      	b.n	8002704 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d044      	beq.n	80022e6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	4b75      	ldr	r3, [pc, #468]	; (8002438 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002262:	4013      	ands	r3, r2
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002268:	431a      	orrs	r2, r3
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002288:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d027      	beq.n	80022e6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	b29a      	uxth	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	431a      	orrs	r2, r3
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	431a      	orrs	r2, r3
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022d4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00e      	beq.n	8002310 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	4b51      	ldr	r3, [pc, #324]	; (800243c <ETH_Prepare_Tx_Descriptors+0x244>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	6992      	ldr	r2, [r2, #24]
 80022fe:	431a      	orrs	r2, r3
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	d036      	beq.n	8002396 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002334:	f3bf 8f5f 	dmb	sy
}
 8002338:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	3301      	adds	r3, #1
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	2b03      	cmp	r3, #3
 8002350:	d902      	bls.n	8002358 <ETH_Prepare_Tx_Descriptors+0x160>
 8002352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002354:	3b04      	subs	r3, #4
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	3301      	adds	r3, #1
 8002366:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002374:	d10f      	bne.n	8002396 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002380:	f3bf 8f5f 	dmb	sy
}
 8002384:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002392:	2302      	movs	r3, #2
 8002394:	e1b6      	b.n	8002704 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	3301      	adds	r3, #1
 800239a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <ETH_Prepare_Tx_Descriptors+0x244>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	6852      	ldr	r2, [r2, #4]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d012      	beq.n	80023e6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <ETH_Prepare_Tx_Descriptors+0x248>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	6852      	ldr	r2, [r2, #4]
 80023dc:	0412      	lsls	r2, r2, #16
 80023de:	431a      	orrs	r2, r3
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	e008      	b.n	80023f8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	2200      	movs	r2, #0
 80023ea:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <ETH_Prepare_Tx_Descriptors+0x248>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	6a3a      	ldr	r2, [r7, #32]
 80023f6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d021      	beq.n	8002448 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	04db      	lsls	r3, r3, #19
 8002412:	431a      	orrs	r2, r3
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800241e:	4013      	ands	r3, r2
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	69d2      	ldr	r2, [r2, #28]
 8002424:	431a      	orrs	r2, r3
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	e02e      	b.n	8002496 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002438:	ffff0000 	.word	0xffff0000
 800243c:	ffffc000 	.word	0xffffc000
 8002440:	c000ffff 	.word	0xc000ffff
 8002444:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	4b7b      	ldr	r3, [pc, #492]	; (800263c <ETH_Prepare_Tx_Descriptors+0x444>)
 800244e:	4013      	ands	r3, r2
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	6852      	ldr	r2, [r2, #4]
 8002454:	431a      	orrs	r2, r3
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	431a      	orrs	r2, r3
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	431a      	orrs	r2, r3
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	431a      	orrs	r2, r3
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80024cc:	f3bf 8f5f 	dmb	sy
}
 80024d0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80da 	beq.w	80026a0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024fe:	e0cf      	b.n	80026a0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	3301      	adds	r3, #1
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	2b03      	cmp	r3, #3
 8002516:	d902      	bls.n	800251e <ETH_Prepare_Tx_Descriptors+0x326>
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	3b04      	subs	r3, #4
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002526:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800253c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002540:	d007      	beq.n	8002552 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	3304      	adds	r3, #4
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d029      	beq.n	80025a6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255e:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002560:	2300      	movs	r3, #0
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
 8002564:	e019      	b.n	800259a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002566:	f3bf 8f5f 	dmb	sy
}
 800256a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	3301      	adds	r3, #1
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	2b03      	cmp	r3, #3
 8002582:	d902      	bls.n	800258a <ETH_Prepare_Tx_Descriptors+0x392>
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	3b04      	subs	r3, #4
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800258e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002592:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	3301      	adds	r3, #1
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
 800259a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3e1      	bcc.n	8002566 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80025a2:	2302      	movs	r3, #2
 80025a4:	e0ae      	b.n	8002704 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3301      	adds	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <ETH_Prepare_Tx_Descriptors+0x448>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	6852      	ldr	r2, [r2, #4]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d012      	beq.n	80025fc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	6852      	ldr	r2, [r2, #4]
 80025f2:	0412      	lsls	r2, r2, #16
 80025f4:	431a      	orrs	r2, r3
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	e008      	b.n	800260e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	2200      	movs	r2, #0
 8002600:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002608:	4013      	ands	r3, r2
 800260a:	6a3a      	ldr	r2, [r7, #32]
 800260c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d018      	beq.n	800264c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002620:	4013      	ands	r3, r2
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	69d2      	ldr	r2, [r2, #28]
 8002626:	431a      	orrs	r2, r3
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	60da      	str	r2, [r3, #12]
 8002638:	e020      	b.n	800267c <ETH_Prepare_Tx_Descriptors+0x484>
 800263a:	bf00      	nop
 800263c:	ffff8000 	.word	0xffff8000
 8002640:	ffffc000 	.word	0xffffc000
 8002644:	c000ffff 	.word	0xc000ffff
 8002648:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <ETH_Prepare_Tx_Descriptors+0x518>)
 8002652:	4013      	ands	r3, r2
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	6852      	ldr	r2, [r2, #4]
 8002658:	431a      	orrs	r2, r3
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	431a      	orrs	r2, r3
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	3301      	adds	r3, #1
 8002680:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002682:	f3bf 8f5f 	dmb	sy
}
 8002686:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f47f af2b 	bne.w	8002500 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	e005      	b.n	80026ca <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026da:	6979      	ldr	r1, [r7, #20]
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	3304      	adds	r3, #4
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ea:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80026ec:	b672      	cpsid	i
}
 80026ee:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	4413      	add	r3, r2
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80026fe:	b662      	cpsie	i
}
 8002700:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3734      	adds	r7, #52	; 0x34
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	ffff8000 	.word	0xffff8000

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002722:	4b89      	ldr	r3, [pc, #548]	; (8002948 <HAL_GPIO_Init+0x234>)
 8002724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002726:	e194      	b.n	8002a52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 8186 	beq.w	8002a4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d005      	beq.n	8002758 <HAL_GPIO_Init+0x44>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d130      	bne.n	80027ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2203      	movs	r2, #3
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800278e:	2201      	movs	r2, #1
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 0201 	and.w	r2, r3, #1
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d017      	beq.n	80027f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	2203      	movs	r2, #3
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d123      	bne.n	800284a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	220f      	movs	r2, #15
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	08da      	lsrs	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3208      	adds	r2, #8
 8002844:	69b9      	ldr	r1, [r7, #24]
 8002846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	2203      	movs	r2, #3
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0203 	and.w	r2, r3, #3
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80e0 	beq.w	8002a4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288c:	4b2f      	ldr	r3, [pc, #188]	; (800294c <HAL_GPIO_Init+0x238>)
 800288e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002892:	4a2e      	ldr	r2, [pc, #184]	; (800294c <HAL_GPIO_Init+0x238>)
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800289c:	4b2b      	ldr	r3, [pc, #172]	; (800294c <HAL_GPIO_Init+0x238>)
 800289e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028aa:	4a29      	ldr	r2, [pc, #164]	; (8002950 <HAL_GPIO_Init+0x23c>)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a20      	ldr	r2, [pc, #128]	; (8002954 <HAL_GPIO_Init+0x240>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d052      	beq.n	800297c <HAL_GPIO_Init+0x268>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <HAL_GPIO_Init+0x244>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d031      	beq.n	8002942 <HAL_GPIO_Init+0x22e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a1e      	ldr	r2, [pc, #120]	; (800295c <HAL_GPIO_Init+0x248>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d02b      	beq.n	800293e <HAL_GPIO_Init+0x22a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <HAL_GPIO_Init+0x24c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d025      	beq.n	800293a <HAL_GPIO_Init+0x226>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_GPIO_Init+0x250>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01f      	beq.n	8002936 <HAL_GPIO_Init+0x222>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <HAL_GPIO_Init+0x254>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d019      	beq.n	8002932 <HAL_GPIO_Init+0x21e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1a      	ldr	r2, [pc, #104]	; (800296c <HAL_GPIO_Init+0x258>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0x21a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_GPIO_Init+0x25c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00d      	beq.n	800292a <HAL_GPIO_Init+0x216>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_GPIO_Init+0x260>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x212>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a17      	ldr	r2, [pc, #92]	; (8002978 <HAL_GPIO_Init+0x264>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_GPIO_Init+0x20e>
 800291e:	2309      	movs	r3, #9
 8002920:	e02d      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002922:	230a      	movs	r3, #10
 8002924:	e02b      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002926:	2308      	movs	r3, #8
 8002928:	e029      	b.n	800297e <HAL_GPIO_Init+0x26a>
 800292a:	2307      	movs	r3, #7
 800292c:	e027      	b.n	800297e <HAL_GPIO_Init+0x26a>
 800292e:	2306      	movs	r3, #6
 8002930:	e025      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002932:	2305      	movs	r3, #5
 8002934:	e023      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002936:	2304      	movs	r3, #4
 8002938:	e021      	b.n	800297e <HAL_GPIO_Init+0x26a>
 800293a:	2303      	movs	r3, #3
 800293c:	e01f      	b.n	800297e <HAL_GPIO_Init+0x26a>
 800293e:	2302      	movs	r3, #2
 8002940:	e01d      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002942:	2301      	movs	r3, #1
 8002944:	e01b      	b.n	800297e <HAL_GPIO_Init+0x26a>
 8002946:	bf00      	nop
 8002948:	58000080 	.word	0x58000080
 800294c:	58024400 	.word	0x58024400
 8002950:	58000400 	.word	0x58000400
 8002954:	58020000 	.word	0x58020000
 8002958:	58020400 	.word	0x58020400
 800295c:	58020800 	.word	0x58020800
 8002960:	58020c00 	.word	0x58020c00
 8002964:	58021000 	.word	0x58021000
 8002968:	58021400 	.word	0x58021400
 800296c:	58021800 	.word	0x58021800
 8002970:	58021c00 	.word	0x58021c00
 8002974:	58022000 	.word	0x58022000
 8002978:	58022400 	.word	0x58022400
 800297c:	2300      	movs	r3, #0
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	f002 0203 	and.w	r2, r2, #3
 8002984:	0092      	lsls	r2, r2, #2
 8002986:	4093      	lsls	r3, r2
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298e:	4938      	ldr	r1, [pc, #224]	; (8002a70 <HAL_GPIO_Init+0x35c>)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f47f ae63 	bne.w	8002728 <HAL_GPIO_Init+0x14>
  }
}
 8002a62:	bf00      	nop
 8002a64:	bf00      	nop
 8002a66:	3724      	adds	r7, #36	; 0x24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	58000400 	.word	0x58000400

08002a74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a76:	b08f      	sub	sp, #60	; 0x3c
 8002a78:	af0a      	add	r7, sp, #40	; 0x28
 8002a7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e116      	b.n	8002cb4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d106      	bne.n	8002aa6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fe f9f1 	bl	8000e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 f8dd 	bl	8006c84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	687e      	ldr	r6, [r7, #4]
 8002ad2:	466d      	mov	r5, sp
 8002ad4:	f106 0410 	add.w	r4, r6, #16
 8002ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ae4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae8:	1d33      	adds	r3, r6, #4
 8002aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aec:	6838      	ldr	r0, [r7, #0]
 8002aee:	f004 f85b 	bl	8006ba8 <USB_CoreInit>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0d7      	b.n	8002cb4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 f8cb 	bl	8006ca6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e04a      	b.n	8002bac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	333d      	adds	r3, #61	; 0x3d
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	333c      	adds	r3, #60	; 0x3c
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	b298      	uxth	r0, r3
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	3356      	adds	r3, #86	; 0x56
 8002b52:	4602      	mov	r2, r0
 8002b54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	3340      	adds	r3, #64	; 0x40
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	3344      	adds	r3, #68	; 0x44
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3348      	adds	r3, #72	; 0x48
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	334c      	adds	r3, #76	; 0x4c
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d3af      	bcc.n	8002b16 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	e044      	b.n	8002c46 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	3301      	adds	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d3b5      	bcc.n	8002bbc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	687e      	ldr	r6, [r7, #4]
 8002c58:	466d      	mov	r5, sp
 8002c5a:	f106 0410 	add.w	r4, r6, #16
 8002c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c6e:	1d33      	adds	r3, r6, #4
 8002c70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c72:	6838      	ldr	r0, [r7, #0]
 8002c74:	f004 f864 	bl	8006d40 <USB_DevInit>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e014      	b.n	8002cb4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d102      	bne.n	8002ca8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f80a 	bl	8002cbc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f004 fa22 	bl	80070f6 <USB_DevDisconnect>

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_PCDEx_ActivateLPM+0x44>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	10000003 	.word	0x10000003

08002d04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d0c:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d00a      	beq.n	8002d2e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d18:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e040      	b.n	8002dac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e03e      	b.n	8002dac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002d36:	491f      	ldr	r1, [pc, #124]	; (8002db4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d3e:	f7fe fab7 	bl	80012b0 <HAL_GetTick>
 8002d42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d44:	e009      	b.n	8002d5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d46:	f7fe fab3 	bl	80012b0 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d54:	d901      	bls.n	8002d5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e028      	b.n	8002dac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d5a:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d66:	d1ee      	bne.n	8002d46 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b1e      	cmp	r3, #30
 8002d6c:	d008      	beq.n	8002d80 <HAL_PWREx_ConfigSupply+0x7c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b2e      	cmp	r3, #46	; 0x2e
 8002d72:	d005      	beq.n	8002d80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b1d      	cmp	r3, #29
 8002d78:	d002      	beq.n	8002d80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b2d      	cmp	r3, #45	; 0x2d
 8002d7e:	d114      	bne.n	8002daa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002d80:	f7fe fa96 	bl	80012b0 <HAL_GetTick>
 8002d84:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d86:	e009      	b.n	8002d9c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d88:	f7fe fa92 	bl	80012b0 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d96:	d901      	bls.n	8002d9c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e007      	b.n	8002dac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da8:	d1ee      	bne.n	8002d88 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	58024800 	.word	0x58024800

08002db8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc6:	60d3      	str	r3, [r2, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	58024800 	.word	0x58024800

08002dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	; 0x30
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f000 bc48 	b.w	800367c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8088 	beq.w	8002f0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfa:	4b99      	ldr	r3, [pc, #612]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e04:	4b96      	ldr	r3, [pc, #600]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d007      	beq.n	8002e20 <HAL_RCC_OscConfig+0x48>
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	2b18      	cmp	r3, #24
 8002e14:	d111      	bne.n	8002e3a <HAL_RCC_OscConfig+0x62>
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d10c      	bne.n	8002e3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	4b8f      	ldr	r3, [pc, #572]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d06d      	beq.n	8002f08 <HAL_RCC_OscConfig+0x130>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d169      	bne.n	8002f08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	f000 bc21 	b.w	800367c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x7a>
 8002e44:	4b86      	ldr	r3, [pc, #536]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a85      	ldr	r2, [pc, #532]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	e02e      	b.n	8002eb0 <HAL_RCC_OscConfig+0xd8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x9c>
 8002e5a:	4b81      	ldr	r3, [pc, #516]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a80      	ldr	r2, [pc, #512]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b7e      	ldr	r3, [pc, #504]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7d      	ldr	r2, [pc, #500]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e01d      	b.n	8002eb0 <HAL_RCC_OscConfig+0xd8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0xc0>
 8002e7e:	4b78      	ldr	r3, [pc, #480]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a77      	ldr	r2, [pc, #476]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b75      	ldr	r3, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a74      	ldr	r2, [pc, #464]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0xd8>
 8002e98:	4b71      	ldr	r3, [pc, #452]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a70      	ldr	r2, [pc, #448]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b6e      	ldr	r3, [pc, #440]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6d      	ldr	r2, [pc, #436]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe f9fa 	bl	80012b0 <HAL_GetTick>
 8002ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fe f9f6 	bl	80012b0 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e3d4      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ed2:	4b63      	ldr	r3, [pc, #396]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xe8>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe f9e6 	bl	80012b0 <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7fe f9e2 	bl	80012b0 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e3c0      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002efa:	4b59      	ldr	r3, [pc, #356]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x110>
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80ca 	beq.w	80030ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f18:	4b51      	ldr	r3, [pc, #324]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f22:	4b4f      	ldr	r3, [pc, #316]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <HAL_RCC_OscConfig+0x166>
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	2b18      	cmp	r3, #24
 8002f32:	d156      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x20a>
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d151      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f3e:	4b48      	ldr	r3, [pc, #288]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_RCC_OscConfig+0x17e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e392      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f56:	4b42      	ldr	r3, [pc, #264]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 0219 	bic.w	r2, r3, #25
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	493f      	ldr	r1, [pc, #252]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe f9a2 	bl	80012b0 <HAL_GetTick>
 8002f6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f70:	f7fe f99e 	bl	80012b0 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e37c      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f82:	4b37      	ldr	r3, [pc, #220]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8e:	f7fe f9bf 	bl	8001310 <HAL_GetREVID>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d817      	bhi.n	8002fcc <HAL_RCC_OscConfig+0x1f4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b40      	cmp	r3, #64	; 0x40
 8002fa2:	d108      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x1de>
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002fac:	4a2c      	ldr	r2, [pc, #176]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb4:	e07a      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	031b      	lsls	r3, r3, #12
 8002fc4:	4926      	ldr	r1, [pc, #152]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fca:	e06f      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	4921      	ldr	r1, [pc, #132]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe0:	e064      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d047      	beq.n	800307a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 0219 	bic.w	r2, r3, #25
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	491a      	ldr	r1, [pc, #104]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe f958 	bl	80012b0 <HAL_GetTick>
 8003000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003004:	f7fe f954 	bl	80012b0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e332      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	f7fe f975 	bl	8001310 <HAL_GetREVID>
 8003026:	4603      	mov	r3, r0
 8003028:	f241 0203 	movw	r2, #4099	; 0x1003
 800302c:	4293      	cmp	r3, r2
 800302e:	d819      	bhi.n	8003064 <HAL_RCC_OscConfig+0x28c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d108      	bne.n	800304a <HAL_RCC_OscConfig+0x272>
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003040:	4a07      	ldr	r2, [pc, #28]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 8003042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003046:	6053      	str	r3, [r2, #4]
 8003048:	e030      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	031b      	lsls	r3, r3, #12
 8003058:	4901      	ldr	r1, [pc, #4]	; (8003060 <HAL_RCC_OscConfig+0x288>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
 800305e:	e025      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
 8003060:	58024400 	.word	0x58024400
 8003064:	4b9a      	ldr	r3, [pc, #616]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	4997      	ldr	r1, [pc, #604]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
 8003078:	e018      	b.n	80030ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307a:	4b95      	ldr	r3, [pc, #596]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a94      	ldr	r2, [pc, #592]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fe f913 	bl	80012b0 <HAL_GetTick>
 800308a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308e:	f7fe f90f 	bl	80012b0 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e2ed      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030a0:	4b8b      	ldr	r3, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a9 	beq.w	800320c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ba:	4b85      	ldr	r3, [pc, #532]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030c4:	4b82      	ldr	r3, [pc, #520]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d007      	beq.n	80030e0 <HAL_RCC_OscConfig+0x308>
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b18      	cmp	r3, #24
 80030d4:	d13a      	bne.n	800314c <HAL_RCC_OscConfig+0x374>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d135      	bne.n	800314c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030e0:	4b7b      	ldr	r3, [pc, #492]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_OscConfig+0x320>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b80      	cmp	r3, #128	; 0x80
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e2c1      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030f8:	f7fe f90a 	bl	8001310 <HAL_GetREVID>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8003102:	4293      	cmp	r3, r2
 8003104:	d817      	bhi.n	8003136 <HAL_RCC_OscConfig+0x35e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	2b20      	cmp	r3, #32
 800310c:	d108      	bne.n	8003120 <HAL_RCC_OscConfig+0x348>
 800310e:	4b70      	ldr	r3, [pc, #448]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003116:	4a6e      	ldr	r2, [pc, #440]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800311c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800311e:	e075      	b.n	800320c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003120:	4b6b      	ldr	r3, [pc, #428]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	069b      	lsls	r3, r3, #26
 800312e:	4968      	ldr	r1, [pc, #416]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003134:	e06a      	b.n	800320c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003136:	4b66      	ldr	r3, [pc, #408]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	061b      	lsls	r3, r3, #24
 8003144:	4962      	ldr	r1, [pc, #392]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003146:	4313      	orrs	r3, r2
 8003148:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800314a:	e05f      	b.n	800320c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d042      	beq.n	80031da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003154:	4b5e      	ldr	r3, [pc, #376]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a5d      	ldr	r2, [pc, #372]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800315a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe f8a6 	bl	80012b0 <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003168:	f7fe f8a2 	bl	80012b0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e280      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800317a:	4b55      	ldr	r3, [pc, #340]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003186:	f7fe f8c3 	bl	8001310 <HAL_GetREVID>
 800318a:	4603      	mov	r3, r0
 800318c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003190:	4293      	cmp	r3, r2
 8003192:	d817      	bhi.n	80031c4 <HAL_RCC_OscConfig+0x3ec>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	2b20      	cmp	r3, #32
 800319a:	d108      	bne.n	80031ae <HAL_RCC_OscConfig+0x3d6>
 800319c:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031a4:	4a4a      	ldr	r2, [pc, #296]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031aa:	6053      	str	r3, [r2, #4]
 80031ac:	e02e      	b.n	800320c <HAL_RCC_OscConfig+0x434>
 80031ae:	4b48      	ldr	r3, [pc, #288]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	069b      	lsls	r3, r3, #26
 80031bc:	4944      	ldr	r1, [pc, #272]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
 80031c2:	e023      	b.n	800320c <HAL_RCC_OscConfig+0x434>
 80031c4:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	493f      	ldr	r1, [pc, #252]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60cb      	str	r3, [r1, #12]
 80031d8:	e018      	b.n	800320c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031da:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3c      	ldr	r2, [pc, #240]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80031e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fe f863 	bl	80012b0 <HAL_GetTick>
 80031ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031ee:	f7fe f85f 	bl	80012b0 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e23d      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003200:	4b33      	ldr	r3, [pc, #204]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d036      	beq.n	8003286 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d019      	beq.n	8003254 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003224:	4a2a      	ldr	r2, [pc, #168]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7fe f840 	bl	80012b0 <HAL_GetTick>
 8003230:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003234:	f7fe f83c 	bl	80012b0 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e21a      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x45c>
 8003252:	e018      	b.n	8003286 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003254:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe f826 	bl	80012b0 <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003268:	f7fe f822 	bl	80012b0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e200      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d039      	beq.n	8003306 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032a6:	f7fe f803 	bl	80012b0 <HAL_GetTick>
 80032aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ae:	f7fd ffff 	bl	80012b0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1dd      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x4d6>
 80032cc:	e01b      	b.n	8003306 <HAL_RCC_OscConfig+0x52e>
 80032ce:	bf00      	nop
 80032d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032d4:	4b9b      	ldr	r3, [pc, #620]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a9a      	ldr	r2, [pc, #616]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80032da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032e0:	f7fd ffe6 	bl	80012b0 <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032e8:	f7fd ffe2 	bl	80012b0 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1c0      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032fa:	4b92      	ldr	r3, [pc, #584]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8081 	beq.w	8003416 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003314:	4b8c      	ldr	r3, [pc, #560]	; (8003548 <HAL_RCC_OscConfig+0x770>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a8b      	ldr	r2, [pc, #556]	; (8003548 <HAL_RCC_OscConfig+0x770>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003320:	f7fd ffc6 	bl	80012b0 <HAL_GetTick>
 8003324:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003328:	f7fd ffc2 	bl	80012b0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1a0      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800333a:	4b83      	ldr	r3, [pc, #524]	; (8003548 <HAL_RCC_OscConfig+0x770>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d106      	bne.n	800335c <HAL_RCC_OscConfig+0x584>
 800334e:	4b7d      	ldr	r3, [pc, #500]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	4a7c      	ldr	r2, [pc, #496]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6713      	str	r3, [r2, #112]	; 0x70
 800335a:	e02d      	b.n	80033b8 <HAL_RCC_OscConfig+0x5e0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10c      	bne.n	800337e <HAL_RCC_OscConfig+0x5a6>
 8003364:	4b77      	ldr	r3, [pc, #476]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a76      	ldr	r2, [pc, #472]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	4b74      	ldr	r3, [pc, #464]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a73      	ldr	r2, [pc, #460]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003376:	f023 0304 	bic.w	r3, r3, #4
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
 800337c:	e01c      	b.n	80033b8 <HAL_RCC_OscConfig+0x5e0>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c8>
 8003386:	4b6f      	ldr	r3, [pc, #444]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a6e      	ldr	r2, [pc, #440]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	4b6c      	ldr	r3, [pc, #432]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a6b      	ldr	r2, [pc, #428]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0x5e0>
 80033a0:	4b68      	ldr	r3, [pc, #416]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a67      	ldr	r2, [pc, #412]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	4b65      	ldr	r3, [pc, #404]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a64      	ldr	r2, [pc, #400]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80033b2:	f023 0304 	bic.w	r3, r3, #4
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d015      	beq.n	80033ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fd ff76 	bl	80012b0 <HAL_GetTick>
 80033c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fd ff72 	bl	80012b0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e14e      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033de:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0ee      	beq.n	80033c8 <HAL_RCC_OscConfig+0x5f0>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ec:	f7fd ff60 	bl	80012b0 <HAL_GetTick>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033f2:	e00a      	b.n	800340a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7fd ff5c 	bl	80012b0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e138      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800340a:	4b4e      	ldr	r3, [pc, #312]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1ee      	bne.n	80033f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 812d 	beq.w	800367a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003420:	4b48      	ldr	r3, [pc, #288]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003428:	2b18      	cmp	r3, #24
 800342a:	f000 80bd 	beq.w	80035a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2b02      	cmp	r3, #2
 8003434:	f040 809e 	bne.w	8003574 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003438:	4b42      	ldr	r3, [pc, #264]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a41      	ldr	r2, [pc, #260]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 800343e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fd ff34 	bl	80012b0 <HAL_GetTick>
 8003448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fd ff30 	bl	80012b0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e10e      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800345e:	4b39      	ldr	r3, [pc, #228]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346a:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 800346c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800346e:	4b37      	ldr	r3, [pc, #220]	; (800354c <HAL_RCC_OscConfig+0x774>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	430a      	orrs	r2, r1
 800347e:	4931      	ldr	r1, [pc, #196]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	628b      	str	r3, [r1, #40]	; 0x28
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	3b01      	subs	r3, #1
 800348a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003492:	3b01      	subs	r3, #1
 8003494:	025b      	lsls	r3, r3, #9
 8003496:	b29b      	uxth	r3, r3
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	3b01      	subs	r3, #1
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	3b01      	subs	r3, #1
 80034ae:	061b      	lsls	r3, r3, #24
 80034b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034b4:	4923      	ldr	r1, [pc, #140]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80034ba:	4b22      	ldr	r3, [pc, #136]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	4a21      	ldr	r2, [pc, #132]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034c6:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ca:	4b21      	ldr	r3, [pc, #132]	; (8003550 <HAL_RCC_OscConfig+0x778>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034d2:	00d2      	lsls	r2, r2, #3
 80034d4:	491b      	ldr	r1, [pc, #108]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	f023 020c 	bic.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4917      	ldr	r1, [pc, #92]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034ec:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	f023 0202 	bic.w	r2, r3, #2
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	4912      	ldr	r1, [pc, #72]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	4a10      	ldr	r2, [pc, #64]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003514:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003520:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	4a07      	ldr	r2, [pc, #28]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HAL_RCC_OscConfig+0x76c>)
 8003534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fd feb9 	bl	80012b0 <HAL_GetTick>
 800353e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003540:	e011      	b.n	8003566 <HAL_RCC_OscConfig+0x78e>
 8003542:	bf00      	nop
 8003544:	58024400 	.word	0x58024400
 8003548:	58024800 	.word	0x58024800
 800354c:	fffffc0c 	.word	0xfffffc0c
 8003550:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd feac 	bl	80012b0 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e08a      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x77c>
 8003572:	e082      	b.n	800367a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b43      	ldr	r3, [pc, #268]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a42      	ldr	r2, [pc, #264]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 800357a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800357e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fd fe96 	bl	80012b0 <HAL_GetTick>
 8003584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fd fe92 	bl	80012b0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e070      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800359a:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x7b0>
 80035a6:	e068      	b.n	800367a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035a8:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035ae:	4b35      	ldr	r3, [pc, #212]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d031      	beq.n	8003620 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f003 0203 	and.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d12a      	bne.n	8003620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d122      	bne.n	8003620 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d11a      	bne.n	8003620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	0a5b      	lsrs	r3, r3, #9
 80035ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d111      	bne.n	8003620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	0c1b      	lsrs	r3, r3, #16
 8003600:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d108      	bne.n	8003620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	0e1b      	lsrs	r3, r3, #24
 8003612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e02b      	b.n	800367c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003624:	4b17      	ldr	r3, [pc, #92]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003628:	08db      	lsrs	r3, r3, #3
 800362a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800362e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	429a      	cmp	r2, r3
 8003638:	d01f      	beq.n	800367a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	4a11      	ldr	r2, [pc, #68]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003646:	f7fd fe33 	bl	80012b0 <HAL_GetTick>
 800364a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800364c:	bf00      	nop
 800364e:	f7fd fe2f 	bl	80012b0 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	4293      	cmp	r3, r2
 8003658:	d0f9      	beq.n	800364e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 800365c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_RCC_OscConfig+0x8b0>)
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003666:	00d2      	lsls	r2, r2, #3
 8003668:	4906      	ldr	r1, [pc, #24]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 800366a:	4313      	orrs	r3, r2
 800366c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	4a04      	ldr	r2, [pc, #16]	; (8003684 <HAL_RCC_OscConfig+0x8ac>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3730      	adds	r7, #48	; 0x30
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	58024400 	.word	0x58024400
 8003688:	ffff0007 	.word	0xffff0007

0800368c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e19c      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b8a      	ldr	r3, [pc, #552]	; (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d910      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b87      	ldr	r3, [pc, #540]	; (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 020f 	bic.w	r2, r3, #15
 80036b6:	4985      	ldr	r1, [pc, #532]	; (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b83      	ldr	r3, [pc, #524]	; (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e184      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	4b7b      	ldr	r3, [pc, #492]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d908      	bls.n	80036fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036ec:	4b78      	ldr	r3, [pc, #480]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	4975      	ldr	r1, [pc, #468]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d010      	beq.n	800372c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	4b70      	ldr	r3, [pc, #448]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003716:	429a      	cmp	r2, r3
 8003718:	d908      	bls.n	800372c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800371a:	4b6d      	ldr	r3, [pc, #436]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	496a      	ldr	r1, [pc, #424]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003728:	4313      	orrs	r3, r2
 800372a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	4b64      	ldr	r3, [pc, #400]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003744:	429a      	cmp	r2, r3
 8003746:	d908      	bls.n	800375a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003748:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	495e      	ldr	r1, [pc, #376]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003756:	4313      	orrs	r3, r2
 8003758:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d010      	beq.n	8003788 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003772:	429a      	cmp	r2, r3
 8003774:	d908      	bls.n	8003788 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003776:	4b56      	ldr	r3, [pc, #344]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4953      	ldr	r1, [pc, #332]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003784:	4313      	orrs	r3, r2
 8003786:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d010      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	4b4d      	ldr	r3, [pc, #308]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d908      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a4:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f023 020f 	bic.w	r2, r3, #15
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4947      	ldr	r1, [pc, #284]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d055      	beq.n	800386e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037c2:	4b43      	ldr	r3, [pc, #268]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	4940      	ldr	r1, [pc, #256]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d107      	bne.n	80037ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037dc:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d121      	bne.n	800382c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0f6      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037f4:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d115      	bne.n	800382c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0ea      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800380c:	4b30      	ldr	r3, [pc, #192]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0de      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800381c:	4b2c      	ldr	r3, [pc, #176]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0d6      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800382c:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f023 0207 	bic.w	r2, r3, #7
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4925      	ldr	r1, [pc, #148]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800383a:	4313      	orrs	r3, r2
 800383c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383e:	f7fd fd37 	bl	80012b0 <HAL_GetTick>
 8003842:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003844:	e00a      	b.n	800385c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003846:	f7fd fd33 	bl	80012b0 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e0be      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385c:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	429a      	cmp	r2, r3
 800386c:	d1eb      	bne.n	8003846 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d010      	beq.n	800389c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	429a      	cmp	r2, r3
 8003888:	d208      	bcs.n	800389c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f023 020f 	bic.w	r2, r3, #15
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	490e      	ldr	r1, [pc, #56]	; (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003898:	4313      	orrs	r3, r2
 800389a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_ClockConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d214      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_RCC_ClockConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 020f 	bic.w	r2, r3, #15
 80038b2:	4906      	ldr	r1, [pc, #24]	; (80038cc <HAL_RCC_ClockConfig+0x240>)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <HAL_RCC_ClockConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e086      	b.n	80039da <HAL_RCC_ClockConfig+0x34e>
 80038cc:	52002000 	.word	0x52002000
 80038d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d010      	beq.n	8003902 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d208      	bcs.n	8003902 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038f0:	4b3c      	ldr	r3, [pc, #240]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	4939      	ldr	r1, [pc, #228]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d010      	beq.n	8003930 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	4b34      	ldr	r3, [pc, #208]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800391a:	429a      	cmp	r2, r3
 800391c:	d208      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800391e:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	492e      	ldr	r1, [pc, #184]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 800392c:	4313      	orrs	r3, r2
 800392e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699a      	ldr	r2, [r3, #24]
 8003940:	4b28      	ldr	r3, [pc, #160]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003948:	429a      	cmp	r2, r3
 800394a:	d208      	bcs.n	800395e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800394c:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	4922      	ldr	r1, [pc, #136]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 800395a:	4313      	orrs	r3, r2
 800395c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b00      	cmp	r3, #0
 8003968:	d010      	beq.n	800398c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003976:	429a      	cmp	r2, r3
 8003978:	d208      	bcs.n	800398c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800397a:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	4917      	ldr	r1, [pc, #92]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003988:	4313      	orrs	r3, r2
 800398a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800398c:	f000 f834 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b14      	ldr	r3, [pc, #80]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	4912      	ldr	r1, [pc, #72]	; (80039e8 <HAL_RCC_ClockConfig+0x35c>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
 80039a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039aa:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <HAL_RCC_ClockConfig+0x358>)
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <HAL_RCC_ClockConfig+0x35c>)
 80039b4:	5cd3      	ldrb	r3, [r2, r3]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
 80039c0:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <HAL_RCC_ClockConfig+0x360>)
 80039c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039c4:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_RCC_ClockConfig+0x364>)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_RCC_ClockConfig+0x368>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd fc24 	bl	800121c <HAL_InitTick>
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	58024400 	.word	0x58024400
 80039e8:	080151b4 	.word	0x080151b4
 80039ec:	24000004 	.word	0x24000004
 80039f0:	24000000 	.word	0x24000000
 80039f4:	24000008 	.word	0x24000008

080039f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039fe:	4bb3      	ldr	r3, [pc, #716]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a06:	2b18      	cmp	r3, #24
 8003a08:	f200 8155 	bhi.w	8003cb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a79 	.word	0x08003a79
 8003a18:	08003cb7 	.word	0x08003cb7
 8003a1c:	08003cb7 	.word	0x08003cb7
 8003a20:	08003cb7 	.word	0x08003cb7
 8003a24:	08003cb7 	.word	0x08003cb7
 8003a28:	08003cb7 	.word	0x08003cb7
 8003a2c:	08003cb7 	.word	0x08003cb7
 8003a30:	08003cb7 	.word	0x08003cb7
 8003a34:	08003a9f 	.word	0x08003a9f
 8003a38:	08003cb7 	.word	0x08003cb7
 8003a3c:	08003cb7 	.word	0x08003cb7
 8003a40:	08003cb7 	.word	0x08003cb7
 8003a44:	08003cb7 	.word	0x08003cb7
 8003a48:	08003cb7 	.word	0x08003cb7
 8003a4c:	08003cb7 	.word	0x08003cb7
 8003a50:	08003cb7 	.word	0x08003cb7
 8003a54:	08003aa5 	.word	0x08003aa5
 8003a58:	08003cb7 	.word	0x08003cb7
 8003a5c:	08003cb7 	.word	0x08003cb7
 8003a60:	08003cb7 	.word	0x08003cb7
 8003a64:	08003cb7 	.word	0x08003cb7
 8003a68:	08003cb7 	.word	0x08003cb7
 8003a6c:	08003cb7 	.word	0x08003cb7
 8003a70:	08003cb7 	.word	0x08003cb7
 8003a74:	08003aab 	.word	0x08003aab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a78:	4b94      	ldr	r3, [pc, #592]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a84:	4b91      	ldr	r3, [pc, #580]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	08db      	lsrs	r3, r3, #3
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	4a90      	ldr	r2, [pc, #576]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
 8003a94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a96:	e111      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a98:	4b8d      	ldr	r3, [pc, #564]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a9a:	61bb      	str	r3, [r7, #24]
      break;
 8003a9c:	e10e      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a9e:	4b8d      	ldr	r3, [pc, #564]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003aa0:	61bb      	str	r3, [r7, #24]
      break;
 8003aa2:	e10b      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003aa4:	4b8c      	ldr	r3, [pc, #560]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003aa6:	61bb      	str	r3, [r7, #24]
      break;
 8003aa8:	e108      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003aaa:	4b88      	ldr	r3, [pc, #544]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ab4:	4b85      	ldr	r3, [pc, #532]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003abe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ac0:	4b82      	ldr	r3, [pc, #520]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003aca:	4b80      	ldr	r3, [pc, #512]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	08db      	lsrs	r3, r3, #3
 8003ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80e1 	beq.w	8003cb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	f000 8083 	beq.w	8003bfc <HAL_RCC_GetSysClockFreq+0x204>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	f200 80a1 	bhi.w	8003c40 <HAL_RCC_GetSysClockFreq+0x248>
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x114>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d056      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b0a:	e099      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d02d      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b18:	4b6c      	ldr	r3, [pc, #432]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	08db      	lsrs	r3, r3, #3
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	4a6b      	ldr	r2, [pc, #428]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
 8003b28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b42:	4b62      	ldr	r3, [pc, #392]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b72:	e087      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ce0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bb6:	e065      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bde:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bfa:	e043      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ce8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0e:	4b2f      	ldr	r3, [pc, #188]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c3e:	e021      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	0a5b      	lsrs	r3, r3, #9
 8003c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8e:	3301      	adds	r3, #1
 8003c90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	ee07 3a90 	vmov	s15, r3
 8003c98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca8:	ee17 3a90 	vmov	r3, s15
 8003cac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003cae:	e005      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
      break;
 8003cb4:	e002      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cb8:	61bb      	str	r3, [r7, #24]
      break;
 8003cba:	bf00      	nop
  }

  return sysclockfreq;
 8003cbc:	69bb      	ldr	r3, [r7, #24]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3724      	adds	r7, #36	; 0x24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	58024400 	.word	0x58024400
 8003cd0:	03d09000 	.word	0x03d09000
 8003cd4:	003d0900 	.word	0x003d0900
 8003cd8:	007a1200 	.word	0x007a1200
 8003cdc:	46000000 	.word	0x46000000
 8003ce0:	4c742400 	.word	0x4c742400
 8003ce4:	4a742400 	.word	0x4a742400
 8003ce8:	4af42400 	.word	0x4af42400

08003cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cf2:	f7ff fe81 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	490f      	ldr	r1, [pc, #60]	; (8003d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d04:	5ccb      	ldrb	r3, [r1, r3]
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d2a:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	080151b4 	.word	0x080151b4
 8003d44:	24000004 	.word	0x24000004
 8003d48:	24000000 	.word	0x24000000

08003d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d50:	f7ff ffcc 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4904      	ldr	r1, [pc, #16]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	58024400 	.word	0x58024400
 8003d74:	080151b4 	.word	0x080151b4

08003d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d7c:	f7ff ffb6 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4904      	ldr	r1, [pc, #16]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	58024400 	.word	0x58024400
 8003da0:	080151b4 	.word	0x080151b4

08003da4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da8:	b0ca      	sub	sp, #296	; 0x128
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003dc8:	2500      	movs	r5, #0
 8003dca:	ea54 0305 	orrs.w	r3, r4, r5
 8003dce:	d049      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dda:	d02f      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ddc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003de0:	d828      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003de6:	d01a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dec:	d822      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df6:	d007      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003df8:	e01c      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfa:	4bb8      	ldr	r3, [pc, #736]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	4ab7      	ldr	r2, [pc, #732]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e06:	e01a      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 fc8f 	bl	8005734 <RCCEx_PLL2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e1c:	e00f      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e22:	3328      	adds	r3, #40	; 0x28
 8003e24:	2102      	movs	r1, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 fd36 	bl	8005898 <RCCEx_PLL3_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e32:	e004      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e3a:	e000      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e46:	4ba5      	ldr	r3, [pc, #660]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e54:	4aa1      	ldr	r2, [pc, #644]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	6513      	str	r3, [r2, #80]	; 0x50
 8003e5a:	e003      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003e70:	f04f 0900 	mov.w	r9, #0
 8003e74:	ea58 0309 	orrs.w	r3, r8, r9
 8003e78:	d047      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d82a      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e84:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003ea1 	.word	0x08003ea1
 8003e90:	08003eaf 	.word	0x08003eaf
 8003e94:	08003ec5 	.word	0x08003ec5
 8003e98:	08003ee3 	.word	0x08003ee3
 8003e9c:	08003ee3 	.word	0x08003ee3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea0:	4b8e      	ldr	r3, [pc, #568]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	4a8d      	ldr	r2, [pc, #564]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eac:	e01a      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f001 fc3c 	bl	8005734 <RCCEx_PLL2_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ec2:	e00f      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec8:	3328      	adds	r3, #40	; 0x28
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 fce3 	bl	8005898 <RCCEx_PLL3_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ed8:	e004      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eec:	4b7b      	ldr	r3, [pc, #492]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef0:	f023 0107 	bic.w	r1, r3, #7
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efa:	4a78      	ldr	r2, [pc, #480]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6513      	str	r3, [r2, #80]	; 0x50
 8003f00:	e003      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003f16:	f04f 0b00 	mov.w	fp, #0
 8003f1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f1e:	d04c      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2a:	d030      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f30:	d829      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f32:	2bc0      	cmp	r3, #192	; 0xc0
 8003f34:	d02d      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f36:	2bc0      	cmp	r3, #192	; 0xc0
 8003f38:	d825      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f3a:	2b80      	cmp	r3, #128	; 0x80
 8003f3c:	d018      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003f3e:	2b80      	cmp	r3, #128	; 0x80
 8003f40:	d821      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003f46:	2b40      	cmp	r3, #64	; 0x40
 8003f48:	d007      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003f4a:	e01c      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4c:	4b63      	ldr	r3, [pc, #396]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	4a62      	ldr	r2, [pc, #392]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f58:	e01c      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5e:	3308      	adds	r3, #8
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 fbe6 	bl	8005734 <RCCEx_PLL2_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f6e:	e011      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f74:	3328      	adds	r3, #40	; 0x28
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 fc8d 	bl	8005898 <RCCEx_PLL3_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f84:	e006      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f8c:	e002      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f9c:	4b4f      	ldr	r3, [pc, #316]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	4a4c      	ldr	r2, [pc, #304]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6513      	str	r3, [r2, #80]	; 0x50
 8003fb0:	e003      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003fc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003fd0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	d053      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fe2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fe6:	d035      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003fe8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fec:	d82e      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ff2:	d031      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003ff4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ff8:	d828      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ffe:	d01a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004004:	d822      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800400a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800400e:	d007      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004010:	e01c      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004012:	4b32      	ldr	r3, [pc, #200]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	4a31      	ldr	r2, [pc, #196]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800401e:	e01c      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004024:	3308      	adds	r3, #8
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f001 fb83 	bl	8005734 <RCCEx_PLL2_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004034:	e011      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403a:	3328      	adds	r3, #40	; 0x28
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f001 fc2a 	bl	8005898 <RCCEx_PLL3_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800404a:	e006      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004052:	e002      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004054:	bf00      	nop
 8004056:	e000      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004062:	4b1e      	ldr	r3, [pc, #120]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004072:	4a1a      	ldr	r2, [pc, #104]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004074:	430b      	orrs	r3, r1
 8004076:	6593      	str	r3, [r2, #88]	; 0x58
 8004078:	e003      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800407e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800408e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004092:	2300      	movs	r3, #0
 8004094:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004098:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800409c:	460b      	mov	r3, r1
 800409e:	4313      	orrs	r3, r2
 80040a0:	d056      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040ae:	d038      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80040b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b4:	d831      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040ba:	d034      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80040bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040c0:	d82b      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040c6:	d01d      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80040c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040cc:	d825      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d006      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80040d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80040d8:	e01f      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040da:	bf00      	nop
 80040dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e0:	4ba2      	ldr	r3, [pc, #648]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	4aa1      	ldr	r2, [pc, #644]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040ec:	e01c      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f2:	3308      	adds	r3, #8
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 fb1c 	bl	8005734 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004102:	e011      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004108:	3328      	adds	r3, #40	; 0x28
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fbc3 	bl	8005898 <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004130:	4b8e      	ldr	r3, [pc, #568]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004140:	4a8a      	ldr	r2, [pc, #552]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004142:	430b      	orrs	r3, r1
 8004144:	6593      	str	r3, [r2, #88]	; 0x58
 8004146:	e003      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800414c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800415c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004166:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d03a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004176:	2b30      	cmp	r3, #48	; 0x30
 8004178:	d01f      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800417a:	2b30      	cmp	r3, #48	; 0x30
 800417c:	d819      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800417e:	2b20      	cmp	r3, #32
 8004180:	d00c      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004182:	2b20      	cmp	r3, #32
 8004184:	d815      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d019      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800418a:	2b10      	cmp	r3, #16
 800418c:	d111      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418e:	4b77      	ldr	r3, [pc, #476]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	4a76      	ldr	r2, [pc, #472]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004198:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800419a:	e011      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a0:	3308      	adds	r3, #8
 80041a2:	2102      	movs	r1, #2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 fac5 	bl	8005734 <RCCEx_PLL2_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80041b0:	e006      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041b8:	e002      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80041ba:	bf00      	nop
 80041bc:	e000      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80041be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80041c8:	4b68      	ldr	r3, [pc, #416]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041cc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80041d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	4a65      	ldr	r2, [pc, #404]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041d8:	430b      	orrs	r3, r1
 80041da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80041f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80041fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004200:	460b      	mov	r3, r1
 8004202:	4313      	orrs	r3, r2
 8004204:	d051      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800420a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004210:	d035      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004216:	d82e      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800421c:	d031      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800421e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004222:	d828      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004228:	d01a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800422a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422e:	d822      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004238:	d007      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800423a:	e01c      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423c:	4b4b      	ldr	r3, [pc, #300]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	4a4a      	ldr	r2, [pc, #296]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004246:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004248:	e01c      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800424e:	3308      	adds	r3, #8
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f001 fa6e 	bl	8005734 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800425e:	e011      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004264:	3328      	adds	r3, #40	; 0x28
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fb15 	bl	8005898 <RCCEx_PLL3_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004274:	e006      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800427c:	e002      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800427e:	bf00      	nop
 8004280:	e000      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004284:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800428c:	4b37      	ldr	r3, [pc, #220]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800428e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004290:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	4a34      	ldr	r2, [pc, #208]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429c:	430b      	orrs	r3, r1
 800429e:	6513      	str	r3, [r2, #80]	; 0x50
 80042a0:	e003      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80042b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042ba:	2300      	movs	r3, #0
 80042bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80042c4:	460b      	mov	r3, r1
 80042c6:	4313      	orrs	r3, r2
 80042c8:	d056      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d4:	d033      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80042d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042da:	d82c      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042e0:	d02f      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80042e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042e6:	d826      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042ec:	d02b      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80042ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042f2:	d820      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f8:	d012      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80042fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042fe:	d81a      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d022      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d115      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430e:	3308      	adds	r3, #8
 8004310:	2101      	movs	r1, #1
 8004312:	4618      	mov	r0, r3
 8004314:	f001 fa0e 	bl	8005734 <RCCEx_PLL2_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800431e:	e015      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004324:	3328      	adds	r3, #40	; 0x28
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f001 fab5 	bl	8005898 <RCCEx_PLL3_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004334:	e00a      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800433c:	e006      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800433e:	bf00      	nop
 8004340:	e004      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004342:	bf00      	nop
 8004344:	e002      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004346:	bf00      	nop
 8004348:	e000      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800434a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800434c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004358:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004362:	4a02      	ldr	r2, [pc, #8]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004364:	430b      	orrs	r3, r1
 8004366:	6513      	str	r3, [r2, #80]	; 0x50
 8004368:	e006      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800436a:	bf00      	nop
 800436c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004374:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004384:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004388:	2300      	movs	r3, #0
 800438a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800438e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004392:	460b      	mov	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	d055      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043a4:	d033      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80043a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043aa:	d82c      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b0:	d02f      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b6:	d826      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043bc:	d02b      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80043be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043c2:	d820      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c8:	d012      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80043ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ce:	d81a      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d022      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80043d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d8:	d115      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043de:	3308      	adds	r3, #8
 80043e0:	2101      	movs	r1, #1
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 f9a6 	bl	8005734 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043ee:	e015      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f4:	3328      	adds	r3, #40	; 0x28
 80043f6:	2101      	movs	r1, #1
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 fa4d 	bl	8005898 <RCCEx_PLL3_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004404:	e00a      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800440e:	bf00      	nop
 8004410:	e004      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800441a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10b      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004424:	4ba3      	ldr	r3, [pc, #652]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004434:	4a9f      	ldr	r2, [pc, #636]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004436:	430b      	orrs	r3, r1
 8004438:	6593      	str	r3, [r2, #88]	; 0x58
 800443a:	e003      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004440:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004454:	2300      	movs	r3, #0
 8004456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800445a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800445e:	460b      	mov	r3, r1
 8004460:	4313      	orrs	r3, r2
 8004462:	d037      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800446e:	d00e      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004474:	d816      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d018      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800447a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800447e:	d111      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004480:	4b8c      	ldr	r3, [pc, #560]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	4a8b      	ldr	r2, [pc, #556]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800448c:	e00f      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004492:	3308      	adds	r3, #8
 8004494:	2101      	movs	r1, #1
 8004496:	4618      	mov	r0, r3
 8004498:	f001 f94c 	bl	8005734 <RCCEx_PLL2_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80044a2:	e004      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044aa:	e000      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80044ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044b6:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	4a7b      	ldr	r2, [pc, #492]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c6:	430b      	orrs	r3, r1
 80044c8:	6513      	str	r3, [r2, #80]	; 0x50
 80044ca:	e003      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80044e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044e4:	2300      	movs	r3, #0
 80044e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80044ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	d039      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d81c      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004541 	.word	0x08004541
 8004508:	08004515 	.word	0x08004515
 800450c:	08004523 	.word	0x08004523
 8004510:	08004541 	.word	0x08004541
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004514:	4b67      	ldr	r3, [pc, #412]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	4a66      	ldr	r2, [pc, #408]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800451a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004520:	e00f      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004526:	3308      	adds	r3, #8
 8004528:	2102      	movs	r1, #2
 800452a:	4618      	mov	r0, r3
 800452c:	f001 f902 	bl	8005734 <RCCEx_PLL2_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004536:	e004      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800453e:	e000      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800454a:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	f023 0103 	bic.w	r1, r3, #3
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004558:	4a56      	ldr	r2, [pc, #344]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800455a:	430b      	orrs	r3, r1
 800455c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800455e:	e003      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004564:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004578:	2300      	movs	r3, #0
 800457a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800457e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004582:	460b      	mov	r3, r1
 8004584:	4313      	orrs	r3, r2
 8004586:	f000 809f 	beq.w	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458a:	4b4b      	ldr	r3, [pc, #300]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a4a      	ldr	r2, [pc, #296]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004596:	f7fc fe8b 	bl	80012b0 <HAL_GetTick>
 800459a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800459e:	e00b      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a0:	f7fc fe86 	bl	80012b0 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b64      	cmp	r3, #100	; 0x64
 80045ae:	d903      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045b6:	e005      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045b8:	4b3f      	ldr	r3, [pc, #252]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ed      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80045c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d179      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80045cc:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045d8:	4053      	eors	r3, r2
 80045da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d015      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e2:	4b34      	ldr	r3, [pc, #208]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045ee:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	4a30      	ldr	r2, [pc, #192]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045fa:	4b2e      	ldr	r3, [pc, #184]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	4a2d      	ldr	r2, [pc, #180]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004604:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004606:	4a2b      	ldr	r2, [pc, #172]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004608:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800460c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004612:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461a:	d118      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fc fe48 	bl	80012b0 <HAL_GetTick>
 8004620:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004624:	e00d      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f7fc fe43 	bl	80012b0 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004630:	1ad2      	subs	r2, r2, r3
 8004632:	f241 3388 	movw	r3, #5000	; 0x1388
 8004636:	429a      	cmp	r2, r3
 8004638:	d903      	bls.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004640:	e005      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004642:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0eb      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004652:	2b00      	cmp	r3, #0
 8004654:	d129      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004666:	d10e      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004674:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004678:	091a      	lsrs	r2, r3, #4
 800467a:	4b10      	ldr	r3, [pc, #64]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800467c:	4013      	ands	r3, r2
 800467e:	4a0d      	ldr	r2, [pc, #52]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004680:	430b      	orrs	r3, r1
 8004682:	6113      	str	r3, [r2, #16]
 8004684:	e005      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800468c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004690:	6113      	str	r3, [r2, #16]
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004694:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800469e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a2:	4a04      	ldr	r2, [pc, #16]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70
 80046a8:	e00e      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80046b2:	e009      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80046b4:	58024400 	.word	0x58024400
 80046b8:	58024800 	.word	0x58024800
 80046bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f002 0301 	and.w	r3, r2, #1
 80046d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f000 8089 	beq.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f0:	2b28      	cmp	r3, #40	; 0x28
 80046f2:	d86b      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	080047d5 	.word	0x080047d5
 8004700:	080047cd 	.word	0x080047cd
 8004704:	080047cd 	.word	0x080047cd
 8004708:	080047cd 	.word	0x080047cd
 800470c:	080047cd 	.word	0x080047cd
 8004710:	080047cd 	.word	0x080047cd
 8004714:	080047cd 	.word	0x080047cd
 8004718:	080047cd 	.word	0x080047cd
 800471c:	080047a1 	.word	0x080047a1
 8004720:	080047cd 	.word	0x080047cd
 8004724:	080047cd 	.word	0x080047cd
 8004728:	080047cd 	.word	0x080047cd
 800472c:	080047cd 	.word	0x080047cd
 8004730:	080047cd 	.word	0x080047cd
 8004734:	080047cd 	.word	0x080047cd
 8004738:	080047cd 	.word	0x080047cd
 800473c:	080047b7 	.word	0x080047b7
 8004740:	080047cd 	.word	0x080047cd
 8004744:	080047cd 	.word	0x080047cd
 8004748:	080047cd 	.word	0x080047cd
 800474c:	080047cd 	.word	0x080047cd
 8004750:	080047cd 	.word	0x080047cd
 8004754:	080047cd 	.word	0x080047cd
 8004758:	080047cd 	.word	0x080047cd
 800475c:	080047d5 	.word	0x080047d5
 8004760:	080047cd 	.word	0x080047cd
 8004764:	080047cd 	.word	0x080047cd
 8004768:	080047cd 	.word	0x080047cd
 800476c:	080047cd 	.word	0x080047cd
 8004770:	080047cd 	.word	0x080047cd
 8004774:	080047cd 	.word	0x080047cd
 8004778:	080047cd 	.word	0x080047cd
 800477c:	080047d5 	.word	0x080047d5
 8004780:	080047cd 	.word	0x080047cd
 8004784:	080047cd 	.word	0x080047cd
 8004788:	080047cd 	.word	0x080047cd
 800478c:	080047cd 	.word	0x080047cd
 8004790:	080047cd 	.word	0x080047cd
 8004794:	080047cd 	.word	0x080047cd
 8004798:	080047cd 	.word	0x080047cd
 800479c:	080047d5 	.word	0x080047d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a4:	3308      	adds	r3, #8
 80047a6:	2101      	movs	r1, #1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 ffc3 	bl	8005734 <RCCEx_PLL2_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80047b4:	e00f      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ba:	3328      	adds	r3, #40	; 0x28
 80047bc:	2101      	movs	r1, #1
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 f86a 	bl	8005898 <RCCEx_PLL3_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80047ca:	e004      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047d2:	e000      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80047d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047de:	4bbf      	ldr	r3, [pc, #764]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ec:	4abb      	ldr	r2, [pc, #748]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047ee:	430b      	orrs	r3, r1
 80047f0:	6553      	str	r3, [r2, #84]	; 0x54
 80047f2:	e003      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f002 0302 	and.w	r3, r2, #2
 8004808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004812:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004816:	460b      	mov	r3, r1
 8004818:	4313      	orrs	r3, r2
 800481a:	d041      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800481c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004822:	2b05      	cmp	r3, #5
 8004824:	d824      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004879 	.word	0x08004879
 8004830:	08004845 	.word	0x08004845
 8004834:	0800485b 	.word	0x0800485b
 8004838:	08004879 	.word	0x08004879
 800483c:	08004879 	.word	0x08004879
 8004840:	08004879 	.word	0x08004879
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004848:	3308      	adds	r3, #8
 800484a:	2101      	movs	r1, #1
 800484c:	4618      	mov	r0, r3
 800484e:	f000 ff71 	bl	8005734 <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004858:	e00f      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485e:	3328      	adds	r3, #40	; 0x28
 8004860:	2101      	movs	r1, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f001 f818 	bl	8005898 <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800486e:	e004      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004882:	4b96      	ldr	r3, [pc, #600]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	f023 0107 	bic.w	r1, r3, #7
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004890:	4a92      	ldr	r2, [pc, #584]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004892:	430b      	orrs	r3, r1
 8004894:	6553      	str	r3, [r2, #84]	; 0x54
 8004896:	e003      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800489c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f002 0304 	and.w	r3, r2, #4
 80048ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048b0:	2300      	movs	r3, #0
 80048b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4313      	orrs	r3, r2
 80048be:	d044      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c8:	2b05      	cmp	r3, #5
 80048ca:	d825      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	08004921 	.word	0x08004921
 80048d8:	080048ed 	.word	0x080048ed
 80048dc:	08004903 	.word	0x08004903
 80048e0:	08004921 	.word	0x08004921
 80048e4:	08004921 	.word	0x08004921
 80048e8:	08004921 	.word	0x08004921
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f0:	3308      	adds	r3, #8
 80048f2:	2101      	movs	r1, #1
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 ff1d 	bl	8005734 <RCCEx_PLL2_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004900:	e00f      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004906:	3328      	adds	r3, #40	; 0x28
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f000 ffc4 	bl	8005898 <RCCEx_PLL3_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004916:	e004      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800491e:	e000      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10b      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800492a:	4b6c      	ldr	r3, [pc, #432]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	f023 0107 	bic.w	r1, r3, #7
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493a:	4a68      	ldr	r2, [pc, #416]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800493c:	430b      	orrs	r3, r1
 800493e:	6593      	str	r3, [r2, #88]	; 0x58
 8004940:	e003      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f002 0320 	and.w	r3, r2, #32
 8004956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800495a:	2300      	movs	r3, #0
 800495c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004960:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004964:	460b      	mov	r3, r1
 8004966:	4313      	orrs	r3, r2
 8004968:	d055      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800496a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004976:	d033      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800497c:	d82c      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004982:	d02f      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004988:	d826      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800498a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800498e:	d02b      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004990:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004994:	d820      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800499a:	d012      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800499c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a0:	d81a      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d022      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80049a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049aa:	d115      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b0:	3308      	adds	r3, #8
 80049b2:	2100      	movs	r1, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 febd 	bl	8005734 <RCCEx_PLL2_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80049c0:	e015      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c6:	3328      	adds	r3, #40	; 0x28
 80049c8:	2102      	movs	r1, #2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 ff64 	bl	8005898 <RCCEx_PLL3_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80049d6:	e00a      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049de:	e006      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049e0:	bf00      	nop
 80049e2:	e004      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049e4:	bf00      	nop
 80049e6:	e002      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049e8:	bf00      	nop
 80049ea:	e000      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049f6:	4b39      	ldr	r3, [pc, #228]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	4a35      	ldr	r2, [pc, #212]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6553      	str	r3, [r2, #84]	; 0x54
 8004a0c:	e003      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a26:	2300      	movs	r3, #0
 8004a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4313      	orrs	r3, r2
 8004a34:	d058      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a42:	d033      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004a44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a48:	d82c      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	d02f      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a54:	d826      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a5a:	d02b      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004a5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a60:	d820      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a66:	d012      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6c:	d81a      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d022      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a76:	d115      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fe57 	bl	8005734 <RCCEx_PLL2_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a8c:	e015      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a92:	3328      	adds	r3, #40	; 0x28
 8004a94:	2102      	movs	r1, #2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fefe 	bl	8005898 <RCCEx_PLL3_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004aa2:	e00a      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004aaa:	e006      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004aac:	bf00      	nop
 8004aae:	e004      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ab0:	bf00      	nop
 8004ab2:	e002      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ab4:	bf00      	nop
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ad2:	4a02      	ldr	r2, [pc, #8]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad8:	e006      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004ada:	bf00      	nop
 8004adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004af8:	2300      	movs	r3, #0
 8004afa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004afe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004b02:	460b      	mov	r3, r1
 8004b04:	4313      	orrs	r3, r2
 8004b06:	d055      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b14:	d033      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004b16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b1a:	d82c      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b20:	d02f      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b26:	d826      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b2c:	d02b      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004b2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b32:	d820      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b38:	d012      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b3e:	d81a      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d022      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b48:	d115      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4e:	3308      	adds	r3, #8
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fdee 	bl	8005734 <RCCEx_PLL2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b5e:	e015      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b64:	3328      	adds	r3, #40	; 0x28
 8004b66:	2102      	movs	r1, #2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fe95 	bl	8005898 <RCCEx_PLL3_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b74:	e00a      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b7c:	e006      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b7e:	bf00      	nop
 8004b80:	e004      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b94:	4ba1      	ldr	r3, [pc, #644]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ba4:	4a9d      	ldr	r2, [pc, #628]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8004baa:	e003      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f002 0308 	and.w	r3, r2, #8
 8004bc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d01e      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be6:	3328      	adds	r3, #40	; 0x28
 8004be8:	2102      	movs	r1, #2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fe54 	bl	8005898 <RCCEx_PLL3_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004bfc:	4b87      	ldr	r3, [pc, #540]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0c:	4a83      	ldr	r2, [pc, #524]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f002 0310 	and.w	r3, r2, #16
 8004c1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c22:	2300      	movs	r3, #0
 8004c24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d01e      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3e:	d10c      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c44:	3328      	adds	r3, #40	; 0x28
 8004c46:	2102      	movs	r1, #2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fe25 	bl	8005898 <RCCEx_PLL3_Config>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c5a:	4b70      	ldr	r3, [pc, #448]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c6a:	4a6c      	ldr	r2, [pc, #432]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c80:	2300      	movs	r3, #0
 8004c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	d03e      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c9c:	d022      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ca2:	d81b      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cac:	d00b      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004cae:	e015      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fd3b 	bl	8005734 <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004cc4:	e00f      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cca:	3328      	adds	r3, #40	; 0x28
 8004ccc:	2102      	movs	r1, #2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fde2 	bl	8005898 <RCCEx_PLL3_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004cda:	e004      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cee:	4b4b      	ldr	r3, [pc, #300]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cfe:	4a47      	ldr	r2, [pc, #284]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d00:	430b      	orrs	r3, r1
 8004d02:	6593      	str	r3, [r2, #88]	; 0x58
 8004d04:	e003      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004d1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004d24:	460b      	mov	r3, r1
 8004d26:	4313      	orrs	r3, r2
 8004d28:	d03b      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d36:	d01f      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004d38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d3c:	d818      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d42:	d003      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004d44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d48:	d007      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004d4a:	e011      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d4c:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	4a32      	ldr	r2, [pc, #200]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d58:	e00f      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5e:	3328      	adds	r3, #40	; 0x28
 8004d60:	2101      	movs	r1, #1
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fd98 	bl	8005898 <RCCEx_PLL3_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d6e:	e004      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d76:	e000      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d82:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	4a22      	ldr	r2, [pc, #136]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6553      	str	r3, [r2, #84]	; 0x54
 8004d98:	e003      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004dae:	673b      	str	r3, [r7, #112]	; 0x70
 8004db0:	2300      	movs	r3, #0
 8004db2:	677b      	str	r3, [r7, #116]	; 0x74
 8004db4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d034      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dcc:	d007      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004dce:	e011      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd0:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4a11      	ldr	r2, [pc, #68]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ddc:	e00e      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de2:	3308      	adds	r3, #8
 8004de4:	2102      	movs	r1, #2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fca4 	bl	8005734 <RCCEx_PLL2_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004df2:	e003      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10d      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e12:	4a02      	ldr	r2, [pc, #8]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e14:	430b      	orrs	r3, r1
 8004e16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e18:	e006      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004e1a:	bf00      	nop
 8004e1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e36:	2300      	movs	r3, #0
 8004e38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	d00c      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e48:	3328      	adds	r3, #40	; 0x28
 8004e4a:	2102      	movs	r1, #2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fd23 	bl	8005898 <RCCEx_PLL3_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004e6a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e70:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004e74:	460b      	mov	r3, r1
 8004e76:	4313      	orrs	r3, r2
 8004e78:	d038      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e86:	d018      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e8c:	d811      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e92:	d014      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e98:	d80b      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d011      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea4:	4bc3      	ldr	r3, [pc, #780]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	4ac2      	ldr	r2, [pc, #776]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004eb8:	e004      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004eba:	bf00      	nop
 8004ebc:	e002      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ebe:	bf00      	nop
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10b      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ecc:	4bb9      	ldr	r3, [pc, #740]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004edc:	4ab5      	ldr	r2, [pc, #724]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	6553      	str	r3, [r2, #84]	; 0x54
 8004ee2:	e003      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ee8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004ef8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004efa:	2300      	movs	r3, #0
 8004efc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004efe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004f02:	460b      	mov	r3, r1
 8004f04:	4313      	orrs	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f08:	4baa      	ldr	r3, [pc, #680]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f16:	4aa7      	ldr	r2, [pc, #668]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004f28:	653b      	str	r3, [r7, #80]	; 0x50
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	657b      	str	r3, [r7, #84]	; 0x54
 8004f2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004f32:	460b      	mov	r3, r1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004f38:	4b9e      	ldr	r3, [pc, #632]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f48:	4a9a      	ldr	r2, [pc, #616]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004f64:	460b      	mov	r3, r1
 8004f66:	4313      	orrs	r3, r2
 8004f68:	d009      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f6a:	4b92      	ldr	r3, [pc, #584]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f78:	4a8e      	ldr	r2, [pc, #568]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004f94:	460b      	mov	r3, r1
 8004f96:	4313      	orrs	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f9a:	4b86      	ldr	r3, [pc, #536]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	4a85      	ldr	r2, [pc, #532]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fa4:	6113      	str	r3, [r2, #16]
 8004fa6:	4b83      	ldr	r3, [pc, #524]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fa8:	6919      	ldr	r1, [r3, #16]
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004fb2:	4a80      	ldr	r2, [pc, #512]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004fd4:	4b77      	ldr	r3, [pc, #476]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	4a74      	ldr	r2, [pc, #464]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004ffe:	460b      	mov	r3, r1
 8005000:	4313      	orrs	r3, r2
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005004:	4b6b      	ldr	r3, [pc, #428]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800500c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005014:	4a67      	ldr	r2, [pc, #412]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005016:	430b      	orrs	r3, r1
 8005018:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	2100      	movs	r1, #0
 8005024:	62b9      	str	r1, [r7, #40]	; 0x28
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800502c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005030:	460b      	mov	r3, r1
 8005032:	4313      	orrs	r3, r2
 8005034:	d011      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800503a:	3308      	adds	r3, #8
 800503c:	2100      	movs	r1, #0
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fb78 	bl	8005734 <RCCEx_PLL2_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800504a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005052:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005056:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	2100      	movs	r1, #0
 8005064:	6239      	str	r1, [r7, #32]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
 800506c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005070:	460b      	mov	r3, r1
 8005072:	4313      	orrs	r3, r2
 8005074:	d011      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507a:	3308      	adds	r3, #8
 800507c:	2101      	movs	r1, #1
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fb58 	bl	8005734 <RCCEx_PLL2_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800508a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005096:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	2100      	movs	r1, #0
 80050a4:	61b9      	str	r1, [r7, #24]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80050b0:	460b      	mov	r3, r1
 80050b2:	4313      	orrs	r3, r2
 80050b4:	d011      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ba:	3308      	adds	r3, #8
 80050bc:	2102      	movs	r1, #2
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fb38 	bl	8005734 <RCCEx_PLL2_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80050ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	2100      	movs	r1, #0
 80050e4:	6139      	str	r1, [r7, #16]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80050f0:	460b      	mov	r3, r1
 80050f2:	4313      	orrs	r3, r2
 80050f4:	d011      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fa:	3328      	adds	r3, #40	; 0x28
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fbca 	bl	8005898 <RCCEx_PLL3_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800510a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005116:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800511a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	2100      	movs	r1, #0
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005130:	460b      	mov	r3, r1
 8005132:	4313      	orrs	r3, r2
 8005134:	d011      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513a:	3328      	adds	r3, #40	; 0x28
 800513c:	2101      	movs	r1, #1
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fbaa 	bl	8005898 <RCCEx_PLL3_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800514a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005156:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	2100      	movs	r1, #0
 8005164:	6039      	str	r1, [r7, #0]
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	607b      	str	r3, [r7, #4]
 800516c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005170:	460b      	mov	r3, r1
 8005172:	4313      	orrs	r3, r2
 8005174:	d011      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517a:	3328      	adds	r3, #40	; 0x28
 800517c:	2102      	movs	r1, #2
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fb8a 	bl	8005898 <RCCEx_PLL3_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800518a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005196:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800519a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e000      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80051ae:	46bd      	mov	sp, r7
 80051b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b4:	58024400 	.word	0x58024400

080051b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80051bc:	f7fe fd96 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b06      	ldr	r3, [pc, #24]	; (80051dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	4904      	ldr	r1, [pc, #16]	; (80051e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80051ce:	5ccb      	ldrb	r3, [r1, r3]
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80051d8:	4618      	mov	r0, r3
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	58024400 	.word	0x58024400
 80051e0:	080151b4 	.word	0x080151b4

080051e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	; 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051ec:	4ba1      	ldr	r3, [pc, #644]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80051f6:	4b9f      	ldr	r3, [pc, #636]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	0b1b      	lsrs	r3, r3, #12
 80051fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005200:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005202:	4b9c      	ldr	r3, [pc, #624]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800520e:	4b99      	ldr	r3, [pc, #612]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	08db      	lsrs	r3, r3, #3
 8005214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005226:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8111 	beq.w	8005454 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b02      	cmp	r3, #2
 8005236:	f000 8083 	beq.w	8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b02      	cmp	r3, #2
 800523e:	f200 80a1 	bhi.w	8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d056      	beq.n	80052fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800524e:	e099      	b.n	8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005250:	4b88      	ldr	r3, [pc, #544]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d02d      	beq.n	80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800525c:	4b85      	ldr	r3, [pc, #532]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	4a84      	ldr	r2, [pc, #528]	; (8005478 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
 800526c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	ee07 3a90 	vmov	s15, r3
 8005274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005286:	4b7b      	ldr	r3, [pc, #492]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005296:	ed97 6a03 	vldr	s12, [r7, #12]
 800529a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800529e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80052b6:	e087      	b.n	80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80052c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ca:	4b6a      	ldr	r3, [pc, #424]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052da:	ed97 6a03 	vldr	s12, [r7, #12]
 80052de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052fa:	e065      	b.n	80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005306:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800530a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530e:	4b59      	ldr	r3, [pc, #356]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005322:	eddf 5a56 	vldr	s11, [pc, #344]	; 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800533e:	e043      	b.n	80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800534e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005352:	4b48      	ldr	r3, [pc, #288]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005362:	ed97 6a03 	vldr	s12, [r7, #12]
 8005366:	eddf 5a45 	vldr	s11, [pc, #276]	; 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800536a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005382:	e021      	b.n	80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005396:	4b37      	ldr	r3, [pc, #220]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80053c8:	4b2a      	ldr	r3, [pc, #168]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	0a5b      	lsrs	r3, r3, #9
 80053ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80053e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ee:	ee17 2a90 	vmov	r2, s15
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80053f6:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800540c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005410:	edd7 6a07 	vldr	s13, [r7, #28]
 8005414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800541c:	ee17 2a90 	vmov	r2, s15
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005424:	4b13      	ldr	r3, [pc, #76]	; (8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	0e1b      	lsrs	r3, r3, #24
 800542a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800543a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800543e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800544a:	ee17 2a90 	vmov	r2, s15
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005452:	e008      	b.n	8005466 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	609a      	str	r2, [r3, #8]
}
 8005466:	bf00      	nop
 8005468:	3724      	adds	r7, #36	; 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
 8005478:	03d09000 	.word	0x03d09000
 800547c:	46000000 	.word	0x46000000
 8005480:	4c742400 	.word	0x4c742400
 8005484:	4a742400 	.word	0x4a742400
 8005488:	4af42400 	.word	0x4af42400

0800548c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800548c:	b480      	push	{r7}
 800548e:	b089      	sub	sp, #36	; 0x24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005494:	4ba1      	ldr	r3, [pc, #644]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800549e:	4b9f      	ldr	r3, [pc, #636]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	0d1b      	lsrs	r3, r3, #20
 80054a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80054aa:	4b9c      	ldr	r3, [pc, #624]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80054b6:	4b99      	ldr	r3, [pc, #612]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	08db      	lsrs	r3, r3, #3
 80054bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	fb02 f303 	mul.w	r3, r2, r3
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8111 	beq.w	80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	f000 8083 	beq.w	80055e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	f200 80a1 	bhi.w	800562c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d056      	beq.n	80055a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80054f6:	e099      	b.n	800562c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054f8:	4b88      	ldr	r3, [pc, #544]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d02d      	beq.n	8005560 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005504:	4b85      	ldr	r3, [pc, #532]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	08db      	lsrs	r3, r3, #3
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	4a84      	ldr	r2, [pc, #528]	; (8005720 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552e:	4b7b      	ldr	r3, [pc, #492]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005542:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800555e:	e087      	b.n	8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005728 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800556e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005572:	4b6a      	ldr	r3, [pc, #424]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005582:	ed97 6a03 	vldr	s12, [r7, #12]
 8005586:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800558a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055a2:	e065      	b.n	8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800572c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b6:	4b59      	ldr	r3, [pc, #356]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055e6:	e043      	b.n	8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80055f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fa:	4b48      	ldr	r3, [pc, #288]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560a:	ed97 6a03 	vldr	s12, [r7, #12]
 800560e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800561a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800561e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800562a:	e021      	b.n	8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005636:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800572c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800563a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563e:	4b37      	ldr	r3, [pc, #220]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005652:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800565a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800566e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005670:	4b2a      	ldr	r3, [pc, #168]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	0a5b      	lsrs	r3, r3, #9
 8005676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800568a:	edd7 6a07 	vldr	s13, [r7, #28]
 800568e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005696:	ee17 2a90 	vmov	r2, s15
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800569e:	4b1f      	ldr	r3, [pc, #124]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	0c1b      	lsrs	r3, r3, #16
 80056a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c4:	ee17 2a90 	vmov	r2, s15
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80056cc:	4b13      	ldr	r3, [pc, #76]	; (800571c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	0e1b      	lsrs	r3, r3, #24
 80056d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80056ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f2:	ee17 2a90 	vmov	r2, s15
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80056fa:	e008      	b.n	800570e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]
}
 800570e:	bf00      	nop
 8005710:	3724      	adds	r7, #36	; 0x24
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	58024400 	.word	0x58024400
 8005720:	03d09000 	.word	0x03d09000
 8005724:	46000000 	.word	0x46000000
 8005728:	4c742400 	.word	0x4c742400
 800572c:	4a742400 	.word	0x4a742400
 8005730:	4af42400 	.word	0x4af42400

08005734 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005742:	4b53      	ldr	r3, [pc, #332]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	2b03      	cmp	r3, #3
 800574c:	d101      	bne.n	8005752 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e099      	b.n	8005886 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005752:	4b4f      	ldr	r3, [pc, #316]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a4e      	ldr	r2, [pc, #312]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005758:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800575c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575e:	f7fb fda7 	bl	80012b0 <HAL_GetTick>
 8005762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005764:	e008      	b.n	8005778 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005766:	f7fb fda3 	bl	80012b0 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e086      	b.n	8005886 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005778:	4b45      	ldr	r3, [pc, #276]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005784:	4b42      	ldr	r3, [pc, #264]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	031b      	lsls	r3, r3, #12
 8005792:	493f      	ldr	r1, [pc, #252]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	628b      	str	r3, [r1, #40]	; 0x28
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	3b01      	subs	r3, #1
 800579e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	025b      	lsls	r3, r3, #9
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	061b      	lsls	r3, r3, #24
 80057c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057c8:	4931      	ldr	r1, [pc, #196]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80057ce:	4b30      	ldr	r3, [pc, #192]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	492d      	ldr	r1, [pc, #180]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80057e0:	4b2b      	ldr	r3, [pc, #172]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	f023 0220 	bic.w	r2, r3, #32
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	4928      	ldr	r1, [pc, #160]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80057f2:	4b27      	ldr	r3, [pc, #156]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	4a26      	ldr	r2, [pc, #152]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 80057f8:	f023 0310 	bic.w	r3, r3, #16
 80057fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057fe:	4b24      	ldr	r3, [pc, #144]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005802:	4b24      	ldr	r3, [pc, #144]	; (8005894 <RCCEx_PLL2_Config+0x160>)
 8005804:	4013      	ands	r3, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	69d2      	ldr	r2, [r2, #28]
 800580a:	00d2      	lsls	r2, r2, #3
 800580c:	4920      	ldr	r1, [pc, #128]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 800580e:	4313      	orrs	r3, r2
 8005810:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005812:	4b1f      	ldr	r3, [pc, #124]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	4a1e      	ldr	r2, [pc, #120]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005818:	f043 0310 	orr.w	r3, r3, #16
 800581c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d106      	bne.n	8005832 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005824:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	4a19      	ldr	r2, [pc, #100]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 800582a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800582e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005830:	e00f      	b.n	8005852 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d106      	bne.n	8005846 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005838:	4b15      	ldr	r3, [pc, #84]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	4a14      	ldr	r2, [pc, #80]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 800583e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005842:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005844:	e005      	b.n	8005852 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	4a11      	ldr	r2, [pc, #68]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 800584c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005850:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005852:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a0e      	ldr	r2, [pc, #56]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 8005858:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800585c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800585e:	f7fb fd27 	bl	80012b0 <HAL_GetTick>
 8005862:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005864:	e008      	b.n	8005878 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005866:	f7fb fd23 	bl	80012b0 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e006      	b.n	8005886 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <RCCEx_PLL2_Config+0x15c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	58024400 	.word	0x58024400
 8005894:	ffff0007 	.word	0xffff0007

08005898 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058a6:	4b53      	ldr	r3, [pc, #332]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d101      	bne.n	80058b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e099      	b.n	80059ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80058b6:	4b4f      	ldr	r3, [pc, #316]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4e      	ldr	r2, [pc, #312]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c2:	f7fb fcf5 	bl	80012b0 <HAL_GetTick>
 80058c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058c8:	e008      	b.n	80058dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80058ca:	f7fb fcf1 	bl	80012b0 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e086      	b.n	80059ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058dc:	4b45      	ldr	r3, [pc, #276]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80058e8:	4b42      	ldr	r3, [pc, #264]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	051b      	lsls	r3, r3, #20
 80058f6:	493f      	ldr	r1, [pc, #252]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	628b      	str	r3, [r1, #40]	; 0x28
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	3b01      	subs	r3, #1
 8005902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	3b01      	subs	r3, #1
 800590c:	025b      	lsls	r3, r3, #9
 800590e:	b29b      	uxth	r3, r3
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	3b01      	subs	r3, #1
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	3b01      	subs	r3, #1
 8005926:	061b      	lsls	r3, r3, #24
 8005928:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800592c:	4931      	ldr	r1, [pc, #196]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800592e:	4313      	orrs	r3, r2
 8005930:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005932:	4b30      	ldr	r3, [pc, #192]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	492d      	ldr	r1, [pc, #180]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005940:	4313      	orrs	r3, r2
 8005942:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005944:	4b2b      	ldr	r3, [pc, #172]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	4928      	ldr	r1, [pc, #160]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005952:	4313      	orrs	r3, r2
 8005954:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005956:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	4a26      	ldr	r2, [pc, #152]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800595c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005960:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005962:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005966:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <RCCEx_PLL3_Config+0x160>)
 8005968:	4013      	ands	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	69d2      	ldr	r2, [r2, #28]
 800596e:	00d2      	lsls	r2, r2, #3
 8005970:	4920      	ldr	r1, [pc, #128]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005972:	4313      	orrs	r3, r2
 8005974:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005976:	4b1f      	ldr	r3, [pc, #124]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800597c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005988:	4b1a      	ldr	r3, [pc, #104]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	4a19      	ldr	r2, [pc, #100]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800598e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005992:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005994:	e00f      	b.n	80059b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d106      	bne.n	80059aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800599c:	4b15      	ldr	r3, [pc, #84]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	4a14      	ldr	r2, [pc, #80]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80059a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059a8:	e005      	b.n	80059b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80059aa:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	4a11      	ldr	r2, [pc, #68]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80059b6:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a0e      	ldr	r2, [pc, #56]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c2:	f7fb fc75 	bl	80012b0 <HAL_GetTick>
 80059c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059c8:	e008      	b.n	80059dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059ca:	f7fb fc71 	bl	80012b0 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e006      	b.n	80059ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <RCCEx_PLL3_Config+0x15c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	58024400 	.word	0x58024400
 80059f8:	ffff0007 	.word	0xffff0007

080059fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e042      	b.n	8005a94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fb f9c7 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2224      	movs	r2, #36	; 0x24
 8005a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0201 	bic.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f82c 	bl	8005a9c <UART_SetConfig>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e022      	b.n	8005a94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fd88 	bl	800656c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fe0f 	bl	80066b0 <UART_CheckIdleState>
 8005a92:	4603      	mov	r3, r0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa0:	b092      	sub	sp, #72	; 0x48
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4bbe      	ldr	r3, [pc, #760]	; (8005dc4 <UART_SetConfig+0x328>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4ab3      	ldr	r2, [pc, #716]	; (8005dc8 <UART_SetConfig+0x32c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b04:	4313      	orrs	r3, r2
 8005b06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	4baf      	ldr	r3, [pc, #700]	; (8005dcc <UART_SetConfig+0x330>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	f023 010f 	bic.w	r1, r3, #15
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4aa6      	ldr	r2, [pc, #664]	; (8005dd0 <UART_SetConfig+0x334>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d177      	bne.n	8005c2c <UART_SetConfig+0x190>
 8005b3c:	4ba5      	ldr	r3, [pc, #660]	; (8005dd4 <UART_SetConfig+0x338>)
 8005b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b44:	2b28      	cmp	r3, #40	; 0x28
 8005b46:	d86d      	bhi.n	8005c24 <UART_SetConfig+0x188>
 8005b48:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <UART_SetConfig+0xb4>)
 8005b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4e:	bf00      	nop
 8005b50:	08005bf5 	.word	0x08005bf5
 8005b54:	08005c25 	.word	0x08005c25
 8005b58:	08005c25 	.word	0x08005c25
 8005b5c:	08005c25 	.word	0x08005c25
 8005b60:	08005c25 	.word	0x08005c25
 8005b64:	08005c25 	.word	0x08005c25
 8005b68:	08005c25 	.word	0x08005c25
 8005b6c:	08005c25 	.word	0x08005c25
 8005b70:	08005bfd 	.word	0x08005bfd
 8005b74:	08005c25 	.word	0x08005c25
 8005b78:	08005c25 	.word	0x08005c25
 8005b7c:	08005c25 	.word	0x08005c25
 8005b80:	08005c25 	.word	0x08005c25
 8005b84:	08005c25 	.word	0x08005c25
 8005b88:	08005c25 	.word	0x08005c25
 8005b8c:	08005c25 	.word	0x08005c25
 8005b90:	08005c05 	.word	0x08005c05
 8005b94:	08005c25 	.word	0x08005c25
 8005b98:	08005c25 	.word	0x08005c25
 8005b9c:	08005c25 	.word	0x08005c25
 8005ba0:	08005c25 	.word	0x08005c25
 8005ba4:	08005c25 	.word	0x08005c25
 8005ba8:	08005c25 	.word	0x08005c25
 8005bac:	08005c25 	.word	0x08005c25
 8005bb0:	08005c0d 	.word	0x08005c0d
 8005bb4:	08005c25 	.word	0x08005c25
 8005bb8:	08005c25 	.word	0x08005c25
 8005bbc:	08005c25 	.word	0x08005c25
 8005bc0:	08005c25 	.word	0x08005c25
 8005bc4:	08005c25 	.word	0x08005c25
 8005bc8:	08005c25 	.word	0x08005c25
 8005bcc:	08005c25 	.word	0x08005c25
 8005bd0:	08005c15 	.word	0x08005c15
 8005bd4:	08005c25 	.word	0x08005c25
 8005bd8:	08005c25 	.word	0x08005c25
 8005bdc:	08005c25 	.word	0x08005c25
 8005be0:	08005c25 	.word	0x08005c25
 8005be4:	08005c25 	.word	0x08005c25
 8005be8:	08005c25 	.word	0x08005c25
 8005bec:	08005c25 	.word	0x08005c25
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e222      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e21e      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c04:	2308      	movs	r3, #8
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0a:	e21a      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e216      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c14:	2320      	movs	r3, #32
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1a:	e212      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c1c:	2340      	movs	r3, #64	; 0x40
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c22:	e20e      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c24:	2380      	movs	r3, #128	; 0x80
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2a:	e20a      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a69      	ldr	r2, [pc, #420]	; (8005dd8 <UART_SetConfig+0x33c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d130      	bne.n	8005c98 <UART_SetConfig+0x1fc>
 8005c36:	4b67      	ldr	r3, [pc, #412]	; (8005dd4 <UART_SetConfig+0x338>)
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	2b05      	cmp	r3, #5
 8005c40:	d826      	bhi.n	8005c90 <UART_SetConfig+0x1f4>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <UART_SetConfig+0x1ac>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c61 	.word	0x08005c61
 8005c4c:	08005c69 	.word	0x08005c69
 8005c50:	08005c71 	.word	0x08005c71
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c81 	.word	0x08005c81
 8005c5c:	08005c89 	.word	0x08005c89
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c66:	e1ec      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c68:	2304      	movs	r3, #4
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6e:	e1e8      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c70:	2308      	movs	r3, #8
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c76:	e1e4      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e1e0      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c80:	2320      	movs	r3, #32
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c86:	e1dc      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c88:	2340      	movs	r3, #64	; 0x40
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8e:	e1d8      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c96:	e1d4      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a4f      	ldr	r2, [pc, #316]	; (8005ddc <UART_SetConfig+0x340>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d130      	bne.n	8005d04 <UART_SetConfig+0x268>
 8005ca2:	4b4c      	ldr	r3, [pc, #304]	; (8005dd4 <UART_SetConfig+0x338>)
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b05      	cmp	r3, #5
 8005cac:	d826      	bhi.n	8005cfc <UART_SetConfig+0x260>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0x218>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005ccd 	.word	0x08005ccd
 8005cb8:	08005cd5 	.word	0x08005cd5
 8005cbc:	08005cdd 	.word	0x08005cdd
 8005cc0:	08005ce5 	.word	0x08005ce5
 8005cc4:	08005ced 	.word	0x08005ced
 8005cc8:	08005cf5 	.word	0x08005cf5
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e1b6      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cda:	e1b2      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e1ae      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e1aa      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005cec:	2320      	movs	r3, #32
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e1a6      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005cf4:	2340      	movs	r3, #64	; 0x40
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfa:	e1a2      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d02:	e19e      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a35      	ldr	r2, [pc, #212]	; (8005de0 <UART_SetConfig+0x344>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d130      	bne.n	8005d70 <UART_SetConfig+0x2d4>
 8005d0e:	4b31      	ldr	r3, [pc, #196]	; (8005dd4 <UART_SetConfig+0x338>)
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	2b05      	cmp	r3, #5
 8005d18:	d826      	bhi.n	8005d68 <UART_SetConfig+0x2cc>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0x284>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d39 	.word	0x08005d39
 8005d24:	08005d41 	.word	0x08005d41
 8005d28:	08005d49 	.word	0x08005d49
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08005d59 	.word	0x08005d59
 8005d34:	08005d61 	.word	0x08005d61
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e180      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e17c      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e178      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e174      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005d58:	2320      	movs	r3, #32
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5e:	e170      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005d60:	2340      	movs	r3, #64	; 0x40
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d66:	e16c      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005d68:	2380      	movs	r3, #128	; 0x80
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6e:	e168      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1b      	ldr	r2, [pc, #108]	; (8005de4 <UART_SetConfig+0x348>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d142      	bne.n	8005e00 <UART_SetConfig+0x364>
 8005d7a:	4b16      	ldr	r3, [pc, #88]	; (8005dd4 <UART_SetConfig+0x338>)
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	2b05      	cmp	r3, #5
 8005d84:	d838      	bhi.n	8005df8 <UART_SetConfig+0x35c>
 8005d86:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <UART_SetConfig+0x2f0>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005da5 	.word	0x08005da5
 8005d90:	08005dad 	.word	0x08005dad
 8005d94:	08005db5 	.word	0x08005db5
 8005d98:	08005dbd 	.word	0x08005dbd
 8005d9c:	08005de9 	.word	0x08005de9
 8005da0:	08005df1 	.word	0x08005df1
 8005da4:	2300      	movs	r3, #0
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e14a      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005dac:	2304      	movs	r3, #4
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db2:	e146      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005db4:	2308      	movs	r3, #8
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dba:	e142      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc2:	e13e      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005dc4:	cfff69f3 	.word	0xcfff69f3
 8005dc8:	58000c00 	.word	0x58000c00
 8005dcc:	11fff4ff 	.word	0x11fff4ff
 8005dd0:	40011000 	.word	0x40011000
 8005dd4:	58024400 	.word	0x58024400
 8005dd8:	40004400 	.word	0x40004400
 8005ddc:	40004800 	.word	0x40004800
 8005de0:	40004c00 	.word	0x40004c00
 8005de4:	40005000 	.word	0x40005000
 8005de8:	2320      	movs	r3, #32
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dee:	e128      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005df0:	2340      	movs	r3, #64	; 0x40
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df6:	e124      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005df8:	2380      	movs	r3, #128	; 0x80
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfe:	e120      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4acb      	ldr	r2, [pc, #812]	; (8006134 <UART_SetConfig+0x698>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d176      	bne.n	8005ef8 <UART_SetConfig+0x45c>
 8005e0a:	4bcb      	ldr	r3, [pc, #812]	; (8006138 <UART_SetConfig+0x69c>)
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e12:	2b28      	cmp	r3, #40	; 0x28
 8005e14:	d86c      	bhi.n	8005ef0 <UART_SetConfig+0x454>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <UART_SetConfig+0x380>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005ec1 	.word	0x08005ec1
 8005e20:	08005ef1 	.word	0x08005ef1
 8005e24:	08005ef1 	.word	0x08005ef1
 8005e28:	08005ef1 	.word	0x08005ef1
 8005e2c:	08005ef1 	.word	0x08005ef1
 8005e30:	08005ef1 	.word	0x08005ef1
 8005e34:	08005ef1 	.word	0x08005ef1
 8005e38:	08005ef1 	.word	0x08005ef1
 8005e3c:	08005ec9 	.word	0x08005ec9
 8005e40:	08005ef1 	.word	0x08005ef1
 8005e44:	08005ef1 	.word	0x08005ef1
 8005e48:	08005ef1 	.word	0x08005ef1
 8005e4c:	08005ef1 	.word	0x08005ef1
 8005e50:	08005ef1 	.word	0x08005ef1
 8005e54:	08005ef1 	.word	0x08005ef1
 8005e58:	08005ef1 	.word	0x08005ef1
 8005e5c:	08005ed1 	.word	0x08005ed1
 8005e60:	08005ef1 	.word	0x08005ef1
 8005e64:	08005ef1 	.word	0x08005ef1
 8005e68:	08005ef1 	.word	0x08005ef1
 8005e6c:	08005ef1 	.word	0x08005ef1
 8005e70:	08005ef1 	.word	0x08005ef1
 8005e74:	08005ef1 	.word	0x08005ef1
 8005e78:	08005ef1 	.word	0x08005ef1
 8005e7c:	08005ed9 	.word	0x08005ed9
 8005e80:	08005ef1 	.word	0x08005ef1
 8005e84:	08005ef1 	.word	0x08005ef1
 8005e88:	08005ef1 	.word	0x08005ef1
 8005e8c:	08005ef1 	.word	0x08005ef1
 8005e90:	08005ef1 	.word	0x08005ef1
 8005e94:	08005ef1 	.word	0x08005ef1
 8005e98:	08005ef1 	.word	0x08005ef1
 8005e9c:	08005ee1 	.word	0x08005ee1
 8005ea0:	08005ef1 	.word	0x08005ef1
 8005ea4:	08005ef1 	.word	0x08005ef1
 8005ea8:	08005ef1 	.word	0x08005ef1
 8005eac:	08005ef1 	.word	0x08005ef1
 8005eb0:	08005ef1 	.word	0x08005ef1
 8005eb4:	08005ef1 	.word	0x08005ef1
 8005eb8:	08005ef1 	.word	0x08005ef1
 8005ebc:	08005ee9 	.word	0x08005ee9
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec6:	e0bc      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ece:	e0b8      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed6:	e0b4      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ede:	e0b0      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005ee0:	2320      	movs	r3, #32
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee6:	e0ac      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005ee8:	2340      	movs	r3, #64	; 0x40
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eee:	e0a8      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005ef0:	2380      	movs	r3, #128	; 0x80
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef6:	e0a4      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a8f      	ldr	r2, [pc, #572]	; (800613c <UART_SetConfig+0x6a0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d130      	bne.n	8005f64 <UART_SetConfig+0x4c8>
 8005f02:	4b8d      	ldr	r3, [pc, #564]	; (8006138 <UART_SetConfig+0x69c>)
 8005f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	d826      	bhi.n	8005f5c <UART_SetConfig+0x4c0>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <UART_SetConfig+0x478>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f2d 	.word	0x08005f2d
 8005f18:	08005f35 	.word	0x08005f35
 8005f1c:	08005f3d 	.word	0x08005f3d
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f4d 	.word	0x08005f4d
 8005f28:	08005f55 	.word	0x08005f55
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f32:	e086      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005f34:	2304      	movs	r3, #4
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3a:	e082      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005f3c:	2308      	movs	r3, #8
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f42:	e07e      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005f44:	2310      	movs	r3, #16
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4a:	e07a      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f52:	e076      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005f54:	2340      	movs	r3, #64	; 0x40
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5a:	e072      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005f5c:	2380      	movs	r3, #128	; 0x80
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f62:	e06e      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a75      	ldr	r2, [pc, #468]	; (8006140 <UART_SetConfig+0x6a4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d130      	bne.n	8005fd0 <UART_SetConfig+0x534>
 8005f6e:	4b72      	ldr	r3, [pc, #456]	; (8006138 <UART_SetConfig+0x69c>)
 8005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	d826      	bhi.n	8005fc8 <UART_SetConfig+0x52c>
 8005f7a:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <UART_SetConfig+0x4e4>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005f99 	.word	0x08005f99
 8005f84:	08005fa1 	.word	0x08005fa1
 8005f88:	08005fa9 	.word	0x08005fa9
 8005f8c:	08005fb1 	.word	0x08005fb1
 8005f90:	08005fb9 	.word	0x08005fb9
 8005f94:	08005fc1 	.word	0x08005fc1
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e050      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005fa0:	2304      	movs	r3, #4
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa6:	e04c      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005fa8:	2308      	movs	r3, #8
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fae:	e048      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb6:	e044      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005fb8:	2320      	movs	r3, #32
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e040      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005fc0:	2340      	movs	r3, #64	; 0x40
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc6:	e03c      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fce:	e038      	b.n	8006042 <UART_SetConfig+0x5a6>
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a5b      	ldr	r2, [pc, #364]	; (8006144 <UART_SetConfig+0x6a8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d130      	bne.n	800603c <UART_SetConfig+0x5a0>
 8005fda:	4b57      	ldr	r3, [pc, #348]	; (8006138 <UART_SetConfig+0x69c>)
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	2b05      	cmp	r3, #5
 8005fe4:	d826      	bhi.n	8006034 <UART_SetConfig+0x598>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0x550>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08006005 	.word	0x08006005
 8005ff0:	0800600d 	.word	0x0800600d
 8005ff4:	08006015 	.word	0x08006015
 8005ff8:	0800601d 	.word	0x0800601d
 8005ffc:	08006025 	.word	0x08006025
 8006000:	0800602d 	.word	0x0800602d
 8006004:	2302      	movs	r3, #2
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600a:	e01a      	b.n	8006042 <UART_SetConfig+0x5a6>
 800600c:	2304      	movs	r3, #4
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006012:	e016      	b.n	8006042 <UART_SetConfig+0x5a6>
 8006014:	2308      	movs	r3, #8
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601a:	e012      	b.n	8006042 <UART_SetConfig+0x5a6>
 800601c:	2310      	movs	r3, #16
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006022:	e00e      	b.n	8006042 <UART_SetConfig+0x5a6>
 8006024:	2320      	movs	r3, #32
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602a:	e00a      	b.n	8006042 <UART_SetConfig+0x5a6>
 800602c:	2340      	movs	r3, #64	; 0x40
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006032:	e006      	b.n	8006042 <UART_SetConfig+0x5a6>
 8006034:	2380      	movs	r3, #128	; 0x80
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603a:	e002      	b.n	8006042 <UART_SetConfig+0x5a6>
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a3f      	ldr	r2, [pc, #252]	; (8006144 <UART_SetConfig+0x6a8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	f040 80f8 	bne.w	800623e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800604e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006052:	2b20      	cmp	r3, #32
 8006054:	dc46      	bgt.n	80060e4 <UART_SetConfig+0x648>
 8006056:	2b02      	cmp	r3, #2
 8006058:	f2c0 8082 	blt.w	8006160 <UART_SetConfig+0x6c4>
 800605c:	3b02      	subs	r3, #2
 800605e:	2b1e      	cmp	r3, #30
 8006060:	d87e      	bhi.n	8006160 <UART_SetConfig+0x6c4>
 8006062:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <UART_SetConfig+0x5cc>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	080060eb 	.word	0x080060eb
 800606c:	08006161 	.word	0x08006161
 8006070:	080060f3 	.word	0x080060f3
 8006074:	08006161 	.word	0x08006161
 8006078:	08006161 	.word	0x08006161
 800607c:	08006161 	.word	0x08006161
 8006080:	08006103 	.word	0x08006103
 8006084:	08006161 	.word	0x08006161
 8006088:	08006161 	.word	0x08006161
 800608c:	08006161 	.word	0x08006161
 8006090:	08006161 	.word	0x08006161
 8006094:	08006161 	.word	0x08006161
 8006098:	08006161 	.word	0x08006161
 800609c:	08006161 	.word	0x08006161
 80060a0:	08006113 	.word	0x08006113
 80060a4:	08006161 	.word	0x08006161
 80060a8:	08006161 	.word	0x08006161
 80060ac:	08006161 	.word	0x08006161
 80060b0:	08006161 	.word	0x08006161
 80060b4:	08006161 	.word	0x08006161
 80060b8:	08006161 	.word	0x08006161
 80060bc:	08006161 	.word	0x08006161
 80060c0:	08006161 	.word	0x08006161
 80060c4:	08006161 	.word	0x08006161
 80060c8:	08006161 	.word	0x08006161
 80060cc:	08006161 	.word	0x08006161
 80060d0:	08006161 	.word	0x08006161
 80060d4:	08006161 	.word	0x08006161
 80060d8:	08006161 	.word	0x08006161
 80060dc:	08006161 	.word	0x08006161
 80060e0:	08006153 	.word	0x08006153
 80060e4:	2b40      	cmp	r3, #64	; 0x40
 80060e6:	d037      	beq.n	8006158 <UART_SetConfig+0x6bc>
 80060e8:	e03a      	b.n	8006160 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80060ea:	f7ff f865 	bl	80051b8 <HAL_RCCEx_GetD3PCLK1Freq>
 80060ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060f0:	e03c      	b.n	800616c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff f874 	bl	80051e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006100:	e034      	b.n	800616c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006102:	f107 0318 	add.w	r3, r7, #24
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff f9c0 	bl	800548c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006110:	e02c      	b.n	800616c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006112:	4b09      	ldr	r3, [pc, #36]	; (8006138 <UART_SetConfig+0x69c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d016      	beq.n	800614c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <UART_SetConfig+0x69c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	08db      	lsrs	r3, r3, #3
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	4a07      	ldr	r2, [pc, #28]	; (8006148 <UART_SetConfig+0x6ac>)
 800612a:	fa22 f303 	lsr.w	r3, r2, r3
 800612e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006130:	e01c      	b.n	800616c <UART_SetConfig+0x6d0>
 8006132:	bf00      	nop
 8006134:	40011400 	.word	0x40011400
 8006138:	58024400 	.word	0x58024400
 800613c:	40007800 	.word	0x40007800
 8006140:	40007c00 	.word	0x40007c00
 8006144:	58000c00 	.word	0x58000c00
 8006148:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800614c:	4b9d      	ldr	r3, [pc, #628]	; (80063c4 <UART_SetConfig+0x928>)
 800614e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006150:	e00c      	b.n	800616c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006152:	4b9d      	ldr	r3, [pc, #628]	; (80063c8 <UART_SetConfig+0x92c>)
 8006154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006156:	e009      	b.n	800616c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800615e:	e005      	b.n	800616c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800616a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800616c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 81de 	beq.w	8006530 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	4a94      	ldr	r2, [pc, #592]	; (80063cc <UART_SetConfig+0x930>)
 800617a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800617e:	461a      	mov	r2, r3
 8006180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006182:	fbb3 f3f2 	udiv	r3, r3, r2
 8006186:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	4413      	add	r3, r2
 8006192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006194:	429a      	cmp	r2, r3
 8006196:	d305      	bcc.n	80061a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800619e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d903      	bls.n	80061ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80061aa:	e1c1      	b.n	8006530 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ae:	2200      	movs	r2, #0
 80061b0:	60bb      	str	r3, [r7, #8]
 80061b2:	60fa      	str	r2, [r7, #12]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	4a84      	ldr	r2, [pc, #528]	; (80063cc <UART_SetConfig+0x930>)
 80061ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2200      	movs	r2, #0
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061ce:	f7fa f8d7 	bl	8000380 <__aeabi_uldivmod>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4610      	mov	r0, r2
 80061d8:	4619      	mov	r1, r3
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	020b      	lsls	r3, r1, #8
 80061e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061e8:	0202      	lsls	r2, r0, #8
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	6849      	ldr	r1, [r1, #4]
 80061ee:	0849      	lsrs	r1, r1, #1
 80061f0:	2000      	movs	r0, #0
 80061f2:	460c      	mov	r4, r1
 80061f4:	4605      	mov	r5, r0
 80061f6:	eb12 0804 	adds.w	r8, r2, r4
 80061fa:	eb43 0905 	adc.w	r9, r3, r5
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	469a      	mov	sl, r3
 8006206:	4693      	mov	fp, r2
 8006208:	4652      	mov	r2, sl
 800620a:	465b      	mov	r3, fp
 800620c:	4640      	mov	r0, r8
 800620e:	4649      	mov	r1, r9
 8006210:	f7fa f8b6 	bl	8000380 <__aeabi_uldivmod>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4613      	mov	r3, r2
 800621a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006222:	d308      	bcc.n	8006236 <UART_SetConfig+0x79a>
 8006224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800622a:	d204      	bcs.n	8006236 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006232:	60da      	str	r2, [r3, #12]
 8006234:	e17c      	b.n	8006530 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800623c:	e178      	b.n	8006530 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006246:	f040 80c5 	bne.w	80063d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800624a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800624e:	2b20      	cmp	r3, #32
 8006250:	dc48      	bgt.n	80062e4 <UART_SetConfig+0x848>
 8006252:	2b00      	cmp	r3, #0
 8006254:	db7b      	blt.n	800634e <UART_SetConfig+0x8b2>
 8006256:	2b20      	cmp	r3, #32
 8006258:	d879      	bhi.n	800634e <UART_SetConfig+0x8b2>
 800625a:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <UART_SetConfig+0x7c4>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	080062eb 	.word	0x080062eb
 8006264:	080062f3 	.word	0x080062f3
 8006268:	0800634f 	.word	0x0800634f
 800626c:	0800634f 	.word	0x0800634f
 8006270:	080062fb 	.word	0x080062fb
 8006274:	0800634f 	.word	0x0800634f
 8006278:	0800634f 	.word	0x0800634f
 800627c:	0800634f 	.word	0x0800634f
 8006280:	0800630b 	.word	0x0800630b
 8006284:	0800634f 	.word	0x0800634f
 8006288:	0800634f 	.word	0x0800634f
 800628c:	0800634f 	.word	0x0800634f
 8006290:	0800634f 	.word	0x0800634f
 8006294:	0800634f 	.word	0x0800634f
 8006298:	0800634f 	.word	0x0800634f
 800629c:	0800634f 	.word	0x0800634f
 80062a0:	0800631b 	.word	0x0800631b
 80062a4:	0800634f 	.word	0x0800634f
 80062a8:	0800634f 	.word	0x0800634f
 80062ac:	0800634f 	.word	0x0800634f
 80062b0:	0800634f 	.word	0x0800634f
 80062b4:	0800634f 	.word	0x0800634f
 80062b8:	0800634f 	.word	0x0800634f
 80062bc:	0800634f 	.word	0x0800634f
 80062c0:	0800634f 	.word	0x0800634f
 80062c4:	0800634f 	.word	0x0800634f
 80062c8:	0800634f 	.word	0x0800634f
 80062cc:	0800634f 	.word	0x0800634f
 80062d0:	0800634f 	.word	0x0800634f
 80062d4:	0800634f 	.word	0x0800634f
 80062d8:	0800634f 	.word	0x0800634f
 80062dc:	0800634f 	.word	0x0800634f
 80062e0:	08006341 	.word	0x08006341
 80062e4:	2b40      	cmp	r3, #64	; 0x40
 80062e6:	d02e      	beq.n	8006346 <UART_SetConfig+0x8aa>
 80062e8:	e031      	b.n	800634e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ea:	f7fd fd2f 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 80062ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062f0:	e033      	b.n	800635a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f2:	f7fd fd41 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 80062f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062f8:	e02f      	b.n	800635a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe ff70 	bl	80051e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006308:	e027      	b.n	800635a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800630a:	f107 0318 	add.w	r3, r7, #24
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff f8bc 	bl	800548c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006318:	e01f      	b.n	800635a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800631a:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <UART_SetConfig+0x934>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d009      	beq.n	800633a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006326:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <UART_SetConfig+0x934>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	08db      	lsrs	r3, r3, #3
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	4a24      	ldr	r2, [pc, #144]	; (80063c4 <UART_SetConfig+0x928>)
 8006332:	fa22 f303 	lsr.w	r3, r2, r3
 8006336:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006338:	e00f      	b.n	800635a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800633a:	4b22      	ldr	r3, [pc, #136]	; (80063c4 <UART_SetConfig+0x928>)
 800633c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800633e:	e00c      	b.n	800635a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006340:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <UART_SetConfig+0x92c>)
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006344:	e009      	b.n	800635a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800634c:	e005      	b.n	800635a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800635a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80e7 	beq.w	8006530 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	4a19      	ldr	r2, [pc, #100]	; (80063cc <UART_SetConfig+0x930>)
 8006368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800636c:	461a      	mov	r2, r3
 800636e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006370:	fbb3 f3f2 	udiv	r3, r3, r2
 8006374:	005a      	lsls	r2, r3, #1
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	085b      	lsrs	r3, r3, #1
 800637c:	441a      	add	r2, r3
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	fbb2 f3f3 	udiv	r3, r2, r3
 8006386:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	2b0f      	cmp	r3, #15
 800638c:	d916      	bls.n	80063bc <UART_SetConfig+0x920>
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006394:	d212      	bcs.n	80063bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	b29b      	uxth	r3, r3
 800639a:	f023 030f 	bic.w	r3, r3, #15
 800639e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063ae:	4313      	orrs	r3, r2
 80063b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80063b8:	60da      	str	r2, [r3, #12]
 80063ba:	e0b9      	b.n	8006530 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80063c2:	e0b5      	b.n	8006530 <UART_SetConfig+0xa94>
 80063c4:	03d09000 	.word	0x03d09000
 80063c8:	003d0900 	.word	0x003d0900
 80063cc:	080151c4 	.word	0x080151c4
 80063d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80063d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80063d8:	2b20      	cmp	r3, #32
 80063da:	dc49      	bgt.n	8006470 <UART_SetConfig+0x9d4>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	db7c      	blt.n	80064da <UART_SetConfig+0xa3e>
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d87a      	bhi.n	80064da <UART_SetConfig+0xa3e>
 80063e4:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <UART_SetConfig+0x950>)
 80063e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ea:	bf00      	nop
 80063ec:	08006477 	.word	0x08006477
 80063f0:	0800647f 	.word	0x0800647f
 80063f4:	080064db 	.word	0x080064db
 80063f8:	080064db 	.word	0x080064db
 80063fc:	08006487 	.word	0x08006487
 8006400:	080064db 	.word	0x080064db
 8006404:	080064db 	.word	0x080064db
 8006408:	080064db 	.word	0x080064db
 800640c:	08006497 	.word	0x08006497
 8006410:	080064db 	.word	0x080064db
 8006414:	080064db 	.word	0x080064db
 8006418:	080064db 	.word	0x080064db
 800641c:	080064db 	.word	0x080064db
 8006420:	080064db 	.word	0x080064db
 8006424:	080064db 	.word	0x080064db
 8006428:	080064db 	.word	0x080064db
 800642c:	080064a7 	.word	0x080064a7
 8006430:	080064db 	.word	0x080064db
 8006434:	080064db 	.word	0x080064db
 8006438:	080064db 	.word	0x080064db
 800643c:	080064db 	.word	0x080064db
 8006440:	080064db 	.word	0x080064db
 8006444:	080064db 	.word	0x080064db
 8006448:	080064db 	.word	0x080064db
 800644c:	080064db 	.word	0x080064db
 8006450:	080064db 	.word	0x080064db
 8006454:	080064db 	.word	0x080064db
 8006458:	080064db 	.word	0x080064db
 800645c:	080064db 	.word	0x080064db
 8006460:	080064db 	.word	0x080064db
 8006464:	080064db 	.word	0x080064db
 8006468:	080064db 	.word	0x080064db
 800646c:	080064cd 	.word	0x080064cd
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d02e      	beq.n	80064d2 <UART_SetConfig+0xa36>
 8006474:	e031      	b.n	80064da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006476:	f7fd fc69 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 800647a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800647c:	e033      	b.n	80064e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800647e:	f7fd fc7b 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 8006482:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006484:	e02f      	b.n	80064e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe feaa 	bl	80051e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006494:	e027      	b.n	80064e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006496:	f107 0318 	add.w	r3, r7, #24
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe fff6 	bl	800548c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064a4:	e01f      	b.n	80064e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064a6:	4b2d      	ldr	r3, [pc, #180]	; (800655c <UART_SetConfig+0xac0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064b2:	4b2a      	ldr	r3, [pc, #168]	; (800655c <UART_SetConfig+0xac0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	08db      	lsrs	r3, r3, #3
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	4a28      	ldr	r2, [pc, #160]	; (8006560 <UART_SetConfig+0xac4>)
 80064be:	fa22 f303 	lsr.w	r3, r2, r3
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064c4:	e00f      	b.n	80064e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80064c6:	4b26      	ldr	r3, [pc, #152]	; (8006560 <UART_SetConfig+0xac4>)
 80064c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064ca:	e00c      	b.n	80064e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064cc:	4b25      	ldr	r3, [pc, #148]	; (8006564 <UART_SetConfig+0xac8>)
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064d0:	e009      	b.n	80064e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064d8:	e005      	b.n	80064e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80064e4:	bf00      	nop
    }

    if (pclk != 0U)
 80064e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d021      	beq.n	8006530 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	4a1d      	ldr	r2, [pc, #116]	; (8006568 <UART_SetConfig+0xacc>)
 80064f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064f6:	461a      	mov	r2, r3
 80064f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	085b      	lsrs	r3, r3, #1
 8006504:	441a      	add	r2, r3
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	fbb2 f3f3 	udiv	r3, r2, r3
 800650e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006512:	2b0f      	cmp	r3, #15
 8006514:	d909      	bls.n	800652a <UART_SetConfig+0xa8e>
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651c:	d205      	bcs.n	800652a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	b29a      	uxth	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60da      	str	r2, [r3, #12]
 8006528:	e002      	b.n	8006530 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2201      	movs	r2, #1
 8006534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2201      	movs	r2, #1
 800653c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2200      	movs	r2, #0
 8006544:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2200      	movs	r2, #0
 800654a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800654c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006550:	4618      	mov	r0, r3
 8006552:	3748      	adds	r7, #72	; 0x48
 8006554:	46bd      	mov	sp, r7
 8006556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800655a:	bf00      	nop
 800655c:	58024400 	.word	0x58024400
 8006560:	03d09000 	.word	0x03d09000
 8006564:	003d0900 	.word	0x003d0900
 8006568:	080151c4 	.word	0x080151c4

0800656c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01a      	beq.n	8006682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800666a:	d10a      	bne.n	8006682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
  }
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b098      	sub	sp, #96	; 0x60
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066c0:	f7fa fdf6 	bl	80012b0 <HAL_GetTick>
 80066c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d12f      	bne.n	8006734 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066dc:	2200      	movs	r2, #0
 80066de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f88e 	bl	8006804 <UART_WaitOnFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d022      	beq.n	8006734 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006702:	653b      	str	r3, [r7, #80]	; 0x50
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800670c:	647b      	str	r3, [r7, #68]	; 0x44
 800670e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800671a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e6      	bne.n	80066ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e063      	b.n	80067fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d149      	bne.n	80067d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006742:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800674a:	2200      	movs	r2, #0
 800674c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f857 	bl	8006804 <UART_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d03c      	beq.n	80067d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	623b      	str	r3, [r7, #32]
   return(result);
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677a:	633b      	str	r3, [r7, #48]	; 0x30
 800677c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e6      	bne.n	800675c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3308      	adds	r3, #8
 8006794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	60fb      	str	r3, [r7, #12]
   return(result);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ae:	61fa      	str	r2, [r7, #28]
 80067b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	69b9      	ldr	r1, [r7, #24]
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	617b      	str	r3, [r7, #20]
   return(result);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e012      	b.n	80067fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3758      	adds	r7, #88	; 0x58
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	4613      	mov	r3, r2
 8006812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006814:	e049      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d045      	beq.n	80068aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681e:	f7fa fd47 	bl	80012b0 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	429a      	cmp	r2, r3
 800682c:	d302      	bcc.n	8006834 <UART_WaitOnFlagUntilTimeout+0x30>
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e048      	b.n	80068ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	d031      	beq.n	80068aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b08      	cmp	r3, #8
 8006852:	d110      	bne.n	8006876 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2208      	movs	r2, #8
 800685a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 f839 	bl	80068d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2208      	movs	r2, #8
 8006866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e029      	b.n	80068ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006884:	d111      	bne.n	80068aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800688e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f81f 	bl	80068d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2220      	movs	r2, #32
 800689a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e00f      	b.n	80068ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69da      	ldr	r2, [r3, #28]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4013      	ands	r3, r2
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	bf0c      	ite	eq
 80068ba:	2301      	moveq	r3, #1
 80068bc:	2300      	movne	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	461a      	mov	r2, r3
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d0a6      	beq.n	8006816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b095      	sub	sp, #84	; 0x54
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fa:	643b      	str	r3, [r7, #64]	; 0x40
 80068fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e6      	bne.n	80068dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	61fb      	str	r3, [r7, #28]
   return(result);
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	4b1e      	ldr	r3, [pc, #120]	; (800699c <UART_EndRxTransfer+0xc8>)
 8006922:	4013      	ands	r3, r2
 8006924:	64bb      	str	r3, [r7, #72]	; 0x48
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800692e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e5      	bne.n	800690e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d118      	bne.n	800697c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	60bb      	str	r3, [r7, #8]
   return(result);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f023 0310 	bic.w	r3, r3, #16
 800695e:	647b      	str	r3, [r7, #68]	; 0x44
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6979      	ldr	r1, [r7, #20]
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	613b      	str	r3, [r7, #16]
   return(result);
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e6      	bne.n	800694a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006990:	bf00      	nop
 8006992:	3754      	adds	r7, #84	; 0x54
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	effffffe 	.word	0xeffffffe

080069a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d101      	bne.n	80069b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80069b2:	2302      	movs	r3, #2
 80069b4:	e027      	b.n	8006a06 <HAL_UARTEx_DisableFifoMode+0x66>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2224      	movs	r2, #36	; 0x24
 80069c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e02d      	b.n	8006a86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2224      	movs	r2, #36	; 0x24
 8006a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0201 	bic.w	r2, r2, #1
 8006a50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f850 	bl	8006b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e02d      	b.n	8006b02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2224      	movs	r2, #36	; 0x24
 8006ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0201 	bic.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f812 	bl	8006b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d108      	bne.n	8006b2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b2c:	e031      	b.n	8006b92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b2e:	2310      	movs	r3, #16
 8006b30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b32:	2310      	movs	r3, #16
 8006b34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	0e5b      	lsrs	r3, r3, #25
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	0f5b      	lsrs	r3, r3, #29
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	7b3a      	ldrb	r2, [r7, #12]
 8006b5a:	4911      	ldr	r1, [pc, #68]	; (8006ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8006b5c:	5c8a      	ldrb	r2, [r1, r2]
 8006b5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b62:	7b3a      	ldrb	r2, [r7, #12]
 8006b64:	490f      	ldr	r1, [pc, #60]	; (8006ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8006b66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b68:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	7b7a      	ldrb	r2, [r7, #13]
 8006b78:	4909      	ldr	r1, [pc, #36]	; (8006ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8006b7a:	5c8a      	ldrb	r2, [r1, r2]
 8006b7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b80:	7b7a      	ldrb	r2, [r7, #13]
 8006b82:	4908      	ldr	r1, [pc, #32]	; (8006ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8006b84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b86:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b92:	bf00      	nop
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	080151dc 	.word	0x080151dc
 8006ba4:	080151e4 	.word	0x080151e4

08006ba8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ba8:	b084      	sub	sp, #16
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	f107 001c 	add.w	r0, r7, #28
 8006bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d120      	bne.n	8006c02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	4b2a      	ldr	r3, [pc, #168]	; (8006c7c <USB_CoreInit+0xd4>)
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d105      	bne.n	8006bf6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 faac 	bl	8007154 <USB_CoreReset>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]
 8006c00:	e01a      	b.n	8006c38 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 faa0 	bl	8007154 <USB_CoreReset>
 8006c14:	4603      	mov	r3, r0
 8006c16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	639a      	str	r2, [r3, #56]	; 0x38
 8006c2a:	e005      	b.n	8006c38 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d116      	bne.n	8006c6c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <USB_CoreInit+0xd8>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f043 0206 	orr.w	r2, r3, #6
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f043 0220 	orr.w	r2, r3, #32
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c78:	b004      	add	sp, #16
 8006c7a:	4770      	bx	lr
 8006c7c:	ffbdffbf 	.word	0xffbdffbf
 8006c80:	03ee0000 	.word	0x03ee0000

08006c84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f023 0201 	bic.w	r2, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d115      	bne.n	8006cf4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	f7fa faf7 	bl	80012c8 <HAL_Delay>
      ms++;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa29 	bl	8007138 <USB_GetMode>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d01e      	beq.n	8006d2a <USB_SetCurrentMode+0x84>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b31      	cmp	r3, #49	; 0x31
 8006cf0:	d9f0      	bls.n	8006cd4 <USB_SetCurrentMode+0x2e>
 8006cf2:	e01a      	b.n	8006d2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d115      	bne.n	8006d26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d06:	2001      	movs	r0, #1
 8006d08:	f7fa fade 	bl	80012c8 <HAL_Delay>
      ms++;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fa10 	bl	8007138 <USB_GetMode>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d005      	beq.n	8006d2a <USB_SetCurrentMode+0x84>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b31      	cmp	r3, #49	; 0x31
 8006d22:	d9f0      	bls.n	8006d06 <USB_SetCurrentMode+0x60>
 8006d24:	e001      	b.n	8006d2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e005      	b.n	8006d36 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b32      	cmp	r3, #50	; 0x32
 8006d2e:	d101      	bne.n	8006d34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d40:	b084      	sub	sp, #16
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b086      	sub	sp, #24
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	e009      	b.n	8006d74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3340      	adds	r3, #64	; 0x40
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	3301      	adds	r3, #1
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	2b0e      	cmp	r3, #14
 8006d78:	d9f2      	bls.n	8006d60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d11c      	bne.n	8006dba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d8e:	f043 0302 	orr.w	r3, r3, #2
 8006d92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e005      	b.n	8006dc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2300      	movs	r3, #0
 8006dd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd8:	4619      	mov	r1, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de0:	461a      	mov	r2, r3
 8006de2:	680b      	ldr	r3, [r1, #0]
 8006de4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d10c      	bne.n	8006e06 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d104      	bne.n	8006dfc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006df2:	2100      	movs	r1, #0
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f965 	bl	80070c4 <USB_SetDevSpeed>
 8006dfa:	e008      	b.n	8006e0e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f960 	bl	80070c4 <USB_SetDevSpeed>
 8006e04:	e003      	b.n	8006e0e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e06:	2103      	movs	r1, #3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f95b 	bl	80070c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e0e:	2110      	movs	r1, #16
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f8f3 	bl	8006ffc <USB_FlushTxFifo>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f91f 	bl	8007064 <USB_FlushRxFifo>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	461a      	mov	r2, r3
 8006e38:	2300      	movs	r3, #0
 8006e3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	461a      	mov	r2, r3
 8006e44:	2300      	movs	r3, #0
 8006e46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e54:	2300      	movs	r3, #0
 8006e56:	613b      	str	r3, [r7, #16]
 8006e58:	e043      	b.n	8006ee2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e70:	d118      	bne.n	8006ea4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	461a      	mov	r2, r3
 8006e86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	e013      	b.n	8006eb6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	e008      	b.n	8006eb6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d3b7      	bcc.n	8006e5a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	e043      	b.n	8006f78 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f06:	d118      	bne.n	8006f3a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	e013      	b.n	8006f4c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	461a      	mov	r2, r3
 8006f32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	e008      	b.n	8006f4c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f46:	461a      	mov	r2, r3
 8006f48:	2300      	movs	r3, #0
 8006f4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f58:	461a      	mov	r2, r3
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	3301      	adds	r3, #1
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d3b7      	bcc.n	8006ef0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006fa0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d105      	bne.n	8006fb4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	f043 0210 	orr.w	r2, r3, #16
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699a      	ldr	r2, [r3, #24]
 8006fb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <USB_DevInit+0x2b4>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	f043 0208 	orr.w	r2, r3, #8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d105      	bne.n	8006fe4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699a      	ldr	r2, [r3, #24]
 8006fdc:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <USB_DevInit+0x2b8>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ff0:	b004      	add	sp, #16
 8006ff2:	4770      	bx	lr
 8006ff4:	803c3800 	.word	0x803c3800
 8006ff8:	40000004 	.word	0x40000004

08006ffc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4a13      	ldr	r2, [pc, #76]	; (8007060 <USB_FlushTxFifo+0x64>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d901      	bls.n	800701c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e01b      	b.n	8007054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	daf2      	bge.n	800700a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	019b      	lsls	r3, r3, #6
 800702c:	f043 0220 	orr.w	r2, r3, #32
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3301      	adds	r3, #1
 8007038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4a08      	ldr	r2, [pc, #32]	; (8007060 <USB_FlushTxFifo+0x64>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d901      	bls.n	8007046 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e006      	b.n	8007054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b20      	cmp	r3, #32
 8007050:	d0f0      	beq.n	8007034 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	00030d40 	.word	0x00030d40

08007064 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4a11      	ldr	r2, [pc, #68]	; (80070c0 <USB_FlushRxFifo+0x5c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d901      	bls.n	8007082 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e018      	b.n	80070b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	daf2      	bge.n	8007070 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2210      	movs	r2, #16
 8007092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3301      	adds	r3, #1
 8007098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4a08      	ldr	r2, [pc, #32]	; (80070c0 <USB_FlushRxFifo+0x5c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d901      	bls.n	80070a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e006      	b.n	80070b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f003 0310 	and.w	r3, r3, #16
 80070ae:	2b10      	cmp	r3, #16
 80070b0:	d0f0      	beq.n	8007094 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	00030d40 	.word	0x00030d40

080070c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	68f9      	ldr	r1, [r7, #12]
 80070e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070e4:	4313      	orrs	r3, r2
 80070e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007110:	f023 0303 	bic.w	r3, r3, #3
 8007114:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007124:	f043 0302 	orr.w	r3, r3, #2
 8007128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	f003 0301 	and.w	r3, r3, #1
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <USB_CoreReset+0x64>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d901      	bls.n	8007172 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e01b      	b.n	80071aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	daf2      	bge.n	8007160 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f043 0201 	orr.w	r2, r3, #1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	3301      	adds	r3, #1
 800718e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4a09      	ldr	r2, [pc, #36]	; (80071b8 <USB_CoreReset+0x64>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d901      	bls.n	800719c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e006      	b.n	80071aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d0f0      	beq.n	800718a <USB_CoreReset+0x36>

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	00030d40 	.word	0x00030d40

080071bc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80071c2:	4b8d      	ldr	r3, [pc, #564]	; (80073f8 <MX_LWIP_Init+0x23c>)
 80071c4:	22c0      	movs	r2, #192	; 0xc0
 80071c6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80071c8:	4b8b      	ldr	r3, [pc, #556]	; (80073f8 <MX_LWIP_Init+0x23c>)
 80071ca:	22a8      	movs	r2, #168	; 0xa8
 80071cc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80071ce:	4b8a      	ldr	r3, [pc, #552]	; (80073f8 <MX_LWIP_Init+0x23c>)
 80071d0:	2200      	movs	r2, #0
 80071d2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 156;
 80071d4:	4b88      	ldr	r3, [pc, #544]	; (80073f8 <MX_LWIP_Init+0x23c>)
 80071d6:	229c      	movs	r2, #156	; 0x9c
 80071d8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 80071da:	4b88      	ldr	r3, [pc, #544]	; (80073fc <MX_LWIP_Init+0x240>)
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 80071e0:	4b86      	ldr	r3, [pc, #536]	; (80073fc <MX_LWIP_Init+0x240>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 80071e6:	4b85      	ldr	r3, [pc, #532]	; (80073fc <MX_LWIP_Init+0x240>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80071ec:	4b83      	ldr	r3, [pc, #524]	; (80073fc <MX_LWIP_Init+0x240>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80071f2:	4b83      	ldr	r3, [pc, #524]	; (8007400 <MX_LWIP_Init+0x244>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80071f8:	4b81      	ldr	r3, [pc, #516]	; (8007400 <MX_LWIP_Init+0x244>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80071fe:	4b80      	ldr	r3, [pc, #512]	; (8007400 <MX_LWIP_Init+0x244>)
 8007200:	2200      	movs	r2, #0
 8007202:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8007204:	4b7e      	ldr	r3, [pc, #504]	; (8007400 <MX_LWIP_Init+0x244>)
 8007206:	2200      	movs	r2, #0
 8007208:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800720a:	f001 fe35 	bl	8008e78 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800720e:	4b7a      	ldr	r3, [pc, #488]	; (80073f8 <MX_LWIP_Init+0x23c>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	061a      	lsls	r2, r3, #24
 8007214:	4b78      	ldr	r3, [pc, #480]	; (80073f8 <MX_LWIP_Init+0x23c>)
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	041b      	lsls	r3, r3, #16
 800721a:	431a      	orrs	r2, r3
 800721c:	4b76      	ldr	r3, [pc, #472]	; (80073f8 <MX_LWIP_Init+0x23c>)
 800721e:	789b      	ldrb	r3, [r3, #2]
 8007220:	021b      	lsls	r3, r3, #8
 8007222:	4313      	orrs	r3, r2
 8007224:	4a74      	ldr	r2, [pc, #464]	; (80073f8 <MX_LWIP_Init+0x23c>)
 8007226:	78d2      	ldrb	r2, [r2, #3]
 8007228:	4313      	orrs	r3, r2
 800722a:	061a      	lsls	r2, r3, #24
 800722c:	4b72      	ldr	r3, [pc, #456]	; (80073f8 <MX_LWIP_Init+0x23c>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	0619      	lsls	r1, r3, #24
 8007232:	4b71      	ldr	r3, [pc, #452]	; (80073f8 <MX_LWIP_Init+0x23c>)
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	041b      	lsls	r3, r3, #16
 8007238:	4319      	orrs	r1, r3
 800723a:	4b6f      	ldr	r3, [pc, #444]	; (80073f8 <MX_LWIP_Init+0x23c>)
 800723c:	789b      	ldrb	r3, [r3, #2]
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	430b      	orrs	r3, r1
 8007242:	496d      	ldr	r1, [pc, #436]	; (80073f8 <MX_LWIP_Init+0x23c>)
 8007244:	78c9      	ldrb	r1, [r1, #3]
 8007246:	430b      	orrs	r3, r1
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800724e:	431a      	orrs	r2, r3
 8007250:	4b69      	ldr	r3, [pc, #420]	; (80073f8 <MX_LWIP_Init+0x23c>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	0619      	lsls	r1, r3, #24
 8007256:	4b68      	ldr	r3, [pc, #416]	; (80073f8 <MX_LWIP_Init+0x23c>)
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	041b      	lsls	r3, r3, #16
 800725c:	4319      	orrs	r1, r3
 800725e:	4b66      	ldr	r3, [pc, #408]	; (80073f8 <MX_LWIP_Init+0x23c>)
 8007260:	789b      	ldrb	r3, [r3, #2]
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	430b      	orrs	r3, r1
 8007266:	4964      	ldr	r1, [pc, #400]	; (80073f8 <MX_LWIP_Init+0x23c>)
 8007268:	78c9      	ldrb	r1, [r1, #3]
 800726a:	430b      	orrs	r3, r1
 800726c:	0a1b      	lsrs	r3, r3, #8
 800726e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007272:	431a      	orrs	r2, r3
 8007274:	4b60      	ldr	r3, [pc, #384]	; (80073f8 <MX_LWIP_Init+0x23c>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	0619      	lsls	r1, r3, #24
 800727a:	4b5f      	ldr	r3, [pc, #380]	; (80073f8 <MX_LWIP_Init+0x23c>)
 800727c:	785b      	ldrb	r3, [r3, #1]
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	4319      	orrs	r1, r3
 8007282:	4b5d      	ldr	r3, [pc, #372]	; (80073f8 <MX_LWIP_Init+0x23c>)
 8007284:	789b      	ldrb	r3, [r3, #2]
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	430b      	orrs	r3, r1
 800728a:	495b      	ldr	r1, [pc, #364]	; (80073f8 <MX_LWIP_Init+0x23c>)
 800728c:	78c9      	ldrb	r1, [r1, #3]
 800728e:	430b      	orrs	r3, r1
 8007290:	0e1b      	lsrs	r3, r3, #24
 8007292:	4313      	orrs	r3, r2
 8007294:	4a5b      	ldr	r2, [pc, #364]	; (8007404 <MX_LWIP_Init+0x248>)
 8007296:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007298:	4b58      	ldr	r3, [pc, #352]	; (80073fc <MX_LWIP_Init+0x240>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	061a      	lsls	r2, r3, #24
 800729e:	4b57      	ldr	r3, [pc, #348]	; (80073fc <MX_LWIP_Init+0x240>)
 80072a0:	785b      	ldrb	r3, [r3, #1]
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	431a      	orrs	r2, r3
 80072a6:	4b55      	ldr	r3, [pc, #340]	; (80073fc <MX_LWIP_Init+0x240>)
 80072a8:	789b      	ldrb	r3, [r3, #2]
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	4313      	orrs	r3, r2
 80072ae:	4a53      	ldr	r2, [pc, #332]	; (80073fc <MX_LWIP_Init+0x240>)
 80072b0:	78d2      	ldrb	r2, [r2, #3]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	061a      	lsls	r2, r3, #24
 80072b6:	4b51      	ldr	r3, [pc, #324]	; (80073fc <MX_LWIP_Init+0x240>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	0619      	lsls	r1, r3, #24
 80072bc:	4b4f      	ldr	r3, [pc, #316]	; (80073fc <MX_LWIP_Init+0x240>)
 80072be:	785b      	ldrb	r3, [r3, #1]
 80072c0:	041b      	lsls	r3, r3, #16
 80072c2:	4319      	orrs	r1, r3
 80072c4:	4b4d      	ldr	r3, [pc, #308]	; (80073fc <MX_LWIP_Init+0x240>)
 80072c6:	789b      	ldrb	r3, [r3, #2]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	430b      	orrs	r3, r1
 80072cc:	494b      	ldr	r1, [pc, #300]	; (80073fc <MX_LWIP_Init+0x240>)
 80072ce:	78c9      	ldrb	r1, [r1, #3]
 80072d0:	430b      	orrs	r3, r1
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072d8:	431a      	orrs	r2, r3
 80072da:	4b48      	ldr	r3, [pc, #288]	; (80073fc <MX_LWIP_Init+0x240>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	0619      	lsls	r1, r3, #24
 80072e0:	4b46      	ldr	r3, [pc, #280]	; (80073fc <MX_LWIP_Init+0x240>)
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	041b      	lsls	r3, r3, #16
 80072e6:	4319      	orrs	r1, r3
 80072e8:	4b44      	ldr	r3, [pc, #272]	; (80073fc <MX_LWIP_Init+0x240>)
 80072ea:	789b      	ldrb	r3, [r3, #2]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	430b      	orrs	r3, r1
 80072f0:	4942      	ldr	r1, [pc, #264]	; (80073fc <MX_LWIP_Init+0x240>)
 80072f2:	78c9      	ldrb	r1, [r1, #3]
 80072f4:	430b      	orrs	r3, r1
 80072f6:	0a1b      	lsrs	r3, r3, #8
 80072f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072fc:	431a      	orrs	r2, r3
 80072fe:	4b3f      	ldr	r3, [pc, #252]	; (80073fc <MX_LWIP_Init+0x240>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	0619      	lsls	r1, r3, #24
 8007304:	4b3d      	ldr	r3, [pc, #244]	; (80073fc <MX_LWIP_Init+0x240>)
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	041b      	lsls	r3, r3, #16
 800730a:	4319      	orrs	r1, r3
 800730c:	4b3b      	ldr	r3, [pc, #236]	; (80073fc <MX_LWIP_Init+0x240>)
 800730e:	789b      	ldrb	r3, [r3, #2]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	430b      	orrs	r3, r1
 8007314:	4939      	ldr	r1, [pc, #228]	; (80073fc <MX_LWIP_Init+0x240>)
 8007316:	78c9      	ldrb	r1, [r1, #3]
 8007318:	430b      	orrs	r3, r1
 800731a:	0e1b      	lsrs	r3, r3, #24
 800731c:	4313      	orrs	r3, r2
 800731e:	4a3a      	ldr	r2, [pc, #232]	; (8007408 <MX_LWIP_Init+0x24c>)
 8007320:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007322:	4b37      	ldr	r3, [pc, #220]	; (8007400 <MX_LWIP_Init+0x244>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	061a      	lsls	r2, r3, #24
 8007328:	4b35      	ldr	r3, [pc, #212]	; (8007400 <MX_LWIP_Init+0x244>)
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	041b      	lsls	r3, r3, #16
 800732e:	431a      	orrs	r2, r3
 8007330:	4b33      	ldr	r3, [pc, #204]	; (8007400 <MX_LWIP_Init+0x244>)
 8007332:	789b      	ldrb	r3, [r3, #2]
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	4313      	orrs	r3, r2
 8007338:	4a31      	ldr	r2, [pc, #196]	; (8007400 <MX_LWIP_Init+0x244>)
 800733a:	78d2      	ldrb	r2, [r2, #3]
 800733c:	4313      	orrs	r3, r2
 800733e:	061a      	lsls	r2, r3, #24
 8007340:	4b2f      	ldr	r3, [pc, #188]	; (8007400 <MX_LWIP_Init+0x244>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	0619      	lsls	r1, r3, #24
 8007346:	4b2e      	ldr	r3, [pc, #184]	; (8007400 <MX_LWIP_Init+0x244>)
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	4319      	orrs	r1, r3
 800734e:	4b2c      	ldr	r3, [pc, #176]	; (8007400 <MX_LWIP_Init+0x244>)
 8007350:	789b      	ldrb	r3, [r3, #2]
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	430b      	orrs	r3, r1
 8007356:	492a      	ldr	r1, [pc, #168]	; (8007400 <MX_LWIP_Init+0x244>)
 8007358:	78c9      	ldrb	r1, [r1, #3]
 800735a:	430b      	orrs	r3, r1
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007362:	431a      	orrs	r2, r3
 8007364:	4b26      	ldr	r3, [pc, #152]	; (8007400 <MX_LWIP_Init+0x244>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	0619      	lsls	r1, r3, #24
 800736a:	4b25      	ldr	r3, [pc, #148]	; (8007400 <MX_LWIP_Init+0x244>)
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	041b      	lsls	r3, r3, #16
 8007370:	4319      	orrs	r1, r3
 8007372:	4b23      	ldr	r3, [pc, #140]	; (8007400 <MX_LWIP_Init+0x244>)
 8007374:	789b      	ldrb	r3, [r3, #2]
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	430b      	orrs	r3, r1
 800737a:	4921      	ldr	r1, [pc, #132]	; (8007400 <MX_LWIP_Init+0x244>)
 800737c:	78c9      	ldrb	r1, [r1, #3]
 800737e:	430b      	orrs	r3, r1
 8007380:	0a1b      	lsrs	r3, r3, #8
 8007382:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007386:	431a      	orrs	r2, r3
 8007388:	4b1d      	ldr	r3, [pc, #116]	; (8007400 <MX_LWIP_Init+0x244>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	0619      	lsls	r1, r3, #24
 800738e:	4b1c      	ldr	r3, [pc, #112]	; (8007400 <MX_LWIP_Init+0x244>)
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	4319      	orrs	r1, r3
 8007396:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <MX_LWIP_Init+0x244>)
 8007398:	789b      	ldrb	r3, [r3, #2]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	430b      	orrs	r3, r1
 800739e:	4918      	ldr	r1, [pc, #96]	; (8007400 <MX_LWIP_Init+0x244>)
 80073a0:	78c9      	ldrb	r1, [r1, #3]
 80073a2:	430b      	orrs	r3, r1
 80073a4:	0e1b      	lsrs	r3, r3, #24
 80073a6:	4313      	orrs	r3, r2
 80073a8:	4a18      	ldr	r2, [pc, #96]	; (800740c <MX_LWIP_Init+0x250>)
 80073aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80073ac:	4b18      	ldr	r3, [pc, #96]	; (8007410 <MX_LWIP_Init+0x254>)
 80073ae:	9302      	str	r3, [sp, #8]
 80073b0:	4b18      	ldr	r3, [pc, #96]	; (8007414 <MX_LWIP_Init+0x258>)
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	2300      	movs	r3, #0
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	4b14      	ldr	r3, [pc, #80]	; (800740c <MX_LWIP_Init+0x250>)
 80073ba:	4a13      	ldr	r2, [pc, #76]	; (8007408 <MX_LWIP_Init+0x24c>)
 80073bc:	4911      	ldr	r1, [pc, #68]	; (8007404 <MX_LWIP_Init+0x248>)
 80073be:	4816      	ldr	r0, [pc, #88]	; (8007418 <MX_LWIP_Init+0x25c>)
 80073c0:	f003 fb58 	bl	800aa74 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80073c4:	4814      	ldr	r0, [pc, #80]	; (8007418 <MX_LWIP_Init+0x25c>)
 80073c6:	f003 fd07 	bl	800add8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80073ca:	4b13      	ldr	r3, [pc, #76]	; (8007418 <MX_LWIP_Init+0x25c>)
 80073cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073d0:	089b      	lsrs	r3, r3, #2
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80073dc:	480e      	ldr	r0, [pc, #56]	; (8007418 <MX_LWIP_Init+0x25c>)
 80073de:	f003 fd0b 	bl	800adf8 <netif_set_up>
 80073e2:	e002      	b.n	80073ea <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80073e4:	480c      	ldr	r0, [pc, #48]	; (8007418 <MX_LWIP_Init+0x25c>)
 80073e6:	f003 fd73 	bl	800aed0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80073ea:	490c      	ldr	r1, [pc, #48]	; (800741c <MX_LWIP_Init+0x260>)
 80073ec:	480a      	ldr	r0, [pc, #40]	; (8007418 <MX_LWIP_Init+0x25c>)
 80073ee:	f003 fda1 	bl	800af34 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80073f2:	bf00      	nop
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	24000684 	.word	0x24000684
 80073fc:	24000688 	.word	0x24000688
 8007400:	2400068c 	.word	0x2400068c
 8007404:	24000678 	.word	0x24000678
 8007408:	2400067c 	.word	0x2400067c
 800740c:	24000680 	.word	0x24000680
 8007410:	080087ed 	.word	0x080087ed
 8007414:	08007715 	.word	0x08007715
 8007418:	24000644 	.word	0x24000644
 800741c:	08007471 	.word	0x08007471

08007420 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8007428:	f7f9 ff42 	bl	80012b0 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	4b08      	ldr	r3, [pc, #32]	; (8007450 <Ethernet_Link_Periodic_Handle+0x30>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b63      	cmp	r3, #99	; 0x63
 8007436:	d907      	bls.n	8007448 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8007438:	f7f9 ff3a 	bl	80012b0 <HAL_GetTick>
 800743c:	4603      	mov	r3, r0
 800743e:	4a04      	ldr	r2, [pc, #16]	; (8007450 <Ethernet_Link_Periodic_Handle+0x30>)
 8007440:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f9b5 	bl	80077b2 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8007448:	bf00      	nop
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	24000640 	.word	0x24000640

08007454 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8007458:	4804      	ldr	r0, [pc, #16]	; (800746c <MX_LWIP_Process+0x18>)
 800745a:	f000 f93b 	bl	80076d4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800745e:	f009 fddb 	bl	8011018 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8007462:	4802      	ldr	r0, [pc, #8]	; (800746c <MX_LWIP_Process+0x18>)
 8007464:	f7ff ffdc 	bl	8007420 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007468:	bf00      	nop
 800746a:	bd80      	pop	{r7, pc}
 800746c:	24000644 	.word	0x24000644

08007470 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007490:	4b3c      	ldr	r3, [pc, #240]	; (8007584 <low_level_init+0x100>)
 8007492:	4a3d      	ldr	r2, [pc, #244]	; (8007588 <low_level_init+0x104>)
 8007494:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x06;
 8007496:	2306      	movs	r3, #6
 8007498:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x06;
 800749a:	2306      	movs	r3, #6
 800749c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x06;
 800749e:	2306      	movs	r3, #6
 80074a0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x06;
 80074a2:	2306      	movs	r3, #6
 80074a4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x06;
 80074a6:	2306      	movs	r3, #6
 80074a8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x05;
 80074aa:	2305      	movs	r3, #5
 80074ac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80074ae:	4a35      	ldr	r2, [pc, #212]	; (8007584 <low_level_init+0x100>)
 80074b0:	f107 0308 	add.w	r3, r7, #8
 80074b4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80074b6:	4b33      	ldr	r3, [pc, #204]	; (8007584 <low_level_init+0x100>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80074bc:	4b31      	ldr	r3, [pc, #196]	; (8007584 <low_level_init+0x100>)
 80074be:	4a33      	ldr	r2, [pc, #204]	; (800758c <low_level_init+0x108>)
 80074c0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80074c2:	4b30      	ldr	r3, [pc, #192]	; (8007584 <low_level_init+0x100>)
 80074c4:	4a32      	ldr	r2, [pc, #200]	; (8007590 <low_level_init+0x10c>)
 80074c6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80074c8:	4b2e      	ldr	r3, [pc, #184]	; (8007584 <low_level_init+0x100>)
 80074ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80074ce:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80074d0:	482c      	ldr	r0, [pc, #176]	; (8007584 <low_level_init+0x100>)
 80074d2:	f7fa f89d 	bl	8001610 <HAL_ETH_Init>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80074da:	2238      	movs	r2, #56	; 0x38
 80074dc:	2100      	movs	r1, #0
 80074de:	482d      	ldr	r0, [pc, #180]	; (8007594 <low_level_init+0x110>)
 80074e0:	f009 ffd8 	bl	8011494 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80074e4:	4b2b      	ldr	r3, [pc, #172]	; (8007594 <low_level_init+0x110>)
 80074e6:	2221      	movs	r2, #33	; 0x21
 80074e8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80074ea:	4b2a      	ldr	r3, [pc, #168]	; (8007594 <low_level_init+0x110>)
 80074ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80074f0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80074f2:	4b28      	ldr	r3, [pc, #160]	; (8007594 <low_level_init+0x110>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80074f8:	4827      	ldr	r0, [pc, #156]	; (8007598 <low_level_init+0x114>)
 80074fa:	f003 f983 	bl	800a804 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2206      	movs	r2, #6
 8007502:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007506:	4b1f      	ldr	r3, [pc, #124]	; (8007584 <low_level_init+0x100>)
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	781a      	ldrb	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <low_level_init+0x100>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	785a      	ldrb	r2, [r3, #1]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800751e:	4b19      	ldr	r3, [pc, #100]	; (8007584 <low_level_init+0x100>)
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	789a      	ldrb	r2, [r3, #2]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800752a:	4b16      	ldr	r3, [pc, #88]	; (8007584 <low_level_init+0x100>)
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	78da      	ldrb	r2, [r3, #3]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007536:	4b13      	ldr	r3, [pc, #76]	; (8007584 <low_level_init+0x100>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	791a      	ldrb	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <low_level_init+0x100>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	795a      	ldrb	r2, [r3, #5]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007554:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800755c:	f043 030a 	orr.w	r3, r3, #10
 8007560:	b2da      	uxtb	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <low_level_init+0xf2>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f91f 	bl	80077b2 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007574:	e001      	b.n	800757a <low_level_init+0xf6>
    Error_Handler();
 8007576:	f7f9 fbfd 	bl	8000d74 <Error_Handler>
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	2400501c 	.word	0x2400501c
 8007588:	40028000 	.word	0x40028000
 800758c:	30040060 	.word	0x30040060
 8007590:	30040000 	.word	0x30040000
 8007594:	240050cc 	.word	0x240050cc
 8007598:	080151ec 	.word	0x080151ec

0800759c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b092      	sub	sp, #72	; 0x48
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80075b4:	f107 030c 	add.w	r3, r7, #12
 80075b8:	2230      	movs	r2, #48	; 0x30
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f009 ff69 	bl	8011494 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80075c2:	f107 030c 	add.w	r3, r7, #12
 80075c6:	2230      	movs	r2, #48	; 0x30
 80075c8:	2100      	movs	r1, #0
 80075ca:	4618      	mov	r0, r3
 80075cc:	f009 ff62 	bl	8011494 <memset>

  for(q = p; q != NULL; q = q->next)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	643b      	str	r3, [r7, #64]	; 0x40
 80075d4:	e045      	b.n	8007662 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80075d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d902      	bls.n	80075e2 <low_level_output+0x46>
      return ERR_IF;
 80075dc:	f06f 030b 	mvn.w	r3, #11
 80075e0:	e055      	b.n	800768e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80075e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e4:	6859      	ldr	r1, [r3, #4]
 80075e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075e8:	4613      	mov	r3, r2
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	3348      	adds	r3, #72	; 0x48
 80075f2:	443b      	add	r3, r7
 80075f4:	3b3c      	subs	r3, #60	; 0x3c
 80075f6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80075f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fa:	895b      	ldrh	r3, [r3, #10]
 80075fc:	4619      	mov	r1, r3
 80075fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007600:	4613      	mov	r3, r2
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	3348      	adds	r3, #72	; 0x48
 800760a:	443b      	add	r3, r7
 800760c:	3b38      	subs	r3, #56	; 0x38
 800760e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007612:	2b00      	cmp	r3, #0
 8007614:	d011      	beq.n	800763a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007618:	1e5a      	subs	r2, r3, #1
 800761a:	f107 000c 	add.w	r0, r7, #12
 800761e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007620:	460b      	mov	r3, r1
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	440b      	add	r3, r1
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	18c1      	adds	r1, r0, r3
 800762a:	4613      	mov	r3, r2
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	3348      	adds	r3, #72	; 0x48
 8007634:	443b      	add	r3, r7
 8007636:	3b34      	subs	r3, #52	; 0x34
 8007638:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800763a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007644:	4613      	mov	r3, r2
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	3348      	adds	r3, #72	; 0x48
 800764e:	443b      	add	r3, r7
 8007650:	3b34      	subs	r3, #52	; 0x34
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007658:	3301      	adds	r3, #1
 800765a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800765c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	643b      	str	r3, [r7, #64]	; 0x40
 8007662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1b6      	bne.n	80075d6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	891b      	ldrh	r3, [r3, #8]
 800766c:	461a      	mov	r2, r3
 800766e:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <low_level_output+0xfc>)
 8007670:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007672:	4a09      	ldr	r2, [pc, #36]	; (8007698 <low_level_output+0xfc>)
 8007674:	f107 030c 	add.w	r3, r7, #12
 8007678:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800767a:	4a07      	ldr	r2, [pc, #28]	; (8007698 <low_level_output+0xfc>)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007680:	2214      	movs	r2, #20
 8007682:	4905      	ldr	r1, [pc, #20]	; (8007698 <low_level_output+0xfc>)
 8007684:	4805      	ldr	r0, [pc, #20]	; (800769c <low_level_output+0x100>)
 8007686:	f7fa f8b3 	bl	80017f0 <HAL_ETH_Transmit>

  return errval;
 800768a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800768e:	4618      	mov	r0, r3
 8007690:	3748      	adds	r7, #72	; 0x48
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	240050cc 	.word	0x240050cc
 800769c:	2400501c 	.word	0x2400501c

080076a0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80076a8:	2300      	movs	r3, #0
 80076aa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80076ac:	4b07      	ldr	r3, [pc, #28]	; (80076cc <low_level_input+0x2c>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d105      	bne.n	80076c0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80076b4:	f107 030c 	add.w	r3, r7, #12
 80076b8:	4619      	mov	r1, r3
 80076ba:	4805      	ldr	r0, [pc, #20]	; (80076d0 <low_level_input+0x30>)
 80076bc:	f7fa f92f 	bl	800191e <HAL_ETH_ReadData>
  }

  return p;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	24005018 	.word	0x24005018
 80076d0:	2400501c 	.word	0x2400501c

080076d4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff ffdd 	bl	80076a0 <low_level_input>
 80076e6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	4798      	blx	r3
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f003 ff98 	bl	800b634 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1ea      	bne.n	80076e0 <ethernetif_input+0xc>
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <ethernetif_init+0x1c>
 8007722:	4b0e      	ldr	r3, [pc, #56]	; (800775c <ethernetif_init+0x48>)
 8007724:	f240 126f 	movw	r2, #367	; 0x16f
 8007728:	490d      	ldr	r1, [pc, #52]	; (8007760 <ethernetif_init+0x4c>)
 800772a:	480e      	ldr	r0, [pc, #56]	; (8007764 <ethernetif_init+0x50>)
 800772c:	f009 feba 	bl	80114a4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2273      	movs	r2, #115	; 0x73
 8007734:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2274      	movs	r2, #116	; 0x74
 800773c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a09      	ldr	r2, [pc, #36]	; (8007768 <ethernetif_init+0x54>)
 8007744:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a08      	ldr	r2, [pc, #32]	; (800776c <ethernetif_init+0x58>)
 800774a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff fe99 	bl	8007484 <low_level_init>

  return ERR_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	0801255c 	.word	0x0801255c
 8007760:	08012578 	.word	0x08012578
 8007764:	08012588 	.word	0x08012588
 8007768:	080081ed 	.word	0x080081ed
 800776c:	0800759d 	.word	0x0800759d

08007770 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800777c:	68f9      	ldr	r1, [r7, #12]
 800777e:	4807      	ldr	r0, [pc, #28]	; (800779c <pbuf_free_custom+0x2c>)
 8007780:	f003 f922 	bl	800a9c8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007784:	4b06      	ldr	r3, [pc, #24]	; (80077a0 <pbuf_free_custom+0x30>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d102      	bne.n	8007792 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800778c:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <pbuf_free_custom+0x30>)
 800778e:	2200      	movs	r2, #0
 8007790:	701a      	strb	r2, [r3, #0]
  }
}
 8007792:	bf00      	nop
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	080151ec 	.word	0x080151ec
 80077a0:	24005018 	.word	0x24005018

080077a4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80077a8:	f7f9 fd82 	bl	80012b0 <HAL_GetTick>
 80077ac:	4603      	mov	r3, r0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]

}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
	...

080077c8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80077d0:	4812      	ldr	r0, [pc, #72]	; (800781c <HAL_ETH_RxAllocateCallback+0x54>)
 80077d2:	f003 f88b 	bl	800a8ec <memp_malloc_pool>
 80077d6:	60f8      	str	r0, [r7, #12]
  if (p)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d014      	beq.n	8007808 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f103 0220 	add.w	r2, r3, #32
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4a0d      	ldr	r2, [pc, #52]	; (8007820 <HAL_ETH_RxAllocateCallback+0x58>)
 80077ec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80077f6:	9201      	str	r2, [sp, #4]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2241      	movs	r2, #65	; 0x41
 80077fe:	2100      	movs	r1, #0
 8007800:	2000      	movs	r0, #0
 8007802:	f003 fd5d 	bl	800b2c0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007806:	e005      	b.n	8007814 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007808:	4b06      	ldr	r3, [pc, #24]	; (8007824 <HAL_ETH_RxAllocateCallback+0x5c>)
 800780a:	2201      	movs	r2, #1
 800780c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	080151ec 	.word	0x080151ec
 8007820:	08007771 	.word	0x08007771
 8007824:	24005018 	.word	0x24005018

08007828 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007828:	b480      	push	{r7}
 800782a:	b08d      	sub	sp, #52	; 0x34
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3b20      	subs	r3, #32
 8007846:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	2200      	movs	r2, #0
 8007852:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007856:	887a      	ldrh	r2, [r7, #2]
 8007858:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	e003      	b.n	8007872 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007870:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007876:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800787e:	e009      	b.n	8007894 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	891a      	ldrh	r2, [r3, #8]
 8007884:	887b      	ldrh	r3, [r7, #2]
 8007886:	4413      	add	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1f2      	bne.n	8007880 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800789a:	887b      	ldrh	r3, [r7, #2]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	623a      	str	r2, [r7, #32]
 80078a0:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dd1d      	ble.n	80078e4 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	f003 021f 	and.w	r2, r3, #31
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	4413      	add	r3, r2
 80078b2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80078b8:	f3bf 8f4f 	dsb	sy
}
 80078bc:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80078be:	4a0d      	ldr	r2, [pc, #52]	; (80078f4 <HAL_ETH_RxLinkCallback+0xcc>)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	3320      	adds	r3, #32
 80078ca:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	3b20      	subs	r3, #32
 80078d0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	dcf2      	bgt.n	80078be <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 80078d8:	f3bf 8f4f 	dsb	sy
}
 80078dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80078de:	f3bf 8f6f 	isb	sy
}
 80078e2:	bf00      	nop
}
 80078e4:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 80078e6:	bf00      	nop
 80078e8:	3734      	adds	r7, #52	; 0x34
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	e000ed00 	.word	0xe000ed00

080078f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	b21a      	sxth	r2, r3
 8007908:	88fb      	ldrh	r3, [r7, #6]
 800790a:	0a1b      	lsrs	r3, r3, #8
 800790c:	b29b      	uxth	r3, r3
 800790e:	b21b      	sxth	r3, r3
 8007910:	4313      	orrs	r3, r2
 8007912:	b21b      	sxth	r3, r3
 8007914:	b29b      	uxth	r3, r3
}
 8007916:	4618      	mov	r0, r3
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	061a      	lsls	r2, r3, #24
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	021b      	lsls	r3, r3, #8
 8007932:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	0a1b      	lsrs	r3, r3, #8
 800793c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007940:	431a      	orrs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	0e1b      	lsrs	r3, r3, #24
 8007946:	4313      	orrs	r3, r2
}
 8007948:	4618      	mov	r0, r3
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800795c:	4915      	ldr	r1, [pc, #84]	; (80079b4 <etharp_free_entry+0x60>)
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	4613      	mov	r3, r2
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	4413      	add	r3, r2
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	440b      	add	r3, r1
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d013      	beq.n	8007998 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8007970:	4910      	ldr	r1, [pc, #64]	; (80079b4 <etharp_free_entry+0x60>)
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	4613      	mov	r3, r2
 8007976:	005b      	lsls	r3, r3, #1
 8007978:	4413      	add	r3, r2
 800797a:	00db      	lsls	r3, r3, #3
 800797c:	440b      	add	r3, r1
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	f003 fe57 	bl	800b634 <pbuf_free>
    arp_table[i].q = NULL;
 8007986:	490b      	ldr	r1, [pc, #44]	; (80079b4 <etharp_free_entry+0x60>)
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	4613      	mov	r3, r2
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	4413      	add	r3, r2
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	440b      	add	r3, r1
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8007998:	4906      	ldr	r1, [pc, #24]	; (80079b4 <etharp_free_entry+0x60>)
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	4613      	mov	r3, r2
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	4413      	add	r3, r2
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	440b      	add	r3, r1
 80079a6:	3314      	adds	r3, #20
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	24005104 	.word	0x24005104

080079b8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80079be:	2300      	movs	r3, #0
 80079c0:	607b      	str	r3, [r7, #4]
 80079c2:	e096      	b.n	8007af2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80079c4:	494f      	ldr	r1, [pc, #316]	; (8007b04 <etharp_tmr+0x14c>)
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	4413      	add	r3, r2
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	440b      	add	r3, r1
 80079d2:	3314      	adds	r3, #20
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80079d8:	78fb      	ldrb	r3, [r7, #3]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 8086 	beq.w	8007aec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80079e0:	4948      	ldr	r1, [pc, #288]	; (8007b04 <etharp_tmr+0x14c>)
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	4613      	mov	r3, r2
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	4413      	add	r3, r2
 80079ea:	00db      	lsls	r3, r3, #3
 80079ec:	440b      	add	r3, r1
 80079ee:	3312      	adds	r3, #18
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	b298      	uxth	r0, r3
 80079f6:	4943      	ldr	r1, [pc, #268]	; (8007b04 <etharp_tmr+0x14c>)
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	4413      	add	r3, r2
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	440b      	add	r3, r1
 8007a04:	3312      	adds	r3, #18
 8007a06:	4602      	mov	r2, r0
 8007a08:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007a0a:	493e      	ldr	r1, [pc, #248]	; (8007b04 <etharp_tmr+0x14c>)
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	4413      	add	r3, r2
 8007a14:	00db      	lsls	r3, r3, #3
 8007a16:	440b      	add	r3, r1
 8007a18:	3312      	adds	r3, #18
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007a20:	d215      	bcs.n	8007a4e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007a22:	4938      	ldr	r1, [pc, #224]	; (8007b04 <etharp_tmr+0x14c>)
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	4413      	add	r3, r2
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	440b      	add	r3, r1
 8007a30:	3314      	adds	r3, #20
 8007a32:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d10e      	bne.n	8007a56 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8007a38:	4932      	ldr	r1, [pc, #200]	; (8007b04 <etharp_tmr+0x14c>)
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	440b      	add	r3, r1
 8007a46:	3312      	adds	r3, #18
 8007a48:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d903      	bls.n	8007a56 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff ff80 	bl	8007954 <etharp_free_entry>
 8007a54:	e04a      	b.n	8007aec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8007a56:	492b      	ldr	r1, [pc, #172]	; (8007b04 <etharp_tmr+0x14c>)
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	4413      	add	r3, r2
 8007a60:	00db      	lsls	r3, r3, #3
 8007a62:	440b      	add	r3, r1
 8007a64:	3314      	adds	r3, #20
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d10a      	bne.n	8007a82 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007a6c:	4925      	ldr	r1, [pc, #148]	; (8007b04 <etharp_tmr+0x14c>)
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4613      	mov	r3, r2
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	4413      	add	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	440b      	add	r3, r1
 8007a7a:	3314      	adds	r3, #20
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	e034      	b.n	8007aec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8007a82:	4920      	ldr	r1, [pc, #128]	; (8007b04 <etharp_tmr+0x14c>)
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	440b      	add	r3, r1
 8007a90:	3314      	adds	r3, #20
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d10a      	bne.n	8007aae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007a98:	491a      	ldr	r1, [pc, #104]	; (8007b04 <etharp_tmr+0x14c>)
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	4413      	add	r3, r2
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	440b      	add	r3, r1
 8007aa6:	3314      	adds	r3, #20
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	e01e      	b.n	8007aec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8007aae:	4915      	ldr	r1, [pc, #84]	; (8007b04 <etharp_tmr+0x14c>)
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	4413      	add	r3, r2
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	440b      	add	r3, r1
 8007abc:	3314      	adds	r3, #20
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d113      	bne.n	8007aec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8007ac4:	490f      	ldr	r1, [pc, #60]	; (8007b04 <etharp_tmr+0x14c>)
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	4413      	add	r3, r2
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	440b      	add	r3, r1
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	4413      	add	r3, r2
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	4a08      	ldr	r2, [pc, #32]	; (8007b04 <etharp_tmr+0x14c>)
 8007ae2:	4413      	add	r3, r2
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f000 fe6e 	bl	80087c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3301      	adds	r3, #1
 8007af0:	607b      	str	r3, [r7, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b09      	cmp	r3, #9
 8007af6:	f77f af65 	ble.w	80079c4 <etharp_tmr+0xc>
      }
    }
  }
}
 8007afa:	bf00      	nop
 8007afc:	bf00      	nop
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	24005104 	.word	0x24005104

08007b08 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	; 0x28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	460b      	mov	r3, r1
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8007b16:	230a      	movs	r3, #10
 8007b18:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b1a:	230a      	movs	r3, #10
 8007b1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8007b1e:	230a      	movs	r3, #10
 8007b20:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8007b26:	230a      	movs	r3, #10
 8007b28:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	83bb      	strh	r3, [r7, #28]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	837b      	strh	r3, [r7, #26]
 8007b32:	2300      	movs	r3, #0
 8007b34:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007b36:	2300      	movs	r3, #0
 8007b38:	843b      	strh	r3, [r7, #32]
 8007b3a:	e0ae      	b.n	8007c9a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8007b3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007b40:	49a6      	ldr	r1, [pc, #664]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007b42:	4613      	mov	r3, r2
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	4413      	add	r3, r2
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	440b      	add	r3, r1
 8007b4c:	3314      	adds	r3, #20
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8007b52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007b56:	2b0a      	cmp	r3, #10
 8007b58:	d105      	bne.n	8007b66 <etharp_find_entry+0x5e>
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d102      	bne.n	8007b66 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8007b60:	8c3b      	ldrh	r3, [r7, #32]
 8007b62:	847b      	strh	r3, [r7, #34]	; 0x22
 8007b64:	e095      	b.n	8007c92 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 8092 	beq.w	8007c92 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d009      	beq.n	8007b88 <etharp_find_entry+0x80>
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d806      	bhi.n	8007b88 <etharp_find_entry+0x80>
 8007b7a:	4b99      	ldr	r3, [pc, #612]	; (8007de0 <etharp_find_entry+0x2d8>)
 8007b7c:	f240 1223 	movw	r2, #291	; 0x123
 8007b80:	4998      	ldr	r1, [pc, #608]	; (8007de4 <etharp_find_entry+0x2dc>)
 8007b82:	4899      	ldr	r0, [pc, #612]	; (8007de8 <etharp_find_entry+0x2e0>)
 8007b84:	f009 fc8e 	bl	80114a4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d020      	beq.n	8007bd0 <etharp_find_entry+0xc8>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6819      	ldr	r1, [r3, #0]
 8007b92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007b96:	4891      	ldr	r0, [pc, #580]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007b98:	4613      	mov	r3, r2
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	4413      	add	r3, r2
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	4403      	add	r3, r0
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4299      	cmp	r1, r3
 8007ba8:	d112      	bne.n	8007bd0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00c      	beq.n	8007bca <etharp_find_entry+0xc2>
 8007bb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007bb4:	4989      	ldr	r1, [pc, #548]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	4413      	add	r3, r2
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	440b      	add	r3, r1
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d102      	bne.n	8007bd0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8007bca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007bce:	e100      	b.n	8007dd2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d140      	bne.n	8007c58 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8007bd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007bda:	4980      	ldr	r1, [pc, #512]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007bdc:	4613      	mov	r3, r2
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	4413      	add	r3, r2
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	440b      	add	r3, r1
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01a      	beq.n	8007c22 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8007bec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007bf0:	497a      	ldr	r1, [pc, #488]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	4413      	add	r3, r2
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	440b      	add	r3, r1
 8007bfc:	3312      	adds	r3, #18
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	8bba      	ldrh	r2, [r7, #28]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d845      	bhi.n	8007c92 <etharp_find_entry+0x18a>
            old_queue = i;
 8007c06:	8c3b      	ldrh	r3, [r7, #32]
 8007c08:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8007c0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007c0e:	4973      	ldr	r1, [pc, #460]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007c10:	4613      	mov	r3, r2
 8007c12:	005b      	lsls	r3, r3, #1
 8007c14:	4413      	add	r3, r2
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	440b      	add	r3, r1
 8007c1a:	3312      	adds	r3, #18
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	83bb      	strh	r3, [r7, #28]
 8007c20:	e037      	b.n	8007c92 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8007c22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007c26:	496d      	ldr	r1, [pc, #436]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007c28:	4613      	mov	r3, r2
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	4413      	add	r3, r2
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	440b      	add	r3, r1
 8007c32:	3312      	adds	r3, #18
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	8b7a      	ldrh	r2, [r7, #26]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d82a      	bhi.n	8007c92 <etharp_find_entry+0x18a>
            old_pending = i;
 8007c3c:	8c3b      	ldrh	r3, [r7, #32]
 8007c3e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8007c40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007c44:	4965      	ldr	r1, [pc, #404]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007c46:	4613      	mov	r3, r2
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	4413      	add	r3, r2
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	440b      	add	r3, r1
 8007c50:	3312      	adds	r3, #18
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	837b      	strh	r3, [r7, #26]
 8007c56:	e01c      	b.n	8007c92 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d919      	bls.n	8007c92 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8007c5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007c62:	495e      	ldr	r1, [pc, #376]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007c64:	4613      	mov	r3, r2
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	4413      	add	r3, r2
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	440b      	add	r3, r1
 8007c6e:	3312      	adds	r3, #18
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	8b3a      	ldrh	r2, [r7, #24]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d80c      	bhi.n	8007c92 <etharp_find_entry+0x18a>
            old_stable = i;
 8007c78:	8c3b      	ldrh	r3, [r7, #32]
 8007c7a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8007c7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007c80:	4956      	ldr	r1, [pc, #344]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007c82:	4613      	mov	r3, r2
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	4413      	add	r3, r2
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	440b      	add	r3, r1
 8007c8c:	3312      	adds	r3, #18
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007c92:	8c3b      	ldrh	r3, [r7, #32]
 8007c94:	3301      	adds	r3, #1
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	843b      	strh	r3, [r7, #32]
 8007c9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007c9e:	2b09      	cmp	r3, #9
 8007ca0:	f77f af4c 	ble.w	8007b3c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d108      	bne.n	8007cc0 <etharp_find_entry+0x1b8>
 8007cae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007cb2:	2b0a      	cmp	r3, #10
 8007cb4:	d107      	bne.n	8007cc6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d102      	bne.n	8007cc6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8007cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc4:	e085      	b.n	8007dd2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8007cc6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007cca:	2b09      	cmp	r3, #9
 8007ccc:	dc02      	bgt.n	8007cd4 <etharp_find_entry+0x1cc>
    i = empty;
 8007cce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007cd0:	843b      	strh	r3, [r7, #32]
 8007cd2:	e039      	b.n	8007d48 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8007cd4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007cd8:	2b09      	cmp	r3, #9
 8007cda:	dc14      	bgt.n	8007d06 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8007cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cde:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8007ce0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007ce4:	493d      	ldr	r1, [pc, #244]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	4413      	add	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	440b      	add	r3, r1
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d018      	beq.n	8007d28 <etharp_find_entry+0x220>
 8007cf6:	4b3a      	ldr	r3, [pc, #232]	; (8007de0 <etharp_find_entry+0x2d8>)
 8007cf8:	f240 126d 	movw	r2, #365	; 0x16d
 8007cfc:	493b      	ldr	r1, [pc, #236]	; (8007dec <etharp_find_entry+0x2e4>)
 8007cfe:	483a      	ldr	r0, [pc, #232]	; (8007de8 <etharp_find_entry+0x2e0>)
 8007d00:	f009 fbd0 	bl	80114a4 <iprintf>
 8007d04:	e010      	b.n	8007d28 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8007d06:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007d0a:	2b09      	cmp	r3, #9
 8007d0c:	dc02      	bgt.n	8007d14 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8007d0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d10:	843b      	strh	r3, [r7, #32]
 8007d12:	e009      	b.n	8007d28 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8007d14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007d18:	2b09      	cmp	r3, #9
 8007d1a:	dc02      	bgt.n	8007d22 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8007d1c:	8bfb      	ldrh	r3, [r7, #30]
 8007d1e:	843b      	strh	r3, [r7, #32]
 8007d20:	e002      	b.n	8007d28 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8007d22:	f04f 33ff 	mov.w	r3, #4294967295
 8007d26:	e054      	b.n	8007dd2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8007d28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007d2c:	2b09      	cmp	r3, #9
 8007d2e:	dd06      	ble.n	8007d3e <etharp_find_entry+0x236>
 8007d30:	4b2b      	ldr	r3, [pc, #172]	; (8007de0 <etharp_find_entry+0x2d8>)
 8007d32:	f240 127f 	movw	r2, #383	; 0x17f
 8007d36:	492e      	ldr	r1, [pc, #184]	; (8007df0 <etharp_find_entry+0x2e8>)
 8007d38:	482b      	ldr	r0, [pc, #172]	; (8007de8 <etharp_find_entry+0x2e0>)
 8007d3a:	f009 fbb3 	bl	80114a4 <iprintf>
    etharp_free_entry(i);
 8007d3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff fe06 	bl	8007954 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8007d48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007d4c:	2b09      	cmp	r3, #9
 8007d4e:	dd06      	ble.n	8007d5e <etharp_find_entry+0x256>
 8007d50:	4b23      	ldr	r3, [pc, #140]	; (8007de0 <etharp_find_entry+0x2d8>)
 8007d52:	f240 1283 	movw	r2, #387	; 0x183
 8007d56:	4926      	ldr	r1, [pc, #152]	; (8007df0 <etharp_find_entry+0x2e8>)
 8007d58:	4823      	ldr	r0, [pc, #140]	; (8007de8 <etharp_find_entry+0x2e0>)
 8007d5a:	f009 fba3 	bl	80114a4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8007d5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007d62:	491e      	ldr	r1, [pc, #120]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007d64:	4613      	mov	r3, r2
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	4413      	add	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	440b      	add	r3, r1
 8007d6e:	3314      	adds	r3, #20
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d006      	beq.n	8007d84 <etharp_find_entry+0x27c>
 8007d76:	4b1a      	ldr	r3, [pc, #104]	; (8007de0 <etharp_find_entry+0x2d8>)
 8007d78:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8007d7c:	491d      	ldr	r1, [pc, #116]	; (8007df4 <etharp_find_entry+0x2ec>)
 8007d7e:	481a      	ldr	r0, [pc, #104]	; (8007de8 <etharp_find_entry+0x2e0>)
 8007d80:	f009 fb90 	bl	80114a4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8007d8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6819      	ldr	r1, [r3, #0]
 8007d92:	4812      	ldr	r0, [pc, #72]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007d94:	4613      	mov	r3, r2
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	4413      	add	r3, r2
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	4403      	add	r3, r0
 8007d9e:	3304      	adds	r3, #4
 8007da0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8007da2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007da6:	490d      	ldr	r1, [pc, #52]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007da8:	4613      	mov	r3, r2
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	4413      	add	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	440b      	add	r3, r1
 8007db2:	3312      	adds	r3, #18
 8007db4:	2200      	movs	r2, #0
 8007db6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8007db8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007dbc:	4907      	ldr	r1, [pc, #28]	; (8007ddc <etharp_find_entry+0x2d4>)
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	4413      	add	r3, r2
 8007dc4:	00db      	lsls	r3, r3, #3
 8007dc6:	440b      	add	r3, r1
 8007dc8:	3308      	adds	r3, #8
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8007dce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3728      	adds	r7, #40	; 0x28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	24005104 	.word	0x24005104
 8007de0:	080125b0 	.word	0x080125b0
 8007de4:	08012614 	.word	0x08012614
 8007de8:	08012654 	.word	0x08012654
 8007dec:	0801267c 	.word	0x0801267c
 8007df0:	08012694 	.word	0x08012694
 8007df4:	080126a8 	.word	0x080126a8

08007df8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e0c:	2b06      	cmp	r3, #6
 8007e0e:	d006      	beq.n	8007e1e <etharp_update_arp_entry+0x26>
 8007e10:	4b48      	ldr	r3, [pc, #288]	; (8007f34 <etharp_update_arp_entry+0x13c>)
 8007e12:	f240 12a9 	movw	r2, #425	; 0x1a9
 8007e16:	4948      	ldr	r1, [pc, #288]	; (8007f38 <etharp_update_arp_entry+0x140>)
 8007e18:	4848      	ldr	r0, [pc, #288]	; (8007f3c <etharp_update_arp_entry+0x144>)
 8007e1a:	f009 fb43 	bl	80114a4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d012      	beq.n	8007e4a <etharp_update_arp_entry+0x52>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00e      	beq.n	8007e4a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68f9      	ldr	r1, [r7, #12]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 facc 	bl	80093d0 <ip4_addr_isbroadcast_u32>
 8007e38:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d105      	bne.n	8007e4a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8007e46:	2be0      	cmp	r3, #224	; 0xe0
 8007e48:	d102      	bne.n	8007e50 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8007e4a:	f06f 030f 	mvn.w	r3, #15
 8007e4e:	e06c      	b.n	8007f2a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4619      	mov	r1, r3
 8007e56:	68b8      	ldr	r0, [r7, #8]
 8007e58:	f7ff fe56 	bl	8007b08 <etharp_find_entry>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8007e60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da02      	bge.n	8007e6e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8007e68:	8afb      	ldrh	r3, [r7, #22]
 8007e6a:	b25b      	sxtb	r3, r3
 8007e6c:	e05d      	b.n	8007f2a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8007e6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007e72:	4933      	ldr	r1, [pc, #204]	; (8007f40 <etharp_update_arp_entry+0x148>)
 8007e74:	4613      	mov	r3, r2
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	4413      	add	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	440b      	add	r3, r1
 8007e7e:	3314      	adds	r3, #20
 8007e80:	2202      	movs	r2, #2
 8007e82:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8007e84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007e88:	492d      	ldr	r1, [pc, #180]	; (8007f40 <etharp_update_arp_entry+0x148>)
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	4413      	add	r3, r2
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	440b      	add	r3, r1
 8007e94:	3308      	adds	r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8007e9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	4413      	add	r3, r2
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	3308      	adds	r3, #8
 8007ea8:	4a25      	ldr	r2, [pc, #148]	; (8007f40 <etharp_update_arp_entry+0x148>)
 8007eaa:	4413      	add	r3, r2
 8007eac:	3304      	adds	r3, #4
 8007eae:	2206      	movs	r2, #6
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f009 fae0 	bl	8011478 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8007eb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007ebc:	4920      	ldr	r1, [pc, #128]	; (8007f40 <etharp_update_arp_entry+0x148>)
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	4413      	add	r3, r2
 8007ec4:	00db      	lsls	r3, r3, #3
 8007ec6:	440b      	add	r3, r1
 8007ec8:	3312      	adds	r3, #18
 8007eca:	2200      	movs	r2, #0
 8007ecc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8007ece:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007ed2:	491b      	ldr	r1, [pc, #108]	; (8007f40 <etharp_update_arp_entry+0x148>)
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	005b      	lsls	r3, r3, #1
 8007ed8:	4413      	add	r3, r2
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	440b      	add	r3, r1
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d021      	beq.n	8007f28 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8007ee4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007ee8:	4915      	ldr	r1, [pc, #84]	; (8007f40 <etharp_update_arp_entry+0x148>)
 8007eea:	4613      	mov	r3, r2
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	4413      	add	r3, r2
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	440b      	add	r3, r1
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8007ef8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007efc:	4910      	ldr	r1, [pc, #64]	; (8007f40 <etharp_update_arp_entry+0x148>)
 8007efe:	4613      	mov	r3, r2
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	4413      	add	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	440b      	add	r3, r1
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8007f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6939      	ldr	r1, [r7, #16]
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 fcf3 	bl	8008908 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8007f22:	6938      	ldr	r0, [r7, #16]
 8007f24:	f003 fb86 	bl	800b634 <pbuf_free>
  }
  return ERR_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	080125b0 	.word	0x080125b0
 8007f38:	080126d4 	.word	0x080126d4
 8007f3c:	08012654 	.word	0x08012654
 8007f40:	24005104 	.word	0x24005104

08007f44 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	e01e      	b.n	8007f90 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8007f52:	4913      	ldr	r1, [pc, #76]	; (8007fa0 <etharp_cleanup_netif+0x5c>)
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4613      	mov	r3, r2
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	4413      	add	r3, r2
 8007f5c:	00db      	lsls	r3, r3, #3
 8007f5e:	440b      	add	r3, r1
 8007f60:	3314      	adds	r3, #20
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00e      	beq.n	8007f8a <etharp_cleanup_netif+0x46>
 8007f6c:	490c      	ldr	r1, [pc, #48]	; (8007fa0 <etharp_cleanup_netif+0x5c>)
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4613      	mov	r3, r2
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	4413      	add	r3, r2
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	440b      	add	r3, r1
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d102      	bne.n	8007f8a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff fce5 	bl	8007954 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b09      	cmp	r3, #9
 8007f94:	dddd      	ble.n	8007f52 <etharp_cleanup_netif+0xe>
    }
  }
}
 8007f96:	bf00      	nop
 8007f98:	bf00      	nop
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	24005104 	.word	0x24005104

08007fa4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8007fa4:	b5b0      	push	{r4, r5, r7, lr}
 8007fa6:	b08a      	sub	sp, #40	; 0x28
 8007fa8:	af04      	add	r7, sp, #16
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d107      	bne.n	8007fc4 <etharp_input+0x20>
 8007fb4:	4b3d      	ldr	r3, [pc, #244]	; (80080ac <etharp_input+0x108>)
 8007fb6:	f240 228a 	movw	r2, #650	; 0x28a
 8007fba:	493d      	ldr	r1, [pc, #244]	; (80080b0 <etharp_input+0x10c>)
 8007fbc:	483d      	ldr	r0, [pc, #244]	; (80080b4 <etharp_input+0x110>)
 8007fbe:	f009 fa71 	bl	80114a4 <iprintf>
 8007fc2:	e06f      	b.n	80080a4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fd4:	d10c      	bne.n	8007ff0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8007fda:	2b06      	cmp	r3, #6
 8007fdc:	d108      	bne.n	8007ff0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d104      	bne.n	8007ff0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	d003      	beq.n	8007ff8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f003 fb1f 	bl	800b634 <pbuf_free>
    return;
 8007ff6:	e055      	b.n	80080a4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	330e      	adds	r3, #14
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	3318      	adds	r3, #24
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	3304      	adds	r3, #4
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d102      	bne.n	8008018 <etharp_input+0x74>
    for_us = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	75fb      	strb	r3, [r7, #23]
 8008016:	e009      	b.n	800802c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	3304      	adds	r3, #4
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	bf0c      	ite	eq
 8008024:	2301      	moveq	r3, #1
 8008026:	2300      	movne	r3, #0
 8008028:	b2db      	uxtb	r3, r3
 800802a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f103 0208 	add.w	r2, r3, #8
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <etharp_input+0x98>
 8008038:	2301      	movs	r3, #1
 800803a:	e000      	b.n	800803e <etharp_input+0x9a>
 800803c:	2302      	movs	r3, #2
 800803e:	f107 010c 	add.w	r1, r7, #12
 8008042:	6838      	ldr	r0, [r7, #0]
 8008044:	f7ff fed8 	bl	8007df8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	88db      	ldrh	r3, [r3, #6]
 800804c:	b29b      	uxth	r3, r3
 800804e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008052:	d003      	beq.n	800805c <etharp_input+0xb8>
 8008054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008058:	d01e      	beq.n	8008098 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800805a:	e020      	b.n	800809e <etharp_input+0xfa>
      if (for_us) {
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d01c      	beq.n	800809c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800807c:	2102      	movs	r1, #2
 800807e:	9103      	str	r1, [sp, #12]
 8008080:	f107 010c 	add.w	r1, r7, #12
 8008084:	9102      	str	r1, [sp, #8]
 8008086:	9201      	str	r2, [sp, #4]
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	462b      	mov	r3, r5
 800808c:	4622      	mov	r2, r4
 800808e:	4601      	mov	r1, r0
 8008090:	6838      	ldr	r0, [r7, #0]
 8008092:	f000 faeb 	bl	800866c <etharp_raw>
      break;
 8008096:	e001      	b.n	800809c <etharp_input+0xf8>
      break;
 8008098:	bf00      	nop
 800809a:	e000      	b.n	800809e <etharp_input+0xfa>
      break;
 800809c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f003 fac8 	bl	800b634 <pbuf_free>
}
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bdb0      	pop	{r4, r5, r7, pc}
 80080aa:	bf00      	nop
 80080ac:	080125b0 	.word	0x080125b0
 80080b0:	0801272c 	.word	0x0801272c
 80080b4:	08012654 	.word	0x08012654

080080b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af02      	add	r7, sp, #8
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80080c6:	79fa      	ldrb	r2, [r7, #7]
 80080c8:	4944      	ldr	r1, [pc, #272]	; (80081dc <etharp_output_to_arp_index+0x124>)
 80080ca:	4613      	mov	r3, r2
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	4413      	add	r3, r2
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	440b      	add	r3, r1
 80080d4:	3314      	adds	r3, #20
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d806      	bhi.n	80080ea <etharp_output_to_arp_index+0x32>
 80080dc:	4b40      	ldr	r3, [pc, #256]	; (80081e0 <etharp_output_to_arp_index+0x128>)
 80080de:	f240 22ee 	movw	r2, #750	; 0x2ee
 80080e2:	4940      	ldr	r1, [pc, #256]	; (80081e4 <etharp_output_to_arp_index+0x12c>)
 80080e4:	4840      	ldr	r0, [pc, #256]	; (80081e8 <etharp_output_to_arp_index+0x130>)
 80080e6:	f009 f9dd 	bl	80114a4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80080ea:	79fa      	ldrb	r2, [r7, #7]
 80080ec:	493b      	ldr	r1, [pc, #236]	; (80081dc <etharp_output_to_arp_index+0x124>)
 80080ee:	4613      	mov	r3, r2
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	4413      	add	r3, r2
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	440b      	add	r3, r1
 80080f8:	3314      	adds	r3, #20
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d153      	bne.n	80081a8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008100:	79fa      	ldrb	r2, [r7, #7]
 8008102:	4936      	ldr	r1, [pc, #216]	; (80081dc <etharp_output_to_arp_index+0x124>)
 8008104:	4613      	mov	r3, r2
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	4413      	add	r3, r2
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	440b      	add	r3, r1
 800810e:	3312      	adds	r3, #18
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008116:	d919      	bls.n	800814c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008118:	79fa      	ldrb	r2, [r7, #7]
 800811a:	4613      	mov	r3, r2
 800811c:	005b      	lsls	r3, r3, #1
 800811e:	4413      	add	r3, r2
 8008120:	00db      	lsls	r3, r3, #3
 8008122:	4a2e      	ldr	r2, [pc, #184]	; (80081dc <etharp_output_to_arp_index+0x124>)
 8008124:	4413      	add	r3, r2
 8008126:	3304      	adds	r3, #4
 8008128:	4619      	mov	r1, r3
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 fb4c 	bl	80087c8 <etharp_request>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d138      	bne.n	80081a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008136:	79fa      	ldrb	r2, [r7, #7]
 8008138:	4928      	ldr	r1, [pc, #160]	; (80081dc <etharp_output_to_arp_index+0x124>)
 800813a:	4613      	mov	r3, r2
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	4413      	add	r3, r2
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	440b      	add	r3, r1
 8008144:	3314      	adds	r3, #20
 8008146:	2203      	movs	r2, #3
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	e02d      	b.n	80081a8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800814c:	79fa      	ldrb	r2, [r7, #7]
 800814e:	4923      	ldr	r1, [pc, #140]	; (80081dc <etharp_output_to_arp_index+0x124>)
 8008150:	4613      	mov	r3, r2
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	4413      	add	r3, r2
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	440b      	add	r3, r1
 800815a:	3312      	adds	r3, #18
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008162:	d321      	bcc.n	80081a8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008164:	79fa      	ldrb	r2, [r7, #7]
 8008166:	4613      	mov	r3, r2
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	4413      	add	r3, r2
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	4a1b      	ldr	r2, [pc, #108]	; (80081dc <etharp_output_to_arp_index+0x124>)
 8008170:	4413      	add	r3, r2
 8008172:	1d19      	adds	r1, r3, #4
 8008174:	79fa      	ldrb	r2, [r7, #7]
 8008176:	4613      	mov	r3, r2
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	4413      	add	r3, r2
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	3308      	adds	r3, #8
 8008180:	4a16      	ldr	r2, [pc, #88]	; (80081dc <etharp_output_to_arp_index+0x124>)
 8008182:	4413      	add	r3, r2
 8008184:	3304      	adds	r3, #4
 8008186:	461a      	mov	r2, r3
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 fafb 	bl	8008784 <etharp_request_dst>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008194:	79fa      	ldrb	r2, [r7, #7]
 8008196:	4911      	ldr	r1, [pc, #68]	; (80081dc <etharp_output_to_arp_index+0x124>)
 8008198:	4613      	mov	r3, r2
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	4413      	add	r3, r2
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	440b      	add	r3, r1
 80081a2:	3314      	adds	r3, #20
 80081a4:	2203      	movs	r2, #3
 80081a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80081ae:	79fa      	ldrb	r2, [r7, #7]
 80081b0:	4613      	mov	r3, r2
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	4413      	add	r3, r2
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	3308      	adds	r3, #8
 80081ba:	4a08      	ldr	r2, [pc, #32]	; (80081dc <etharp_output_to_arp_index+0x124>)
 80081bc:	4413      	add	r3, r2
 80081be:	3304      	adds	r3, #4
 80081c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081c4:	9200      	str	r2, [sp, #0]
 80081c6:	460a      	mov	r2, r1
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 fb9c 	bl	8008908 <ethernet_output>
 80081d0:	4603      	mov	r3, r0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	24005104 	.word	0x24005104
 80081e0:	080125b0 	.word	0x080125b0
 80081e4:	0801274c 	.word	0x0801274c
 80081e8:	08012654 	.word	0x08012654

080081ec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	; 0x28
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <etharp_output+0x24>
 8008202:	4b73      	ldr	r3, [pc, #460]	; (80083d0 <etharp_output+0x1e4>)
 8008204:	f240 321e 	movw	r2, #798	; 0x31e
 8008208:	4972      	ldr	r1, [pc, #456]	; (80083d4 <etharp_output+0x1e8>)
 800820a:	4873      	ldr	r0, [pc, #460]	; (80083d8 <etharp_output+0x1ec>)
 800820c:	f009 f94a 	bl	80114a4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d106      	bne.n	8008224 <etharp_output+0x38>
 8008216:	4b6e      	ldr	r3, [pc, #440]	; (80083d0 <etharp_output+0x1e4>)
 8008218:	f240 321f 	movw	r2, #799	; 0x31f
 800821c:	496f      	ldr	r1, [pc, #444]	; (80083dc <etharp_output+0x1f0>)
 800821e:	486e      	ldr	r0, [pc, #440]	; (80083d8 <etharp_output+0x1ec>)
 8008220:	f009 f940 	bl	80114a4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d106      	bne.n	8008238 <etharp_output+0x4c>
 800822a:	4b69      	ldr	r3, [pc, #420]	; (80083d0 <etharp_output+0x1e4>)
 800822c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008230:	496b      	ldr	r1, [pc, #428]	; (80083e0 <etharp_output+0x1f4>)
 8008232:	4869      	ldr	r0, [pc, #420]	; (80083d8 <etharp_output+0x1ec>)
 8008234:	f009 f936 	bl	80114a4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68f9      	ldr	r1, [r7, #12]
 800823e:	4618      	mov	r0, r3
 8008240:	f001 f8c6 	bl	80093d0 <ip4_addr_isbroadcast_u32>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800824a:	4b66      	ldr	r3, [pc, #408]	; (80083e4 <etharp_output+0x1f8>)
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	e0af      	b.n	80083b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008258:	2be0      	cmp	r3, #224	; 0xe0
 800825a:	d118      	bne.n	800828e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800825c:	2301      	movs	r3, #1
 800825e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008260:	2300      	movs	r3, #0
 8008262:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008264:	235e      	movs	r3, #94	; 0x5e
 8008266:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3301      	adds	r3, #1
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008272:	b2db      	uxtb	r3, r3
 8008274:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3302      	adds	r3, #2
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3303      	adds	r3, #3
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8008286:	f107 0310 	add.w	r3, r7, #16
 800828a:	61fb      	str	r3, [r7, #28]
 800828c:	e090      	b.n	80083b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3304      	adds	r3, #4
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	405a      	eors	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3308      	adds	r3, #8
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4013      	ands	r3, r2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d012      	beq.n	80082cc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80082ac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00b      	beq.n	80082cc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	330c      	adds	r3, #12
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	330c      	adds	r3, #12
 80082c2:	61bb      	str	r3, [r7, #24]
 80082c4:	e002      	b.n	80082cc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80082c6:	f06f 0303 	mvn.w	r3, #3
 80082ca:	e07d      	b.n	80083c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80082cc:	4b46      	ldr	r3, [pc, #280]	; (80083e8 <etharp_output+0x1fc>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	4619      	mov	r1, r3
 80082d2:	4a46      	ldr	r2, [pc, #280]	; (80083ec <etharp_output+0x200>)
 80082d4:	460b      	mov	r3, r1
 80082d6:	005b      	lsls	r3, r3, #1
 80082d8:	440b      	add	r3, r1
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	4413      	add	r3, r2
 80082de:	3314      	adds	r3, #20
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d925      	bls.n	8008332 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80082e6:	4b40      	ldr	r3, [pc, #256]	; (80083e8 <etharp_output+0x1fc>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	4619      	mov	r1, r3
 80082ec:	4a3f      	ldr	r2, [pc, #252]	; (80083ec <etharp_output+0x200>)
 80082ee:	460b      	mov	r3, r1
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	440b      	add	r3, r1
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	4413      	add	r3, r2
 80082f8:	3308      	adds	r3, #8
 80082fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d117      	bne.n	8008332 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	4b38      	ldr	r3, [pc, #224]	; (80083e8 <etharp_output+0x1fc>)
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	4937      	ldr	r1, [pc, #220]	; (80083ec <etharp_output+0x200>)
 800830e:	4603      	mov	r3, r0
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	4403      	add	r3, r0
 8008314:	00db      	lsls	r3, r3, #3
 8008316:	440b      	add	r3, r1
 8008318:	3304      	adds	r3, #4
 800831a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800831c:	429a      	cmp	r2, r3
 800831e:	d108      	bne.n	8008332 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8008320:	4b31      	ldr	r3, [pc, #196]	; (80083e8 <etharp_output+0x1fc>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	68b9      	ldr	r1, [r7, #8]
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff fec5 	bl	80080b8 <etharp_output_to_arp_index>
 800832e:	4603      	mov	r3, r0
 8008330:	e04a      	b.n	80083c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008332:	2300      	movs	r3, #0
 8008334:	75fb      	strb	r3, [r7, #23]
 8008336:	e031      	b.n	800839c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008338:	7dfa      	ldrb	r2, [r7, #23]
 800833a:	492c      	ldr	r1, [pc, #176]	; (80083ec <etharp_output+0x200>)
 800833c:	4613      	mov	r3, r2
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	4413      	add	r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	440b      	add	r3, r1
 8008346:	3314      	adds	r3, #20
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d923      	bls.n	8008396 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800834e:	7dfa      	ldrb	r2, [r7, #23]
 8008350:	4926      	ldr	r1, [pc, #152]	; (80083ec <etharp_output+0x200>)
 8008352:	4613      	mov	r3, r2
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	4413      	add	r3, r2
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	440b      	add	r3, r1
 800835c:	3308      	adds	r3, #8
 800835e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	429a      	cmp	r2, r3
 8008364:	d117      	bne.n	8008396 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	6819      	ldr	r1, [r3, #0]
 800836a:	7dfa      	ldrb	r2, [r7, #23]
 800836c:	481f      	ldr	r0, [pc, #124]	; (80083ec <etharp_output+0x200>)
 800836e:	4613      	mov	r3, r2
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	4413      	add	r3, r2
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	4403      	add	r3, r0
 8008378:	3304      	adds	r3, #4
 800837a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800837c:	4299      	cmp	r1, r3
 800837e:	d10a      	bne.n	8008396 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8008380:	4a19      	ldr	r2, [pc, #100]	; (80083e8 <etharp_output+0x1fc>)
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8008386:	7dfb      	ldrb	r3, [r7, #23]
 8008388:	461a      	mov	r2, r3
 800838a:	68b9      	ldr	r1, [r7, #8]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f7ff fe93 	bl	80080b8 <etharp_output_to_arp_index>
 8008392:	4603      	mov	r3, r0
 8008394:	e018      	b.n	80083c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	3301      	adds	r3, #1
 800839a:	75fb      	strb	r3, [r7, #23]
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	2b09      	cmp	r3, #9
 80083a0:	d9ca      	bls.n	8008338 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	69b9      	ldr	r1, [r7, #24]
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 f822 	bl	80083f0 <etharp_query>
 80083ac:	4603      	mov	r3, r0
 80083ae:	e00b      	b.n	80083c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80083b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 faa1 	bl	8008908 <ethernet_output>
 80083c6:	4603      	mov	r3, r0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3720      	adds	r7, #32
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	080125b0 	.word	0x080125b0
 80083d4:	0801272c 	.word	0x0801272c
 80083d8:	08012654 	.word	0x08012654
 80083dc:	0801277c 	.word	0x0801277c
 80083e0:	0801271c 	.word	0x0801271c
 80083e4:	080151f8 	.word	0x080151f8
 80083e8:	240051f4 	.word	0x240051f4
 80083ec:	24005104 	.word	0x24005104

080083f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08c      	sub	sp, #48	; 0x30
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3326      	adds	r3, #38	; 0x26
 8008400:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8008402:	23ff      	movs	r3, #255	; 0xff
 8008404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68f9      	ldr	r1, [r7, #12]
 8008412:	4618      	mov	r0, r3
 8008414:	f000 ffdc 	bl	80093d0 <ip4_addr_isbroadcast_u32>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10c      	bne.n	8008438 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008426:	2be0      	cmp	r3, #224	; 0xe0
 8008428:	d006      	beq.n	8008438 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008438:	f06f 030f 	mvn.w	r3, #15
 800843c:	e101      	b.n	8008642 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	2101      	movs	r1, #1
 8008442:	68b8      	ldr	r0, [r7, #8]
 8008444:	f7ff fb60 	bl	8007b08 <etharp_find_entry>
 8008448:	4603      	mov	r3, r0
 800844a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800844c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008450:	2b00      	cmp	r3, #0
 8008452:	da02      	bge.n	800845a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8008454:	8a7b      	ldrh	r3, [r7, #18]
 8008456:	b25b      	sxtb	r3, r3
 8008458:	e0f3      	b.n	8008642 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800845a:	8a7b      	ldrh	r3, [r7, #18]
 800845c:	2b7e      	cmp	r3, #126	; 0x7e
 800845e:	d906      	bls.n	800846e <etharp_query+0x7e>
 8008460:	4b7a      	ldr	r3, [pc, #488]	; (800864c <etharp_query+0x25c>)
 8008462:	f240 32c1 	movw	r2, #961	; 0x3c1
 8008466:	497a      	ldr	r1, [pc, #488]	; (8008650 <etharp_query+0x260>)
 8008468:	487a      	ldr	r0, [pc, #488]	; (8008654 <etharp_query+0x264>)
 800846a:	f009 f81b 	bl	80114a4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800846e:	8a7b      	ldrh	r3, [r7, #18]
 8008470:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8008472:	7c7a      	ldrb	r2, [r7, #17]
 8008474:	4978      	ldr	r1, [pc, #480]	; (8008658 <etharp_query+0x268>)
 8008476:	4613      	mov	r3, r2
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	4413      	add	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	440b      	add	r3, r1
 8008480:	3314      	adds	r3, #20
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d115      	bne.n	80084b4 <etharp_query+0xc4>
    is_new_entry = 1;
 8008488:	2301      	movs	r3, #1
 800848a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800848c:	7c7a      	ldrb	r2, [r7, #17]
 800848e:	4972      	ldr	r1, [pc, #456]	; (8008658 <etharp_query+0x268>)
 8008490:	4613      	mov	r3, r2
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	4413      	add	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	440b      	add	r3, r1
 800849a:	3314      	adds	r3, #20
 800849c:	2201      	movs	r2, #1
 800849e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80084a0:	7c7a      	ldrb	r2, [r7, #17]
 80084a2:	496d      	ldr	r1, [pc, #436]	; (8008658 <etharp_query+0x268>)
 80084a4:	4613      	mov	r3, r2
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	4413      	add	r3, r2
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	440b      	add	r3, r1
 80084ae:	3308      	adds	r3, #8
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80084b4:	7c7a      	ldrb	r2, [r7, #17]
 80084b6:	4968      	ldr	r1, [pc, #416]	; (8008658 <etharp_query+0x268>)
 80084b8:	4613      	mov	r3, r2
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	4413      	add	r3, r2
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	440b      	add	r3, r1
 80084c2:	3314      	adds	r3, #20
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d011      	beq.n	80084ee <etharp_query+0xfe>
 80084ca:	7c7a      	ldrb	r2, [r7, #17]
 80084cc:	4962      	ldr	r1, [pc, #392]	; (8008658 <etharp_query+0x268>)
 80084ce:	4613      	mov	r3, r2
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	4413      	add	r3, r2
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	440b      	add	r3, r1
 80084d8:	3314      	adds	r3, #20
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d806      	bhi.n	80084ee <etharp_query+0xfe>
 80084e0:	4b5a      	ldr	r3, [pc, #360]	; (800864c <etharp_query+0x25c>)
 80084e2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80084e6:	495d      	ldr	r1, [pc, #372]	; (800865c <etharp_query+0x26c>)
 80084e8:	485a      	ldr	r0, [pc, #360]	; (8008654 <etharp_query+0x264>)
 80084ea:	f008 ffdb 	bl	80114a4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d102      	bne.n	80084fa <etharp_query+0x10a>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10c      	bne.n	8008514 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80084fa:	68b9      	ldr	r1, [r7, #8]
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 f963 	bl	80087c8 <etharp_request>
 8008502:	4603      	mov	r3, r0
 8008504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d102      	bne.n	8008514 <etharp_query+0x124>
      return result;
 800850e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008512:	e096      	b.n	8008642 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <etharp_query+0x138>
 800851a:	4b4c      	ldr	r3, [pc, #304]	; (800864c <etharp_query+0x25c>)
 800851c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8008520:	494f      	ldr	r1, [pc, #316]	; (8008660 <etharp_query+0x270>)
 8008522:	484c      	ldr	r0, [pc, #304]	; (8008654 <etharp_query+0x264>)
 8008524:	f008 ffbe 	bl	80114a4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8008528:	7c7a      	ldrb	r2, [r7, #17]
 800852a:	494b      	ldr	r1, [pc, #300]	; (8008658 <etharp_query+0x268>)
 800852c:	4613      	mov	r3, r2
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	4413      	add	r3, r2
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	440b      	add	r3, r1
 8008536:	3314      	adds	r3, #20
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d917      	bls.n	800856e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800853e:	4a49      	ldr	r2, [pc, #292]	; (8008664 <etharp_query+0x274>)
 8008540:	7c7b      	ldrb	r3, [r7, #17]
 8008542:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008544:	7c7a      	ldrb	r2, [r7, #17]
 8008546:	4613      	mov	r3, r2
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	4413      	add	r3, r2
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	3308      	adds	r3, #8
 8008550:	4a41      	ldr	r2, [pc, #260]	; (8008658 <etharp_query+0x268>)
 8008552:	4413      	add	r3, r2
 8008554:	3304      	adds	r3, #4
 8008556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800855a:	9200      	str	r2, [sp, #0]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 f9d1 	bl	8008908 <ethernet_output>
 8008566:	4603      	mov	r3, r0
 8008568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800856c:	e067      	b.n	800863e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800856e:	7c7a      	ldrb	r2, [r7, #17]
 8008570:	4939      	ldr	r1, [pc, #228]	; (8008658 <etharp_query+0x268>)
 8008572:	4613      	mov	r3, r2
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	4413      	add	r3, r2
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	440b      	add	r3, r1
 800857c:	3314      	adds	r3, #20
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d15c      	bne.n	800863e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800858c:	e01c      	b.n	80085c8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	895a      	ldrh	r2, [r3, #10]
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	891b      	ldrh	r3, [r3, #8]
 8008596:	429a      	cmp	r2, r3
 8008598:	d10a      	bne.n	80085b0 <etharp_query+0x1c0>
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d006      	beq.n	80085b0 <etharp_query+0x1c0>
 80085a2:	4b2a      	ldr	r3, [pc, #168]	; (800864c <etharp_query+0x25c>)
 80085a4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80085a8:	492f      	ldr	r1, [pc, #188]	; (8008668 <etharp_query+0x278>)
 80085aa:	482a      	ldr	r0, [pc, #168]	; (8008654 <etharp_query+0x264>)
 80085ac:	f008 ff7a 	bl	80114a4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	7b1b      	ldrb	r3, [r3, #12]
 80085b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <etharp_query+0x1d2>
        copy_needed = 1;
 80085bc:	2301      	movs	r3, #1
 80085be:	61bb      	str	r3, [r7, #24]
        break;
 80085c0:	e005      	b.n	80085ce <etharp_query+0x1de>
      }
      p = p->next;
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1df      	bne.n	800858e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d007      	beq.n	80085e4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80085da:	200e      	movs	r0, #14
 80085dc:	f003 fa86 	bl	800baec <pbuf_clone>
 80085e0:	61f8      	str	r0, [r7, #28]
 80085e2:	e004      	b.n	80085ee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80085e8:	69f8      	ldr	r0, [r7, #28]
 80085ea:	f003 f8c3 	bl	800b774 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d021      	beq.n	8008638 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80085f4:	7c7a      	ldrb	r2, [r7, #17]
 80085f6:	4918      	ldr	r1, [pc, #96]	; (8008658 <etharp_query+0x268>)
 80085f8:	4613      	mov	r3, r2
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	4413      	add	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	440b      	add	r3, r1
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00a      	beq.n	800861e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8008608:	7c7a      	ldrb	r2, [r7, #17]
 800860a:	4913      	ldr	r1, [pc, #76]	; (8008658 <etharp_query+0x268>)
 800860c:	4613      	mov	r3, r2
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	4413      	add	r3, r2
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	440b      	add	r3, r1
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4618      	mov	r0, r3
 800861a:	f003 f80b 	bl	800b634 <pbuf_free>
      }
      arp_table[i].q = p;
 800861e:	7c7a      	ldrb	r2, [r7, #17]
 8008620:	490d      	ldr	r1, [pc, #52]	; (8008658 <etharp_query+0x268>)
 8008622:	4613      	mov	r3, r2
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	4413      	add	r3, r2
 8008628:	00db      	lsls	r3, r3, #3
 800862a:	440b      	add	r3, r1
 800862c:	69fa      	ldr	r2, [r7, #28]
 800862e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008636:	e002      	b.n	800863e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8008638:	23ff      	movs	r3, #255	; 0xff
 800863a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800863e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008642:	4618      	mov	r0, r3
 8008644:	3728      	adds	r7, #40	; 0x28
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	080125b0 	.word	0x080125b0
 8008650:	08012788 	.word	0x08012788
 8008654:	08012654 	.word	0x08012654
 8008658:	24005104 	.word	0x24005104
 800865c:	08012798 	.word	0x08012798
 8008660:	0801277c 	.word	0x0801277c
 8008664:	240051f4 	.word	0x240051f4
 8008668:	080127c0 	.word	0x080127c0

0800866c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	; 0x28
 8008670:	af02      	add	r7, sp, #8
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d106      	bne.n	8008692 <etharp_raw+0x26>
 8008684:	4b3a      	ldr	r3, [pc, #232]	; (8008770 <etharp_raw+0x104>)
 8008686:	f240 4257 	movw	r2, #1111	; 0x457
 800868a:	493a      	ldr	r1, [pc, #232]	; (8008774 <etharp_raw+0x108>)
 800868c:	483a      	ldr	r0, [pc, #232]	; (8008778 <etharp_raw+0x10c>)
 800868e:	f008 ff09 	bl	80114a4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8008692:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008696:	211c      	movs	r1, #28
 8008698:	200e      	movs	r0, #14
 800869a:	f002 fce7 	bl	800b06c <pbuf_alloc>
 800869e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d102      	bne.n	80086ac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80086a6:	f04f 33ff 	mov.w	r3, #4294967295
 80086aa:	e05d      	b.n	8008768 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	895b      	ldrh	r3, [r3, #10]
 80086b0:	2b1b      	cmp	r3, #27
 80086b2:	d806      	bhi.n	80086c2 <etharp_raw+0x56>
 80086b4:	4b2e      	ldr	r3, [pc, #184]	; (8008770 <etharp_raw+0x104>)
 80086b6:	f240 4262 	movw	r2, #1122	; 0x462
 80086ba:	4930      	ldr	r1, [pc, #192]	; (800877c <etharp_raw+0x110>)
 80086bc:	482e      	ldr	r0, [pc, #184]	; (8008778 <etharp_raw+0x10c>)
 80086be:	f008 fef1 	bl	80114a4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80086c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff f914 	bl	80078f8 <lwip_htons>
 80086d0:	4603      	mov	r3, r0
 80086d2:	461a      	mov	r2, r3
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086de:	2b06      	cmp	r3, #6
 80086e0:	d006      	beq.n	80086f0 <etharp_raw+0x84>
 80086e2:	4b23      	ldr	r3, [pc, #140]	; (8008770 <etharp_raw+0x104>)
 80086e4:	f240 4269 	movw	r2, #1129	; 0x469
 80086e8:	4925      	ldr	r1, [pc, #148]	; (8008780 <etharp_raw+0x114>)
 80086ea:	4823      	ldr	r0, [pc, #140]	; (8008778 <etharp_raw+0x10c>)
 80086ec:	f008 feda 	bl	80114a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	3308      	adds	r3, #8
 80086f4:	2206      	movs	r2, #6
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f008 febd 	bl	8011478 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	3312      	adds	r3, #18
 8008702:	2206      	movs	r2, #6
 8008704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008706:	4618      	mov	r0, r3
 8008708:	f008 feb6 	bl	8011478 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	330e      	adds	r3, #14
 8008710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	3318      	adds	r3, #24
 800871a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800871c:	6812      	ldr	r2, [r2, #0]
 800871e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2200      	movs	r2, #0
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	2200      	movs	r2, #0
 8008728:	f042 0201 	orr.w	r2, r2, #1
 800872c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2200      	movs	r2, #0
 8008732:	f042 0208 	orr.w	r2, r2, #8
 8008736:	709a      	strb	r2, [r3, #2]
 8008738:	2200      	movs	r2, #0
 800873a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2206      	movs	r2, #6
 8008740:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2204      	movs	r2, #4
 8008746:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008748:	f640 0306 	movw	r3, #2054	; 0x806
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	69b9      	ldr	r1, [r7, #24]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f8d7 	bl	8008908 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800875a:	69b8      	ldr	r0, [r7, #24]
 800875c:	f002 ff6a 	bl	800b634 <pbuf_free>
  p = NULL;
 8008760:	2300      	movs	r3, #0
 8008762:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8008764:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3720      	adds	r7, #32
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	080125b0 	.word	0x080125b0
 8008774:	0801272c 	.word	0x0801272c
 8008778:	08012654 	.word	0x08012654
 800877c:	080127dc 	.word	0x080127dc
 8008780:	08012810 	.word	0x08012810

08008784 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af04      	add	r7, sp, #16
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80087a0:	2201      	movs	r2, #1
 80087a2:	9203      	str	r2, [sp, #12]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	9202      	str	r2, [sp, #8]
 80087a8:	4a06      	ldr	r2, [pc, #24]	; (80087c4 <etharp_request_dst+0x40>)
 80087aa:	9201      	str	r2, [sp, #4]
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	4603      	mov	r3, r0
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f7ff ff5a 	bl	800866c <etharp_raw>
 80087b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	08015200 	.word	0x08015200

080087c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80087d2:	4a05      	ldr	r2, [pc, #20]	; (80087e8 <etharp_request+0x20>)
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7ff ffd4 	bl	8008784 <etharp_request_dst>
 80087dc:	4603      	mov	r3, r0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	080151f8 	.word	0x080151f8

080087ec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80087f6:	230e      	movs	r3, #14
 80087f8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	895b      	ldrh	r3, [r3, #10]
 80087fe:	2b0e      	cmp	r3, #14
 8008800:	d96e      	bls.n	80088e0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	7bdb      	ldrb	r3, [r3, #15]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d106      	bne.n	8008818 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008810:	3301      	adds	r3, #1
 8008812:	b2da      	uxtb	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	7b1a      	ldrb	r2, [r3, #12]
 8008822:	7b5b      	ldrb	r3, [r3, #13]
 8008824:	021b      	lsls	r3, r3, #8
 8008826:	4313      	orrs	r3, r2
 8008828:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d023      	beq.n	800887e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d10f      	bne.n	800885e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	785b      	ldrb	r3, [r3, #1]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d11b      	bne.n	800887e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800884a:	2b5e      	cmp	r3, #94	; 0x5e
 800884c:	d117      	bne.n	800887e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	7b5b      	ldrb	r3, [r3, #13]
 8008852:	f043 0310 	orr.w	r3, r3, #16
 8008856:	b2da      	uxtb	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	735a      	strb	r2, [r3, #13]
 800885c:	e00f      	b.n	800887e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2206      	movs	r2, #6
 8008862:	4928      	ldr	r1, [pc, #160]	; (8008904 <ethernet_input+0x118>)
 8008864:	4618      	mov	r0, r3
 8008866:	f008 fdf7 	bl	8011458 <memcmp>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d106      	bne.n	800887e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	7b5b      	ldrb	r3, [r3, #13]
 8008874:	f043 0308 	orr.w	r3, r3, #8
 8008878:	b2da      	uxtb	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800887e:	89fb      	ldrh	r3, [r7, #14]
 8008880:	2b08      	cmp	r3, #8
 8008882:	d003      	beq.n	800888c <ethernet_input+0xa0>
 8008884:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8008888:	d014      	beq.n	80088b4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800888a:	e032      	b.n	80088f2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008892:	f003 0308 	and.w	r3, r3, #8
 8008896:	2b00      	cmp	r3, #0
 8008898:	d024      	beq.n	80088e4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800889a:	8afb      	ldrh	r3, [r7, #22]
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f002 fe42 	bl	800b528 <pbuf_remove_header>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d11e      	bne.n	80088e8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fb93 	bl	8008fd8 <ip4_input>
      break;
 80088b2:	e013      	b.n	80088dc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088ba:	f003 0308 	and.w	r3, r3, #8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d014      	beq.n	80088ec <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80088c2:	8afb      	ldrh	r3, [r7, #22]
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f002 fe2e 	bl	800b528 <pbuf_remove_header>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10e      	bne.n	80088f0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff fb65 	bl	8007fa4 <etharp_input>
      break;
 80088da:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	e00c      	b.n	80088fa <ethernet_input+0x10e>
    goto free_and_return;
 80088e0:	bf00      	nop
 80088e2:	e006      	b.n	80088f2 <ethernet_input+0x106>
        goto free_and_return;
 80088e4:	bf00      	nop
 80088e6:	e004      	b.n	80088f2 <ethernet_input+0x106>
        goto free_and_return;
 80088e8:	bf00      	nop
 80088ea:	e002      	b.n	80088f2 <ethernet_input+0x106>
        goto free_and_return;
 80088ec:	bf00      	nop
 80088ee:	e000      	b.n	80088f2 <ethernet_input+0x106>
        goto free_and_return;
 80088f0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f002 fe9e 	bl	800b634 <pbuf_free>
  return ERR_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	080151f8 	.word	0x080151f8

08008908 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8008916:	8c3b      	ldrh	r3, [r7, #32]
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe ffed 	bl	80078f8 <lwip_htons>
 800891e:	4603      	mov	r3, r0
 8008920:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8008922:	210e      	movs	r1, #14
 8008924:	68b8      	ldr	r0, [r7, #8]
 8008926:	f002 fdef 	bl	800b508 <pbuf_add_header>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d125      	bne.n	800897c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	8afa      	ldrh	r2, [r7, #22]
 800893a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	2206      	movs	r2, #6
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	4618      	mov	r0, r3
 8008944:	f008 fd98 	bl	8011478 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	3306      	adds	r3, #6
 800894c:	2206      	movs	r2, #6
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	4618      	mov	r0, r3
 8008952:	f008 fd91 	bl	8011478 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800895c:	2b06      	cmp	r3, #6
 800895e:	d006      	beq.n	800896e <ethernet_output+0x66>
 8008960:	4b0a      	ldr	r3, [pc, #40]	; (800898c <ethernet_output+0x84>)
 8008962:	f44f 7299 	mov.w	r2, #306	; 0x132
 8008966:	490a      	ldr	r1, [pc, #40]	; (8008990 <ethernet_output+0x88>)
 8008968:	480a      	ldr	r0, [pc, #40]	; (8008994 <ethernet_output+0x8c>)
 800896a:	f008 fd9b 	bl	80114a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	68b9      	ldr	r1, [r7, #8]
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	4798      	blx	r3
 8008978:	4603      	mov	r3, r0
 800897a:	e002      	b.n	8008982 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800897c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800897e:	f06f 0301 	mvn.w	r3, #1
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	08012854 	.word	0x08012854
 8008990:	080128b8 	.word	0x080128b8
 8008994:	080128ec 	.word	0x080128ec

08008998 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08e      	sub	sp, #56	; 0x38
 800899c:	af04      	add	r7, sp, #16
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80089a2:	4b87      	ldr	r3, [pc, #540]	; (8008bc0 <icmp_input+0x228>)
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	f003 030f 	and.w	r3, r3, #15
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80089b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089ba:	2b13      	cmp	r3, #19
 80089bc:	f240 80e8 	bls.w	8008b90 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	895b      	ldrh	r3, [r3, #10]
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	f240 80e5 	bls.w	8008b94 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80089d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 80d2 	beq.w	8008b82 <icmp_input+0x1ea>
 80089de:	2b08      	cmp	r3, #8
 80089e0:	f040 80d2 	bne.w	8008b88 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80089e4:	4b77      	ldr	r3, [pc, #476]	; (8008bc4 <icmp_input+0x22c>)
 80089e6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80089e8:	4b75      	ldr	r3, [pc, #468]	; (8008bc0 <icmp_input+0x228>)
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089f0:	2be0      	cmp	r3, #224	; 0xe0
 80089f2:	f000 80d6 	beq.w	8008ba2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80089f6:	4b72      	ldr	r3, [pc, #456]	; (8008bc0 <icmp_input+0x228>)
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	4a71      	ldr	r2, [pc, #452]	; (8008bc0 <icmp_input+0x228>)
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 fce5 	bl	80093d0 <ip4_addr_isbroadcast_u32>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f040 80cc 	bne.w	8008ba6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	891b      	ldrh	r3, [r3, #8]
 8008a12:	2b07      	cmp	r3, #7
 8008a14:	f240 80c0 	bls.w	8008b98 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f9e0 	bl	8008dde <inet_chksum_pbuf>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d003      	beq.n	8008a2c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f002 fe05 	bl	800b634 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8008a2a:	e0c5      	b.n	8008bb8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008a2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a2e:	330e      	adds	r3, #14
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f002 fd68 	bl	800b508 <pbuf_add_header>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d04b      	beq.n	8008ad6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	891a      	ldrh	r2, [r3, #8]
 8008a42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a44:	4413      	add	r3, r2
 8008a46:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	891b      	ldrh	r3, [r3, #8]
 8008a4c:	8b7a      	ldrh	r2, [r7, #26]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	f0c0 80ab 	bcc.w	8008baa <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8008a54:	8b7b      	ldrh	r3, [r7, #26]
 8008a56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	200e      	movs	r0, #14
 8008a5e:	f002 fb05 	bl	800b06c <pbuf_alloc>
 8008a62:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 80a1 	beq.w	8008bae <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	895b      	ldrh	r3, [r3, #10]
 8008a70:	461a      	mov	r2, r3
 8008a72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a74:	3308      	adds	r3, #8
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d203      	bcs.n	8008a82 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8008a7a:	6978      	ldr	r0, [r7, #20]
 8008a7c:	f002 fdda 	bl	800b634 <pbuf_free>
          goto icmperr;
 8008a80:	e096      	b.n	8008bb0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f008 fcf4 	bl	8011478 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8008a90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a92:	4619      	mov	r1, r3
 8008a94:	6978      	ldr	r0, [r7, #20]
 8008a96:	f002 fd47 	bl	800b528 <pbuf_remove_header>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d009      	beq.n	8008ab4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8008aa0:	4b49      	ldr	r3, [pc, #292]	; (8008bc8 <icmp_input+0x230>)
 8008aa2:	22b6      	movs	r2, #182	; 0xb6
 8008aa4:	4949      	ldr	r1, [pc, #292]	; (8008bcc <icmp_input+0x234>)
 8008aa6:	484a      	ldr	r0, [pc, #296]	; (8008bd0 <icmp_input+0x238>)
 8008aa8:	f008 fcfc 	bl	80114a4 <iprintf>
          pbuf_free(r);
 8008aac:	6978      	ldr	r0, [r7, #20]
 8008aae:	f002 fdc1 	bl	800b634 <pbuf_free>
          goto icmperr;
 8008ab2:	e07d      	b.n	8008bb0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	6978      	ldr	r0, [r7, #20]
 8008ab8:	f002 fed4 	bl	800b864 <pbuf_copy>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8008ac2:	6978      	ldr	r0, [r7, #20]
 8008ac4:	f002 fdb6 	bl	800b634 <pbuf_free>
          goto icmperr;
 8008ac8:	e072      	b.n	8008bb0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f002 fdb2 	bl	800b634 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	607b      	str	r3, [r7, #4]
 8008ad4:	e00f      	b.n	8008af6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ad8:	330e      	adds	r3, #14
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f002 fd23 	bl	800b528 <pbuf_remove_header>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d006      	beq.n	8008af6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8008ae8:	4b37      	ldr	r3, [pc, #220]	; (8008bc8 <icmp_input+0x230>)
 8008aea:	22c7      	movs	r2, #199	; 0xc7
 8008aec:	4939      	ldr	r1, [pc, #228]	; (8008bd4 <icmp_input+0x23c>)
 8008aee:	4838      	ldr	r0, [pc, #224]	; (8008bd0 <icmp_input+0x238>)
 8008af0:	f008 fcd8 	bl	80114a4 <iprintf>
          goto icmperr;
 8008af4:	e05c      	b.n	8008bb0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8008afc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f002 fd01 	bl	800b508 <pbuf_add_header>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d13c      	bne.n	8008b86 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8008b1a:	4b29      	ldr	r3, [pc, #164]	; (8008bc0 <icmp_input+0x228>)
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2200      	movs	r2, #0
 8008b26:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	885b      	ldrh	r3, [r3, #2]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d907      	bls.n	8008b46 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	885b      	ldrh	r3, [r3, #2]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	3309      	adds	r3, #9
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	805a      	strh	r2, [r3, #2]
 8008b44:	e006      	b.n	8008b54 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	3308      	adds	r3, #8
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	22ff      	movs	r2, #255	; 0xff
 8008b58:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	729a      	strb	r2, [r3, #10]
 8008b60:	2200      	movs	r2, #0
 8008b62:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	9302      	str	r3, [sp, #8]
 8008b68:	2301      	movs	r3, #1
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	23ff      	movs	r3, #255	; 0xff
 8008b72:	2200      	movs	r2, #0
 8008b74:	69f9      	ldr	r1, [r7, #28]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fb52 	bl	8009220 <ip4_output_if>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8008b80:	e001      	b.n	8008b86 <icmp_input+0x1ee>
      break;
 8008b82:	bf00      	nop
 8008b84:	e000      	b.n	8008b88 <icmp_input+0x1f0>
      break;
 8008b86:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f002 fd53 	bl	800b634 <pbuf_free>
  return;
 8008b8e:	e013      	b.n	8008bb8 <icmp_input+0x220>
    goto lenerr;
 8008b90:	bf00      	nop
 8008b92:	e002      	b.n	8008b9a <icmp_input+0x202>
    goto lenerr;
 8008b94:	bf00      	nop
 8008b96:	e000      	b.n	8008b9a <icmp_input+0x202>
        goto lenerr;
 8008b98:	bf00      	nop
lenerr:
  pbuf_free(p);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f002 fd4a 	bl	800b634 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8008ba0:	e00a      	b.n	8008bb8 <icmp_input+0x220>
        goto icmperr;
 8008ba2:	bf00      	nop
 8008ba4:	e004      	b.n	8008bb0 <icmp_input+0x218>
        goto icmperr;
 8008ba6:	bf00      	nop
 8008ba8:	e002      	b.n	8008bb0 <icmp_input+0x218>
          goto icmperr;
 8008baa:	bf00      	nop
 8008bac:	e000      	b.n	8008bb0 <icmp_input+0x218>
          goto icmperr;
 8008bae:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f002 fd3f 	bl	800b634 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8008bb6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8008bb8:	3728      	adds	r7, #40	; 0x28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	240051f8 	.word	0x240051f8
 8008bc4:	2400520c 	.word	0x2400520c
 8008bc8:	08012914 	.word	0x08012914
 8008bcc:	08012978 	.word	0x08012978
 8008bd0:	080129b0 	.word	0x080129b0
 8008bd4:	080129d8 	.word	0x080129d8

08008bd8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	461a      	mov	r2, r3
 8008be8:	2103      	movs	r1, #3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f814 	bl	8008c18 <icmp_send_response>
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	461a      	mov	r2, r3
 8008c08:	210b      	movs	r1, #11
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f804 	bl	8008c18 <icmp_send_response>
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08c      	sub	sp, #48	; 0x30
 8008c1c:	af04      	add	r7, sp, #16
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
 8008c24:	4613      	mov	r3, r2
 8008c26:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8008c28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008c2c:	2124      	movs	r1, #36	; 0x24
 8008c2e:	2022      	movs	r0, #34	; 0x22
 8008c30:	f002 fa1c 	bl	800b06c <pbuf_alloc>
 8008c34:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d056      	beq.n	8008cea <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	895b      	ldrh	r3, [r3, #10]
 8008c40:	2b23      	cmp	r3, #35	; 0x23
 8008c42:	d806      	bhi.n	8008c52 <icmp_send_response+0x3a>
 8008c44:	4b2b      	ldr	r3, [pc, #172]	; (8008cf4 <icmp_send_response+0xdc>)
 8008c46:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008c4a:	492b      	ldr	r1, [pc, #172]	; (8008cf8 <icmp_send_response+0xe0>)
 8008c4c:	482b      	ldr	r0, [pc, #172]	; (8008cfc <icmp_send_response+0xe4>)
 8008c4e:	f008 fc29 	bl	80114a4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	78fa      	ldrb	r2, [r7, #3]
 8008c62:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	78ba      	ldrb	r2, [r7, #2]
 8008c68:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	711a      	strb	r2, [r3, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2200      	movs	r2, #0
 8008c78:	719a      	strb	r2, [r3, #6]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f103 0008 	add.w	r0, r3, #8
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	221c      	movs	r2, #28
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	f008 fbf3 	bl	8011478 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8008c98:	f107 030c 	add.w	r3, r7, #12
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 f901 	bl	8008ea4 <ip4_route>
 8008ca2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d01b      	beq.n	8008ce2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2200      	movs	r2, #0
 8008cae:	709a      	strb	r2, [r3, #2]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	895b      	ldrh	r3, [r3, #10]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6978      	ldr	r0, [r7, #20]
 8008cbc:	f000 f87d 	bl	8008dba <inet_chksum>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008cc8:	f107 020c 	add.w	r2, r7, #12
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	9302      	str	r3, [sp, #8]
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	23ff      	movs	r3, #255	; 0xff
 8008cda:	2100      	movs	r1, #0
 8008cdc:	69f8      	ldr	r0, [r7, #28]
 8008cde:	f000 fa9f 	bl	8009220 <ip4_output_if>
  }
  pbuf_free(q);
 8008ce2:	69f8      	ldr	r0, [r7, #28]
 8008ce4:	f002 fca6 	bl	800b634 <pbuf_free>
 8008ce8:	e000      	b.n	8008cec <icmp_send_response+0xd4>
    return;
 8008cea:	bf00      	nop
}
 8008cec:	3720      	adds	r7, #32
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	08012914 	.word	0x08012914
 8008cf8:	08012a0c 	.word	0x08012a0c
 8008cfc:	080129b0 	.word	0x080129b0

08008d00 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b089      	sub	sp, #36	; 0x24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00d      	beq.n	8008d40 <lwip_standard_chksum+0x40>
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dd0a      	ble.n	8008d40 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	1c53      	adds	r3, r2, #1
 8008d2e:	61fb      	str	r3, [r7, #28]
 8008d30:	f107 030e 	add.w	r3, r7, #14
 8008d34:	3301      	adds	r3, #1
 8008d36:	7812      	ldrb	r2, [r2, #0]
 8008d38:	701a      	strb	r2, [r3, #0]
    len--;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8008d44:	e00a      	b.n	8008d5c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	1c9a      	adds	r2, r3, #2
 8008d4a:	61ba      	str	r2, [r7, #24]
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	4413      	add	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]
    len -= 2;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	3b02      	subs	r3, #2
 8008d5a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	dcf1      	bgt.n	8008d46 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	dd04      	ble.n	8008d72 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008d68:	f107 030e 	add.w	r3, r7, #14
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	7812      	ldrb	r2, [r2, #0]
 8008d70:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8008d72:	89fb      	ldrh	r3, [r7, #14]
 8008d74:	461a      	mov	r2, r3
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	4413      	add	r3, r2
 8008d7a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	0c1a      	lsrs	r2, r3, #16
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4413      	add	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	0c1a      	lsrs	r2, r3, #16
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	4413      	add	r3, r2
 8008d92:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d007      	beq.n	8008daa <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	021b      	lsls	r3, r3, #8
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	0a1b      	lsrs	r3, r3, #8
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	4313      	orrs	r3, r2
 8008da8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	b29b      	uxth	r3, r3
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3724      	adds	r7, #36	; 0x24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8008dc6:	887b      	ldrh	r3, [r7, #2]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7ff ff98 	bl	8008d00 <lwip_standard_chksum>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	43db      	mvns	r3, r3
 8008dd4:	b29b      	uxth	r3, r3
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b086      	sub	sp, #24
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	613b      	str	r3, [r7, #16]
 8008df2:	e02b      	b.n	8008e4c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	895b      	ldrh	r3, [r3, #10]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	f7ff ff7e 	bl	8008d00 <lwip_standard_chksum>
 8008e04:	4603      	mov	r3, r0
 8008e06:	461a      	mov	r2, r3
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	0c1a      	lsrs	r2, r3, #16
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	4413      	add	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	895b      	ldrh	r3, [r3, #10]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00e      	beq.n	8008e46 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	bf0c      	ite	eq
 8008e2e:	2301      	moveq	r3, #1
 8008e30:	2300      	movne	r3, #0
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	021b      	lsls	r3, r3, #8
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	0a1b      	lsrs	r3, r3, #8
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	613b      	str	r3, [r7, #16]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1d0      	bne.n	8008df4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d007      	beq.n	8008e68 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	021b      	lsls	r3, r3, #8
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	0a1b      	lsrs	r3, r3, #8
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	4313      	orrs	r3, r2
 8008e66:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	b29b      	uxth	r3, r3
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3718      	adds	r7, #24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008e82:	f001 f9eb 	bl	800a25c <mem_init>
  memp_init();
 8008e86:	f001 fced 	bl	800a864 <memp_init>
  pbuf_init();
  netif_init();
 8008e8a:	f001 fdeb 	bl	800aa64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008e8e:	f008 f905 	bl	801109c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008e92:	f002 fe5d 	bl	800bb50 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008e96:	f008 f877 	bl	8010f88 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008e9a:	bf00      	nop
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8008eac:	4b33      	ldr	r3, [pc, #204]	; (8008f7c <ip4_route+0xd8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	e036      	b.n	8008f22 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d02b      	beq.n	8008f1c <ip4_route+0x78>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008eca:	089b      	lsrs	r3, r3, #2
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d022      	beq.n	8008f1c <ip4_route+0x78>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01d      	beq.n	8008f1c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	405a      	eors	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3308      	adds	r3, #8
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	e038      	b.n	8008f6e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d108      	bne.n	8008f1c <ip4_route+0x78>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	330c      	adds	r3, #12
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d101      	bne.n	8008f1c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	e028      	b.n	8008f6e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60fb      	str	r3, [r7, #12]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1c5      	bne.n	8008eb4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008f28:	4b15      	ldr	r3, [pc, #84]	; (8008f80 <ip4_route+0xdc>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d01a      	beq.n	8008f66 <ip4_route+0xc2>
 8008f30:	4b13      	ldr	r3, [pc, #76]	; (8008f80 <ip4_route+0xdc>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d012      	beq.n	8008f66 <ip4_route+0xc2>
 8008f40:	4b0f      	ldr	r3, [pc, #60]	; (8008f80 <ip4_route+0xdc>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f48:	f003 0304 	and.w	r3, r3, #4
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00a      	beq.n	8008f66 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8008f50:	4b0b      	ldr	r3, [pc, #44]	; (8008f80 <ip4_route+0xdc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3304      	adds	r3, #4
 8008f56:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d004      	beq.n	8008f66 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b7f      	cmp	r3, #127	; 0x7f
 8008f64:	d101      	bne.n	8008f6a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	e001      	b.n	8008f6e <ip4_route+0xca>
  }

  return netif_default;
 8008f6a:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <ip4_route+0xdc>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	24008114 	.word	0x24008114
 8008f80:	24008118 	.word	0x24008118

08008f84 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d016      	beq.n	8008fca <ip4_input_accept+0x46>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d011      	beq.n	8008fca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008fa6:	4b0b      	ldr	r3, [pc, #44]	; (8008fd4 <ip4_input_accept+0x50>)
 8008fa8:	695a      	ldr	r2, [r3, #20]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3304      	adds	r3, #4
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d008      	beq.n	8008fc6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8008fb4:	4b07      	ldr	r3, [pc, #28]	; (8008fd4 <ip4_input_accept+0x50>)
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	6879      	ldr	r1, [r7, #4]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fa08 	bl	80093d0 <ip4_addr_isbroadcast_u32>
 8008fc0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	240051f8 	.word	0x240051f8

08008fd8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	091b      	lsrs	r3, r3, #4
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d004      	beq.n	8008ffe <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f002 fb1d 	bl	800b634 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e107      	b.n	800920e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	f003 030f 	and.w	r3, r3, #15
 8009006:	b2db      	uxtb	r3, r3
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	b2db      	uxtb	r3, r3
 800900c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	885b      	ldrh	r3, [r3, #2]
 8009012:	b29b      	uxth	r3, r3
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe fc6f 	bl	80078f8 <lwip_htons>
 800901a:	4603      	mov	r3, r0
 800901c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	891b      	ldrh	r3, [r3, #8]
 8009022:	89ba      	ldrh	r2, [r7, #12]
 8009024:	429a      	cmp	r2, r3
 8009026:	d204      	bcs.n	8009032 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8009028:	89bb      	ldrh	r3, [r7, #12]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f002 f97b 	bl	800b328 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	895b      	ldrh	r3, [r3, #10]
 8009036:	89fa      	ldrh	r2, [r7, #14]
 8009038:	429a      	cmp	r2, r3
 800903a:	d807      	bhi.n	800904c <ip4_input+0x74>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	891b      	ldrh	r3, [r3, #8]
 8009040:	89ba      	ldrh	r2, [r7, #12]
 8009042:	429a      	cmp	r2, r3
 8009044:	d802      	bhi.n	800904c <ip4_input+0x74>
 8009046:	89fb      	ldrh	r3, [r7, #14]
 8009048:	2b13      	cmp	r3, #19
 800904a:	d804      	bhi.n	8009056 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f002 faf1 	bl	800b634 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	e0db      	b.n	800920e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	4a6f      	ldr	r2, [pc, #444]	; (8009218 <ip4_input+0x240>)
 800905c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	4a6d      	ldr	r2, [pc, #436]	; (8009218 <ip4_input+0x240>)
 8009064:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009066:	4b6c      	ldr	r3, [pc, #432]	; (8009218 <ip4_input+0x240>)
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800906e:	2be0      	cmp	r3, #224	; 0xe0
 8009070:	d112      	bne.n	8009098 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d007      	beq.n	8009092 <ip4_input+0xba>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	3304      	adds	r3, #4
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <ip4_input+0xba>
      netif = inp;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	613b      	str	r3, [r7, #16]
 8009090:	e02a      	b.n	80090e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009092:	2300      	movs	r3, #0
 8009094:	613b      	str	r3, [r7, #16]
 8009096:	e027      	b.n	80090e8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8009098:	6838      	ldr	r0, [r7, #0]
 800909a:	f7ff ff73 	bl	8008f84 <ip4_input_accept>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <ip4_input+0xd2>
      netif = inp;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	e01e      	b.n	80090e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80090aa:	2300      	movs	r3, #0
 80090ac:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80090ae:	4b5a      	ldr	r3, [pc, #360]	; (8009218 <ip4_input+0x240>)
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b7f      	cmp	r3, #127	; 0x7f
 80090b6:	d017      	beq.n	80090e8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80090b8:	4b58      	ldr	r3, [pc, #352]	; (800921c <ip4_input+0x244>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	613b      	str	r3, [r7, #16]
 80090be:	e00e      	b.n	80090de <ip4_input+0x106>
          if (netif == inp) {
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d006      	beq.n	80090d6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80090c8:	6938      	ldr	r0, [r7, #16]
 80090ca:	f7ff ff5b 	bl	8008f84 <ip4_input_accept>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d108      	bne.n	80090e6 <ip4_input+0x10e>
 80090d4:	e000      	b.n	80090d8 <ip4_input+0x100>
            continue;
 80090d6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	613b      	str	r3, [r7, #16]
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1ed      	bne.n	80090c0 <ip4_input+0xe8>
 80090e4:	e000      	b.n	80090e8 <ip4_input+0x110>
            break;
 80090e6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80090e8:	4b4b      	ldr	r3, [pc, #300]	; (8009218 <ip4_input+0x240>)
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f96e 	bl	80093d0 <ip4_addr_isbroadcast_u32>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d105      	bne.n	8009106 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80090fa:	4b47      	ldr	r3, [pc, #284]	; (8009218 <ip4_input+0x240>)
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009102:	2be0      	cmp	r3, #224	; 0xe0
 8009104:	d104      	bne.n	8009110 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f002 fa94 	bl	800b634 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	e07e      	b.n	800920e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d104      	bne.n	8009120 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f002 fa8c 	bl	800b634 <pbuf_free>
    return ERR_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	e076      	b.n	800920e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	88db      	ldrh	r3, [r3, #6]
 8009124:	b29b      	uxth	r3, r3
 8009126:	461a      	mov	r2, r3
 8009128:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800912c:	4013      	ands	r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00b      	beq.n	800914a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fc92 	bl	8009a5c <ip4_reass>
 8009138:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <ip4_input+0x16c>
      return ERR_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	e064      	b.n	800920e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800914a:	4a33      	ldr	r2, [pc, #204]	; (8009218 <ip4_input+0x240>)
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8009150:	4a31      	ldr	r2, [pc, #196]	; (8009218 <ip4_input+0x240>)
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8009156:	4a30      	ldr	r2, [pc, #192]	; (8009218 <ip4_input+0x240>)
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	b2db      	uxtb	r3, r3
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	b2db      	uxtb	r3, r3
 800916a:	b29a      	uxth	r2, r3
 800916c:	4b2a      	ldr	r3, [pc, #168]	; (8009218 <ip4_input+0x240>)
 800916e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009170:	89fb      	ldrh	r3, [r7, #14]
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f002 f9d7 	bl	800b528 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	7a5b      	ldrb	r3, [r3, #9]
 800917e:	2b11      	cmp	r3, #17
 8009180:	d006      	beq.n	8009190 <ip4_input+0x1b8>
 8009182:	2b11      	cmp	r3, #17
 8009184:	dc13      	bgt.n	80091ae <ip4_input+0x1d6>
 8009186:	2b01      	cmp	r3, #1
 8009188:	d00c      	beq.n	80091a4 <ip4_input+0x1cc>
 800918a:	2b06      	cmp	r3, #6
 800918c:	d005      	beq.n	800919a <ip4_input+0x1c2>
 800918e:	e00e      	b.n	80091ae <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f007 fff8 	bl	8011188 <udp_input>
        break;
 8009198:	e026      	b.n	80091e8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f004 f871 	bl	800d284 <tcp_input>
        break;
 80091a2:	e021      	b.n	80091e8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff fbf6 	bl	8008998 <icmp_input>
        break;
 80091ac:	e01c      	b.n	80091e8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80091ae:	4b1a      	ldr	r3, [pc, #104]	; (8009218 <ip4_input+0x240>)
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	6939      	ldr	r1, [r7, #16]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 f90b 	bl	80093d0 <ip4_addr_isbroadcast_u32>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10f      	bne.n	80091e0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80091c0:	4b15      	ldr	r3, [pc, #84]	; (8009218 <ip4_input+0x240>)
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80091c8:	2be0      	cmp	r3, #224	; 0xe0
 80091ca:	d009      	beq.n	80091e0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80091cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f002 fa1b 	bl	800b60e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80091d8:	2102      	movs	r1, #2
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff fcfc 	bl	8008bd8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f002 fa27 	bl	800b634 <pbuf_free>
        break;
 80091e6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80091e8:	4b0b      	ldr	r3, [pc, #44]	; (8009218 <ip4_input+0x240>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80091ee:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <ip4_input+0x240>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80091f4:	4b08      	ldr	r3, [pc, #32]	; (8009218 <ip4_input+0x240>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80091fa:	4b07      	ldr	r3, [pc, #28]	; (8009218 <ip4_input+0x240>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009200:	4b05      	ldr	r3, [pc, #20]	; (8009218 <ip4_input+0x240>)
 8009202:	2200      	movs	r2, #0
 8009204:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009206:	4b04      	ldr	r3, [pc, #16]	; (8009218 <ip4_input+0x240>)
 8009208:	2200      	movs	r2, #0
 800920a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	240051f8 	.word	0x240051f8
 800921c:	24008114 	.word	0x24008114

08009220 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08a      	sub	sp, #40	; 0x28
 8009224:	af04      	add	r7, sp, #16
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d009      	beq.n	800924c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <ip4_output_if+0x26>
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d102      	bne.n	800924c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	3304      	adds	r3, #4
 800924a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800924c:	78fa      	ldrb	r2, [r7, #3]
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	9302      	str	r3, [sp, #8]
 8009252:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	f897 3020 	ldrb.w	r3, [r7, #32]
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	4613      	mov	r3, r2
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	6979      	ldr	r1, [r7, #20]
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 f805 	bl	8009274 <ip4_output_if_src>
 800926a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
 8009280:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	7b9b      	ldrb	r3, [r3, #14]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d006      	beq.n	8009298 <ip4_output_if_src+0x24>
 800928a:	4b4b      	ldr	r3, [pc, #300]	; (80093b8 <ip4_output_if_src+0x144>)
 800928c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8009290:	494a      	ldr	r1, [pc, #296]	; (80093bc <ip4_output_if_src+0x148>)
 8009292:	484b      	ldr	r0, [pc, #300]	; (80093c0 <ip4_output_if_src+0x14c>)
 8009294:	f008 f906 	bl	80114a4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d060      	beq.n	8009360 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800929e:	2314      	movs	r3, #20
 80092a0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80092a2:	2114      	movs	r1, #20
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f002 f92f 	bl	800b508 <pbuf_add_header>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80092b0:	f06f 0301 	mvn.w	r3, #1
 80092b4:	e07c      	b.n	80093b0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	895b      	ldrh	r3, [r3, #10]
 80092c0:	2b13      	cmp	r3, #19
 80092c2:	d806      	bhi.n	80092d2 <ip4_output_if_src+0x5e>
 80092c4:	4b3c      	ldr	r3, [pc, #240]	; (80093b8 <ip4_output_if_src+0x144>)
 80092c6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80092ca:	493e      	ldr	r1, [pc, #248]	; (80093c4 <ip4_output_if_src+0x150>)
 80092cc:	483c      	ldr	r0, [pc, #240]	; (80093c0 <ip4_output_if_src+0x14c>)
 80092ce:	f008 f8e9 	bl	80114a4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	78fa      	ldrb	r2, [r7, #3]
 80092d6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80092de:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80092e8:	8b7b      	ldrh	r3, [r7, #26]
 80092ea:	089b      	lsrs	r3, r3, #2
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009300:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	891b      	ldrh	r3, [r3, #8]
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe faf6 	bl	80078f8 <lwip_htons>
 800930c:	4603      	mov	r3, r0
 800930e:	461a      	mov	r2, r3
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	2200      	movs	r2, #0
 8009318:	719a      	strb	r2, [r3, #6]
 800931a:	2200      	movs	r2, #0
 800931c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800931e:	4b2a      	ldr	r3, [pc, #168]	; (80093c8 <ip4_output_if_src+0x154>)
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe fae8 	bl	80078f8 <lwip_htons>
 8009328:	4603      	mov	r3, r0
 800932a:	461a      	mov	r2, r3
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8009330:	4b25      	ldr	r3, [pc, #148]	; (80093c8 <ip4_output_if_src+0x154>)
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	b29a      	uxth	r2, r3
 8009338:	4b23      	ldr	r3, [pc, #140]	; (80093c8 <ip4_output_if_src+0x154>)
 800933a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d104      	bne.n	800934c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009342:	4b22      	ldr	r3, [pc, #136]	; (80093cc <ip4_output_if_src+0x158>)
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	60da      	str	r2, [r3, #12]
 800934a:	e003      	b.n	8009354 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	2200      	movs	r2, #0
 8009358:	729a      	strb	r2, [r3, #10]
 800935a:	2200      	movs	r2, #0
 800935c:	72da      	strb	r2, [r3, #11]
 800935e:	e00f      	b.n	8009380 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	895b      	ldrh	r3, [r3, #10]
 8009364:	2b13      	cmp	r3, #19
 8009366:	d802      	bhi.n	800936e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009368:	f06f 0301 	mvn.w	r3, #1
 800936c:	e020      	b.n	80093b0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800937a:	f107 0314 	add.w	r3, r7, #20
 800937e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00c      	beq.n	80093a2 <ip4_output_if_src+0x12e>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	891a      	ldrh	r2, [r3, #8]
 800938c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009390:	429a      	cmp	r2, r3
 8009392:	d906      	bls.n	80093a2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 fd53 	bl	8009e44 <ip4_frag>
 800939e:	4603      	mov	r3, r0
 80093a0:	e006      	b.n	80093b0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	695b      	ldr	r3, [r3, #20]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	68f9      	ldr	r1, [r7, #12]
 80093aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ac:	4798      	blx	r3
 80093ae:	4603      	mov	r3, r0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3720      	adds	r7, #32
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	08012a38 	.word	0x08012a38
 80093bc:	08012a9c 	.word	0x08012a9c
 80093c0:	08012aa8 	.word	0x08012aa8
 80093c4:	08012ad0 	.word	0x08012ad0
 80093c8:	24005210 	.word	0x24005210
 80093cc:	08015208 	.word	0x08015208

080093d0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e4:	d002      	beq.n	80093ec <ip4_addr_isbroadcast_u32+0x1c>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e02a      	b.n	8009446 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093f6:	f003 0302 	and.w	r3, r3, #2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	e021      	b.n	8009446 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	3304      	adds	r3, #4
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	429a      	cmp	r2, r3
 800940c:	d101      	bne.n	8009412 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800940e:	2300      	movs	r3, #0
 8009410:	e019      	b.n	8009446 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	3304      	adds	r3, #4
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	405a      	eors	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	3308      	adds	r3, #8
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4013      	ands	r3, r2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10d      	bne.n	8009444 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	3308      	adds	r3, #8
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	43da      	mvns	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	3308      	adds	r3, #8
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800943c:	429a      	cmp	r2, r3
 800943e:	d101      	bne.n	8009444 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8009440:	2301      	movs	r3, #1
 8009442:	e000      	b.n	8009446 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8009444:	2300      	movs	r3, #0
  }
}
 8009446:	4618      	mov	r0, r3
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
	...

08009454 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800945a:	2300      	movs	r3, #0
 800945c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800945e:	4b12      	ldr	r3, [pc, #72]	; (80094a8 <ip_reass_tmr+0x54>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8009464:	e018      	b.n	8009498 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	7fdb      	ldrb	r3, [r3, #31]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00b      	beq.n	8009486 <ip_reass_tmr+0x32>
      r->timer--;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	7fdb      	ldrb	r3, [r3, #31]
 8009472:	3b01      	subs	r3, #1
 8009474:	b2da      	uxtb	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	e008      	b.n	8009498 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8009490:	68b9      	ldr	r1, [r7, #8]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f80a 	bl	80094ac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e3      	bne.n	8009466 <ip_reass_tmr+0x12>
    }
  }
}
 800949e:	bf00      	nop
 80094a0:	bf00      	nop
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	24005214 	.word	0x24005214

080094ac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d105      	bne.n	80094ce <ip_reass_free_complete_datagram+0x22>
 80094c2:	4b45      	ldr	r3, [pc, #276]	; (80095d8 <ip_reass_free_complete_datagram+0x12c>)
 80094c4:	22ab      	movs	r2, #171	; 0xab
 80094c6:	4945      	ldr	r1, [pc, #276]	; (80095dc <ip_reass_free_complete_datagram+0x130>)
 80094c8:	4845      	ldr	r0, [pc, #276]	; (80095e0 <ip_reass_free_complete_datagram+0x134>)
 80094ca:	f007 ffeb 	bl	80114a4 <iprintf>
  if (prev != NULL) {
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00a      	beq.n	80094ea <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d005      	beq.n	80094ea <ip_reass_free_complete_datagram+0x3e>
 80094de:	4b3e      	ldr	r3, [pc, #248]	; (80095d8 <ip_reass_free_complete_datagram+0x12c>)
 80094e0:	22ad      	movs	r2, #173	; 0xad
 80094e2:	4940      	ldr	r1, [pc, #256]	; (80095e4 <ip_reass_free_complete_datagram+0x138>)
 80094e4:	483e      	ldr	r0, [pc, #248]	; (80095e0 <ip_reass_free_complete_datagram+0x134>)
 80094e6:	f007 ffdd 	bl	80114a4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	889b      	ldrh	r3, [r3, #4]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d12a      	bne.n	8009552 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	6858      	ldr	r0, [r3, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3308      	adds	r3, #8
 8009512:	2214      	movs	r2, #20
 8009514:	4619      	mov	r1, r3
 8009516:	f007 ffaf 	bl	8011478 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800951a:	2101      	movs	r1, #1
 800951c:	69b8      	ldr	r0, [r7, #24]
 800951e:	f7ff fb6b 	bl	8008bf8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8009522:	69b8      	ldr	r0, [r7, #24]
 8009524:	f002 f90e 	bl	800b744 <pbuf_clen>
 8009528:	4603      	mov	r3, r0
 800952a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800952c:	8bfa      	ldrh	r2, [r7, #30]
 800952e:	8a7b      	ldrh	r3, [r7, #18]
 8009530:	4413      	add	r3, r2
 8009532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009536:	db05      	blt.n	8009544 <ip_reass_free_complete_datagram+0x98>
 8009538:	4b27      	ldr	r3, [pc, #156]	; (80095d8 <ip_reass_free_complete_datagram+0x12c>)
 800953a:	22bc      	movs	r2, #188	; 0xbc
 800953c:	492a      	ldr	r1, [pc, #168]	; (80095e8 <ip_reass_free_complete_datagram+0x13c>)
 800953e:	4828      	ldr	r0, [pc, #160]	; (80095e0 <ip_reass_free_complete_datagram+0x134>)
 8009540:	f007 ffb0 	bl	80114a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009544:	8bfa      	ldrh	r2, [r7, #30]
 8009546:	8a7b      	ldrh	r3, [r7, #18]
 8009548:	4413      	add	r3, r2
 800954a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800954c:	69b8      	ldr	r0, [r7, #24]
 800954e:	f002 f871 	bl	800b634 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8009558:	e01f      	b.n	800959a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f002 f8ea 	bl	800b744 <pbuf_clen>
 8009570:	4603      	mov	r3, r0
 8009572:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009574:	8bfa      	ldrh	r2, [r7, #30]
 8009576:	8a7b      	ldrh	r3, [r7, #18]
 8009578:	4413      	add	r3, r2
 800957a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800957e:	db05      	blt.n	800958c <ip_reass_free_complete_datagram+0xe0>
 8009580:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <ip_reass_free_complete_datagram+0x12c>)
 8009582:	22cc      	movs	r2, #204	; 0xcc
 8009584:	4918      	ldr	r1, [pc, #96]	; (80095e8 <ip_reass_free_complete_datagram+0x13c>)
 8009586:	4816      	ldr	r0, [pc, #88]	; (80095e0 <ip_reass_free_complete_datagram+0x134>)
 8009588:	f007 ff8c 	bl	80114a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800958c:	8bfa      	ldrh	r2, [r7, #30]
 800958e:	8a7b      	ldrh	r3, [r7, #18]
 8009590:	4413      	add	r3, r2
 8009592:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f002 f84d 	bl	800b634 <pbuf_free>
  while (p != NULL) {
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1dc      	bne.n	800955a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f8c2 	bl	800972c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80095a8:	4b10      	ldr	r3, [pc, #64]	; (80095ec <ip_reass_free_complete_datagram+0x140>)
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	8bfa      	ldrh	r2, [r7, #30]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d905      	bls.n	80095be <ip_reass_free_complete_datagram+0x112>
 80095b2:	4b09      	ldr	r3, [pc, #36]	; (80095d8 <ip_reass_free_complete_datagram+0x12c>)
 80095b4:	22d2      	movs	r2, #210	; 0xd2
 80095b6:	490e      	ldr	r1, [pc, #56]	; (80095f0 <ip_reass_free_complete_datagram+0x144>)
 80095b8:	4809      	ldr	r0, [pc, #36]	; (80095e0 <ip_reass_free_complete_datagram+0x134>)
 80095ba:	f007 ff73 	bl	80114a4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80095be:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <ip_reass_free_complete_datagram+0x140>)
 80095c0:	881a      	ldrh	r2, [r3, #0]
 80095c2:	8bfb      	ldrh	r3, [r7, #30]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	4b08      	ldr	r3, [pc, #32]	; (80095ec <ip_reass_free_complete_datagram+0x140>)
 80095ca:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80095cc:	8bfb      	ldrh	r3, [r7, #30]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3720      	adds	r7, #32
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	08012b00 	.word	0x08012b00
 80095dc:	08012b68 	.word	0x08012b68
 80095e0:	08012b74 	.word	0x08012b74
 80095e4:	08012b9c 	.word	0x08012b9c
 80095e8:	08012bb0 	.word	0x08012bb0
 80095ec:	24005218 	.word	0x24005218
 80095f0:	08012bd0 	.word	0x08012bd0

080095f4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b08a      	sub	sp, #40	; 0x28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80095fe:	2300      	movs	r3, #0
 8009600:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8009602:	2300      	movs	r3, #0
 8009604:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8009606:	2300      	movs	r3, #0
 8009608:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800960a:	2300      	movs	r3, #0
 800960c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8009612:	4b28      	ldr	r3, [pc, #160]	; (80096b4 <ip_reass_remove_oldest_datagram+0xc0>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8009618:	e030      	b.n	800967c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	695a      	ldr	r2, [r3, #20]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	429a      	cmp	r2, r3
 8009624:	d10c      	bne.n	8009640 <ip_reass_remove_oldest_datagram+0x4c>
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	699a      	ldr	r2, [r3, #24]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	429a      	cmp	r2, r3
 8009630:	d106      	bne.n	8009640 <ip_reass_remove_oldest_datagram+0x4c>
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	899a      	ldrh	r2, [r3, #12]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	889b      	ldrh	r3, [r3, #4]
 800963a:	b29b      	uxth	r3, r3
 800963c:	429a      	cmp	r2, r3
 800963e:	d014      	beq.n	800966a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	3301      	adds	r3, #1
 8009644:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d104      	bne.n	8009656 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	61bb      	str	r3, [r7, #24]
 8009654:	e009      	b.n	800966a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	7fda      	ldrb	r2, [r3, #31]
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	7fdb      	ldrb	r3, [r3, #31]
 800965e:	429a      	cmp	r2, r3
 8009660:	d803      	bhi.n	800966a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1cb      	bne.n	800961a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8009682:	6a3b      	ldr	r3, [r7, #32]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d008      	beq.n	800969a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8009688:	69b9      	ldr	r1, [r7, #24]
 800968a:	6a38      	ldr	r0, [r7, #32]
 800968c:	f7ff ff0e 	bl	80094ac <ip_reass_free_complete_datagram>
 8009690:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	4413      	add	r3, r2
 8009698:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	da02      	bge.n	80096a8 <ip_reass_remove_oldest_datagram+0xb4>
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	dcac      	bgt.n	8009602 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80096a8:	697b      	ldr	r3, [r7, #20]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3728      	adds	r7, #40	; 0x28
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	24005214 	.word	0x24005214

080096b8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80096c2:	2004      	movs	r0, #4
 80096c4:	f001 f934 	bl	800a930 <memp_malloc>
 80096c8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d110      	bne.n	80096f2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff ff8e 	bl	80095f4 <ip_reass_remove_oldest_datagram>
 80096d8:	4602      	mov	r2, r0
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	4293      	cmp	r3, r2
 80096de:	dc03      	bgt.n	80096e8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80096e0:	2004      	movs	r0, #4
 80096e2:	f001 f925 	bl	800a930 <memp_malloc>
 80096e6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	e016      	b.n	8009720 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80096f2:	2220      	movs	r2, #32
 80096f4:	2100      	movs	r1, #0
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f007 fecc 	bl	8011494 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	220f      	movs	r2, #15
 8009700:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8009702:	4b09      	ldr	r3, [pc, #36]	; (8009728 <ip_reass_enqueue_new_datagram+0x70>)
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800970a:	4a07      	ldr	r2, [pc, #28]	; (8009728 <ip_reass_enqueue_new_datagram+0x70>)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3308      	adds	r3, #8
 8009714:	2214      	movs	r2, #20
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	4618      	mov	r0, r3
 800971a:	f007 fead 	bl	8011478 <memcpy>
  return ipr;
 800971e:	68fb      	ldr	r3, [r7, #12]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	24005214 	.word	0x24005214

0800972c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8009736:	4b10      	ldr	r3, [pc, #64]	; (8009778 <ip_reass_dequeue_datagram+0x4c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	429a      	cmp	r2, r3
 800973e:	d104      	bne.n	800974a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a0c      	ldr	r2, [pc, #48]	; (8009778 <ip_reass_dequeue_datagram+0x4c>)
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	e00d      	b.n	8009766 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d106      	bne.n	800975e <ip_reass_dequeue_datagram+0x32>
 8009750:	4b0a      	ldr	r3, [pc, #40]	; (800977c <ip_reass_dequeue_datagram+0x50>)
 8009752:	f240 1245 	movw	r2, #325	; 0x145
 8009756:	490a      	ldr	r1, [pc, #40]	; (8009780 <ip_reass_dequeue_datagram+0x54>)
 8009758:	480a      	ldr	r0, [pc, #40]	; (8009784 <ip_reass_dequeue_datagram+0x58>)
 800975a:	f007 fea3 	bl	80114a4 <iprintf>
    prev->next = ipr->next;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	2004      	movs	r0, #4
 800976a:	f001 f951 	bl	800aa10 <memp_free>
}
 800976e:	bf00      	nop
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	24005214 	.word	0x24005214
 800977c:	08012b00 	.word	0x08012b00
 8009780:	08012bf4 	.word	0x08012bf4
 8009784:	08012b74 	.word	0x08012b74

08009788 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08c      	sub	sp, #48	; 0x30
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8009794:	2300      	movs	r3, #0
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8009798:	2301      	movs	r3, #1
 800979a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	885b      	ldrh	r3, [r3, #2]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe f8a5 	bl	80078f8 <lwip_htons>
 80097ae:	4603      	mov	r3, r0
 80097b0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	f003 030f 	and.w	r3, r3, #15
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80097c0:	7e7b      	ldrb	r3, [r7, #25]
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	8b7a      	ldrh	r2, [r7, #26]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d202      	bcs.n	80097d0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80097ca:	f04f 33ff 	mov.w	r3, #4294967295
 80097ce:	e135      	b.n	8009a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80097d0:	7e7b      	ldrb	r3, [r7, #25]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	8b7a      	ldrh	r2, [r7, #26]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	88db      	ldrh	r3, [r3, #6]
 80097de:	b29b      	uxth	r3, r3
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fe f889 	bl	80078f8 <lwip_htons>
 80097e6:	4603      	mov	r3, r0
 80097e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80097f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fa:	2200      	movs	r2, #0
 80097fc:	701a      	strb	r2, [r3, #0]
 80097fe:	2200      	movs	r2, #0
 8009800:	705a      	strb	r2, [r3, #1]
 8009802:	2200      	movs	r2, #0
 8009804:	709a      	strb	r2, [r3, #2]
 8009806:	2200      	movs	r2, #0
 8009808:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	8afa      	ldrh	r2, [r7, #22]
 800980e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8009810:	8afa      	ldrh	r2, [r7, #22]
 8009812:	8b7b      	ldrh	r3, [r7, #26]
 8009814:	4413      	add	r3, r2
 8009816:	b29a      	uxth	r2, r3
 8009818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800981c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981e:	88db      	ldrh	r3, [r3, #6]
 8009820:	b29b      	uxth	r3, r3
 8009822:	8afa      	ldrh	r2, [r7, #22]
 8009824:	429a      	cmp	r2, r3
 8009826:	d902      	bls.n	800982e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009828:	f04f 33ff 	mov.w	r3, #4294967295
 800982c:	e106      	b.n	8009a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	627b      	str	r3, [r7, #36]	; 0x24
 8009834:	e068      	b.n	8009908 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983e:	889b      	ldrh	r3, [r3, #4]
 8009840:	b29a      	uxth	r2, r3
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	889b      	ldrh	r3, [r3, #4]
 8009846:	b29b      	uxth	r3, r3
 8009848:	429a      	cmp	r2, r3
 800984a:	d235      	bcs.n	80098b8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800984c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009850:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8009852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009854:	2b00      	cmp	r3, #0
 8009856:	d020      	beq.n	800989a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8009858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985a:	889b      	ldrh	r3, [r3, #4]
 800985c:	b29a      	uxth	r2, r3
 800985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009860:	88db      	ldrh	r3, [r3, #6]
 8009862:	b29b      	uxth	r3, r3
 8009864:	429a      	cmp	r2, r3
 8009866:	d307      	bcc.n	8009878 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8009868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986a:	88db      	ldrh	r3, [r3, #6]
 800986c:	b29a      	uxth	r2, r3
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	889b      	ldrh	r3, [r3, #4]
 8009872:	b29b      	uxth	r3, r3
 8009874:	429a      	cmp	r2, r3
 8009876:	d902      	bls.n	800987e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009878:	f04f 33ff 	mov.w	r3, #4294967295
 800987c:	e0de      	b.n	8009a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8009884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009886:	88db      	ldrh	r3, [r3, #6]
 8009888:	b29a      	uxth	r2, r3
 800988a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988c:	889b      	ldrh	r3, [r3, #4]
 800988e:	b29b      	uxth	r3, r3
 8009890:	429a      	cmp	r2, r3
 8009892:	d03d      	beq.n	8009910 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8009898:	e03a      	b.n	8009910 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800989a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989c:	88db      	ldrh	r3, [r3, #6]
 800989e:	b29a      	uxth	r2, r3
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	889b      	ldrh	r3, [r3, #4]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d902      	bls.n	80098b0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80098aa:	f04f 33ff 	mov.w	r3, #4294967295
 80098ae:	e0c5      	b.n	8009a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	605a      	str	r2, [r3, #4]
      break;
 80098b6:	e02b      	b.n	8009910 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	889b      	ldrh	r3, [r3, #4]
 80098bc:	b29a      	uxth	r2, r3
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	889b      	ldrh	r3, [r3, #4]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d102      	bne.n	80098ce <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80098c8:	f04f 33ff 	mov.w	r3, #4294967295
 80098cc:	e0b6      	b.n	8009a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	889b      	ldrh	r3, [r3, #4]
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	88db      	ldrh	r3, [r3, #6]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	429a      	cmp	r2, r3
 80098dc:	d202      	bcs.n	80098e4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80098de:	f04f 33ff 	mov.w	r3, #4294967295
 80098e2:	e0ab      	b.n	8009a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d009      	beq.n	80098fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	88db      	ldrh	r3, [r3, #6]
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	889b      	ldrh	r3, [r3, #4]
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d001      	beq.n	80098fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	2b00      	cmp	r3, #0
 800990c:	d193      	bne.n	8009836 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800990e:	e000      	b.n	8009912 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8009910:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	2b00      	cmp	r3, #0
 8009916:	d12d      	bne.n	8009974 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	2b00      	cmp	r3, #0
 800991c:	d01c      	beq.n	8009958 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	88db      	ldrh	r3, [r3, #6]
 8009922:	b29a      	uxth	r2, r3
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	889b      	ldrh	r3, [r3, #4]
 8009928:	b29b      	uxth	r3, r3
 800992a:	429a      	cmp	r2, r3
 800992c:	d906      	bls.n	800993c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800992e:	4b45      	ldr	r3, [pc, #276]	; (8009a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009930:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8009934:	4944      	ldr	r1, [pc, #272]	; (8009a48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8009936:	4845      	ldr	r0, [pc, #276]	; (8009a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009938:	f007 fdb4 	bl	80114a4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8009942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009944:	88db      	ldrh	r3, [r3, #6]
 8009946:	b29a      	uxth	r2, r3
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	889b      	ldrh	r3, [r3, #4]
 800994c:	b29b      	uxth	r3, r3
 800994e:	429a      	cmp	r2, r3
 8009950:	d010      	beq.n	8009974 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	623b      	str	r3, [r7, #32]
 8009956:	e00d      	b.n	8009974 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d006      	beq.n	800996e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8009960:	4b38      	ldr	r3, [pc, #224]	; (8009a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009962:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8009966:	493a      	ldr	r1, [pc, #232]	; (8009a50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8009968:	4838      	ldr	r0, [pc, #224]	; (8009a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800996a:	f007 fd9b 	bl	80114a4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d105      	bne.n	8009986 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	7f9b      	ldrb	r3, [r3, #30]
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d059      	beq.n	8009a3a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d04f      	beq.n	8009a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d006      	beq.n	80099a2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	889b      	ldrh	r3, [r3, #4]
 800999c:	b29b      	uxth	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	623b      	str	r3, [r7, #32]
 80099a6:	e041      	b.n	8009a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80099ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80099b2:	e012      	b.n	80099da <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	88db      	ldrh	r3, [r3, #6]
 80099be:	b29a      	uxth	r2, r3
 80099c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c2:	889b      	ldrh	r3, [r3, #4]
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d002      	beq.n	80099d0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	623b      	str	r3, [r7, #32]
            break;
 80099ce:	e007      	b.n	80099e0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80099d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1e9      	bne.n	80099b4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d022      	beq.n	8009a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80099ee:	4b15      	ldr	r3, [pc, #84]	; (8009a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80099f0:	f240 12df 	movw	r2, #479	; 0x1df
 80099f4:	4917      	ldr	r1, [pc, #92]	; (8009a54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80099f6:	4815      	ldr	r0, [pc, #84]	; (8009a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80099f8:	f007 fd54 	bl	80114a4 <iprintf>
          LWIP_ASSERT("sanity check",
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d106      	bne.n	8009a16 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8009a08:	4b0e      	ldr	r3, [pc, #56]	; (8009a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009a0a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009a0e:	4911      	ldr	r1, [pc, #68]	; (8009a54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8009a10:	480e      	ldr	r0, [pc, #56]	; (8009a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009a12:	f007 fd47 	bl	80114a4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d006      	beq.n	8009a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8009a1e:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009a20:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8009a24:	490c      	ldr	r1, [pc, #48]	; (8009a58 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8009a26:	4809      	ldr	r0, [pc, #36]	; (8009a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009a28:	f007 fd3c 	bl	80114a4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	bf14      	ite	ne
 8009a32:	2301      	movne	r3, #1
 8009a34:	2300      	moveq	r3, #0
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	e000      	b.n	8009a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3730      	adds	r7, #48	; 0x30
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	08012b00 	.word	0x08012b00
 8009a48:	08012c10 	.word	0x08012c10
 8009a4c:	08012b74 	.word	0x08012b74
 8009a50:	08012c30 	.word	0x08012c30
 8009a54:	08012c68 	.word	0x08012c68
 8009a58:	08012c78 	.word	0x08012c78

08009a5c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08e      	sub	sp, #56	; 0x38
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	f003 030f 	and.w	r3, r3, #15
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b14      	cmp	r3, #20
 8009a7a:	f040 8171 	bne.w	8009d60 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8009a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a80:	88db      	ldrh	r3, [r3, #6]
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fd ff37 	bl	80078f8 <lwip_htons>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a98:	885b      	ldrh	r3, [r3, #2]
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fd ff2b 	bl	80078f8 <lwip_htons>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8009aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	f003 030f 	and.w	r3, r3, #15
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8009ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	f0c0 8150 	bcc.w	8009d64 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8009ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f001 fe37 	bl	800b744 <pbuf_clen>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009ada:	4b8c      	ldr	r3, [pc, #560]	; (8009d0c <ip4_reass+0x2b0>)
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	8c3b      	ldrh	r3, [r7, #32]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	2b0a      	cmp	r3, #10
 8009ae6:	dd10      	ble.n	8009b0a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009ae8:	8c3b      	ldrh	r3, [r7, #32]
 8009aea:	4619      	mov	r1, r3
 8009aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aee:	f7ff fd81 	bl	80095f4 <ip_reass_remove_oldest_datagram>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 8137 	beq.w	8009d68 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8009afa:	4b84      	ldr	r3, [pc, #528]	; (8009d0c <ip4_reass+0x2b0>)
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	8c3b      	ldrh	r3, [r7, #32]
 8009b02:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009b04:	2b0a      	cmp	r3, #10
 8009b06:	f300 812f 	bgt.w	8009d68 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009b0a:	4b81      	ldr	r3, [pc, #516]	; (8009d10 <ip4_reass+0x2b4>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8009b10:	e015      	b.n	8009b3e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	695a      	ldr	r2, [r3, #20]
 8009b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d10c      	bne.n	8009b38 <ip4_reass+0xdc>
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	699a      	ldr	r2, [r3, #24]
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d106      	bne.n	8009b38 <ip4_reass+0xdc>
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2c:	899a      	ldrh	r2, [r3, #12]
 8009b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b30:	889b      	ldrh	r3, [r3, #4]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d006      	beq.n	8009b46 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1e6      	bne.n	8009b12 <ip4_reass+0xb6>
 8009b44:	e000      	b.n	8009b48 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8009b46:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8009b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d109      	bne.n	8009b62 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8009b4e:	8c3b      	ldrh	r3, [r7, #32]
 8009b50:	4619      	mov	r1, r3
 8009b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b54:	f7ff fdb0 	bl	80096b8 <ip_reass_enqueue_new_datagram>
 8009b58:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d11c      	bne.n	8009b9a <ip4_reass+0x13e>
      goto nullreturn;
 8009b60:	e105      	b.n	8009d6e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b64:	88db      	ldrh	r3, [r3, #6]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fd fec5 	bl	80078f8 <lwip_htons>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d110      	bne.n	8009b9a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	89db      	ldrh	r3, [r3, #14]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fd febb 	bl	80078f8 <lwip_htons>
 8009b82:	4603      	mov	r3, r0
 8009b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d006      	beq.n	8009b9a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8e:	3308      	adds	r3, #8
 8009b90:	2214      	movs	r2, #20
 8009b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b94:	4618      	mov	r0, r3
 8009b96:	f007 fc6f 	bl	8011478 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8009b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9c:	88db      	ldrh	r3, [r3, #6]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	f003 0320 	and.w	r3, r3, #32
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bf0c      	ite	eq
 8009ba8:	2301      	moveq	r3, #1
 8009baa:	2300      	movne	r3, #0
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00e      	beq.n	8009bd4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8009bb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009bb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bba:	4413      	add	r3, r2
 8009bbc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8009bbe:	8b7a      	ldrh	r2, [r7, #26]
 8009bc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	f0c0 80a0 	bcc.w	8009d08 <ip4_reass+0x2ac>
 8009bc8:	8b7b      	ldrh	r3, [r7, #26]
 8009bca:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	f200 809a 	bhi.w	8009d08 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8009bd4:	69fa      	ldr	r2, [r7, #28]
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bda:	f7ff fdd5 	bl	8009788 <ip_reass_chain_frag_into_datagram_and_validate>
 8009bde:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be6:	f000 809b 	beq.w	8009d20 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8009bea:	4b48      	ldr	r3, [pc, #288]	; (8009d0c <ip4_reass+0x2b0>)
 8009bec:	881a      	ldrh	r2, [r3, #0]
 8009bee:	8c3b      	ldrh	r3, [r7, #32]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	4b45      	ldr	r3, [pc, #276]	; (8009d0c <ip4_reass+0x2b0>)
 8009bf6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00d      	beq.n	8009c1a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8009bfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c02:	4413      	add	r3, r2
 8009c04:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	8a7a      	ldrh	r2, [r7, #18]
 8009c0a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0e:	7f9b      	ldrb	r3, [r3, #30]
 8009c10:	f043 0301 	orr.w	r3, r3, #1
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d171      	bne.n	8009d04 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	8b9b      	ldrh	r3, [r3, #28]
 8009c24:	3314      	adds	r3, #20
 8009c26:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	2214      	movs	r2, #20
 8009c40:	4619      	mov	r1, r3
 8009c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c44:	f007 fc18 	bl	8011478 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8009c48:	8a3b      	ldrh	r3, [r7, #16]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fd fe54 	bl	80078f8 <lwip_htons>
 8009c50:	4603      	mov	r3, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8009c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	719a      	strb	r2, [r3, #6]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	2200      	movs	r2, #0
 8009c66:	729a      	strb	r2, [r3, #10]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8009c72:	e00d      	b.n	8009c90 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8009c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8009c7a:	2114      	movs	r1, #20
 8009c7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c7e:	f001 fc53 	bl	800b528 <pbuf_remove_header>
      pbuf_cat(p, r);
 8009c82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 fd97 	bl	800b7b8 <pbuf_cat>
      r = iprh->next_pbuf;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8009c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1ee      	bne.n	8009c74 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8009c96:	4b1e      	ldr	r3, [pc, #120]	; (8009d10 <ip4_reass+0x2b4>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d102      	bne.n	8009ca6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ca4:	e010      	b.n	8009cc8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8009ca6:	4b1a      	ldr	r3, [pc, #104]	; (8009d10 <ip4_reass+0x2b4>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cac:	e007      	b.n	8009cbe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8009cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d006      	beq.n	8009cc6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8009cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1f4      	bne.n	8009cae <ip4_reass+0x252>
 8009cc4:	e000      	b.n	8009cc8 <ip4_reass+0x26c>
          break;
 8009cc6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8009cc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ccc:	f7ff fd2e 	bl	800972c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f001 fd37 	bl	800b744 <pbuf_clen>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8009cda:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <ip4_reass+0x2b0>)
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	8c3a      	ldrh	r2, [r7, #32]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d906      	bls.n	8009cf2 <ip4_reass+0x296>
 8009ce4:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <ip4_reass+0x2b8>)
 8009ce6:	f240 229b 	movw	r2, #667	; 0x29b
 8009cea:	490b      	ldr	r1, [pc, #44]	; (8009d18 <ip4_reass+0x2bc>)
 8009cec:	480b      	ldr	r0, [pc, #44]	; (8009d1c <ip4_reass+0x2c0>)
 8009cee:	f007 fbd9 	bl	80114a4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8009cf2:	4b06      	ldr	r3, [pc, #24]	; (8009d0c <ip4_reass+0x2b0>)
 8009cf4:	881a      	ldrh	r2, [r3, #0]
 8009cf6:	8c3b      	ldrh	r3, [r7, #32]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	4b03      	ldr	r3, [pc, #12]	; (8009d0c <ip4_reass+0x2b0>)
 8009cfe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	e038      	b.n	8009d76 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8009d04:	2300      	movs	r3, #0
 8009d06:	e036      	b.n	8009d76 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8009d08:	bf00      	nop
 8009d0a:	e00a      	b.n	8009d22 <ip4_reass+0x2c6>
 8009d0c:	24005218 	.word	0x24005218
 8009d10:	24005214 	.word	0x24005214
 8009d14:	08012b00 	.word	0x08012b00
 8009d18:	08012c9c 	.word	0x08012c9c
 8009d1c:	08012b74 	.word	0x08012b74
    goto nullreturn_ipr;
 8009d20:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8009d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d106      	bne.n	8009d36 <ip4_reass+0x2da>
 8009d28:	4b15      	ldr	r3, [pc, #84]	; (8009d80 <ip4_reass+0x324>)
 8009d2a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8009d2e:	4915      	ldr	r1, [pc, #84]	; (8009d84 <ip4_reass+0x328>)
 8009d30:	4815      	ldr	r0, [pc, #84]	; (8009d88 <ip4_reass+0x32c>)
 8009d32:	f007 fbb7 	bl	80114a4 <iprintf>
  if (ipr->p == NULL) {
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d116      	bne.n	8009d6c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8009d3e:	4b13      	ldr	r3, [pc, #76]	; (8009d8c <ip4_reass+0x330>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d006      	beq.n	8009d56 <ip4_reass+0x2fa>
 8009d48:	4b0d      	ldr	r3, [pc, #52]	; (8009d80 <ip4_reass+0x324>)
 8009d4a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009d4e:	4910      	ldr	r1, [pc, #64]	; (8009d90 <ip4_reass+0x334>)
 8009d50:	480d      	ldr	r0, [pc, #52]	; (8009d88 <ip4_reass+0x32c>)
 8009d52:	f007 fba7 	bl	80114a4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8009d56:	2100      	movs	r1, #0
 8009d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d5a:	f7ff fce7 	bl	800972c <ip_reass_dequeue_datagram>
 8009d5e:	e006      	b.n	8009d6e <ip4_reass+0x312>
    goto nullreturn;
 8009d60:	bf00      	nop
 8009d62:	e004      	b.n	8009d6e <ip4_reass+0x312>
    goto nullreturn;
 8009d64:	bf00      	nop
 8009d66:	e002      	b.n	8009d6e <ip4_reass+0x312>
      goto nullreturn;
 8009d68:	bf00      	nop
 8009d6a:	e000      	b.n	8009d6e <ip4_reass+0x312>
  }

nullreturn:
 8009d6c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f001 fc60 	bl	800b634 <pbuf_free>
  return NULL;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3738      	adds	r7, #56	; 0x38
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	08012b00 	.word	0x08012b00
 8009d84:	08012cb8 	.word	0x08012cb8
 8009d88:	08012b74 	.word	0x08012b74
 8009d8c:	24005214 	.word	0x24005214
 8009d90:	08012cc4 	.word	0x08012cc4

08009d94 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8009d98:	2005      	movs	r0, #5
 8009d9a:	f000 fdc9 	bl	800a930 <memp_malloc>
 8009d9e:	4603      	mov	r3, r0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d106      	bne.n	8009dc0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8009db2:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8009db4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8009db8:	4906      	ldr	r1, [pc, #24]	; (8009dd4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8009dba:	4807      	ldr	r0, [pc, #28]	; (8009dd8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8009dbc:	f007 fb72 	bl	80114a4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8009dc0:	6879      	ldr	r1, [r7, #4]
 8009dc2:	2005      	movs	r0, #5
 8009dc4:	f000 fe24 	bl	800aa10 <memp_free>
}
 8009dc8:	bf00      	nop
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	08012b00 	.word	0x08012b00
 8009dd4:	08012ce4 	.word	0x08012ce4
 8009dd8:	08012b74 	.word	0x08012b74

08009ddc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d106      	bne.n	8009dfc <ipfrag_free_pbuf_custom+0x20>
 8009dee:	4b11      	ldr	r3, [pc, #68]	; (8009e34 <ipfrag_free_pbuf_custom+0x58>)
 8009df0:	f240 22ce 	movw	r2, #718	; 0x2ce
 8009df4:	4910      	ldr	r1, [pc, #64]	; (8009e38 <ipfrag_free_pbuf_custom+0x5c>)
 8009df6:	4811      	ldr	r0, [pc, #68]	; (8009e3c <ipfrag_free_pbuf_custom+0x60>)
 8009df8:	f007 fb54 	bl	80114a4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d006      	beq.n	8009e12 <ipfrag_free_pbuf_custom+0x36>
 8009e04:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <ipfrag_free_pbuf_custom+0x58>)
 8009e06:	f240 22cf 	movw	r2, #719	; 0x2cf
 8009e0a:	490d      	ldr	r1, [pc, #52]	; (8009e40 <ipfrag_free_pbuf_custom+0x64>)
 8009e0c:	480b      	ldr	r0, [pc, #44]	; (8009e3c <ipfrag_free_pbuf_custom+0x60>)
 8009e0e:	f007 fb49 	bl	80114a4 <iprintf>
  if (pcr->original != NULL) {
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d004      	beq.n	8009e24 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f001 fc08 	bl	800b634 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f7ff ffbd 	bl	8009da4 <ip_frag_free_pbuf_custom_ref>
}
 8009e2a:	bf00      	nop
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	08012b00 	.word	0x08012b00
 8009e38:	08012cf0 	.word	0x08012cf0
 8009e3c:	08012b74 	.word	0x08012b74
 8009e40:	08012cfc 	.word	0x08012cfc

08009e44 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b094      	sub	sp, #80	; 0x50
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8009e50:	2300      	movs	r3, #0
 8009e52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009e5a:	3b14      	subs	r3, #20
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	da00      	bge.n	8009e62 <ip4_frag+0x1e>
 8009e60:	3307      	adds	r3, #7
 8009e62:	10db      	asrs	r3, r3, #3
 8009e64:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8009e66:	2314      	movs	r3, #20
 8009e68:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8009e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e72:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	f003 030f 	and.w	r3, r3, #15
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b14      	cmp	r3, #20
 8009e84:	d002      	beq.n	8009e8c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8009e86:	f06f 0305 	mvn.w	r3, #5
 8009e8a:	e110      	b.n	800a0ae <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	895b      	ldrh	r3, [r3, #10]
 8009e90:	2b13      	cmp	r3, #19
 8009e92:	d809      	bhi.n	8009ea8 <ip4_frag+0x64>
 8009e94:	4b88      	ldr	r3, [pc, #544]	; (800a0b8 <ip4_frag+0x274>)
 8009e96:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8009e9a:	4988      	ldr	r1, [pc, #544]	; (800a0bc <ip4_frag+0x278>)
 8009e9c:	4888      	ldr	r0, [pc, #544]	; (800a0c0 <ip4_frag+0x27c>)
 8009e9e:	f007 fb01 	bl	80114a4 <iprintf>
 8009ea2:	f06f 0305 	mvn.w	r3, #5
 8009ea6:	e102      	b.n	800a0ae <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eaa:	88db      	ldrh	r3, [r3, #6]
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fd fd22 	bl	80078f8 <lwip_htons>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8009eb8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009eba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ebe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8009ec2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	891b      	ldrh	r3, [r3, #8]
 8009ece:	3b14      	subs	r3, #20
 8009ed0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8009ed4:	e0e1      	b.n	800a09a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8009ed6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009ed8:	00db      	lsls	r3, r3, #3
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	bf28      	it	cs
 8009ee4:	4613      	movcs	r3, r2
 8009ee6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8009ee8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009eec:	2114      	movs	r1, #20
 8009eee:	200e      	movs	r0, #14
 8009ef0:	f001 f8bc 	bl	800b06c <pbuf_alloc>
 8009ef4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 80d5 	beq.w	800a0a8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	895b      	ldrh	r3, [r3, #10]
 8009f02:	2b13      	cmp	r3, #19
 8009f04:	d806      	bhi.n	8009f14 <ip4_frag+0xd0>
 8009f06:	4b6c      	ldr	r3, [pc, #432]	; (800a0b8 <ip4_frag+0x274>)
 8009f08:	f44f 7249 	mov.w	r2, #804	; 0x324
 8009f0c:	496d      	ldr	r1, [pc, #436]	; (800a0c4 <ip4_frag+0x280>)
 8009f0e:	486c      	ldr	r0, [pc, #432]	; (800a0c0 <ip4_frag+0x27c>)
 8009f10:	f007 fac8 	bl	80114a4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	2214      	movs	r2, #20
 8009f1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f007 faab 	bl	8011478 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8009f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8009f28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009f2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8009f2e:	e064      	b.n	8009ffa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	895a      	ldrh	r2, [r3, #10]
 8009f34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	895b      	ldrh	r3, [r3, #10]
 8009f3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d906      	bls.n	8009f52 <ip4_frag+0x10e>
 8009f44:	4b5c      	ldr	r3, [pc, #368]	; (800a0b8 <ip4_frag+0x274>)
 8009f46:	f240 322d 	movw	r2, #813	; 0x32d
 8009f4a:	495f      	ldr	r1, [pc, #380]	; (800a0c8 <ip4_frag+0x284>)
 8009f4c:	485c      	ldr	r0, [pc, #368]	; (800a0c0 <ip4_frag+0x27c>)
 8009f4e:	f007 faa9 	bl	80114a4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8009f52:	8bfa      	ldrh	r2, [r7, #30]
 8009f54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	bf28      	it	cs
 8009f5c:	4613      	movcs	r3, r2
 8009f5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8009f62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d105      	bne.n	8009f76 <ip4_frag+0x132>
        poff = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60fb      	str	r3, [r7, #12]
        continue;
 8009f74:	e041      	b.n	8009ffa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8009f76:	f7ff ff0d 	bl	8009d94 <ip_frag_alloc_pbuf_custom_ref>
 8009f7a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d103      	bne.n	8009f8a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8009f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f84:	f001 fb56 	bl	800b634 <pbuf_free>
        goto memerr;
 8009f88:	e08f      	b.n	800a0aa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8009f8a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8009f90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009f92:	4413      	add	r3, r2
 8009f94:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8009f98:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009f9c:	9201      	str	r2, [sp, #4]
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2241      	movs	r2, #65	; 0x41
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	f001 f98b 	bl	800b2c0 <pbuf_alloced_custom>
 8009faa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d106      	bne.n	8009fc0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8009fb2:	69b8      	ldr	r0, [r7, #24]
 8009fb4:	f7ff fef6 	bl	8009da4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8009fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fba:	f001 fb3b 	bl	800b634 <pbuf_free>
        goto memerr;
 8009fbe:	e074      	b.n	800a0aa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f001 fbd7 	bl	800b774 <pbuf_ref>
      pcr->original = p;
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	4a3f      	ldr	r2, [pc, #252]	; (800a0cc <ip4_frag+0x288>)
 8009fd0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8009fd2:	6979      	ldr	r1, [r7, #20]
 8009fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fd6:	f001 fbef 	bl	800b7b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8009fda:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8009fde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8009fe8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d004      	beq.n	8009ffa <ip4_frag+0x1b6>
        poff = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8009ffa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d196      	bne.n	8009f30 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800a002:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a004:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a008:	4413      	add	r3, r2
 800a00a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a010:	f1a3 0213 	sub.w	r2, r3, #19
 800a014:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a018:	429a      	cmp	r2, r3
 800a01a:	bfcc      	ite	gt
 800a01c:	2301      	movgt	r3, #1
 800a01e:	2300      	movle	r3, #0
 800a020:	b2db      	uxtb	r3, r3
 800a022:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800a024:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a02c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <ip4_frag+0x1f6>
 800a034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800a03a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a03c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a040:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800a042:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a044:	4618      	mov	r0, r3
 800a046:	f7fd fc57 	bl	80078f8 <lwip_htons>
 800a04a:	4603      	mov	r3, r0
 800a04c:	461a      	mov	r2, r3
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800a052:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a054:	3314      	adds	r3, #20
 800a056:	b29b      	uxth	r3, r3
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fd fc4d 	bl	80078f8 <lwip_htons>
 800a05e:	4603      	mov	r3, r0
 800a060:	461a      	mov	r2, r3
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	2200      	movs	r2, #0
 800a06a:	729a      	strb	r2, [r3, #10]
 800a06c:	2200      	movs	r2, #0
 800a06e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a078:	68b8      	ldr	r0, [r7, #8]
 800a07a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800a07c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a07e:	f001 fad9 	bl	800b634 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800a082:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a086:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800a08e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a092:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a094:	4413      	add	r3, r2
 800a096:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800a09a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f47f af19 	bne.w	8009ed6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e002      	b.n	800a0ae <ip4_frag+0x26a>
      goto memerr;
 800a0a8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800a0aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3748      	adds	r7, #72	; 0x48
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	08012b00 	.word	0x08012b00
 800a0bc:	08012d08 	.word	0x08012d08
 800a0c0:	08012b74 	.word	0x08012b74
 800a0c4:	08012d24 	.word	0x08012d24
 800a0c8:	08012d44 	.word	0x08012d44
 800a0cc:	08009ddd 	.word	0x08009ddd

0800a0d0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a0da:	4b05      	ldr	r3, [pc, #20]	; (800a0f0 <ptr_to_mem+0x20>)
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	88fb      	ldrh	r3, [r7, #6]
 800a0e0:	4413      	add	r3, r2
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	2400521c 	.word	0x2400521c

0800a0f4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a0fc:	4b05      	ldr	r3, [pc, #20]	; (800a114 <mem_to_ptr+0x20>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	b29b      	uxth	r3, r3
}
 800a106:	4618      	mov	r0, r3
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	2400521c 	.word	0x2400521c

0800a118 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a118:	b590      	push	{r4, r7, lr}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a120:	4b45      	ldr	r3, [pc, #276]	; (800a238 <plug_holes+0x120>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	429a      	cmp	r2, r3
 800a128:	d206      	bcs.n	800a138 <plug_holes+0x20>
 800a12a:	4b44      	ldr	r3, [pc, #272]	; (800a23c <plug_holes+0x124>)
 800a12c:	f240 12df 	movw	r2, #479	; 0x1df
 800a130:	4943      	ldr	r1, [pc, #268]	; (800a240 <plug_holes+0x128>)
 800a132:	4844      	ldr	r0, [pc, #272]	; (800a244 <plug_holes+0x12c>)
 800a134:	f007 f9b6 	bl	80114a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a138:	4b43      	ldr	r3, [pc, #268]	; (800a248 <plug_holes+0x130>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d306      	bcc.n	800a150 <plug_holes+0x38>
 800a142:	4b3e      	ldr	r3, [pc, #248]	; (800a23c <plug_holes+0x124>)
 800a144:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a148:	4940      	ldr	r1, [pc, #256]	; (800a24c <plug_holes+0x134>)
 800a14a:	483e      	ldr	r0, [pc, #248]	; (800a244 <plug_holes+0x12c>)
 800a14c:	f007 f9aa 	bl	80114a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	791b      	ldrb	r3, [r3, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d006      	beq.n	800a166 <plug_holes+0x4e>
 800a158:	4b38      	ldr	r3, [pc, #224]	; (800a23c <plug_holes+0x124>)
 800a15a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a15e:	493c      	ldr	r1, [pc, #240]	; (800a250 <plug_holes+0x138>)
 800a160:	4838      	ldr	r0, [pc, #224]	; (800a244 <plug_holes+0x12c>)
 800a162:	f007 f99f 	bl	80114a4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a16e:	d906      	bls.n	800a17e <plug_holes+0x66>
 800a170:	4b32      	ldr	r3, [pc, #200]	; (800a23c <plug_holes+0x124>)
 800a172:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a176:	4937      	ldr	r1, [pc, #220]	; (800a254 <plug_holes+0x13c>)
 800a178:	4832      	ldr	r0, [pc, #200]	; (800a244 <plug_holes+0x12c>)
 800a17a:	f007 f993 	bl	80114a4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	4618      	mov	r0, r3
 800a184:	f7ff ffa4 	bl	800a0d0 <ptr_to_mem>
 800a188:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d024      	beq.n	800a1dc <plug_holes+0xc4>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	791b      	ldrb	r3, [r3, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d120      	bne.n	800a1dc <plug_holes+0xc4>
 800a19a:	4b2b      	ldr	r3, [pc, #172]	; (800a248 <plug_holes+0x130>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d01b      	beq.n	800a1dc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a1a4:	4b2c      	ldr	r3, [pc, #176]	; (800a258 <plug_holes+0x140>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d102      	bne.n	800a1b4 <plug_holes+0x9c>
      lfree = mem;
 800a1ae:	4a2a      	ldr	r2, [pc, #168]	; (800a258 <plug_holes+0x140>)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	881a      	ldrh	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1c4:	d00a      	beq.n	800a1dc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7ff ff80 	bl	800a0d0 <ptr_to_mem>
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7ff ff8e 	bl	800a0f4 <mem_to_ptr>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	885b      	ldrh	r3, [r3, #2]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7ff ff75 	bl	800a0d0 <ptr_to_mem>
 800a1e6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d01f      	beq.n	800a230 <plug_holes+0x118>
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	791b      	ldrb	r3, [r3, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d11b      	bne.n	800a230 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a1f8:	4b17      	ldr	r3, [pc, #92]	; (800a258 <plug_holes+0x140>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d102      	bne.n	800a208 <plug_holes+0xf0>
      lfree = pmem;
 800a202:	4a15      	ldr	r2, [pc, #84]	; (800a258 <plug_holes+0x140>)
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	881a      	ldrh	r2, [r3, #0]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a218:	d00a      	beq.n	800a230 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	4618      	mov	r0, r3
 800a220:	f7ff ff56 	bl	800a0d0 <ptr_to_mem>
 800a224:	4604      	mov	r4, r0
 800a226:	68b8      	ldr	r0, [r7, #8]
 800a228:	f7ff ff64 	bl	800a0f4 <mem_to_ptr>
 800a22c:	4603      	mov	r3, r0
 800a22e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a230:	bf00      	nop
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	bd90      	pop	{r4, r7, pc}
 800a238:	2400521c 	.word	0x2400521c
 800a23c:	08012d54 	.word	0x08012d54
 800a240:	08012db0 	.word	0x08012db0
 800a244:	08012dc8 	.word	0x08012dc8
 800a248:	24005220 	.word	0x24005220
 800a24c:	08012df0 	.word	0x08012df0
 800a250:	08012e0c 	.word	0x08012e0c
 800a254:	08012e28 	.word	0x08012e28
 800a258:	24005224 	.word	0x24005224

0800a25c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a262:	4b16      	ldr	r3, [pc, #88]	; (800a2bc <mem_init+0x60>)
 800a264:	4a16      	ldr	r2, [pc, #88]	; (800a2c0 <mem_init+0x64>)
 800a266:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a268:	4b14      	ldr	r3, [pc, #80]	; (800a2bc <mem_init+0x60>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a274:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a282:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a286:	f7ff ff23 	bl	800a0d0 <ptr_to_mem>
 800a28a:	4603      	mov	r3, r0
 800a28c:	4a0d      	ldr	r2, [pc, #52]	; (800a2c4 <mem_init+0x68>)
 800a28e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a290:	4b0c      	ldr	r3, [pc, #48]	; (800a2c4 <mem_init+0x68>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2201      	movs	r2, #1
 800a296:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a298:	4b0a      	ldr	r3, [pc, #40]	; (800a2c4 <mem_init+0x68>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a2a0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a2a2:	4b08      	ldr	r3, [pc, #32]	; (800a2c4 <mem_init+0x68>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a2aa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a2ac:	4b03      	ldr	r3, [pc, #12]	; (800a2bc <mem_init+0x60>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a05      	ldr	r2, [pc, #20]	; (800a2c8 <mem_init+0x6c>)
 800a2b2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a2b4:	bf00      	nop
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	2400521c 	.word	0x2400521c
 800a2c0:	30044000 	.word	0x30044000
 800a2c4:	24005220 	.word	0x24005220
 800a2c8:	24005224 	.word	0x24005224

0800a2cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7ff ff0d 	bl	800a0f4 <mem_to_ptr>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7ff fef4 	bl	800a0d0 <ptr_to_mem>
 800a2e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	885b      	ldrh	r3, [r3, #2]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7ff feee 	bl	800a0d0 <ptr_to_mem>
 800a2f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2fe:	d818      	bhi.n	800a332 <mem_link_valid+0x66>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	885b      	ldrh	r3, [r3, #2]
 800a304:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a308:	d813      	bhi.n	800a332 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a30e:	8afa      	ldrh	r2, [r7, #22]
 800a310:	429a      	cmp	r2, r3
 800a312:	d004      	beq.n	800a31e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	881b      	ldrh	r3, [r3, #0]
 800a318:	8afa      	ldrh	r2, [r7, #22]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d109      	bne.n	800a332 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a31e:	4b08      	ldr	r3, [pc, #32]	; (800a340 <mem_link_valid+0x74>)
 800a320:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	429a      	cmp	r2, r3
 800a326:	d006      	beq.n	800a336 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	885b      	ldrh	r3, [r3, #2]
 800a32c:	8afa      	ldrh	r2, [r7, #22]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d001      	beq.n	800a336 <mem_link_valid+0x6a>
    return 0;
 800a332:	2300      	movs	r3, #0
 800a334:	e000      	b.n	800a338 <mem_link_valid+0x6c>
  }
  return 1;
 800a336:	2301      	movs	r3, #1
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3718      	adds	r7, #24
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	24005220 	.word	0x24005220

0800a344 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d04c      	beq.n	800a3ec <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d007      	beq.n	800a36c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a35c:	4b25      	ldr	r3, [pc, #148]	; (800a3f4 <mem_free+0xb0>)
 800a35e:	f240 2273 	movw	r2, #627	; 0x273
 800a362:	4925      	ldr	r1, [pc, #148]	; (800a3f8 <mem_free+0xb4>)
 800a364:	4825      	ldr	r0, [pc, #148]	; (800a3fc <mem_free+0xb8>)
 800a366:	f007 f89d 	bl	80114a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a36a:	e040      	b.n	800a3ee <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3b08      	subs	r3, #8
 800a370:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a372:	4b23      	ldr	r3, [pc, #140]	; (800a400 <mem_free+0xbc>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d306      	bcc.n	800a38a <mem_free+0x46>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f103 020c 	add.w	r2, r3, #12
 800a382:	4b20      	ldr	r3, [pc, #128]	; (800a404 <mem_free+0xc0>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d907      	bls.n	800a39a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a38a:	4b1a      	ldr	r3, [pc, #104]	; (800a3f4 <mem_free+0xb0>)
 800a38c:	f240 227f 	movw	r2, #639	; 0x27f
 800a390:	491d      	ldr	r1, [pc, #116]	; (800a408 <mem_free+0xc4>)
 800a392:	481a      	ldr	r0, [pc, #104]	; (800a3fc <mem_free+0xb8>)
 800a394:	f007 f886 	bl	80114a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a398:	e029      	b.n	800a3ee <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	791b      	ldrb	r3, [r3, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d107      	bne.n	800a3b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a3a2:	4b14      	ldr	r3, [pc, #80]	; (800a3f4 <mem_free+0xb0>)
 800a3a4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a3a8:	4918      	ldr	r1, [pc, #96]	; (800a40c <mem_free+0xc8>)
 800a3aa:	4814      	ldr	r0, [pc, #80]	; (800a3fc <mem_free+0xb8>)
 800a3ac:	f007 f87a 	bl	80114a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a3b0:	e01d      	b.n	800a3ee <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f7ff ff8a 	bl	800a2cc <mem_link_valid>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d107      	bne.n	800a3ce <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a3be:	4b0d      	ldr	r3, [pc, #52]	; (800a3f4 <mem_free+0xb0>)
 800a3c0:	f240 2295 	movw	r2, #661	; 0x295
 800a3c4:	4912      	ldr	r1, [pc, #72]	; (800a410 <mem_free+0xcc>)
 800a3c6:	480d      	ldr	r0, [pc, #52]	; (800a3fc <mem_free+0xb8>)
 800a3c8:	f007 f86c 	bl	80114a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a3cc:	e00f      	b.n	800a3ee <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a3d4:	4b0f      	ldr	r3, [pc, #60]	; (800a414 <mem_free+0xd0>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d202      	bcs.n	800a3e4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a3de:	4a0d      	ldr	r2, [pc, #52]	; (800a414 <mem_free+0xd0>)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f7ff fe97 	bl	800a118 <plug_holes>
 800a3ea:	e000      	b.n	800a3ee <mem_free+0xaa>
    return;
 800a3ec:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	08012d54 	.word	0x08012d54
 800a3f8:	08012e54 	.word	0x08012e54
 800a3fc:	08012dc8 	.word	0x08012dc8
 800a400:	2400521c 	.word	0x2400521c
 800a404:	24005220 	.word	0x24005220
 800a408:	08012e78 	.word	0x08012e78
 800a40c:	08012e94 	.word	0x08012e94
 800a410:	08012ebc 	.word	0x08012ebc
 800a414:	24005224 	.word	0x24005224

0800a418 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a424:	887b      	ldrh	r3, [r7, #2]
 800a426:	3303      	adds	r3, #3
 800a428:	b29b      	uxth	r3, r3
 800a42a:	f023 0303 	bic.w	r3, r3, #3
 800a42e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a430:	8bfb      	ldrh	r3, [r7, #30]
 800a432:	2b0b      	cmp	r3, #11
 800a434:	d801      	bhi.n	800a43a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a436:	230c      	movs	r3, #12
 800a438:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a43a:	8bfb      	ldrh	r3, [r7, #30]
 800a43c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a440:	d803      	bhi.n	800a44a <mem_trim+0x32>
 800a442:	8bfa      	ldrh	r2, [r7, #30]
 800a444:	887b      	ldrh	r3, [r7, #2]
 800a446:	429a      	cmp	r2, r3
 800a448:	d201      	bcs.n	800a44e <mem_trim+0x36>
    return NULL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	e0cc      	b.n	800a5e8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a44e:	4b68      	ldr	r3, [pc, #416]	; (800a5f0 <mem_trim+0x1d8>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d304      	bcc.n	800a462 <mem_trim+0x4a>
 800a458:	4b66      	ldr	r3, [pc, #408]	; (800a5f4 <mem_trim+0x1dc>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d306      	bcc.n	800a470 <mem_trim+0x58>
 800a462:	4b65      	ldr	r3, [pc, #404]	; (800a5f8 <mem_trim+0x1e0>)
 800a464:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a468:	4964      	ldr	r1, [pc, #400]	; (800a5fc <mem_trim+0x1e4>)
 800a46a:	4865      	ldr	r0, [pc, #404]	; (800a600 <mem_trim+0x1e8>)
 800a46c:	f007 f81a 	bl	80114a4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a470:	4b5f      	ldr	r3, [pc, #380]	; (800a5f0 <mem_trim+0x1d8>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	429a      	cmp	r2, r3
 800a478:	d304      	bcc.n	800a484 <mem_trim+0x6c>
 800a47a:	4b5e      	ldr	r3, [pc, #376]	; (800a5f4 <mem_trim+0x1dc>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	429a      	cmp	r2, r3
 800a482:	d301      	bcc.n	800a488 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	e0af      	b.n	800a5e8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3b08      	subs	r3, #8
 800a48c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a48e:	69b8      	ldr	r0, [r7, #24]
 800a490:	f7ff fe30 	bl	800a0f4 <mem_to_ptr>
 800a494:	4603      	mov	r3, r0
 800a496:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	881a      	ldrh	r2, [r3, #0]
 800a49c:	8afb      	ldrh	r3, [r7, #22]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	3b08      	subs	r3, #8
 800a4a4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a4a6:	8bfa      	ldrh	r2, [r7, #30]
 800a4a8:	8abb      	ldrh	r3, [r7, #20]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d906      	bls.n	800a4bc <mem_trim+0xa4>
 800a4ae:	4b52      	ldr	r3, [pc, #328]	; (800a5f8 <mem_trim+0x1e0>)
 800a4b0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a4b4:	4953      	ldr	r1, [pc, #332]	; (800a604 <mem_trim+0x1ec>)
 800a4b6:	4852      	ldr	r0, [pc, #328]	; (800a600 <mem_trim+0x1e8>)
 800a4b8:	f006 fff4 	bl	80114a4 <iprintf>
  if (newsize > size) {
 800a4bc:	8bfa      	ldrh	r2, [r7, #30]
 800a4be:	8abb      	ldrh	r3, [r7, #20]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d901      	bls.n	800a4c8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	e08f      	b.n	800a5e8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a4c8:	8bfa      	ldrh	r2, [r7, #30]
 800a4ca:	8abb      	ldrh	r3, [r7, #20]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d101      	bne.n	800a4d4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	e089      	b.n	800a5e8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7ff fdf9 	bl	800a0d0 <ptr_to_mem>
 800a4de:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	791b      	ldrb	r3, [r3, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d13f      	bne.n	800a568 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4f0:	d106      	bne.n	800a500 <mem_trim+0xe8>
 800a4f2:	4b41      	ldr	r3, [pc, #260]	; (800a5f8 <mem_trim+0x1e0>)
 800a4f4:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a4f8:	4943      	ldr	r1, [pc, #268]	; (800a608 <mem_trim+0x1f0>)
 800a4fa:	4841      	ldr	r0, [pc, #260]	; (800a600 <mem_trim+0x1e8>)
 800a4fc:	f006 ffd2 	bl	80114a4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	881b      	ldrh	r3, [r3, #0]
 800a504:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a506:	8afa      	ldrh	r2, [r7, #22]
 800a508:	8bfb      	ldrh	r3, [r7, #30]
 800a50a:	4413      	add	r3, r2
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	3308      	adds	r3, #8
 800a510:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a512:	4b3e      	ldr	r3, [pc, #248]	; (800a60c <mem_trim+0x1f4>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d106      	bne.n	800a52a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a51c:	89fb      	ldrh	r3, [r7, #14]
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff fdd6 	bl	800a0d0 <ptr_to_mem>
 800a524:	4603      	mov	r3, r0
 800a526:	4a39      	ldr	r2, [pc, #228]	; (800a60c <mem_trim+0x1f4>)
 800a528:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a52a:	89fb      	ldrh	r3, [r7, #14]
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7ff fdcf 	bl	800a0d0 <ptr_to_mem>
 800a532:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	2200      	movs	r2, #0
 800a538:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	89ba      	ldrh	r2, [r7, #12]
 800a53e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	8afa      	ldrh	r2, [r7, #22]
 800a544:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	89fa      	ldrh	r2, [r7, #14]
 800a54a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a554:	d047      	beq.n	800a5e6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7ff fdb8 	bl	800a0d0 <ptr_to_mem>
 800a560:	4602      	mov	r2, r0
 800a562:	89fb      	ldrh	r3, [r7, #14]
 800a564:	8053      	strh	r3, [r2, #2]
 800a566:	e03e      	b.n	800a5e6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a568:	8bfb      	ldrh	r3, [r7, #30]
 800a56a:	f103 0214 	add.w	r2, r3, #20
 800a56e:	8abb      	ldrh	r3, [r7, #20]
 800a570:	429a      	cmp	r2, r3
 800a572:	d838      	bhi.n	800a5e6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a574:	8afa      	ldrh	r2, [r7, #22]
 800a576:	8bfb      	ldrh	r3, [r7, #30]
 800a578:	4413      	add	r3, r2
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	3308      	adds	r3, #8
 800a57e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a588:	d106      	bne.n	800a598 <mem_trim+0x180>
 800a58a:	4b1b      	ldr	r3, [pc, #108]	; (800a5f8 <mem_trim+0x1e0>)
 800a58c:	f240 3216 	movw	r2, #790	; 0x316
 800a590:	491d      	ldr	r1, [pc, #116]	; (800a608 <mem_trim+0x1f0>)
 800a592:	481b      	ldr	r0, [pc, #108]	; (800a600 <mem_trim+0x1e8>)
 800a594:	f006 ff86 	bl	80114a4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a598:	89fb      	ldrh	r3, [r7, #14]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff fd98 	bl	800a0d0 <ptr_to_mem>
 800a5a0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a5a2:	4b1a      	ldr	r3, [pc, #104]	; (800a60c <mem_trim+0x1f4>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d202      	bcs.n	800a5b2 <mem_trim+0x19a>
      lfree = mem2;
 800a5ac:	4a17      	ldr	r2, [pc, #92]	; (800a60c <mem_trim+0x1f4>)
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	881a      	ldrh	r2, [r3, #0]
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	8afa      	ldrh	r2, [r7, #22]
 800a5c4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	89fa      	ldrh	r2, [r7, #14]
 800a5ca:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5d4:	d007      	beq.n	800a5e6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff fd78 	bl	800a0d0 <ptr_to_mem>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	89fb      	ldrh	r3, [r7, #14]
 800a5e4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a5e6:	687b      	ldr	r3, [r7, #4]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3720      	adds	r7, #32
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	2400521c 	.word	0x2400521c
 800a5f4:	24005220 	.word	0x24005220
 800a5f8:	08012d54 	.word	0x08012d54
 800a5fc:	08012ef0 	.word	0x08012ef0
 800a600:	08012dc8 	.word	0x08012dc8
 800a604:	08012f08 	.word	0x08012f08
 800a608:	08012f28 	.word	0x08012f28
 800a60c:	24005224 	.word	0x24005224

0800a610 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b088      	sub	sp, #32
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a61a:	88fb      	ldrh	r3, [r7, #6]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <mem_malloc+0x14>
    return NULL;
 800a620:	2300      	movs	r3, #0
 800a622:	e0d9      	b.n	800a7d8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a624:	88fb      	ldrh	r3, [r7, #6]
 800a626:	3303      	adds	r3, #3
 800a628:	b29b      	uxth	r3, r3
 800a62a:	f023 0303 	bic.w	r3, r3, #3
 800a62e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a630:	8bbb      	ldrh	r3, [r7, #28]
 800a632:	2b0b      	cmp	r3, #11
 800a634:	d801      	bhi.n	800a63a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a636:	230c      	movs	r3, #12
 800a638:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a63a:	8bbb      	ldrh	r3, [r7, #28]
 800a63c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a640:	d803      	bhi.n	800a64a <mem_malloc+0x3a>
 800a642:	8bba      	ldrh	r2, [r7, #28]
 800a644:	88fb      	ldrh	r3, [r7, #6]
 800a646:	429a      	cmp	r2, r3
 800a648:	d201      	bcs.n	800a64e <mem_malloc+0x3e>
    return NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	e0c4      	b.n	800a7d8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a64e:	4b64      	ldr	r3, [pc, #400]	; (800a7e0 <mem_malloc+0x1d0>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff fd4e 	bl	800a0f4 <mem_to_ptr>
 800a658:	4603      	mov	r3, r0
 800a65a:	83fb      	strh	r3, [r7, #30]
 800a65c:	e0b4      	b.n	800a7c8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a65e:	8bfb      	ldrh	r3, [r7, #30]
 800a660:	4618      	mov	r0, r3
 800a662:	f7ff fd35 	bl	800a0d0 <ptr_to_mem>
 800a666:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	791b      	ldrb	r3, [r3, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f040 80a4 	bne.w	800a7ba <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	461a      	mov	r2, r3
 800a678:	8bfb      	ldrh	r3, [r7, #30]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	f1a3 0208 	sub.w	r2, r3, #8
 800a680:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a682:	429a      	cmp	r2, r3
 800a684:	f0c0 8099 	bcc.w	800a7ba <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	461a      	mov	r2, r3
 800a68e:	8bfb      	ldrh	r3, [r7, #30]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	f1a3 0208 	sub.w	r2, r3, #8
 800a696:	8bbb      	ldrh	r3, [r7, #28]
 800a698:	3314      	adds	r3, #20
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d333      	bcc.n	800a706 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a69e:	8bfa      	ldrh	r2, [r7, #30]
 800a6a0:	8bbb      	ldrh	r3, [r7, #28]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	3308      	adds	r3, #8
 800a6a8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a6aa:	8a7b      	ldrh	r3, [r7, #18]
 800a6ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6b0:	d106      	bne.n	800a6c0 <mem_malloc+0xb0>
 800a6b2:	4b4c      	ldr	r3, [pc, #304]	; (800a7e4 <mem_malloc+0x1d4>)
 800a6b4:	f240 3287 	movw	r2, #903	; 0x387
 800a6b8:	494b      	ldr	r1, [pc, #300]	; (800a7e8 <mem_malloc+0x1d8>)
 800a6ba:	484c      	ldr	r0, [pc, #304]	; (800a7ec <mem_malloc+0x1dc>)
 800a6bc:	f006 fef2 	bl	80114a4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a6c0:	8a7b      	ldrh	r3, [r7, #18]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff fd04 	bl	800a0d0 <ptr_to_mem>
 800a6c8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	881a      	ldrh	r2, [r3, #0]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8bfa      	ldrh	r2, [r7, #30]
 800a6dc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	8a7a      	ldrh	r2, [r7, #18]
 800a6e2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6f2:	d00b      	beq.n	800a70c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	881b      	ldrh	r3, [r3, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7ff fce9 	bl	800a0d0 <ptr_to_mem>
 800a6fe:	4602      	mov	r2, r0
 800a700:	8a7b      	ldrh	r3, [r7, #18]
 800a702:	8053      	strh	r3, [r2, #2]
 800a704:	e002      	b.n	800a70c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2201      	movs	r2, #1
 800a70a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a70c:	4b34      	ldr	r3, [pc, #208]	; (800a7e0 <mem_malloc+0x1d0>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	429a      	cmp	r2, r3
 800a714:	d127      	bne.n	800a766 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a716:	4b32      	ldr	r3, [pc, #200]	; (800a7e0 <mem_malloc+0x1d0>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a71c:	e005      	b.n	800a72a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	4618      	mov	r0, r3
 800a724:	f7ff fcd4 	bl	800a0d0 <ptr_to_mem>
 800a728:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	791b      	ldrb	r3, [r3, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d004      	beq.n	800a73c <mem_malloc+0x12c>
 800a732:	4b2f      	ldr	r3, [pc, #188]	; (800a7f0 <mem_malloc+0x1e0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	69ba      	ldr	r2, [r7, #24]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d1f0      	bne.n	800a71e <mem_malloc+0x10e>
          }
          lfree = cur;
 800a73c:	4a28      	ldr	r2, [pc, #160]	; (800a7e0 <mem_malloc+0x1d0>)
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a742:	4b27      	ldr	r3, [pc, #156]	; (800a7e0 <mem_malloc+0x1d0>)
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	4b2a      	ldr	r3, [pc, #168]	; (800a7f0 <mem_malloc+0x1e0>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d00b      	beq.n	800a766 <mem_malloc+0x156>
 800a74e:	4b24      	ldr	r3, [pc, #144]	; (800a7e0 <mem_malloc+0x1d0>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	791b      	ldrb	r3, [r3, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d006      	beq.n	800a766 <mem_malloc+0x156>
 800a758:	4b22      	ldr	r3, [pc, #136]	; (800a7e4 <mem_malloc+0x1d4>)
 800a75a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a75e:	4925      	ldr	r1, [pc, #148]	; (800a7f4 <mem_malloc+0x1e4>)
 800a760:	4822      	ldr	r0, [pc, #136]	; (800a7ec <mem_malloc+0x1dc>)
 800a762:	f006 fe9f 	bl	80114a4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a766:	8bba      	ldrh	r2, [r7, #28]
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	4413      	add	r3, r2
 800a76c:	3308      	adds	r3, #8
 800a76e:	4a20      	ldr	r2, [pc, #128]	; (800a7f0 <mem_malloc+0x1e0>)
 800a770:	6812      	ldr	r2, [r2, #0]
 800a772:	4293      	cmp	r3, r2
 800a774:	d906      	bls.n	800a784 <mem_malloc+0x174>
 800a776:	4b1b      	ldr	r3, [pc, #108]	; (800a7e4 <mem_malloc+0x1d4>)
 800a778:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a77c:	491e      	ldr	r1, [pc, #120]	; (800a7f8 <mem_malloc+0x1e8>)
 800a77e:	481b      	ldr	r0, [pc, #108]	; (800a7ec <mem_malloc+0x1dc>)
 800a780:	f006 fe90 	bl	80114a4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d006      	beq.n	800a79c <mem_malloc+0x18c>
 800a78e:	4b15      	ldr	r3, [pc, #84]	; (800a7e4 <mem_malloc+0x1d4>)
 800a790:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a794:	4919      	ldr	r1, [pc, #100]	; (800a7fc <mem_malloc+0x1ec>)
 800a796:	4815      	ldr	r0, [pc, #84]	; (800a7ec <mem_malloc+0x1dc>)
 800a798:	f006 fe84 	bl	80114a4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f003 0303 	and.w	r3, r3, #3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d006      	beq.n	800a7b4 <mem_malloc+0x1a4>
 800a7a6:	4b0f      	ldr	r3, [pc, #60]	; (800a7e4 <mem_malloc+0x1d4>)
 800a7a8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a7ac:	4914      	ldr	r1, [pc, #80]	; (800a800 <mem_malloc+0x1f0>)
 800a7ae:	480f      	ldr	r0, [pc, #60]	; (800a7ec <mem_malloc+0x1dc>)
 800a7b0:	f006 fe78 	bl	80114a4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	e00e      	b.n	800a7d8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a7ba:	8bfb      	ldrh	r3, [r7, #30]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff fc87 	bl	800a0d0 <ptr_to_mem>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	881b      	ldrh	r3, [r3, #0]
 800a7c6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a7c8:	8bfa      	ldrh	r2, [r7, #30]
 800a7ca:	8bbb      	ldrh	r3, [r7, #28]
 800a7cc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	f4ff af44 	bcc.w	800a65e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3720      	adds	r7, #32
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	24005224 	.word	0x24005224
 800a7e4:	08012d54 	.word	0x08012d54
 800a7e8:	08012f28 	.word	0x08012f28
 800a7ec:	08012dc8 	.word	0x08012dc8
 800a7f0:	24005220 	.word	0x24005220
 800a7f4:	08012f3c 	.word	0x08012f3c
 800a7f8:	08012f58 	.word	0x08012f58
 800a7fc:	08012f88 	.word	0x08012f88
 800a800:	08012fb8 	.word	0x08012fb8

0800a804 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	2200      	movs	r2, #0
 800a812:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	3303      	adds	r3, #3
 800a81a:	f023 0303 	bic.w	r3, r3, #3
 800a81e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a820:	2300      	movs	r3, #0
 800a822:	60fb      	str	r3, [r7, #12]
 800a824:	e011      	b.n	800a84a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	4413      	add	r3, r2
 800a842:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	3301      	adds	r3, #1
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	885b      	ldrh	r3, [r3, #2]
 800a84e:	461a      	mov	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	4293      	cmp	r3, r2
 800a854:	dbe7      	blt.n	800a826 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a856:	bf00      	nop
 800a858:	bf00      	nop
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a86a:	2300      	movs	r3, #0
 800a86c:	80fb      	strh	r3, [r7, #6]
 800a86e:	e009      	b.n	800a884 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a870:	88fb      	ldrh	r3, [r7, #6]
 800a872:	4a08      	ldr	r2, [pc, #32]	; (800a894 <memp_init+0x30>)
 800a874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a878:	4618      	mov	r0, r3
 800a87a:	f7ff ffc3 	bl	800a804 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a87e:	88fb      	ldrh	r3, [r7, #6]
 800a880:	3301      	adds	r3, #1
 800a882:	80fb      	strh	r3, [r7, #6]
 800a884:	88fb      	ldrh	r3, [r7, #6]
 800a886:	2b08      	cmp	r3, #8
 800a888:	d9f2      	bls.n	800a870 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a88a:	bf00      	nop
 800a88c:	bf00      	nop
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	08015278 	.word	0x08015278

0800a898 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d012      	beq.n	800a8d4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	6812      	ldr	r2, [r2, #0]
 800a8b6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f003 0303 	and.w	r3, r3, #3
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d006      	beq.n	800a8d0 <do_memp_malloc_pool+0x38>
 800a8c2:	4b07      	ldr	r3, [pc, #28]	; (800a8e0 <do_memp_malloc_pool+0x48>)
 800a8c4:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a8c8:	4906      	ldr	r1, [pc, #24]	; (800a8e4 <do_memp_malloc_pool+0x4c>)
 800a8ca:	4807      	ldr	r0, [pc, #28]	; (800a8e8 <do_memp_malloc_pool+0x50>)
 800a8cc:	f006 fdea 	bl	80114a4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	e000      	b.n	800a8d6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	08012fdc 	.word	0x08012fdc
 800a8e4:	0801303c 	.word	0x0801303c
 800a8e8:	08013060 	.word	0x08013060

0800a8ec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d106      	bne.n	800a908 <memp_malloc_pool+0x1c>
 800a8fa:	4b0a      	ldr	r3, [pc, #40]	; (800a924 <memp_malloc_pool+0x38>)
 800a8fc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a900:	4909      	ldr	r1, [pc, #36]	; (800a928 <memp_malloc_pool+0x3c>)
 800a902:	480a      	ldr	r0, [pc, #40]	; (800a92c <memp_malloc_pool+0x40>)
 800a904:	f006 fdce 	bl	80114a4 <iprintf>
  if (desc == NULL) {
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d101      	bne.n	800a912 <memp_malloc_pool+0x26>
    return NULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	e003      	b.n	800a91a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7ff ffc0 	bl	800a898 <do_memp_malloc_pool>
 800a918:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	08012fdc 	.word	0x08012fdc
 800a928:	08013088 	.word	0x08013088
 800a92c:	08013060 	.word	0x08013060

0800a930 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	4603      	mov	r3, r0
 800a938:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	2b08      	cmp	r3, #8
 800a93e:	d908      	bls.n	800a952 <memp_malloc+0x22>
 800a940:	4b0a      	ldr	r3, [pc, #40]	; (800a96c <memp_malloc+0x3c>)
 800a942:	f240 1257 	movw	r2, #343	; 0x157
 800a946:	490a      	ldr	r1, [pc, #40]	; (800a970 <memp_malloc+0x40>)
 800a948:	480a      	ldr	r0, [pc, #40]	; (800a974 <memp_malloc+0x44>)
 800a94a:	f006 fdab 	bl	80114a4 <iprintf>
 800a94e:	2300      	movs	r3, #0
 800a950:	e008      	b.n	800a964 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a952:	79fb      	ldrb	r3, [r7, #7]
 800a954:	4a08      	ldr	r2, [pc, #32]	; (800a978 <memp_malloc+0x48>)
 800a956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff ff9c 	bl	800a898 <do_memp_malloc_pool>
 800a960:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a962:	68fb      	ldr	r3, [r7, #12]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	08012fdc 	.word	0x08012fdc
 800a970:	0801309c 	.word	0x0801309c
 800a974:	08013060 	.word	0x08013060
 800a978:	08015278 	.word	0x08015278

0800a97c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	f003 0303 	and.w	r3, r3, #3
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d006      	beq.n	800a99e <do_memp_free_pool+0x22>
 800a990:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <do_memp_free_pool+0x40>)
 800a992:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a996:	490a      	ldr	r1, [pc, #40]	; (800a9c0 <do_memp_free_pool+0x44>)
 800a998:	480a      	ldr	r0, [pc, #40]	; (800a9c4 <do_memp_free_pool+0x48>)
 800a99a:	f006 fd83 	bl	80114a4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a9b4:	bf00      	nop
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	08012fdc 	.word	0x08012fdc
 800a9c0:	080130bc 	.word	0x080130bc
 800a9c4:	08013060 	.word	0x08013060

0800a9c8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d106      	bne.n	800a9e6 <memp_free_pool+0x1e>
 800a9d8:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <memp_free_pool+0x3c>)
 800a9da:	f240 1295 	movw	r2, #405	; 0x195
 800a9de:	490a      	ldr	r1, [pc, #40]	; (800aa08 <memp_free_pool+0x40>)
 800a9e0:	480a      	ldr	r0, [pc, #40]	; (800aa0c <memp_free_pool+0x44>)
 800a9e2:	f006 fd5f 	bl	80114a4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d007      	beq.n	800a9fc <memp_free_pool+0x34>
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d004      	beq.n	800a9fc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff ffc1 	bl	800a97c <do_memp_free_pool>
 800a9fa:	e000      	b.n	800a9fe <memp_free_pool+0x36>
    return;
 800a9fc:	bf00      	nop
}
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	08012fdc 	.word	0x08012fdc
 800aa08:	08013088 	.word	0x08013088
 800aa0c:	08013060 	.word	0x08013060

0800aa10 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	6039      	str	r1, [r7, #0]
 800aa1a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	2b08      	cmp	r3, #8
 800aa20:	d907      	bls.n	800aa32 <memp_free+0x22>
 800aa22:	4b0c      	ldr	r3, [pc, #48]	; (800aa54 <memp_free+0x44>)
 800aa24:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800aa28:	490b      	ldr	r1, [pc, #44]	; (800aa58 <memp_free+0x48>)
 800aa2a:	480c      	ldr	r0, [pc, #48]	; (800aa5c <memp_free+0x4c>)
 800aa2c:	f006 fd3a 	bl	80114a4 <iprintf>
 800aa30:	e00c      	b.n	800aa4c <memp_free+0x3c>

  if (mem == NULL) {
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d008      	beq.n	800aa4a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800aa38:	79fb      	ldrb	r3, [r7, #7]
 800aa3a:	4a09      	ldr	r2, [pc, #36]	; (800aa60 <memp_free+0x50>)
 800aa3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff ff9a 	bl	800a97c <do_memp_free_pool>
 800aa48:	e000      	b.n	800aa4c <memp_free+0x3c>
    return;
 800aa4a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	08012fdc 	.word	0x08012fdc
 800aa58:	080130dc 	.word	0x080130dc
 800aa5c:	08013060 	.word	0x08013060
 800aa60:	08015278 	.word	0x08015278

0800aa64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800aa64:	b480      	push	{r7}
 800aa66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800aa68:	bf00      	nop
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
	...

0800aa74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d108      	bne.n	800aa9a <netif_add+0x26>
 800aa88:	4b57      	ldr	r3, [pc, #348]	; (800abe8 <netif_add+0x174>)
 800aa8a:	f240 1227 	movw	r2, #295	; 0x127
 800aa8e:	4957      	ldr	r1, [pc, #348]	; (800abec <netif_add+0x178>)
 800aa90:	4857      	ldr	r0, [pc, #348]	; (800abf0 <netif_add+0x17c>)
 800aa92:	f006 fd07 	bl	80114a4 <iprintf>
 800aa96:	2300      	movs	r3, #0
 800aa98:	e0a2      	b.n	800abe0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d108      	bne.n	800aab2 <netif_add+0x3e>
 800aaa0:	4b51      	ldr	r3, [pc, #324]	; (800abe8 <netif_add+0x174>)
 800aaa2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800aaa6:	4953      	ldr	r1, [pc, #332]	; (800abf4 <netif_add+0x180>)
 800aaa8:	4851      	ldr	r0, [pc, #324]	; (800abf0 <netif_add+0x17c>)
 800aaaa:	f006 fcfb 	bl	80114a4 <iprintf>
 800aaae:	2300      	movs	r3, #0
 800aab0:	e096      	b.n	800abe0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800aab8:	4b4f      	ldr	r3, [pc, #316]	; (800abf8 <netif_add+0x184>)
 800aaba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800aac2:	4b4d      	ldr	r3, [pc, #308]	; (800abf8 <netif_add+0x184>)
 800aac4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aacc:	4b4a      	ldr	r3, [pc, #296]	; (800abf8 <netif_add+0x184>)
 800aace:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4a45      	ldr	r2, [pc, #276]	; (800abfc <netif_add+0x188>)
 800aae6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6a3a      	ldr	r2, [r7, #32]
 800ab00:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ab02:	4b3f      	ldr	r3, [pc, #252]	; (800ac00 <netif_add+0x18c>)
 800ab04:	781a      	ldrb	r2, [r3, #0]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab10:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	68b9      	ldr	r1, [r7, #8]
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f000 f913 	bl	800ad44 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	4798      	blx	r3
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <netif_add+0xba>
    return NULL;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	e058      	b.n	800abe0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab34:	2bff      	cmp	r3, #255	; 0xff
 800ab36:	d103      	bne.n	800ab40 <netif_add+0xcc>
        netif->num = 0;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ab44:	4b2f      	ldr	r3, [pc, #188]	; (800ac04 <netif_add+0x190>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	617b      	str	r3, [r7, #20]
 800ab4a:	e02b      	b.n	800aba4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d106      	bne.n	800ab62 <netif_add+0xee>
 800ab54:	4b24      	ldr	r3, [pc, #144]	; (800abe8 <netif_add+0x174>)
 800ab56:	f240 128b 	movw	r2, #395	; 0x18b
 800ab5a:	492b      	ldr	r1, [pc, #172]	; (800ac08 <netif_add+0x194>)
 800ab5c:	4824      	ldr	r0, [pc, #144]	; (800abf0 <netif_add+0x17c>)
 800ab5e:	f006 fca1 	bl	80114a4 <iprintf>
        num_netifs++;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	3301      	adds	r3, #1
 800ab66:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	2bff      	cmp	r3, #255	; 0xff
 800ab6c:	dd06      	ble.n	800ab7c <netif_add+0x108>
 800ab6e:	4b1e      	ldr	r3, [pc, #120]	; (800abe8 <netif_add+0x174>)
 800ab70:	f240 128d 	movw	r2, #397	; 0x18d
 800ab74:	4925      	ldr	r1, [pc, #148]	; (800ac0c <netif_add+0x198>)
 800ab76:	481e      	ldr	r0, [pc, #120]	; (800abf0 <netif_add+0x17c>)
 800ab78:	f006 fc94 	bl	80114a4 <iprintf>
        if (netif2->num == netif->num) {
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d108      	bne.n	800ab9e <netif_add+0x12a>
          netif->num++;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab92:	3301      	adds	r3, #1
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ab9c:	e005      	b.n	800abaa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	617b      	str	r3, [r7, #20]
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1d0      	bne.n	800ab4c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1be      	bne.n	800ab2e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800abb6:	2bfe      	cmp	r3, #254	; 0xfe
 800abb8:	d103      	bne.n	800abc2 <netif_add+0x14e>
    netif_num = 0;
 800abba:	4b11      	ldr	r3, [pc, #68]	; (800ac00 <netif_add+0x18c>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	701a      	strb	r2, [r3, #0]
 800abc0:	e006      	b.n	800abd0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800abc8:	3301      	adds	r3, #1
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <netif_add+0x18c>)
 800abce:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800abd0:	4b0c      	ldr	r3, [pc, #48]	; (800ac04 <netif_add+0x190>)
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800abd8:	4a0a      	ldr	r2, [pc, #40]	; (800ac04 <netif_add+0x190>)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800abde:	68fb      	ldr	r3, [r7, #12]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3718      	adds	r7, #24
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	080130f8 	.word	0x080130f8
 800abec:	080131b8 	.word	0x080131b8
 800abf0:	08013174 	.word	0x08013174
 800abf4:	080131d4 	.word	0x080131d4
 800abf8:	08015208 	.word	0x08015208
 800abfc:	0800af57 	.word	0x0800af57
 800ac00:	2400811c 	.word	0x2400811c
 800ac04:	24008114 	.word	0x24008114
 800ac08:	080131f8 	.word	0x080131f8
 800ac0c:	0801320c 	.word	0x0801320c

0800ac10 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f002 fadf 	bl	800d1e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f006 fbc3 	bl	80113b0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ac2a:	bf00      	nop
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
	...

0800ac34 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d106      	bne.n	800ac54 <netif_do_set_ipaddr+0x20>
 800ac46:	4b1d      	ldr	r3, [pc, #116]	; (800acbc <netif_do_set_ipaddr+0x88>)
 800ac48:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ac4c:	491c      	ldr	r1, [pc, #112]	; (800acc0 <netif_do_set_ipaddr+0x8c>)
 800ac4e:	481d      	ldr	r0, [pc, #116]	; (800acc4 <netif_do_set_ipaddr+0x90>)
 800ac50:	f006 fc28 	bl	80114a4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <netif_do_set_ipaddr+0x34>
 800ac5a:	4b18      	ldr	r3, [pc, #96]	; (800acbc <netif_do_set_ipaddr+0x88>)
 800ac5c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ac60:	4917      	ldr	r1, [pc, #92]	; (800acc0 <netif_do_set_ipaddr+0x8c>)
 800ac62:	4818      	ldr	r0, [pc, #96]	; (800acc4 <netif_do_set_ipaddr+0x90>)
 800ac64:	f006 fc1e 	bl	80114a4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3304      	adds	r3, #4
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d01c      	beq.n	800acb0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ac86:	f107 0314 	add.w	r3, r7, #20
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff ffbf 	bl	800ac10 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <netif_do_set_ipaddr+0x6a>
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	e000      	b.n	800aca0 <netif_do_set_ipaddr+0x6c>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800aca4:	2101      	movs	r1, #1
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f000 f8d2 	bl	800ae50 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800acac:	2301      	movs	r3, #1
 800acae:	e000      	b.n	800acb2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3718      	adds	r7, #24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	080130f8 	.word	0x080130f8
 800acc0:	0801323c 	.word	0x0801323c
 800acc4:	08013174 	.word	0x08013174

0800acc8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3308      	adds	r3, #8
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d00a      	beq.n	800acf8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <netif_do_set_netmask+0x26>
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	e000      	b.n	800acf0 <netif_do_set_netmask+0x28>
 800acee:	2300      	movs	r3, #0
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800acf4:	2301      	movs	r3, #1
 800acf6:	e000      	b.n	800acfa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b085      	sub	sp, #20
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	330c      	adds	r3, #12
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d00a      	beq.n	800ad36 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d002      	beq.n	800ad2c <netif_do_set_gw+0x26>
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	e000      	b.n	800ad2e <netif_do_set_gw+0x28>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ad32:	2301      	movs	r3, #1
 800ad34:	e000      	b.n	800ad38 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3714      	adds	r7, #20
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b088      	sub	sp, #32
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ad60:	4b1c      	ldr	r3, [pc, #112]	; (800add4 <netif_set_addr+0x90>)
 800ad62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ad6a:	4b1a      	ldr	r3, [pc, #104]	; (800add4 <netif_set_addr+0x90>)
 800ad6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ad74:	4b17      	ldr	r3, [pc, #92]	; (800add4 <netif_set_addr+0x90>)
 800ad76:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <netif_set_addr+0x42>
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <netif_set_addr+0x46>
 800ad86:	2301      	movs	r3, #1
 800ad88:	e000      	b.n	800ad8c <netif_set_addr+0x48>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d006      	beq.n	800ada2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad94:	f107 0310 	add.w	r3, r7, #16
 800ad98:	461a      	mov	r2, r3
 800ad9a:	68b9      	ldr	r1, [r7, #8]
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f7ff ff49 	bl	800ac34 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ada2:	69fa      	ldr	r2, [r7, #28]
 800ada4:	6879      	ldr	r1, [r7, #4]
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f7ff ff8e 	bl	800acc8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f7ff ffa8 	bl	800ad06 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d106      	bne.n	800adca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800adbc:	f107 0310 	add.w	r3, r7, #16
 800adc0:	461a      	mov	r2, r3
 800adc2:	68b9      	ldr	r1, [r7, #8]
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f7ff ff35 	bl	800ac34 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800adca:	bf00      	nop
 800adcc:	3720      	adds	r7, #32
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	08015208 	.word	0x08015208

0800add8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ade0:	4a04      	ldr	r2, [pc, #16]	; (800adf4 <netif_set_default+0x1c>)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	24008118 	.word	0x24008118

0800adf8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d107      	bne.n	800ae16 <netif_set_up+0x1e>
 800ae06:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <netif_set_up+0x4c>)
 800ae08:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ae0c:	490e      	ldr	r1, [pc, #56]	; (800ae48 <netif_set_up+0x50>)
 800ae0e:	480f      	ldr	r0, [pc, #60]	; (800ae4c <netif_set_up+0x54>)
 800ae10:	f006 fb48 	bl	80114a4 <iprintf>
 800ae14:	e013      	b.n	800ae3e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10c      	bne.n	800ae3e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae2a:	f043 0301 	orr.w	r3, r3, #1
 800ae2e:	b2da      	uxtb	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ae36:	2103      	movs	r1, #3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f809 	bl	800ae50 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	080130f8 	.word	0x080130f8
 800ae48:	080132ac 	.word	0x080132ac
 800ae4c:	08013174 	.word	0x08013174

0800ae50 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	460b      	mov	r3, r1
 800ae5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d106      	bne.n	800ae70 <netif_issue_reports+0x20>
 800ae62:	4b18      	ldr	r3, [pc, #96]	; (800aec4 <netif_issue_reports+0x74>)
 800ae64:	f240 326d 	movw	r2, #877	; 0x36d
 800ae68:	4917      	ldr	r1, [pc, #92]	; (800aec8 <netif_issue_reports+0x78>)
 800ae6a:	4818      	ldr	r0, [pc, #96]	; (800aecc <netif_issue_reports+0x7c>)
 800ae6c:	f006 fb1a 	bl	80114a4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae76:	f003 0304 	and.w	r3, r3, #4
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d01e      	beq.n	800aebc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae84:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d017      	beq.n	800aebc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ae8c:	78fb      	ldrb	r3, [r7, #3]
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d013      	beq.n	800aebe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	3304      	adds	r3, #4
 800ae9a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00e      	beq.n	800aebe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aea6:	f003 0308 	and.w	r3, r3, #8
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d007      	beq.n	800aebe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7fd fc87 	bl	80087c8 <etharp_request>
 800aeba:	e000      	b.n	800aebe <netif_issue_reports+0x6e>
    return;
 800aebc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	080130f8 	.word	0x080130f8
 800aec8:	080132c8 	.word	0x080132c8
 800aecc:	08013174 	.word	0x08013174

0800aed0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d107      	bne.n	800aeee <netif_set_down+0x1e>
 800aede:	4b12      	ldr	r3, [pc, #72]	; (800af28 <netif_set_down+0x58>)
 800aee0:	f240 329b 	movw	r2, #923	; 0x39b
 800aee4:	4911      	ldr	r1, [pc, #68]	; (800af2c <netif_set_down+0x5c>)
 800aee6:	4812      	ldr	r0, [pc, #72]	; (800af30 <netif_set_down+0x60>)
 800aee8:	f006 fadc 	bl	80114a4 <iprintf>
 800aeec:	e019      	b.n	800af22 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d012      	beq.n	800af22 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af02:	f023 0301 	bic.w	r3, r3, #1
 800af06:	b2da      	uxtb	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af14:	f003 0308 	and.w	r3, r3, #8
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d002      	beq.n	800af22 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7fd f811 	bl	8007f44 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	080130f8 	.word	0x080130f8
 800af2c:	080132ec 	.word	0x080132ec
 800af30:	08013174 	.word	0x08013174

0800af34 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	61da      	str	r2, [r3, #28]
  }
}
 800af4a:	bf00      	nop
 800af4c:	370c      	adds	r7, #12
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr

0800af56 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800af56:	b480      	push	{r7}
 800af58:	b085      	sub	sp, #20
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800af62:	f06f 030b 	mvn.w	r3, #11
}
 800af66:	4618      	mov	r0, r3
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
	...

0800af74 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	4603      	mov	r3, r0
 800af7c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800af7e:	79fb      	ldrb	r3, [r7, #7]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d013      	beq.n	800afac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800af84:	4b0d      	ldr	r3, [pc, #52]	; (800afbc <netif_get_by_index+0x48>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	60fb      	str	r3, [r7, #12]
 800af8a:	e00c      	b.n	800afa6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af92:	3301      	adds	r3, #1
 800af94:	b2db      	uxtb	r3, r3
 800af96:	79fa      	ldrb	r2, [r7, #7]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d101      	bne.n	800afa0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	e006      	b.n	800afae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1ef      	bne.n	800af8c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	24008114 	.word	0x24008114

0800afc0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800afc6:	4b0c      	ldr	r3, [pc, #48]	; (800aff8 <pbuf_free_ooseq+0x38>)
 800afc8:	2200      	movs	r2, #0
 800afca:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800afcc:	4b0b      	ldr	r3, [pc, #44]	; (800affc <pbuf_free_ooseq+0x3c>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	607b      	str	r3, [r7, #4]
 800afd2:	e00a      	b.n	800afea <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f002 f93d 	bl	800d25c <tcp_free_ooseq>
      return;
 800afe2:	e005      	b.n	800aff0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	607b      	str	r3, [r7, #4]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1f1      	bne.n	800afd4 <pbuf_free_ooseq+0x14>
    }
  }
}
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	2400811d 	.word	0x2400811d
 800affc:	2400812c 	.word	0x2400812c

0800b000 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b000:	b480      	push	{r7}
 800b002:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b004:	4b03      	ldr	r3, [pc, #12]	; (800b014 <pbuf_pool_is_empty+0x14>)
 800b006:	2201      	movs	r2, #1
 800b008:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b00a:	bf00      	nop
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	2400811d 	.word	0x2400811d

0800b018 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	4611      	mov	r1, r2
 800b024:	461a      	mov	r2, r3
 800b026:	460b      	mov	r3, r1
 800b028:	80fb      	strh	r3, [r7, #6]
 800b02a:	4613      	mov	r3, r2
 800b02c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	88fa      	ldrh	r2, [r7, #6]
 800b03e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	88ba      	ldrh	r2, [r7, #4]
 800b044:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b046:	8b3b      	ldrh	r3, [r7, #24]
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	7f3a      	ldrb	r2, [r7, #28]
 800b052:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2201      	movs	r2, #1
 800b058:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	73da      	strb	r2, [r3, #15]
}
 800b060:	bf00      	nop
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08c      	sub	sp, #48	; 0x30
 800b070:	af02      	add	r7, sp, #8
 800b072:	4603      	mov	r3, r0
 800b074:	71fb      	strb	r3, [r7, #7]
 800b076:	460b      	mov	r3, r1
 800b078:	80bb      	strh	r3, [r7, #4]
 800b07a:	4613      	mov	r3, r2
 800b07c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b082:	887b      	ldrh	r3, [r7, #2]
 800b084:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b088:	d07f      	beq.n	800b18a <pbuf_alloc+0x11e>
 800b08a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b08e:	f300 80c8 	bgt.w	800b222 <pbuf_alloc+0x1b6>
 800b092:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b096:	d010      	beq.n	800b0ba <pbuf_alloc+0x4e>
 800b098:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b09c:	f300 80c1 	bgt.w	800b222 <pbuf_alloc+0x1b6>
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d002      	beq.n	800b0aa <pbuf_alloc+0x3e>
 800b0a4:	2b41      	cmp	r3, #65	; 0x41
 800b0a6:	f040 80bc 	bne.w	800b222 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b0aa:	887a      	ldrh	r2, [r7, #2]
 800b0ac:	88bb      	ldrh	r3, [r7, #4]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	f000 f8d1 	bl	800b258 <pbuf_alloc_reference>
 800b0b6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b0b8:	e0bd      	b.n	800b236 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b0c2:	88bb      	ldrh	r3, [r7, #4]
 800b0c4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b0c6:	2008      	movs	r0, #8
 800b0c8:	f7ff fc32 	bl	800a930 <memp_malloc>
 800b0cc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d109      	bne.n	800b0e8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b0d4:	f7ff ff94 	bl	800b000 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d002      	beq.n	800b0e4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b0de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0e0:	f000 faa8 	bl	800b634 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	e0a7      	b.n	800b238 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b0e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0ea:	3303      	adds	r3, #3
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	f023 0303 	bic.w	r3, r3, #3
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	8b7a      	ldrh	r2, [r7, #26]
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	bf28      	it	cs
 800b100:	4613      	movcs	r3, r2
 800b102:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b104:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b106:	3310      	adds	r3, #16
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	4413      	add	r3, r2
 800b10c:	3303      	adds	r3, #3
 800b10e:	f023 0303 	bic.w	r3, r3, #3
 800b112:	4618      	mov	r0, r3
 800b114:	89f9      	ldrh	r1, [r7, #14]
 800b116:	8b7a      	ldrh	r2, [r7, #26]
 800b118:	2300      	movs	r3, #0
 800b11a:	9301      	str	r3, [sp, #4]
 800b11c:	887b      	ldrh	r3, [r7, #2]
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	460b      	mov	r3, r1
 800b122:	4601      	mov	r1, r0
 800b124:	6938      	ldr	r0, [r7, #16]
 800b126:	f7ff ff77 	bl	800b018 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	f003 0303 	and.w	r3, r3, #3
 800b132:	2b00      	cmp	r3, #0
 800b134:	d006      	beq.n	800b144 <pbuf_alloc+0xd8>
 800b136:	4b42      	ldr	r3, [pc, #264]	; (800b240 <pbuf_alloc+0x1d4>)
 800b138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b13c:	4941      	ldr	r1, [pc, #260]	; (800b244 <pbuf_alloc+0x1d8>)
 800b13e:	4842      	ldr	r0, [pc, #264]	; (800b248 <pbuf_alloc+0x1dc>)
 800b140:	f006 f9b0 	bl	80114a4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b146:	3303      	adds	r3, #3
 800b148:	f023 0303 	bic.w	r3, r3, #3
 800b14c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b150:	d106      	bne.n	800b160 <pbuf_alloc+0xf4>
 800b152:	4b3b      	ldr	r3, [pc, #236]	; (800b240 <pbuf_alloc+0x1d4>)
 800b154:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b158:	493c      	ldr	r1, [pc, #240]	; (800b24c <pbuf_alloc+0x1e0>)
 800b15a:	483b      	ldr	r0, [pc, #236]	; (800b248 <pbuf_alloc+0x1dc>)
 800b15c:	f006 f9a2 	bl	80114a4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	2b00      	cmp	r3, #0
 800b164:	d102      	bne.n	800b16c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	627b      	str	r3, [r7, #36]	; 0x24
 800b16a:	e002      	b.n	800b172 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b176:	8b7a      	ldrh	r2, [r7, #26]
 800b178:	89fb      	ldrh	r3, [r7, #14]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b182:	8b7b      	ldrh	r3, [r7, #26]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d19e      	bne.n	800b0c6 <pbuf_alloc+0x5a>
      break;
 800b188:	e055      	b.n	800b236 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b18a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b18c:	3303      	adds	r3, #3
 800b18e:	b29b      	uxth	r3, r3
 800b190:	f023 0303 	bic.w	r3, r3, #3
 800b194:	b29a      	uxth	r2, r3
 800b196:	88bb      	ldrh	r3, [r7, #4]
 800b198:	3303      	adds	r3, #3
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	f023 0303 	bic.w	r3, r3, #3
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	4413      	add	r3, r2
 800b1a4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b1a6:	8b3b      	ldrh	r3, [r7, #24]
 800b1a8:	3310      	adds	r3, #16
 800b1aa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b1ac:	8b3a      	ldrh	r2, [r7, #24]
 800b1ae:	88bb      	ldrh	r3, [r7, #4]
 800b1b0:	3303      	adds	r3, #3
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d306      	bcc.n	800b1c8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b1ba:	8afa      	ldrh	r2, [r7, #22]
 800b1bc:	88bb      	ldrh	r3, [r7, #4]
 800b1be:	3303      	adds	r3, #3
 800b1c0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d201      	bcs.n	800b1cc <pbuf_alloc+0x160>
        return NULL;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	e035      	b.n	800b238 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b1cc:	8afb      	ldrh	r3, [r7, #22]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff fa1e 	bl	800a610 <mem_malloc>
 800b1d4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d101      	bne.n	800b1e0 <pbuf_alloc+0x174>
        return NULL;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e02b      	b.n	800b238 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b1e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1e2:	3310      	adds	r3, #16
 800b1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e6:	4413      	add	r3, r2
 800b1e8:	3303      	adds	r3, #3
 800b1ea:	f023 0303 	bic.w	r3, r3, #3
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	88b9      	ldrh	r1, [r7, #4]
 800b1f2:	88ba      	ldrh	r2, [r7, #4]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	9301      	str	r3, [sp, #4]
 800b1f8:	887b      	ldrh	r3, [r7, #2]
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4601      	mov	r1, r0
 800b200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b202:	f7ff ff09 	bl	800b018 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f003 0303 	and.w	r3, r3, #3
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d010      	beq.n	800b234 <pbuf_alloc+0x1c8>
 800b212:	4b0b      	ldr	r3, [pc, #44]	; (800b240 <pbuf_alloc+0x1d4>)
 800b214:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b218:	490d      	ldr	r1, [pc, #52]	; (800b250 <pbuf_alloc+0x1e4>)
 800b21a:	480b      	ldr	r0, [pc, #44]	; (800b248 <pbuf_alloc+0x1dc>)
 800b21c:	f006 f942 	bl	80114a4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b220:	e008      	b.n	800b234 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b222:	4b07      	ldr	r3, [pc, #28]	; (800b240 <pbuf_alloc+0x1d4>)
 800b224:	f240 1227 	movw	r2, #295	; 0x127
 800b228:	490a      	ldr	r1, [pc, #40]	; (800b254 <pbuf_alloc+0x1e8>)
 800b22a:	4807      	ldr	r0, [pc, #28]	; (800b248 <pbuf_alloc+0x1dc>)
 800b22c:	f006 f93a 	bl	80114a4 <iprintf>
      return NULL;
 800b230:	2300      	movs	r3, #0
 800b232:	e001      	b.n	800b238 <pbuf_alloc+0x1cc>
      break;
 800b234:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3728      	adds	r7, #40	; 0x28
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	08013354 	.word	0x08013354
 800b244:	080133b4 	.word	0x080133b4
 800b248:	080133e4 	.word	0x080133e4
 800b24c:	0801340c 	.word	0x0801340c
 800b250:	08013440 	.word	0x08013440
 800b254:	0801346c 	.word	0x0801346c

0800b258 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af02      	add	r7, sp, #8
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	460b      	mov	r3, r1
 800b262:	807b      	strh	r3, [r7, #2]
 800b264:	4613      	mov	r3, r2
 800b266:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b268:	883b      	ldrh	r3, [r7, #0]
 800b26a:	2b41      	cmp	r3, #65	; 0x41
 800b26c:	d009      	beq.n	800b282 <pbuf_alloc_reference+0x2a>
 800b26e:	883b      	ldrh	r3, [r7, #0]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d006      	beq.n	800b282 <pbuf_alloc_reference+0x2a>
 800b274:	4b0f      	ldr	r3, [pc, #60]	; (800b2b4 <pbuf_alloc_reference+0x5c>)
 800b276:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b27a:	490f      	ldr	r1, [pc, #60]	; (800b2b8 <pbuf_alloc_reference+0x60>)
 800b27c:	480f      	ldr	r0, [pc, #60]	; (800b2bc <pbuf_alloc_reference+0x64>)
 800b27e:	f006 f911 	bl	80114a4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b282:	2007      	movs	r0, #7
 800b284:	f7ff fb54 	bl	800a930 <memp_malloc>
 800b288:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b290:	2300      	movs	r3, #0
 800b292:	e00b      	b.n	800b2ac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b294:	8879      	ldrh	r1, [r7, #2]
 800b296:	887a      	ldrh	r2, [r7, #2]
 800b298:	2300      	movs	r3, #0
 800b29a:	9301      	str	r3, [sp, #4]
 800b29c:	883b      	ldrh	r3, [r7, #0]
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	6879      	ldr	r1, [r7, #4]
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f7ff feb7 	bl	800b018 <pbuf_init_alloced_pbuf>
  return p;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	08013354 	.word	0x08013354
 800b2b8:	08013488 	.word	0x08013488
 800b2bc:	080133e4 	.word	0x080133e4

0800b2c0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b088      	sub	sp, #32
 800b2c4:	af02      	add	r7, sp, #8
 800b2c6:	607b      	str	r3, [r7, #4]
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	81bb      	strh	r3, [r7, #12]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
 800b2d6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b2d8:	8a7b      	ldrh	r3, [r7, #18]
 800b2da:	3303      	adds	r3, #3
 800b2dc:	f023 0203 	bic.w	r2, r3, #3
 800b2e0:	89bb      	ldrh	r3, [r7, #12]
 800b2e2:	441a      	add	r2, r3
 800b2e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d901      	bls.n	800b2ee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e018      	b.n	800b320 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b2ee:	6a3b      	ldr	r3, [r7, #32]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d007      	beq.n	800b304 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b2f4:	8a7b      	ldrh	r3, [r7, #18]
 800b2f6:	3303      	adds	r3, #3
 800b2f8:	f023 0303 	bic.w	r3, r3, #3
 800b2fc:	6a3a      	ldr	r2, [r7, #32]
 800b2fe:	4413      	add	r3, r2
 800b300:	617b      	str	r3, [r7, #20]
 800b302:	e001      	b.n	800b308 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b304:	2300      	movs	r3, #0
 800b306:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	89b9      	ldrh	r1, [r7, #12]
 800b30c:	89ba      	ldrh	r2, [r7, #12]
 800b30e:	2302      	movs	r3, #2
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	897b      	ldrh	r3, [r7, #10]
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	460b      	mov	r3, r1
 800b318:	6979      	ldr	r1, [r7, #20]
 800b31a:	f7ff fe7d 	bl	800b018 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b31e:	687b      	ldr	r3, [r7, #4]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	460b      	mov	r3, r1
 800b332:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d106      	bne.n	800b348 <pbuf_realloc+0x20>
 800b33a:	4b3a      	ldr	r3, [pc, #232]	; (800b424 <pbuf_realloc+0xfc>)
 800b33c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b340:	4939      	ldr	r1, [pc, #228]	; (800b428 <pbuf_realloc+0x100>)
 800b342:	483a      	ldr	r0, [pc, #232]	; (800b42c <pbuf_realloc+0x104>)
 800b344:	f006 f8ae 	bl	80114a4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	891b      	ldrh	r3, [r3, #8]
 800b34c:	887a      	ldrh	r2, [r7, #2]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d263      	bcs.n	800b41a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	891a      	ldrh	r2, [r3, #8]
 800b356:	887b      	ldrh	r3, [r7, #2]
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b35c:	887b      	ldrh	r3, [r7, #2]
 800b35e:	817b      	strh	r3, [r7, #10]
  q = p;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b364:	e018      	b.n	800b398 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	895b      	ldrh	r3, [r3, #10]
 800b36a:	897a      	ldrh	r2, [r7, #10]
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	891a      	ldrh	r2, [r3, #8]
 800b374:	893b      	ldrh	r3, [r7, #8]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	b29a      	uxth	r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d106      	bne.n	800b398 <pbuf_realloc+0x70>
 800b38a:	4b26      	ldr	r3, [pc, #152]	; (800b424 <pbuf_realloc+0xfc>)
 800b38c:	f240 12af 	movw	r2, #431	; 0x1af
 800b390:	4927      	ldr	r1, [pc, #156]	; (800b430 <pbuf_realloc+0x108>)
 800b392:	4826      	ldr	r0, [pc, #152]	; (800b42c <pbuf_realloc+0x104>)
 800b394:	f006 f886 	bl	80114a4 <iprintf>
  while (rem_len > q->len) {
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	895b      	ldrh	r3, [r3, #10]
 800b39c:	897a      	ldrh	r2, [r7, #10]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d8e1      	bhi.n	800b366 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	7b1b      	ldrb	r3, [r3, #12]
 800b3a6:	f003 030f 	and.w	r3, r3, #15
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d121      	bne.n	800b3f2 <pbuf_realloc+0xca>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	895b      	ldrh	r3, [r3, #10]
 800b3b2:	897a      	ldrh	r2, [r7, #10]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d01c      	beq.n	800b3f2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	7b5b      	ldrb	r3, [r3, #13]
 800b3bc:	f003 0302 	and.w	r3, r3, #2
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d116      	bne.n	800b3f2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	897b      	ldrh	r3, [r7, #10]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f7ff f81e 	bl	800a418 <mem_trim>
 800b3dc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d106      	bne.n	800b3f2 <pbuf_realloc+0xca>
 800b3e4:	4b0f      	ldr	r3, [pc, #60]	; (800b424 <pbuf_realloc+0xfc>)
 800b3e6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b3ea:	4912      	ldr	r1, [pc, #72]	; (800b434 <pbuf_realloc+0x10c>)
 800b3ec:	480f      	ldr	r0, [pc, #60]	; (800b42c <pbuf_realloc+0x104>)
 800b3ee:	f006 f859 	bl	80114a4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	897a      	ldrh	r2, [r7, #10]
 800b3f6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	895a      	ldrh	r2, [r3, #10]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d004      	beq.n	800b412 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 f911 	bl	800b634 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	e000      	b.n	800b41c <pbuf_realloc+0xf4>
    return;
 800b41a:	bf00      	nop

}
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	08013354 	.word	0x08013354
 800b428:	0801349c 	.word	0x0801349c
 800b42c:	080133e4 	.word	0x080133e4
 800b430:	080134b4 	.word	0x080134b4
 800b434:	080134cc 	.word	0x080134cc

0800b438 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	4613      	mov	r3, r2
 800b444:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d106      	bne.n	800b45a <pbuf_add_header_impl+0x22>
 800b44c:	4b2b      	ldr	r3, [pc, #172]	; (800b4fc <pbuf_add_header_impl+0xc4>)
 800b44e:	f240 12df 	movw	r2, #479	; 0x1df
 800b452:	492b      	ldr	r1, [pc, #172]	; (800b500 <pbuf_add_header_impl+0xc8>)
 800b454:	482b      	ldr	r0, [pc, #172]	; (800b504 <pbuf_add_header_impl+0xcc>)
 800b456:	f006 f825 	bl	80114a4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d003      	beq.n	800b468 <pbuf_add_header_impl+0x30>
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b466:	d301      	bcc.n	800b46c <pbuf_add_header_impl+0x34>
    return 1;
 800b468:	2301      	movs	r3, #1
 800b46a:	e043      	b.n	800b4f4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <pbuf_add_header_impl+0x3e>
    return 0;
 800b472:	2300      	movs	r3, #0
 800b474:	e03e      	b.n	800b4f4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	891a      	ldrh	r2, [r3, #8]
 800b47e:	8a7b      	ldrh	r3, [r7, #18]
 800b480:	4413      	add	r3, r2
 800b482:	b29b      	uxth	r3, r3
 800b484:	8a7a      	ldrh	r2, [r7, #18]
 800b486:	429a      	cmp	r2, r3
 800b488:	d901      	bls.n	800b48e <pbuf_add_header_impl+0x56>
    return 1;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e032      	b.n	800b4f4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	7b1b      	ldrb	r3, [r3, #12]
 800b492:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b494:	8a3b      	ldrh	r3, [r7, #16]
 800b496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00c      	beq.n	800b4b8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	685a      	ldr	r2, [r3, #4]
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	425b      	negs	r3, r3
 800b4a6:	4413      	add	r3, r2
 800b4a8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3310      	adds	r3, #16
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d20d      	bcs.n	800b4d0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e01d      	b.n	800b4f4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b4b8:	79fb      	ldrb	r3, [r7, #7]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d006      	beq.n	800b4cc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	685a      	ldr	r2, [r3, #4]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	425b      	negs	r3, r3
 800b4c6:	4413      	add	r3, r2
 800b4c8:	617b      	str	r3, [r7, #20]
 800b4ca:	e001      	b.n	800b4d0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e011      	b.n	800b4f4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	895a      	ldrh	r2, [r3, #10]
 800b4da:	8a7b      	ldrh	r3, [r7, #18]
 800b4dc:	4413      	add	r3, r2
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	891a      	ldrh	r2, [r3, #8]
 800b4e8:	8a7b      	ldrh	r3, [r7, #18]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	811a      	strh	r2, [r3, #8]


  return 0;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3718      	adds	r7, #24
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	08013354 	.word	0x08013354
 800b500:	080134e8 	.word	0x080134e8
 800b504:	080133e4 	.word	0x080133e4

0800b508 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b512:	2200      	movs	r2, #0
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7ff ff8e 	bl	800b438 <pbuf_add_header_impl>
 800b51c:	4603      	mov	r3, r0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
	...

0800b528 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d106      	bne.n	800b546 <pbuf_remove_header+0x1e>
 800b538:	4b20      	ldr	r3, [pc, #128]	; (800b5bc <pbuf_remove_header+0x94>)
 800b53a:	f240 224b 	movw	r2, #587	; 0x24b
 800b53e:	4920      	ldr	r1, [pc, #128]	; (800b5c0 <pbuf_remove_header+0x98>)
 800b540:	4820      	ldr	r0, [pc, #128]	; (800b5c4 <pbuf_remove_header+0x9c>)
 800b542:	f005 ffaf 	bl	80114a4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <pbuf_remove_header+0x2c>
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b552:	d301      	bcc.n	800b558 <pbuf_remove_header+0x30>
    return 1;
 800b554:	2301      	movs	r3, #1
 800b556:	e02c      	b.n	800b5b2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <pbuf_remove_header+0x3a>
    return 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	e027      	b.n	800b5b2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	895b      	ldrh	r3, [r3, #10]
 800b56a:	89fa      	ldrh	r2, [r7, #14]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d908      	bls.n	800b582 <pbuf_remove_header+0x5a>
 800b570:	4b12      	ldr	r3, [pc, #72]	; (800b5bc <pbuf_remove_header+0x94>)
 800b572:	f240 2255 	movw	r2, #597	; 0x255
 800b576:	4914      	ldr	r1, [pc, #80]	; (800b5c8 <pbuf_remove_header+0xa0>)
 800b578:	4812      	ldr	r0, [pc, #72]	; (800b5c4 <pbuf_remove_header+0x9c>)
 800b57a:	f005 ff93 	bl	80114a4 <iprintf>
 800b57e:	2301      	movs	r3, #1
 800b580:	e017      	b.n	800b5b2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	441a      	add	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	895a      	ldrh	r2, [r3, #10]
 800b598:	89fb      	ldrh	r3, [r7, #14]
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	891a      	ldrh	r2, [r3, #8]
 800b5a6:	89fb      	ldrh	r3, [r7, #14]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	08013354 	.word	0x08013354
 800b5c0:	080134e8 	.word	0x080134e8
 800b5c4:	080133e4 	.word	0x080133e4
 800b5c8:	080134f4 	.word	0x080134f4

0800b5cc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	807b      	strh	r3, [r7, #2]
 800b5d8:	4613      	mov	r3, r2
 800b5da:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b5dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	da08      	bge.n	800b5f6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b5e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b5e8:	425b      	negs	r3, r3
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff ff9b 	bl	800b528 <pbuf_remove_header>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	e007      	b.n	800b606 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b5f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b5fa:	787a      	ldrb	r2, [r7, #1]
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7ff ff1a 	bl	800b438 <pbuf_add_header_impl>
 800b604:	4603      	mov	r3, r0
  }
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b082      	sub	sp, #8
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
 800b616:	460b      	mov	r3, r1
 800b618:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b61a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b61e:	2201      	movs	r2, #1
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff ffd2 	bl	800b5cc <pbuf_header_impl>
 800b628:	4603      	mov	r3, r0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
	...

0800b634 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d10b      	bne.n	800b65a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d106      	bne.n	800b656 <pbuf_free+0x22>
 800b648:	4b38      	ldr	r3, [pc, #224]	; (800b72c <pbuf_free+0xf8>)
 800b64a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b64e:	4938      	ldr	r1, [pc, #224]	; (800b730 <pbuf_free+0xfc>)
 800b650:	4838      	ldr	r0, [pc, #224]	; (800b734 <pbuf_free+0x100>)
 800b652:	f005 ff27 	bl	80114a4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b656:	2300      	movs	r3, #0
 800b658:	e063      	b.n	800b722 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b65e:	e05c      	b.n	800b71a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	7b9b      	ldrb	r3, [r3, #14]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d106      	bne.n	800b676 <pbuf_free+0x42>
 800b668:	4b30      	ldr	r3, [pc, #192]	; (800b72c <pbuf_free+0xf8>)
 800b66a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b66e:	4932      	ldr	r1, [pc, #200]	; (800b738 <pbuf_free+0x104>)
 800b670:	4830      	ldr	r0, [pc, #192]	; (800b734 <pbuf_free+0x100>)
 800b672:	f005 ff17 	bl	80114a4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	7b9b      	ldrb	r3, [r3, #14]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	739a      	strb	r2, [r3, #14]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	7b9b      	ldrb	r3, [r3, #14]
 800b686:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b688:	7dbb      	ldrb	r3, [r7, #22]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d143      	bne.n	800b716 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	7b1b      	ldrb	r3, [r3, #12]
 800b698:	f003 030f 	and.w	r3, r3, #15
 800b69c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	7b5b      	ldrb	r3, [r3, #13]
 800b6a2:	f003 0302 	and.w	r3, r3, #2
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d011      	beq.n	800b6ce <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d106      	bne.n	800b6c4 <pbuf_free+0x90>
 800b6b6:	4b1d      	ldr	r3, [pc, #116]	; (800b72c <pbuf_free+0xf8>)
 800b6b8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b6bc:	491f      	ldr	r1, [pc, #124]	; (800b73c <pbuf_free+0x108>)
 800b6be:	481d      	ldr	r0, [pc, #116]	; (800b734 <pbuf_free+0x100>)
 800b6c0:	f005 fef0 	bl	80114a4 <iprintf>
        pc->custom_free_function(p);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	4798      	blx	r3
 800b6cc:	e01d      	b.n	800b70a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d104      	bne.n	800b6de <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	2008      	movs	r0, #8
 800b6d8:	f7ff f99a 	bl	800aa10 <memp_free>
 800b6dc:	e015      	b.n	800b70a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b6de:	7bfb      	ldrb	r3, [r7, #15]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d104      	bne.n	800b6ee <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b6e4:	6879      	ldr	r1, [r7, #4]
 800b6e6:	2007      	movs	r0, #7
 800b6e8:	f7ff f992 	bl	800aa10 <memp_free>
 800b6ec:	e00d      	b.n	800b70a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d103      	bne.n	800b6fc <pbuf_free+0xc8>
          mem_free(p);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7fe fe25 	bl	800a344 <mem_free>
 800b6fa:	e006      	b.n	800b70a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b6fc:	4b0b      	ldr	r3, [pc, #44]	; (800b72c <pbuf_free+0xf8>)
 800b6fe:	f240 320f 	movw	r2, #783	; 0x30f
 800b702:	490f      	ldr	r1, [pc, #60]	; (800b740 <pbuf_free+0x10c>)
 800b704:	480b      	ldr	r0, [pc, #44]	; (800b734 <pbuf_free+0x100>)
 800b706:	f005 fecd 	bl	80114a4 <iprintf>
        }
      }
      count++;
 800b70a:	7dfb      	ldrb	r3, [r7, #23]
 800b70c:	3301      	adds	r3, #1
 800b70e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	607b      	str	r3, [r7, #4]
 800b714:	e001      	b.n	800b71a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b716:	2300      	movs	r3, #0
 800b718:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d19f      	bne.n	800b660 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b720:	7dfb      	ldrb	r3, [r7, #23]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	08013354 	.word	0x08013354
 800b730:	080134e8 	.word	0x080134e8
 800b734:	080133e4 	.word	0x080133e4
 800b738:	08013514 	.word	0x08013514
 800b73c:	0801352c 	.word	0x0801352c
 800b740:	08013550 	.word	0x08013550

0800b744 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b74c:	2300      	movs	r3, #0
 800b74e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b750:	e005      	b.n	800b75e <pbuf_clen+0x1a>
    ++len;
 800b752:	89fb      	ldrh	r3, [r7, #14]
 800b754:	3301      	adds	r3, #1
 800b756:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1f6      	bne.n	800b752 <pbuf_clen+0xe>
  }
  return len;
 800b764:	89fb      	ldrh	r3, [r7, #14]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
	...

0800b774 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d010      	beq.n	800b7a4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	7b9b      	ldrb	r3, [r3, #14]
 800b786:	3301      	adds	r3, #1
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	7b9b      	ldrb	r3, [r3, #14]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d106      	bne.n	800b7a4 <pbuf_ref+0x30>
 800b796:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <pbuf_ref+0x38>)
 800b798:	f240 3242 	movw	r2, #834	; 0x342
 800b79c:	4904      	ldr	r1, [pc, #16]	; (800b7b0 <pbuf_ref+0x3c>)
 800b79e:	4805      	ldr	r0, [pc, #20]	; (800b7b4 <pbuf_ref+0x40>)
 800b7a0:	f005 fe80 	bl	80114a4 <iprintf>
  }
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	08013354 	.word	0x08013354
 800b7b0:	08013564 	.word	0x08013564
 800b7b4:	080133e4 	.word	0x080133e4

0800b7b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <pbuf_cat+0x16>
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d107      	bne.n	800b7de <pbuf_cat+0x26>
 800b7ce:	4b20      	ldr	r3, [pc, #128]	; (800b850 <pbuf_cat+0x98>)
 800b7d0:	f240 3259 	movw	r2, #857	; 0x359
 800b7d4:	491f      	ldr	r1, [pc, #124]	; (800b854 <pbuf_cat+0x9c>)
 800b7d6:	4820      	ldr	r0, [pc, #128]	; (800b858 <pbuf_cat+0xa0>)
 800b7d8:	f005 fe64 	bl	80114a4 <iprintf>
 800b7dc:	e034      	b.n	800b848 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	60fb      	str	r3, [r7, #12]
 800b7e2:	e00a      	b.n	800b7fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	891a      	ldrh	r2, [r3, #8]
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	891b      	ldrh	r3, [r3, #8]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d1f0      	bne.n	800b7e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	891a      	ldrh	r2, [r3, #8]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	895b      	ldrh	r3, [r3, #10]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d006      	beq.n	800b81c <pbuf_cat+0x64>
 800b80e:	4b10      	ldr	r3, [pc, #64]	; (800b850 <pbuf_cat+0x98>)
 800b810:	f240 3262 	movw	r2, #866	; 0x362
 800b814:	4911      	ldr	r1, [pc, #68]	; (800b85c <pbuf_cat+0xa4>)
 800b816:	4810      	ldr	r0, [pc, #64]	; (800b858 <pbuf_cat+0xa0>)
 800b818:	f005 fe44 	bl	80114a4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d006      	beq.n	800b832 <pbuf_cat+0x7a>
 800b824:	4b0a      	ldr	r3, [pc, #40]	; (800b850 <pbuf_cat+0x98>)
 800b826:	f240 3263 	movw	r2, #867	; 0x363
 800b82a:	490d      	ldr	r1, [pc, #52]	; (800b860 <pbuf_cat+0xa8>)
 800b82c:	480a      	ldr	r0, [pc, #40]	; (800b858 <pbuf_cat+0xa0>)
 800b82e:	f005 fe39 	bl	80114a4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	891a      	ldrh	r2, [r3, #8]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	891b      	ldrh	r3, [r3, #8]
 800b83a:	4413      	add	r3, r2
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	08013354 	.word	0x08013354
 800b854:	08013578 	.word	0x08013578
 800b858:	080133e4 	.word	0x080133e4
 800b85c:	080135b0 	.word	0x080135b0
 800b860:	080135e0 	.word	0x080135e0

0800b864 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b86e:	2300      	movs	r3, #0
 800b870:	617b      	str	r3, [r7, #20]
 800b872:	2300      	movs	r3, #0
 800b874:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d008      	beq.n	800b88e <pbuf_copy+0x2a>
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d005      	beq.n	800b88e <pbuf_copy+0x2a>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	891a      	ldrh	r2, [r3, #8]
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	891b      	ldrh	r3, [r3, #8]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d209      	bcs.n	800b8a2 <pbuf_copy+0x3e>
 800b88e:	4b57      	ldr	r3, [pc, #348]	; (800b9ec <pbuf_copy+0x188>)
 800b890:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b894:	4956      	ldr	r1, [pc, #344]	; (800b9f0 <pbuf_copy+0x18c>)
 800b896:	4857      	ldr	r0, [pc, #348]	; (800b9f4 <pbuf_copy+0x190>)
 800b898:	f005 fe04 	bl	80114a4 <iprintf>
 800b89c:	f06f 030f 	mvn.w	r3, #15
 800b8a0:	e09f      	b.n	800b9e2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	895b      	ldrh	r3, [r3, #10]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	1ad2      	subs	r2, r2, r3
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	895b      	ldrh	r3, [r3, #10]
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	1acb      	subs	r3, r1, r3
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d306      	bcc.n	800b8c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	895b      	ldrh	r3, [r3, #10]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	60fb      	str	r3, [r7, #12]
 800b8c6:	e005      	b.n	800b8d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	895b      	ldrh	r3, [r3, #10]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685a      	ldr	r2, [r3, #4]
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	18d0      	adds	r0, r2, r3
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	685a      	ldr	r2, [r3, #4]
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	f005 fdc6 	bl	8011478 <memcpy>
    offset_to += len;
 800b8ec:	697a      	ldr	r2, [r7, #20]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	895b      	ldrh	r3, [r3, #10]
 800b900:	461a      	mov	r2, r3
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	4293      	cmp	r3, r2
 800b906:	d906      	bls.n	800b916 <pbuf_copy+0xb2>
 800b908:	4b38      	ldr	r3, [pc, #224]	; (800b9ec <pbuf_copy+0x188>)
 800b90a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b90e:	493a      	ldr	r1, [pc, #232]	; (800b9f8 <pbuf_copy+0x194>)
 800b910:	4838      	ldr	r0, [pc, #224]	; (800b9f4 <pbuf_copy+0x190>)
 800b912:	f005 fdc7 	bl	80114a4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	895b      	ldrh	r3, [r3, #10]
 800b91a:	461a      	mov	r2, r3
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	4293      	cmp	r3, r2
 800b920:	d906      	bls.n	800b930 <pbuf_copy+0xcc>
 800b922:	4b32      	ldr	r3, [pc, #200]	; (800b9ec <pbuf_copy+0x188>)
 800b924:	f240 32da 	movw	r2, #986	; 0x3da
 800b928:	4934      	ldr	r1, [pc, #208]	; (800b9fc <pbuf_copy+0x198>)
 800b92a:	4832      	ldr	r0, [pc, #200]	; (800b9f4 <pbuf_copy+0x190>)
 800b92c:	f005 fdba 	bl	80114a4 <iprintf>
    if (offset_from >= p_from->len) {
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	895b      	ldrh	r3, [r3, #10]
 800b934:	461a      	mov	r2, r3
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	4293      	cmp	r3, r2
 800b93a:	d304      	bcc.n	800b946 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b93c:	2300      	movs	r3, #0
 800b93e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	895b      	ldrh	r3, [r3, #10]
 800b94a:	461a      	mov	r2, r3
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	4293      	cmp	r3, r2
 800b950:	d114      	bne.n	800b97c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10c      	bne.n	800b97c <pbuf_copy+0x118>
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d009      	beq.n	800b97c <pbuf_copy+0x118>
 800b968:	4b20      	ldr	r3, [pc, #128]	; (800b9ec <pbuf_copy+0x188>)
 800b96a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b96e:	4924      	ldr	r1, [pc, #144]	; (800ba00 <pbuf_copy+0x19c>)
 800b970:	4820      	ldr	r0, [pc, #128]	; (800b9f4 <pbuf_copy+0x190>)
 800b972:	f005 fd97 	bl	80114a4 <iprintf>
 800b976:	f06f 030f 	mvn.w	r3, #15
 800b97a:	e032      	b.n	800b9e2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d013      	beq.n	800b9aa <pbuf_copy+0x146>
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	895a      	ldrh	r2, [r3, #10]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	891b      	ldrh	r3, [r3, #8]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d10d      	bne.n	800b9aa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d009      	beq.n	800b9aa <pbuf_copy+0x146>
 800b996:	4b15      	ldr	r3, [pc, #84]	; (800b9ec <pbuf_copy+0x188>)
 800b998:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b99c:	4919      	ldr	r1, [pc, #100]	; (800ba04 <pbuf_copy+0x1a0>)
 800b99e:	4815      	ldr	r0, [pc, #84]	; (800b9f4 <pbuf_copy+0x190>)
 800b9a0:	f005 fd80 	bl	80114a4 <iprintf>
 800b9a4:	f06f 0305 	mvn.w	r3, #5
 800b9a8:	e01b      	b.n	800b9e2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d013      	beq.n	800b9d8 <pbuf_copy+0x174>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	895a      	ldrh	r2, [r3, #10]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	891b      	ldrh	r3, [r3, #8]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d10d      	bne.n	800b9d8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d009      	beq.n	800b9d8 <pbuf_copy+0x174>
 800b9c4:	4b09      	ldr	r3, [pc, #36]	; (800b9ec <pbuf_copy+0x188>)
 800b9c6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b9ca:	490e      	ldr	r1, [pc, #56]	; (800ba04 <pbuf_copy+0x1a0>)
 800b9cc:	4809      	ldr	r0, [pc, #36]	; (800b9f4 <pbuf_copy+0x190>)
 800b9ce:	f005 fd69 	bl	80114a4 <iprintf>
 800b9d2:	f06f 0305 	mvn.w	r3, #5
 800b9d6:	e004      	b.n	800b9e2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f47f af61 	bne.w	800b8a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	08013354 	.word	0x08013354
 800b9f0:	0801362c 	.word	0x0801362c
 800b9f4:	080133e4 	.word	0x080133e4
 800b9f8:	0801365c 	.word	0x0801365c
 800b9fc:	08013674 	.word	0x08013674
 800ba00:	08013690 	.word	0x08013690
 800ba04:	080136a0 	.word	0x080136a0

0800ba08 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b088      	sub	sp, #32
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	4611      	mov	r1, r2
 800ba14:	461a      	mov	r2, r3
 800ba16:	460b      	mov	r3, r1
 800ba18:	80fb      	strh	r3, [r7, #6]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d108      	bne.n	800ba3e <pbuf_copy_partial+0x36>
 800ba2c:	4b2b      	ldr	r3, [pc, #172]	; (800badc <pbuf_copy_partial+0xd4>)
 800ba2e:	f240 420a 	movw	r2, #1034	; 0x40a
 800ba32:	492b      	ldr	r1, [pc, #172]	; (800bae0 <pbuf_copy_partial+0xd8>)
 800ba34:	482b      	ldr	r0, [pc, #172]	; (800bae4 <pbuf_copy_partial+0xdc>)
 800ba36:	f005 fd35 	bl	80114a4 <iprintf>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	e04a      	b.n	800bad4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d108      	bne.n	800ba56 <pbuf_copy_partial+0x4e>
 800ba44:	4b25      	ldr	r3, [pc, #148]	; (800badc <pbuf_copy_partial+0xd4>)
 800ba46:	f240 420b 	movw	r2, #1035	; 0x40b
 800ba4a:	4927      	ldr	r1, [pc, #156]	; (800bae8 <pbuf_copy_partial+0xe0>)
 800ba4c:	4825      	ldr	r0, [pc, #148]	; (800bae4 <pbuf_copy_partial+0xdc>)
 800ba4e:	f005 fd29 	bl	80114a4 <iprintf>
 800ba52:	2300      	movs	r3, #0
 800ba54:	e03e      	b.n	800bad4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	61fb      	str	r3, [r7, #28]
 800ba5a:	e034      	b.n	800bac6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ba5c:	88bb      	ldrh	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00a      	beq.n	800ba78 <pbuf_copy_partial+0x70>
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	895b      	ldrh	r3, [r3, #10]
 800ba66:	88ba      	ldrh	r2, [r7, #4]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d305      	bcc.n	800ba78 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	895b      	ldrh	r3, [r3, #10]
 800ba70:	88ba      	ldrh	r2, [r7, #4]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	80bb      	strh	r3, [r7, #4]
 800ba76:	e023      	b.n	800bac0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	895a      	ldrh	r2, [r3, #10]
 800ba7c:	88bb      	ldrh	r3, [r7, #4]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ba82:	8b3a      	ldrh	r2, [r7, #24]
 800ba84:	88fb      	ldrh	r3, [r7, #6]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d901      	bls.n	800ba8e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ba8a:	88fb      	ldrh	r3, [r7, #6]
 800ba8c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ba8e:	8b7b      	ldrh	r3, [r7, #26]
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	18d0      	adds	r0, r2, r3
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	88bb      	ldrh	r3, [r7, #4]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	8b3a      	ldrh	r2, [r7, #24]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	f005 fcea 	bl	8011478 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800baa4:	8afa      	ldrh	r2, [r7, #22]
 800baa6:	8b3b      	ldrh	r3, [r7, #24]
 800baa8:	4413      	add	r3, r2
 800baaa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800baac:	8b7a      	ldrh	r2, [r7, #26]
 800baae:	8b3b      	ldrh	r3, [r7, #24]
 800bab0:	4413      	add	r3, r2
 800bab2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bab4:	88fa      	ldrh	r2, [r7, #6]
 800bab6:	8b3b      	ldrh	r3, [r7, #24]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	61fb      	str	r3, [r7, #28]
 800bac6:	88fb      	ldrh	r3, [r7, #6]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <pbuf_copy_partial+0xca>
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1c4      	bne.n	800ba5c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bad2:	8afb      	ldrh	r3, [r7, #22]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3720      	adds	r7, #32
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	08013354 	.word	0x08013354
 800bae0:	080136cc 	.word	0x080136cc
 800bae4:	080133e4 	.word	0x080133e4
 800bae8:	080136ec 	.word	0x080136ec

0800baec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	4603      	mov	r3, r0
 800baf4:	603a      	str	r2, [r7, #0]
 800baf6:	71fb      	strb	r3, [r7, #7]
 800baf8:	460b      	mov	r3, r1
 800bafa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	8919      	ldrh	r1, [r3, #8]
 800bb00:	88ba      	ldrh	r2, [r7, #4]
 800bb02:	79fb      	ldrb	r3, [r7, #7]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7ff fab1 	bl	800b06c <pbuf_alloc>
 800bb0a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d101      	bne.n	800bb16 <pbuf_clone+0x2a>
    return NULL;
 800bb12:	2300      	movs	r3, #0
 800bb14:	e011      	b.n	800bb3a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f7ff fea3 	bl	800b864 <pbuf_copy>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bb22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d006      	beq.n	800bb38 <pbuf_clone+0x4c>
 800bb2a:	4b06      	ldr	r3, [pc, #24]	; (800bb44 <pbuf_clone+0x58>)
 800bb2c:	f240 5224 	movw	r2, #1316	; 0x524
 800bb30:	4905      	ldr	r1, [pc, #20]	; (800bb48 <pbuf_clone+0x5c>)
 800bb32:	4806      	ldr	r0, [pc, #24]	; (800bb4c <pbuf_clone+0x60>)
 800bb34:	f005 fcb6 	bl	80114a4 <iprintf>
  return q;
 800bb38:	68fb      	ldr	r3, [r7, #12]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	08013354 	.word	0x08013354
 800bb48:	080137f8 	.word	0x080137f8
 800bb4c:	080133e4 	.word	0x080133e4

0800bb50 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bb54:	f005 fcbe 	bl	80114d4 <rand>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	4b01      	ldr	r3, [pc, #4]	; (800bb70 <tcp_init+0x20>)
 800bb6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bb6c:	bf00      	nop
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	2400000e 	.word	0x2400000e

0800bb74 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	7d1b      	ldrb	r3, [r3, #20]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d105      	bne.n	800bb90 <tcp_free+0x1c>
 800bb84:	4b06      	ldr	r3, [pc, #24]	; (800bba0 <tcp_free+0x2c>)
 800bb86:	22d4      	movs	r2, #212	; 0xd4
 800bb88:	4906      	ldr	r1, [pc, #24]	; (800bba4 <tcp_free+0x30>)
 800bb8a:	4807      	ldr	r0, [pc, #28]	; (800bba8 <tcp_free+0x34>)
 800bb8c:	f005 fc8a 	bl	80114a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bb90:	6879      	ldr	r1, [r7, #4]
 800bb92:	2001      	movs	r0, #1
 800bb94:	f7fe ff3c 	bl	800aa10 <memp_free>
}
 800bb98:	bf00      	nop
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	08013884 	.word	0x08013884
 800bba4:	080138e0 	.word	0x080138e0
 800bba8:	080138f4 	.word	0x080138f4

0800bbac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7d1b      	ldrb	r3, [r3, #20]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d105      	bne.n	800bbc8 <tcp_free_listen+0x1c>
 800bbbc:	4b06      	ldr	r3, [pc, #24]	; (800bbd8 <tcp_free_listen+0x2c>)
 800bbbe:	22df      	movs	r2, #223	; 0xdf
 800bbc0:	4906      	ldr	r1, [pc, #24]	; (800bbdc <tcp_free_listen+0x30>)
 800bbc2:	4807      	ldr	r0, [pc, #28]	; (800bbe0 <tcp_free_listen+0x34>)
 800bbc4:	f005 fc6e 	bl	80114a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bbc8:	6879      	ldr	r1, [r7, #4]
 800bbca:	2002      	movs	r0, #2
 800bbcc:	f7fe ff20 	bl	800aa10 <memp_free>
}
 800bbd0:	bf00      	nop
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	08013884 	.word	0x08013884
 800bbdc:	0801391c 	.word	0x0801391c
 800bbe0:	080138f4 	.word	0x080138f4

0800bbe4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bbe8:	f000 fea2 	bl	800c930 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bbec:	4b07      	ldr	r3, [pc, #28]	; (800bc0c <tcp_tmr+0x28>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	4b05      	ldr	r3, [pc, #20]	; (800bc0c <tcp_tmr+0x28>)
 800bbf6:	701a      	strb	r2, [r3, #0]
 800bbf8:	4b04      	ldr	r3, [pc, #16]	; (800bc0c <tcp_tmr+0x28>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	f003 0301 	and.w	r3, r3, #1
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d001      	beq.n	800bc08 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bc04:	f000 fb54 	bl	800c2b0 <tcp_slowtmr>
  }
}
 800bc08:	bf00      	nop
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	24008135 	.word	0x24008135

0800bc10 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d105      	bne.n	800bc2c <tcp_remove_listener+0x1c>
 800bc20:	4b0d      	ldr	r3, [pc, #52]	; (800bc58 <tcp_remove_listener+0x48>)
 800bc22:	22ff      	movs	r2, #255	; 0xff
 800bc24:	490d      	ldr	r1, [pc, #52]	; (800bc5c <tcp_remove_listener+0x4c>)
 800bc26:	480e      	ldr	r0, [pc, #56]	; (800bc60 <tcp_remove_listener+0x50>)
 800bc28:	f005 fc3c 	bl	80114a4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	60fb      	str	r3, [r7, #12]
 800bc30:	e00a      	b.n	800bc48 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d102      	bne.n	800bc42 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1f1      	bne.n	800bc32 <tcp_remove_listener+0x22>
    }
  }
}
 800bc4e:	bf00      	nop
 800bc50:	bf00      	nop
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	08013884 	.word	0x08013884
 800bc5c:	08013938 	.word	0x08013938
 800bc60:	080138f4 	.word	0x080138f4

0800bc64 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d106      	bne.n	800bc80 <tcp_listen_closed+0x1c>
 800bc72:	4b14      	ldr	r3, [pc, #80]	; (800bcc4 <tcp_listen_closed+0x60>)
 800bc74:	f240 1211 	movw	r2, #273	; 0x111
 800bc78:	4913      	ldr	r1, [pc, #76]	; (800bcc8 <tcp_listen_closed+0x64>)
 800bc7a:	4814      	ldr	r0, [pc, #80]	; (800bccc <tcp_listen_closed+0x68>)
 800bc7c:	f005 fc12 	bl	80114a4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	7d1b      	ldrb	r3, [r3, #20]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d006      	beq.n	800bc96 <tcp_listen_closed+0x32>
 800bc88:	4b0e      	ldr	r3, [pc, #56]	; (800bcc4 <tcp_listen_closed+0x60>)
 800bc8a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bc8e:	4910      	ldr	r1, [pc, #64]	; (800bcd0 <tcp_listen_closed+0x6c>)
 800bc90:	480e      	ldr	r0, [pc, #56]	; (800bccc <tcp_listen_closed+0x68>)
 800bc92:	f005 fc07 	bl	80114a4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc96:	2301      	movs	r3, #1
 800bc98:	60fb      	str	r3, [r7, #12]
 800bc9a:	e00b      	b.n	800bcb4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bc9c:	4a0d      	ldr	r2, [pc, #52]	; (800bcd4 <tcp_listen_closed+0x70>)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	6879      	ldr	r1, [r7, #4]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7ff ffb1 	bl	800bc10 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2b03      	cmp	r3, #3
 800bcb8:	d9f0      	bls.n	800bc9c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bcba:	bf00      	nop
 800bcbc:	bf00      	nop
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	08013884 	.word	0x08013884
 800bcc8:	08013960 	.word	0x08013960
 800bccc:	080138f4 	.word	0x080138f4
 800bcd0:	0801396c 	.word	0x0801396c
 800bcd4:	080152b4 	.word	0x080152b4

0800bcd8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bcd8:	b5b0      	push	{r4, r5, r7, lr}
 800bcda:	b088      	sub	sp, #32
 800bcdc:	af04      	add	r7, sp, #16
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d106      	bne.n	800bcf8 <tcp_close_shutdown+0x20>
 800bcea:	4b63      	ldr	r3, [pc, #396]	; (800be78 <tcp_close_shutdown+0x1a0>)
 800bcec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bcf0:	4962      	ldr	r1, [pc, #392]	; (800be7c <tcp_close_shutdown+0x1a4>)
 800bcf2:	4863      	ldr	r0, [pc, #396]	; (800be80 <tcp_close_shutdown+0x1a8>)
 800bcf4:	f005 fbd6 	bl	80114a4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bcf8:	78fb      	ldrb	r3, [r7, #3]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d066      	beq.n	800bdcc <tcp_close_shutdown+0xf4>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	7d1b      	ldrb	r3, [r3, #20]
 800bd02:	2b04      	cmp	r3, #4
 800bd04:	d003      	beq.n	800bd0e <tcp_close_shutdown+0x36>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	7d1b      	ldrb	r3, [r3, #20]
 800bd0a:	2b07      	cmp	r3, #7
 800bd0c:	d15e      	bne.n	800bdcc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d104      	bne.n	800bd20 <tcp_close_shutdown+0x48>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bd1e:	d055      	beq.n	800bdcc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	8b5b      	ldrh	r3, [r3, #26]
 800bd24:	f003 0310 	and.w	r3, r3, #16
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d106      	bne.n	800bd3a <tcp_close_shutdown+0x62>
 800bd2c:	4b52      	ldr	r3, [pc, #328]	; (800be78 <tcp_close_shutdown+0x1a0>)
 800bd2e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bd32:	4954      	ldr	r1, [pc, #336]	; (800be84 <tcp_close_shutdown+0x1ac>)
 800bd34:	4852      	ldr	r0, [pc, #328]	; (800be80 <tcp_close_shutdown+0x1a8>)
 800bd36:	f005 fbb5 	bl	80114a4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bd42:	687d      	ldr	r5, [r7, #4]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	3304      	adds	r3, #4
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	8ad2      	ldrh	r2, [r2, #22]
 800bd4c:	6879      	ldr	r1, [r7, #4]
 800bd4e:	8b09      	ldrh	r1, [r1, #24]
 800bd50:	9102      	str	r1, [sp, #8]
 800bd52:	9201      	str	r2, [sp, #4]
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	462b      	mov	r3, r5
 800bd58:	4622      	mov	r2, r4
 800bd5a:	4601      	mov	r1, r0
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f004 fe91 	bl	8010a84 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f001 f8c6 	bl	800cef4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bd68:	4b47      	ldr	r3, [pc, #284]	; (800be88 <tcp_close_shutdown+0x1b0>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d105      	bne.n	800bd7e <tcp_close_shutdown+0xa6>
 800bd72:	4b45      	ldr	r3, [pc, #276]	; (800be88 <tcp_close_shutdown+0x1b0>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	4a43      	ldr	r2, [pc, #268]	; (800be88 <tcp_close_shutdown+0x1b0>)
 800bd7a:	6013      	str	r3, [r2, #0]
 800bd7c:	e013      	b.n	800bda6 <tcp_close_shutdown+0xce>
 800bd7e:	4b42      	ldr	r3, [pc, #264]	; (800be88 <tcp_close_shutdown+0x1b0>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	e00c      	b.n	800bda0 <tcp_close_shutdown+0xc8>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d104      	bne.n	800bd9a <tcp_close_shutdown+0xc2>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68da      	ldr	r2, [r3, #12]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	60da      	str	r2, [r3, #12]
 800bd98:	e005      	b.n	800bda6 <tcp_close_shutdown+0xce>
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	60fb      	str	r3, [r7, #12]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1ef      	bne.n	800bd86 <tcp_close_shutdown+0xae>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	60da      	str	r2, [r3, #12]
 800bdac:	4b37      	ldr	r3, [pc, #220]	; (800be8c <tcp_close_shutdown+0x1b4>)
 800bdae:	2201      	movs	r2, #1
 800bdb0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bdb2:	4b37      	ldr	r3, [pc, #220]	; (800be90 <tcp_close_shutdown+0x1b8>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d102      	bne.n	800bdc2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bdbc:	f003 fd5e 	bl	800f87c <tcp_trigger_input_pcb_close>
 800bdc0:	e002      	b.n	800bdc8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7ff fed6 	bl	800bb74 <tcp_free>
      }
      return ERR_OK;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	e050      	b.n	800be6e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	7d1b      	ldrb	r3, [r3, #20]
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d03b      	beq.n	800be4c <tcp_close_shutdown+0x174>
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	dc44      	bgt.n	800be62 <tcp_close_shutdown+0x18a>
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <tcp_close_shutdown+0x10a>
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d02a      	beq.n	800be36 <tcp_close_shutdown+0x15e>
 800bde0:	e03f      	b.n	800be62 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	8adb      	ldrh	r3, [r3, #22]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d021      	beq.n	800be2e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bdea:	4b2a      	ldr	r3, [pc, #168]	; (800be94 <tcp_close_shutdown+0x1bc>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d105      	bne.n	800be00 <tcp_close_shutdown+0x128>
 800bdf4:	4b27      	ldr	r3, [pc, #156]	; (800be94 <tcp_close_shutdown+0x1bc>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	4a26      	ldr	r2, [pc, #152]	; (800be94 <tcp_close_shutdown+0x1bc>)
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	e013      	b.n	800be28 <tcp_close_shutdown+0x150>
 800be00:	4b24      	ldr	r3, [pc, #144]	; (800be94 <tcp_close_shutdown+0x1bc>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	60bb      	str	r3, [r7, #8]
 800be06:	e00c      	b.n	800be22 <tcp_close_shutdown+0x14a>
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d104      	bne.n	800be1c <tcp_close_shutdown+0x144>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	68da      	ldr	r2, [r3, #12]
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	60da      	str	r2, [r3, #12]
 800be1a:	e005      	b.n	800be28 <tcp_close_shutdown+0x150>
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	60bb      	str	r3, [r7, #8]
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1ef      	bne.n	800be08 <tcp_close_shutdown+0x130>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f7ff fea0 	bl	800bb74 <tcp_free>
      break;
 800be34:	e01a      	b.n	800be6c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f7ff ff14 	bl	800bc64 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800be3c:	6879      	ldr	r1, [r7, #4]
 800be3e:	4816      	ldr	r0, [pc, #88]	; (800be98 <tcp_close_shutdown+0x1c0>)
 800be40:	f001 f8a8 	bl	800cf94 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f7ff feb1 	bl	800bbac <tcp_free_listen>
      break;
 800be4a:	e00f      	b.n	800be6c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800be4c:	6879      	ldr	r1, [r7, #4]
 800be4e:	480e      	ldr	r0, [pc, #56]	; (800be88 <tcp_close_shutdown+0x1b0>)
 800be50:	f001 f8a0 	bl	800cf94 <tcp_pcb_remove>
 800be54:	4b0d      	ldr	r3, [pc, #52]	; (800be8c <tcp_close_shutdown+0x1b4>)
 800be56:	2201      	movs	r2, #1
 800be58:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7ff fe8a 	bl	800bb74 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800be60:	e004      	b.n	800be6c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 f81a 	bl	800be9c <tcp_close_shutdown_fin>
 800be68:	4603      	mov	r3, r0
 800be6a:	e000      	b.n	800be6e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bdb0      	pop	{r4, r5, r7, pc}
 800be76:	bf00      	nop
 800be78:	08013884 	.word	0x08013884
 800be7c:	08013984 	.word	0x08013984
 800be80:	080138f4 	.word	0x080138f4
 800be84:	080139a4 	.word	0x080139a4
 800be88:	2400812c 	.word	0x2400812c
 800be8c:	24008134 	.word	0x24008134
 800be90:	2400816c 	.word	0x2400816c
 800be94:	24008124 	.word	0x24008124
 800be98:	24008128 	.word	0x24008128

0800be9c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d106      	bne.n	800beb8 <tcp_close_shutdown_fin+0x1c>
 800beaa:	4b2e      	ldr	r3, [pc, #184]	; (800bf64 <tcp_close_shutdown_fin+0xc8>)
 800beac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800beb0:	492d      	ldr	r1, [pc, #180]	; (800bf68 <tcp_close_shutdown_fin+0xcc>)
 800beb2:	482e      	ldr	r0, [pc, #184]	; (800bf6c <tcp_close_shutdown_fin+0xd0>)
 800beb4:	f005 faf6 	bl	80114a4 <iprintf>

  switch (pcb->state) {
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	7d1b      	ldrb	r3, [r3, #20]
 800bebc:	2b07      	cmp	r3, #7
 800bebe:	d020      	beq.n	800bf02 <tcp_close_shutdown_fin+0x66>
 800bec0:	2b07      	cmp	r3, #7
 800bec2:	dc2b      	bgt.n	800bf1c <tcp_close_shutdown_fin+0x80>
 800bec4:	2b03      	cmp	r3, #3
 800bec6:	d002      	beq.n	800bece <tcp_close_shutdown_fin+0x32>
 800bec8:	2b04      	cmp	r3, #4
 800beca:	d00d      	beq.n	800bee8 <tcp_close_shutdown_fin+0x4c>
 800becc:	e026      	b.n	800bf1c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f003 fee6 	bl	800fca0 <tcp_send_fin>
 800bed4:	4603      	mov	r3, r0
 800bed6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d11f      	bne.n	800bf20 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2205      	movs	r2, #5
 800bee4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bee6:	e01b      	b.n	800bf20 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f003 fed9 	bl	800fca0 <tcp_send_fin>
 800beee:	4603      	mov	r3, r0
 800bef0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d114      	bne.n	800bf24 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2205      	movs	r2, #5
 800befe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bf00:	e010      	b.n	800bf24 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f003 fecc 	bl	800fca0 <tcp_send_fin>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bf0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d109      	bne.n	800bf28 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2209      	movs	r2, #9
 800bf18:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bf1a:	e005      	b.n	800bf28 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	e01c      	b.n	800bf5a <tcp_close_shutdown_fin+0xbe>
      break;
 800bf20:	bf00      	nop
 800bf22:	e002      	b.n	800bf2a <tcp_close_shutdown_fin+0x8e>
      break;
 800bf24:	bf00      	nop
 800bf26:	e000      	b.n	800bf2a <tcp_close_shutdown_fin+0x8e>
      break;
 800bf28:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bf2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d103      	bne.n	800bf3a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f003 fff2 	bl	800ff1c <tcp_output>
 800bf38:	e00d      	b.n	800bf56 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bf3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf42:	d108      	bne.n	800bf56 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	8b5b      	ldrh	r3, [r3, #26]
 800bf48:	f043 0308 	orr.w	r3, r3, #8
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	e001      	b.n	800bf5a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bf56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	08013884 	.word	0x08013884
 800bf68:	08013960 	.word	0x08013960
 800bf6c:	080138f4 	.word	0x080138f4

0800bf70 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d109      	bne.n	800bf92 <tcp_close+0x22>
 800bf7e:	4b0f      	ldr	r3, [pc, #60]	; (800bfbc <tcp_close+0x4c>)
 800bf80:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bf84:	490e      	ldr	r1, [pc, #56]	; (800bfc0 <tcp_close+0x50>)
 800bf86:	480f      	ldr	r0, [pc, #60]	; (800bfc4 <tcp_close+0x54>)
 800bf88:	f005 fa8c 	bl	80114a4 <iprintf>
 800bf8c:	f06f 030f 	mvn.w	r3, #15
 800bf90:	e00f      	b.n	800bfb2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	7d1b      	ldrb	r3, [r3, #20]
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d006      	beq.n	800bfa8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	8b5b      	ldrh	r3, [r3, #26]
 800bf9e:	f043 0310 	orr.w	r3, r3, #16
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7ff fe94 	bl	800bcd8 <tcp_close_shutdown>
 800bfb0:	4603      	mov	r3, r0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	08013884 	.word	0x08013884
 800bfc0:	080139c0 	.word	0x080139c0
 800bfc4:	080138f4 	.word	0x080138f4

0800bfc8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b08e      	sub	sp, #56	; 0x38
 800bfcc:	af04      	add	r7, sp, #16
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d107      	bne.n	800bfe8 <tcp_abandon+0x20>
 800bfd8:	4b52      	ldr	r3, [pc, #328]	; (800c124 <tcp_abandon+0x15c>)
 800bfda:	f240 223d 	movw	r2, #573	; 0x23d
 800bfde:	4952      	ldr	r1, [pc, #328]	; (800c128 <tcp_abandon+0x160>)
 800bfe0:	4852      	ldr	r0, [pc, #328]	; (800c12c <tcp_abandon+0x164>)
 800bfe2:	f005 fa5f 	bl	80114a4 <iprintf>
 800bfe6:	e099      	b.n	800c11c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	7d1b      	ldrb	r3, [r3, #20]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d106      	bne.n	800bffe <tcp_abandon+0x36>
 800bff0:	4b4c      	ldr	r3, [pc, #304]	; (800c124 <tcp_abandon+0x15c>)
 800bff2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bff6:	494e      	ldr	r1, [pc, #312]	; (800c130 <tcp_abandon+0x168>)
 800bff8:	484c      	ldr	r0, [pc, #304]	; (800c12c <tcp_abandon+0x164>)
 800bffa:	f005 fa53 	bl	80114a4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	7d1b      	ldrb	r3, [r3, #20]
 800c002:	2b0a      	cmp	r3, #10
 800c004:	d107      	bne.n	800c016 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c006:	6879      	ldr	r1, [r7, #4]
 800c008:	484a      	ldr	r0, [pc, #296]	; (800c134 <tcp_abandon+0x16c>)
 800c00a:	f000 ffc3 	bl	800cf94 <tcp_pcb_remove>
    tcp_free(pcb);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff fdb0 	bl	800bb74 <tcp_free>
 800c014:	e082      	b.n	800c11c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c022:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c028:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c030:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	7d1b      	ldrb	r3, [r3, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d126      	bne.n	800c08e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	8adb      	ldrh	r3, [r3, #22]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d02e      	beq.n	800c0a6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c048:	4b3b      	ldr	r3, [pc, #236]	; (800c138 <tcp_abandon+0x170>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d105      	bne.n	800c05e <tcp_abandon+0x96>
 800c052:	4b39      	ldr	r3, [pc, #228]	; (800c138 <tcp_abandon+0x170>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	4a37      	ldr	r2, [pc, #220]	; (800c138 <tcp_abandon+0x170>)
 800c05a:	6013      	str	r3, [r2, #0]
 800c05c:	e013      	b.n	800c086 <tcp_abandon+0xbe>
 800c05e:	4b36      	ldr	r3, [pc, #216]	; (800c138 <tcp_abandon+0x170>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	61fb      	str	r3, [r7, #28]
 800c064:	e00c      	b.n	800c080 <tcp_abandon+0xb8>
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d104      	bne.n	800c07a <tcp_abandon+0xb2>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	68da      	ldr	r2, [r3, #12]
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	60da      	str	r2, [r3, #12]
 800c078:	e005      	b.n	800c086 <tcp_abandon+0xbe>
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	61fb      	str	r3, [r7, #28]
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1ef      	bne.n	800c066 <tcp_abandon+0x9e>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	60da      	str	r2, [r3, #12]
 800c08c:	e00b      	b.n	800c0a6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	8adb      	ldrh	r3, [r3, #22]
 800c096:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	4828      	ldr	r0, [pc, #160]	; (800c13c <tcp_abandon+0x174>)
 800c09c:	f000 ff7a 	bl	800cf94 <tcp_pcb_remove>
 800c0a0:	4b27      	ldr	r3, [pc, #156]	; (800c140 <tcp_abandon+0x178>)
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d004      	beq.n	800c0b8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 fd1c 	bl	800caf0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d004      	beq.n	800c0ca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 fd13 	bl	800caf0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d004      	beq.n	800c0dc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 fd0a 	bl	800caf0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00e      	beq.n	800c100 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c0e2:	6879      	ldr	r1, [r7, #4]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	8b12      	ldrh	r2, [r2, #24]
 800c0ec:	9202      	str	r2, [sp, #8]
 800c0ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c0f0:	9201      	str	r2, [sp, #4]
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	69b9      	ldr	r1, [r7, #24]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f004 fcc2 	bl	8010a84 <tcp_rst>
    }
    last_state = pcb->state;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	7d1b      	ldrb	r3, [r3, #20]
 800c104:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7ff fd34 	bl	800bb74 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d004      	beq.n	800c11c <tcp_abandon+0x154>
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	f06f 010c 	mvn.w	r1, #12
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	4798      	blx	r3
  }
}
 800c11c:	3728      	adds	r7, #40	; 0x28
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	08013884 	.word	0x08013884
 800c128:	080139f4 	.word	0x080139f4
 800c12c:	080138f4 	.word	0x080138f4
 800c130:	08013a10 	.word	0x08013a10
 800c134:	24008130 	.word	0x24008130
 800c138:	24008124 	.word	0x24008124
 800c13c:	2400812c 	.word	0x2400812c
 800c140:	24008134 	.word	0x24008134

0800c144 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c14c:	2101      	movs	r1, #1
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff ff3a 	bl	800bfc8 <tcp_abandon>
}
 800c154:	bf00      	nop
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d106      	bne.n	800c178 <tcp_update_rcv_ann_wnd+0x1c>
 800c16a:	4b25      	ldr	r3, [pc, #148]	; (800c200 <tcp_update_rcv_ann_wnd+0xa4>)
 800c16c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c170:	4924      	ldr	r1, [pc, #144]	; (800c204 <tcp_update_rcv_ann_wnd+0xa8>)
 800c172:	4825      	ldr	r0, [pc, #148]	; (800c208 <tcp_update_rcv_ann_wnd+0xac>)
 800c174:	f005 f996 	bl	80114a4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c180:	4413      	add	r3, r2
 800c182:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c18c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c190:	bf28      	it	cs
 800c192:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c196:	b292      	uxth	r2, r2
 800c198:	4413      	add	r3, r2
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	db08      	blt.n	800c1b4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	e020      	b.n	800c1f6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	dd03      	ble.n	800c1ca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c1c8:	e014      	b.n	800c1f4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1dc:	d306      	bcc.n	800c1ec <tcp_update_rcv_ann_wnd+0x90>
 800c1de:	4b08      	ldr	r3, [pc, #32]	; (800c200 <tcp_update_rcv_ann_wnd+0xa4>)
 800c1e0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c1e4:	4909      	ldr	r1, [pc, #36]	; (800c20c <tcp_update_rcv_ann_wnd+0xb0>)
 800c1e6:	4808      	ldr	r0, [pc, #32]	; (800c208 <tcp_update_rcv_ann_wnd+0xac>)
 800c1e8:	f005 f95c 	bl	80114a4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c1f4:	2300      	movs	r3, #0
  }
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3710      	adds	r7, #16
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	08013884 	.word	0x08013884
 800c204:	08013b0c 	.word	0x08013b0c
 800c208:	080138f4 	.word	0x080138f4
 800c20c:	08013b30 	.word	0x08013b30

0800c210 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	460b      	mov	r3, r1
 800c21a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d107      	bne.n	800c232 <tcp_recved+0x22>
 800c222:	4b1f      	ldr	r3, [pc, #124]	; (800c2a0 <tcp_recved+0x90>)
 800c224:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c228:	491e      	ldr	r1, [pc, #120]	; (800c2a4 <tcp_recved+0x94>)
 800c22a:	481f      	ldr	r0, [pc, #124]	; (800c2a8 <tcp_recved+0x98>)
 800c22c:	f005 f93a 	bl	80114a4 <iprintf>
 800c230:	e032      	b.n	800c298 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	7d1b      	ldrb	r3, [r3, #20]
 800c236:	2b01      	cmp	r3, #1
 800c238:	d106      	bne.n	800c248 <tcp_recved+0x38>
 800c23a:	4b19      	ldr	r3, [pc, #100]	; (800c2a0 <tcp_recved+0x90>)
 800c23c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c240:	491a      	ldr	r1, [pc, #104]	; (800c2ac <tcp_recved+0x9c>)
 800c242:	4819      	ldr	r0, [pc, #100]	; (800c2a8 <tcp_recved+0x98>)
 800c244:	f005 f92e 	bl	80114a4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c24c:	887b      	ldrh	r3, [r7, #2]
 800c24e:	4413      	add	r3, r2
 800c250:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c252:	89fb      	ldrh	r3, [r7, #14]
 800c254:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c258:	d804      	bhi.n	800c264 <tcp_recved+0x54>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c25e:	89fa      	ldrh	r2, [r7, #14]
 800c260:	429a      	cmp	r2, r3
 800c262:	d204      	bcs.n	800c26e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c26a:	851a      	strh	r2, [r3, #40]	; 0x28
 800c26c:	e002      	b.n	800c274 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	89fa      	ldrh	r2, [r7, #14]
 800c272:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff ff71 	bl	800c15c <tcp_update_rcv_ann_wnd>
 800c27a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c282:	d309      	bcc.n	800c298 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	8b5b      	ldrh	r3, [r3, #26]
 800c288:	f043 0302 	orr.w	r3, r3, #2
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f003 fe42 	bl	800ff1c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	08013884 	.word	0x08013884
 800c2a4:	08013b4c 	.word	0x08013b4c
 800c2a8:	080138f4 	.word	0x080138f4
 800c2ac:	08013b64 	.word	0x08013b64

0800c2b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c2b0:	b5b0      	push	{r4, r5, r7, lr}
 800c2b2:	b090      	sub	sp, #64	; 0x40
 800c2b4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c2bc:	4b94      	ldr	r3, [pc, #592]	; (800c510 <tcp_slowtmr+0x260>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	4a93      	ldr	r2, [pc, #588]	; (800c510 <tcp_slowtmr+0x260>)
 800c2c4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c2c6:	4b93      	ldr	r3, [pc, #588]	; (800c514 <tcp_slowtmr+0x264>)
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	4b91      	ldr	r3, [pc, #580]	; (800c514 <tcp_slowtmr+0x264>)
 800c2d0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c2d6:	4b90      	ldr	r3, [pc, #576]	; (800c518 <tcp_slowtmr+0x268>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c2dc:	e29d      	b.n	800c81a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e0:	7d1b      	ldrb	r3, [r3, #20]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d106      	bne.n	800c2f4 <tcp_slowtmr+0x44>
 800c2e6:	4b8d      	ldr	r3, [pc, #564]	; (800c51c <tcp_slowtmr+0x26c>)
 800c2e8:	f240 42be 	movw	r2, #1214	; 0x4be
 800c2ec:	498c      	ldr	r1, [pc, #560]	; (800c520 <tcp_slowtmr+0x270>)
 800c2ee:	488d      	ldr	r0, [pc, #564]	; (800c524 <tcp_slowtmr+0x274>)
 800c2f0:	f005 f8d8 	bl	80114a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f6:	7d1b      	ldrb	r3, [r3, #20]
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d106      	bne.n	800c30a <tcp_slowtmr+0x5a>
 800c2fc:	4b87      	ldr	r3, [pc, #540]	; (800c51c <tcp_slowtmr+0x26c>)
 800c2fe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c302:	4989      	ldr	r1, [pc, #548]	; (800c528 <tcp_slowtmr+0x278>)
 800c304:	4887      	ldr	r0, [pc, #540]	; (800c524 <tcp_slowtmr+0x274>)
 800c306:	f005 f8cd 	bl	80114a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30c:	7d1b      	ldrb	r3, [r3, #20]
 800c30e:	2b0a      	cmp	r3, #10
 800c310:	d106      	bne.n	800c320 <tcp_slowtmr+0x70>
 800c312:	4b82      	ldr	r3, [pc, #520]	; (800c51c <tcp_slowtmr+0x26c>)
 800c314:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c318:	4984      	ldr	r1, [pc, #528]	; (800c52c <tcp_slowtmr+0x27c>)
 800c31a:	4882      	ldr	r0, [pc, #520]	; (800c524 <tcp_slowtmr+0x274>)
 800c31c:	f005 f8c2 	bl	80114a4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c322:	7f9a      	ldrb	r2, [r3, #30]
 800c324:	4b7b      	ldr	r3, [pc, #492]	; (800c514 <tcp_slowtmr+0x264>)
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d105      	bne.n	800c338 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c336:	e270      	b.n	800c81a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c338:	4b76      	ldr	r3, [pc, #472]	; (800c514 <tcp_slowtmr+0x264>)
 800c33a:	781a      	ldrb	r2, [r3, #0]
 800c33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c340:	2300      	movs	r3, #0
 800c342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34e:	7d1b      	ldrb	r3, [r3, #20]
 800c350:	2b02      	cmp	r3, #2
 800c352:	d10a      	bne.n	800c36a <tcp_slowtmr+0xba>
 800c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c35a:	2b05      	cmp	r3, #5
 800c35c:	d905      	bls.n	800c36a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c35e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c362:	3301      	adds	r3, #1
 800c364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c368:	e11e      	b.n	800c5a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c370:	2b0b      	cmp	r3, #11
 800c372:	d905      	bls.n	800c380 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c378:	3301      	adds	r3, #1
 800c37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c37e:	e113      	b.n	800c5a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c382:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c386:	2b00      	cmp	r3, #0
 800c388:	d075      	beq.n	800c476 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d006      	beq.n	800c3a0 <tcp_slowtmr+0xf0>
 800c392:	4b62      	ldr	r3, [pc, #392]	; (800c51c <tcp_slowtmr+0x26c>)
 800c394:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c398:	4965      	ldr	r1, [pc, #404]	; (800c530 <tcp_slowtmr+0x280>)
 800c39a:	4862      	ldr	r0, [pc, #392]	; (800c524 <tcp_slowtmr+0x274>)
 800c39c:	f005 f882 	bl	80114a4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d106      	bne.n	800c3b6 <tcp_slowtmr+0x106>
 800c3a8:	4b5c      	ldr	r3, [pc, #368]	; (800c51c <tcp_slowtmr+0x26c>)
 800c3aa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c3ae:	4961      	ldr	r1, [pc, #388]	; (800c534 <tcp_slowtmr+0x284>)
 800c3b0:	485c      	ldr	r0, [pc, #368]	; (800c524 <tcp_slowtmr+0x274>)
 800c3b2:	f005 f877 	bl	80114a4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c3bc:	2b0b      	cmp	r3, #11
 800c3be:	d905      	bls.n	800c3cc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3ca:	e0ed      	b.n	800c5a8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	4a58      	ldr	r2, [pc, #352]	; (800c538 <tcp_slowtmr+0x288>)
 800c3d6:	5cd3      	ldrb	r3, [r2, r3]
 800c3d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c3e0:	7c7a      	ldrb	r2, [r7, #17]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d907      	bls.n	800c3f6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c3fc:	7c7a      	ldrb	r2, [r7, #17]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	f200 80d2 	bhi.w	800c5a8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c404:	2301      	movs	r3, #1
 800c406:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d108      	bne.n	800c424 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c414:	f004 fc2a 	bl	8010c6c <tcp_zero_window_probe>
 800c418:	4603      	mov	r3, r0
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d014      	beq.n	800c448 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c41e:	2300      	movs	r3, #0
 800c420:	623b      	str	r3, [r7, #32]
 800c422:	e011      	b.n	800c448 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c42a:	4619      	mov	r1, r3
 800c42c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c42e:	f003 faef 	bl	800fa10 <tcp_split_unsent_seg>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d107      	bne.n	800c448 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c43a:	f003 fd6f 	bl	800ff1c <tcp_output>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c448:	6a3b      	ldr	r3, [r7, #32]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f000 80ac 	beq.w	800c5a8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	2200      	movs	r2, #0
 800c454:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c45e:	2b06      	cmp	r3, #6
 800c460:	f200 80a2 	bhi.w	800c5a8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c466:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c46a:	3301      	adds	r3, #1
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c470:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c474:	e098      	b.n	800c5a8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	db0f      	blt.n	800c4a0 <tcp_slowtmr+0x1f0>
 800c480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c482:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c486:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d008      	beq.n	800c4a0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c490:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c494:	b29b      	uxth	r3, r3
 800c496:	3301      	adds	r3, #1
 800c498:	b29b      	uxth	r3, r3
 800c49a:	b21a      	sxth	r2, r3
 800c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	db7b      	blt.n	800c5a8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c4b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4b2:	f004 f825 	bl	8010500 <tcp_rexmit_rto_prepare>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d007      	beq.n	800c4cc <tcp_slowtmr+0x21c>
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d171      	bne.n	800c5a8 <tcp_slowtmr+0x2f8>
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d06d      	beq.n	800c5a8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ce:	7d1b      	ldrb	r3, [r3, #20]
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d03a      	beq.n	800c54a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4da:	2b0c      	cmp	r3, #12
 800c4dc:	bf28      	it	cs
 800c4de:	230c      	movcs	r3, #12
 800c4e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c4e8:	10db      	asrs	r3, r3, #3
 800c4ea:	b21b      	sxth	r3, r3
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c4f4:	4413      	add	r3, r2
 800c4f6:	7efa      	ldrb	r2, [r7, #27]
 800c4f8:	4910      	ldr	r1, [pc, #64]	; (800c53c <tcp_slowtmr+0x28c>)
 800c4fa:	5c8a      	ldrb	r2, [r1, r2]
 800c4fc:	4093      	lsls	r3, r2
 800c4fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c506:	4293      	cmp	r3, r2
 800c508:	dc1a      	bgt.n	800c540 <tcp_slowtmr+0x290>
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	b21a      	sxth	r2, r3
 800c50e:	e019      	b.n	800c544 <tcp_slowtmr+0x294>
 800c510:	24008120 	.word	0x24008120
 800c514:	24008136 	.word	0x24008136
 800c518:	2400812c 	.word	0x2400812c
 800c51c:	08013884 	.word	0x08013884
 800c520:	08013bf4 	.word	0x08013bf4
 800c524:	080138f4 	.word	0x080138f4
 800c528:	08013c20 	.word	0x08013c20
 800c52c:	08013c4c 	.word	0x08013c4c
 800c530:	08013c7c 	.word	0x08013c7c
 800c534:	08013cb0 	.word	0x08013cb0
 800c538:	080152ac 	.word	0x080152ac
 800c53c:	0801529c 	.word	0x0801529c
 800c540:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c546:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54c:	2200      	movs	r2, #0
 800c54e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c552:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c558:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c55c:	4293      	cmp	r3, r2
 800c55e:	bf28      	it	cs
 800c560:	4613      	movcs	r3, r2
 800c562:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c564:	8a7b      	ldrh	r3, [r7, #18]
 800c566:	085b      	lsrs	r3, r3, #1
 800c568:	b29a      	uxth	r2, r3
 800c56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c572:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	429a      	cmp	r2, r3
 800c580:	d206      	bcs.n	800c590 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	b29a      	uxth	r2, r3
 800c58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c592:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c596:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59c:	2200      	movs	r2, #0
 800c59e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c5a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5a4:	f004 f81c 	bl	80105e0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5aa:	7d1b      	ldrb	r3, [r3, #20]
 800c5ac:	2b06      	cmp	r3, #6
 800c5ae:	d111      	bne.n	800c5d4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b2:	8b5b      	ldrh	r3, [r3, #26]
 800c5b4:	f003 0310 	and.w	r3, r3, #16
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00b      	beq.n	800c5d4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5bc:	4b9c      	ldr	r3, [pc, #624]	; (800c830 <tcp_slowtmr+0x580>)
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c2:	6a1b      	ldr	r3, [r3, #32]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	2b28      	cmp	r3, #40	; 0x28
 800c5c8:	d904      	bls.n	800c5d4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c5ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d6:	7a5b      	ldrb	r3, [r3, #9]
 800c5d8:	f003 0308 	and.w	r3, r3, #8
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d04a      	beq.n	800c676 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c5e4:	2b04      	cmp	r3, #4
 800c5e6:	d003      	beq.n	800c5f0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c5ec:	2b07      	cmp	r3, #7
 800c5ee:	d142      	bne.n	800c676 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5f0:	4b8f      	ldr	r3, [pc, #572]	; (800c830 <tcp_slowtmr+0x580>)
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f6:	6a1b      	ldr	r3, [r3, #32]
 800c5f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c600:	4b8c      	ldr	r3, [pc, #560]	; (800c834 <tcp_slowtmr+0x584>)
 800c602:	440b      	add	r3, r1
 800c604:	498c      	ldr	r1, [pc, #560]	; (800c838 <tcp_slowtmr+0x588>)
 800c606:	fba1 1303 	umull	r1, r3, r1, r3
 800c60a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d90a      	bls.n	800c626 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c614:	3301      	adds	r3, #1
 800c616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c61a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c61e:	3301      	adds	r3, #1
 800c620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c624:	e027      	b.n	800c676 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c626:	4b82      	ldr	r3, [pc, #520]	; (800c830 <tcp_slowtmr+0x580>)
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	6a1b      	ldr	r3, [r3, #32]
 800c62e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c632:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c638:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c63c:	4618      	mov	r0, r3
 800c63e:	4b7f      	ldr	r3, [pc, #508]	; (800c83c <tcp_slowtmr+0x58c>)
 800c640:	fb00 f303 	mul.w	r3, r0, r3
 800c644:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c646:	497c      	ldr	r1, [pc, #496]	; (800c838 <tcp_slowtmr+0x588>)
 800c648:	fba1 1303 	umull	r1, r3, r1, r3
 800c64c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c64e:	429a      	cmp	r2, r3
 800c650:	d911      	bls.n	800c676 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c654:	f004 faca 	bl	8010bec <tcp_keepalive>
 800c658:	4603      	mov	r3, r0
 800c65a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c65e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c662:	2b00      	cmp	r3, #0
 800c664:	d107      	bne.n	800c676 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c668:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c66c:	3301      	adds	r3, #1
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c672:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d011      	beq.n	800c6a2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c67e:	4b6c      	ldr	r3, [pc, #432]	; (800c830 <tcp_slowtmr+0x580>)
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	1ad2      	subs	r2, r2, r3
 800c688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c68e:	4619      	mov	r1, r3
 800c690:	460b      	mov	r3, r1
 800c692:	005b      	lsls	r3, r3, #1
 800c694:	440b      	add	r3, r1
 800c696:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c698:	429a      	cmp	r2, r3
 800c69a:	d302      	bcc.n	800c6a2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c69c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c69e:	f000 fddd 	bl	800d25c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a4:	7d1b      	ldrb	r3, [r3, #20]
 800c6a6:	2b03      	cmp	r3, #3
 800c6a8:	d10b      	bne.n	800c6c2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c6aa:	4b61      	ldr	r3, [pc, #388]	; (800c830 <tcp_slowtmr+0x580>)
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b0:	6a1b      	ldr	r3, [r3, #32]
 800c6b2:	1ad3      	subs	r3, r2, r3
 800c6b4:	2b28      	cmp	r3, #40	; 0x28
 800c6b6:	d904      	bls.n	800c6c2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6bc:	3301      	adds	r3, #1
 800c6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c4:	7d1b      	ldrb	r3, [r3, #20]
 800c6c6:	2b09      	cmp	r3, #9
 800c6c8:	d10b      	bne.n	800c6e2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c6ca:	4b59      	ldr	r3, [pc, #356]	; (800c830 <tcp_slowtmr+0x580>)
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d0:	6a1b      	ldr	r3, [r3, #32]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	2bf0      	cmp	r3, #240	; 0xf0
 800c6d6:	d904      	bls.n	800c6e2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6dc:	3301      	adds	r3, #1
 800c6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c6e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d060      	beq.n	800c7ac <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6f0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c6f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6f4:	f000 fbfe 	bl	800cef4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d010      	beq.n	800c720 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c6fe:	4b50      	ldr	r3, [pc, #320]	; (800c840 <tcp_slowtmr+0x590>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c704:	429a      	cmp	r2, r3
 800c706:	d106      	bne.n	800c716 <tcp_slowtmr+0x466>
 800c708:	4b4e      	ldr	r3, [pc, #312]	; (800c844 <tcp_slowtmr+0x594>)
 800c70a:	f240 526d 	movw	r2, #1389	; 0x56d
 800c70e:	494e      	ldr	r1, [pc, #312]	; (800c848 <tcp_slowtmr+0x598>)
 800c710:	484e      	ldr	r0, [pc, #312]	; (800c84c <tcp_slowtmr+0x59c>)
 800c712:	f004 fec7 	bl	80114a4 <iprintf>
        prev->next = pcb->next;
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	68da      	ldr	r2, [r3, #12]
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	60da      	str	r2, [r3, #12]
 800c71e:	e00f      	b.n	800c740 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c720:	4b47      	ldr	r3, [pc, #284]	; (800c840 <tcp_slowtmr+0x590>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c726:	429a      	cmp	r2, r3
 800c728:	d006      	beq.n	800c738 <tcp_slowtmr+0x488>
 800c72a:	4b46      	ldr	r3, [pc, #280]	; (800c844 <tcp_slowtmr+0x594>)
 800c72c:	f240 5271 	movw	r2, #1393	; 0x571
 800c730:	4947      	ldr	r1, [pc, #284]	; (800c850 <tcp_slowtmr+0x5a0>)
 800c732:	4846      	ldr	r0, [pc, #280]	; (800c84c <tcp_slowtmr+0x59c>)
 800c734:	f004 feb6 	bl	80114a4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	4a40      	ldr	r2, [pc, #256]	; (800c840 <tcp_slowtmr+0x590>)
 800c73e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c744:	2b00      	cmp	r3, #0
 800c746:	d013      	beq.n	800c770 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c750:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c754:	3304      	adds	r3, #4
 800c756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c758:	8ad2      	ldrh	r2, [r2, #22]
 800c75a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c75c:	8b09      	ldrh	r1, [r1, #24]
 800c75e:	9102      	str	r1, [sp, #8]
 800c760:	9201      	str	r2, [sp, #4]
 800c762:	9300      	str	r3, [sp, #0]
 800c764:	462b      	mov	r3, r5
 800c766:	4622      	mov	r2, r4
 800c768:	4601      	mov	r1, r0
 800c76a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c76c:	f004 f98a 	bl	8010a84 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c778:	7d1b      	ldrb	r3, [r3, #20]
 800c77a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c786:	6838      	ldr	r0, [r7, #0]
 800c788:	f7ff f9f4 	bl	800bb74 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c78c:	4b31      	ldr	r3, [pc, #196]	; (800c854 <tcp_slowtmr+0x5a4>)
 800c78e:	2200      	movs	r2, #0
 800c790:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d004      	beq.n	800c7a2 <tcp_slowtmr+0x4f2>
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f06f 010c 	mvn.w	r1, #12
 800c79e:	68b8      	ldr	r0, [r7, #8]
 800c7a0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c7a2:	4b2c      	ldr	r3, [pc, #176]	; (800c854 <tcp_slowtmr+0x5a4>)
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d037      	beq.n	800c81a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c7aa:	e592      	b.n	800c2d2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b8:	7f1b      	ldrb	r3, [r3, #28]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	7f1a      	ldrb	r2, [r3, #28]
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	7f5b      	ldrb	r3, [r3, #29]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d325      	bcc.n	800c81a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c7d4:	4b1f      	ldr	r3, [pc, #124]	; (800c854 <tcp_slowtmr+0x5a4>)
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00b      	beq.n	800c7fc <tcp_slowtmr+0x54c>
 800c7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ec:	6912      	ldr	r2, [r2, #16]
 800c7ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7f0:	4610      	mov	r0, r2
 800c7f2:	4798      	blx	r3
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c7fa:	e002      	b.n	800c802 <tcp_slowtmr+0x552>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c802:	4b14      	ldr	r3, [pc, #80]	; (800c854 <tcp_slowtmr+0x5a4>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d000      	beq.n	800c80c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c80a:	e562      	b.n	800c2d2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c80c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c810:	2b00      	cmp	r3, #0
 800c812:	d102      	bne.n	800c81a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c816:	f003 fb81 	bl	800ff1c <tcp_output>
  while (pcb != NULL) {
 800c81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f47f ad5e 	bne.w	800c2de <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c822:	2300      	movs	r3, #0
 800c824:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c826:	4b0c      	ldr	r3, [pc, #48]	; (800c858 <tcp_slowtmr+0x5a8>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c82c:	e069      	b.n	800c902 <tcp_slowtmr+0x652>
 800c82e:	bf00      	nop
 800c830:	24008120 	.word	0x24008120
 800c834:	000a4cb8 	.word	0x000a4cb8
 800c838:	10624dd3 	.word	0x10624dd3
 800c83c:	000124f8 	.word	0x000124f8
 800c840:	2400812c 	.word	0x2400812c
 800c844:	08013884 	.word	0x08013884
 800c848:	08013ce8 	.word	0x08013ce8
 800c84c:	080138f4 	.word	0x080138f4
 800c850:	08013d14 	.word	0x08013d14
 800c854:	24008134 	.word	0x24008134
 800c858:	24008130 	.word	0x24008130
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	7d1b      	ldrb	r3, [r3, #20]
 800c860:	2b0a      	cmp	r3, #10
 800c862:	d006      	beq.n	800c872 <tcp_slowtmr+0x5c2>
 800c864:	4b2b      	ldr	r3, [pc, #172]	; (800c914 <tcp_slowtmr+0x664>)
 800c866:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c86a:	492b      	ldr	r1, [pc, #172]	; (800c918 <tcp_slowtmr+0x668>)
 800c86c:	482b      	ldr	r0, [pc, #172]	; (800c91c <tcp_slowtmr+0x66c>)
 800c86e:	f004 fe19 	bl	80114a4 <iprintf>
    pcb_remove = 0;
 800c872:	2300      	movs	r3, #0
 800c874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c878:	4b29      	ldr	r3, [pc, #164]	; (800c920 <tcp_slowtmr+0x670>)
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	6a1b      	ldr	r3, [r3, #32]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	2bf0      	cmp	r3, #240	; 0xf0
 800c884:	d904      	bls.n	800c890 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c88a:	3301      	adds	r3, #1
 800c88c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c894:	2b00      	cmp	r3, #0
 800c896:	d02f      	beq.n	800c8f8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c89a:	f000 fb2b 	bl	800cef4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d010      	beq.n	800c8c6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c8a4:	4b1f      	ldr	r3, [pc, #124]	; (800c924 <tcp_slowtmr+0x674>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d106      	bne.n	800c8bc <tcp_slowtmr+0x60c>
 800c8ae:	4b19      	ldr	r3, [pc, #100]	; (800c914 <tcp_slowtmr+0x664>)
 800c8b0:	f240 52af 	movw	r2, #1455	; 0x5af
 800c8b4:	491c      	ldr	r1, [pc, #112]	; (800c928 <tcp_slowtmr+0x678>)
 800c8b6:	4819      	ldr	r0, [pc, #100]	; (800c91c <tcp_slowtmr+0x66c>)
 800c8b8:	f004 fdf4 	bl	80114a4 <iprintf>
        prev->next = pcb->next;
 800c8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8be:	68da      	ldr	r2, [r3, #12]
 800c8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c2:	60da      	str	r2, [r3, #12]
 800c8c4:	e00f      	b.n	800c8e6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c8c6:	4b17      	ldr	r3, [pc, #92]	; (800c924 <tcp_slowtmr+0x674>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d006      	beq.n	800c8de <tcp_slowtmr+0x62e>
 800c8d0:	4b10      	ldr	r3, [pc, #64]	; (800c914 <tcp_slowtmr+0x664>)
 800c8d2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c8d6:	4915      	ldr	r1, [pc, #84]	; (800c92c <tcp_slowtmr+0x67c>)
 800c8d8:	4810      	ldr	r0, [pc, #64]	; (800c91c <tcp_slowtmr+0x66c>)
 800c8da:	f004 fde3 	bl	80114a4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	4a10      	ldr	r2, [pc, #64]	; (800c924 <tcp_slowtmr+0x674>)
 800c8e4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c8f0:	69f8      	ldr	r0, [r7, #28]
 800c8f2:	f7ff f93f 	bl	800bb74 <tcp_free>
 800c8f6:	e004      	b.n	800c902 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1a9      	bne.n	800c85c <tcp_slowtmr+0x5ac>
    }
  }
}
 800c908:	bf00      	nop
 800c90a:	bf00      	nop
 800c90c:	3730      	adds	r7, #48	; 0x30
 800c90e:	46bd      	mov	sp, r7
 800c910:	bdb0      	pop	{r4, r5, r7, pc}
 800c912:	bf00      	nop
 800c914:	08013884 	.word	0x08013884
 800c918:	08013d40 	.word	0x08013d40
 800c91c:	080138f4 	.word	0x080138f4
 800c920:	24008120 	.word	0x24008120
 800c924:	24008130 	.word	0x24008130
 800c928:	08013d70 	.word	0x08013d70
 800c92c:	08013d98 	.word	0x08013d98

0800c930 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c936:	4b2d      	ldr	r3, [pc, #180]	; (800c9ec <tcp_fasttmr+0xbc>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	3301      	adds	r3, #1
 800c93c:	b2da      	uxtb	r2, r3
 800c93e:	4b2b      	ldr	r3, [pc, #172]	; (800c9ec <tcp_fasttmr+0xbc>)
 800c940:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c942:	4b2b      	ldr	r3, [pc, #172]	; (800c9f0 <tcp_fasttmr+0xc0>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c948:	e048      	b.n	800c9dc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	7f9a      	ldrb	r2, [r3, #30]
 800c94e:	4b27      	ldr	r3, [pc, #156]	; (800c9ec <tcp_fasttmr+0xbc>)
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	429a      	cmp	r2, r3
 800c954:	d03f      	beq.n	800c9d6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c956:	4b25      	ldr	r3, [pc, #148]	; (800c9ec <tcp_fasttmr+0xbc>)
 800c958:	781a      	ldrb	r2, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	8b5b      	ldrh	r3, [r3, #26]
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	2b00      	cmp	r3, #0
 800c968:	d010      	beq.n	800c98c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	8b5b      	ldrh	r3, [r3, #26]
 800c96e:	f043 0302 	orr.w	r3, r3, #2
 800c972:	b29a      	uxth	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f003 facf 	bl	800ff1c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	8b5b      	ldrh	r3, [r3, #26]
 800c982:	f023 0303 	bic.w	r3, r3, #3
 800c986:	b29a      	uxth	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	8b5b      	ldrh	r3, [r3, #26]
 800c990:	f003 0308 	and.w	r3, r3, #8
 800c994:	2b00      	cmp	r3, #0
 800c996:	d009      	beq.n	800c9ac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	8b5b      	ldrh	r3, [r3, #26]
 800c99c:	f023 0308 	bic.w	r3, r3, #8
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7ff fa78 	bl	800be9c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00a      	beq.n	800c9d0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c9ba:	4b0e      	ldr	r3, [pc, #56]	; (800c9f4 <tcp_fasttmr+0xc4>)
 800c9bc:	2200      	movs	r2, #0
 800c9be:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f819 	bl	800c9f8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c9c6:	4b0b      	ldr	r3, [pc, #44]	; (800c9f4 <tcp_fasttmr+0xc4>)
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d000      	beq.n	800c9d0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c9ce:	e7b8      	b.n	800c942 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	607b      	str	r3, [r7, #4]
 800c9d4:	e002      	b.n	800c9dc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1b3      	bne.n	800c94a <tcp_fasttmr+0x1a>
    }
  }
}
 800c9e2:	bf00      	nop
 800c9e4:	bf00      	nop
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	24008136 	.word	0x24008136
 800c9f0:	2400812c 	.word	0x2400812c
 800c9f4:	24008134 	.word	0x24008134

0800c9f8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c9f8:	b590      	push	{r4, r7, lr}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d109      	bne.n	800ca1a <tcp_process_refused_data+0x22>
 800ca06:	4b37      	ldr	r3, [pc, #220]	; (800cae4 <tcp_process_refused_data+0xec>)
 800ca08:	f240 6209 	movw	r2, #1545	; 0x609
 800ca0c:	4936      	ldr	r1, [pc, #216]	; (800cae8 <tcp_process_refused_data+0xf0>)
 800ca0e:	4837      	ldr	r0, [pc, #220]	; (800caec <tcp_process_refused_data+0xf4>)
 800ca10:	f004 fd48 	bl	80114a4 <iprintf>
 800ca14:	f06f 030f 	mvn.w	r3, #15
 800ca18:	e060      	b.n	800cadc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca1e:	7b5b      	ldrb	r3, [r3, #13]
 800ca20:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca26:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00b      	beq.n	800ca50 <tcp_process_refused_data+0x58>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6918      	ldr	r0, [r3, #16]
 800ca42:	2300      	movs	r3, #0
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	6879      	ldr	r1, [r7, #4]
 800ca48:	47a0      	blx	r4
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	73fb      	strb	r3, [r7, #15]
 800ca4e:	e007      	b.n	800ca60 <tcp_process_refused_data+0x68>
 800ca50:	2300      	movs	r3, #0
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	6879      	ldr	r1, [r7, #4]
 800ca56:	2000      	movs	r0, #0
 800ca58:	f000 f8a4 	bl	800cba4 <tcp_recv_null>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ca60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d12a      	bne.n	800cabe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
 800ca6a:	f003 0320 	and.w	r3, r3, #32
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d033      	beq.n	800cada <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca7a:	d005      	beq.n	800ca88 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca80:	3301      	adds	r3, #1
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00b      	beq.n	800caaa <tcp_process_refused_data+0xb2>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6918      	ldr	r0, [r3, #16]
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	2200      	movs	r2, #0
 800caa0:	6879      	ldr	r1, [r7, #4]
 800caa2:	47a0      	blx	r4
 800caa4:	4603      	mov	r3, r0
 800caa6:	73fb      	strb	r3, [r7, #15]
 800caa8:	e001      	b.n	800caae <tcp_process_refused_data+0xb6>
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800caae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cab2:	f113 0f0d 	cmn.w	r3, #13
 800cab6:	d110      	bne.n	800cada <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cab8:	f06f 030c 	mvn.w	r3, #12
 800cabc:	e00e      	b.n	800cadc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cabe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cac2:	f113 0f0d 	cmn.w	r3, #13
 800cac6:	d102      	bne.n	800cace <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cac8:	f06f 030c 	mvn.w	r3, #12
 800cacc:	e006      	b.n	800cadc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cad4:	f06f 0304 	mvn.w	r3, #4
 800cad8:	e000      	b.n	800cadc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd90      	pop	{r4, r7, pc}
 800cae4:	08013884 	.word	0x08013884
 800cae8:	08013dc0 	.word	0x08013dc0
 800caec:	080138f4 	.word	0x080138f4

0800caf0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800caf8:	e007      	b.n	800cb0a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 f80a 	bl	800cb1a <tcp_seg_free>
    seg = next;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d1f4      	bne.n	800cafa <tcp_segs_free+0xa>
  }
}
 800cb10:	bf00      	nop
 800cb12:	bf00      	nop
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00c      	beq.n	800cb42 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d004      	beq.n	800cb3a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fe fd7d 	bl	800b634 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cb3a:	6879      	ldr	r1, [r7, #4]
 800cb3c:	2003      	movs	r0, #3
 800cb3e:	f7fd ff67 	bl	800aa10 <memp_free>
  }
}
 800cb42:	bf00      	nop
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
	...

0800cb4c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d106      	bne.n	800cb68 <tcp_seg_copy+0x1c>
 800cb5a:	4b0f      	ldr	r3, [pc, #60]	; (800cb98 <tcp_seg_copy+0x4c>)
 800cb5c:	f240 6282 	movw	r2, #1666	; 0x682
 800cb60:	490e      	ldr	r1, [pc, #56]	; (800cb9c <tcp_seg_copy+0x50>)
 800cb62:	480f      	ldr	r0, [pc, #60]	; (800cba0 <tcp_seg_copy+0x54>)
 800cb64:	f004 fc9e 	bl	80114a4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cb68:	2003      	movs	r0, #3
 800cb6a:	f7fd fee1 	bl	800a930 <memp_malloc>
 800cb6e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <tcp_seg_copy+0x2e>
    return NULL;
 800cb76:	2300      	movs	r3, #0
 800cb78:	e00a      	b.n	800cb90 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cb7a:	2210      	movs	r2, #16
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f004 fc7a 	bl	8011478 <memcpy>
  pbuf_ref(cseg->p);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7fe fdf3 	bl	800b774 <pbuf_ref>
  return cseg;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	08013884 	.word	0x08013884
 800cb9c:	08013e04 	.word	0x08013e04
 800cba0:	080138f4 	.word	0x080138f4

0800cba4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
 800cbb0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d109      	bne.n	800cbcc <tcp_recv_null+0x28>
 800cbb8:	4b12      	ldr	r3, [pc, #72]	; (800cc04 <tcp_recv_null+0x60>)
 800cbba:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cbbe:	4912      	ldr	r1, [pc, #72]	; (800cc08 <tcp_recv_null+0x64>)
 800cbc0:	4812      	ldr	r0, [pc, #72]	; (800cc0c <tcp_recv_null+0x68>)
 800cbc2:	f004 fc6f 	bl	80114a4 <iprintf>
 800cbc6:	f06f 030f 	mvn.w	r3, #15
 800cbca:	e016      	b.n	800cbfa <tcp_recv_null+0x56>

  if (p != NULL) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d009      	beq.n	800cbe6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	891b      	ldrh	r3, [r3, #8]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	68b8      	ldr	r0, [r7, #8]
 800cbda:	f7ff fb19 	bl	800c210 <tcp_recved>
    pbuf_free(p);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7fe fd28 	bl	800b634 <pbuf_free>
 800cbe4:	e008      	b.n	800cbf8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cbe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d104      	bne.n	800cbf8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cbee:	68b8      	ldr	r0, [r7, #8]
 800cbf0:	f7ff f9be 	bl	800bf70 <tcp_close>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	e000      	b.n	800cbfa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	08013884 	.word	0x08013884
 800cc08:	08013e20 	.word	0x08013e20
 800cc0c:	080138f4 	.word	0x080138f4

0800cc10 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4603      	mov	r3, r0
 800cc18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cc1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	db01      	blt.n	800cc26 <tcp_kill_prio+0x16>
 800cc22:	79fb      	ldrb	r3, [r7, #7]
 800cc24:	e000      	b.n	800cc28 <tcp_kill_prio+0x18>
 800cc26:	237f      	movs	r3, #127	; 0x7f
 800cc28:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cc2a:	7afb      	ldrb	r3, [r7, #11]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d034      	beq.n	800cc9a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cc30:	7afb      	ldrb	r3, [r7, #11]
 800cc32:	3b01      	subs	r3, #1
 800cc34:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cc36:	2300      	movs	r3, #0
 800cc38:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc3e:	4b19      	ldr	r3, [pc, #100]	; (800cca4 <tcp_kill_prio+0x94>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	617b      	str	r3, [r7, #20]
 800cc44:	e01f      	b.n	800cc86 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	7d5b      	ldrb	r3, [r3, #21]
 800cc4a:	7afa      	ldrb	r2, [r7, #11]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d80c      	bhi.n	800cc6a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cc54:	7afa      	ldrb	r2, [r7, #11]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d112      	bne.n	800cc80 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cc5a:	4b13      	ldr	r3, [pc, #76]	; (800cca8 <tcp_kill_prio+0x98>)
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d80a      	bhi.n	800cc80 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cc6a:	4b0f      	ldr	r3, [pc, #60]	; (800cca8 <tcp_kill_prio+0x98>)
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	6a1b      	ldr	r3, [r3, #32]
 800cc72:	1ad3      	subs	r3, r2, r3
 800cc74:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	7d5b      	ldrb	r3, [r3, #21]
 800cc7e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	617b      	str	r3, [r7, #20]
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1dc      	bne.n	800cc46 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d004      	beq.n	800cc9c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cc92:	6938      	ldr	r0, [r7, #16]
 800cc94:	f7ff fa56 	bl	800c144 <tcp_abort>
 800cc98:	e000      	b.n	800cc9c <tcp_kill_prio+0x8c>
    return;
 800cc9a:	bf00      	nop
  }
}
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	2400812c 	.word	0x2400812c
 800cca8:	24008120 	.word	0x24008120

0800ccac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ccb6:	79fb      	ldrb	r3, [r7, #7]
 800ccb8:	2b08      	cmp	r3, #8
 800ccba:	d009      	beq.n	800ccd0 <tcp_kill_state+0x24>
 800ccbc:	79fb      	ldrb	r3, [r7, #7]
 800ccbe:	2b09      	cmp	r3, #9
 800ccc0:	d006      	beq.n	800ccd0 <tcp_kill_state+0x24>
 800ccc2:	4b1a      	ldr	r3, [pc, #104]	; (800cd2c <tcp_kill_state+0x80>)
 800ccc4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ccc8:	4919      	ldr	r1, [pc, #100]	; (800cd30 <tcp_kill_state+0x84>)
 800ccca:	481a      	ldr	r0, [pc, #104]	; (800cd34 <tcp_kill_state+0x88>)
 800cccc:	f004 fbea 	bl	80114a4 <iprintf>

  inactivity = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccd8:	4b17      	ldr	r3, [pc, #92]	; (800cd38 <tcp_kill_state+0x8c>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	e017      	b.n	800cd10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	7d1b      	ldrb	r3, [r3, #20]
 800cce4:	79fa      	ldrb	r2, [r7, #7]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d10f      	bne.n	800cd0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ccea:	4b14      	ldr	r3, [pc, #80]	; (800cd3c <tcp_kill_state+0x90>)
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d807      	bhi.n	800cd0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ccfa:	4b10      	ldr	r3, [pc, #64]	; (800cd3c <tcp_kill_state+0x90>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	6a1b      	ldr	r3, [r3, #32]
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	617b      	str	r3, [r7, #20]
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1e4      	bne.n	800cce0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d003      	beq.n	800cd24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	6938      	ldr	r0, [r7, #16]
 800cd20:	f7ff f952 	bl	800bfc8 <tcp_abandon>
  }
}
 800cd24:	bf00      	nop
 800cd26:	3718      	adds	r7, #24
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	08013884 	.word	0x08013884
 800cd30:	08013e3c 	.word	0x08013e3c
 800cd34:	080138f4 	.word	0x080138f4
 800cd38:	2400812c 	.word	0x2400812c
 800cd3c:	24008120 	.word	0x24008120

0800cd40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd4e:	4b12      	ldr	r3, [pc, #72]	; (800cd98 <tcp_kill_timewait+0x58>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	60fb      	str	r3, [r7, #12]
 800cd54:	e012      	b.n	800cd7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cd56:	4b11      	ldr	r3, [pc, #68]	; (800cd9c <tcp_kill_timewait+0x5c>)
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6a1b      	ldr	r3, [r3, #32]
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d807      	bhi.n	800cd76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cd66:	4b0d      	ldr	r3, [pc, #52]	; (800cd9c <tcp_kill_timewait+0x5c>)
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6a1b      	ldr	r3, [r3, #32]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	60fb      	str	r3, [r7, #12]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1e9      	bne.n	800cd56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cd88:	68b8      	ldr	r0, [r7, #8]
 800cd8a:	f7ff f9db 	bl	800c144 <tcp_abort>
  }
}
 800cd8e:	bf00      	nop
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	24008130 	.word	0x24008130
 800cd9c:	24008120 	.word	0x24008120

0800cda0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cda6:	4b10      	ldr	r3, [pc, #64]	; (800cde8 <tcp_handle_closepend+0x48>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cdac:	e014      	b.n	800cdd8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	8b5b      	ldrh	r3, [r3, #26]
 800cdb8:	f003 0308 	and.w	r3, r3, #8
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d009      	beq.n	800cdd4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	8b5b      	ldrh	r3, [r3, #26]
 800cdc4:	f023 0308 	bic.w	r3, r3, #8
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7ff f864 	bl	800be9c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1e7      	bne.n	800cdae <tcp_handle_closepend+0xe>
  }
}
 800cdde:	bf00      	nop
 800cde0:	bf00      	nop
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	2400812c 	.word	0x2400812c

0800cdec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdf6:	2001      	movs	r0, #1
 800cdf8:	f7fd fd9a 	bl	800a930 <memp_malloc>
 800cdfc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d126      	bne.n	800ce52 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ce04:	f7ff ffcc 	bl	800cda0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ce08:	f7ff ff9a 	bl	800cd40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce0c:	2001      	movs	r0, #1
 800ce0e:	f7fd fd8f 	bl	800a930 <memp_malloc>
 800ce12:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d11b      	bne.n	800ce52 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ce1a:	2009      	movs	r0, #9
 800ce1c:	f7ff ff46 	bl	800ccac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce20:	2001      	movs	r0, #1
 800ce22:	f7fd fd85 	bl	800a930 <memp_malloc>
 800ce26:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d111      	bne.n	800ce52 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ce2e:	2008      	movs	r0, #8
 800ce30:	f7ff ff3c 	bl	800ccac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce34:	2001      	movs	r0, #1
 800ce36:	f7fd fd7b 	bl	800a930 <memp_malloc>
 800ce3a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d107      	bne.n	800ce52 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ce42:	79fb      	ldrb	r3, [r7, #7]
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7ff fee3 	bl	800cc10 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	f7fd fd70 	bl	800a930 <memp_malloc>
 800ce50:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d03f      	beq.n	800ced8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ce58:	229c      	movs	r2, #156	; 0x9c
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f004 fb19 	bl	8011494 <memset>
    pcb->prio = prio;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	79fa      	ldrb	r2, [r7, #7]
 800ce66:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ce6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce78:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	22ff      	movs	r2, #255	; 0xff
 800ce86:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ce8e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2206      	movs	r2, #6
 800ce94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2206      	movs	r2, #6
 800ce9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cea4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ceae:	4b0d      	ldr	r3, [pc, #52]	; (800cee4 <tcp_alloc+0xf8>)
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ceb6:	4b0c      	ldr	r3, [pc, #48]	; (800cee8 <tcp_alloc+0xfc>)
 800ceb8:	781a      	ldrb	r2, [r3, #0]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cec4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	4a08      	ldr	r2, [pc, #32]	; (800ceec <tcp_alloc+0x100>)
 800cecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	4a07      	ldr	r2, [pc, #28]	; (800cef0 <tcp_alloc+0x104>)
 800ced4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ced8:	68fb      	ldr	r3, [r7, #12]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	24008120 	.word	0x24008120
 800cee8:	24008136 	.word	0x24008136
 800ceec:	0800cba5 	.word	0x0800cba5
 800cef0:	006ddd00 	.word	0x006ddd00

0800cef4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d107      	bne.n	800cf12 <tcp_pcb_purge+0x1e>
 800cf02:	4b21      	ldr	r3, [pc, #132]	; (800cf88 <tcp_pcb_purge+0x94>)
 800cf04:	f640 0251 	movw	r2, #2129	; 0x851
 800cf08:	4920      	ldr	r1, [pc, #128]	; (800cf8c <tcp_pcb_purge+0x98>)
 800cf0a:	4821      	ldr	r0, [pc, #132]	; (800cf90 <tcp_pcb_purge+0x9c>)
 800cf0c:	f004 faca 	bl	80114a4 <iprintf>
 800cf10:	e037      	b.n	800cf82 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	7d1b      	ldrb	r3, [r3, #20]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d033      	beq.n	800cf82 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cf1e:	2b0a      	cmp	r3, #10
 800cf20:	d02f      	beq.n	800cf82 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d02b      	beq.n	800cf82 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d007      	beq.n	800cf42 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fe fb7c 	bl	800b634 <pbuf_free>
      pcb->refused_data = NULL;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d002      	beq.n	800cf50 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f986 	bl	800d25c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf56:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff fdc7 	bl	800caf0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7ff fdc2 	bl	800caf0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	66da      	str	r2, [r3, #108]	; 0x6c
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	08013884 	.word	0x08013884
 800cf8c:	08013efc 	.word	0x08013efc
 800cf90:	080138f4 	.word	0x080138f4

0800cf94 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d106      	bne.n	800cfb2 <tcp_pcb_remove+0x1e>
 800cfa4:	4b3e      	ldr	r3, [pc, #248]	; (800d0a0 <tcp_pcb_remove+0x10c>)
 800cfa6:	f640 0283 	movw	r2, #2179	; 0x883
 800cfaa:	493e      	ldr	r1, [pc, #248]	; (800d0a4 <tcp_pcb_remove+0x110>)
 800cfac:	483e      	ldr	r0, [pc, #248]	; (800d0a8 <tcp_pcb_remove+0x114>)
 800cfae:	f004 fa79 	bl	80114a4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d106      	bne.n	800cfc6 <tcp_pcb_remove+0x32>
 800cfb8:	4b39      	ldr	r3, [pc, #228]	; (800d0a0 <tcp_pcb_remove+0x10c>)
 800cfba:	f640 0284 	movw	r2, #2180	; 0x884
 800cfbe:	493b      	ldr	r1, [pc, #236]	; (800d0ac <tcp_pcb_remove+0x118>)
 800cfc0:	4839      	ldr	r0, [pc, #228]	; (800d0a8 <tcp_pcb_remove+0x114>)
 800cfc2:	f004 fa6f 	bl	80114a4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	683a      	ldr	r2, [r7, #0]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d105      	bne.n	800cfdc <tcp_pcb_remove+0x48>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	68da      	ldr	r2, [r3, #12]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	601a      	str	r2, [r3, #0]
 800cfda:	e013      	b.n	800d004 <tcp_pcb_remove+0x70>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	60fb      	str	r3, [r7, #12]
 800cfe2:	e00c      	b.n	800cffe <tcp_pcb_remove+0x6a>
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	683a      	ldr	r2, [r7, #0]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d104      	bne.n	800cff8 <tcp_pcb_remove+0x64>
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	68da      	ldr	r2, [r3, #12]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	60da      	str	r2, [r3, #12]
 800cff6:	e005      	b.n	800d004 <tcp_pcb_remove+0x70>
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	60fb      	str	r3, [r7, #12]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1ef      	bne.n	800cfe4 <tcp_pcb_remove+0x50>
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	2200      	movs	r2, #0
 800d008:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d00a:	6838      	ldr	r0, [r7, #0]
 800d00c:	f7ff ff72 	bl	800cef4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	7d1b      	ldrb	r3, [r3, #20]
 800d014:	2b0a      	cmp	r3, #10
 800d016:	d013      	beq.n	800d040 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d00f      	beq.n	800d040 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	8b5b      	ldrh	r3, [r3, #26]
 800d024:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d009      	beq.n	800d040 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	8b5b      	ldrh	r3, [r3, #26]
 800d030:	f043 0302 	orr.w	r3, r3, #2
 800d034:	b29a      	uxth	r2, r3
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d03a:	6838      	ldr	r0, [r7, #0]
 800d03c:	f002 ff6e 	bl	800ff1c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	7d1b      	ldrb	r3, [r3, #20]
 800d044:	2b01      	cmp	r3, #1
 800d046:	d020      	beq.n	800d08a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d006      	beq.n	800d05e <tcp_pcb_remove+0xca>
 800d050:	4b13      	ldr	r3, [pc, #76]	; (800d0a0 <tcp_pcb_remove+0x10c>)
 800d052:	f640 0293 	movw	r2, #2195	; 0x893
 800d056:	4916      	ldr	r1, [pc, #88]	; (800d0b0 <tcp_pcb_remove+0x11c>)
 800d058:	4813      	ldr	r0, [pc, #76]	; (800d0a8 <tcp_pcb_remove+0x114>)
 800d05a:	f004 fa23 	bl	80114a4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d062:	2b00      	cmp	r3, #0
 800d064:	d006      	beq.n	800d074 <tcp_pcb_remove+0xe0>
 800d066:	4b0e      	ldr	r3, [pc, #56]	; (800d0a0 <tcp_pcb_remove+0x10c>)
 800d068:	f640 0294 	movw	r2, #2196	; 0x894
 800d06c:	4911      	ldr	r1, [pc, #68]	; (800d0b4 <tcp_pcb_remove+0x120>)
 800d06e:	480e      	ldr	r0, [pc, #56]	; (800d0a8 <tcp_pcb_remove+0x114>)
 800d070:	f004 fa18 	bl	80114a4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d006      	beq.n	800d08a <tcp_pcb_remove+0xf6>
 800d07c:	4b08      	ldr	r3, [pc, #32]	; (800d0a0 <tcp_pcb_remove+0x10c>)
 800d07e:	f640 0296 	movw	r2, #2198	; 0x896
 800d082:	490d      	ldr	r1, [pc, #52]	; (800d0b8 <tcp_pcb_remove+0x124>)
 800d084:	4808      	ldr	r0, [pc, #32]	; (800d0a8 <tcp_pcb_remove+0x114>)
 800d086:	f004 fa0d 	bl	80114a4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2200      	movs	r2, #0
 800d08e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	2200      	movs	r2, #0
 800d094:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d096:	bf00      	nop
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	08013884 	.word	0x08013884
 800d0a4:	08013f18 	.word	0x08013f18
 800d0a8:	080138f4 	.word	0x080138f4
 800d0ac:	08013f34 	.word	0x08013f34
 800d0b0:	08013f54 	.word	0x08013f54
 800d0b4:	08013f6c 	.word	0x08013f6c
 800d0b8:	08013f88 	.word	0x08013f88

0800d0bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d106      	bne.n	800d0d8 <tcp_next_iss+0x1c>
 800d0ca:	4b0a      	ldr	r3, [pc, #40]	; (800d0f4 <tcp_next_iss+0x38>)
 800d0cc:	f640 02af 	movw	r2, #2223	; 0x8af
 800d0d0:	4909      	ldr	r1, [pc, #36]	; (800d0f8 <tcp_next_iss+0x3c>)
 800d0d2:	480a      	ldr	r0, [pc, #40]	; (800d0fc <tcp_next_iss+0x40>)
 800d0d4:	f004 f9e6 	bl	80114a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d0d8:	4b09      	ldr	r3, [pc, #36]	; (800d100 <tcp_next_iss+0x44>)
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	4b09      	ldr	r3, [pc, #36]	; (800d104 <tcp_next_iss+0x48>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	4a07      	ldr	r2, [pc, #28]	; (800d100 <tcp_next_iss+0x44>)
 800d0e4:	6013      	str	r3, [r2, #0]
  return iss;
 800d0e6:	4b06      	ldr	r3, [pc, #24]	; (800d100 <tcp_next_iss+0x44>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	08013884 	.word	0x08013884
 800d0f8:	08013fa0 	.word	0x08013fa0
 800d0fc:	080138f4 	.word	0x080138f4
 800d100:	24000010 	.word	0x24000010
 800d104:	24008120 	.word	0x24008120

0800d108 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	4603      	mov	r3, r0
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d106      	bne.n	800d12a <tcp_eff_send_mss_netif+0x22>
 800d11c:	4b14      	ldr	r3, [pc, #80]	; (800d170 <tcp_eff_send_mss_netif+0x68>)
 800d11e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d122:	4914      	ldr	r1, [pc, #80]	; (800d174 <tcp_eff_send_mss_netif+0x6c>)
 800d124:	4814      	ldr	r0, [pc, #80]	; (800d178 <tcp_eff_send_mss_netif+0x70>)
 800d126:	f004 f9bd 	bl	80114a4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d130:	89fb      	ldrh	r3, [r7, #14]
 800d132:	e019      	b.n	800d168 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d138:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d13a:	8afb      	ldrh	r3, [r7, #22]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d012      	beq.n	800d166 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d140:	2328      	movs	r3, #40	; 0x28
 800d142:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d144:	8afa      	ldrh	r2, [r7, #22]
 800d146:	8abb      	ldrh	r3, [r7, #20]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d904      	bls.n	800d156 <tcp_eff_send_mss_netif+0x4e>
 800d14c:	8afa      	ldrh	r2, [r7, #22]
 800d14e:	8abb      	ldrh	r3, [r7, #20]
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	b29b      	uxth	r3, r3
 800d154:	e000      	b.n	800d158 <tcp_eff_send_mss_netif+0x50>
 800d156:	2300      	movs	r3, #0
 800d158:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d15a:	8a7a      	ldrh	r2, [r7, #18]
 800d15c:	89fb      	ldrh	r3, [r7, #14]
 800d15e:	4293      	cmp	r3, r2
 800d160:	bf28      	it	cs
 800d162:	4613      	movcs	r3, r2
 800d164:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d166:	89fb      	ldrh	r3, [r7, #14]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3718      	adds	r7, #24
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	08013884 	.word	0x08013884
 800d174:	08013fbc 	.word	0x08013fbc
 800d178:	080138f4 	.word	0x080138f4

0800d17c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d119      	bne.n	800d1c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d190:	4b10      	ldr	r3, [pc, #64]	; (800d1d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d192:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d196:	4910      	ldr	r1, [pc, #64]	; (800d1d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d198:	4810      	ldr	r0, [pc, #64]	; (800d1dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d19a:	f004 f983 	bl	80114a4 <iprintf>

  while (pcb != NULL) {
 800d19e:	e011      	b.n	800d1c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d108      	bne.n	800d1be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7fe ffc6 	bl	800c144 <tcp_abort>
      pcb = next;
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	60fb      	str	r3, [r7, #12]
 800d1bc:	e002      	b.n	800d1c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1ea      	bne.n	800d1a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d1ca:	bf00      	nop
 800d1cc:	bf00      	nop
 800d1ce:	3710      	adds	r7, #16
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	08013884 	.word	0x08013884
 800d1d8:	08013fe4 	.word	0x08013fe4
 800d1dc:	080138f4 	.word	0x080138f4

0800d1e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d02a      	beq.n	800d246 <tcp_netif_ip_addr_changed+0x66>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d026      	beq.n	800d246 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d1f8:	4b15      	ldr	r3, [pc, #84]	; (800d250 <tcp_netif_ip_addr_changed+0x70>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7ff ffbc 	bl	800d17c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d204:	4b13      	ldr	r3, [pc, #76]	; (800d254 <tcp_netif_ip_addr_changed+0x74>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff ffb6 	bl	800d17c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d017      	beq.n	800d246 <tcp_netif_ip_addr_changed+0x66>
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d013      	beq.n	800d246 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d21e:	4b0e      	ldr	r3, [pc, #56]	; (800d258 <tcp_netif_ip_addr_changed+0x78>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	60fb      	str	r3, [r7, #12]
 800d224:	e00c      	b.n	800d240 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d103      	bne.n	800d23a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	60fb      	str	r3, [r7, #12]
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d1ef      	bne.n	800d226 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d246:	bf00      	nop
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	2400812c 	.word	0x2400812c
 800d254:	24008124 	.word	0x24008124
 800d258:	24008128 	.word	0x24008128

0800d25c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d007      	beq.n	800d27c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d270:	4618      	mov	r0, r3
 800d272:	f7ff fc3d 	bl	800caf0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d27c:	bf00      	nop
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d284:	b590      	push	{r4, r7, lr}
 800d286:	b08d      	sub	sp, #52	; 0x34
 800d288:	af04      	add	r7, sp, #16
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d105      	bne.n	800d2a0 <tcp_input+0x1c>
 800d294:	4b9b      	ldr	r3, [pc, #620]	; (800d504 <tcp_input+0x280>)
 800d296:	2283      	movs	r2, #131	; 0x83
 800d298:	499b      	ldr	r1, [pc, #620]	; (800d508 <tcp_input+0x284>)
 800d29a:	489c      	ldr	r0, [pc, #624]	; (800d50c <tcp_input+0x288>)
 800d29c:	f004 f902 	bl	80114a4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	4a9a      	ldr	r2, [pc, #616]	; (800d510 <tcp_input+0x28c>)
 800d2a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	895b      	ldrh	r3, [r3, #10]
 800d2ac:	2b13      	cmp	r3, #19
 800d2ae:	f240 83d1 	bls.w	800da54 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d2b2:	4b98      	ldr	r3, [pc, #608]	; (800d514 <tcp_input+0x290>)
 800d2b4:	695b      	ldr	r3, [r3, #20]
 800d2b6:	4a97      	ldr	r2, [pc, #604]	; (800d514 <tcp_input+0x290>)
 800d2b8:	6812      	ldr	r2, [r2, #0]
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fc f887 	bl	80093d0 <ip4_addr_isbroadcast_u32>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f040 83c7 	bne.w	800da58 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d2ca:	4b92      	ldr	r3, [pc, #584]	; (800d514 <tcp_input+0x290>)
 800d2cc:	695b      	ldr	r3, [r3, #20]
 800d2ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d2d2:	2be0      	cmp	r3, #224	; 0xe0
 800d2d4:	f000 83c0 	beq.w	800da58 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d2d8:	4b8d      	ldr	r3, [pc, #564]	; (800d510 <tcp_input+0x28c>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	899b      	ldrh	r3, [r3, #12]
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fa fb09 	bl	80078f8 <lwip_htons>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	0b1b      	lsrs	r3, r3, #12
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d2f2:	7cbb      	ldrb	r3, [r7, #18]
 800d2f4:	2b13      	cmp	r3, #19
 800d2f6:	f240 83b1 	bls.w	800da5c <tcp_input+0x7d8>
 800d2fa:	7cbb      	ldrb	r3, [r7, #18]
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	891b      	ldrh	r3, [r3, #8]
 800d302:	429a      	cmp	r2, r3
 800d304:	f200 83aa 	bhi.w	800da5c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d308:	7cbb      	ldrb	r3, [r7, #18]
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	3b14      	subs	r3, #20
 800d30e:	b29a      	uxth	r2, r3
 800d310:	4b81      	ldr	r3, [pc, #516]	; (800d518 <tcp_input+0x294>)
 800d312:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d314:	4b81      	ldr	r3, [pc, #516]	; (800d51c <tcp_input+0x298>)
 800d316:	2200      	movs	r2, #0
 800d318:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	895a      	ldrh	r2, [r3, #10]
 800d31e:	7cbb      	ldrb	r3, [r7, #18]
 800d320:	b29b      	uxth	r3, r3
 800d322:	429a      	cmp	r2, r3
 800d324:	d309      	bcc.n	800d33a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d326:	4b7c      	ldr	r3, [pc, #496]	; (800d518 <tcp_input+0x294>)
 800d328:	881a      	ldrh	r2, [r3, #0]
 800d32a:	4b7d      	ldr	r3, [pc, #500]	; (800d520 <tcp_input+0x29c>)
 800d32c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d32e:	7cbb      	ldrb	r3, [r7, #18]
 800d330:	4619      	mov	r1, r3
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7fe f8f8 	bl	800b528 <pbuf_remove_header>
 800d338:	e04e      	b.n	800d3d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d105      	bne.n	800d34e <tcp_input+0xca>
 800d342:	4b70      	ldr	r3, [pc, #448]	; (800d504 <tcp_input+0x280>)
 800d344:	22c2      	movs	r2, #194	; 0xc2
 800d346:	4977      	ldr	r1, [pc, #476]	; (800d524 <tcp_input+0x2a0>)
 800d348:	4870      	ldr	r0, [pc, #448]	; (800d50c <tcp_input+0x288>)
 800d34a:	f004 f8ab 	bl	80114a4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d34e:	2114      	movs	r1, #20
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f7fe f8e9 	bl	800b528 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	895a      	ldrh	r2, [r3, #10]
 800d35a:	4b71      	ldr	r3, [pc, #452]	; (800d520 <tcp_input+0x29c>)
 800d35c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d35e:	4b6e      	ldr	r3, [pc, #440]	; (800d518 <tcp_input+0x294>)
 800d360:	881a      	ldrh	r2, [r3, #0]
 800d362:	4b6f      	ldr	r3, [pc, #444]	; (800d520 <tcp_input+0x29c>)
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d36a:	4b6d      	ldr	r3, [pc, #436]	; (800d520 <tcp_input+0x29c>)
 800d36c:	881b      	ldrh	r3, [r3, #0]
 800d36e:	4619      	mov	r1, r3
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7fe f8d9 	bl	800b528 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	895b      	ldrh	r3, [r3, #10]
 800d37c:	8a3a      	ldrh	r2, [r7, #16]
 800d37e:	429a      	cmp	r2, r3
 800d380:	f200 836e 	bhi.w	800da60 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	4a64      	ldr	r2, [pc, #400]	; (800d51c <tcp_input+0x298>)
 800d38c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	8a3a      	ldrh	r2, [r7, #16]
 800d394:	4611      	mov	r1, r2
 800d396:	4618      	mov	r0, r3
 800d398:	f7fe f8c6 	bl	800b528 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	891a      	ldrh	r2, [r3, #8]
 800d3a0:	8a3b      	ldrh	r3, [r7, #16]
 800d3a2:	1ad3      	subs	r3, r2, r3
 800d3a4:	b29a      	uxth	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	895b      	ldrh	r3, [r3, #10]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <tcp_input+0x13a>
 800d3b2:	4b54      	ldr	r3, [pc, #336]	; (800d504 <tcp_input+0x280>)
 800d3b4:	22df      	movs	r2, #223	; 0xdf
 800d3b6:	495c      	ldr	r1, [pc, #368]	; (800d528 <tcp_input+0x2a4>)
 800d3b8:	4854      	ldr	r0, [pc, #336]	; (800d50c <tcp_input+0x288>)
 800d3ba:	f004 f873 	bl	80114a4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	891a      	ldrh	r2, [r3, #8]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	891b      	ldrh	r3, [r3, #8]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d005      	beq.n	800d3d8 <tcp_input+0x154>
 800d3cc:	4b4d      	ldr	r3, [pc, #308]	; (800d504 <tcp_input+0x280>)
 800d3ce:	22e0      	movs	r2, #224	; 0xe0
 800d3d0:	4956      	ldr	r1, [pc, #344]	; (800d52c <tcp_input+0x2a8>)
 800d3d2:	484e      	ldr	r0, [pc, #312]	; (800d50c <tcp_input+0x288>)
 800d3d4:	f004 f866 	bl	80114a4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d3d8:	4b4d      	ldr	r3, [pc, #308]	; (800d510 <tcp_input+0x28c>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	881b      	ldrh	r3, [r3, #0]
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	4a4b      	ldr	r2, [pc, #300]	; (800d510 <tcp_input+0x28c>)
 800d3e2:	6814      	ldr	r4, [r2, #0]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7fa fa87 	bl	80078f8 <lwip_htons>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d3ee:	4b48      	ldr	r3, [pc, #288]	; (800d510 <tcp_input+0x28c>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	885b      	ldrh	r3, [r3, #2]
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	4a46      	ldr	r2, [pc, #280]	; (800d510 <tcp_input+0x28c>)
 800d3f8:	6814      	ldr	r4, [r2, #0]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fa fa7c 	bl	80078f8 <lwip_htons>
 800d400:	4603      	mov	r3, r0
 800d402:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d404:	4b42      	ldr	r3, [pc, #264]	; (800d510 <tcp_input+0x28c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	4a41      	ldr	r2, [pc, #260]	; (800d510 <tcp_input+0x28c>)
 800d40c:	6814      	ldr	r4, [r2, #0]
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fa fa87 	bl	8007922 <lwip_htonl>
 800d414:	4603      	mov	r3, r0
 800d416:	6063      	str	r3, [r4, #4]
 800d418:	6863      	ldr	r3, [r4, #4]
 800d41a:	4a45      	ldr	r2, [pc, #276]	; (800d530 <tcp_input+0x2ac>)
 800d41c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d41e:	4b3c      	ldr	r3, [pc, #240]	; (800d510 <tcp_input+0x28c>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	4a3a      	ldr	r2, [pc, #232]	; (800d510 <tcp_input+0x28c>)
 800d426:	6814      	ldr	r4, [r2, #0]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fa fa7a 	bl	8007922 <lwip_htonl>
 800d42e:	4603      	mov	r3, r0
 800d430:	60a3      	str	r3, [r4, #8]
 800d432:	68a3      	ldr	r3, [r4, #8]
 800d434:	4a3f      	ldr	r2, [pc, #252]	; (800d534 <tcp_input+0x2b0>)
 800d436:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d438:	4b35      	ldr	r3, [pc, #212]	; (800d510 <tcp_input+0x28c>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	89db      	ldrh	r3, [r3, #14]
 800d43e:	b29b      	uxth	r3, r3
 800d440:	4a33      	ldr	r2, [pc, #204]	; (800d510 <tcp_input+0x28c>)
 800d442:	6814      	ldr	r4, [r2, #0]
 800d444:	4618      	mov	r0, r3
 800d446:	f7fa fa57 	bl	80078f8 <lwip_htons>
 800d44a:	4603      	mov	r3, r0
 800d44c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d44e:	4b30      	ldr	r3, [pc, #192]	; (800d510 <tcp_input+0x28c>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	899b      	ldrh	r3, [r3, #12]
 800d454:	b29b      	uxth	r3, r3
 800d456:	4618      	mov	r0, r3
 800d458:	f7fa fa4e 	bl	80078f8 <lwip_htons>
 800d45c:	4603      	mov	r3, r0
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d464:	b2da      	uxtb	r2, r3
 800d466:	4b34      	ldr	r3, [pc, #208]	; (800d538 <tcp_input+0x2b4>)
 800d468:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	891a      	ldrh	r2, [r3, #8]
 800d46e:	4b33      	ldr	r3, [pc, #204]	; (800d53c <tcp_input+0x2b8>)
 800d470:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d472:	4b31      	ldr	r3, [pc, #196]	; (800d538 <tcp_input+0x2b4>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	f003 0303 	and.w	r3, r3, #3
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d00c      	beq.n	800d498 <tcp_input+0x214>
    tcplen++;
 800d47e:	4b2f      	ldr	r3, [pc, #188]	; (800d53c <tcp_input+0x2b8>)
 800d480:	881b      	ldrh	r3, [r3, #0]
 800d482:	3301      	adds	r3, #1
 800d484:	b29a      	uxth	r2, r3
 800d486:	4b2d      	ldr	r3, [pc, #180]	; (800d53c <tcp_input+0x2b8>)
 800d488:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	891a      	ldrh	r2, [r3, #8]
 800d48e:	4b2b      	ldr	r3, [pc, #172]	; (800d53c <tcp_input+0x2b8>)
 800d490:	881b      	ldrh	r3, [r3, #0]
 800d492:	429a      	cmp	r2, r3
 800d494:	f200 82e6 	bhi.w	800da64 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d498:	2300      	movs	r3, #0
 800d49a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d49c:	4b28      	ldr	r3, [pc, #160]	; (800d540 <tcp_input+0x2bc>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	61fb      	str	r3, [r7, #28]
 800d4a2:	e09d      	b.n	800d5e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	7d1b      	ldrb	r3, [r3, #20]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d105      	bne.n	800d4b8 <tcp_input+0x234>
 800d4ac:	4b15      	ldr	r3, [pc, #84]	; (800d504 <tcp_input+0x280>)
 800d4ae:	22fb      	movs	r2, #251	; 0xfb
 800d4b0:	4924      	ldr	r1, [pc, #144]	; (800d544 <tcp_input+0x2c0>)
 800d4b2:	4816      	ldr	r0, [pc, #88]	; (800d50c <tcp_input+0x288>)
 800d4b4:	f003 fff6 	bl	80114a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	7d1b      	ldrb	r3, [r3, #20]
 800d4bc:	2b0a      	cmp	r3, #10
 800d4be:	d105      	bne.n	800d4cc <tcp_input+0x248>
 800d4c0:	4b10      	ldr	r3, [pc, #64]	; (800d504 <tcp_input+0x280>)
 800d4c2:	22fc      	movs	r2, #252	; 0xfc
 800d4c4:	4920      	ldr	r1, [pc, #128]	; (800d548 <tcp_input+0x2c4>)
 800d4c6:	4811      	ldr	r0, [pc, #68]	; (800d50c <tcp_input+0x288>)
 800d4c8:	f003 ffec 	bl	80114a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	7d1b      	ldrb	r3, [r3, #20]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d105      	bne.n	800d4e0 <tcp_input+0x25c>
 800d4d4:	4b0b      	ldr	r3, [pc, #44]	; (800d504 <tcp_input+0x280>)
 800d4d6:	22fd      	movs	r2, #253	; 0xfd
 800d4d8:	491c      	ldr	r1, [pc, #112]	; (800d54c <tcp_input+0x2c8>)
 800d4da:	480c      	ldr	r0, [pc, #48]	; (800d50c <tcp_input+0x288>)
 800d4dc:	f003 ffe2 	bl	80114a4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	7a1b      	ldrb	r3, [r3, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d033      	beq.n	800d550 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	7a1a      	ldrb	r2, [r3, #8]
 800d4ec:	4b09      	ldr	r3, [pc, #36]	; (800d514 <tcp_input+0x290>)
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d029      	beq.n	800d550 <tcp_input+0x2cc>
      prev = pcb;
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	61bb      	str	r3, [r7, #24]
      continue;
 800d500:	e06b      	b.n	800d5da <tcp_input+0x356>
 800d502:	bf00      	nop
 800d504:	08014018 	.word	0x08014018
 800d508:	08014078 	.word	0x08014078
 800d50c:	08014090 	.word	0x08014090
 800d510:	24008148 	.word	0x24008148
 800d514:	240051f8 	.word	0x240051f8
 800d518:	2400814c 	.word	0x2400814c
 800d51c:	24008150 	.word	0x24008150
 800d520:	2400814e 	.word	0x2400814e
 800d524:	080140b8 	.word	0x080140b8
 800d528:	080140c8 	.word	0x080140c8
 800d52c:	080140d4 	.word	0x080140d4
 800d530:	24008158 	.word	0x24008158
 800d534:	2400815c 	.word	0x2400815c
 800d538:	24008164 	.word	0x24008164
 800d53c:	24008162 	.word	0x24008162
 800d540:	2400812c 	.word	0x2400812c
 800d544:	080140f4 	.word	0x080140f4
 800d548:	0801411c 	.word	0x0801411c
 800d54c:	08014148 	.word	0x08014148
    }

    if (pcb->remote_port == tcphdr->src &&
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	8b1a      	ldrh	r2, [r3, #24]
 800d554:	4b72      	ldr	r3, [pc, #456]	; (800d720 <tcp_input+0x49c>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d13a      	bne.n	800d5d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	8ada      	ldrh	r2, [r3, #22]
 800d564:	4b6e      	ldr	r3, [pc, #440]	; (800d720 <tcp_input+0x49c>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	885b      	ldrh	r3, [r3, #2]
 800d56a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d132      	bne.n	800d5d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	685a      	ldr	r2, [r3, #4]
 800d574:	4b6b      	ldr	r3, [pc, #428]	; (800d724 <tcp_input+0x4a0>)
 800d576:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d578:	429a      	cmp	r2, r3
 800d57a:	d12c      	bne.n	800d5d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	4b68      	ldr	r3, [pc, #416]	; (800d724 <tcp_input+0x4a0>)
 800d582:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d584:	429a      	cmp	r2, r3
 800d586:	d126      	bne.n	800d5d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	69fa      	ldr	r2, [r7, #28]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d106      	bne.n	800d5a0 <tcp_input+0x31c>
 800d592:	4b65      	ldr	r3, [pc, #404]	; (800d728 <tcp_input+0x4a4>)
 800d594:	f240 120d 	movw	r2, #269	; 0x10d
 800d598:	4964      	ldr	r1, [pc, #400]	; (800d72c <tcp_input+0x4a8>)
 800d59a:	4865      	ldr	r0, [pc, #404]	; (800d730 <tcp_input+0x4ac>)
 800d59c:	f003 ff82 	bl	80114a4 <iprintf>
      if (prev != NULL) {
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00a      	beq.n	800d5bc <tcp_input+0x338>
        prev->next = pcb->next;
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	68da      	ldr	r2, [r3, #12]
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d5ae:	4b61      	ldr	r3, [pc, #388]	; (800d734 <tcp_input+0x4b0>)
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d5b6:	4a5f      	ldr	r2, [pc, #380]	; (800d734 <tcp_input+0x4b0>)
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	69fa      	ldr	r2, [r7, #28]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d111      	bne.n	800d5ea <tcp_input+0x366>
 800d5c6:	4b58      	ldr	r3, [pc, #352]	; (800d728 <tcp_input+0x4a4>)
 800d5c8:	f240 1215 	movw	r2, #277	; 0x115
 800d5cc:	495a      	ldr	r1, [pc, #360]	; (800d738 <tcp_input+0x4b4>)
 800d5ce:	4858      	ldr	r0, [pc, #352]	; (800d730 <tcp_input+0x4ac>)
 800d5d0:	f003 ff68 	bl	80114a4 <iprintf>
      break;
 800d5d4:	e009      	b.n	800d5ea <tcp_input+0x366>
    }
    prev = pcb;
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	61fb      	str	r3, [r7, #28]
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	f47f af5e 	bne.w	800d4a4 <tcp_input+0x220>
 800d5e8:	e000      	b.n	800d5ec <tcp_input+0x368>
      break;
 800d5ea:	bf00      	nop
  }

  if (pcb == NULL) {
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f040 80aa 	bne.w	800d748 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5f4:	4b51      	ldr	r3, [pc, #324]	; (800d73c <tcp_input+0x4b8>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	61fb      	str	r3, [r7, #28]
 800d5fa:	e03f      	b.n	800d67c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	7d1b      	ldrb	r3, [r3, #20]
 800d600:	2b0a      	cmp	r3, #10
 800d602:	d006      	beq.n	800d612 <tcp_input+0x38e>
 800d604:	4b48      	ldr	r3, [pc, #288]	; (800d728 <tcp_input+0x4a4>)
 800d606:	f240 121f 	movw	r2, #287	; 0x11f
 800d60a:	494d      	ldr	r1, [pc, #308]	; (800d740 <tcp_input+0x4bc>)
 800d60c:	4848      	ldr	r0, [pc, #288]	; (800d730 <tcp_input+0x4ac>)
 800d60e:	f003 ff49 	bl	80114a4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	7a1b      	ldrb	r3, [r3, #8]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d009      	beq.n	800d62e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	7a1a      	ldrb	r2, [r3, #8]
 800d61e:	4b41      	ldr	r3, [pc, #260]	; (800d724 <tcp_input+0x4a0>)
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d626:	3301      	adds	r3, #1
 800d628:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d122      	bne.n	800d674 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	8b1a      	ldrh	r2, [r3, #24]
 800d632:	4b3b      	ldr	r3, [pc, #236]	; (800d720 <tcp_input+0x49c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	881b      	ldrh	r3, [r3, #0]
 800d638:	b29b      	uxth	r3, r3
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d11b      	bne.n	800d676 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	8ada      	ldrh	r2, [r3, #22]
 800d642:	4b37      	ldr	r3, [pc, #220]	; (800d720 <tcp_input+0x49c>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	885b      	ldrh	r3, [r3, #2]
 800d648:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d113      	bne.n	800d676 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	685a      	ldr	r2, [r3, #4]
 800d652:	4b34      	ldr	r3, [pc, #208]	; (800d724 <tcp_input+0x4a0>)
 800d654:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d656:	429a      	cmp	r2, r3
 800d658:	d10d      	bne.n	800d676 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	4b31      	ldr	r3, [pc, #196]	; (800d724 <tcp_input+0x4a0>)
 800d660:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d662:	429a      	cmp	r2, r3
 800d664:	d107      	bne.n	800d676 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d666:	69f8      	ldr	r0, [r7, #28]
 800d668:	f000 fb56 	bl	800dd18 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f7fd ffe1 	bl	800b634 <pbuf_free>
        return;
 800d672:	e1fd      	b.n	800da70 <tcp_input+0x7ec>
        continue;
 800d674:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	61fb      	str	r3, [r7, #28]
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1bc      	bne.n	800d5fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d682:	2300      	movs	r3, #0
 800d684:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d686:	4b2f      	ldr	r3, [pc, #188]	; (800d744 <tcp_input+0x4c0>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	617b      	str	r3, [r7, #20]
 800d68c:	e02a      	b.n	800d6e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	7a1b      	ldrb	r3, [r3, #8]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00c      	beq.n	800d6b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	7a1a      	ldrb	r2, [r3, #8]
 800d69a:	4b22      	ldr	r3, [pc, #136]	; (800d724 <tcp_input+0x4a0>)
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d002      	beq.n	800d6b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	61bb      	str	r3, [r7, #24]
        continue;
 800d6ae:	e016      	b.n	800d6de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	8ada      	ldrh	r2, [r3, #22]
 800d6b4:	4b1a      	ldr	r3, [pc, #104]	; (800d720 <tcp_input+0x49c>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	885b      	ldrh	r3, [r3, #2]
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d10c      	bne.n	800d6da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	4b17      	ldr	r3, [pc, #92]	; (800d724 <tcp_input+0x4a0>)
 800d6c6:	695b      	ldr	r3, [r3, #20]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d00f      	beq.n	800d6ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00d      	beq.n	800d6ee <tcp_input+0x46a>
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d009      	beq.n	800d6ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	617b      	str	r3, [r7, #20]
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1d1      	bne.n	800d68e <tcp_input+0x40a>
 800d6ea:	e000      	b.n	800d6ee <tcp_input+0x46a>
            break;
 800d6ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d029      	beq.n	800d748 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00a      	beq.n	800d710 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	68da      	ldr	r2, [r3, #12]
 800d6fe:	69bb      	ldr	r3, [r7, #24]
 800d700:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d702:	4b10      	ldr	r3, [pc, #64]	; (800d744 <tcp_input+0x4c0>)
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d70a:	4a0e      	ldr	r2, [pc, #56]	; (800d744 <tcp_input+0x4c0>)
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d710:	6978      	ldr	r0, [r7, #20]
 800d712:	f000 fa03 	bl	800db1c <tcp_listen_input>
      }
      pbuf_free(p);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7fd ff8c 	bl	800b634 <pbuf_free>
      return;
 800d71c:	e1a8      	b.n	800da70 <tcp_input+0x7ec>
 800d71e:	bf00      	nop
 800d720:	24008148 	.word	0x24008148
 800d724:	240051f8 	.word	0x240051f8
 800d728:	08014018 	.word	0x08014018
 800d72c:	08014170 	.word	0x08014170
 800d730:	08014090 	.word	0x08014090
 800d734:	2400812c 	.word	0x2400812c
 800d738:	0801419c 	.word	0x0801419c
 800d73c:	24008130 	.word	0x24008130
 800d740:	080141c8 	.word	0x080141c8
 800d744:	24008128 	.word	0x24008128
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f000 8158 	beq.w	800da00 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d750:	4b95      	ldr	r3, [pc, #596]	; (800d9a8 <tcp_input+0x724>)
 800d752:	2200      	movs	r2, #0
 800d754:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	891a      	ldrh	r2, [r3, #8]
 800d75a:	4b93      	ldr	r3, [pc, #588]	; (800d9a8 <tcp_input+0x724>)
 800d75c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d75e:	4a92      	ldr	r2, [pc, #584]	; (800d9a8 <tcp_input+0x724>)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d764:	4b91      	ldr	r3, [pc, #580]	; (800d9ac <tcp_input+0x728>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a8f      	ldr	r2, [pc, #572]	; (800d9a8 <tcp_input+0x724>)
 800d76a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d76c:	4b90      	ldr	r3, [pc, #576]	; (800d9b0 <tcp_input+0x72c>)
 800d76e:	2200      	movs	r2, #0
 800d770:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d772:	4b90      	ldr	r3, [pc, #576]	; (800d9b4 <tcp_input+0x730>)
 800d774:	2200      	movs	r2, #0
 800d776:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d778:	4b8f      	ldr	r3, [pc, #572]	; (800d9b8 <tcp_input+0x734>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d77e:	4b8f      	ldr	r3, [pc, #572]	; (800d9bc <tcp_input+0x738>)
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	f003 0308 	and.w	r3, r3, #8
 800d786:	2b00      	cmp	r3, #0
 800d788:	d006      	beq.n	800d798 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	7b5b      	ldrb	r3, [r3, #13]
 800d78e:	f043 0301 	orr.w	r3, r3, #1
 800d792:	b2da      	uxtb	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d017      	beq.n	800d7d0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d7a0:	69f8      	ldr	r0, [r7, #28]
 800d7a2:	f7ff f929 	bl	800c9f8 <tcp_process_refused_data>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	f113 0f0d 	cmn.w	r3, #13
 800d7ac:	d007      	beq.n	800d7be <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00c      	beq.n	800d7d0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d7b6:	4b82      	ldr	r3, [pc, #520]	; (800d9c0 <tcp_input+0x73c>)
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d008      	beq.n	800d7d0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f040 80e3 	bne.w	800d98e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d7c8:	69f8      	ldr	r0, [r7, #28]
 800d7ca:	f003 f9ad 	bl	8010b28 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d7ce:	e0de      	b.n	800d98e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d7d0:	4a7c      	ldr	r2, [pc, #496]	; (800d9c4 <tcp_input+0x740>)
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d7d6:	69f8      	ldr	r0, [r7, #28]
 800d7d8:	f000 fb18 	bl	800de0c <tcp_process>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d7e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7e4:	f113 0f0d 	cmn.w	r3, #13
 800d7e8:	f000 80d3 	beq.w	800d992 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d7ec:	4b71      	ldr	r3, [pc, #452]	; (800d9b4 <tcp_input+0x730>)
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	f003 0308 	and.w	r3, r3, #8
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d015      	beq.n	800d824 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d008      	beq.n	800d814 <tcp_input+0x590>
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d808:	69fa      	ldr	r2, [r7, #28]
 800d80a:	6912      	ldr	r2, [r2, #16]
 800d80c:	f06f 010d 	mvn.w	r1, #13
 800d810:	4610      	mov	r0, r2
 800d812:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d814:	69f9      	ldr	r1, [r7, #28]
 800d816:	486c      	ldr	r0, [pc, #432]	; (800d9c8 <tcp_input+0x744>)
 800d818:	f7ff fbbc 	bl	800cf94 <tcp_pcb_remove>
        tcp_free(pcb);
 800d81c:	69f8      	ldr	r0, [r7, #28]
 800d81e:	f7fe f9a9 	bl	800bb74 <tcp_free>
 800d822:	e0da      	b.n	800d9da <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d824:	2300      	movs	r3, #0
 800d826:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d828:	4b63      	ldr	r3, [pc, #396]	; (800d9b8 <tcp_input+0x734>)
 800d82a:	881b      	ldrh	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d01d      	beq.n	800d86c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d830:	4b61      	ldr	r3, [pc, #388]	; (800d9b8 <tcp_input+0x734>)
 800d832:	881b      	ldrh	r3, [r3, #0]
 800d834:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00a      	beq.n	800d856 <tcp_input+0x5d2>
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d846:	69fa      	ldr	r2, [r7, #28]
 800d848:	6910      	ldr	r0, [r2, #16]
 800d84a:	89fa      	ldrh	r2, [r7, #14]
 800d84c:	69f9      	ldr	r1, [r7, #28]
 800d84e:	4798      	blx	r3
 800d850:	4603      	mov	r3, r0
 800d852:	74fb      	strb	r3, [r7, #19]
 800d854:	e001      	b.n	800d85a <tcp_input+0x5d6>
 800d856:	2300      	movs	r3, #0
 800d858:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d85a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d85e:	f113 0f0d 	cmn.w	r3, #13
 800d862:	f000 8098 	beq.w	800d996 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d866:	4b54      	ldr	r3, [pc, #336]	; (800d9b8 <tcp_input+0x734>)
 800d868:	2200      	movs	r2, #0
 800d86a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d86c:	69f8      	ldr	r0, [r7, #28]
 800d86e:	f000 f915 	bl	800da9c <tcp_input_delayed_close>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	f040 8090 	bne.w	800d99a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d87a:	4b4d      	ldr	r3, [pc, #308]	; (800d9b0 <tcp_input+0x72c>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d041      	beq.n	800d906 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d886:	2b00      	cmp	r3, #0
 800d888:	d006      	beq.n	800d898 <tcp_input+0x614>
 800d88a:	4b50      	ldr	r3, [pc, #320]	; (800d9cc <tcp_input+0x748>)
 800d88c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d890:	494f      	ldr	r1, [pc, #316]	; (800d9d0 <tcp_input+0x74c>)
 800d892:	4850      	ldr	r0, [pc, #320]	; (800d9d4 <tcp_input+0x750>)
 800d894:	f003 fe06 	bl	80114a4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	8b5b      	ldrh	r3, [r3, #26]
 800d89c:	f003 0310 	and.w	r3, r3, #16
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d008      	beq.n	800d8b6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d8a4:	4b42      	ldr	r3, [pc, #264]	; (800d9b0 <tcp_input+0x72c>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fd fec3 	bl	800b634 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d8ae:	69f8      	ldr	r0, [r7, #28]
 800d8b0:	f7fe fc48 	bl	800c144 <tcp_abort>
            goto aborted;
 800d8b4:	e091      	b.n	800d9da <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00c      	beq.n	800d8da <tcp_input+0x656>
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	6918      	ldr	r0, [r3, #16]
 800d8ca:	4b39      	ldr	r3, [pc, #228]	; (800d9b0 <tcp_input+0x72c>)
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	69f9      	ldr	r1, [r7, #28]
 800d8d2:	47a0      	blx	r4
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	74fb      	strb	r3, [r7, #19]
 800d8d8:	e008      	b.n	800d8ec <tcp_input+0x668>
 800d8da:	4b35      	ldr	r3, [pc, #212]	; (800d9b0 <tcp_input+0x72c>)
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	69f9      	ldr	r1, [r7, #28]
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	f7ff f95e 	bl	800cba4 <tcp_recv_null>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d8ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8f0:	f113 0f0d 	cmn.w	r3, #13
 800d8f4:	d053      	beq.n	800d99e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d8f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d003      	beq.n	800d906 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d8fe:	4b2c      	ldr	r3, [pc, #176]	; (800d9b0 <tcp_input+0x72c>)
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d906:	4b2b      	ldr	r3, [pc, #172]	; (800d9b4 <tcp_input+0x730>)
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	f003 0320 	and.w	r3, r3, #32
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d030      	beq.n	800d974 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d916:	2b00      	cmp	r3, #0
 800d918:	d009      	beq.n	800d92e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d91e:	7b5a      	ldrb	r2, [r3, #13]
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d924:	f042 0220 	orr.w	r2, r2, #32
 800d928:	b2d2      	uxtb	r2, r2
 800d92a:	735a      	strb	r2, [r3, #13]
 800d92c:	e022      	b.n	800d974 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d932:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d936:	d005      	beq.n	800d944 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d938:	69fb      	ldr	r3, [r7, #28]
 800d93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d93c:	3301      	adds	r3, #1
 800d93e:	b29a      	uxth	r2, r3
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00b      	beq.n	800d966 <tcp_input+0x6e2>
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	6918      	ldr	r0, [r3, #16]
 800d958:	2300      	movs	r3, #0
 800d95a:	2200      	movs	r2, #0
 800d95c:	69f9      	ldr	r1, [r7, #28]
 800d95e:	47a0      	blx	r4
 800d960:	4603      	mov	r3, r0
 800d962:	74fb      	strb	r3, [r7, #19]
 800d964:	e001      	b.n	800d96a <tcp_input+0x6e6>
 800d966:	2300      	movs	r3, #0
 800d968:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d96a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d96e:	f113 0f0d 	cmn.w	r3, #13
 800d972:	d016      	beq.n	800d9a2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d974:	4b13      	ldr	r3, [pc, #76]	; (800d9c4 <tcp_input+0x740>)
 800d976:	2200      	movs	r2, #0
 800d978:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d97a:	69f8      	ldr	r0, [r7, #28]
 800d97c:	f000 f88e 	bl	800da9c <tcp_input_delayed_close>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d128      	bne.n	800d9d8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d986:	69f8      	ldr	r0, [r7, #28]
 800d988:	f002 fac8 	bl	800ff1c <tcp_output>
 800d98c:	e025      	b.n	800d9da <tcp_input+0x756>
        goto aborted;
 800d98e:	bf00      	nop
 800d990:	e023      	b.n	800d9da <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d992:	bf00      	nop
 800d994:	e021      	b.n	800d9da <tcp_input+0x756>
              goto aborted;
 800d996:	bf00      	nop
 800d998:	e01f      	b.n	800d9da <tcp_input+0x756>
          goto aborted;
 800d99a:	bf00      	nop
 800d99c:	e01d      	b.n	800d9da <tcp_input+0x756>
            goto aborted;
 800d99e:	bf00      	nop
 800d9a0:	e01b      	b.n	800d9da <tcp_input+0x756>
              goto aborted;
 800d9a2:	bf00      	nop
 800d9a4:	e019      	b.n	800d9da <tcp_input+0x756>
 800d9a6:	bf00      	nop
 800d9a8:	24008138 	.word	0x24008138
 800d9ac:	24008148 	.word	0x24008148
 800d9b0:	24008168 	.word	0x24008168
 800d9b4:	24008165 	.word	0x24008165
 800d9b8:	24008160 	.word	0x24008160
 800d9bc:	24008164 	.word	0x24008164
 800d9c0:	24008162 	.word	0x24008162
 800d9c4:	2400816c 	.word	0x2400816c
 800d9c8:	2400812c 	.word	0x2400812c
 800d9cc:	08014018 	.word	0x08014018
 800d9d0:	080141f8 	.word	0x080141f8
 800d9d4:	08014090 	.word	0x08014090
          goto aborted;
 800d9d8:	bf00      	nop
    tcp_input_pcb = NULL;
 800d9da:	4b27      	ldr	r3, [pc, #156]	; (800da78 <tcp_input+0x7f4>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d9e0:	4b26      	ldr	r3, [pc, #152]	; (800da7c <tcp_input+0x7f8>)
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d9e6:	4b26      	ldr	r3, [pc, #152]	; (800da80 <tcp_input+0x7fc>)
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d03f      	beq.n	800da6e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d9ee:	4b24      	ldr	r3, [pc, #144]	; (800da80 <tcp_input+0x7fc>)
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fd fe1e 	bl	800b634 <pbuf_free>
      inseg.p = NULL;
 800d9f8:	4b21      	ldr	r3, [pc, #132]	; (800da80 <tcp_input+0x7fc>)
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d9fe:	e036      	b.n	800da6e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800da00:	4b20      	ldr	r3, [pc, #128]	; (800da84 <tcp_input+0x800>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	899b      	ldrh	r3, [r3, #12]
 800da06:	b29b      	uxth	r3, r3
 800da08:	4618      	mov	r0, r3
 800da0a:	f7f9 ff75 	bl	80078f8 <lwip_htons>
 800da0e:	4603      	mov	r3, r0
 800da10:	b2db      	uxtb	r3, r3
 800da12:	f003 0304 	and.w	r3, r3, #4
 800da16:	2b00      	cmp	r3, #0
 800da18:	d118      	bne.n	800da4c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da1a:	4b1b      	ldr	r3, [pc, #108]	; (800da88 <tcp_input+0x804>)
 800da1c:	6819      	ldr	r1, [r3, #0]
 800da1e:	4b1b      	ldr	r3, [pc, #108]	; (800da8c <tcp_input+0x808>)
 800da20:	881b      	ldrh	r3, [r3, #0]
 800da22:	461a      	mov	r2, r3
 800da24:	4b1a      	ldr	r3, [pc, #104]	; (800da90 <tcp_input+0x80c>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da2a:	4b16      	ldr	r3, [pc, #88]	; (800da84 <tcp_input+0x800>)
 800da2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da2e:	885b      	ldrh	r3, [r3, #2]
 800da30:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da32:	4a14      	ldr	r2, [pc, #80]	; (800da84 <tcp_input+0x800>)
 800da34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da36:	8812      	ldrh	r2, [r2, #0]
 800da38:	b292      	uxth	r2, r2
 800da3a:	9202      	str	r2, [sp, #8]
 800da3c:	9301      	str	r3, [sp, #4]
 800da3e:	4b15      	ldr	r3, [pc, #84]	; (800da94 <tcp_input+0x810>)
 800da40:	9300      	str	r3, [sp, #0]
 800da42:	4b15      	ldr	r3, [pc, #84]	; (800da98 <tcp_input+0x814>)
 800da44:	4602      	mov	r2, r0
 800da46:	2000      	movs	r0, #0
 800da48:	f003 f81c 	bl	8010a84 <tcp_rst>
    pbuf_free(p);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7fd fdf1 	bl	800b634 <pbuf_free>
  return;
 800da52:	e00c      	b.n	800da6e <tcp_input+0x7ea>
    goto dropped;
 800da54:	bf00      	nop
 800da56:	e006      	b.n	800da66 <tcp_input+0x7e2>
    goto dropped;
 800da58:	bf00      	nop
 800da5a:	e004      	b.n	800da66 <tcp_input+0x7e2>
    goto dropped;
 800da5c:	bf00      	nop
 800da5e:	e002      	b.n	800da66 <tcp_input+0x7e2>
      goto dropped;
 800da60:	bf00      	nop
 800da62:	e000      	b.n	800da66 <tcp_input+0x7e2>
      goto dropped;
 800da64:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7fd fde4 	bl	800b634 <pbuf_free>
 800da6c:	e000      	b.n	800da70 <tcp_input+0x7ec>
  return;
 800da6e:	bf00      	nop
}
 800da70:	3724      	adds	r7, #36	; 0x24
 800da72:	46bd      	mov	sp, r7
 800da74:	bd90      	pop	{r4, r7, pc}
 800da76:	bf00      	nop
 800da78:	2400816c 	.word	0x2400816c
 800da7c:	24008168 	.word	0x24008168
 800da80:	24008138 	.word	0x24008138
 800da84:	24008148 	.word	0x24008148
 800da88:	2400815c 	.word	0x2400815c
 800da8c:	24008162 	.word	0x24008162
 800da90:	24008158 	.word	0x24008158
 800da94:	24005208 	.word	0x24005208
 800da98:	2400520c 	.word	0x2400520c

0800da9c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d106      	bne.n	800dab8 <tcp_input_delayed_close+0x1c>
 800daaa:	4b17      	ldr	r3, [pc, #92]	; (800db08 <tcp_input_delayed_close+0x6c>)
 800daac:	f240 225a 	movw	r2, #602	; 0x25a
 800dab0:	4916      	ldr	r1, [pc, #88]	; (800db0c <tcp_input_delayed_close+0x70>)
 800dab2:	4817      	ldr	r0, [pc, #92]	; (800db10 <tcp_input_delayed_close+0x74>)
 800dab4:	f003 fcf6 	bl	80114a4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dab8:	4b16      	ldr	r3, [pc, #88]	; (800db14 <tcp_input_delayed_close+0x78>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	f003 0310 	and.w	r3, r3, #16
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d01c      	beq.n	800dafe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	8b5b      	ldrh	r3, [r3, #26]
 800dac8:	f003 0310 	and.w	r3, r3, #16
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d10d      	bne.n	800daec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d008      	beq.n	800daec <tcp_input_delayed_close+0x50>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	6912      	ldr	r2, [r2, #16]
 800dae4:	f06f 010e 	mvn.w	r1, #14
 800dae8:	4610      	mov	r0, r2
 800daea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800daec:	6879      	ldr	r1, [r7, #4]
 800daee:	480a      	ldr	r0, [pc, #40]	; (800db18 <tcp_input_delayed_close+0x7c>)
 800daf0:	f7ff fa50 	bl	800cf94 <tcp_pcb_remove>
    tcp_free(pcb);
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7fe f83d 	bl	800bb74 <tcp_free>
    return 1;
 800dafa:	2301      	movs	r3, #1
 800dafc:	e000      	b.n	800db00 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dafe:	2300      	movs	r3, #0
}
 800db00:	4618      	mov	r0, r3
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	08014018 	.word	0x08014018
 800db0c:	08014214 	.word	0x08014214
 800db10:	08014090 	.word	0x08014090
 800db14:	24008165 	.word	0x24008165
 800db18:	2400812c 	.word	0x2400812c

0800db1c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800db1c:	b590      	push	{r4, r7, lr}
 800db1e:	b08b      	sub	sp, #44	; 0x2c
 800db20:	af04      	add	r7, sp, #16
 800db22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800db24:	4b6f      	ldr	r3, [pc, #444]	; (800dce4 <tcp_listen_input+0x1c8>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	f003 0304 	and.w	r3, r3, #4
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f040 80d2 	bne.w	800dcd6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d106      	bne.n	800db46 <tcp_listen_input+0x2a>
 800db38:	4b6b      	ldr	r3, [pc, #428]	; (800dce8 <tcp_listen_input+0x1cc>)
 800db3a:	f240 2281 	movw	r2, #641	; 0x281
 800db3e:	496b      	ldr	r1, [pc, #428]	; (800dcec <tcp_listen_input+0x1d0>)
 800db40:	486b      	ldr	r0, [pc, #428]	; (800dcf0 <tcp_listen_input+0x1d4>)
 800db42:	f003 fcaf 	bl	80114a4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800db46:	4b67      	ldr	r3, [pc, #412]	; (800dce4 <tcp_listen_input+0x1c8>)
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	f003 0310 	and.w	r3, r3, #16
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d019      	beq.n	800db86 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db52:	4b68      	ldr	r3, [pc, #416]	; (800dcf4 <tcp_listen_input+0x1d8>)
 800db54:	6819      	ldr	r1, [r3, #0]
 800db56:	4b68      	ldr	r3, [pc, #416]	; (800dcf8 <tcp_listen_input+0x1dc>)
 800db58:	881b      	ldrh	r3, [r3, #0]
 800db5a:	461a      	mov	r2, r3
 800db5c:	4b67      	ldr	r3, [pc, #412]	; (800dcfc <tcp_listen_input+0x1e0>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db62:	4b67      	ldr	r3, [pc, #412]	; (800dd00 <tcp_listen_input+0x1e4>)
 800db64:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db66:	885b      	ldrh	r3, [r3, #2]
 800db68:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db6a:	4a65      	ldr	r2, [pc, #404]	; (800dd00 <tcp_listen_input+0x1e4>)
 800db6c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db6e:	8812      	ldrh	r2, [r2, #0]
 800db70:	b292      	uxth	r2, r2
 800db72:	9202      	str	r2, [sp, #8]
 800db74:	9301      	str	r3, [sp, #4]
 800db76:	4b63      	ldr	r3, [pc, #396]	; (800dd04 <tcp_listen_input+0x1e8>)
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	4b63      	ldr	r3, [pc, #396]	; (800dd08 <tcp_listen_input+0x1ec>)
 800db7c:	4602      	mov	r2, r0
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f002 ff80 	bl	8010a84 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800db84:	e0a9      	b.n	800dcda <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800db86:	4b57      	ldr	r3, [pc, #348]	; (800dce4 <tcp_listen_input+0x1c8>)
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	f003 0302 	and.w	r3, r3, #2
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 80a3 	beq.w	800dcda <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	7d5b      	ldrb	r3, [r3, #21]
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff f927 	bl	800cdec <tcp_alloc>
 800db9e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d111      	bne.n	800dbca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	699b      	ldr	r3, [r3, #24]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <tcp_listen_input+0xa8>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	699b      	ldr	r3, [r3, #24]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	6910      	ldr	r0, [r2, #16]
 800dbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbba:	2100      	movs	r1, #0
 800dbbc:	4798      	blx	r3
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	73bb      	strb	r3, [r7, #14]
      return;
 800dbc2:	e08b      	b.n	800dcdc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dbc4:	23f0      	movs	r3, #240	; 0xf0
 800dbc6:	73bb      	strb	r3, [r7, #14]
      return;
 800dbc8:	e088      	b.n	800dcdc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800dbca:	4b50      	ldr	r3, [pc, #320]	; (800dd0c <tcp_listen_input+0x1f0>)
 800dbcc:	695a      	ldr	r2, [r3, #20]
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800dbd2:	4b4e      	ldr	r3, [pc, #312]	; (800dd0c <tcp_listen_input+0x1f0>)
 800dbd4:	691a      	ldr	r2, [r3, #16]
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	8ada      	ldrh	r2, [r3, #22]
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800dbe2:	4b47      	ldr	r3, [pc, #284]	; (800dd00 <tcp_listen_input+0x1e4>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	2203      	movs	r2, #3
 800dbf2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dbf4:	4b41      	ldr	r3, [pc, #260]	; (800dcfc <tcp_listen_input+0x1e0>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800dc06:	6978      	ldr	r0, [r7, #20]
 800dc08:	f7ff fa58 	bl	800d0bc <tcp_next_iss>
 800dc0c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	693a      	ldr	r2, [r7, #16]
 800dc12:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	693a      	ldr	r2, [r7, #16]
 800dc1e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	693a      	ldr	r2, [r7, #16]
 800dc24:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800dc26:	4b35      	ldr	r3, [pc, #212]	; (800dcfc <tcp_listen_input+0x1e0>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	1e5a      	subs	r2, r3, #1
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	691a      	ldr	r2, [r3, #16]
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	7a5b      	ldrb	r3, [r3, #9]
 800dc42:	f003 030c 	and.w	r3, r3, #12
 800dc46:	b2da      	uxtb	r2, r3
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	7a1a      	ldrb	r2, [r3, #8]
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800dc54:	4b2e      	ldr	r3, [pc, #184]	; (800dd10 <tcp_listen_input+0x1f4>)
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	60da      	str	r2, [r3, #12]
 800dc5c:	4a2c      	ldr	r2, [pc, #176]	; (800dd10 <tcp_listen_input+0x1f4>)
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	6013      	str	r3, [r2, #0]
 800dc62:	f003 f8d1 	bl	8010e08 <tcp_timer_needed>
 800dc66:	4b2b      	ldr	r3, [pc, #172]	; (800dd14 <tcp_listen_input+0x1f8>)
 800dc68:	2201      	movs	r2, #1
 800dc6a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800dc6c:	6978      	ldr	r0, [r7, #20]
 800dc6e:	f001 fd8f 	bl	800f790 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800dc72:	4b23      	ldr	r3, [pc, #140]	; (800dd00 <tcp_listen_input+0x1e4>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	89db      	ldrh	r3, [r3, #14]
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	3304      	adds	r3, #4
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fb f905 	bl	8008ea4 <ip4_route>
 800dc9a:	4601      	mov	r1, r0
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	3304      	adds	r3, #4
 800dca0:	461a      	mov	r2, r3
 800dca2:	4620      	mov	r0, r4
 800dca4:	f7ff fa30 	bl	800d108 <tcp_eff_send_mss_netif>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	461a      	mov	r2, r3
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800dcb0:	2112      	movs	r1, #18
 800dcb2:	6978      	ldr	r0, [r7, #20]
 800dcb4:	f002 f844 	bl	800fd40 <tcp_enqueue_flags>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800dcbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d004      	beq.n	800dcce <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	6978      	ldr	r0, [r7, #20]
 800dcc8:	f7fe f97e 	bl	800bfc8 <tcp_abandon>
      return;
 800dccc:	e006      	b.n	800dcdc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800dcce:	6978      	ldr	r0, [r7, #20]
 800dcd0:	f002 f924 	bl	800ff1c <tcp_output>
  return;
 800dcd4:	e001      	b.n	800dcda <tcp_listen_input+0x1be>
    return;
 800dcd6:	bf00      	nop
 800dcd8:	e000      	b.n	800dcdc <tcp_listen_input+0x1c0>
  return;
 800dcda:	bf00      	nop
}
 800dcdc:	371c      	adds	r7, #28
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd90      	pop	{r4, r7, pc}
 800dce2:	bf00      	nop
 800dce4:	24008164 	.word	0x24008164
 800dce8:	08014018 	.word	0x08014018
 800dcec:	0801423c 	.word	0x0801423c
 800dcf0:	08014090 	.word	0x08014090
 800dcf4:	2400815c 	.word	0x2400815c
 800dcf8:	24008162 	.word	0x24008162
 800dcfc:	24008158 	.word	0x24008158
 800dd00:	24008148 	.word	0x24008148
 800dd04:	24005208 	.word	0x24005208
 800dd08:	2400520c 	.word	0x2400520c
 800dd0c:	240051f8 	.word	0x240051f8
 800dd10:	2400812c 	.word	0x2400812c
 800dd14:	24008134 	.word	0x24008134

0800dd18 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af04      	add	r7, sp, #16
 800dd1e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dd20:	4b2f      	ldr	r3, [pc, #188]	; (800dde0 <tcp_timewait_input+0xc8>)
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	f003 0304 	and.w	r3, r3, #4
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d153      	bne.n	800ddd4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d106      	bne.n	800dd40 <tcp_timewait_input+0x28>
 800dd32:	4b2c      	ldr	r3, [pc, #176]	; (800dde4 <tcp_timewait_input+0xcc>)
 800dd34:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dd38:	492b      	ldr	r1, [pc, #172]	; (800dde8 <tcp_timewait_input+0xd0>)
 800dd3a:	482c      	ldr	r0, [pc, #176]	; (800ddec <tcp_timewait_input+0xd4>)
 800dd3c:	f003 fbb2 	bl	80114a4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dd40:	4b27      	ldr	r3, [pc, #156]	; (800dde0 <tcp_timewait_input+0xc8>)
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	f003 0302 	and.w	r3, r3, #2
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d02a      	beq.n	800dda2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dd4c:	4b28      	ldr	r3, [pc, #160]	; (800ddf0 <tcp_timewait_input+0xd8>)
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	db2d      	blt.n	800ddb6 <tcp_timewait_input+0x9e>
 800dd5a:	4b25      	ldr	r3, [pc, #148]	; (800ddf0 <tcp_timewait_input+0xd8>)
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd62:	6879      	ldr	r1, [r7, #4]
 800dd64:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd66:	440b      	add	r3, r1
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	dc23      	bgt.n	800ddb6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd6e:	4b21      	ldr	r3, [pc, #132]	; (800ddf4 <tcp_timewait_input+0xdc>)
 800dd70:	6819      	ldr	r1, [r3, #0]
 800dd72:	4b21      	ldr	r3, [pc, #132]	; (800ddf8 <tcp_timewait_input+0xe0>)
 800dd74:	881b      	ldrh	r3, [r3, #0]
 800dd76:	461a      	mov	r2, r3
 800dd78:	4b1d      	ldr	r3, [pc, #116]	; (800ddf0 <tcp_timewait_input+0xd8>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd7e:	4b1f      	ldr	r3, [pc, #124]	; (800ddfc <tcp_timewait_input+0xe4>)
 800dd80:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd82:	885b      	ldrh	r3, [r3, #2]
 800dd84:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd86:	4a1d      	ldr	r2, [pc, #116]	; (800ddfc <tcp_timewait_input+0xe4>)
 800dd88:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd8a:	8812      	ldrh	r2, [r2, #0]
 800dd8c:	b292      	uxth	r2, r2
 800dd8e:	9202      	str	r2, [sp, #8]
 800dd90:	9301      	str	r3, [sp, #4]
 800dd92:	4b1b      	ldr	r3, [pc, #108]	; (800de00 <tcp_timewait_input+0xe8>)
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	4b1b      	ldr	r3, [pc, #108]	; (800de04 <tcp_timewait_input+0xec>)
 800dd98:	4602      	mov	r2, r0
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f002 fe72 	bl	8010a84 <tcp_rst>
      return;
 800dda0:	e01b      	b.n	800ddda <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800dda2:	4b0f      	ldr	r3, [pc, #60]	; (800dde0 <tcp_timewait_input+0xc8>)
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	f003 0301 	and.w	r3, r3, #1
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d003      	beq.n	800ddb6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ddae:	4b16      	ldr	r3, [pc, #88]	; (800de08 <tcp_timewait_input+0xf0>)
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ddb6:	4b10      	ldr	r3, [pc, #64]	; (800ddf8 <tcp_timewait_input+0xe0>)
 800ddb8:	881b      	ldrh	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00c      	beq.n	800ddd8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	8b5b      	ldrh	r3, [r3, #26]
 800ddc2:	f043 0302 	orr.w	r3, r3, #2
 800ddc6:	b29a      	uxth	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f002 f8a5 	bl	800ff1c <tcp_output>
  }
  return;
 800ddd2:	e001      	b.n	800ddd8 <tcp_timewait_input+0xc0>
    return;
 800ddd4:	bf00      	nop
 800ddd6:	e000      	b.n	800ddda <tcp_timewait_input+0xc2>
  return;
 800ddd8:	bf00      	nop
}
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	24008164 	.word	0x24008164
 800dde4:	08014018 	.word	0x08014018
 800dde8:	0801425c 	.word	0x0801425c
 800ddec:	08014090 	.word	0x08014090
 800ddf0:	24008158 	.word	0x24008158
 800ddf4:	2400815c 	.word	0x2400815c
 800ddf8:	24008162 	.word	0x24008162
 800ddfc:	24008148 	.word	0x24008148
 800de00:	24005208 	.word	0x24005208
 800de04:	2400520c 	.word	0x2400520c
 800de08:	24008120 	.word	0x24008120

0800de0c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800de0c:	b590      	push	{r4, r7, lr}
 800de0e:	b08d      	sub	sp, #52	; 0x34
 800de10:	af04      	add	r7, sp, #16
 800de12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800de14:	2300      	movs	r3, #0
 800de16:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800de18:	2300      	movs	r3, #0
 800de1a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d106      	bne.n	800de30 <tcp_process+0x24>
 800de22:	4b9d      	ldr	r3, [pc, #628]	; (800e098 <tcp_process+0x28c>)
 800de24:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800de28:	499c      	ldr	r1, [pc, #624]	; (800e09c <tcp_process+0x290>)
 800de2a:	489d      	ldr	r0, [pc, #628]	; (800e0a0 <tcp_process+0x294>)
 800de2c:	f003 fb3a 	bl	80114a4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800de30:	4b9c      	ldr	r3, [pc, #624]	; (800e0a4 <tcp_process+0x298>)
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	f003 0304 	and.w	r3, r3, #4
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d04e      	beq.n	800deda <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	7d1b      	ldrb	r3, [r3, #20]
 800de40:	2b02      	cmp	r3, #2
 800de42:	d108      	bne.n	800de56 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de48:	4b97      	ldr	r3, [pc, #604]	; (800e0a8 <tcp_process+0x29c>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d123      	bne.n	800de98 <tcp_process+0x8c>
        acceptable = 1;
 800de50:	2301      	movs	r3, #1
 800de52:	76fb      	strb	r3, [r7, #27]
 800de54:	e020      	b.n	800de98 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de5a:	4b94      	ldr	r3, [pc, #592]	; (800e0ac <tcp_process+0x2a0>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d102      	bne.n	800de68 <tcp_process+0x5c>
        acceptable = 1;
 800de62:	2301      	movs	r3, #1
 800de64:	76fb      	strb	r3, [r7, #27]
 800de66:	e017      	b.n	800de98 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800de68:	4b90      	ldr	r3, [pc, #576]	; (800e0ac <tcp_process+0x2a0>)
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de70:	1ad3      	subs	r3, r2, r3
 800de72:	2b00      	cmp	r3, #0
 800de74:	db10      	blt.n	800de98 <tcp_process+0x8c>
 800de76:	4b8d      	ldr	r3, [pc, #564]	; (800e0ac <tcp_process+0x2a0>)
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7e:	6879      	ldr	r1, [r7, #4]
 800de80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800de82:	440b      	add	r3, r1
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	2b00      	cmp	r3, #0
 800de88:	dc06      	bgt.n	800de98 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	8b5b      	ldrh	r3, [r3, #26]
 800de8e:	f043 0302 	orr.w	r3, r3, #2
 800de92:	b29a      	uxth	r2, r3
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800de98:	7efb      	ldrb	r3, [r7, #27]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d01b      	beq.n	800ded6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	7d1b      	ldrb	r3, [r3, #20]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d106      	bne.n	800deb4 <tcp_process+0xa8>
 800dea6:	4b7c      	ldr	r3, [pc, #496]	; (800e098 <tcp_process+0x28c>)
 800dea8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800deac:	4980      	ldr	r1, [pc, #512]	; (800e0b0 <tcp_process+0x2a4>)
 800deae:	487c      	ldr	r0, [pc, #496]	; (800e0a0 <tcp_process+0x294>)
 800deb0:	f003 faf8 	bl	80114a4 <iprintf>
      recv_flags |= TF_RESET;
 800deb4:	4b7f      	ldr	r3, [pc, #508]	; (800e0b4 <tcp_process+0x2a8>)
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	f043 0308 	orr.w	r3, r3, #8
 800debc:	b2da      	uxtb	r2, r3
 800debe:	4b7d      	ldr	r3, [pc, #500]	; (800e0b4 <tcp_process+0x2a8>)
 800dec0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	8b5b      	ldrh	r3, [r3, #26]
 800dec6:	f023 0301 	bic.w	r3, r3, #1
 800deca:	b29a      	uxth	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ded0:	f06f 030d 	mvn.w	r3, #13
 800ded4:	e37a      	b.n	800e5cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ded6:	2300      	movs	r3, #0
 800ded8:	e378      	b.n	800e5cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800deda:	4b72      	ldr	r3, [pc, #456]	; (800e0a4 <tcp_process+0x298>)
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	f003 0302 	and.w	r3, r3, #2
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d010      	beq.n	800df08 <tcp_process+0xfc>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	7d1b      	ldrb	r3, [r3, #20]
 800deea:	2b02      	cmp	r3, #2
 800deec:	d00c      	beq.n	800df08 <tcp_process+0xfc>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	7d1b      	ldrb	r3, [r3, #20]
 800def2:	2b03      	cmp	r3, #3
 800def4:	d008      	beq.n	800df08 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	8b5b      	ldrh	r3, [r3, #26]
 800defa:	f043 0302 	orr.w	r3, r3, #2
 800defe:	b29a      	uxth	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800df04:	2300      	movs	r3, #0
 800df06:	e361      	b.n	800e5cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	8b5b      	ldrh	r3, [r3, #26]
 800df0c:	f003 0310 	and.w	r3, r3, #16
 800df10:	2b00      	cmp	r3, #0
 800df12:	d103      	bne.n	800df1c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800df14:	4b68      	ldr	r3, [pc, #416]	; (800e0b8 <tcp_process+0x2ac>)
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f001 fc2f 	bl	800f790 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	7d1b      	ldrb	r3, [r3, #20]
 800df36:	3b02      	subs	r3, #2
 800df38:	2b07      	cmp	r3, #7
 800df3a:	f200 8337 	bhi.w	800e5ac <tcp_process+0x7a0>
 800df3e:	a201      	add	r2, pc, #4	; (adr r2, 800df44 <tcp_process+0x138>)
 800df40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df44:	0800df65 	.word	0x0800df65
 800df48:	0800e195 	.word	0x0800e195
 800df4c:	0800e30d 	.word	0x0800e30d
 800df50:	0800e337 	.word	0x0800e337
 800df54:	0800e45b 	.word	0x0800e45b
 800df58:	0800e30d 	.word	0x0800e30d
 800df5c:	0800e4e7 	.word	0x0800e4e7
 800df60:	0800e577 	.word	0x0800e577
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800df64:	4b4f      	ldr	r3, [pc, #316]	; (800e0a4 <tcp_process+0x298>)
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	f003 0310 	and.w	r3, r3, #16
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f000 80e4 	beq.w	800e13a <tcp_process+0x32e>
 800df72:	4b4c      	ldr	r3, [pc, #304]	; (800e0a4 <tcp_process+0x298>)
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	f003 0302 	and.w	r3, r3, #2
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f000 80dd 	beq.w	800e13a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df84:	1c5a      	adds	r2, r3, #1
 800df86:	4b48      	ldr	r3, [pc, #288]	; (800e0a8 <tcp_process+0x29c>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	f040 80d5 	bne.w	800e13a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800df90:	4b46      	ldr	r3, [pc, #280]	; (800e0ac <tcp_process+0x2a0>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	1c5a      	adds	r2, r3, #1
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800dfa2:	4b41      	ldr	r3, [pc, #260]	; (800e0a8 <tcp_process+0x29c>)
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800dfaa:	4b44      	ldr	r3, [pc, #272]	; (800e0bc <tcp_process+0x2b0>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	89db      	ldrh	r3, [r3, #14]
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800dfc4:	4b39      	ldr	r3, [pc, #228]	; (800e0ac <tcp_process+0x2a0>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	1e5a      	subs	r2, r3, #1
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2204      	movs	r2, #4
 800dfd2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	3304      	adds	r3, #4
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fa ff61 	bl	8008ea4 <ip4_route>
 800dfe2:	4601      	mov	r1, r0
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	3304      	adds	r3, #4
 800dfe8:	461a      	mov	r2, r3
 800dfea:	4620      	mov	r0, r4
 800dfec:	f7ff f88c 	bl	800d108 <tcp_eff_send_mss_netif>
 800dff0:	4603      	mov	r3, r0
 800dff2:	461a      	mov	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dffc:	009a      	lsls	r2, r3, #2
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	f241 111c 	movw	r1, #4380	; 0x111c
 800e008:	428b      	cmp	r3, r1
 800e00a:	bf38      	it	cc
 800e00c:	460b      	movcc	r3, r1
 800e00e:	429a      	cmp	r2, r3
 800e010:	d204      	bcs.n	800e01c <tcp_process+0x210>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e016:	009b      	lsls	r3, r3, #2
 800e018:	b29b      	uxth	r3, r3
 800e01a:	e00d      	b.n	800e038 <tcp_process+0x22c>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e020:	005b      	lsls	r3, r3, #1
 800e022:	f241 121c 	movw	r2, #4380	; 0x111c
 800e026:	4293      	cmp	r3, r2
 800e028:	d904      	bls.n	800e034 <tcp_process+0x228>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e02e:	005b      	lsls	r3, r3, #1
 800e030:	b29b      	uxth	r3, r3
 800e032:	e001      	b.n	800e038 <tcp_process+0x22c>
 800e034:	f241 131c 	movw	r3, #4380	; 0x111c
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e044:	2b00      	cmp	r3, #0
 800e046:	d106      	bne.n	800e056 <tcp_process+0x24a>
 800e048:	4b13      	ldr	r3, [pc, #76]	; (800e098 <tcp_process+0x28c>)
 800e04a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e04e:	491c      	ldr	r1, [pc, #112]	; (800e0c0 <tcp_process+0x2b4>)
 800e050:	4813      	ldr	r0, [pc, #76]	; (800e0a0 <tcp_process+0x294>)
 800e052:	f003 fa27 	bl	80114a4 <iprintf>
        --pcb->snd_queuelen;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e05c:	3b01      	subs	r3, #1
 800e05e:	b29a      	uxth	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e06a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d12a      	bne.n	800e0c8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e076:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d106      	bne.n	800e08c <tcp_process+0x280>
 800e07e:	4b06      	ldr	r3, [pc, #24]	; (800e098 <tcp_process+0x28c>)
 800e080:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e084:	490f      	ldr	r1, [pc, #60]	; (800e0c4 <tcp_process+0x2b8>)
 800e086:	4806      	ldr	r0, [pc, #24]	; (800e0a0 <tcp_process+0x294>)
 800e088:	f003 fa0c 	bl	80114a4 <iprintf>
          pcb->unsent = rseg->next;
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	66da      	str	r2, [r3, #108]	; 0x6c
 800e094:	e01c      	b.n	800e0d0 <tcp_process+0x2c4>
 800e096:	bf00      	nop
 800e098:	08014018 	.word	0x08014018
 800e09c:	0801427c 	.word	0x0801427c
 800e0a0:	08014090 	.word	0x08014090
 800e0a4:	24008164 	.word	0x24008164
 800e0a8:	2400815c 	.word	0x2400815c
 800e0ac:	24008158 	.word	0x24008158
 800e0b0:	08014298 	.word	0x08014298
 800e0b4:	24008165 	.word	0x24008165
 800e0b8:	24008120 	.word	0x24008120
 800e0bc:	24008148 	.word	0x24008148
 800e0c0:	080142b8 	.word	0x080142b8
 800e0c4:	080142d0 	.word	0x080142d0
        } else {
          pcb->unacked = rseg->next;
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e0d0:	69f8      	ldr	r0, [r7, #28]
 800e0d2:	f7fe fd22 	bl	800cb1a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d104      	bne.n	800e0e8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0e4:	861a      	strh	r2, [r3, #48]	; 0x30
 800e0e6:	e006      	b.n	800e0f6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d00a      	beq.n	800e116 <tcp_process+0x30a>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	6910      	ldr	r0, [r2, #16]
 800e10a:	2200      	movs	r2, #0
 800e10c:	6879      	ldr	r1, [r7, #4]
 800e10e:	4798      	blx	r3
 800e110:	4603      	mov	r3, r0
 800e112:	76bb      	strb	r3, [r7, #26]
 800e114:	e001      	b.n	800e11a <tcp_process+0x30e>
 800e116:	2300      	movs	r3, #0
 800e118:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e11a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e11e:	f113 0f0d 	cmn.w	r3, #13
 800e122:	d102      	bne.n	800e12a <tcp_process+0x31e>
          return ERR_ABRT;
 800e124:	f06f 030c 	mvn.w	r3, #12
 800e128:	e250      	b.n	800e5cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	8b5b      	ldrh	r3, [r3, #26]
 800e12e:	f043 0302 	orr.w	r3, r3, #2
 800e132:	b29a      	uxth	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e138:	e23a      	b.n	800e5b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e13a:	4b98      	ldr	r3, [pc, #608]	; (800e39c <tcp_process+0x590>)
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	f003 0310 	and.w	r3, r3, #16
 800e142:	2b00      	cmp	r3, #0
 800e144:	f000 8234 	beq.w	800e5b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e148:	4b95      	ldr	r3, [pc, #596]	; (800e3a0 <tcp_process+0x594>)
 800e14a:	6819      	ldr	r1, [r3, #0]
 800e14c:	4b95      	ldr	r3, [pc, #596]	; (800e3a4 <tcp_process+0x598>)
 800e14e:	881b      	ldrh	r3, [r3, #0]
 800e150:	461a      	mov	r2, r3
 800e152:	4b95      	ldr	r3, [pc, #596]	; (800e3a8 <tcp_process+0x59c>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e158:	4b94      	ldr	r3, [pc, #592]	; (800e3ac <tcp_process+0x5a0>)
 800e15a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e15c:	885b      	ldrh	r3, [r3, #2]
 800e15e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e160:	4a92      	ldr	r2, [pc, #584]	; (800e3ac <tcp_process+0x5a0>)
 800e162:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e164:	8812      	ldrh	r2, [r2, #0]
 800e166:	b292      	uxth	r2, r2
 800e168:	9202      	str	r2, [sp, #8]
 800e16a:	9301      	str	r3, [sp, #4]
 800e16c:	4b90      	ldr	r3, [pc, #576]	; (800e3b0 <tcp_process+0x5a4>)
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	4b90      	ldr	r3, [pc, #576]	; (800e3b4 <tcp_process+0x5a8>)
 800e172:	4602      	mov	r2, r0
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f002 fc85 	bl	8010a84 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e180:	2b05      	cmp	r3, #5
 800e182:	f200 8215 	bhi.w	800e5b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2200      	movs	r2, #0
 800e18a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f002 fa4f 	bl	8010630 <tcp_rexmit_rto>
      break;
 800e192:	e20d      	b.n	800e5b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e194:	4b81      	ldr	r3, [pc, #516]	; (800e39c <tcp_process+0x590>)
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	f003 0310 	and.w	r3, r3, #16
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f000 80a1 	beq.w	800e2e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e1a2:	4b7f      	ldr	r3, [pc, #508]	; (800e3a0 <tcp_process+0x594>)
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1aa:	1ad3      	subs	r3, r2, r3
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	db7e      	blt.n	800e2b0 <tcp_process+0x4a4>
 800e1b2:	4b7b      	ldr	r3, [pc, #492]	; (800e3a0 <tcp_process+0x594>)
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1ba:	1ad3      	subs	r3, r2, r3
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	dc77      	bgt.n	800e2b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2204      	movs	r2, #4
 800e1c4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d102      	bne.n	800e1d4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e1ce:	23fa      	movs	r3, #250	; 0xfa
 800e1d0:	76bb      	strb	r3, [r7, #26]
 800e1d2:	e01d      	b.n	800e210 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1d8:	699b      	ldr	r3, [r3, #24]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d106      	bne.n	800e1ec <tcp_process+0x3e0>
 800e1de:	4b76      	ldr	r3, [pc, #472]	; (800e3b8 <tcp_process+0x5ac>)
 800e1e0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e1e4:	4975      	ldr	r1, [pc, #468]	; (800e3bc <tcp_process+0x5b0>)
 800e1e6:	4876      	ldr	r0, [pc, #472]	; (800e3c0 <tcp_process+0x5b4>)
 800e1e8:	f003 f95c 	bl	80114a4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1f0:	699b      	ldr	r3, [r3, #24]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00a      	beq.n	800e20c <tcp_process+0x400>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	6910      	ldr	r0, [r2, #16]
 800e200:	2200      	movs	r2, #0
 800e202:	6879      	ldr	r1, [r7, #4]
 800e204:	4798      	blx	r3
 800e206:	4603      	mov	r3, r0
 800e208:	76bb      	strb	r3, [r7, #26]
 800e20a:	e001      	b.n	800e210 <tcp_process+0x404>
 800e20c:	23f0      	movs	r3, #240	; 0xf0
 800e20e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e210:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00a      	beq.n	800e22e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e218:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e21c:	f113 0f0d 	cmn.w	r3, #13
 800e220:	d002      	beq.n	800e228 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7fd ff8e 	bl	800c144 <tcp_abort>
            }
            return ERR_ABRT;
 800e228:	f06f 030c 	mvn.w	r3, #12
 800e22c:	e1ce      	b.n	800e5cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 fae0 	bl	800e7f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e234:	4b63      	ldr	r3, [pc, #396]	; (800e3c4 <tcp_process+0x5b8>)
 800e236:	881b      	ldrh	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d005      	beq.n	800e248 <tcp_process+0x43c>
            recv_acked--;
 800e23c:	4b61      	ldr	r3, [pc, #388]	; (800e3c4 <tcp_process+0x5b8>)
 800e23e:	881b      	ldrh	r3, [r3, #0]
 800e240:	3b01      	subs	r3, #1
 800e242:	b29a      	uxth	r2, r3
 800e244:	4b5f      	ldr	r3, [pc, #380]	; (800e3c4 <tcp_process+0x5b8>)
 800e246:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e24c:	009a      	lsls	r2, r3, #2
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e252:	005b      	lsls	r3, r3, #1
 800e254:	f241 111c 	movw	r1, #4380	; 0x111c
 800e258:	428b      	cmp	r3, r1
 800e25a:	bf38      	it	cc
 800e25c:	460b      	movcc	r3, r1
 800e25e:	429a      	cmp	r2, r3
 800e260:	d204      	bcs.n	800e26c <tcp_process+0x460>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	b29b      	uxth	r3, r3
 800e26a:	e00d      	b.n	800e288 <tcp_process+0x47c>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e270:	005b      	lsls	r3, r3, #1
 800e272:	f241 121c 	movw	r2, #4380	; 0x111c
 800e276:	4293      	cmp	r3, r2
 800e278:	d904      	bls.n	800e284 <tcp_process+0x478>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e27e:	005b      	lsls	r3, r3, #1
 800e280:	b29b      	uxth	r3, r3
 800e282:	e001      	b.n	800e288 <tcp_process+0x47c>
 800e284:	f241 131c 	movw	r3, #4380	; 0x111c
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e28e:	4b4e      	ldr	r3, [pc, #312]	; (800e3c8 <tcp_process+0x5bc>)
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	f003 0320 	and.w	r3, r3, #32
 800e296:	2b00      	cmp	r3, #0
 800e298:	d037      	beq.n	800e30a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	8b5b      	ldrh	r3, [r3, #26]
 800e29e:	f043 0302 	orr.w	r3, r3, #2
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2207      	movs	r2, #7
 800e2ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e2ae:	e02c      	b.n	800e30a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2b0:	4b3b      	ldr	r3, [pc, #236]	; (800e3a0 <tcp_process+0x594>)
 800e2b2:	6819      	ldr	r1, [r3, #0]
 800e2b4:	4b3b      	ldr	r3, [pc, #236]	; (800e3a4 <tcp_process+0x598>)
 800e2b6:	881b      	ldrh	r3, [r3, #0]
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	4b3b      	ldr	r3, [pc, #236]	; (800e3a8 <tcp_process+0x59c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2c0:	4b3a      	ldr	r3, [pc, #232]	; (800e3ac <tcp_process+0x5a0>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2c4:	885b      	ldrh	r3, [r3, #2]
 800e2c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2c8:	4a38      	ldr	r2, [pc, #224]	; (800e3ac <tcp_process+0x5a0>)
 800e2ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2cc:	8812      	ldrh	r2, [r2, #0]
 800e2ce:	b292      	uxth	r2, r2
 800e2d0:	9202      	str	r2, [sp, #8]
 800e2d2:	9301      	str	r3, [sp, #4]
 800e2d4:	4b36      	ldr	r3, [pc, #216]	; (800e3b0 <tcp_process+0x5a4>)
 800e2d6:	9300      	str	r3, [sp, #0]
 800e2d8:	4b36      	ldr	r3, [pc, #216]	; (800e3b4 <tcp_process+0x5a8>)
 800e2da:	4602      	mov	r2, r0
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f002 fbd1 	bl	8010a84 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e2e2:	e167      	b.n	800e5b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e2e4:	4b2d      	ldr	r3, [pc, #180]	; (800e39c <tcp_process+0x590>)
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	f003 0302 	and.w	r3, r3, #2
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f000 8161 	beq.w	800e5b4 <tcp_process+0x7a8>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f6:	1e5a      	subs	r2, r3, #1
 800e2f8:	4b2b      	ldr	r3, [pc, #172]	; (800e3a8 <tcp_process+0x59c>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	f040 8159 	bne.w	800e5b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f002 f9b6 	bl	8010674 <tcp_rexmit>
      break;
 800e308:	e154      	b.n	800e5b4 <tcp_process+0x7a8>
 800e30a:	e153      	b.n	800e5b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f000 fa71 	bl	800e7f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e312:	4b2d      	ldr	r3, [pc, #180]	; (800e3c8 <tcp_process+0x5bc>)
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	f003 0320 	and.w	r3, r3, #32
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	f000 814c 	beq.w	800e5b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	8b5b      	ldrh	r3, [r3, #26]
 800e324:	f043 0302 	orr.w	r3, r3, #2
 800e328:	b29a      	uxth	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2207      	movs	r2, #7
 800e332:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e334:	e140      	b.n	800e5b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fa5c 	bl	800e7f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e33c:	4b22      	ldr	r3, [pc, #136]	; (800e3c8 <tcp_process+0x5bc>)
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	f003 0320 	and.w	r3, r3, #32
 800e344:	2b00      	cmp	r3, #0
 800e346:	d071      	beq.n	800e42c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e348:	4b14      	ldr	r3, [pc, #80]	; (800e39c <tcp_process+0x590>)
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	f003 0310 	and.w	r3, r3, #16
 800e350:	2b00      	cmp	r3, #0
 800e352:	d060      	beq.n	800e416 <tcp_process+0x60a>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e358:	4b11      	ldr	r3, [pc, #68]	; (800e3a0 <tcp_process+0x594>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d15a      	bne.n	800e416 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e364:	2b00      	cmp	r3, #0
 800e366:	d156      	bne.n	800e416 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	8b5b      	ldrh	r3, [r3, #26]
 800e36c:	f043 0302 	orr.w	r3, r3, #2
 800e370:	b29a      	uxth	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f7fe fdbc 	bl	800cef4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e37c:	4b13      	ldr	r3, [pc, #76]	; (800e3cc <tcp_process+0x5c0>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	429a      	cmp	r2, r3
 800e384:	d105      	bne.n	800e392 <tcp_process+0x586>
 800e386:	4b11      	ldr	r3, [pc, #68]	; (800e3cc <tcp_process+0x5c0>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	4a0f      	ldr	r2, [pc, #60]	; (800e3cc <tcp_process+0x5c0>)
 800e38e:	6013      	str	r3, [r2, #0]
 800e390:	e02e      	b.n	800e3f0 <tcp_process+0x5e4>
 800e392:	4b0e      	ldr	r3, [pc, #56]	; (800e3cc <tcp_process+0x5c0>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	617b      	str	r3, [r7, #20]
 800e398:	e027      	b.n	800e3ea <tcp_process+0x5de>
 800e39a:	bf00      	nop
 800e39c:	24008164 	.word	0x24008164
 800e3a0:	2400815c 	.word	0x2400815c
 800e3a4:	24008162 	.word	0x24008162
 800e3a8:	24008158 	.word	0x24008158
 800e3ac:	24008148 	.word	0x24008148
 800e3b0:	24005208 	.word	0x24005208
 800e3b4:	2400520c 	.word	0x2400520c
 800e3b8:	08014018 	.word	0x08014018
 800e3bc:	080142e4 	.word	0x080142e4
 800e3c0:	08014090 	.word	0x08014090
 800e3c4:	24008160 	.word	0x24008160
 800e3c8:	24008165 	.word	0x24008165
 800e3cc:	2400812c 	.word	0x2400812c
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d104      	bne.n	800e3e4 <tcp_process+0x5d8>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	68da      	ldr	r2, [r3, #12]
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	60da      	str	r2, [r3, #12]
 800e3e2:	e005      	b.n	800e3f0 <tcp_process+0x5e4>
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	617b      	str	r3, [r7, #20]
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d1ef      	bne.n	800e3d0 <tcp_process+0x5c4>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	60da      	str	r2, [r3, #12]
 800e3f6:	4b77      	ldr	r3, [pc, #476]	; (800e5d4 <tcp_process+0x7c8>)
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	220a      	movs	r2, #10
 800e400:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e402:	4b75      	ldr	r3, [pc, #468]	; (800e5d8 <tcp_process+0x7cc>)
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	60da      	str	r2, [r3, #12]
 800e40a:	4a73      	ldr	r2, [pc, #460]	; (800e5d8 <tcp_process+0x7cc>)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6013      	str	r3, [r2, #0]
 800e410:	f002 fcfa 	bl	8010e08 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e414:	e0d2      	b.n	800e5bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	8b5b      	ldrh	r3, [r3, #26]
 800e41a:	f043 0302 	orr.w	r3, r3, #2
 800e41e:	b29a      	uxth	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2208      	movs	r2, #8
 800e428:	751a      	strb	r2, [r3, #20]
      break;
 800e42a:	e0c7      	b.n	800e5bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e42c:	4b6b      	ldr	r3, [pc, #428]	; (800e5dc <tcp_process+0x7d0>)
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	f003 0310 	and.w	r3, r3, #16
 800e434:	2b00      	cmp	r3, #0
 800e436:	f000 80c1 	beq.w	800e5bc <tcp_process+0x7b0>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e43e:	4b68      	ldr	r3, [pc, #416]	; (800e5e0 <tcp_process+0x7d4>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	429a      	cmp	r2, r3
 800e444:	f040 80ba 	bne.w	800e5bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	f040 80b5 	bne.w	800e5bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2206      	movs	r2, #6
 800e456:	751a      	strb	r2, [r3, #20]
      break;
 800e458:	e0b0      	b.n	800e5bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f9ca 	bl	800e7f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e460:	4b60      	ldr	r3, [pc, #384]	; (800e5e4 <tcp_process+0x7d8>)
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	f003 0320 	and.w	r3, r3, #32
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f000 80a9 	beq.w	800e5c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	8b5b      	ldrh	r3, [r3, #26]
 800e472:	f043 0302 	orr.w	r3, r3, #2
 800e476:	b29a      	uxth	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f7fe fd39 	bl	800cef4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e482:	4b59      	ldr	r3, [pc, #356]	; (800e5e8 <tcp_process+0x7dc>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d105      	bne.n	800e498 <tcp_process+0x68c>
 800e48c:	4b56      	ldr	r3, [pc, #344]	; (800e5e8 <tcp_process+0x7dc>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	4a55      	ldr	r2, [pc, #340]	; (800e5e8 <tcp_process+0x7dc>)
 800e494:	6013      	str	r3, [r2, #0]
 800e496:	e013      	b.n	800e4c0 <tcp_process+0x6b4>
 800e498:	4b53      	ldr	r3, [pc, #332]	; (800e5e8 <tcp_process+0x7dc>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	613b      	str	r3, [r7, #16]
 800e49e:	e00c      	b.n	800e4ba <tcp_process+0x6ae>
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d104      	bne.n	800e4b4 <tcp_process+0x6a8>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	68da      	ldr	r2, [r3, #12]
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	60da      	str	r2, [r3, #12]
 800e4b2:	e005      	b.n	800e4c0 <tcp_process+0x6b4>
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	613b      	str	r3, [r7, #16]
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d1ef      	bne.n	800e4a0 <tcp_process+0x694>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	60da      	str	r2, [r3, #12]
 800e4c6:	4b43      	ldr	r3, [pc, #268]	; (800e5d4 <tcp_process+0x7c8>)
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	220a      	movs	r2, #10
 800e4d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e4d2:	4b41      	ldr	r3, [pc, #260]	; (800e5d8 <tcp_process+0x7cc>)
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	60da      	str	r2, [r3, #12]
 800e4da:	4a3f      	ldr	r2, [pc, #252]	; (800e5d8 <tcp_process+0x7cc>)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6013      	str	r3, [r2, #0]
 800e4e0:	f002 fc92 	bl	8010e08 <tcp_timer_needed>
      }
      break;
 800e4e4:	e06c      	b.n	800e5c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 f984 	bl	800e7f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e4ec:	4b3b      	ldr	r3, [pc, #236]	; (800e5dc <tcp_process+0x7d0>)
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	f003 0310 	and.w	r3, r3, #16
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d065      	beq.n	800e5c4 <tcp_process+0x7b8>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4fc:	4b38      	ldr	r3, [pc, #224]	; (800e5e0 <tcp_process+0x7d4>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	429a      	cmp	r2, r3
 800e502:	d15f      	bne.n	800e5c4 <tcp_process+0x7b8>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d15b      	bne.n	800e5c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f7fe fcf1 	bl	800cef4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e512:	4b35      	ldr	r3, [pc, #212]	; (800e5e8 <tcp_process+0x7dc>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d105      	bne.n	800e528 <tcp_process+0x71c>
 800e51c:	4b32      	ldr	r3, [pc, #200]	; (800e5e8 <tcp_process+0x7dc>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	4a31      	ldr	r2, [pc, #196]	; (800e5e8 <tcp_process+0x7dc>)
 800e524:	6013      	str	r3, [r2, #0]
 800e526:	e013      	b.n	800e550 <tcp_process+0x744>
 800e528:	4b2f      	ldr	r3, [pc, #188]	; (800e5e8 <tcp_process+0x7dc>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	60fb      	str	r3, [r7, #12]
 800e52e:	e00c      	b.n	800e54a <tcp_process+0x73e>
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	429a      	cmp	r2, r3
 800e538:	d104      	bne.n	800e544 <tcp_process+0x738>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	68da      	ldr	r2, [r3, #12]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	60da      	str	r2, [r3, #12]
 800e542:	e005      	b.n	800e550 <tcp_process+0x744>
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	60fb      	str	r3, [r7, #12]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1ef      	bne.n	800e530 <tcp_process+0x724>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	60da      	str	r2, [r3, #12]
 800e556:	4b1f      	ldr	r3, [pc, #124]	; (800e5d4 <tcp_process+0x7c8>)
 800e558:	2201      	movs	r2, #1
 800e55a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	220a      	movs	r2, #10
 800e560:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e562:	4b1d      	ldr	r3, [pc, #116]	; (800e5d8 <tcp_process+0x7cc>)
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	60da      	str	r2, [r3, #12]
 800e56a:	4a1b      	ldr	r2, [pc, #108]	; (800e5d8 <tcp_process+0x7cc>)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6013      	str	r3, [r2, #0]
 800e570:	f002 fc4a 	bl	8010e08 <tcp_timer_needed>
      }
      break;
 800e574:	e026      	b.n	800e5c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 f93c 	bl	800e7f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e57c:	4b17      	ldr	r3, [pc, #92]	; (800e5dc <tcp_process+0x7d0>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	f003 0310 	and.w	r3, r3, #16
 800e584:	2b00      	cmp	r3, #0
 800e586:	d01f      	beq.n	800e5c8 <tcp_process+0x7bc>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e58c:	4b14      	ldr	r3, [pc, #80]	; (800e5e0 <tcp_process+0x7d4>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	429a      	cmp	r2, r3
 800e592:	d119      	bne.n	800e5c8 <tcp_process+0x7bc>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d115      	bne.n	800e5c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e59c:	4b11      	ldr	r3, [pc, #68]	; (800e5e4 <tcp_process+0x7d8>)
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	f043 0310 	orr.w	r3, r3, #16
 800e5a4:	b2da      	uxtb	r2, r3
 800e5a6:	4b0f      	ldr	r3, [pc, #60]	; (800e5e4 <tcp_process+0x7d8>)
 800e5a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e5aa:	e00d      	b.n	800e5c8 <tcp_process+0x7bc>
    default:
      break;
 800e5ac:	bf00      	nop
 800e5ae:	e00c      	b.n	800e5ca <tcp_process+0x7be>
      break;
 800e5b0:	bf00      	nop
 800e5b2:	e00a      	b.n	800e5ca <tcp_process+0x7be>
      break;
 800e5b4:	bf00      	nop
 800e5b6:	e008      	b.n	800e5ca <tcp_process+0x7be>
      break;
 800e5b8:	bf00      	nop
 800e5ba:	e006      	b.n	800e5ca <tcp_process+0x7be>
      break;
 800e5bc:	bf00      	nop
 800e5be:	e004      	b.n	800e5ca <tcp_process+0x7be>
      break;
 800e5c0:	bf00      	nop
 800e5c2:	e002      	b.n	800e5ca <tcp_process+0x7be>
      break;
 800e5c4:	bf00      	nop
 800e5c6:	e000      	b.n	800e5ca <tcp_process+0x7be>
      break;
 800e5c8:	bf00      	nop
  }
  return ERR_OK;
 800e5ca:	2300      	movs	r3, #0
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3724      	adds	r7, #36	; 0x24
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd90      	pop	{r4, r7, pc}
 800e5d4:	24008134 	.word	0x24008134
 800e5d8:	24008130 	.word	0x24008130
 800e5dc:	24008164 	.word	0x24008164
 800e5e0:	2400815c 	.word	0x2400815c
 800e5e4:	24008165 	.word	0x24008165
 800e5e8:	2400812c 	.word	0x2400812c

0800e5ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e5ec:	b590      	push	{r4, r7, lr}
 800e5ee:	b085      	sub	sp, #20
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d106      	bne.n	800e60a <tcp_oos_insert_segment+0x1e>
 800e5fc:	4b3b      	ldr	r3, [pc, #236]	; (800e6ec <tcp_oos_insert_segment+0x100>)
 800e5fe:	f240 421f 	movw	r2, #1055	; 0x41f
 800e602:	493b      	ldr	r1, [pc, #236]	; (800e6f0 <tcp_oos_insert_segment+0x104>)
 800e604:	483b      	ldr	r0, [pc, #236]	; (800e6f4 <tcp_oos_insert_segment+0x108>)
 800e606:	f002 ff4d 	bl	80114a4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	899b      	ldrh	r3, [r3, #12]
 800e610:	b29b      	uxth	r3, r3
 800e612:	4618      	mov	r0, r3
 800e614:	f7f9 f970 	bl	80078f8 <lwip_htons>
 800e618:	4603      	mov	r3, r0
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	f003 0301 	and.w	r3, r3, #1
 800e620:	2b00      	cmp	r3, #0
 800e622:	d028      	beq.n	800e676 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e624:	6838      	ldr	r0, [r7, #0]
 800e626:	f7fe fa63 	bl	800caf0 <tcp_segs_free>
    next = NULL;
 800e62a:	2300      	movs	r3, #0
 800e62c:	603b      	str	r3, [r7, #0]
 800e62e:	e056      	b.n	800e6de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	899b      	ldrh	r3, [r3, #12]
 800e636:	b29b      	uxth	r3, r3
 800e638:	4618      	mov	r0, r3
 800e63a:	f7f9 f95d 	bl	80078f8 <lwip_htons>
 800e63e:	4603      	mov	r3, r0
 800e640:	b2db      	uxtb	r3, r3
 800e642:	f003 0301 	and.w	r3, r3, #1
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00d      	beq.n	800e666 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	899b      	ldrh	r3, [r3, #12]
 800e650:	b29c      	uxth	r4, r3
 800e652:	2001      	movs	r0, #1
 800e654:	f7f9 f950 	bl	80078f8 <lwip_htons>
 800e658:	4603      	mov	r3, r0
 800e65a:	461a      	mov	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	68db      	ldr	r3, [r3, #12]
 800e660:	4322      	orrs	r2, r4
 800e662:	b292      	uxth	r2, r2
 800e664:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f7fe fa52 	bl	800cb1a <tcp_seg_free>
    while (next &&
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00e      	beq.n	800e69a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	891b      	ldrh	r3, [r3, #8]
 800e680:	461a      	mov	r2, r3
 800e682:	4b1d      	ldr	r3, [pc, #116]	; (800e6f8 <tcp_oos_insert_segment+0x10c>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	441a      	add	r2, r3
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	6839      	ldr	r1, [r7, #0]
 800e690:	8909      	ldrh	r1, [r1, #8]
 800e692:	440b      	add	r3, r1
 800e694:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e696:	2b00      	cmp	r3, #0
 800e698:	daca      	bge.n	800e630 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d01e      	beq.n	800e6de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	891b      	ldrh	r3, [r3, #8]
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	4b14      	ldr	r3, [pc, #80]	; (800e6f8 <tcp_oos_insert_segment+0x10c>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	441a      	add	r2, r3
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	dd12      	ble.n	800e6de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	b29a      	uxth	r2, r3
 800e6c0:	4b0d      	ldr	r3, [pc, #52]	; (800e6f8 <tcp_oos_insert_segment+0x10c>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	685a      	ldr	r2, [r3, #4]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	891b      	ldrh	r3, [r3, #8]
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	4610      	mov	r0, r2
 800e6da:	f7fc fe25 	bl	800b328 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	683a      	ldr	r2, [r7, #0]
 800e6e2:	601a      	str	r2, [r3, #0]
}
 800e6e4:	bf00      	nop
 800e6e6:	3714      	adds	r7, #20
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd90      	pop	{r4, r7, pc}
 800e6ec:	08014018 	.word	0x08014018
 800e6f0:	08014304 	.word	0x08014304
 800e6f4:	08014090 	.word	0x08014090
 800e6f8:	24008158 	.word	0x24008158

0800e6fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e6fc:	b5b0      	push	{r4, r5, r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e70a:	e03e      	b.n	800e78a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fd f812 	bl	800b744 <pbuf_clen>
 800e720:	4603      	mov	r3, r0
 800e722:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e72a:	8a7a      	ldrh	r2, [r7, #18]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d906      	bls.n	800e73e <tcp_free_acked_segments+0x42>
 800e730:	4b2a      	ldr	r3, [pc, #168]	; (800e7dc <tcp_free_acked_segments+0xe0>)
 800e732:	f240 4257 	movw	r2, #1111	; 0x457
 800e736:	492a      	ldr	r1, [pc, #168]	; (800e7e0 <tcp_free_acked_segments+0xe4>)
 800e738:	482a      	ldr	r0, [pc, #168]	; (800e7e4 <tcp_free_acked_segments+0xe8>)
 800e73a:	f002 feb3 	bl	80114a4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e744:	8a7b      	ldrh	r3, [r7, #18]
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	b29a      	uxth	r2, r3
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	891a      	ldrh	r2, [r3, #8]
 800e754:	4b24      	ldr	r3, [pc, #144]	; (800e7e8 <tcp_free_acked_segments+0xec>)
 800e756:	881b      	ldrh	r3, [r3, #0]
 800e758:	4413      	add	r3, r2
 800e75a:	b29a      	uxth	r2, r3
 800e75c:	4b22      	ldr	r3, [pc, #136]	; (800e7e8 <tcp_free_acked_segments+0xec>)
 800e75e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e760:	6978      	ldr	r0, [r7, #20]
 800e762:	f7fe f9da 	bl	800cb1a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00c      	beq.n	800e78a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d109      	bne.n	800e78a <tcp_free_acked_segments+0x8e>
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d106      	bne.n	800e78a <tcp_free_acked_segments+0x8e>
 800e77c:	4b17      	ldr	r3, [pc, #92]	; (800e7dc <tcp_free_acked_segments+0xe0>)
 800e77e:	f240 4261 	movw	r2, #1121	; 0x461
 800e782:	491a      	ldr	r1, [pc, #104]	; (800e7ec <tcp_free_acked_segments+0xf0>)
 800e784:	4817      	ldr	r0, [pc, #92]	; (800e7e4 <tcp_free_acked_segments+0xe8>)
 800e786:	f002 fe8d 	bl	80114a4 <iprintf>
  while (seg_list != NULL &&
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d020      	beq.n	800e7d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	4618      	mov	r0, r3
 800e798:	f7f9 f8c3 	bl	8007922 <lwip_htonl>
 800e79c:	4604      	mov	r4, r0
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	891b      	ldrh	r3, [r3, #8]
 800e7a2:	461d      	mov	r5, r3
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	899b      	ldrh	r3, [r3, #12]
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7f9 f8a3 	bl	80078f8 <lwip_htons>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	f003 0303 	and.w	r3, r3, #3
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d001      	beq.n	800e7c2 <tcp_free_acked_segments+0xc6>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e000      	b.n	800e7c4 <tcp_free_acked_segments+0xc8>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	442b      	add	r3, r5
 800e7c6:	18e2      	adds	r2, r4, r3
 800e7c8:	4b09      	ldr	r3, [pc, #36]	; (800e7f0 <tcp_free_acked_segments+0xf4>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	dd9c      	ble.n	800e70c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e7d2:	68bb      	ldr	r3, [r7, #8]
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3718      	adds	r7, #24
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bdb0      	pop	{r4, r5, r7, pc}
 800e7dc:	08014018 	.word	0x08014018
 800e7e0:	0801432c 	.word	0x0801432c
 800e7e4:	08014090 	.word	0x08014090
 800e7e8:	24008160 	.word	0x24008160
 800e7ec:	08014354 	.word	0x08014354
 800e7f0:	2400815c 	.word	0x2400815c

0800e7f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e7f4:	b5b0      	push	{r4, r5, r7, lr}
 800e7f6:	b094      	sub	sp, #80	; 0x50
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d106      	bne.n	800e814 <tcp_receive+0x20>
 800e806:	4b91      	ldr	r3, [pc, #580]	; (800ea4c <tcp_receive+0x258>)
 800e808:	f240 427b 	movw	r2, #1147	; 0x47b
 800e80c:	4990      	ldr	r1, [pc, #576]	; (800ea50 <tcp_receive+0x25c>)
 800e80e:	4891      	ldr	r0, [pc, #580]	; (800ea54 <tcp_receive+0x260>)
 800e810:	f002 fe48 	bl	80114a4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	7d1b      	ldrb	r3, [r3, #20]
 800e818:	2b03      	cmp	r3, #3
 800e81a:	d806      	bhi.n	800e82a <tcp_receive+0x36>
 800e81c:	4b8b      	ldr	r3, [pc, #556]	; (800ea4c <tcp_receive+0x258>)
 800e81e:	f240 427c 	movw	r2, #1148	; 0x47c
 800e822:	498d      	ldr	r1, [pc, #564]	; (800ea58 <tcp_receive+0x264>)
 800e824:	488b      	ldr	r0, [pc, #556]	; (800ea54 <tcp_receive+0x260>)
 800e826:	f002 fe3d 	bl	80114a4 <iprintf>

  if (flags & TCP_ACK) {
 800e82a:	4b8c      	ldr	r3, [pc, #560]	; (800ea5c <tcp_receive+0x268>)
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	f003 0310 	and.w	r3, r3, #16
 800e832:	2b00      	cmp	r3, #0
 800e834:	f000 8264 	beq.w	800ed00 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e83e:	461a      	mov	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e844:	4413      	add	r3, r2
 800e846:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e84c:	4b84      	ldr	r3, [pc, #528]	; (800ea60 <tcp_receive+0x26c>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	2b00      	cmp	r3, #0
 800e854:	db1b      	blt.n	800e88e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e85a:	4b81      	ldr	r3, [pc, #516]	; (800ea60 <tcp_receive+0x26c>)
 800e85c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e85e:	429a      	cmp	r2, r3
 800e860:	d106      	bne.n	800e870 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e866:	4b7f      	ldr	r3, [pc, #508]	; (800ea64 <tcp_receive+0x270>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	1ad3      	subs	r3, r2, r3
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	db0e      	blt.n	800e88e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e874:	4b7b      	ldr	r3, [pc, #492]	; (800ea64 <tcp_receive+0x270>)
 800e876:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e878:	429a      	cmp	r2, r3
 800e87a:	d125      	bne.n	800e8c8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e87c:	4b7a      	ldr	r3, [pc, #488]	; (800ea68 <tcp_receive+0x274>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	89db      	ldrh	r3, [r3, #14]
 800e882:	b29a      	uxth	r2, r3
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d91c      	bls.n	800e8c8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e88e:	4b76      	ldr	r3, [pc, #472]	; (800ea68 <tcp_receive+0x274>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	89db      	ldrh	r3, [r3, #14]
 800e894:	b29a      	uxth	r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d205      	bcs.n	800e8b8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e8b8:	4b69      	ldr	r3, [pc, #420]	; (800ea60 <tcp_receive+0x26c>)
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e8c0:	4b68      	ldr	r3, [pc, #416]	; (800ea64 <tcp_receive+0x270>)
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e8c8:	4b66      	ldr	r3, [pc, #408]	; (800ea64 <tcp_receive+0x270>)
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8d0:	1ad3      	subs	r3, r2, r3
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	dc58      	bgt.n	800e988 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e8d6:	4b65      	ldr	r3, [pc, #404]	; (800ea6c <tcp_receive+0x278>)
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d14b      	bne.n	800e976 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e8e8:	4413      	add	r3, r2
 800e8ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d142      	bne.n	800e976 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	db3d      	blt.n	800e976 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8fe:	4b59      	ldr	r3, [pc, #356]	; (800ea64 <tcp_receive+0x270>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	429a      	cmp	r2, r3
 800e904:	d137      	bne.n	800e976 <tcp_receive+0x182>
              found_dupack = 1;
 800e906:	2301      	movs	r3, #1
 800e908:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e910:	2bff      	cmp	r3, #255	; 0xff
 800e912:	d007      	beq.n	800e924 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e91a:	3301      	adds	r3, #1
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e92a:	2b03      	cmp	r3, #3
 800e92c:	d91b      	bls.n	800e966 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e938:	4413      	add	r3, r2
 800e93a:	b29a      	uxth	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e942:	429a      	cmp	r2, r3
 800e944:	d30a      	bcc.n	800e95c <tcp_receive+0x168>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e950:	4413      	add	r3, r2
 800e952:	b29a      	uxth	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e95a:	e004      	b.n	800e966 <tcp_receive+0x172>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e962:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e96c:	2b02      	cmp	r3, #2
 800e96e:	d902      	bls.n	800e976 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f001 feeb 	bl	801074c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f040 8161 	bne.w	800ec40 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e986:	e15b      	b.n	800ec40 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e988:	4b36      	ldr	r3, [pc, #216]	; (800ea64 <tcp_receive+0x270>)
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	3b01      	subs	r3, #1
 800e994:	2b00      	cmp	r3, #0
 800e996:	f2c0 814e 	blt.w	800ec36 <tcp_receive+0x442>
 800e99a:	4b32      	ldr	r3, [pc, #200]	; (800ea64 <tcp_receive+0x270>)
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f300 8146 	bgt.w	800ec36 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	8b5b      	ldrh	r3, [r3, #26]
 800e9ae:	f003 0304 	and.w	r3, r3, #4
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d010      	beq.n	800e9d8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	8b5b      	ldrh	r3, [r3, #26]
 800e9ba:	f023 0304 	bic.w	r3, r3, #4
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9e6:	10db      	asrs	r3, r3, #3
 800e9e8:	b21b      	sxth	r3, r3
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	4413      	add	r3, r2
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	b21a      	sxth	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ea00:	4b18      	ldr	r3, [pc, #96]	; (800ea64 <tcp_receive+0x270>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	1ad3      	subs	r3, r2, r3
 800ea0e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ea18:	4b12      	ldr	r3, [pc, #72]	; (800ea64 <tcp_receive+0x270>)
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	7d1b      	ldrb	r3, [r3, #20]
 800ea24:	2b03      	cmp	r3, #3
 800ea26:	f240 8097 	bls.w	800eb58 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d245      	bcs.n	800eac6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	8b5b      	ldrh	r3, [r3, #26]
 800ea3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d014      	beq.n	800ea70 <tcp_receive+0x27c>
 800ea46:	2301      	movs	r3, #1
 800ea48:	e013      	b.n	800ea72 <tcp_receive+0x27e>
 800ea4a:	bf00      	nop
 800ea4c:	08014018 	.word	0x08014018
 800ea50:	08014374 	.word	0x08014374
 800ea54:	08014090 	.word	0x08014090
 800ea58:	08014390 	.word	0x08014390
 800ea5c:	24008164 	.word	0x24008164
 800ea60:	24008158 	.word	0x24008158
 800ea64:	2400815c 	.word	0x2400815c
 800ea68:	24008148 	.word	0x24008148
 800ea6c:	24008162 	.word	0x24008162
 800ea70:	2302      	movs	r3, #2
 800ea72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ea76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea80:	fb12 f303 	smulbb	r3, r2, r3
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	bf28      	it	cs
 800ea8c:	4613      	movcs	r3, r2
 800ea8e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea98:	4413      	add	r3, r2
 800ea9a:	b29a      	uxth	r2, r3
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d309      	bcc.n	800eaba <tcp_receive+0x2c6>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eaac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eaae:	4413      	add	r3, r2
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eab8:	e04e      	b.n	800eb58 <tcp_receive+0x364>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eac0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eac4:	e048      	b.n	800eb58 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eacc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eace:	4413      	add	r3, r2
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ead8:	429a      	cmp	r2, r3
 800eada:	d309      	bcc.n	800eaf0 <tcp_receive+0x2fc>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eae4:	4413      	add	r3, r2
 800eae6:	b29a      	uxth	r2, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eaee:	e004      	b.n	800eafa <tcp_receive+0x306>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eaf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d326      	bcc.n	800eb58 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb16:	1ad3      	subs	r3, r2, r3
 800eb18:	b29a      	uxth	r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb2a:	4413      	add	r3, r2
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d30a      	bcc.n	800eb4e <tcp_receive+0x35a>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb42:	4413      	add	r3, r2
 800eb44:	b29a      	uxth	r2, r3
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eb4c:	e004      	b.n	800eb58 <tcp_receive+0x364>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb60:	4a98      	ldr	r2, [pc, #608]	; (800edc4 <tcp_receive+0x5d0>)
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f7ff fdca 	bl	800e6fc <tcp_free_acked_segments>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb76:	4a94      	ldr	r2, [pc, #592]	; (800edc8 <tcp_receive+0x5d4>)
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f7ff fdbf 	bl	800e6fc <tcp_free_acked_segments>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d104      	bne.n	800eb96 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb92:	861a      	strh	r2, [r3, #48]	; 0x30
 800eb94:	e002      	b.n	800eb9c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d103      	bne.n	800ebb2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ebb8:	4b84      	ldr	r3, [pc, #528]	; (800edcc <tcp_receive+0x5d8>)
 800ebba:	881b      	ldrh	r3, [r3, #0]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	8b5b      	ldrh	r3, [r3, #26]
 800ebca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d035      	beq.n	800ec3e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d118      	bne.n	800ec0c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d00c      	beq.n	800ebfc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7f8 fe97 	bl	8007922 <lwip_htonl>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	dc20      	bgt.n	800ec3e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	8b5b      	ldrh	r3, [r3, #26]
 800ec00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec0a:	e018      	b.n	800ec3e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7f8 fe82 	bl	8007922 <lwip_htonl>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	1ae3      	subs	r3, r4, r3
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	dc0b      	bgt.n	800ec3e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	8b5b      	ldrh	r3, [r3, #26]
 800ec2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec34:	e003      	b.n	800ec3e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f001 ff76 	bl	8010b28 <tcp_send_empty_ack>
 800ec3c:	e000      	b.n	800ec40 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec3e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d05b      	beq.n	800ed00 <tcp_receive+0x50c>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec4c:	4b60      	ldr	r3, [pc, #384]	; (800edd0 <tcp_receive+0x5dc>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	1ad3      	subs	r3, r2, r3
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	da54      	bge.n	800ed00 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ec56:	4b5f      	ldr	r3, [pc, #380]	; (800edd4 <tcp_receive+0x5e0>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	b29a      	uxth	r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec60:	b29b      	uxth	r3, r3
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ec6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec74:	10db      	asrs	r3, r3, #3
 800ec76:	b21b      	sxth	r3, r3
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	1ad3      	subs	r3, r2, r3
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec8e:	4413      	add	r3, r2
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	b21a      	sxth	r2, r3
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ec98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	da05      	bge.n	800ecac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800eca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800eca4:	425b      	negs	r3, r3
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ecac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ecb6:	109b      	asrs	r3, r3, #2
 800ecb8:	b21b      	sxth	r3, r3
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ecca:	b29a      	uxth	r2, r3
 800eccc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ecd0:	4413      	add	r3, r2
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	b21a      	sxth	r2, r3
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ece0:	10db      	asrs	r3, r3, #3
 800ece2:	b21b      	sxth	r3, r3
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	4413      	add	r3, r2
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	b21a      	sxth	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ed00:	4b35      	ldr	r3, [pc, #212]	; (800edd8 <tcp_receive+0x5e4>)
 800ed02:	881b      	ldrh	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f000 84e2 	beq.w	800f6ce <tcp_receive+0xeda>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	7d1b      	ldrb	r3, [r3, #20]
 800ed0e:	2b06      	cmp	r3, #6
 800ed10:	f200 84dd 	bhi.w	800f6ce <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed18:	4b30      	ldr	r3, [pc, #192]	; (800eddc <tcp_receive+0x5e8>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	3b01      	subs	r3, #1
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f2c0 808f 	blt.w	800ee44 <tcp_receive+0x650>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed2a:	4b2b      	ldr	r3, [pc, #172]	; (800edd8 <tcp_receive+0x5e4>)
 800ed2c:	881b      	ldrh	r3, [r3, #0]
 800ed2e:	4619      	mov	r1, r3
 800ed30:	4b2a      	ldr	r3, [pc, #168]	; (800eddc <tcp_receive+0x5e8>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	440b      	add	r3, r1
 800ed36:	1ad3      	subs	r3, r2, r3
 800ed38:	3301      	adds	r3, #1
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f300 8082 	bgt.w	800ee44 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ed40:	4b27      	ldr	r3, [pc, #156]	; (800ede0 <tcp_receive+0x5ec>)
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed4a:	4b24      	ldr	r3, [pc, #144]	; (800eddc <tcp_receive+0x5e8>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ed52:	4b23      	ldr	r3, [pc, #140]	; (800ede0 <tcp_receive+0x5ec>)
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d106      	bne.n	800ed68 <tcp_receive+0x574>
 800ed5a:	4b22      	ldr	r3, [pc, #136]	; (800ede4 <tcp_receive+0x5f0>)
 800ed5c:	f240 5294 	movw	r2, #1428	; 0x594
 800ed60:	4921      	ldr	r1, [pc, #132]	; (800ede8 <tcp_receive+0x5f4>)
 800ed62:	4822      	ldr	r0, [pc, #136]	; (800edec <tcp_receive+0x5f8>)
 800ed64:	f002 fb9e 	bl	80114a4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ed68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d906      	bls.n	800ed80 <tcp_receive+0x58c>
 800ed72:	4b1c      	ldr	r3, [pc, #112]	; (800ede4 <tcp_receive+0x5f0>)
 800ed74:	f240 5295 	movw	r2, #1429	; 0x595
 800ed78:	491d      	ldr	r1, [pc, #116]	; (800edf0 <tcp_receive+0x5fc>)
 800ed7a:	481c      	ldr	r0, [pc, #112]	; (800edec <tcp_receive+0x5f8>)
 800ed7c:	f002 fb92 	bl	80114a4 <iprintf>
      off = (u16_t)off32;
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ed86:	4b16      	ldr	r3, [pc, #88]	; (800ede0 <tcp_receive+0x5ec>)
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	891b      	ldrh	r3, [r3, #8]
 800ed8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d906      	bls.n	800eda2 <tcp_receive+0x5ae>
 800ed94:	4b13      	ldr	r3, [pc, #76]	; (800ede4 <tcp_receive+0x5f0>)
 800ed96:	f240 5297 	movw	r2, #1431	; 0x597
 800ed9a:	4916      	ldr	r1, [pc, #88]	; (800edf4 <tcp_receive+0x600>)
 800ed9c:	4813      	ldr	r0, [pc, #76]	; (800edec <tcp_receive+0x5f8>)
 800ed9e:	f002 fb81 	bl	80114a4 <iprintf>
      inseg.len -= off;
 800eda2:	4b0f      	ldr	r3, [pc, #60]	; (800ede0 <tcp_receive+0x5ec>)
 800eda4:	891a      	ldrh	r2, [r3, #8]
 800eda6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800edaa:	1ad3      	subs	r3, r2, r3
 800edac:	b29a      	uxth	r2, r3
 800edae:	4b0c      	ldr	r3, [pc, #48]	; (800ede0 <tcp_receive+0x5ec>)
 800edb0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800edb2:	4b0b      	ldr	r3, [pc, #44]	; (800ede0 <tcp_receive+0x5ec>)
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	891a      	ldrh	r2, [r3, #8]
 800edb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800edc0:	e02a      	b.n	800ee18 <tcp_receive+0x624>
 800edc2:	bf00      	nop
 800edc4:	080143ac 	.word	0x080143ac
 800edc8:	080143b4 	.word	0x080143b4
 800edcc:	24008160 	.word	0x24008160
 800edd0:	2400815c 	.word	0x2400815c
 800edd4:	24008120 	.word	0x24008120
 800edd8:	24008162 	.word	0x24008162
 800eddc:	24008158 	.word	0x24008158
 800ede0:	24008138 	.word	0x24008138
 800ede4:	08014018 	.word	0x08014018
 800ede8:	080143bc 	.word	0x080143bc
 800edec:	08014090 	.word	0x08014090
 800edf0:	080143cc 	.word	0x080143cc
 800edf4:	080143dc 	.word	0x080143dc
        off -= p->len;
 800edf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edfa:	895b      	ldrh	r3, [r3, #10]
 800edfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ee06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ee0a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ee0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee0e:	2200      	movs	r2, #0
 800ee10:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ee12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ee18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee1a:	895b      	ldrh	r3, [r3, #10]
 800ee1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d8e9      	bhi.n	800edf8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ee24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee28:	4619      	mov	r1, r3
 800ee2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ee2c:	f7fc fb7c 	bl	800b528 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee34:	4a91      	ldr	r2, [pc, #580]	; (800f07c <tcp_receive+0x888>)
 800ee36:	6013      	str	r3, [r2, #0]
 800ee38:	4b91      	ldr	r3, [pc, #580]	; (800f080 <tcp_receive+0x88c>)
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	4a8f      	ldr	r2, [pc, #572]	; (800f07c <tcp_receive+0x888>)
 800ee3e:	6812      	ldr	r2, [r2, #0]
 800ee40:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ee42:	e00d      	b.n	800ee60 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ee44:	4b8d      	ldr	r3, [pc, #564]	; (800f07c <tcp_receive+0x888>)
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee4c:	1ad3      	subs	r3, r2, r3
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	da06      	bge.n	800ee60 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	8b5b      	ldrh	r3, [r3, #26]
 800ee56:	f043 0302 	orr.w	r3, r3, #2
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee60:	4b86      	ldr	r3, [pc, #536]	; (800f07c <tcp_receive+0x888>)
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee68:	1ad3      	subs	r3, r2, r3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	f2c0 842a 	blt.w	800f6c4 <tcp_receive+0xed0>
 800ee70:	4b82      	ldr	r3, [pc, #520]	; (800f07c <tcp_receive+0x888>)
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee78:	6879      	ldr	r1, [r7, #4]
 800ee7a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee7c:	440b      	add	r3, r1
 800ee7e:	1ad3      	subs	r3, r2, r3
 800ee80:	3301      	adds	r3, #1
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	f300 841e 	bgt.w	800f6c4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee8c:	4b7b      	ldr	r3, [pc, #492]	; (800f07c <tcp_receive+0x888>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	f040 829a 	bne.w	800f3ca <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ee96:	4b7a      	ldr	r3, [pc, #488]	; (800f080 <tcp_receive+0x88c>)
 800ee98:	891c      	ldrh	r4, [r3, #8]
 800ee9a:	4b79      	ldr	r3, [pc, #484]	; (800f080 <tcp_receive+0x88c>)
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	899b      	ldrh	r3, [r3, #12]
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7f8 fd28 	bl	80078f8 <lwip_htons>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	f003 0303 	and.w	r3, r3, #3
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d001      	beq.n	800eeb8 <tcp_receive+0x6c4>
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	e000      	b.n	800eeba <tcp_receive+0x6c6>
 800eeb8:	2300      	movs	r3, #0
 800eeba:	4423      	add	r3, r4
 800eebc:	b29a      	uxth	r2, r3
 800eebe:	4b71      	ldr	r3, [pc, #452]	; (800f084 <tcp_receive+0x890>)
 800eec0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eec6:	4b6f      	ldr	r3, [pc, #444]	; (800f084 <tcp_receive+0x890>)
 800eec8:	881b      	ldrh	r3, [r3, #0]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d275      	bcs.n	800efba <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eece:	4b6c      	ldr	r3, [pc, #432]	; (800f080 <tcp_receive+0x88c>)
 800eed0:	68db      	ldr	r3, [r3, #12]
 800eed2:	899b      	ldrh	r3, [r3, #12]
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7f8 fd0e 	bl	80078f8 <lwip_htons>
 800eedc:	4603      	mov	r3, r0
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	f003 0301 	and.w	r3, r3, #1
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d01f      	beq.n	800ef28 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800eee8:	4b65      	ldr	r3, [pc, #404]	; (800f080 <tcp_receive+0x88c>)
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	899b      	ldrh	r3, [r3, #12]
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	b21b      	sxth	r3, r3
 800eef2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eef6:	b21c      	sxth	r4, r3
 800eef8:	4b61      	ldr	r3, [pc, #388]	; (800f080 <tcp_receive+0x88c>)
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	899b      	ldrh	r3, [r3, #12]
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7f8 fcf9 	bl	80078f8 <lwip_htons>
 800ef06:	4603      	mov	r3, r0
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7f8 fcf0 	bl	80078f8 <lwip_htons>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	b21b      	sxth	r3, r3
 800ef1c:	4323      	orrs	r3, r4
 800ef1e:	b21a      	sxth	r2, r3
 800ef20:	4b57      	ldr	r3, [pc, #348]	; (800f080 <tcp_receive+0x88c>)
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	b292      	uxth	r2, r2
 800ef26:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef2c:	4b54      	ldr	r3, [pc, #336]	; (800f080 <tcp_receive+0x88c>)
 800ef2e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ef30:	4b53      	ldr	r3, [pc, #332]	; (800f080 <tcp_receive+0x88c>)
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	899b      	ldrh	r3, [r3, #12]
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7f8 fcdd 	bl	80078f8 <lwip_htons>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	f003 0302 	and.w	r3, r3, #2
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d005      	beq.n	800ef56 <tcp_receive+0x762>
            inseg.len -= 1;
 800ef4a:	4b4d      	ldr	r3, [pc, #308]	; (800f080 <tcp_receive+0x88c>)
 800ef4c:	891b      	ldrh	r3, [r3, #8]
 800ef4e:	3b01      	subs	r3, #1
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	4b4b      	ldr	r3, [pc, #300]	; (800f080 <tcp_receive+0x88c>)
 800ef54:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ef56:	4b4a      	ldr	r3, [pc, #296]	; (800f080 <tcp_receive+0x88c>)
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	4a49      	ldr	r2, [pc, #292]	; (800f080 <tcp_receive+0x88c>)
 800ef5c:	8912      	ldrh	r2, [r2, #8]
 800ef5e:	4611      	mov	r1, r2
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7fc f9e1 	bl	800b328 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ef66:	4b46      	ldr	r3, [pc, #280]	; (800f080 <tcp_receive+0x88c>)
 800ef68:	891c      	ldrh	r4, [r3, #8]
 800ef6a:	4b45      	ldr	r3, [pc, #276]	; (800f080 <tcp_receive+0x88c>)
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	899b      	ldrh	r3, [r3, #12]
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7f8 fcc0 	bl	80078f8 <lwip_htons>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	f003 0303 	and.w	r3, r3, #3
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d001      	beq.n	800ef88 <tcp_receive+0x794>
 800ef84:	2301      	movs	r3, #1
 800ef86:	e000      	b.n	800ef8a <tcp_receive+0x796>
 800ef88:	2300      	movs	r3, #0
 800ef8a:	4423      	add	r3, r4
 800ef8c:	b29a      	uxth	r2, r3
 800ef8e:	4b3d      	ldr	r3, [pc, #244]	; (800f084 <tcp_receive+0x890>)
 800ef90:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ef92:	4b3c      	ldr	r3, [pc, #240]	; (800f084 <tcp_receive+0x890>)
 800ef94:	881b      	ldrh	r3, [r3, #0]
 800ef96:	461a      	mov	r2, r3
 800ef98:	4b38      	ldr	r3, [pc, #224]	; (800f07c <tcp_receive+0x888>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	441a      	add	r2, r3
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa2:	6879      	ldr	r1, [r7, #4]
 800efa4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800efa6:	440b      	add	r3, r1
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d006      	beq.n	800efba <tcp_receive+0x7c6>
 800efac:	4b36      	ldr	r3, [pc, #216]	; (800f088 <tcp_receive+0x894>)
 800efae:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800efb2:	4936      	ldr	r1, [pc, #216]	; (800f08c <tcp_receive+0x898>)
 800efb4:	4836      	ldr	r0, [pc, #216]	; (800f090 <tcp_receive+0x89c>)
 800efb6:	f002 fa75 	bl	80114a4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f000 80e7 	beq.w	800f192 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800efc4:	4b2e      	ldr	r3, [pc, #184]	; (800f080 <tcp_receive+0x88c>)
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	899b      	ldrh	r3, [r3, #12]
 800efca:	b29b      	uxth	r3, r3
 800efcc:	4618      	mov	r0, r3
 800efce:	f7f8 fc93 	bl	80078f8 <lwip_htons>
 800efd2:	4603      	mov	r3, r0
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	f003 0301 	and.w	r3, r3, #1
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d010      	beq.n	800f000 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800efde:	e00a      	b.n	800eff6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efe4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f7fd fd92 	bl	800cb1a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800effa:	2b00      	cmp	r3, #0
 800effc:	d1f0      	bne.n	800efe0 <tcp_receive+0x7ec>
 800effe:	e0c8      	b.n	800f192 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f004:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f006:	e052      	b.n	800f0ae <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	899b      	ldrh	r3, [r3, #12]
 800f00e:	b29b      	uxth	r3, r3
 800f010:	4618      	mov	r0, r3
 800f012:	f7f8 fc71 	bl	80078f8 <lwip_htons>
 800f016:	4603      	mov	r3, r0
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	f003 0301 	and.w	r3, r3, #1
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d03d      	beq.n	800f09e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f022:	4b17      	ldr	r3, [pc, #92]	; (800f080 <tcp_receive+0x88c>)
 800f024:	68db      	ldr	r3, [r3, #12]
 800f026:	899b      	ldrh	r3, [r3, #12]
 800f028:	b29b      	uxth	r3, r3
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7f8 fc64 	bl	80078f8 <lwip_htons>
 800f030:	4603      	mov	r3, r0
 800f032:	b2db      	uxtb	r3, r3
 800f034:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d130      	bne.n	800f09e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f03c:	4b10      	ldr	r3, [pc, #64]	; (800f080 <tcp_receive+0x88c>)
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	899b      	ldrh	r3, [r3, #12]
 800f042:	b29c      	uxth	r4, r3
 800f044:	2001      	movs	r0, #1
 800f046:	f7f8 fc57 	bl	80078f8 <lwip_htons>
 800f04a:	4603      	mov	r3, r0
 800f04c:	461a      	mov	r2, r3
 800f04e:	4b0c      	ldr	r3, [pc, #48]	; (800f080 <tcp_receive+0x88c>)
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	4322      	orrs	r2, r4
 800f054:	b292      	uxth	r2, r2
 800f056:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f058:	4b09      	ldr	r3, [pc, #36]	; (800f080 <tcp_receive+0x88c>)
 800f05a:	891c      	ldrh	r4, [r3, #8]
 800f05c:	4b08      	ldr	r3, [pc, #32]	; (800f080 <tcp_receive+0x88c>)
 800f05e:	68db      	ldr	r3, [r3, #12]
 800f060:	899b      	ldrh	r3, [r3, #12]
 800f062:	b29b      	uxth	r3, r3
 800f064:	4618      	mov	r0, r3
 800f066:	f7f8 fc47 	bl	80078f8 <lwip_htons>
 800f06a:	4603      	mov	r3, r0
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	f003 0303 	and.w	r3, r3, #3
 800f072:	2b00      	cmp	r3, #0
 800f074:	d00e      	beq.n	800f094 <tcp_receive+0x8a0>
 800f076:	2301      	movs	r3, #1
 800f078:	e00d      	b.n	800f096 <tcp_receive+0x8a2>
 800f07a:	bf00      	nop
 800f07c:	24008158 	.word	0x24008158
 800f080:	24008138 	.word	0x24008138
 800f084:	24008162 	.word	0x24008162
 800f088:	08014018 	.word	0x08014018
 800f08c:	080143ec 	.word	0x080143ec
 800f090:	08014090 	.word	0x08014090
 800f094:	2300      	movs	r3, #0
 800f096:	4423      	add	r3, r4
 800f098:	b29a      	uxth	r2, r3
 800f09a:	4b98      	ldr	r3, [pc, #608]	; (800f2fc <tcp_receive+0xb08>)
 800f09c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0a0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f0a8:	6938      	ldr	r0, [r7, #16]
 800f0aa:	f7fd fd36 	bl	800cb1a <tcp_seg_free>
            while (next &&
 800f0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d00e      	beq.n	800f0d2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f0b4:	4b91      	ldr	r3, [pc, #580]	; (800f2fc <tcp_receive+0xb08>)
 800f0b6:	881b      	ldrh	r3, [r3, #0]
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	4b91      	ldr	r3, [pc, #580]	; (800f300 <tcp_receive+0xb0c>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	441a      	add	r2, r3
 800f0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f0c8:	8909      	ldrh	r1, [r1, #8]
 800f0ca:	440b      	add	r3, r1
 800f0cc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	da9a      	bge.n	800f008 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d059      	beq.n	800f18c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f0d8:	4b88      	ldr	r3, [pc, #544]	; (800f2fc <tcp_receive+0xb08>)
 800f0da:	881b      	ldrh	r3, [r3, #0]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	4b88      	ldr	r3, [pc, #544]	; (800f300 <tcp_receive+0xb0c>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	441a      	add	r2, r3
 800f0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	dd4d      	ble.n	800f18c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	4b81      	ldr	r3, [pc, #516]	; (800f300 <tcp_receive+0xb0c>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	1ad3      	subs	r3, r2, r3
 800f100:	b29a      	uxth	r2, r3
 800f102:	4b80      	ldr	r3, [pc, #512]	; (800f304 <tcp_receive+0xb10>)
 800f104:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f106:	4b7f      	ldr	r3, [pc, #508]	; (800f304 <tcp_receive+0xb10>)
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	899b      	ldrh	r3, [r3, #12]
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	4618      	mov	r0, r3
 800f110:	f7f8 fbf2 	bl	80078f8 <lwip_htons>
 800f114:	4603      	mov	r3, r0
 800f116:	b2db      	uxtb	r3, r3
 800f118:	f003 0302 	and.w	r3, r3, #2
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d005      	beq.n	800f12c <tcp_receive+0x938>
                inseg.len -= 1;
 800f120:	4b78      	ldr	r3, [pc, #480]	; (800f304 <tcp_receive+0xb10>)
 800f122:	891b      	ldrh	r3, [r3, #8]
 800f124:	3b01      	subs	r3, #1
 800f126:	b29a      	uxth	r2, r3
 800f128:	4b76      	ldr	r3, [pc, #472]	; (800f304 <tcp_receive+0xb10>)
 800f12a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f12c:	4b75      	ldr	r3, [pc, #468]	; (800f304 <tcp_receive+0xb10>)
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	4a74      	ldr	r2, [pc, #464]	; (800f304 <tcp_receive+0xb10>)
 800f132:	8912      	ldrh	r2, [r2, #8]
 800f134:	4611      	mov	r1, r2
 800f136:	4618      	mov	r0, r3
 800f138:	f7fc f8f6 	bl	800b328 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f13c:	4b71      	ldr	r3, [pc, #452]	; (800f304 <tcp_receive+0xb10>)
 800f13e:	891c      	ldrh	r4, [r3, #8]
 800f140:	4b70      	ldr	r3, [pc, #448]	; (800f304 <tcp_receive+0xb10>)
 800f142:	68db      	ldr	r3, [r3, #12]
 800f144:	899b      	ldrh	r3, [r3, #12]
 800f146:	b29b      	uxth	r3, r3
 800f148:	4618      	mov	r0, r3
 800f14a:	f7f8 fbd5 	bl	80078f8 <lwip_htons>
 800f14e:	4603      	mov	r3, r0
 800f150:	b2db      	uxtb	r3, r3
 800f152:	f003 0303 	and.w	r3, r3, #3
 800f156:	2b00      	cmp	r3, #0
 800f158:	d001      	beq.n	800f15e <tcp_receive+0x96a>
 800f15a:	2301      	movs	r3, #1
 800f15c:	e000      	b.n	800f160 <tcp_receive+0x96c>
 800f15e:	2300      	movs	r3, #0
 800f160:	4423      	add	r3, r4
 800f162:	b29a      	uxth	r2, r3
 800f164:	4b65      	ldr	r3, [pc, #404]	; (800f2fc <tcp_receive+0xb08>)
 800f166:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f168:	4b64      	ldr	r3, [pc, #400]	; (800f2fc <tcp_receive+0xb08>)
 800f16a:	881b      	ldrh	r3, [r3, #0]
 800f16c:	461a      	mov	r2, r3
 800f16e:	4b64      	ldr	r3, [pc, #400]	; (800f300 <tcp_receive+0xb0c>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	441a      	add	r2, r3
 800f174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d006      	beq.n	800f18c <tcp_receive+0x998>
 800f17e:	4b62      	ldr	r3, [pc, #392]	; (800f308 <tcp_receive+0xb14>)
 800f180:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f184:	4961      	ldr	r1, [pc, #388]	; (800f30c <tcp_receive+0xb18>)
 800f186:	4862      	ldr	r0, [pc, #392]	; (800f310 <tcp_receive+0xb1c>)
 800f188:	f002 f98c 	bl	80114a4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f190:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f192:	4b5a      	ldr	r3, [pc, #360]	; (800f2fc <tcp_receive+0xb08>)
 800f194:	881b      	ldrh	r3, [r3, #0]
 800f196:	461a      	mov	r2, r3
 800f198:	4b59      	ldr	r3, [pc, #356]	; (800f300 <tcp_receive+0xb0c>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	441a      	add	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1a6:	4b55      	ldr	r3, [pc, #340]	; (800f2fc <tcp_receive+0xb08>)
 800f1a8:	881b      	ldrh	r3, [r3, #0]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d206      	bcs.n	800f1bc <tcp_receive+0x9c8>
 800f1ae:	4b56      	ldr	r3, [pc, #344]	; (800f308 <tcp_receive+0xb14>)
 800f1b0:	f240 6207 	movw	r2, #1543	; 0x607
 800f1b4:	4957      	ldr	r1, [pc, #348]	; (800f314 <tcp_receive+0xb20>)
 800f1b6:	4856      	ldr	r0, [pc, #344]	; (800f310 <tcp_receive+0xb1c>)
 800f1b8:	f002 f974 	bl	80114a4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1c0:	4b4e      	ldr	r3, [pc, #312]	; (800f2fc <tcp_receive+0xb08>)
 800f1c2:	881b      	ldrh	r3, [r3, #0]
 800f1c4:	1ad3      	subs	r3, r2, r3
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f7fc ffc5 	bl	800c15c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f1d2:	4b4c      	ldr	r3, [pc, #304]	; (800f304 <tcp_receive+0xb10>)
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	891b      	ldrh	r3, [r3, #8]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d006      	beq.n	800f1ea <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f1dc:	4b49      	ldr	r3, [pc, #292]	; (800f304 <tcp_receive+0xb10>)
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	4a4d      	ldr	r2, [pc, #308]	; (800f318 <tcp_receive+0xb24>)
 800f1e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f1e4:	4b47      	ldr	r3, [pc, #284]	; (800f304 <tcp_receive+0xb10>)
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f1ea:	4b46      	ldr	r3, [pc, #280]	; (800f304 <tcp_receive+0xb10>)
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	899b      	ldrh	r3, [r3, #12]
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7f8 fb80 	bl	80078f8 <lwip_htons>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	f003 0301 	and.w	r3, r3, #1
 800f200:	2b00      	cmp	r3, #0
 800f202:	f000 80b8 	beq.w	800f376 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f206:	4b45      	ldr	r3, [pc, #276]	; (800f31c <tcp_receive+0xb28>)
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	f043 0320 	orr.w	r3, r3, #32
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	4b42      	ldr	r3, [pc, #264]	; (800f31c <tcp_receive+0xb28>)
 800f212:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f214:	e0af      	b.n	800f376 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f21a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	4a36      	ldr	r2, [pc, #216]	; (800f300 <tcp_receive+0xb0c>)
 800f226:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	891b      	ldrh	r3, [r3, #8]
 800f22c:	461c      	mov	r4, r3
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	899b      	ldrh	r3, [r3, #12]
 800f234:	b29b      	uxth	r3, r3
 800f236:	4618      	mov	r0, r3
 800f238:	f7f8 fb5e 	bl	80078f8 <lwip_htons>
 800f23c:	4603      	mov	r3, r0
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	f003 0303 	and.w	r3, r3, #3
 800f244:	2b00      	cmp	r3, #0
 800f246:	d001      	beq.n	800f24c <tcp_receive+0xa58>
 800f248:	2301      	movs	r3, #1
 800f24a:	e000      	b.n	800f24e <tcp_receive+0xa5a>
 800f24c:	2300      	movs	r3, #0
 800f24e:	191a      	adds	r2, r3, r4
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f254:	441a      	add	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f25e:	461c      	mov	r4, r3
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	891b      	ldrh	r3, [r3, #8]
 800f264:	461d      	mov	r5, r3
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	899b      	ldrh	r3, [r3, #12]
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	4618      	mov	r0, r3
 800f270:	f7f8 fb42 	bl	80078f8 <lwip_htons>
 800f274:	4603      	mov	r3, r0
 800f276:	b2db      	uxtb	r3, r3
 800f278:	f003 0303 	and.w	r3, r3, #3
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d001      	beq.n	800f284 <tcp_receive+0xa90>
 800f280:	2301      	movs	r3, #1
 800f282:	e000      	b.n	800f286 <tcp_receive+0xa92>
 800f284:	2300      	movs	r3, #0
 800f286:	442b      	add	r3, r5
 800f288:	429c      	cmp	r4, r3
 800f28a:	d206      	bcs.n	800f29a <tcp_receive+0xaa6>
 800f28c:	4b1e      	ldr	r3, [pc, #120]	; (800f308 <tcp_receive+0xb14>)
 800f28e:	f240 622b 	movw	r2, #1579	; 0x62b
 800f292:	4923      	ldr	r1, [pc, #140]	; (800f320 <tcp_receive+0xb2c>)
 800f294:	481e      	ldr	r0, [pc, #120]	; (800f310 <tcp_receive+0xb1c>)
 800f296:	f002 f905 	bl	80114a4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	891b      	ldrh	r3, [r3, #8]
 800f29e:	461c      	mov	r4, r3
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	899b      	ldrh	r3, [r3, #12]
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7f8 fb25 	bl	80078f8 <lwip_htons>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	f003 0303 	and.w	r3, r3, #3
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d001      	beq.n	800f2be <tcp_receive+0xaca>
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	e000      	b.n	800f2c0 <tcp_receive+0xacc>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	1919      	adds	r1, r3, r4
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f2c6:	b28b      	uxth	r3, r1
 800f2c8:	1ad3      	subs	r3, r2, r3
 800f2ca:	b29a      	uxth	r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7fc ff43 	bl	800c15c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	891b      	ldrh	r3, [r3, #8]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d028      	beq.n	800f332 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f2e0:	4b0d      	ldr	r3, [pc, #52]	; (800f318 <tcp_receive+0xb24>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d01d      	beq.n	800f324 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f2e8:	4b0b      	ldr	r3, [pc, #44]	; (800f318 <tcp_receive+0xb24>)
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	4610      	mov	r0, r2
 800f2f4:	f7fc fa60 	bl	800b7b8 <pbuf_cat>
 800f2f8:	e018      	b.n	800f32c <tcp_receive+0xb38>
 800f2fa:	bf00      	nop
 800f2fc:	24008162 	.word	0x24008162
 800f300:	24008158 	.word	0x24008158
 800f304:	24008138 	.word	0x24008138
 800f308:	08014018 	.word	0x08014018
 800f30c:	08014424 	.word	0x08014424
 800f310:	08014090 	.word	0x08014090
 800f314:	08014460 	.word	0x08014460
 800f318:	24008168 	.word	0x24008168
 800f31c:	24008165 	.word	0x24008165
 800f320:	08014480 	.word	0x08014480
            } else {
              recv_data = cseg->p;
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	4a70      	ldr	r2, [pc, #448]	; (800f4ec <tcp_receive+0xcf8>)
 800f32a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2200      	movs	r2, #0
 800f330:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	68db      	ldr	r3, [r3, #12]
 800f336:	899b      	ldrh	r3, [r3, #12]
 800f338:	b29b      	uxth	r3, r3
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7f8 fadc 	bl	80078f8 <lwip_htons>
 800f340:	4603      	mov	r3, r0
 800f342:	b2db      	uxtb	r3, r3
 800f344:	f003 0301 	and.w	r3, r3, #1
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d00d      	beq.n	800f368 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f34c:	4b68      	ldr	r3, [pc, #416]	; (800f4f0 <tcp_receive+0xcfc>)
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	f043 0320 	orr.w	r3, r3, #32
 800f354:	b2da      	uxtb	r2, r3
 800f356:	4b66      	ldr	r3, [pc, #408]	; (800f4f0 <tcp_receive+0xcfc>)
 800f358:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	7d1b      	ldrb	r3, [r3, #20]
 800f35e:	2b04      	cmp	r3, #4
 800f360:	d102      	bne.n	800f368 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2207      	movs	r2, #7
 800f366:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f370:	68b8      	ldr	r0, [r7, #8]
 800f372:	f7fd fbd2 	bl	800cb1a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d008      	beq.n	800f390 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	685a      	ldr	r2, [r3, #4]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f38a:	429a      	cmp	r2, r3
 800f38c:	f43f af43 	beq.w	800f216 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	8b5b      	ldrh	r3, [r3, #26]
 800f394:	f003 0301 	and.w	r3, r3, #1
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d00e      	beq.n	800f3ba <tcp_receive+0xbc6>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	8b5b      	ldrh	r3, [r3, #26]
 800f3a0:	f023 0301 	bic.w	r3, r3, #1
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	835a      	strh	r2, [r3, #26]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	8b5b      	ldrh	r3, [r3, #26]
 800f3ae:	f043 0302 	orr.w	r3, r3, #2
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f3b8:	e188      	b.n	800f6cc <tcp_receive+0xed8>
        tcp_ack(pcb);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	8b5b      	ldrh	r3, [r3, #26]
 800f3be:	f043 0301 	orr.w	r3, r3, #1
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f3c8:	e180      	b.n	800f6cc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d106      	bne.n	800f3e0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f3d2:	4848      	ldr	r0, [pc, #288]	; (800f4f4 <tcp_receive+0xd00>)
 800f3d4:	f7fd fbba 	bl	800cb4c <tcp_seg_copy>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	675a      	str	r2, [r3, #116]	; 0x74
 800f3de:	e16d      	b.n	800f6bc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f3ea:	e157      	b.n	800f69c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800f3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	685a      	ldr	r2, [r3, #4]
 800f3f2:	4b41      	ldr	r3, [pc, #260]	; (800f4f8 <tcp_receive+0xd04>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d11d      	bne.n	800f436 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f3fa:	4b3e      	ldr	r3, [pc, #248]	; (800f4f4 <tcp_receive+0xd00>)
 800f3fc:	891a      	ldrh	r2, [r3, #8]
 800f3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f400:	891b      	ldrh	r3, [r3, #8]
 800f402:	429a      	cmp	r2, r3
 800f404:	f240 814f 	bls.w	800f6a6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f408:	483a      	ldr	r0, [pc, #232]	; (800f4f4 <tcp_receive+0xd00>)
 800f40a:	f7fd fb9f 	bl	800cb4c <tcp_seg_copy>
 800f40e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	2b00      	cmp	r3, #0
 800f414:	f000 8149 	beq.w	800f6aa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800f418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d003      	beq.n	800f426 <tcp_receive+0xc32>
                    prev->next = cseg;
 800f41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f420:	697a      	ldr	r2, [r7, #20]
 800f422:	601a      	str	r2, [r3, #0]
 800f424:	e002      	b.n	800f42c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	697a      	ldr	r2, [r7, #20]
 800f42a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f42c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f42e:	6978      	ldr	r0, [r7, #20]
 800f430:	f7ff f8dc 	bl	800e5ec <tcp_oos_insert_segment>
                }
                break;
 800f434:	e139      	b.n	800f6aa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d117      	bne.n	800f46c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f43c:	4b2e      	ldr	r3, [pc, #184]	; (800f4f8 <tcp_receive+0xd04>)
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f442:	68db      	ldr	r3, [r3, #12]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	1ad3      	subs	r3, r2, r3
 800f448:	2b00      	cmp	r3, #0
 800f44a:	da57      	bge.n	800f4fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f44c:	4829      	ldr	r0, [pc, #164]	; (800f4f4 <tcp_receive+0xd00>)
 800f44e:	f7fd fb7d 	bl	800cb4c <tcp_seg_copy>
 800f452:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	2b00      	cmp	r3, #0
 800f458:	f000 8129 	beq.w	800f6ae <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	69ba      	ldr	r2, [r7, #24]
 800f460:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f464:	69b8      	ldr	r0, [r7, #24]
 800f466:	f7ff f8c1 	bl	800e5ec <tcp_oos_insert_segment>
                  }
                  break;
 800f46a:	e120      	b.n	800f6ae <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f46c:	4b22      	ldr	r3, [pc, #136]	; (800f4f8 <tcp_receive+0xd04>)
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	1ad3      	subs	r3, r2, r3
 800f478:	3b01      	subs	r3, #1
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	db3e      	blt.n	800f4fc <tcp_receive+0xd08>
 800f47e:	4b1e      	ldr	r3, [pc, #120]	; (800f4f8 <tcp_receive+0xd04>)
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	1ad3      	subs	r3, r2, r3
 800f48a:	3301      	adds	r3, #1
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	dc35      	bgt.n	800f4fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f490:	4818      	ldr	r0, [pc, #96]	; (800f4f4 <tcp_receive+0xd00>)
 800f492:	f7fd fb5b 	bl	800cb4c <tcp_seg_copy>
 800f496:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	f000 8109 	beq.w	800f6b2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4a8:	8912      	ldrh	r2, [r2, #8]
 800f4aa:	441a      	add	r2, r3
 800f4ac:	4b12      	ldr	r3, [pc, #72]	; (800f4f8 <tcp_receive+0xd04>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	1ad3      	subs	r3, r2, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	dd12      	ble.n	800f4dc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f4b6:	4b10      	ldr	r3, [pc, #64]	; (800f4f8 <tcp_receive+0xd04>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	1ad3      	subs	r3, r2, r3
 800f4c6:	b29a      	uxth	r2, r3
 800f4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ce:	685a      	ldr	r2, [r3, #4]
 800f4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4d2:	891b      	ldrh	r3, [r3, #8]
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	4610      	mov	r0, r2
 800f4d8:	f7fb ff26 	bl	800b328 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4de:	69fa      	ldr	r2, [r7, #28]
 800f4e0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f4e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4e4:	69f8      	ldr	r0, [r7, #28]
 800f4e6:	f7ff f881 	bl	800e5ec <tcp_oos_insert_segment>
                  }
                  break;
 800f4ea:	e0e2      	b.n	800f6b2 <tcp_receive+0xebe>
 800f4ec:	24008168 	.word	0x24008168
 800f4f0:	24008165 	.word	0x24008165
 800f4f4:	24008138 	.word	0x24008138
 800f4f8:	24008158 	.word	0x24008158
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	f040 80c6 	bne.w	800f696 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f50a:	4b80      	ldr	r3, [pc, #512]	; (800f70c <tcp_receive+0xf18>)
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f516:	2b00      	cmp	r3, #0
 800f518:	f340 80bd 	ble.w	800f696 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	899b      	ldrh	r3, [r3, #12]
 800f522:	b29b      	uxth	r3, r3
 800f524:	4618      	mov	r0, r3
 800f526:	f7f8 f9e7 	bl	80078f8 <lwip_htons>
 800f52a:	4603      	mov	r3, r0
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	f003 0301 	and.w	r3, r3, #1
 800f532:	2b00      	cmp	r3, #0
 800f534:	f040 80bf 	bne.w	800f6b6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f538:	4875      	ldr	r0, [pc, #468]	; (800f710 <tcp_receive+0xf1c>)
 800f53a:	f7fd fb07 	bl	800cb4c <tcp_seg_copy>
 800f53e:	4602      	mov	r2, r0
 800f540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f542:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f000 80b6 	beq.w	800f6ba <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f556:	8912      	ldrh	r2, [r2, #8]
 800f558:	441a      	add	r2, r3
 800f55a:	4b6c      	ldr	r3, [pc, #432]	; (800f70c <tcp_receive+0xf18>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	1ad3      	subs	r3, r2, r3
 800f560:	2b00      	cmp	r3, #0
 800f562:	dd12      	ble.n	800f58a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f564:	4b69      	ldr	r3, [pc, #420]	; (800f70c <tcp_receive+0xf18>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	b29a      	uxth	r2, r3
 800f56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56c:	68db      	ldr	r3, [r3, #12]
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	b29b      	uxth	r3, r3
 800f572:	1ad3      	subs	r3, r2, r3
 800f574:	b29a      	uxth	r2, r3
 800f576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f578:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57c:	685a      	ldr	r2, [r3, #4]
 800f57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f580:	891b      	ldrh	r3, [r3, #8]
 800f582:	4619      	mov	r1, r3
 800f584:	4610      	mov	r0, r2
 800f586:	f7fb fecf 	bl	800b328 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f58a:	4b62      	ldr	r3, [pc, #392]	; (800f714 <tcp_receive+0xf20>)
 800f58c:	881b      	ldrh	r3, [r3, #0]
 800f58e:	461a      	mov	r2, r3
 800f590:	4b5e      	ldr	r3, [pc, #376]	; (800f70c <tcp_receive+0xf18>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	441a      	add	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f59a:	6879      	ldr	r1, [r7, #4]
 800f59c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f59e:	440b      	add	r3, r1
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f340 8089 	ble.w	800f6ba <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	899b      	ldrh	r3, [r3, #12]
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7f8 f9a0 	bl	80078f8 <lwip_htons>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	f003 0301 	and.w	r3, r3, #1
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d022      	beq.n	800f60a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	899b      	ldrh	r3, [r3, #12]
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	b21b      	sxth	r3, r3
 800f5d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f5d4:	b21c      	sxth	r4, r3
 800f5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	68db      	ldr	r3, [r3, #12]
 800f5dc:	899b      	ldrh	r3, [r3, #12]
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7f8 f989 	bl	80078f8 <lwip_htons>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7f8 f980 	bl	80078f8 <lwip_htons>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	b21b      	sxth	r3, r3
 800f5fc:	4323      	orrs	r3, r4
 800f5fe:	b21a      	sxth	r2, r3
 800f600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	b292      	uxth	r2, r2
 800f608:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60e:	b29a      	uxth	r2, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f614:	4413      	add	r3, r2
 800f616:	b299      	uxth	r1, r3
 800f618:	4b3c      	ldr	r3, [pc, #240]	; (800f70c <tcp_receive+0xf18>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	b29a      	uxth	r2, r3
 800f61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	1a8a      	subs	r2, r1, r2
 800f624:	b292      	uxth	r2, r2
 800f626:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	685a      	ldr	r2, [r3, #4]
 800f62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	891b      	ldrh	r3, [r3, #8]
 800f634:	4619      	mov	r1, r3
 800f636:	4610      	mov	r0, r2
 800f638:	f7fb fe76 	bl	800b328 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	891c      	ldrh	r4, [r3, #8]
 800f642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	899b      	ldrh	r3, [r3, #12]
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7f8 f953 	bl	80078f8 <lwip_htons>
 800f652:	4603      	mov	r3, r0
 800f654:	b2db      	uxtb	r3, r3
 800f656:	f003 0303 	and.w	r3, r3, #3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d001      	beq.n	800f662 <tcp_receive+0xe6e>
 800f65e:	2301      	movs	r3, #1
 800f660:	e000      	b.n	800f664 <tcp_receive+0xe70>
 800f662:	2300      	movs	r3, #0
 800f664:	4423      	add	r3, r4
 800f666:	b29a      	uxth	r2, r3
 800f668:	4b2a      	ldr	r3, [pc, #168]	; (800f714 <tcp_receive+0xf20>)
 800f66a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f66c:	4b29      	ldr	r3, [pc, #164]	; (800f714 <tcp_receive+0xf20>)
 800f66e:	881b      	ldrh	r3, [r3, #0]
 800f670:	461a      	mov	r2, r3
 800f672:	4b26      	ldr	r3, [pc, #152]	; (800f70c <tcp_receive+0xf18>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	441a      	add	r2, r3
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f67c:	6879      	ldr	r1, [r7, #4]
 800f67e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f680:	440b      	add	r3, r1
 800f682:	429a      	cmp	r2, r3
 800f684:	d019      	beq.n	800f6ba <tcp_receive+0xec6>
 800f686:	4b24      	ldr	r3, [pc, #144]	; (800f718 <tcp_receive+0xf24>)
 800f688:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f68c:	4923      	ldr	r1, [pc, #140]	; (800f71c <tcp_receive+0xf28>)
 800f68e:	4824      	ldr	r0, [pc, #144]	; (800f720 <tcp_receive+0xf2c>)
 800f690:	f001 ff08 	bl	80114a4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f694:	e011      	b.n	800f6ba <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	f47f aea4 	bne.w	800f3ec <tcp_receive+0xbf8>
 800f6a4:	e00a      	b.n	800f6bc <tcp_receive+0xec8>
                break;
 800f6a6:	bf00      	nop
 800f6a8:	e008      	b.n	800f6bc <tcp_receive+0xec8>
                break;
 800f6aa:	bf00      	nop
 800f6ac:	e006      	b.n	800f6bc <tcp_receive+0xec8>
                  break;
 800f6ae:	bf00      	nop
 800f6b0:	e004      	b.n	800f6bc <tcp_receive+0xec8>
                  break;
 800f6b2:	bf00      	nop
 800f6b4:	e002      	b.n	800f6bc <tcp_receive+0xec8>
                  break;
 800f6b6:	bf00      	nop
 800f6b8:	e000      	b.n	800f6bc <tcp_receive+0xec8>
                break;
 800f6ba:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f001 fa33 	bl	8010b28 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f6c2:	e003      	b.n	800f6cc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f001 fa2f 	bl	8010b28 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f6ca:	e01a      	b.n	800f702 <tcp_receive+0xf0e>
 800f6cc:	e019      	b.n	800f702 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f6ce:	4b0f      	ldr	r3, [pc, #60]	; (800f70c <tcp_receive+0xf18>)
 800f6d0:	681a      	ldr	r2, [r3, #0]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d6:	1ad3      	subs	r3, r2, r3
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	db0a      	blt.n	800f6f2 <tcp_receive+0xefe>
 800f6dc:	4b0b      	ldr	r3, [pc, #44]	; (800f70c <tcp_receive+0xf18>)
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e4:	6879      	ldr	r1, [r7, #4]
 800f6e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6e8:	440b      	add	r3, r1
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	dd07      	ble.n	800f702 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	8b5b      	ldrh	r3, [r3, #26]
 800f6f6:	f043 0302 	orr.w	r3, r3, #2
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f700:	e7ff      	b.n	800f702 <tcp_receive+0xf0e>
 800f702:	bf00      	nop
 800f704:	3750      	adds	r7, #80	; 0x50
 800f706:	46bd      	mov	sp, r7
 800f708:	bdb0      	pop	{r4, r5, r7, pc}
 800f70a:	bf00      	nop
 800f70c:	24008158 	.word	0x24008158
 800f710:	24008138 	.word	0x24008138
 800f714:	24008162 	.word	0x24008162
 800f718:	08014018 	.word	0x08014018
 800f71c:	080143ec 	.word	0x080143ec
 800f720:	08014090 	.word	0x08014090

0800f724 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f72a:	4b15      	ldr	r3, [pc, #84]	; (800f780 <tcp_get_next_optbyte+0x5c>)
 800f72c:	881b      	ldrh	r3, [r3, #0]
 800f72e:	1c5a      	adds	r2, r3, #1
 800f730:	b291      	uxth	r1, r2
 800f732:	4a13      	ldr	r2, [pc, #76]	; (800f780 <tcp_get_next_optbyte+0x5c>)
 800f734:	8011      	strh	r1, [r2, #0]
 800f736:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f738:	4b12      	ldr	r3, [pc, #72]	; (800f784 <tcp_get_next_optbyte+0x60>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d004      	beq.n	800f74a <tcp_get_next_optbyte+0x26>
 800f740:	4b11      	ldr	r3, [pc, #68]	; (800f788 <tcp_get_next_optbyte+0x64>)
 800f742:	881b      	ldrh	r3, [r3, #0]
 800f744:	88fa      	ldrh	r2, [r7, #6]
 800f746:	429a      	cmp	r2, r3
 800f748:	d208      	bcs.n	800f75c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f74a:	4b10      	ldr	r3, [pc, #64]	; (800f78c <tcp_get_next_optbyte+0x68>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	3314      	adds	r3, #20
 800f750:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f752:	88fb      	ldrh	r3, [r7, #6]
 800f754:	683a      	ldr	r2, [r7, #0]
 800f756:	4413      	add	r3, r2
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	e00b      	b.n	800f774 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f75c:	88fb      	ldrh	r3, [r7, #6]
 800f75e:	b2da      	uxtb	r2, r3
 800f760:	4b09      	ldr	r3, [pc, #36]	; (800f788 <tcp_get_next_optbyte+0x64>)
 800f762:	881b      	ldrh	r3, [r3, #0]
 800f764:	b2db      	uxtb	r3, r3
 800f766:	1ad3      	subs	r3, r2, r3
 800f768:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f76a:	4b06      	ldr	r3, [pc, #24]	; (800f784 <tcp_get_next_optbyte+0x60>)
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	797b      	ldrb	r3, [r7, #5]
 800f770:	4413      	add	r3, r2
 800f772:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f774:	4618      	mov	r0, r3
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr
 800f780:	24008154 	.word	0x24008154
 800f784:	24008150 	.word	0x24008150
 800f788:	2400814e 	.word	0x2400814e
 800f78c:	24008148 	.word	0x24008148

0800f790 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d106      	bne.n	800f7ac <tcp_parseopt+0x1c>
 800f79e:	4b32      	ldr	r3, [pc, #200]	; (800f868 <tcp_parseopt+0xd8>)
 800f7a0:	f240 727d 	movw	r2, #1917	; 0x77d
 800f7a4:	4931      	ldr	r1, [pc, #196]	; (800f86c <tcp_parseopt+0xdc>)
 800f7a6:	4832      	ldr	r0, [pc, #200]	; (800f870 <tcp_parseopt+0xe0>)
 800f7a8:	f001 fe7c 	bl	80114a4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f7ac:	4b31      	ldr	r3, [pc, #196]	; (800f874 <tcp_parseopt+0xe4>)
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d055      	beq.n	800f860 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f7b4:	4b30      	ldr	r3, [pc, #192]	; (800f878 <tcp_parseopt+0xe8>)
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	801a      	strh	r2, [r3, #0]
 800f7ba:	e045      	b.n	800f848 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f7bc:	f7ff ffb2 	bl	800f724 <tcp_get_next_optbyte>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f7c4:	7bfb      	ldrb	r3, [r7, #15]
 800f7c6:	2b02      	cmp	r3, #2
 800f7c8:	d006      	beq.n	800f7d8 <tcp_parseopt+0x48>
 800f7ca:	2b02      	cmp	r3, #2
 800f7cc:	dc2b      	bgt.n	800f826 <tcp_parseopt+0x96>
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d041      	beq.n	800f856 <tcp_parseopt+0xc6>
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d127      	bne.n	800f826 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f7d6:	e037      	b.n	800f848 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f7d8:	f7ff ffa4 	bl	800f724 <tcp_get_next_optbyte>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b04      	cmp	r3, #4
 800f7e0:	d13b      	bne.n	800f85a <tcp_parseopt+0xca>
 800f7e2:	4b25      	ldr	r3, [pc, #148]	; (800f878 <tcp_parseopt+0xe8>)
 800f7e4:	881b      	ldrh	r3, [r3, #0]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	4a22      	ldr	r2, [pc, #136]	; (800f874 <tcp_parseopt+0xe4>)
 800f7ea:	8812      	ldrh	r2, [r2, #0]
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	da34      	bge.n	800f85a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f7f0:	f7ff ff98 	bl	800f724 <tcp_get_next_optbyte>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	021b      	lsls	r3, r3, #8
 800f7fa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f7fc:	f7ff ff92 	bl	800f724 <tcp_get_next_optbyte>
 800f800:	4603      	mov	r3, r0
 800f802:	b29a      	uxth	r2, r3
 800f804:	89bb      	ldrh	r3, [r7, #12]
 800f806:	4313      	orrs	r3, r2
 800f808:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f80a:	89bb      	ldrh	r3, [r7, #12]
 800f80c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f810:	d804      	bhi.n	800f81c <tcp_parseopt+0x8c>
 800f812:	89bb      	ldrh	r3, [r7, #12]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d001      	beq.n	800f81c <tcp_parseopt+0x8c>
 800f818:	89ba      	ldrh	r2, [r7, #12]
 800f81a:	e001      	b.n	800f820 <tcp_parseopt+0x90>
 800f81c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f824:	e010      	b.n	800f848 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f826:	f7ff ff7d 	bl	800f724 <tcp_get_next_optbyte>
 800f82a:	4603      	mov	r3, r0
 800f82c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f82e:	7afb      	ldrb	r3, [r7, #11]
 800f830:	2b01      	cmp	r3, #1
 800f832:	d914      	bls.n	800f85e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f834:	7afb      	ldrb	r3, [r7, #11]
 800f836:	b29a      	uxth	r2, r3
 800f838:	4b0f      	ldr	r3, [pc, #60]	; (800f878 <tcp_parseopt+0xe8>)
 800f83a:	881b      	ldrh	r3, [r3, #0]
 800f83c:	4413      	add	r3, r2
 800f83e:	b29b      	uxth	r3, r3
 800f840:	3b02      	subs	r3, #2
 800f842:	b29a      	uxth	r2, r3
 800f844:	4b0c      	ldr	r3, [pc, #48]	; (800f878 <tcp_parseopt+0xe8>)
 800f846:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f848:	4b0b      	ldr	r3, [pc, #44]	; (800f878 <tcp_parseopt+0xe8>)
 800f84a:	881a      	ldrh	r2, [r3, #0]
 800f84c:	4b09      	ldr	r3, [pc, #36]	; (800f874 <tcp_parseopt+0xe4>)
 800f84e:	881b      	ldrh	r3, [r3, #0]
 800f850:	429a      	cmp	r2, r3
 800f852:	d3b3      	bcc.n	800f7bc <tcp_parseopt+0x2c>
 800f854:	e004      	b.n	800f860 <tcp_parseopt+0xd0>
          return;
 800f856:	bf00      	nop
 800f858:	e002      	b.n	800f860 <tcp_parseopt+0xd0>
            return;
 800f85a:	bf00      	nop
 800f85c:	e000      	b.n	800f860 <tcp_parseopt+0xd0>
            return;
 800f85e:	bf00      	nop
      }
    }
  }
}
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	08014018 	.word	0x08014018
 800f86c:	080144a8 	.word	0x080144a8
 800f870:	08014090 	.word	0x08014090
 800f874:	2400814c 	.word	0x2400814c
 800f878:	24008154 	.word	0x24008154

0800f87c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f87c:	b480      	push	{r7}
 800f87e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f880:	4b05      	ldr	r3, [pc, #20]	; (800f898 <tcp_trigger_input_pcb_close+0x1c>)
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	f043 0310 	orr.w	r3, r3, #16
 800f888:	b2da      	uxtb	r2, r3
 800f88a:	4b03      	ldr	r3, [pc, #12]	; (800f898 <tcp_trigger_input_pcb_close+0x1c>)
 800f88c:	701a      	strb	r2, [r3, #0]
}
 800f88e:	bf00      	nop
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr
 800f898:	24008165 	.word	0x24008165

0800f89c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b084      	sub	sp, #16
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d00a      	beq.n	800f8c4 <tcp_route+0x28>
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	7a1b      	ldrb	r3, [r3, #8]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d006      	beq.n	800f8c4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	7a1b      	ldrb	r3, [r3, #8]
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fb fb5a 	bl	800af74 <netif_get_by_index>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	e003      	b.n	800f8cc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7f9 faed 	bl	8008ea4 <ip4_route>
 800f8ca:	4603      	mov	r3, r0
  }
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3710      	adds	r7, #16
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f8d4:	b590      	push	{r4, r7, lr}
 800f8d6:	b087      	sub	sp, #28
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	603b      	str	r3, [r7, #0]
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d105      	bne.n	800f8f6 <tcp_create_segment+0x22>
 800f8ea:	4b44      	ldr	r3, [pc, #272]	; (800f9fc <tcp_create_segment+0x128>)
 800f8ec:	22a3      	movs	r2, #163	; 0xa3
 800f8ee:	4944      	ldr	r1, [pc, #272]	; (800fa00 <tcp_create_segment+0x12c>)
 800f8f0:	4844      	ldr	r0, [pc, #272]	; (800fa04 <tcp_create_segment+0x130>)
 800f8f2:	f001 fdd7 	bl	80114a4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d105      	bne.n	800f908 <tcp_create_segment+0x34>
 800f8fc:	4b3f      	ldr	r3, [pc, #252]	; (800f9fc <tcp_create_segment+0x128>)
 800f8fe:	22a4      	movs	r2, #164	; 0xa4
 800f900:	4941      	ldr	r1, [pc, #260]	; (800fa08 <tcp_create_segment+0x134>)
 800f902:	4840      	ldr	r0, [pc, #256]	; (800fa04 <tcp_create_segment+0x130>)
 800f904:	f001 fdce 	bl	80114a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f908:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f90c:	009b      	lsls	r3, r3, #2
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	f003 0304 	and.w	r3, r3, #4
 800f914:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f916:	2003      	movs	r0, #3
 800f918:	f7fb f80a 	bl	800a930 <memp_malloc>
 800f91c:	6138      	str	r0, [r7, #16]
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d104      	bne.n	800f92e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f924:	68b8      	ldr	r0, [r7, #8]
 800f926:	f7fb fe85 	bl	800b634 <pbuf_free>
    return NULL;
 800f92a:	2300      	movs	r3, #0
 800f92c:	e061      	b.n	800f9f2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f934:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	2200      	movs	r2, #0
 800f93a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	68ba      	ldr	r2, [r7, #8]
 800f940:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	891a      	ldrh	r2, [r3, #8]
 800f946:	7dfb      	ldrb	r3, [r7, #23]
 800f948:	b29b      	uxth	r3, r3
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d205      	bcs.n	800f95a <tcp_create_segment+0x86>
 800f94e:	4b2b      	ldr	r3, [pc, #172]	; (800f9fc <tcp_create_segment+0x128>)
 800f950:	22b0      	movs	r2, #176	; 0xb0
 800f952:	492e      	ldr	r1, [pc, #184]	; (800fa0c <tcp_create_segment+0x138>)
 800f954:	482b      	ldr	r0, [pc, #172]	; (800fa04 <tcp_create_segment+0x130>)
 800f956:	f001 fda5 	bl	80114a4 <iprintf>
  seg->len = p->tot_len - optlen;
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	891a      	ldrh	r2, [r3, #8]
 800f95e:	7dfb      	ldrb	r3, [r7, #23]
 800f960:	b29b      	uxth	r3, r3
 800f962:	1ad3      	subs	r3, r2, r3
 800f964:	b29a      	uxth	r2, r3
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f96a:	2114      	movs	r1, #20
 800f96c:	68b8      	ldr	r0, [r7, #8]
 800f96e:	f7fb fdcb 	bl	800b508 <pbuf_add_header>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	d004      	beq.n	800f982 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f978:	6938      	ldr	r0, [r7, #16]
 800f97a:	f7fd f8ce 	bl	800cb1a <tcp_seg_free>
    return NULL;
 800f97e:	2300      	movs	r3, #0
 800f980:	e037      	b.n	800f9f2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	685a      	ldr	r2, [r3, #4]
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	8ada      	ldrh	r2, [r3, #22]
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	68dc      	ldr	r4, [r3, #12]
 800f994:	4610      	mov	r0, r2
 800f996:	f7f7 ffaf 	bl	80078f8 <lwip_htons>
 800f99a:	4603      	mov	r3, r0
 800f99c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	8b1a      	ldrh	r2, [r3, #24]
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	68dc      	ldr	r4, [r3, #12]
 800f9a6:	4610      	mov	r0, r2
 800f9a8:	f7f7 ffa6 	bl	80078f8 <lwip_htons>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	68dc      	ldr	r4, [r3, #12]
 800f9b4:	6838      	ldr	r0, [r7, #0]
 800f9b6:	f7f7 ffb4 	bl	8007922 <lwip_htonl>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f9be:	7dfb      	ldrb	r3, [r7, #23]
 800f9c0:	089b      	lsrs	r3, r3, #2
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	3305      	adds	r3, #5
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	031b      	lsls	r3, r3, #12
 800f9cc:	b29a      	uxth	r2, r3
 800f9ce:	79fb      	ldrb	r3, [r7, #7]
 800f9d0:	b29b      	uxth	r3, r3
 800f9d2:	4313      	orrs	r3, r2
 800f9d4:	b29a      	uxth	r2, r3
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	68dc      	ldr	r4, [r3, #12]
 800f9da:	4610      	mov	r0, r2
 800f9dc:	f7f7 ff8c 	bl	80078f8 <lwip_htons>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	68db      	ldr	r3, [r3, #12]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	749a      	strb	r2, [r3, #18]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	74da      	strb	r2, [r3, #19]
  return seg;
 800f9f0:	693b      	ldr	r3, [r7, #16]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	371c      	adds	r7, #28
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd90      	pop	{r4, r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	080144c4 	.word	0x080144c4
 800fa00:	08014524 	.word	0x08014524
 800fa04:	08014544 	.word	0x08014544
 800fa08:	0801456c 	.word	0x0801456c
 800fa0c:	08014590 	.word	0x08014590

0800fa10 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fa10:	b590      	push	{r4, r7, lr}
 800fa12:	b08b      	sub	sp, #44	; 0x2c
 800fa14:	af02      	add	r7, sp, #8
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	460b      	mov	r3, r1
 800fa1a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	61fb      	str	r3, [r7, #28]
 800fa20:	2300      	movs	r3, #0
 800fa22:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fa24:	2300      	movs	r3, #0
 800fa26:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d106      	bne.n	800fa3c <tcp_split_unsent_seg+0x2c>
 800fa2e:	4b95      	ldr	r3, [pc, #596]	; (800fc84 <tcp_split_unsent_seg+0x274>)
 800fa30:	f240 324b 	movw	r2, #843	; 0x34b
 800fa34:	4994      	ldr	r1, [pc, #592]	; (800fc88 <tcp_split_unsent_seg+0x278>)
 800fa36:	4895      	ldr	r0, [pc, #596]	; (800fc8c <tcp_split_unsent_seg+0x27c>)
 800fa38:	f001 fd34 	bl	80114a4 <iprintf>

  useg = pcb->unsent;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa40:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d102      	bne.n	800fa4e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fa48:	f04f 33ff 	mov.w	r3, #4294967295
 800fa4c:	e116      	b.n	800fc7c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fa4e:	887b      	ldrh	r3, [r7, #2]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d109      	bne.n	800fa68 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fa54:	4b8b      	ldr	r3, [pc, #556]	; (800fc84 <tcp_split_unsent_seg+0x274>)
 800fa56:	f240 3253 	movw	r2, #851	; 0x353
 800fa5a:	498d      	ldr	r1, [pc, #564]	; (800fc90 <tcp_split_unsent_seg+0x280>)
 800fa5c:	488b      	ldr	r0, [pc, #556]	; (800fc8c <tcp_split_unsent_seg+0x27c>)
 800fa5e:	f001 fd21 	bl	80114a4 <iprintf>
    return ERR_VAL;
 800fa62:	f06f 0305 	mvn.w	r3, #5
 800fa66:	e109      	b.n	800fc7c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	891b      	ldrh	r3, [r3, #8]
 800fa6c:	887a      	ldrh	r2, [r7, #2]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d301      	bcc.n	800fa76 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fa72:	2300      	movs	r3, #0
 800fa74:	e102      	b.n	800fc7c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa7a:	887a      	ldrh	r2, [r7, #2]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d906      	bls.n	800fa8e <tcp_split_unsent_seg+0x7e>
 800fa80:	4b80      	ldr	r3, [pc, #512]	; (800fc84 <tcp_split_unsent_seg+0x274>)
 800fa82:	f240 325b 	movw	r2, #859	; 0x35b
 800fa86:	4983      	ldr	r1, [pc, #524]	; (800fc94 <tcp_split_unsent_seg+0x284>)
 800fa88:	4880      	ldr	r0, [pc, #512]	; (800fc8c <tcp_split_unsent_seg+0x27c>)
 800fa8a:	f001 fd0b 	bl	80114a4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	891b      	ldrh	r3, [r3, #8]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d106      	bne.n	800faa4 <tcp_split_unsent_seg+0x94>
 800fa96:	4b7b      	ldr	r3, [pc, #492]	; (800fc84 <tcp_split_unsent_seg+0x274>)
 800fa98:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fa9c:	497e      	ldr	r1, [pc, #504]	; (800fc98 <tcp_split_unsent_seg+0x288>)
 800fa9e:	487b      	ldr	r0, [pc, #492]	; (800fc8c <tcp_split_unsent_seg+0x27c>)
 800faa0:	f001 fd00 	bl	80114a4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	7a9b      	ldrb	r3, [r3, #10]
 800faa8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800faaa:	7bfb      	ldrb	r3, [r7, #15]
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	f003 0304 	and.w	r3, r3, #4
 800fab4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	891a      	ldrh	r2, [r3, #8]
 800faba:	887b      	ldrh	r3, [r7, #2]
 800fabc:	1ad3      	subs	r3, r2, r3
 800fabe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fac0:	7bbb      	ldrb	r3, [r7, #14]
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	89bb      	ldrh	r3, [r7, #12]
 800fac6:	4413      	add	r3, r2
 800fac8:	b29b      	uxth	r3, r3
 800faca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800face:	4619      	mov	r1, r3
 800fad0:	2036      	movs	r0, #54	; 0x36
 800fad2:	f7fb facb 	bl	800b06c <pbuf_alloc>
 800fad6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f000 80b7 	beq.w	800fc4e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	891a      	ldrh	r2, [r3, #8]
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	891b      	ldrh	r3, [r3, #8]
 800faea:	1ad3      	subs	r3, r2, r3
 800faec:	b29a      	uxth	r2, r3
 800faee:	887b      	ldrh	r3, [r7, #2]
 800faf0:	4413      	add	r3, r2
 800faf2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	6858      	ldr	r0, [r3, #4]
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	685a      	ldr	r2, [r3, #4]
 800fafc:	7bbb      	ldrb	r3, [r7, #14]
 800fafe:	18d1      	adds	r1, r2, r3
 800fb00:	897b      	ldrh	r3, [r7, #10]
 800fb02:	89ba      	ldrh	r2, [r7, #12]
 800fb04:	f7fb ff80 	bl	800ba08 <pbuf_copy_partial>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	89bb      	ldrh	r3, [r7, #12]
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	f040 809f 	bne.w	800fc52 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	899b      	ldrh	r3, [r3, #12]
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7f7 feeb 	bl	80078f8 <lwip_htons>
 800fb22:	4603      	mov	r3, r0
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb2a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800fb30:	7efb      	ldrb	r3, [r7, #27]
 800fb32:	f003 0308 	and.w	r3, r3, #8
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d007      	beq.n	800fb4a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fb3a:	7efb      	ldrb	r3, [r7, #27]
 800fb3c:	f023 0308 	bic.w	r3, r3, #8
 800fb40:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800fb42:	7ebb      	ldrb	r3, [r7, #26]
 800fb44:	f043 0308 	orr.w	r3, r3, #8
 800fb48:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fb4a:	7efb      	ldrb	r3, [r7, #27]
 800fb4c:	f003 0301 	and.w	r3, r3, #1
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d007      	beq.n	800fb64 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fb54:	7efb      	ldrb	r3, [r7, #27]
 800fb56:	f023 0301 	bic.w	r3, r3, #1
 800fb5a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fb5c:	7ebb      	ldrb	r3, [r7, #26]
 800fb5e:	f043 0301 	orr.w	r3, r3, #1
 800fb62:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7f7 fed9 	bl	8007922 <lwip_htonl>
 800fb70:	4602      	mov	r2, r0
 800fb72:	887b      	ldrh	r3, [r7, #2]
 800fb74:	18d1      	adds	r1, r2, r3
 800fb76:	7eba      	ldrb	r2, [r7, #26]
 800fb78:	7bfb      	ldrb	r3, [r7, #15]
 800fb7a:	9300      	str	r3, [sp, #0]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	6939      	ldr	r1, [r7, #16]
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f7ff fea7 	bl	800f8d4 <tcp_create_segment>
 800fb86:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d063      	beq.n	800fc56 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fb fdd6 	bl	800b744 <pbuf_clen>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fba2:	1a9b      	subs	r3, r3, r2
 800fba4:	b29a      	uxth	r2, r3
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	6858      	ldr	r0, [r3, #4]
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	891a      	ldrh	r2, [r3, #8]
 800fbb6:	89bb      	ldrh	r3, [r7, #12]
 800fbb8:	1ad3      	subs	r3, r2, r3
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	f7fb fbb3 	bl	800b328 <pbuf_realloc>
  useg->len -= remainder;
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	891a      	ldrh	r2, [r3, #8]
 800fbc6:	89bb      	ldrh	r3, [r7, #12]
 800fbc8:	1ad3      	subs	r3, r2, r3
 800fbca:	b29a      	uxth	r2, r3
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	899b      	ldrh	r3, [r3, #12]
 800fbd6:	b29c      	uxth	r4, r3
 800fbd8:	7efb      	ldrb	r3, [r7, #27]
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7f7 fe8b 	bl	80078f8 <lwip_htons>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	68db      	ldr	r3, [r3, #12]
 800fbea:	4322      	orrs	r2, r4
 800fbec:	b292      	uxth	r2, r2
 800fbee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fb fda5 	bl	800b744 <pbuf_clen>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc04:	4413      	add	r3, r2
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fc0e:	69fb      	ldr	r3, [r7, #28]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fb fd96 	bl	800b744 <pbuf_clen>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc22:	4413      	add	r3, r2
 800fc24:	b29a      	uxth	r2, r3
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	681a      	ldr	r2, [r3, #0]
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	69fa      	ldr	r2, [r7, #28]
 800fc38:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fc3a:	69fb      	ldr	r3, [r7, #28]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d103      	bne.n	800fc4a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	e016      	b.n	800fc7c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fc4e:	bf00      	nop
 800fc50:	e002      	b.n	800fc58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fc52:	bf00      	nop
 800fc54:	e000      	b.n	800fc58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fc56:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d006      	beq.n	800fc6c <tcp_split_unsent_seg+0x25c>
 800fc5e:	4b09      	ldr	r3, [pc, #36]	; (800fc84 <tcp_split_unsent_seg+0x274>)
 800fc60:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fc64:	490d      	ldr	r1, [pc, #52]	; (800fc9c <tcp_split_unsent_seg+0x28c>)
 800fc66:	4809      	ldr	r0, [pc, #36]	; (800fc8c <tcp_split_unsent_seg+0x27c>)
 800fc68:	f001 fc1c 	bl	80114a4 <iprintf>
  if (p != NULL) {
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d002      	beq.n	800fc78 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fc72:	6938      	ldr	r0, [r7, #16]
 800fc74:	f7fb fcde 	bl	800b634 <pbuf_free>
  }

  return ERR_MEM;
 800fc78:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3724      	adds	r7, #36	; 0x24
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd90      	pop	{r4, r7, pc}
 800fc84:	080144c4 	.word	0x080144c4
 800fc88:	08014884 	.word	0x08014884
 800fc8c:	08014544 	.word	0x08014544
 800fc90:	080148a8 	.word	0x080148a8
 800fc94:	080148cc 	.word	0x080148cc
 800fc98:	080148dc 	.word	0x080148dc
 800fc9c:	080148ec 	.word	0x080148ec

0800fca0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fca0:	b590      	push	{r4, r7, lr}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d106      	bne.n	800fcbc <tcp_send_fin+0x1c>
 800fcae:	4b21      	ldr	r3, [pc, #132]	; (800fd34 <tcp_send_fin+0x94>)
 800fcb0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fcb4:	4920      	ldr	r1, [pc, #128]	; (800fd38 <tcp_send_fin+0x98>)
 800fcb6:	4821      	ldr	r0, [pc, #132]	; (800fd3c <tcp_send_fin+0x9c>)
 800fcb8:	f001 fbf4 	bl	80114a4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d02e      	beq.n	800fd22 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcc8:	60fb      	str	r3, [r7, #12]
 800fcca:	e002      	b.n	800fcd2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1f8      	bne.n	800fccc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	899b      	ldrh	r3, [r3, #12]
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7f7 fe08 	bl	80078f8 <lwip_htons>
 800fce8:	4603      	mov	r3, r0
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	f003 0307 	and.w	r3, r3, #7
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d116      	bne.n	800fd22 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	899b      	ldrh	r3, [r3, #12]
 800fcfa:	b29c      	uxth	r4, r3
 800fcfc:	2001      	movs	r0, #1
 800fcfe:	f7f7 fdfb 	bl	80078f8 <lwip_htons>
 800fd02:	4603      	mov	r3, r0
 800fd04:	461a      	mov	r2, r3
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	68db      	ldr	r3, [r3, #12]
 800fd0a:	4322      	orrs	r2, r4
 800fd0c:	b292      	uxth	r2, r2
 800fd0e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	8b5b      	ldrh	r3, [r3, #26]
 800fd14:	f043 0320 	orr.w	r3, r3, #32
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	e004      	b.n	800fd2c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fd22:	2101      	movs	r1, #1
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f000 f80b 	bl	800fd40 <tcp_enqueue_flags>
 800fd2a:	4603      	mov	r3, r0
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3714      	adds	r7, #20
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd90      	pop	{r4, r7, pc}
 800fd34:	080144c4 	.word	0x080144c4
 800fd38:	080148f8 	.word	0x080148f8
 800fd3c:	08014544 	.word	0x08014544

0800fd40 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b08a      	sub	sp, #40	; 0x28
 800fd44:	af02      	add	r7, sp, #8
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	460b      	mov	r3, r1
 800fd4a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fd50:	2300      	movs	r3, #0
 800fd52:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fd54:	78fb      	ldrb	r3, [r7, #3]
 800fd56:	f003 0303 	and.w	r3, r3, #3
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d106      	bne.n	800fd6c <tcp_enqueue_flags+0x2c>
 800fd5e:	4b67      	ldr	r3, [pc, #412]	; (800fefc <tcp_enqueue_flags+0x1bc>)
 800fd60:	f240 4211 	movw	r2, #1041	; 0x411
 800fd64:	4966      	ldr	r1, [pc, #408]	; (800ff00 <tcp_enqueue_flags+0x1c0>)
 800fd66:	4867      	ldr	r0, [pc, #412]	; (800ff04 <tcp_enqueue_flags+0x1c4>)
 800fd68:	f001 fb9c 	bl	80114a4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d106      	bne.n	800fd80 <tcp_enqueue_flags+0x40>
 800fd72:	4b62      	ldr	r3, [pc, #392]	; (800fefc <tcp_enqueue_flags+0x1bc>)
 800fd74:	f240 4213 	movw	r2, #1043	; 0x413
 800fd78:	4963      	ldr	r1, [pc, #396]	; (800ff08 <tcp_enqueue_flags+0x1c8>)
 800fd7a:	4862      	ldr	r0, [pc, #392]	; (800ff04 <tcp_enqueue_flags+0x1c4>)
 800fd7c:	f001 fb92 	bl	80114a4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800fd80:	78fb      	ldrb	r3, [r7, #3]
 800fd82:	f003 0302 	and.w	r3, r3, #2
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d001      	beq.n	800fd8e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd8e:	7ffb      	ldrb	r3, [r7, #31]
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	f003 0304 	and.w	r3, r3, #4
 800fd98:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fd9a:	7dfb      	ldrb	r3, [r7, #23]
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fda2:	4619      	mov	r1, r3
 800fda4:	2036      	movs	r0, #54	; 0x36
 800fda6:	f7fb f961 	bl	800b06c <pbuf_alloc>
 800fdaa:	6138      	str	r0, [r7, #16]
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d109      	bne.n	800fdc6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	8b5b      	ldrh	r3, [r3, #26]
 800fdb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdba:	b29a      	uxth	r2, r3
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fdc0:	f04f 33ff 	mov.w	r3, #4294967295
 800fdc4:	e095      	b.n	800fef2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	895a      	ldrh	r2, [r3, #10]
 800fdca:	7dfb      	ldrb	r3, [r7, #23]
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d206      	bcs.n	800fde0 <tcp_enqueue_flags+0xa0>
 800fdd2:	4b4a      	ldr	r3, [pc, #296]	; (800fefc <tcp_enqueue_flags+0x1bc>)
 800fdd4:	f240 4239 	movw	r2, #1081	; 0x439
 800fdd8:	494c      	ldr	r1, [pc, #304]	; (800ff0c <tcp_enqueue_flags+0x1cc>)
 800fdda:	484a      	ldr	r0, [pc, #296]	; (800ff04 <tcp_enqueue_flags+0x1c4>)
 800fddc:	f001 fb62 	bl	80114a4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fde4:	78fa      	ldrb	r2, [r7, #3]
 800fde6:	7ffb      	ldrb	r3, [r7, #31]
 800fde8:	9300      	str	r3, [sp, #0]
 800fdea:	460b      	mov	r3, r1
 800fdec:	6939      	ldr	r1, [r7, #16]
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f7ff fd70 	bl	800f8d4 <tcp_create_segment>
 800fdf4:	60f8      	str	r0, [r7, #12]
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d109      	bne.n	800fe10 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	8b5b      	ldrh	r3, [r3, #26]
 800fe00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe04:	b29a      	uxth	r2, r3
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fe0a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe0e:	e070      	b.n	800fef2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	68db      	ldr	r3, [r3, #12]
 800fe14:	f003 0303 	and.w	r3, r3, #3
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d006      	beq.n	800fe2a <tcp_enqueue_flags+0xea>
 800fe1c:	4b37      	ldr	r3, [pc, #220]	; (800fefc <tcp_enqueue_flags+0x1bc>)
 800fe1e:	f240 4242 	movw	r2, #1090	; 0x442
 800fe22:	493b      	ldr	r1, [pc, #236]	; (800ff10 <tcp_enqueue_flags+0x1d0>)
 800fe24:	4837      	ldr	r0, [pc, #220]	; (800ff04 <tcp_enqueue_flags+0x1c4>)
 800fe26:	f001 fb3d 	bl	80114a4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	891b      	ldrh	r3, [r3, #8]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d006      	beq.n	800fe40 <tcp_enqueue_flags+0x100>
 800fe32:	4b32      	ldr	r3, [pc, #200]	; (800fefc <tcp_enqueue_flags+0x1bc>)
 800fe34:	f240 4243 	movw	r2, #1091	; 0x443
 800fe38:	4936      	ldr	r1, [pc, #216]	; (800ff14 <tcp_enqueue_flags+0x1d4>)
 800fe3a:	4832      	ldr	r0, [pc, #200]	; (800ff04 <tcp_enqueue_flags+0x1c4>)
 800fe3c:	f001 fb32 	bl	80114a4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d103      	bne.n	800fe50 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	68fa      	ldr	r2, [r7, #12]
 800fe4c:	66da      	str	r2, [r3, #108]	; 0x6c
 800fe4e:	e00d      	b.n	800fe6c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe54:	61bb      	str	r3, [r7, #24]
 800fe56:	e002      	b.n	800fe5e <tcp_enqueue_flags+0x11e>
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	61bb      	str	r3, [r7, #24]
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d1f8      	bne.n	800fe58 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fe66:	69bb      	ldr	r3, [r7, #24]
 800fe68:	68fa      	ldr	r2, [r7, #12]
 800fe6a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fe74:	78fb      	ldrb	r3, [r7, #3]
 800fe76:	f003 0302 	and.w	r3, r3, #2
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d104      	bne.n	800fe88 <tcp_enqueue_flags+0x148>
 800fe7e:	78fb      	ldrb	r3, [r7, #3]
 800fe80:	f003 0301 	and.w	r3, r3, #1
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d004      	beq.n	800fe92 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe8c:	1c5a      	adds	r2, r3, #1
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fe92:	78fb      	ldrb	r3, [r7, #3]
 800fe94:	f003 0301 	and.w	r3, r3, #1
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d006      	beq.n	800feaa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	8b5b      	ldrh	r3, [r3, #26]
 800fea0:	f043 0320 	orr.w	r3, r3, #32
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fb fc48 	bl	800b744 <pbuf_clen>
 800feb4:	4603      	mov	r3, r0
 800feb6:	461a      	mov	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800febe:	4413      	add	r3, r2
 800fec0:	b29a      	uxth	r2, r3
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d00e      	beq.n	800fef0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d10a      	bne.n	800fef0 <tcp_enqueue_flags+0x1b0>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d106      	bne.n	800fef0 <tcp_enqueue_flags+0x1b0>
 800fee2:	4b06      	ldr	r3, [pc, #24]	; (800fefc <tcp_enqueue_flags+0x1bc>)
 800fee4:	f240 4265 	movw	r2, #1125	; 0x465
 800fee8:	490b      	ldr	r1, [pc, #44]	; (800ff18 <tcp_enqueue_flags+0x1d8>)
 800feea:	4806      	ldr	r0, [pc, #24]	; (800ff04 <tcp_enqueue_flags+0x1c4>)
 800feec:	f001 fada 	bl	80114a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fef0:	2300      	movs	r3, #0
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3720      	adds	r7, #32
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	080144c4 	.word	0x080144c4
 800ff00:	08014914 	.word	0x08014914
 800ff04:	08014544 	.word	0x08014544
 800ff08:	0801496c 	.word	0x0801496c
 800ff0c:	0801498c 	.word	0x0801498c
 800ff10:	080149c8 	.word	0x080149c8
 800ff14:	080149e0 	.word	0x080149e0
 800ff18:	08014a0c 	.word	0x08014a0c

0800ff1c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ff1c:	b5b0      	push	{r4, r5, r7, lr}
 800ff1e:	b08a      	sub	sp, #40	; 0x28
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d106      	bne.n	800ff38 <tcp_output+0x1c>
 800ff2a:	4b8a      	ldr	r3, [pc, #552]	; (8010154 <tcp_output+0x238>)
 800ff2c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ff30:	4989      	ldr	r1, [pc, #548]	; (8010158 <tcp_output+0x23c>)
 800ff32:	488a      	ldr	r0, [pc, #552]	; (801015c <tcp_output+0x240>)
 800ff34:	f001 fab6 	bl	80114a4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	7d1b      	ldrb	r3, [r3, #20]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d106      	bne.n	800ff4e <tcp_output+0x32>
 800ff40:	4b84      	ldr	r3, [pc, #528]	; (8010154 <tcp_output+0x238>)
 800ff42:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ff46:	4986      	ldr	r1, [pc, #536]	; (8010160 <tcp_output+0x244>)
 800ff48:	4884      	ldr	r0, [pc, #528]	; (801015c <tcp_output+0x240>)
 800ff4a:	f001 faab 	bl	80114a4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ff4e:	4b85      	ldr	r3, [pc, #532]	; (8010164 <tcp_output+0x248>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	687a      	ldr	r2, [r7, #4]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d101      	bne.n	800ff5c <tcp_output+0x40>
    return ERR_OK;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	e1ce      	b.n	80102fa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	bf28      	it	cs
 800ff6c:	4613      	movcs	r3, r2
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff76:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d10b      	bne.n	800ff96 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	8b5b      	ldrh	r3, [r3, #26]
 800ff82:	f003 0302 	and.w	r3, r3, #2
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f000 81aa 	beq.w	80102e0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 fdcb 	bl	8010b28 <tcp_send_empty_ack>
 800ff92:	4603      	mov	r3, r0
 800ff94:	e1b1      	b.n	80102fa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ff96:	6879      	ldr	r1, [r7, #4]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	3304      	adds	r3, #4
 800ff9c:	461a      	mov	r2, r3
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f7ff fc7c 	bl	800f89c <tcp_route>
 800ffa4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d102      	bne.n	800ffb2 <tcp_output+0x96>
    return ERR_RTE;
 800ffac:	f06f 0303 	mvn.w	r3, #3
 800ffb0:	e1a3      	b.n	80102fa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d003      	beq.n	800ffc0 <tcp_output+0xa4>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d111      	bne.n	800ffe4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d002      	beq.n	800ffcc <tcp_output+0xb0>
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	3304      	adds	r3, #4
 800ffca:	e000      	b.n	800ffce <tcp_output+0xb2>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d102      	bne.n	800ffdc <tcp_output+0xc0>
      return ERR_RTE;
 800ffd6:	f06f 0303 	mvn.w	r3, #3
 800ffda:	e18e      	b.n	80102fa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ffe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7f7 fc99 	bl	8007922 <lwip_htonl>
 800fff0:	4602      	mov	r2, r0
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fff6:	1ad3      	subs	r3, r2, r3
 800fff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fffa:	8912      	ldrh	r2, [r2, #8]
 800fffc:	4413      	add	r3, r2
 800fffe:	69ba      	ldr	r2, [r7, #24]
 8010000:	429a      	cmp	r2, r3
 8010002:	d227      	bcs.n	8010054 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801000a:	461a      	mov	r2, r3
 801000c:	69bb      	ldr	r3, [r7, #24]
 801000e:	4293      	cmp	r3, r2
 8010010:	d114      	bne.n	801003c <tcp_output+0x120>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010016:	2b00      	cmp	r3, #0
 8010018:	d110      	bne.n	801003c <tcp_output+0x120>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010020:	2b00      	cmp	r3, #0
 8010022:	d10b      	bne.n	801003c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2201      	movs	r2, #1
 8010030:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2200      	movs	r2, #0
 8010038:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	8b5b      	ldrh	r3, [r3, #26]
 8010040:	f003 0302 	and.w	r3, r3, #2
 8010044:	2b00      	cmp	r3, #0
 8010046:	f000 814d 	beq.w	80102e4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 fd6c 	bl	8010b28 <tcp_send_empty_ack>
 8010050:	4603      	mov	r3, r0
 8010052:	e152      	b.n	80102fa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010060:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	2b00      	cmp	r3, #0
 8010066:	f000 811c 	beq.w	80102a2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801006a:	e002      	b.n	8010072 <tcp_output+0x156>
 801006c:	6a3b      	ldr	r3, [r7, #32]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	623b      	str	r3, [r7, #32]
 8010072:	6a3b      	ldr	r3, [r7, #32]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1f8      	bne.n	801006c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801007a:	e112      	b.n	80102a2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801007c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007e:	68db      	ldr	r3, [r3, #12]
 8010080:	899b      	ldrh	r3, [r3, #12]
 8010082:	b29b      	uxth	r3, r3
 8010084:	4618      	mov	r0, r3
 8010086:	f7f7 fc37 	bl	80078f8 <lwip_htons>
 801008a:	4603      	mov	r3, r0
 801008c:	b2db      	uxtb	r3, r3
 801008e:	f003 0304 	and.w	r3, r3, #4
 8010092:	2b00      	cmp	r3, #0
 8010094:	d006      	beq.n	80100a4 <tcp_output+0x188>
 8010096:	4b2f      	ldr	r3, [pc, #188]	; (8010154 <tcp_output+0x238>)
 8010098:	f240 5236 	movw	r2, #1334	; 0x536
 801009c:	4932      	ldr	r1, [pc, #200]	; (8010168 <tcp_output+0x24c>)
 801009e:	482f      	ldr	r0, [pc, #188]	; (801015c <tcp_output+0x240>)
 80100a0:	f001 fa00 	bl	80114a4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d01f      	beq.n	80100ec <tcp_output+0x1d0>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	8b5b      	ldrh	r3, [r3, #26]
 80100b0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d119      	bne.n	80100ec <tcp_output+0x1d0>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d00b      	beq.n	80100d8 <tcp_output+0x1bc>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d110      	bne.n	80100ec <tcp_output+0x1d0>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100ce:	891a      	ldrh	r2, [r3, #8]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d209      	bcs.n	80100ec <tcp_output+0x1d0>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d004      	beq.n	80100ec <tcp_output+0x1d0>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100e8:	2b08      	cmp	r3, #8
 80100ea:	d901      	bls.n	80100f0 <tcp_output+0x1d4>
 80100ec:	2301      	movs	r3, #1
 80100ee:	e000      	b.n	80100f2 <tcp_output+0x1d6>
 80100f0:	2300      	movs	r3, #0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d106      	bne.n	8010104 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	8b5b      	ldrh	r3, [r3, #26]
 80100fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f000 80e4 	beq.w	80102cc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	7d1b      	ldrb	r3, [r3, #20]
 8010108:	2b02      	cmp	r3, #2
 801010a:	d00d      	beq.n	8010128 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801010c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	899b      	ldrh	r3, [r3, #12]
 8010112:	b29c      	uxth	r4, r3
 8010114:	2010      	movs	r0, #16
 8010116:	f7f7 fbef 	bl	80078f8 <lwip_htons>
 801011a:	4603      	mov	r3, r0
 801011c:	461a      	mov	r2, r3
 801011e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	4322      	orrs	r2, r4
 8010124:	b292      	uxth	r2, r2
 8010126:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010128:	697a      	ldr	r2, [r7, #20]
 801012a:	6879      	ldr	r1, [r7, #4]
 801012c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801012e:	f000 f909 	bl	8010344 <tcp_output_segment>
 8010132:	4603      	mov	r3, r0
 8010134:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d016      	beq.n	801016c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	8b5b      	ldrh	r3, [r3, #26]
 8010142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010146:	b29a      	uxth	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	835a      	strh	r2, [r3, #26]
      return err;
 801014c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010150:	e0d3      	b.n	80102fa <tcp_output+0x3de>
 8010152:	bf00      	nop
 8010154:	080144c4 	.word	0x080144c4
 8010158:	08014a34 	.word	0x08014a34
 801015c:	08014544 	.word	0x08014544
 8010160:	08014a4c 	.word	0x08014a4c
 8010164:	2400816c 	.word	0x2400816c
 8010168:	08014a74 	.word	0x08014a74
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801016c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016e:	681a      	ldr	r2, [r3, #0]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	7d1b      	ldrb	r3, [r3, #20]
 8010178:	2b02      	cmp	r3, #2
 801017a:	d006      	beq.n	801018a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	8b5b      	ldrh	r3, [r3, #26]
 8010180:	f023 0303 	bic.w	r3, r3, #3
 8010184:	b29a      	uxth	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801018a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	4618      	mov	r0, r3
 8010192:	f7f7 fbc6 	bl	8007922 <lwip_htonl>
 8010196:	4604      	mov	r4, r0
 8010198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019a:	891b      	ldrh	r3, [r3, #8]
 801019c:	461d      	mov	r5, r3
 801019e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	899b      	ldrh	r3, [r3, #12]
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7f7 fba6 	bl	80078f8 <lwip_htons>
 80101ac:	4603      	mov	r3, r0
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	f003 0303 	and.w	r3, r3, #3
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d001      	beq.n	80101bc <tcp_output+0x2a0>
 80101b8:	2301      	movs	r3, #1
 80101ba:	e000      	b.n	80101be <tcp_output+0x2a2>
 80101bc:	2300      	movs	r3, #0
 80101be:	442b      	add	r3, r5
 80101c0:	4423      	add	r3, r4
 80101c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	da02      	bge.n	80101d6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	68ba      	ldr	r2, [r7, #8]
 80101d4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80101d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d8:	891b      	ldrh	r3, [r3, #8]
 80101da:	461c      	mov	r4, r3
 80101dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	899b      	ldrh	r3, [r3, #12]
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7f7 fb87 	bl	80078f8 <lwip_htons>
 80101ea:	4603      	mov	r3, r0
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	f003 0303 	and.w	r3, r3, #3
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d001      	beq.n	80101fa <tcp_output+0x2de>
 80101f6:	2301      	movs	r3, #1
 80101f8:	e000      	b.n	80101fc <tcp_output+0x2e0>
 80101fa:	2300      	movs	r3, #0
 80101fc:	4423      	add	r3, r4
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d049      	beq.n	8010296 <tcp_output+0x37a>
      seg->next = NULL;
 8010202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010204:	2200      	movs	r2, #0
 8010206:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801020c:	2b00      	cmp	r3, #0
 801020e:	d105      	bne.n	801021c <tcp_output+0x300>
        pcb->unacked = seg;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010214:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010218:	623b      	str	r3, [r7, #32]
 801021a:	e03f      	b.n	801029c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021e:	68db      	ldr	r3, [r3, #12]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	4618      	mov	r0, r3
 8010224:	f7f7 fb7d 	bl	8007922 <lwip_htonl>
 8010228:	4604      	mov	r4, r0
 801022a:	6a3b      	ldr	r3, [r7, #32]
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	4618      	mov	r0, r3
 8010232:	f7f7 fb76 	bl	8007922 <lwip_htonl>
 8010236:	4603      	mov	r3, r0
 8010238:	1ae3      	subs	r3, r4, r3
 801023a:	2b00      	cmp	r3, #0
 801023c:	da24      	bge.n	8010288 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	3370      	adds	r3, #112	; 0x70
 8010242:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010244:	e002      	b.n	801024c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801024c:	69fb      	ldr	r3, [r7, #28]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d011      	beq.n	8010278 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	68db      	ldr	r3, [r3, #12]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	4618      	mov	r0, r3
 801025e:	f7f7 fb60 	bl	8007922 <lwip_htonl>
 8010262:	4604      	mov	r4, r0
 8010264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	4618      	mov	r0, r3
 801026c:	f7f7 fb59 	bl	8007922 <lwip_htonl>
 8010270:	4603      	mov	r3, r0
 8010272:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010274:	2b00      	cmp	r3, #0
 8010276:	dbe6      	blt.n	8010246 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010284:	601a      	str	r2, [r3, #0]
 8010286:	e009      	b.n	801029c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010288:	6a3b      	ldr	r3, [r7, #32]
 801028a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801028c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801028e:	6a3b      	ldr	r3, [r7, #32]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	623b      	str	r3, [r7, #32]
 8010294:	e002      	b.n	801029c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010298:	f7fc fc3f 	bl	800cb1a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80102a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d012      	beq.n	80102ce <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80102a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7f7 fb37 	bl	8007922 <lwip_htonl>
 80102b4:	4602      	mov	r2, r0
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102ba:	1ad3      	subs	r3, r2, r3
 80102bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102be:	8912      	ldrh	r2, [r2, #8]
 80102c0:	4413      	add	r3, r2
  while (seg != NULL &&
 80102c2:	69ba      	ldr	r2, [r7, #24]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	f4bf aed9 	bcs.w	801007c <tcp_output+0x160>
 80102ca:	e000      	b.n	80102ce <tcp_output+0x3b2>
      break;
 80102cc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d108      	bne.n	80102e8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2200      	movs	r2, #0
 80102da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80102de:	e004      	b.n	80102ea <tcp_output+0x3ce>
    goto output_done;
 80102e0:	bf00      	nop
 80102e2:	e002      	b.n	80102ea <tcp_output+0x3ce>
    goto output_done;
 80102e4:	bf00      	nop
 80102e6:	e000      	b.n	80102ea <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80102e8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	8b5b      	ldrh	r3, [r3, #26]
 80102ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80102f8:	2300      	movs	r3, #0
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3728      	adds	r7, #40	; 0x28
 80102fe:	46bd      	mov	sp, r7
 8010300:	bdb0      	pop	{r4, r5, r7, pc}
 8010302:	bf00      	nop

08010304 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d106      	bne.n	8010320 <tcp_output_segment_busy+0x1c>
 8010312:	4b09      	ldr	r3, [pc, #36]	; (8010338 <tcp_output_segment_busy+0x34>)
 8010314:	f240 529a 	movw	r2, #1434	; 0x59a
 8010318:	4908      	ldr	r1, [pc, #32]	; (801033c <tcp_output_segment_busy+0x38>)
 801031a:	4809      	ldr	r0, [pc, #36]	; (8010340 <tcp_output_segment_busy+0x3c>)
 801031c:	f001 f8c2 	bl	80114a4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	7b9b      	ldrb	r3, [r3, #14]
 8010326:	2b01      	cmp	r3, #1
 8010328:	d001      	beq.n	801032e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801032a:	2301      	movs	r3, #1
 801032c:	e000      	b.n	8010330 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801032e:	2300      	movs	r3, #0
}
 8010330:	4618      	mov	r0, r3
 8010332:	3708      	adds	r7, #8
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}
 8010338:	080144c4 	.word	0x080144c4
 801033c:	08014a8c 	.word	0x08014a8c
 8010340:	08014544 	.word	0x08014544

08010344 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010344:	b5b0      	push	{r4, r5, r7, lr}
 8010346:	b08c      	sub	sp, #48	; 0x30
 8010348:	af04      	add	r7, sp, #16
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d106      	bne.n	8010364 <tcp_output_segment+0x20>
 8010356:	4b63      	ldr	r3, [pc, #396]	; (80104e4 <tcp_output_segment+0x1a0>)
 8010358:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801035c:	4962      	ldr	r1, [pc, #392]	; (80104e8 <tcp_output_segment+0x1a4>)
 801035e:	4863      	ldr	r0, [pc, #396]	; (80104ec <tcp_output_segment+0x1a8>)
 8010360:	f001 f8a0 	bl	80114a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d106      	bne.n	8010378 <tcp_output_segment+0x34>
 801036a:	4b5e      	ldr	r3, [pc, #376]	; (80104e4 <tcp_output_segment+0x1a0>)
 801036c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010370:	495f      	ldr	r1, [pc, #380]	; (80104f0 <tcp_output_segment+0x1ac>)
 8010372:	485e      	ldr	r0, [pc, #376]	; (80104ec <tcp_output_segment+0x1a8>)
 8010374:	f001 f896 	bl	80114a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d106      	bne.n	801038c <tcp_output_segment+0x48>
 801037e:	4b59      	ldr	r3, [pc, #356]	; (80104e4 <tcp_output_segment+0x1a0>)
 8010380:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010384:	495b      	ldr	r1, [pc, #364]	; (80104f4 <tcp_output_segment+0x1b0>)
 8010386:	4859      	ldr	r0, [pc, #356]	; (80104ec <tcp_output_segment+0x1a8>)
 8010388:	f001 f88c 	bl	80114a4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801038c:	68f8      	ldr	r0, [r7, #12]
 801038e:	f7ff ffb9 	bl	8010304 <tcp_output_segment_busy>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d001      	beq.n	801039c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010398:	2300      	movs	r3, #0
 801039a:	e09f      	b.n	80104dc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	68dc      	ldr	r4, [r3, #12]
 80103a4:	4610      	mov	r0, r2
 80103a6:	f7f7 fabc 	bl	8007922 <lwip_htonl>
 80103aa:	4603      	mov	r3, r0
 80103ac:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	68dc      	ldr	r4, [r3, #12]
 80103b6:	4610      	mov	r0, r2
 80103b8:	f7f7 fa9e 	bl	80078f8 <lwip_htons>
 80103bc:	4603      	mov	r3, r0
 80103be:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103c4:	68ba      	ldr	r2, [r7, #8]
 80103c6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80103c8:	441a      	add	r2, r3
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	68db      	ldr	r3, [r3, #12]
 80103d2:	3314      	adds	r3, #20
 80103d4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	7a9b      	ldrb	r3, [r3, #10]
 80103da:	f003 0301 	and.w	r3, r3, #1
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d015      	beq.n	801040e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	3304      	adds	r3, #4
 80103e6:	461a      	mov	r2, r3
 80103e8:	6879      	ldr	r1, [r7, #4]
 80103ea:	f44f 7006 	mov.w	r0, #536	; 0x218
 80103ee:	f7fc fe8b 	bl	800d108 <tcp_eff_send_mss_netif>
 80103f2:	4603      	mov	r3, r0
 80103f4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80103f6:	8b7b      	ldrh	r3, [r7, #26]
 80103f8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7f7 fa90 	bl	8007922 <lwip_htonl>
 8010402:	4602      	mov	r2, r0
 8010404:	69fb      	ldr	r3, [r7, #28]
 8010406:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010408:	69fb      	ldr	r3, [r7, #28]
 801040a:	3304      	adds	r3, #4
 801040c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010414:	2b00      	cmp	r3, #0
 8010416:	da02      	bge.n	801041e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	2200      	movs	r2, #0
 801041c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010422:	2b00      	cmp	r3, #0
 8010424:	d10c      	bne.n	8010440 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010426:	4b34      	ldr	r3, [pc, #208]	; (80104f8 <tcp_output_segment+0x1b4>)
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	685b      	ldr	r3, [r3, #4]
 8010434:	4618      	mov	r0, r3
 8010436:	f7f7 fa74 	bl	8007922 <lwip_htonl>
 801043a:	4602      	mov	r2, r0
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	68da      	ldr	r2, [r3, #12]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	1ad3      	subs	r3, r2, r3
 801044c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	8959      	ldrh	r1, [r3, #10]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	8b3a      	ldrh	r2, [r7, #24]
 801045a:	1a8a      	subs	r2, r1, r2
 801045c:	b292      	uxth	r2, r2
 801045e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	8919      	ldrh	r1, [r3, #8]
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	8b3a      	ldrh	r2, [r7, #24]
 801046c:	1a8a      	subs	r2, r1, r2
 801046e:	b292      	uxth	r2, r2
 8010470:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	68fa      	ldr	r2, [r7, #12]
 8010478:	68d2      	ldr	r2, [r2, #12]
 801047a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	2200      	movs	r2, #0
 8010482:	741a      	strb	r2, [r3, #16]
 8010484:	2200      	movs	r2, #0
 8010486:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	f103 0214 	add.w	r2, r3, #20
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	7a9b      	ldrb	r3, [r3, #10]
 8010494:	009b      	lsls	r3, r3, #2
 8010496:	f003 0304 	and.w	r3, r3, #4
 801049a:	4413      	add	r3, r2
 801049c:	69fa      	ldr	r2, [r7, #28]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d006      	beq.n	80104b0 <tcp_output_segment+0x16c>
 80104a2:	4b10      	ldr	r3, [pc, #64]	; (80104e4 <tcp_output_segment+0x1a0>)
 80104a4:	f240 621c 	movw	r2, #1564	; 0x61c
 80104a8:	4914      	ldr	r1, [pc, #80]	; (80104fc <tcp_output_segment+0x1b8>)
 80104aa:	4810      	ldr	r0, [pc, #64]	; (80104ec <tcp_output_segment+0x1a8>)
 80104ac:	f000 fffa 	bl	80114a4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	6858      	ldr	r0, [r3, #4]
 80104b4:	68b9      	ldr	r1, [r7, #8]
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	1d1c      	adds	r4, r3, #4
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	7add      	ldrb	r5, [r3, #11]
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	7a9b      	ldrb	r3, [r3, #10]
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	9202      	str	r2, [sp, #8]
 80104c6:	2206      	movs	r2, #6
 80104c8:	9201      	str	r2, [sp, #4]
 80104ca:	9300      	str	r3, [sp, #0]
 80104cc:	462b      	mov	r3, r5
 80104ce:	4622      	mov	r2, r4
 80104d0:	f7f8 fea6 	bl	8009220 <ip4_output_if>
 80104d4:	4603      	mov	r3, r0
 80104d6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80104d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3720      	adds	r7, #32
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bdb0      	pop	{r4, r5, r7, pc}
 80104e4:	080144c4 	.word	0x080144c4
 80104e8:	08014ab4 	.word	0x08014ab4
 80104ec:	08014544 	.word	0x08014544
 80104f0:	08014ad4 	.word	0x08014ad4
 80104f4:	08014af4 	.word	0x08014af4
 80104f8:	24008120 	.word	0x24008120
 80104fc:	08014b18 	.word	0x08014b18

08010500 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010500:	b5b0      	push	{r4, r5, r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d106      	bne.n	801051c <tcp_rexmit_rto_prepare+0x1c>
 801050e:	4b31      	ldr	r3, [pc, #196]	; (80105d4 <tcp_rexmit_rto_prepare+0xd4>)
 8010510:	f240 6263 	movw	r2, #1635	; 0x663
 8010514:	4930      	ldr	r1, [pc, #192]	; (80105d8 <tcp_rexmit_rto_prepare+0xd8>)
 8010516:	4831      	ldr	r0, [pc, #196]	; (80105dc <tcp_rexmit_rto_prepare+0xdc>)
 8010518:	f000 ffc4 	bl	80114a4 <iprintf>

  if (pcb->unacked == NULL) {
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010520:	2b00      	cmp	r3, #0
 8010522:	d102      	bne.n	801052a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010524:	f06f 0305 	mvn.w	r3, #5
 8010528:	e050      	b.n	80105cc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801052e:	60fb      	str	r3, [r7, #12]
 8010530:	e00b      	b.n	801054a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010532:	68f8      	ldr	r0, [r7, #12]
 8010534:	f7ff fee6 	bl	8010304 <tcp_output_segment_busy>
 8010538:	4603      	mov	r3, r0
 801053a:	2b00      	cmp	r3, #0
 801053c:	d002      	beq.n	8010544 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801053e:	f06f 0305 	mvn.w	r3, #5
 8010542:	e043      	b.n	80105cc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	60fb      	str	r3, [r7, #12]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1ef      	bne.n	8010532 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010552:	68f8      	ldr	r0, [r7, #12]
 8010554:	f7ff fed6 	bl	8010304 <tcp_output_segment_busy>
 8010558:	4603      	mov	r3, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	d002      	beq.n	8010564 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801055e:	f06f 0305 	mvn.w	r3, #5
 8010562:	e033      	b.n	80105cc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	8b5b      	ldrh	r3, [r3, #26]
 801057e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010582:	b29a      	uxth	r2, r3
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	4618      	mov	r0, r3
 8010590:	f7f7 f9c7 	bl	8007922 <lwip_htonl>
 8010594:	4604      	mov	r4, r0
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	891b      	ldrh	r3, [r3, #8]
 801059a:	461d      	mov	r5, r3
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	899b      	ldrh	r3, [r3, #12]
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7f7 f9a7 	bl	80078f8 <lwip_htons>
 80105aa:	4603      	mov	r3, r0
 80105ac:	b2db      	uxtb	r3, r3
 80105ae:	f003 0303 	and.w	r3, r3, #3
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d001      	beq.n	80105ba <tcp_rexmit_rto_prepare+0xba>
 80105b6:	2301      	movs	r3, #1
 80105b8:	e000      	b.n	80105bc <tcp_rexmit_rto_prepare+0xbc>
 80105ba:	2300      	movs	r3, #0
 80105bc:	442b      	add	r3, r5
 80105be:	18e2      	adds	r2, r4, r3
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80105ca:	2300      	movs	r3, #0
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3710      	adds	r7, #16
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bdb0      	pop	{r4, r5, r7, pc}
 80105d4:	080144c4 	.word	0x080144c4
 80105d8:	08014b2c 	.word	0x08014b2c
 80105dc:	08014544 	.word	0x08014544

080105e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d106      	bne.n	80105fc <tcp_rexmit_rto_commit+0x1c>
 80105ee:	4b0d      	ldr	r3, [pc, #52]	; (8010624 <tcp_rexmit_rto_commit+0x44>)
 80105f0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80105f4:	490c      	ldr	r1, [pc, #48]	; (8010628 <tcp_rexmit_rto_commit+0x48>)
 80105f6:	480d      	ldr	r0, [pc, #52]	; (801062c <tcp_rexmit_rto_commit+0x4c>)
 80105f8:	f000 ff54 	bl	80114a4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010602:	2bff      	cmp	r3, #255	; 0xff
 8010604:	d007      	beq.n	8010616 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801060c:	3301      	adds	r3, #1
 801060e:	b2da      	uxtb	r2, r3
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7ff fc80 	bl	800ff1c <tcp_output>
}
 801061c:	bf00      	nop
 801061e:	3708      	adds	r7, #8
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	080144c4 	.word	0x080144c4
 8010628:	08014b50 	.word	0x08014b50
 801062c:	08014544 	.word	0x08014544

08010630 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d106      	bne.n	801064c <tcp_rexmit_rto+0x1c>
 801063e:	4b0a      	ldr	r3, [pc, #40]	; (8010668 <tcp_rexmit_rto+0x38>)
 8010640:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010644:	4909      	ldr	r1, [pc, #36]	; (801066c <tcp_rexmit_rto+0x3c>)
 8010646:	480a      	ldr	r0, [pc, #40]	; (8010670 <tcp_rexmit_rto+0x40>)
 8010648:	f000 ff2c 	bl	80114a4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f7ff ff57 	bl	8010500 <tcp_rexmit_rto_prepare>
 8010652:	4603      	mov	r3, r0
 8010654:	2b00      	cmp	r3, #0
 8010656:	d102      	bne.n	801065e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7ff ffc1 	bl	80105e0 <tcp_rexmit_rto_commit>
  }
}
 801065e:	bf00      	nop
 8010660:	3708      	adds	r7, #8
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	080144c4 	.word	0x080144c4
 801066c:	08014b74 	.word	0x08014b74
 8010670:	08014544 	.word	0x08014544

08010674 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010674:	b590      	push	{r4, r7, lr}
 8010676:	b085      	sub	sp, #20
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d106      	bne.n	8010690 <tcp_rexmit+0x1c>
 8010682:	4b2f      	ldr	r3, [pc, #188]	; (8010740 <tcp_rexmit+0xcc>)
 8010684:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010688:	492e      	ldr	r1, [pc, #184]	; (8010744 <tcp_rexmit+0xd0>)
 801068a:	482f      	ldr	r0, [pc, #188]	; (8010748 <tcp_rexmit+0xd4>)
 801068c:	f000 ff0a 	bl	80114a4 <iprintf>

  if (pcb->unacked == NULL) {
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010694:	2b00      	cmp	r3, #0
 8010696:	d102      	bne.n	801069e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010698:	f06f 0305 	mvn.w	r3, #5
 801069c:	e04c      	b.n	8010738 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106a2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80106a4:	68b8      	ldr	r0, [r7, #8]
 80106a6:	f7ff fe2d 	bl	8010304 <tcp_output_segment_busy>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d002      	beq.n	80106b6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80106b0:	f06f 0305 	mvn.w	r3, #5
 80106b4:	e040      	b.n	8010738 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	336c      	adds	r3, #108	; 0x6c
 80106c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80106c4:	e002      	b.n	80106cc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d011      	beq.n	80106f8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	4618      	mov	r0, r3
 80106de:	f7f7 f920 	bl	8007922 <lwip_htonl>
 80106e2:	4604      	mov	r4, r0
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	68db      	ldr	r3, [r3, #12]
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7f7 f919 	bl	8007922 <lwip_htonl>
 80106f0:	4603      	mov	r3, r0
 80106f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	dbe6      	blt.n	80106c6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681a      	ldr	r2, [r3, #0]
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	68ba      	ldr	r2, [r7, #8]
 8010704:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d103      	bne.n	8010716 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801071c:	2bff      	cmp	r3, #255	; 0xff
 801071e:	d007      	beq.n	8010730 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010726:	3301      	adds	r3, #1
 8010728:	b2da      	uxtb	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2200      	movs	r2, #0
 8010734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010736:	2300      	movs	r3, #0
}
 8010738:	4618      	mov	r0, r3
 801073a:	3714      	adds	r7, #20
 801073c:	46bd      	mov	sp, r7
 801073e:	bd90      	pop	{r4, r7, pc}
 8010740:	080144c4 	.word	0x080144c4
 8010744:	08014b90 	.word	0x08014b90
 8010748:	08014544 	.word	0x08014544

0801074c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d106      	bne.n	8010768 <tcp_rexmit_fast+0x1c>
 801075a:	4b2a      	ldr	r3, [pc, #168]	; (8010804 <tcp_rexmit_fast+0xb8>)
 801075c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010760:	4929      	ldr	r1, [pc, #164]	; (8010808 <tcp_rexmit_fast+0xbc>)
 8010762:	482a      	ldr	r0, [pc, #168]	; (801080c <tcp_rexmit_fast+0xc0>)
 8010764:	f000 fe9e 	bl	80114a4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801076c:	2b00      	cmp	r3, #0
 801076e:	d045      	beq.n	80107fc <tcp_rexmit_fast+0xb0>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	8b5b      	ldrh	r3, [r3, #26]
 8010774:	f003 0304 	and.w	r3, r3, #4
 8010778:	2b00      	cmp	r3, #0
 801077a:	d13f      	bne.n	80107fc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7ff ff79 	bl	8010674 <tcp_rexmit>
 8010782:	4603      	mov	r3, r0
 8010784:	2b00      	cmp	r3, #0
 8010786:	d139      	bne.n	80107fc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010794:	4293      	cmp	r3, r2
 8010796:	bf28      	it	cs
 8010798:	4613      	movcs	r3, r2
 801079a:	b29b      	uxth	r3, r3
 801079c:	2b00      	cmp	r3, #0
 801079e:	da00      	bge.n	80107a2 <tcp_rexmit_fast+0x56>
 80107a0:	3301      	adds	r3, #1
 80107a2:	105b      	asrs	r3, r3, #1
 80107a4:	b29a      	uxth	r2, r3
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80107b2:	461a      	mov	r2, r3
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107b8:	005b      	lsls	r3, r3, #1
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d206      	bcs.n	80107cc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107c2:	005b      	lsls	r3, r3, #1
 80107c4:	b29a      	uxth	r2, r3
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107d6:	4619      	mov	r1, r3
 80107d8:	0049      	lsls	r1, r1, #1
 80107da:	440b      	add	r3, r1
 80107dc:	b29b      	uxth	r3, r3
 80107de:	4413      	add	r3, r2
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	8b5b      	ldrh	r3, [r3, #26]
 80107ec:	f043 0304 	orr.w	r3, r3, #4
 80107f0:	b29a      	uxth	r2, r3
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2200      	movs	r2, #0
 80107fa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80107fc:	bf00      	nop
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	080144c4 	.word	0x080144c4
 8010808:	08014ba8 	.word	0x08014ba8
 801080c:	08014544 	.word	0x08014544

08010810 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b086      	sub	sp, #24
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	607b      	str	r3, [r7, #4]
 801081a:	460b      	mov	r3, r1
 801081c:	817b      	strh	r3, [r7, #10]
 801081e:	4613      	mov	r3, r2
 8010820:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010822:	897a      	ldrh	r2, [r7, #10]
 8010824:	893b      	ldrh	r3, [r7, #8]
 8010826:	4413      	add	r3, r2
 8010828:	b29b      	uxth	r3, r3
 801082a:	3314      	adds	r3, #20
 801082c:	b29b      	uxth	r3, r3
 801082e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010832:	4619      	mov	r1, r3
 8010834:	2022      	movs	r0, #34	; 0x22
 8010836:	f7fa fc19 	bl	800b06c <pbuf_alloc>
 801083a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d04d      	beq.n	80108de <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010842:	897b      	ldrh	r3, [r7, #10]
 8010844:	3313      	adds	r3, #19
 8010846:	697a      	ldr	r2, [r7, #20]
 8010848:	8952      	ldrh	r2, [r2, #10]
 801084a:	4293      	cmp	r3, r2
 801084c:	db06      	blt.n	801085c <tcp_output_alloc_header_common+0x4c>
 801084e:	4b26      	ldr	r3, [pc, #152]	; (80108e8 <tcp_output_alloc_header_common+0xd8>)
 8010850:	f240 7223 	movw	r2, #1827	; 0x723
 8010854:	4925      	ldr	r1, [pc, #148]	; (80108ec <tcp_output_alloc_header_common+0xdc>)
 8010856:	4826      	ldr	r0, [pc, #152]	; (80108f0 <tcp_output_alloc_header_common+0xe0>)
 8010858:	f000 fe24 	bl	80114a4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010862:	8c3b      	ldrh	r3, [r7, #32]
 8010864:	4618      	mov	r0, r3
 8010866:	f7f7 f847 	bl	80078f8 <lwip_htons>
 801086a:	4603      	mov	r3, r0
 801086c:	461a      	mov	r2, r3
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010874:	4618      	mov	r0, r3
 8010876:	f7f7 f83f 	bl	80078f8 <lwip_htons>
 801087a:	4603      	mov	r3, r0
 801087c:	461a      	mov	r2, r3
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	687a      	ldr	r2, [r7, #4]
 8010886:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010888:	68f8      	ldr	r0, [r7, #12]
 801088a:	f7f7 f84a 	bl	8007922 <lwip_htonl>
 801088e:	4602      	mov	r2, r0
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010894:	897b      	ldrh	r3, [r7, #10]
 8010896:	089b      	lsrs	r3, r3, #2
 8010898:	b29b      	uxth	r3, r3
 801089a:	3305      	adds	r3, #5
 801089c:	b29b      	uxth	r3, r3
 801089e:	031b      	lsls	r3, r3, #12
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	4313      	orrs	r3, r2
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7f7 f823 	bl	80078f8 <lwip_htons>
 80108b2:	4603      	mov	r3, r0
 80108b4:	461a      	mov	r2, r3
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80108ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80108bc:	4618      	mov	r0, r3
 80108be:	f7f7 f81b 	bl	80078f8 <lwip_htons>
 80108c2:	4603      	mov	r3, r0
 80108c4:	461a      	mov	r2, r3
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	2200      	movs	r2, #0
 80108ce:	741a      	strb	r2, [r3, #16]
 80108d0:	2200      	movs	r2, #0
 80108d2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	2200      	movs	r2, #0
 80108d8:	749a      	strb	r2, [r3, #18]
 80108da:	2200      	movs	r2, #0
 80108dc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80108de:	697b      	ldr	r3, [r7, #20]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3718      	adds	r7, #24
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	080144c4 	.word	0x080144c4
 80108ec:	08014bc8 	.word	0x08014bc8
 80108f0:	08014544 	.word	0x08014544

080108f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80108f4:	b5b0      	push	{r4, r5, r7, lr}
 80108f6:	b08a      	sub	sp, #40	; 0x28
 80108f8:	af04      	add	r7, sp, #16
 80108fa:	60f8      	str	r0, [r7, #12]
 80108fc:	607b      	str	r3, [r7, #4]
 80108fe:	460b      	mov	r3, r1
 8010900:	817b      	strh	r3, [r7, #10]
 8010902:	4613      	mov	r3, r2
 8010904:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d106      	bne.n	801091a <tcp_output_alloc_header+0x26>
 801090c:	4b15      	ldr	r3, [pc, #84]	; (8010964 <tcp_output_alloc_header+0x70>)
 801090e:	f240 7242 	movw	r2, #1858	; 0x742
 8010912:	4915      	ldr	r1, [pc, #84]	; (8010968 <tcp_output_alloc_header+0x74>)
 8010914:	4815      	ldr	r0, [pc, #84]	; (801096c <tcp_output_alloc_header+0x78>)
 8010916:	f000 fdc5 	bl	80114a4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	8adb      	ldrh	r3, [r3, #22]
 8010922:	68fa      	ldr	r2, [r7, #12]
 8010924:	8b12      	ldrh	r2, [r2, #24]
 8010926:	68f9      	ldr	r1, [r7, #12]
 8010928:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801092a:	893d      	ldrh	r5, [r7, #8]
 801092c:	897c      	ldrh	r4, [r7, #10]
 801092e:	9103      	str	r1, [sp, #12]
 8010930:	2110      	movs	r1, #16
 8010932:	9102      	str	r1, [sp, #8]
 8010934:	9201      	str	r2, [sp, #4]
 8010936:	9300      	str	r3, [sp, #0]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	462a      	mov	r2, r5
 801093c:	4621      	mov	r1, r4
 801093e:	f7ff ff67 	bl	8010810 <tcp_output_alloc_header_common>
 8010942:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d006      	beq.n	8010958 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801094e:	68fa      	ldr	r2, [r7, #12]
 8010950:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010952:	441a      	add	r2, r3
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010958:	697b      	ldr	r3, [r7, #20]
}
 801095a:	4618      	mov	r0, r3
 801095c:	3718      	adds	r7, #24
 801095e:	46bd      	mov	sp, r7
 8010960:	bdb0      	pop	{r4, r5, r7, pc}
 8010962:	bf00      	nop
 8010964:	080144c4 	.word	0x080144c4
 8010968:	08014bf8 	.word	0x08014bf8
 801096c:	08014544 	.word	0x08014544

08010970 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b088      	sub	sp, #32
 8010974:	af00      	add	r7, sp, #0
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	4611      	mov	r1, r2
 801097c:	461a      	mov	r2, r3
 801097e:	460b      	mov	r3, r1
 8010980:	71fb      	strb	r3, [r7, #7]
 8010982:	4613      	mov	r3, r2
 8010984:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010986:	2300      	movs	r3, #0
 8010988:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d106      	bne.n	801099e <tcp_output_fill_options+0x2e>
 8010990:	4b13      	ldr	r3, [pc, #76]	; (80109e0 <tcp_output_fill_options+0x70>)
 8010992:	f240 7256 	movw	r2, #1878	; 0x756
 8010996:	4913      	ldr	r1, [pc, #76]	; (80109e4 <tcp_output_fill_options+0x74>)
 8010998:	4813      	ldr	r0, [pc, #76]	; (80109e8 <tcp_output_fill_options+0x78>)
 801099a:	f000 fd83 	bl	80114a4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	3314      	adds	r3, #20
 80109a8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	f103 0214 	add.w	r2, r3, #20
 80109b0:	8bfb      	ldrh	r3, [r7, #30]
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	4619      	mov	r1, r3
 80109b6:	79fb      	ldrb	r3, [r7, #7]
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	f003 0304 	and.w	r3, r3, #4
 80109be:	440b      	add	r3, r1
 80109c0:	4413      	add	r3, r2
 80109c2:	697a      	ldr	r2, [r7, #20]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d006      	beq.n	80109d6 <tcp_output_fill_options+0x66>
 80109c8:	4b05      	ldr	r3, [pc, #20]	; (80109e0 <tcp_output_fill_options+0x70>)
 80109ca:	f240 7275 	movw	r2, #1909	; 0x775
 80109ce:	4907      	ldr	r1, [pc, #28]	; (80109ec <tcp_output_fill_options+0x7c>)
 80109d0:	4805      	ldr	r0, [pc, #20]	; (80109e8 <tcp_output_fill_options+0x78>)
 80109d2:	f000 fd67 	bl	80114a4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80109d6:	bf00      	nop
 80109d8:	3720      	adds	r7, #32
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
 80109de:	bf00      	nop
 80109e0:	080144c4 	.word	0x080144c4
 80109e4:	08014c20 	.word	0x08014c20
 80109e8:	08014544 	.word	0x08014544
 80109ec:	08014b18 	.word	0x08014b18

080109f0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b08a      	sub	sp, #40	; 0x28
 80109f4:	af04      	add	r7, sp, #16
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	60b9      	str	r1, [r7, #8]
 80109fa:	607a      	str	r2, [r7, #4]
 80109fc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d106      	bne.n	8010a12 <tcp_output_control_segment+0x22>
 8010a04:	4b1c      	ldr	r3, [pc, #112]	; (8010a78 <tcp_output_control_segment+0x88>)
 8010a06:	f240 7287 	movw	r2, #1927	; 0x787
 8010a0a:	491c      	ldr	r1, [pc, #112]	; (8010a7c <tcp_output_control_segment+0x8c>)
 8010a0c:	481c      	ldr	r0, [pc, #112]	; (8010a80 <tcp_output_control_segment+0x90>)
 8010a0e:	f000 fd49 	bl	80114a4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010a12:	683a      	ldr	r2, [r7, #0]
 8010a14:	6879      	ldr	r1, [r7, #4]
 8010a16:	68f8      	ldr	r0, [r7, #12]
 8010a18:	f7fe ff40 	bl	800f89c <tcp_route>
 8010a1c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d102      	bne.n	8010a2a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010a24:	23fc      	movs	r3, #252	; 0xfc
 8010a26:	75fb      	strb	r3, [r7, #23]
 8010a28:	e01c      	b.n	8010a64 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d006      	beq.n	8010a3e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	7adb      	ldrb	r3, [r3, #11]
 8010a34:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	7a9b      	ldrb	r3, [r3, #10]
 8010a3a:	757b      	strb	r3, [r7, #21]
 8010a3c:	e003      	b.n	8010a46 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010a3e:	23ff      	movs	r3, #255	; 0xff
 8010a40:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010a42:	2300      	movs	r3, #0
 8010a44:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010a46:	7dba      	ldrb	r2, [r7, #22]
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	9302      	str	r3, [sp, #8]
 8010a4c:	2306      	movs	r3, #6
 8010a4e:	9301      	str	r3, [sp, #4]
 8010a50:	7d7b      	ldrb	r3, [r7, #21]
 8010a52:	9300      	str	r3, [sp, #0]
 8010a54:	4613      	mov	r3, r2
 8010a56:	683a      	ldr	r2, [r7, #0]
 8010a58:	6879      	ldr	r1, [r7, #4]
 8010a5a:	68b8      	ldr	r0, [r7, #8]
 8010a5c:	f7f8 fbe0 	bl	8009220 <ip4_output_if>
 8010a60:	4603      	mov	r3, r0
 8010a62:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010a64:	68b8      	ldr	r0, [r7, #8]
 8010a66:	f7fa fde5 	bl	800b634 <pbuf_free>
  return err;
 8010a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3718      	adds	r7, #24
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	080144c4 	.word	0x080144c4
 8010a7c:	08014c48 	.word	0x08014c48
 8010a80:	08014544 	.word	0x08014544

08010a84 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010a84:	b590      	push	{r4, r7, lr}
 8010a86:	b08b      	sub	sp, #44	; 0x2c
 8010a88:	af04      	add	r7, sp, #16
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
 8010a90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d106      	bne.n	8010aa6 <tcp_rst+0x22>
 8010a98:	4b1f      	ldr	r3, [pc, #124]	; (8010b18 <tcp_rst+0x94>)
 8010a9a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010a9e:	491f      	ldr	r1, [pc, #124]	; (8010b1c <tcp_rst+0x98>)
 8010aa0:	481f      	ldr	r0, [pc, #124]	; (8010b20 <tcp_rst+0x9c>)
 8010aa2:	f000 fcff 	bl	80114a4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d106      	bne.n	8010aba <tcp_rst+0x36>
 8010aac:	4b1a      	ldr	r3, [pc, #104]	; (8010b18 <tcp_rst+0x94>)
 8010aae:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010ab2:	491c      	ldr	r1, [pc, #112]	; (8010b24 <tcp_rst+0xa0>)
 8010ab4:	481a      	ldr	r0, [pc, #104]	; (8010b20 <tcp_rst+0x9c>)
 8010ab6:	f000 fcf5 	bl	80114a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010aba:	2300      	movs	r3, #0
 8010abc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010abe:	f246 0308 	movw	r3, #24584	; 0x6008
 8010ac2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010ac4:	7dfb      	ldrb	r3, [r7, #23]
 8010ac6:	b29c      	uxth	r4, r3
 8010ac8:	68b8      	ldr	r0, [r7, #8]
 8010aca:	f7f6 ff2a 	bl	8007922 <lwip_htonl>
 8010ace:	4602      	mov	r2, r0
 8010ad0:	8abb      	ldrh	r3, [r7, #20]
 8010ad2:	9303      	str	r3, [sp, #12]
 8010ad4:	2314      	movs	r3, #20
 8010ad6:	9302      	str	r3, [sp, #8]
 8010ad8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010ada:	9301      	str	r3, [sp, #4]
 8010adc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ade:	9300      	str	r3, [sp, #0]
 8010ae0:	4613      	mov	r3, r2
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	4621      	mov	r1, r4
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f7ff fe92 	bl	8010810 <tcp_output_alloc_header_common>
 8010aec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d00c      	beq.n	8010b0e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010af4:	7dfb      	ldrb	r3, [r7, #23]
 8010af6:	2200      	movs	r2, #0
 8010af8:	6939      	ldr	r1, [r7, #16]
 8010afa:	68f8      	ldr	r0, [r7, #12]
 8010afc:	f7ff ff38 	bl	8010970 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b02:	683a      	ldr	r2, [r7, #0]
 8010b04:	6939      	ldr	r1, [r7, #16]
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	f7ff ff72 	bl	80109f0 <tcp_output_control_segment>
 8010b0c:	e000      	b.n	8010b10 <tcp_rst+0x8c>
    return;
 8010b0e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010b10:	371c      	adds	r7, #28
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd90      	pop	{r4, r7, pc}
 8010b16:	bf00      	nop
 8010b18:	080144c4 	.word	0x080144c4
 8010b1c:	08014c74 	.word	0x08014c74
 8010b20:	08014544 	.word	0x08014544
 8010b24:	08014c90 	.word	0x08014c90

08010b28 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010b28:	b590      	push	{r4, r7, lr}
 8010b2a:	b087      	sub	sp, #28
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010b30:	2300      	movs	r3, #0
 8010b32:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010b34:	2300      	movs	r3, #0
 8010b36:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d106      	bne.n	8010b4c <tcp_send_empty_ack+0x24>
 8010b3e:	4b28      	ldr	r3, [pc, #160]	; (8010be0 <tcp_send_empty_ack+0xb8>)
 8010b40:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010b44:	4927      	ldr	r1, [pc, #156]	; (8010be4 <tcp_send_empty_ack+0xbc>)
 8010b46:	4828      	ldr	r0, [pc, #160]	; (8010be8 <tcp_send_empty_ack+0xc0>)
 8010b48:	f000 fcac 	bl	80114a4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b4c:	7dfb      	ldrb	r3, [r7, #23]
 8010b4e:	009b      	lsls	r3, r3, #2
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	f003 0304 	and.w	r3, r3, #4
 8010b56:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010b58:	7d7b      	ldrb	r3, [r7, #21]
 8010b5a:	b29c      	uxth	r4, r3
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7f6 fede 	bl	8007922 <lwip_htonl>
 8010b66:	4603      	mov	r3, r0
 8010b68:	2200      	movs	r2, #0
 8010b6a:	4621      	mov	r1, r4
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f7ff fec1 	bl	80108f4 <tcp_output_alloc_header>
 8010b72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d109      	bne.n	8010b8e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	8b5b      	ldrh	r3, [r3, #26]
 8010b7e:	f043 0303 	orr.w	r3, r3, #3
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010b88:	f06f 0301 	mvn.w	r3, #1
 8010b8c:	e023      	b.n	8010bd6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010b8e:	7dbb      	ldrb	r3, [r7, #22]
 8010b90:	7dfa      	ldrb	r2, [r7, #23]
 8010b92:	6939      	ldr	r1, [r7, #16]
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7ff feeb 	bl	8010970 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	3304      	adds	r3, #4
 8010ba0:	6939      	ldr	r1, [r7, #16]
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7ff ff24 	bl	80109f0 <tcp_output_control_segment>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d007      	beq.n	8010bc4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	8b5b      	ldrh	r3, [r3, #26]
 8010bb8:	f043 0303 	orr.w	r3, r3, #3
 8010bbc:	b29a      	uxth	r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	835a      	strh	r2, [r3, #26]
 8010bc2:	e006      	b.n	8010bd2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	8b5b      	ldrh	r3, [r3, #26]
 8010bc8:	f023 0303 	bic.w	r3, r3, #3
 8010bcc:	b29a      	uxth	r2, r3
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	371c      	adds	r7, #28
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd90      	pop	{r4, r7, pc}
 8010bde:	bf00      	nop
 8010be0:	080144c4 	.word	0x080144c4
 8010be4:	08014cac 	.word	0x08014cac
 8010be8:	08014544 	.word	0x08014544

08010bec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010bec:	b590      	push	{r4, r7, lr}
 8010bee:	b087      	sub	sp, #28
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d106      	bne.n	8010c0c <tcp_keepalive+0x20>
 8010bfe:	4b18      	ldr	r3, [pc, #96]	; (8010c60 <tcp_keepalive+0x74>)
 8010c00:	f640 0224 	movw	r2, #2084	; 0x824
 8010c04:	4917      	ldr	r1, [pc, #92]	; (8010c64 <tcp_keepalive+0x78>)
 8010c06:	4818      	ldr	r0, [pc, #96]	; (8010c68 <tcp_keepalive+0x7c>)
 8010c08:	f000 fc4c 	bl	80114a4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010c0c:	7dfb      	ldrb	r3, [r7, #23]
 8010c0e:	b29c      	uxth	r4, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c14:	3b01      	subs	r3, #1
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7f6 fe83 	bl	8007922 <lwip_htonl>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2200      	movs	r2, #0
 8010c20:	4621      	mov	r1, r4
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f7ff fe66 	bl	80108f4 <tcp_output_alloc_header>
 8010c28:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d102      	bne.n	8010c36 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010c30:	f04f 33ff 	mov.w	r3, #4294967295
 8010c34:	e010      	b.n	8010c58 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010c36:	7dfb      	ldrb	r3, [r7, #23]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	6939      	ldr	r1, [r7, #16]
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f7ff fe97 	bl	8010970 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	3304      	adds	r3, #4
 8010c48:	6939      	ldr	r1, [r7, #16]
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f7ff fed0 	bl	80109f0 <tcp_output_control_segment>
 8010c50:	4603      	mov	r3, r0
 8010c52:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	371c      	adds	r7, #28
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd90      	pop	{r4, r7, pc}
 8010c60:	080144c4 	.word	0x080144c4
 8010c64:	08014ccc 	.word	0x08014ccc
 8010c68:	08014544 	.word	0x08014544

08010c6c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010c6c:	b590      	push	{r4, r7, lr}
 8010c6e:	b08b      	sub	sp, #44	; 0x2c
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010c74:	2300      	movs	r3, #0
 8010c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d106      	bne.n	8010c8e <tcp_zero_window_probe+0x22>
 8010c80:	4b4c      	ldr	r3, [pc, #304]	; (8010db4 <tcp_zero_window_probe+0x148>)
 8010c82:	f640 024f 	movw	r2, #2127	; 0x84f
 8010c86:	494c      	ldr	r1, [pc, #304]	; (8010db8 <tcp_zero_window_probe+0x14c>)
 8010c88:	484c      	ldr	r0, [pc, #304]	; (8010dbc <tcp_zero_window_probe+0x150>)
 8010c8a:	f000 fc0b 	bl	80114a4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c92:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010c94:	6a3b      	ldr	r3, [r7, #32]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d101      	bne.n	8010c9e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	e086      	b.n	8010dac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010ca4:	2bff      	cmp	r3, #255	; 0xff
 8010ca6:	d007      	beq.n	8010cb8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010cae:	3301      	adds	r3, #1
 8010cb0:	b2da      	uxtb	r2, r3
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010cb8:	6a3b      	ldr	r3, [r7, #32]
 8010cba:	68db      	ldr	r3, [r3, #12]
 8010cbc:	899b      	ldrh	r3, [r3, #12]
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7f6 fe19 	bl	80078f8 <lwip_htons>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	f003 0301 	and.w	r3, r3, #1
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d005      	beq.n	8010cde <tcp_zero_window_probe+0x72>
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	891b      	ldrh	r3, [r3, #8]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d101      	bne.n	8010cde <tcp_zero_window_probe+0x72>
 8010cda:	2301      	movs	r3, #1
 8010cdc:	e000      	b.n	8010ce0 <tcp_zero_window_probe+0x74>
 8010cde:	2300      	movs	r3, #0
 8010ce0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010ce2:	7ffb      	ldrb	r3, [r7, #31]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	bf0c      	ite	eq
 8010ce8:	2301      	moveq	r3, #1
 8010cea:	2300      	movne	r3, #0
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cf4:	b299      	uxth	r1, r3
 8010cf6:	6a3b      	ldr	r3, [r7, #32]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	8bba      	ldrh	r2, [r7, #28]
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f7ff fdf8 	bl	80108f4 <tcp_output_alloc_header>
 8010d04:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010d06:	69bb      	ldr	r3, [r7, #24]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d102      	bne.n	8010d12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d10:	e04c      	b.n	8010dac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010d12:	69bb      	ldr	r3, [r7, #24]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010d18:	7ffb      	ldrb	r3, [r7, #31]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d011      	beq.n	8010d42 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	899b      	ldrh	r3, [r3, #12]
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	b21b      	sxth	r3, r3
 8010d26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010d2a:	b21c      	sxth	r4, r3
 8010d2c:	2011      	movs	r0, #17
 8010d2e:	f7f6 fde3 	bl	80078f8 <lwip_htons>
 8010d32:	4603      	mov	r3, r0
 8010d34:	b21b      	sxth	r3, r3
 8010d36:	4323      	orrs	r3, r4
 8010d38:	b21b      	sxth	r3, r3
 8010d3a:	b29a      	uxth	r2, r3
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	819a      	strh	r2, [r3, #12]
 8010d40:	e010      	b.n	8010d64 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010d42:	69bb      	ldr	r3, [r7, #24]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	3314      	adds	r3, #20
 8010d48:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010d4a:	6a3b      	ldr	r3, [r7, #32]
 8010d4c:	6858      	ldr	r0, [r3, #4]
 8010d4e:	6a3b      	ldr	r3, [r7, #32]
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	891a      	ldrh	r2, [r3, #8]
 8010d54:	6a3b      	ldr	r3, [r7, #32]
 8010d56:	891b      	ldrh	r3, [r3, #8]
 8010d58:	1ad3      	subs	r3, r2, r3
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	6939      	ldr	r1, [r7, #16]
 8010d60:	f7fa fe52 	bl	800ba08 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010d64:	6a3b      	ldr	r3, [r7, #32]
 8010d66:	68db      	ldr	r3, [r3, #12]
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7f6 fdd9 	bl	8007922 <lwip_htonl>
 8010d70:	4603      	mov	r3, r0
 8010d72:	3301      	adds	r3, #1
 8010d74:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	1ad3      	subs	r3, r2, r3
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	da02      	bge.n	8010d88 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	68fa      	ldr	r2, [r7, #12]
 8010d86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	69b9      	ldr	r1, [r7, #24]
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f7ff fded 	bl	8010970 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	3304      	adds	r3, #4
 8010d9c:	69b9      	ldr	r1, [r7, #24]
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f7ff fe26 	bl	80109f0 <tcp_output_control_segment>
 8010da4:	4603      	mov	r3, r0
 8010da6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010da8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	372c      	adds	r7, #44	; 0x2c
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd90      	pop	{r4, r7, pc}
 8010db4:	080144c4 	.word	0x080144c4
 8010db8:	08014ce8 	.word	0x08014ce8
 8010dbc:	08014544 	.word	0x08014544

08010dc0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010dc8:	f7fa ff0c 	bl	800bbe4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010dcc:	4b0a      	ldr	r3, [pc, #40]	; (8010df8 <tcpip_tcp_timer+0x38>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d103      	bne.n	8010ddc <tcpip_tcp_timer+0x1c>
 8010dd4:	4b09      	ldr	r3, [pc, #36]	; (8010dfc <tcpip_tcp_timer+0x3c>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d005      	beq.n	8010de8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010ddc:	2200      	movs	r2, #0
 8010dde:	4908      	ldr	r1, [pc, #32]	; (8010e00 <tcpip_tcp_timer+0x40>)
 8010de0:	20fa      	movs	r0, #250	; 0xfa
 8010de2:	f000 f8f3 	bl	8010fcc <sys_timeout>
 8010de6:	e003      	b.n	8010df0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010de8:	4b06      	ldr	r3, [pc, #24]	; (8010e04 <tcpip_tcp_timer+0x44>)
 8010dea:	2200      	movs	r2, #0
 8010dec:	601a      	str	r2, [r3, #0]
  }
}
 8010dee:	bf00      	nop
 8010df0:	bf00      	nop
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	2400812c 	.word	0x2400812c
 8010dfc:	24008130 	.word	0x24008130
 8010e00:	08010dc1 	.word	0x08010dc1
 8010e04:	24008178 	.word	0x24008178

08010e08 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010e0c:	4b0a      	ldr	r3, [pc, #40]	; (8010e38 <tcp_timer_needed+0x30>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d10f      	bne.n	8010e34 <tcp_timer_needed+0x2c>
 8010e14:	4b09      	ldr	r3, [pc, #36]	; (8010e3c <tcp_timer_needed+0x34>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d103      	bne.n	8010e24 <tcp_timer_needed+0x1c>
 8010e1c:	4b08      	ldr	r3, [pc, #32]	; (8010e40 <tcp_timer_needed+0x38>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d007      	beq.n	8010e34 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010e24:	4b04      	ldr	r3, [pc, #16]	; (8010e38 <tcp_timer_needed+0x30>)
 8010e26:	2201      	movs	r2, #1
 8010e28:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	4905      	ldr	r1, [pc, #20]	; (8010e44 <tcp_timer_needed+0x3c>)
 8010e2e:	20fa      	movs	r0, #250	; 0xfa
 8010e30:	f000 f8cc 	bl	8010fcc <sys_timeout>
  }
}
 8010e34:	bf00      	nop
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	24008178 	.word	0x24008178
 8010e3c:	2400812c 	.word	0x2400812c
 8010e40:	24008130 	.word	0x24008130
 8010e44:	08010dc1 	.word	0x08010dc1

08010e48 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b086      	sub	sp, #24
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	60f8      	str	r0, [r7, #12]
 8010e50:	60b9      	str	r1, [r7, #8]
 8010e52:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010e54:	2006      	movs	r0, #6
 8010e56:	f7f9 fd6b 	bl	800a930 <memp_malloc>
 8010e5a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d109      	bne.n	8010e76 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d151      	bne.n	8010f0c <sys_timeout_abs+0xc4>
 8010e68:	4b2a      	ldr	r3, [pc, #168]	; (8010f14 <sys_timeout_abs+0xcc>)
 8010e6a:	22be      	movs	r2, #190	; 0xbe
 8010e6c:	492a      	ldr	r1, [pc, #168]	; (8010f18 <sys_timeout_abs+0xd0>)
 8010e6e:	482b      	ldr	r0, [pc, #172]	; (8010f1c <sys_timeout_abs+0xd4>)
 8010e70:	f000 fb18 	bl	80114a4 <iprintf>
    return;
 8010e74:	e04a      	b.n	8010f0c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	2200      	movs	r2, #0
 8010e7a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	68ba      	ldr	r2, [r7, #8]
 8010e80:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	68fa      	ldr	r2, [r7, #12]
 8010e8c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010e8e:	4b24      	ldr	r3, [pc, #144]	; (8010f20 <sys_timeout_abs+0xd8>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d103      	bne.n	8010e9e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010e96:	4a22      	ldr	r2, [pc, #136]	; (8010f20 <sys_timeout_abs+0xd8>)
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	6013      	str	r3, [r2, #0]
    return;
 8010e9c:	e037      	b.n	8010f0e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	685a      	ldr	r2, [r3, #4]
 8010ea2:	4b1f      	ldr	r3, [pc, #124]	; (8010f20 <sys_timeout_abs+0xd8>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	1ad3      	subs	r3, r2, r3
 8010eaa:	0fdb      	lsrs	r3, r3, #31
 8010eac:	f003 0301 	and.w	r3, r3, #1
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d007      	beq.n	8010ec6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010eb6:	4b1a      	ldr	r3, [pc, #104]	; (8010f20 <sys_timeout_abs+0xd8>)
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010ebe:	4a18      	ldr	r2, [pc, #96]	; (8010f20 <sys_timeout_abs+0xd8>)
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	6013      	str	r3, [r2, #0]
 8010ec4:	e023      	b.n	8010f0e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010ec6:	4b16      	ldr	r3, [pc, #88]	; (8010f20 <sys_timeout_abs+0xd8>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	617b      	str	r3, [r7, #20]
 8010ecc:	e01a      	b.n	8010f04 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d00b      	beq.n	8010eee <sys_timeout_abs+0xa6>
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	685a      	ldr	r2, [r3, #4]
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	1ad3      	subs	r3, r2, r3
 8010ee2:	0fdb      	lsrs	r3, r3, #31
 8010ee4:	f003 0301 	and.w	r3, r3, #1
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d007      	beq.n	8010efe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	681a      	ldr	r2, [r3, #0]
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	693a      	ldr	r2, [r7, #16]
 8010efa:	601a      	str	r2, [r3, #0]
        break;
 8010efc:	e007      	b.n	8010f0e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	617b      	str	r3, [r7, #20]
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d1e1      	bne.n	8010ece <sys_timeout_abs+0x86>
 8010f0a:	e000      	b.n	8010f0e <sys_timeout_abs+0xc6>
    return;
 8010f0c:	bf00      	nop
      }
    }
  }
}
 8010f0e:	3718      	adds	r7, #24
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	08014d0c 	.word	0x08014d0c
 8010f18:	08014d70 	.word	0x08014d70
 8010f1c:	08014db0 	.word	0x08014db0
 8010f20:	24008170 	.word	0x24008170

08010f24 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b086      	sub	sp, #24
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	4798      	blx	r3

  now = sys_now();
 8010f36:	f7f6 fc35 	bl	80077a4 <sys_now>
 8010f3a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	4b0f      	ldr	r3, [pc, #60]	; (8010f80 <lwip_cyclic_timer+0x5c>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	4413      	add	r3, r2
 8010f46:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010f48:	68fa      	ldr	r2, [r7, #12]
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	1ad3      	subs	r3, r2, r3
 8010f4e:	0fdb      	lsrs	r3, r3, #31
 8010f50:	f003 0301 	and.w	r3, r3, #1
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d009      	beq.n	8010f6e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	4413      	add	r3, r2
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	4907      	ldr	r1, [pc, #28]	; (8010f84 <lwip_cyclic_timer+0x60>)
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7ff ff6e 	bl	8010e48 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010f6c:	e004      	b.n	8010f78 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	4904      	ldr	r1, [pc, #16]	; (8010f84 <lwip_cyclic_timer+0x60>)
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f7ff ff68 	bl	8010e48 <sys_timeout_abs>
}
 8010f78:	bf00      	nop
 8010f7a:	3718      	adds	r7, #24
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	24008174 	.word	0x24008174
 8010f84:	08010f25 	.word	0x08010f25

08010f88 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010f8e:	2301      	movs	r3, #1
 8010f90:	607b      	str	r3, [r7, #4]
 8010f92:	e00e      	b.n	8010fb2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010f94:	4a0b      	ldr	r2, [pc, #44]	; (8010fc4 <sys_timeouts_init+0x3c>)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	00db      	lsls	r3, r3, #3
 8010fa0:	4a08      	ldr	r2, [pc, #32]	; (8010fc4 <sys_timeouts_init+0x3c>)
 8010fa2:	4413      	add	r3, r2
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	4908      	ldr	r1, [pc, #32]	; (8010fc8 <sys_timeouts_init+0x40>)
 8010fa8:	f000 f810 	bl	8010fcc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	607b      	str	r3, [r7, #4]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2b02      	cmp	r3, #2
 8010fb6:	d9ed      	bls.n	8010f94 <sys_timeouts_init+0xc>
  }
}
 8010fb8:	bf00      	nop
 8010fba:	bf00      	nop
 8010fbc:	3708      	adds	r7, #8
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	080152c4 	.word	0x080152c4
 8010fc8:	08010f25 	.word	0x08010f25

08010fcc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b086      	sub	sp, #24
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fde:	d306      	bcc.n	8010fee <sys_timeout+0x22>
 8010fe0:	4b0a      	ldr	r3, [pc, #40]	; (801100c <sys_timeout+0x40>)
 8010fe2:	f240 1229 	movw	r2, #297	; 0x129
 8010fe6:	490a      	ldr	r1, [pc, #40]	; (8011010 <sys_timeout+0x44>)
 8010fe8:	480a      	ldr	r0, [pc, #40]	; (8011014 <sys_timeout+0x48>)
 8010fea:	f000 fa5b 	bl	80114a4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010fee:	f7f6 fbd9 	bl	80077a4 <sys_now>
 8010ff2:	4602      	mov	r2, r0
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	4413      	add	r3, r2
 8010ff8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010ffa:	687a      	ldr	r2, [r7, #4]
 8010ffc:	68b9      	ldr	r1, [r7, #8]
 8010ffe:	6978      	ldr	r0, [r7, #20]
 8011000:	f7ff ff22 	bl	8010e48 <sys_timeout_abs>
#endif
}
 8011004:	bf00      	nop
 8011006:	3718      	adds	r7, #24
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	08014d0c 	.word	0x08014d0c
 8011010:	08014dd8 	.word	0x08014dd8
 8011014:	08014db0 	.word	0x08014db0

08011018 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801101e:	f7f6 fbc1 	bl	80077a4 <sys_now>
 8011022:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011024:	4b1a      	ldr	r3, [pc, #104]	; (8011090 <sys_check_timeouts+0x78>)
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	b2db      	uxtb	r3, r3
 801102a:	2b00      	cmp	r3, #0
 801102c:	d001      	beq.n	8011032 <sys_check_timeouts+0x1a>
 801102e:	f7f9 ffc7 	bl	800afc0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011032:	4b18      	ldr	r3, [pc, #96]	; (8011094 <sys_check_timeouts+0x7c>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d022      	beq.n	8011084 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	68fa      	ldr	r2, [r7, #12]
 8011044:	1ad3      	subs	r3, r2, r3
 8011046:	0fdb      	lsrs	r3, r3, #31
 8011048:	f003 0301 	and.w	r3, r3, #1
 801104c:	b2db      	uxtb	r3, r3
 801104e:	2b00      	cmp	r3, #0
 8011050:	d11a      	bne.n	8011088 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4a0f      	ldr	r2, [pc, #60]	; (8011094 <sys_check_timeouts+0x7c>)
 8011058:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	689b      	ldr	r3, [r3, #8]
 801105e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	68db      	ldr	r3, [r3, #12]
 8011064:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	4a0b      	ldr	r2, [pc, #44]	; (8011098 <sys_check_timeouts+0x80>)
 801106c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801106e:	68b9      	ldr	r1, [r7, #8]
 8011070:	2006      	movs	r0, #6
 8011072:	f7f9 fccd 	bl	800aa10 <memp_free>
    if (handler != NULL) {
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d0d3      	beq.n	8011024 <sys_check_timeouts+0xc>
      handler(arg);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6838      	ldr	r0, [r7, #0]
 8011080:	4798      	blx	r3
  do {
 8011082:	e7cf      	b.n	8011024 <sys_check_timeouts+0xc>
      return;
 8011084:	bf00      	nop
 8011086:	e000      	b.n	801108a <sys_check_timeouts+0x72>
      return;
 8011088:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801108a:	3710      	adds	r7, #16
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	2400811d 	.word	0x2400811d
 8011094:	24008170 	.word	0x24008170
 8011098:	24008174 	.word	0x24008174

0801109c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80110a0:	f000 fa18 	bl	80114d4 <rand>
 80110a4:	4603      	mov	r3, r0
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80110ac:	b29b      	uxth	r3, r3
 80110ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	4b01      	ldr	r3, [pc, #4]	; (80110bc <udp_init+0x20>)
 80110b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80110b8:	bf00      	nop
 80110ba:	bd80      	pop	{r7, pc}
 80110bc:	24000014 	.word	0x24000014

080110c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b084      	sub	sp, #16
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	60b9      	str	r1, [r7, #8]
 80110ca:	4613      	mov	r3, r2
 80110cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d105      	bne.n	80110e0 <udp_input_local_match+0x20>
 80110d4:	4b27      	ldr	r3, [pc, #156]	; (8011174 <udp_input_local_match+0xb4>)
 80110d6:	2287      	movs	r2, #135	; 0x87
 80110d8:	4927      	ldr	r1, [pc, #156]	; (8011178 <udp_input_local_match+0xb8>)
 80110da:	4828      	ldr	r0, [pc, #160]	; (801117c <udp_input_local_match+0xbc>)
 80110dc:	f000 f9e2 	bl	80114a4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d105      	bne.n	80110f2 <udp_input_local_match+0x32>
 80110e6:	4b23      	ldr	r3, [pc, #140]	; (8011174 <udp_input_local_match+0xb4>)
 80110e8:	2288      	movs	r2, #136	; 0x88
 80110ea:	4925      	ldr	r1, [pc, #148]	; (8011180 <udp_input_local_match+0xc0>)
 80110ec:	4823      	ldr	r0, [pc, #140]	; (801117c <udp_input_local_match+0xbc>)
 80110ee:	f000 f9d9 	bl	80114a4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	7a1b      	ldrb	r3, [r3, #8]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d00b      	beq.n	8011112 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	7a1a      	ldrb	r2, [r3, #8]
 80110fe:	4b21      	ldr	r3, [pc, #132]	; (8011184 <udp_input_local_match+0xc4>)
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011106:	3301      	adds	r3, #1
 8011108:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801110a:	429a      	cmp	r2, r3
 801110c:	d001      	beq.n	8011112 <udp_input_local_match+0x52>
    return 0;
 801110e:	2300      	movs	r3, #0
 8011110:	e02b      	b.n	801116a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011112:	79fb      	ldrb	r3, [r7, #7]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d018      	beq.n	801114a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d013      	beq.n	8011146 <udp_input_local_match+0x86>
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d00f      	beq.n	8011146 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011126:	4b17      	ldr	r3, [pc, #92]	; (8011184 <udp_input_local_match+0xc4>)
 8011128:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801112a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801112e:	d00a      	beq.n	8011146 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	4b13      	ldr	r3, [pc, #76]	; (8011184 <udp_input_local_match+0xc4>)
 8011136:	695b      	ldr	r3, [r3, #20]
 8011138:	405a      	eors	r2, r3
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	3308      	adds	r3, #8
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011142:	2b00      	cmp	r3, #0
 8011144:	d110      	bne.n	8011168 <udp_input_local_match+0xa8>
          return 1;
 8011146:	2301      	movs	r3, #1
 8011148:	e00f      	b.n	801116a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d009      	beq.n	8011164 <udp_input_local_match+0xa4>
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d005      	beq.n	8011164 <udp_input_local_match+0xa4>
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	4b09      	ldr	r3, [pc, #36]	; (8011184 <udp_input_local_match+0xc4>)
 801115e:	695b      	ldr	r3, [r3, #20]
 8011160:	429a      	cmp	r2, r3
 8011162:	d101      	bne.n	8011168 <udp_input_local_match+0xa8>
        return 1;
 8011164:	2301      	movs	r3, #1
 8011166:	e000      	b.n	801116a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011168:	2300      	movs	r3, #0
}
 801116a:	4618      	mov	r0, r3
 801116c:	3710      	adds	r7, #16
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
 8011172:	bf00      	nop
 8011174:	08014e24 	.word	0x08014e24
 8011178:	08014e80 	.word	0x08014e80
 801117c:	08014ea4 	.word	0x08014ea4
 8011180:	08014ecc 	.word	0x08014ecc
 8011184:	240051f8 	.word	0x240051f8

08011188 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011188:	b590      	push	{r4, r7, lr}
 801118a:	b08d      	sub	sp, #52	; 0x34
 801118c:	af02      	add	r7, sp, #8
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011192:	2300      	movs	r3, #0
 8011194:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d105      	bne.n	80111a8 <udp_input+0x20>
 801119c:	4b7c      	ldr	r3, [pc, #496]	; (8011390 <udp_input+0x208>)
 801119e:	22cf      	movs	r2, #207	; 0xcf
 80111a0:	497c      	ldr	r1, [pc, #496]	; (8011394 <udp_input+0x20c>)
 80111a2:	487d      	ldr	r0, [pc, #500]	; (8011398 <udp_input+0x210>)
 80111a4:	f000 f97e 	bl	80114a4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d105      	bne.n	80111ba <udp_input+0x32>
 80111ae:	4b78      	ldr	r3, [pc, #480]	; (8011390 <udp_input+0x208>)
 80111b0:	22d0      	movs	r2, #208	; 0xd0
 80111b2:	497a      	ldr	r1, [pc, #488]	; (801139c <udp_input+0x214>)
 80111b4:	4878      	ldr	r0, [pc, #480]	; (8011398 <udp_input+0x210>)
 80111b6:	f000 f975 	bl	80114a4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	895b      	ldrh	r3, [r3, #10]
 80111be:	2b07      	cmp	r3, #7
 80111c0:	d803      	bhi.n	80111ca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f7fa fa36 	bl	800b634 <pbuf_free>
    goto end;
 80111c8:	e0de      	b.n	8011388 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80111d0:	4b73      	ldr	r3, [pc, #460]	; (80113a0 <udp_input+0x218>)
 80111d2:	695b      	ldr	r3, [r3, #20]
 80111d4:	4a72      	ldr	r2, [pc, #456]	; (80113a0 <udp_input+0x218>)
 80111d6:	6812      	ldr	r2, [r2, #0]
 80111d8:	4611      	mov	r1, r2
 80111da:	4618      	mov	r0, r3
 80111dc:	f7f8 f8f8 	bl	80093d0 <ip4_addr_isbroadcast_u32>
 80111e0:	4603      	mov	r3, r0
 80111e2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	881b      	ldrh	r3, [r3, #0]
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7f6 fb84 	bl	80078f8 <lwip_htons>
 80111f0:	4603      	mov	r3, r0
 80111f2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	885b      	ldrh	r3, [r3, #2]
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7f6 fb7c 	bl	80078f8 <lwip_htons>
 8011200:	4603      	mov	r3, r0
 8011202:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011204:	2300      	movs	r3, #0
 8011206:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011208:	2300      	movs	r3, #0
 801120a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801120c:	2300      	movs	r3, #0
 801120e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011210:	4b64      	ldr	r3, [pc, #400]	; (80113a4 <udp_input+0x21c>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	627b      	str	r3, [r7, #36]	; 0x24
 8011216:	e054      	b.n	80112c2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121a:	8a5b      	ldrh	r3, [r3, #18]
 801121c:	89fa      	ldrh	r2, [r7, #14]
 801121e:	429a      	cmp	r2, r3
 8011220:	d14a      	bne.n	80112b8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011222:	7cfb      	ldrb	r3, [r7, #19]
 8011224:	461a      	mov	r2, r3
 8011226:	6839      	ldr	r1, [r7, #0]
 8011228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801122a:	f7ff ff49 	bl	80110c0 <udp_input_local_match>
 801122e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011230:	2b00      	cmp	r3, #0
 8011232:	d041      	beq.n	80112b8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011236:	7c1b      	ldrb	r3, [r3, #16]
 8011238:	f003 0304 	and.w	r3, r3, #4
 801123c:	2b00      	cmp	r3, #0
 801123e:	d11d      	bne.n	801127c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d102      	bne.n	801124c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011248:	61fb      	str	r3, [r7, #28]
 801124a:	e017      	b.n	801127c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801124c:	7cfb      	ldrb	r3, [r7, #19]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d014      	beq.n	801127c <udp_input+0xf4>
 8011252:	4b53      	ldr	r3, [pc, #332]	; (80113a0 <udp_input+0x218>)
 8011254:	695b      	ldr	r3, [r3, #20]
 8011256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801125a:	d10f      	bne.n	801127c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	3304      	adds	r3, #4
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	429a      	cmp	r2, r3
 8011268:	d008      	beq.n	801127c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	3304      	adds	r3, #4
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	429a      	cmp	r2, r3
 8011276:	d101      	bne.n	801127c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127e:	8a9b      	ldrh	r3, [r3, #20]
 8011280:	8a3a      	ldrh	r2, [r7, #16]
 8011282:	429a      	cmp	r2, r3
 8011284:	d118      	bne.n	80112b8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011288:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801128a:	2b00      	cmp	r3, #0
 801128c:	d005      	beq.n	801129a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011290:	685a      	ldr	r2, [r3, #4]
 8011292:	4b43      	ldr	r3, [pc, #268]	; (80113a0 <udp_input+0x218>)
 8011294:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011296:	429a      	cmp	r2, r3
 8011298:	d10e      	bne.n	80112b8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801129a:	6a3b      	ldr	r3, [r7, #32]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d014      	beq.n	80112ca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80112a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a2:	68da      	ldr	r2, [r3, #12]
 80112a4:	6a3b      	ldr	r3, [r7, #32]
 80112a6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80112a8:	4b3e      	ldr	r3, [pc, #248]	; (80113a4 <udp_input+0x21c>)
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80112b0:	4a3c      	ldr	r2, [pc, #240]	; (80113a4 <udp_input+0x21c>)
 80112b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80112b6:	e008      	b.n	80112ca <udp_input+0x142>
      }
    }

    prev = pcb;
 80112b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80112bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	627b      	str	r3, [r7, #36]	; 0x24
 80112c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d1a7      	bne.n	8011218 <udp_input+0x90>
 80112c8:	e000      	b.n	80112cc <udp_input+0x144>
        break;
 80112ca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80112cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d101      	bne.n	80112d6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80112d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d002      	beq.n	80112e2 <udp_input+0x15a>
    for_us = 1;
 80112dc:	2301      	movs	r3, #1
 80112de:	76fb      	strb	r3, [r7, #27]
 80112e0:	e00a      	b.n	80112f8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	3304      	adds	r3, #4
 80112e6:	681a      	ldr	r2, [r3, #0]
 80112e8:	4b2d      	ldr	r3, [pc, #180]	; (80113a0 <udp_input+0x218>)
 80112ea:	695b      	ldr	r3, [r3, #20]
 80112ec:	429a      	cmp	r2, r3
 80112ee:	bf0c      	ite	eq
 80112f0:	2301      	moveq	r3, #1
 80112f2:	2300      	movne	r3, #0
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80112f8:	7efb      	ldrb	r3, [r7, #27]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d041      	beq.n	8011382 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80112fe:	2108      	movs	r1, #8
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7fa f911 	bl	800b528 <pbuf_remove_header>
 8011306:	4603      	mov	r3, r0
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00a      	beq.n	8011322 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801130c:	4b20      	ldr	r3, [pc, #128]	; (8011390 <udp_input+0x208>)
 801130e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011312:	4925      	ldr	r1, [pc, #148]	; (80113a8 <udp_input+0x220>)
 8011314:	4820      	ldr	r0, [pc, #128]	; (8011398 <udp_input+0x210>)
 8011316:	f000 f8c5 	bl	80114a4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f7fa f98a 	bl	800b634 <pbuf_free>
      goto end;
 8011320:	e032      	b.n	8011388 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011324:	2b00      	cmp	r3, #0
 8011326:	d012      	beq.n	801134e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132a:	699b      	ldr	r3, [r3, #24]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d00a      	beq.n	8011346 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011332:	699c      	ldr	r4, [r3, #24]
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	69d8      	ldr	r0, [r3, #28]
 8011338:	8a3b      	ldrh	r3, [r7, #16]
 801133a:	9300      	str	r3, [sp, #0]
 801133c:	4b1b      	ldr	r3, [pc, #108]	; (80113ac <udp_input+0x224>)
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011342:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011344:	e021      	b.n	801138a <udp_input+0x202>
        pbuf_free(p);
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f7fa f974 	bl	800b634 <pbuf_free>
        goto end;
 801134c:	e01c      	b.n	8011388 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801134e:	7cfb      	ldrb	r3, [r7, #19]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d112      	bne.n	801137a <udp_input+0x1f2>
 8011354:	4b12      	ldr	r3, [pc, #72]	; (80113a0 <udp_input+0x218>)
 8011356:	695b      	ldr	r3, [r3, #20]
 8011358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801135c:	2be0      	cmp	r3, #224	; 0xe0
 801135e:	d00c      	beq.n	801137a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011360:	4b0f      	ldr	r3, [pc, #60]	; (80113a0 <udp_input+0x218>)
 8011362:	899b      	ldrh	r3, [r3, #12]
 8011364:	3308      	adds	r3, #8
 8011366:	b29b      	uxth	r3, r3
 8011368:	b21b      	sxth	r3, r3
 801136a:	4619      	mov	r1, r3
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f7fa f94e 	bl	800b60e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011372:	2103      	movs	r1, #3
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f7f7 fc2f 	bl	8008bd8 <icmp_dest_unreach>
      pbuf_free(p);
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f7fa f95a 	bl	800b634 <pbuf_free>
  return;
 8011380:	e003      	b.n	801138a <udp_input+0x202>
    pbuf_free(p);
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f7fa f956 	bl	800b634 <pbuf_free>
  return;
 8011388:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801138a:	372c      	adds	r7, #44	; 0x2c
 801138c:	46bd      	mov	sp, r7
 801138e:	bd90      	pop	{r4, r7, pc}
 8011390:	08014e24 	.word	0x08014e24
 8011394:	08014ef4 	.word	0x08014ef4
 8011398:	08014ea4 	.word	0x08014ea4
 801139c:	08014f0c 	.word	0x08014f0c
 80113a0:	240051f8 	.word	0x240051f8
 80113a4:	2400817c 	.word	0x2400817c
 80113a8:	08014f28 	.word	0x08014f28
 80113ac:	24005208 	.word	0x24005208

080113b0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b085      	sub	sp, #20
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d01e      	beq.n	80113fe <udp_netif_ip_addr_changed+0x4e>
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d01a      	beq.n	80113fe <udp_netif_ip_addr_changed+0x4e>
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d017      	beq.n	80113fe <udp_netif_ip_addr_changed+0x4e>
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d013      	beq.n	80113fe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80113d6:	4b0d      	ldr	r3, [pc, #52]	; (801140c <udp_netif_ip_addr_changed+0x5c>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	60fb      	str	r3, [r7, #12]
 80113dc:	e00c      	b.n	80113f8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d103      	bne.n	80113f2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	68db      	ldr	r3, [r3, #12]
 80113f6:	60fb      	str	r3, [r7, #12]
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d1ef      	bne.n	80113de <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80113fe:	bf00      	nop
 8011400:	3714      	adds	r7, #20
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr
 801140a:	bf00      	nop
 801140c:	2400817c 	.word	0x2400817c

08011410 <__libc_init_array>:
 8011410:	b570      	push	{r4, r5, r6, lr}
 8011412:	4d0d      	ldr	r5, [pc, #52]	; (8011448 <__libc_init_array+0x38>)
 8011414:	4c0d      	ldr	r4, [pc, #52]	; (801144c <__libc_init_array+0x3c>)
 8011416:	1b64      	subs	r4, r4, r5
 8011418:	10a4      	asrs	r4, r4, #2
 801141a:	2600      	movs	r6, #0
 801141c:	42a6      	cmp	r6, r4
 801141e:	d109      	bne.n	8011434 <__libc_init_array+0x24>
 8011420:	4d0b      	ldr	r5, [pc, #44]	; (8011450 <__libc_init_array+0x40>)
 8011422:	4c0c      	ldr	r4, [pc, #48]	; (8011454 <__libc_init_array+0x44>)
 8011424:	f001 f88e 	bl	8012544 <_init>
 8011428:	1b64      	subs	r4, r4, r5
 801142a:	10a4      	asrs	r4, r4, #2
 801142c:	2600      	movs	r6, #0
 801142e:	42a6      	cmp	r6, r4
 8011430:	d105      	bne.n	801143e <__libc_init_array+0x2e>
 8011432:	bd70      	pop	{r4, r5, r6, pc}
 8011434:	f855 3b04 	ldr.w	r3, [r5], #4
 8011438:	4798      	blx	r3
 801143a:	3601      	adds	r6, #1
 801143c:	e7ee      	b.n	801141c <__libc_init_array+0xc>
 801143e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011442:	4798      	blx	r3
 8011444:	3601      	adds	r6, #1
 8011446:	e7f2      	b.n	801142e <__libc_init_array+0x1e>
 8011448:	0801542c 	.word	0x0801542c
 801144c:	0801542c 	.word	0x0801542c
 8011450:	0801542c 	.word	0x0801542c
 8011454:	08015430 	.word	0x08015430

08011458 <memcmp>:
 8011458:	b510      	push	{r4, lr}
 801145a:	3901      	subs	r1, #1
 801145c:	4402      	add	r2, r0
 801145e:	4290      	cmp	r0, r2
 8011460:	d101      	bne.n	8011466 <memcmp+0xe>
 8011462:	2000      	movs	r0, #0
 8011464:	e005      	b.n	8011472 <memcmp+0x1a>
 8011466:	7803      	ldrb	r3, [r0, #0]
 8011468:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801146c:	42a3      	cmp	r3, r4
 801146e:	d001      	beq.n	8011474 <memcmp+0x1c>
 8011470:	1b18      	subs	r0, r3, r4
 8011472:	bd10      	pop	{r4, pc}
 8011474:	3001      	adds	r0, #1
 8011476:	e7f2      	b.n	801145e <memcmp+0x6>

08011478 <memcpy>:
 8011478:	440a      	add	r2, r1
 801147a:	4291      	cmp	r1, r2
 801147c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011480:	d100      	bne.n	8011484 <memcpy+0xc>
 8011482:	4770      	bx	lr
 8011484:	b510      	push	{r4, lr}
 8011486:	f811 4b01 	ldrb.w	r4, [r1], #1
 801148a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801148e:	4291      	cmp	r1, r2
 8011490:	d1f9      	bne.n	8011486 <memcpy+0xe>
 8011492:	bd10      	pop	{r4, pc}

08011494 <memset>:
 8011494:	4402      	add	r2, r0
 8011496:	4603      	mov	r3, r0
 8011498:	4293      	cmp	r3, r2
 801149a:	d100      	bne.n	801149e <memset+0xa>
 801149c:	4770      	bx	lr
 801149e:	f803 1b01 	strb.w	r1, [r3], #1
 80114a2:	e7f9      	b.n	8011498 <memset+0x4>

080114a4 <iprintf>:
 80114a4:	b40f      	push	{r0, r1, r2, r3}
 80114a6:	4b0a      	ldr	r3, [pc, #40]	; (80114d0 <iprintf+0x2c>)
 80114a8:	b513      	push	{r0, r1, r4, lr}
 80114aa:	681c      	ldr	r4, [r3, #0]
 80114ac:	b124      	cbz	r4, 80114b8 <iprintf+0x14>
 80114ae:	69a3      	ldr	r3, [r4, #24]
 80114b0:	b913      	cbnz	r3, 80114b8 <iprintf+0x14>
 80114b2:	4620      	mov	r0, r4
 80114b4:	f000 f8c2 	bl	801163c <__sinit>
 80114b8:	ab05      	add	r3, sp, #20
 80114ba:	9a04      	ldr	r2, [sp, #16]
 80114bc:	68a1      	ldr	r1, [r4, #8]
 80114be:	9301      	str	r3, [sp, #4]
 80114c0:	4620      	mov	r0, r4
 80114c2:	f000 fa7f 	bl	80119c4 <_vfiprintf_r>
 80114c6:	b002      	add	sp, #8
 80114c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114cc:	b004      	add	sp, #16
 80114ce:	4770      	bx	lr
 80114d0:	24000018 	.word	0x24000018

080114d4 <rand>:
 80114d4:	4b16      	ldr	r3, [pc, #88]	; (8011530 <rand+0x5c>)
 80114d6:	b510      	push	{r4, lr}
 80114d8:	681c      	ldr	r4, [r3, #0]
 80114da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80114dc:	b9b3      	cbnz	r3, 801150c <rand+0x38>
 80114de:	2018      	movs	r0, #24
 80114e0:	f000 f95e 	bl	80117a0 <malloc>
 80114e4:	63a0      	str	r0, [r4, #56]	; 0x38
 80114e6:	b928      	cbnz	r0, 80114f4 <rand+0x20>
 80114e8:	4602      	mov	r2, r0
 80114ea:	4b12      	ldr	r3, [pc, #72]	; (8011534 <rand+0x60>)
 80114ec:	4812      	ldr	r0, [pc, #72]	; (8011538 <rand+0x64>)
 80114ee:	214e      	movs	r1, #78	; 0x4e
 80114f0:	f000 f82e 	bl	8011550 <__assert_func>
 80114f4:	4a11      	ldr	r2, [pc, #68]	; (801153c <rand+0x68>)
 80114f6:	4b12      	ldr	r3, [pc, #72]	; (8011540 <rand+0x6c>)
 80114f8:	e9c0 2300 	strd	r2, r3, [r0]
 80114fc:	4b11      	ldr	r3, [pc, #68]	; (8011544 <rand+0x70>)
 80114fe:	6083      	str	r3, [r0, #8]
 8011500:	230b      	movs	r3, #11
 8011502:	8183      	strh	r3, [r0, #12]
 8011504:	2201      	movs	r2, #1
 8011506:	2300      	movs	r3, #0
 8011508:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801150c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801150e:	4a0e      	ldr	r2, [pc, #56]	; (8011548 <rand+0x74>)
 8011510:	6920      	ldr	r0, [r4, #16]
 8011512:	6963      	ldr	r3, [r4, #20]
 8011514:	490d      	ldr	r1, [pc, #52]	; (801154c <rand+0x78>)
 8011516:	4342      	muls	r2, r0
 8011518:	fb01 2203 	mla	r2, r1, r3, r2
 801151c:	fba0 0101 	umull	r0, r1, r0, r1
 8011520:	1c43      	adds	r3, r0, #1
 8011522:	eb42 0001 	adc.w	r0, r2, r1
 8011526:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801152a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801152e:	bd10      	pop	{r4, pc}
 8011530:	24000018 	.word	0x24000018
 8011534:	080152e0 	.word	0x080152e0
 8011538:	080152f7 	.word	0x080152f7
 801153c:	abcd330e 	.word	0xabcd330e
 8011540:	e66d1234 	.word	0xe66d1234
 8011544:	0005deec 	.word	0x0005deec
 8011548:	5851f42d 	.word	0x5851f42d
 801154c:	4c957f2d 	.word	0x4c957f2d

08011550 <__assert_func>:
 8011550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011552:	4614      	mov	r4, r2
 8011554:	461a      	mov	r2, r3
 8011556:	4b09      	ldr	r3, [pc, #36]	; (801157c <__assert_func+0x2c>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	4605      	mov	r5, r0
 801155c:	68d8      	ldr	r0, [r3, #12]
 801155e:	b14c      	cbz	r4, 8011574 <__assert_func+0x24>
 8011560:	4b07      	ldr	r3, [pc, #28]	; (8011580 <__assert_func+0x30>)
 8011562:	9100      	str	r1, [sp, #0]
 8011564:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011568:	4906      	ldr	r1, [pc, #24]	; (8011584 <__assert_func+0x34>)
 801156a:	462b      	mov	r3, r5
 801156c:	f000 f8e4 	bl	8011738 <fiprintf>
 8011570:	f000 fe12 	bl	8012198 <abort>
 8011574:	4b04      	ldr	r3, [pc, #16]	; (8011588 <__assert_func+0x38>)
 8011576:	461c      	mov	r4, r3
 8011578:	e7f3      	b.n	8011562 <__assert_func+0x12>
 801157a:	bf00      	nop
 801157c:	24000018 	.word	0x24000018
 8011580:	08015352 	.word	0x08015352
 8011584:	0801535f 	.word	0x0801535f
 8011588:	0801538d 	.word	0x0801538d

0801158c <std>:
 801158c:	2300      	movs	r3, #0
 801158e:	b510      	push	{r4, lr}
 8011590:	4604      	mov	r4, r0
 8011592:	e9c0 3300 	strd	r3, r3, [r0]
 8011596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801159a:	6083      	str	r3, [r0, #8]
 801159c:	8181      	strh	r1, [r0, #12]
 801159e:	6643      	str	r3, [r0, #100]	; 0x64
 80115a0:	81c2      	strh	r2, [r0, #14]
 80115a2:	6183      	str	r3, [r0, #24]
 80115a4:	4619      	mov	r1, r3
 80115a6:	2208      	movs	r2, #8
 80115a8:	305c      	adds	r0, #92	; 0x5c
 80115aa:	f7ff ff73 	bl	8011494 <memset>
 80115ae:	4b05      	ldr	r3, [pc, #20]	; (80115c4 <std+0x38>)
 80115b0:	6263      	str	r3, [r4, #36]	; 0x24
 80115b2:	4b05      	ldr	r3, [pc, #20]	; (80115c8 <std+0x3c>)
 80115b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80115b6:	4b05      	ldr	r3, [pc, #20]	; (80115cc <std+0x40>)
 80115b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115ba:	4b05      	ldr	r3, [pc, #20]	; (80115d0 <std+0x44>)
 80115bc:	6224      	str	r4, [r4, #32]
 80115be:	6323      	str	r3, [r4, #48]	; 0x30
 80115c0:	bd10      	pop	{r4, pc}
 80115c2:	bf00      	nop
 80115c4:	08011f6d 	.word	0x08011f6d
 80115c8:	08011f8f 	.word	0x08011f8f
 80115cc:	08011fc7 	.word	0x08011fc7
 80115d0:	08011feb 	.word	0x08011feb

080115d4 <_cleanup_r>:
 80115d4:	4901      	ldr	r1, [pc, #4]	; (80115dc <_cleanup_r+0x8>)
 80115d6:	f000 b8c1 	b.w	801175c <_fwalk_reent>
 80115da:	bf00      	nop
 80115dc:	080122d5 	.word	0x080122d5

080115e0 <__sfmoreglue>:
 80115e0:	b570      	push	{r4, r5, r6, lr}
 80115e2:	2268      	movs	r2, #104	; 0x68
 80115e4:	1e4d      	subs	r5, r1, #1
 80115e6:	4355      	muls	r5, r2
 80115e8:	460e      	mov	r6, r1
 80115ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80115ee:	f000 f94b 	bl	8011888 <_malloc_r>
 80115f2:	4604      	mov	r4, r0
 80115f4:	b140      	cbz	r0, 8011608 <__sfmoreglue+0x28>
 80115f6:	2100      	movs	r1, #0
 80115f8:	e9c0 1600 	strd	r1, r6, [r0]
 80115fc:	300c      	adds	r0, #12
 80115fe:	60a0      	str	r0, [r4, #8]
 8011600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011604:	f7ff ff46 	bl	8011494 <memset>
 8011608:	4620      	mov	r0, r4
 801160a:	bd70      	pop	{r4, r5, r6, pc}

0801160c <__sfp_lock_acquire>:
 801160c:	4801      	ldr	r0, [pc, #4]	; (8011614 <__sfp_lock_acquire+0x8>)
 801160e:	f000 b8c5 	b.w	801179c <__retarget_lock_acquire_recursive>
 8011612:	bf00      	nop
 8011614:	24008185 	.word	0x24008185

08011618 <__sfp_lock_release>:
 8011618:	4801      	ldr	r0, [pc, #4]	; (8011620 <__sfp_lock_release+0x8>)
 801161a:	f000 b8c0 	b.w	801179e <__retarget_lock_release_recursive>
 801161e:	bf00      	nop
 8011620:	24008185 	.word	0x24008185

08011624 <__sinit_lock_acquire>:
 8011624:	4801      	ldr	r0, [pc, #4]	; (801162c <__sinit_lock_acquire+0x8>)
 8011626:	f000 b8b9 	b.w	801179c <__retarget_lock_acquire_recursive>
 801162a:	bf00      	nop
 801162c:	24008186 	.word	0x24008186

08011630 <__sinit_lock_release>:
 8011630:	4801      	ldr	r0, [pc, #4]	; (8011638 <__sinit_lock_release+0x8>)
 8011632:	f000 b8b4 	b.w	801179e <__retarget_lock_release_recursive>
 8011636:	bf00      	nop
 8011638:	24008186 	.word	0x24008186

0801163c <__sinit>:
 801163c:	b510      	push	{r4, lr}
 801163e:	4604      	mov	r4, r0
 8011640:	f7ff fff0 	bl	8011624 <__sinit_lock_acquire>
 8011644:	69a3      	ldr	r3, [r4, #24]
 8011646:	b11b      	cbz	r3, 8011650 <__sinit+0x14>
 8011648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801164c:	f7ff bff0 	b.w	8011630 <__sinit_lock_release>
 8011650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011654:	6523      	str	r3, [r4, #80]	; 0x50
 8011656:	4b13      	ldr	r3, [pc, #76]	; (80116a4 <__sinit+0x68>)
 8011658:	4a13      	ldr	r2, [pc, #76]	; (80116a8 <__sinit+0x6c>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	62a2      	str	r2, [r4, #40]	; 0x28
 801165e:	42a3      	cmp	r3, r4
 8011660:	bf04      	itt	eq
 8011662:	2301      	moveq	r3, #1
 8011664:	61a3      	streq	r3, [r4, #24]
 8011666:	4620      	mov	r0, r4
 8011668:	f000 f820 	bl	80116ac <__sfp>
 801166c:	6060      	str	r0, [r4, #4]
 801166e:	4620      	mov	r0, r4
 8011670:	f000 f81c 	bl	80116ac <__sfp>
 8011674:	60a0      	str	r0, [r4, #8]
 8011676:	4620      	mov	r0, r4
 8011678:	f000 f818 	bl	80116ac <__sfp>
 801167c:	2200      	movs	r2, #0
 801167e:	60e0      	str	r0, [r4, #12]
 8011680:	2104      	movs	r1, #4
 8011682:	6860      	ldr	r0, [r4, #4]
 8011684:	f7ff ff82 	bl	801158c <std>
 8011688:	68a0      	ldr	r0, [r4, #8]
 801168a:	2201      	movs	r2, #1
 801168c:	2109      	movs	r1, #9
 801168e:	f7ff ff7d 	bl	801158c <std>
 8011692:	68e0      	ldr	r0, [r4, #12]
 8011694:	2202      	movs	r2, #2
 8011696:	2112      	movs	r1, #18
 8011698:	f7ff ff78 	bl	801158c <std>
 801169c:	2301      	movs	r3, #1
 801169e:	61a3      	str	r3, [r4, #24]
 80116a0:	e7d2      	b.n	8011648 <__sinit+0xc>
 80116a2:	bf00      	nop
 80116a4:	080152dc 	.word	0x080152dc
 80116a8:	080115d5 	.word	0x080115d5

080116ac <__sfp>:
 80116ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ae:	4607      	mov	r7, r0
 80116b0:	f7ff ffac 	bl	801160c <__sfp_lock_acquire>
 80116b4:	4b1e      	ldr	r3, [pc, #120]	; (8011730 <__sfp+0x84>)
 80116b6:	681e      	ldr	r6, [r3, #0]
 80116b8:	69b3      	ldr	r3, [r6, #24]
 80116ba:	b913      	cbnz	r3, 80116c2 <__sfp+0x16>
 80116bc:	4630      	mov	r0, r6
 80116be:	f7ff ffbd 	bl	801163c <__sinit>
 80116c2:	3648      	adds	r6, #72	; 0x48
 80116c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80116c8:	3b01      	subs	r3, #1
 80116ca:	d503      	bpl.n	80116d4 <__sfp+0x28>
 80116cc:	6833      	ldr	r3, [r6, #0]
 80116ce:	b30b      	cbz	r3, 8011714 <__sfp+0x68>
 80116d0:	6836      	ldr	r6, [r6, #0]
 80116d2:	e7f7      	b.n	80116c4 <__sfp+0x18>
 80116d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80116d8:	b9d5      	cbnz	r5, 8011710 <__sfp+0x64>
 80116da:	4b16      	ldr	r3, [pc, #88]	; (8011734 <__sfp+0x88>)
 80116dc:	60e3      	str	r3, [r4, #12]
 80116de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80116e2:	6665      	str	r5, [r4, #100]	; 0x64
 80116e4:	f000 f859 	bl	801179a <__retarget_lock_init_recursive>
 80116e8:	f7ff ff96 	bl	8011618 <__sfp_lock_release>
 80116ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80116f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80116f4:	6025      	str	r5, [r4, #0]
 80116f6:	61a5      	str	r5, [r4, #24]
 80116f8:	2208      	movs	r2, #8
 80116fa:	4629      	mov	r1, r5
 80116fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011700:	f7ff fec8 	bl	8011494 <memset>
 8011704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801170c:	4620      	mov	r0, r4
 801170e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011710:	3468      	adds	r4, #104	; 0x68
 8011712:	e7d9      	b.n	80116c8 <__sfp+0x1c>
 8011714:	2104      	movs	r1, #4
 8011716:	4638      	mov	r0, r7
 8011718:	f7ff ff62 	bl	80115e0 <__sfmoreglue>
 801171c:	4604      	mov	r4, r0
 801171e:	6030      	str	r0, [r6, #0]
 8011720:	2800      	cmp	r0, #0
 8011722:	d1d5      	bne.n	80116d0 <__sfp+0x24>
 8011724:	f7ff ff78 	bl	8011618 <__sfp_lock_release>
 8011728:	230c      	movs	r3, #12
 801172a:	603b      	str	r3, [r7, #0]
 801172c:	e7ee      	b.n	801170c <__sfp+0x60>
 801172e:	bf00      	nop
 8011730:	080152dc 	.word	0x080152dc
 8011734:	ffff0001 	.word	0xffff0001

08011738 <fiprintf>:
 8011738:	b40e      	push	{r1, r2, r3}
 801173a:	b503      	push	{r0, r1, lr}
 801173c:	4601      	mov	r1, r0
 801173e:	ab03      	add	r3, sp, #12
 8011740:	4805      	ldr	r0, [pc, #20]	; (8011758 <fiprintf+0x20>)
 8011742:	f853 2b04 	ldr.w	r2, [r3], #4
 8011746:	6800      	ldr	r0, [r0, #0]
 8011748:	9301      	str	r3, [sp, #4]
 801174a:	f000 f93b 	bl	80119c4 <_vfiprintf_r>
 801174e:	b002      	add	sp, #8
 8011750:	f85d eb04 	ldr.w	lr, [sp], #4
 8011754:	b003      	add	sp, #12
 8011756:	4770      	bx	lr
 8011758:	24000018 	.word	0x24000018

0801175c <_fwalk_reent>:
 801175c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011760:	4606      	mov	r6, r0
 8011762:	4688      	mov	r8, r1
 8011764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011768:	2700      	movs	r7, #0
 801176a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801176e:	f1b9 0901 	subs.w	r9, r9, #1
 8011772:	d505      	bpl.n	8011780 <_fwalk_reent+0x24>
 8011774:	6824      	ldr	r4, [r4, #0]
 8011776:	2c00      	cmp	r4, #0
 8011778:	d1f7      	bne.n	801176a <_fwalk_reent+0xe>
 801177a:	4638      	mov	r0, r7
 801177c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011780:	89ab      	ldrh	r3, [r5, #12]
 8011782:	2b01      	cmp	r3, #1
 8011784:	d907      	bls.n	8011796 <_fwalk_reent+0x3a>
 8011786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801178a:	3301      	adds	r3, #1
 801178c:	d003      	beq.n	8011796 <_fwalk_reent+0x3a>
 801178e:	4629      	mov	r1, r5
 8011790:	4630      	mov	r0, r6
 8011792:	47c0      	blx	r8
 8011794:	4307      	orrs	r7, r0
 8011796:	3568      	adds	r5, #104	; 0x68
 8011798:	e7e9      	b.n	801176e <_fwalk_reent+0x12>

0801179a <__retarget_lock_init_recursive>:
 801179a:	4770      	bx	lr

0801179c <__retarget_lock_acquire_recursive>:
 801179c:	4770      	bx	lr

0801179e <__retarget_lock_release_recursive>:
 801179e:	4770      	bx	lr

080117a0 <malloc>:
 80117a0:	4b02      	ldr	r3, [pc, #8]	; (80117ac <malloc+0xc>)
 80117a2:	4601      	mov	r1, r0
 80117a4:	6818      	ldr	r0, [r3, #0]
 80117a6:	f000 b86f 	b.w	8011888 <_malloc_r>
 80117aa:	bf00      	nop
 80117ac:	24000018 	.word	0x24000018

080117b0 <_free_r>:
 80117b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80117b2:	2900      	cmp	r1, #0
 80117b4:	d044      	beq.n	8011840 <_free_r+0x90>
 80117b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117ba:	9001      	str	r0, [sp, #4]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	f1a1 0404 	sub.w	r4, r1, #4
 80117c2:	bfb8      	it	lt
 80117c4:	18e4      	addlt	r4, r4, r3
 80117c6:	f000 fe39 	bl	801243c <__malloc_lock>
 80117ca:	4a1e      	ldr	r2, [pc, #120]	; (8011844 <_free_r+0x94>)
 80117cc:	9801      	ldr	r0, [sp, #4]
 80117ce:	6813      	ldr	r3, [r2, #0]
 80117d0:	b933      	cbnz	r3, 80117e0 <_free_r+0x30>
 80117d2:	6063      	str	r3, [r4, #4]
 80117d4:	6014      	str	r4, [r2, #0]
 80117d6:	b003      	add	sp, #12
 80117d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80117dc:	f000 be34 	b.w	8012448 <__malloc_unlock>
 80117e0:	42a3      	cmp	r3, r4
 80117e2:	d908      	bls.n	80117f6 <_free_r+0x46>
 80117e4:	6825      	ldr	r5, [r4, #0]
 80117e6:	1961      	adds	r1, r4, r5
 80117e8:	428b      	cmp	r3, r1
 80117ea:	bf01      	itttt	eq
 80117ec:	6819      	ldreq	r1, [r3, #0]
 80117ee:	685b      	ldreq	r3, [r3, #4]
 80117f0:	1949      	addeq	r1, r1, r5
 80117f2:	6021      	streq	r1, [r4, #0]
 80117f4:	e7ed      	b.n	80117d2 <_free_r+0x22>
 80117f6:	461a      	mov	r2, r3
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	b10b      	cbz	r3, 8011800 <_free_r+0x50>
 80117fc:	42a3      	cmp	r3, r4
 80117fe:	d9fa      	bls.n	80117f6 <_free_r+0x46>
 8011800:	6811      	ldr	r1, [r2, #0]
 8011802:	1855      	adds	r5, r2, r1
 8011804:	42a5      	cmp	r5, r4
 8011806:	d10b      	bne.n	8011820 <_free_r+0x70>
 8011808:	6824      	ldr	r4, [r4, #0]
 801180a:	4421      	add	r1, r4
 801180c:	1854      	adds	r4, r2, r1
 801180e:	42a3      	cmp	r3, r4
 8011810:	6011      	str	r1, [r2, #0]
 8011812:	d1e0      	bne.n	80117d6 <_free_r+0x26>
 8011814:	681c      	ldr	r4, [r3, #0]
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	6053      	str	r3, [r2, #4]
 801181a:	4421      	add	r1, r4
 801181c:	6011      	str	r1, [r2, #0]
 801181e:	e7da      	b.n	80117d6 <_free_r+0x26>
 8011820:	d902      	bls.n	8011828 <_free_r+0x78>
 8011822:	230c      	movs	r3, #12
 8011824:	6003      	str	r3, [r0, #0]
 8011826:	e7d6      	b.n	80117d6 <_free_r+0x26>
 8011828:	6825      	ldr	r5, [r4, #0]
 801182a:	1961      	adds	r1, r4, r5
 801182c:	428b      	cmp	r3, r1
 801182e:	bf04      	itt	eq
 8011830:	6819      	ldreq	r1, [r3, #0]
 8011832:	685b      	ldreq	r3, [r3, #4]
 8011834:	6063      	str	r3, [r4, #4]
 8011836:	bf04      	itt	eq
 8011838:	1949      	addeq	r1, r1, r5
 801183a:	6021      	streq	r1, [r4, #0]
 801183c:	6054      	str	r4, [r2, #4]
 801183e:	e7ca      	b.n	80117d6 <_free_r+0x26>
 8011840:	b003      	add	sp, #12
 8011842:	bd30      	pop	{r4, r5, pc}
 8011844:	24008188 	.word	0x24008188

08011848 <sbrk_aligned>:
 8011848:	b570      	push	{r4, r5, r6, lr}
 801184a:	4e0e      	ldr	r6, [pc, #56]	; (8011884 <sbrk_aligned+0x3c>)
 801184c:	460c      	mov	r4, r1
 801184e:	6831      	ldr	r1, [r6, #0]
 8011850:	4605      	mov	r5, r0
 8011852:	b911      	cbnz	r1, 801185a <sbrk_aligned+0x12>
 8011854:	f000 fb7a 	bl	8011f4c <_sbrk_r>
 8011858:	6030      	str	r0, [r6, #0]
 801185a:	4621      	mov	r1, r4
 801185c:	4628      	mov	r0, r5
 801185e:	f000 fb75 	bl	8011f4c <_sbrk_r>
 8011862:	1c43      	adds	r3, r0, #1
 8011864:	d00a      	beq.n	801187c <sbrk_aligned+0x34>
 8011866:	1cc4      	adds	r4, r0, #3
 8011868:	f024 0403 	bic.w	r4, r4, #3
 801186c:	42a0      	cmp	r0, r4
 801186e:	d007      	beq.n	8011880 <sbrk_aligned+0x38>
 8011870:	1a21      	subs	r1, r4, r0
 8011872:	4628      	mov	r0, r5
 8011874:	f000 fb6a 	bl	8011f4c <_sbrk_r>
 8011878:	3001      	adds	r0, #1
 801187a:	d101      	bne.n	8011880 <sbrk_aligned+0x38>
 801187c:	f04f 34ff 	mov.w	r4, #4294967295
 8011880:	4620      	mov	r0, r4
 8011882:	bd70      	pop	{r4, r5, r6, pc}
 8011884:	2400818c 	.word	0x2400818c

08011888 <_malloc_r>:
 8011888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801188c:	1ccd      	adds	r5, r1, #3
 801188e:	f025 0503 	bic.w	r5, r5, #3
 8011892:	3508      	adds	r5, #8
 8011894:	2d0c      	cmp	r5, #12
 8011896:	bf38      	it	cc
 8011898:	250c      	movcc	r5, #12
 801189a:	2d00      	cmp	r5, #0
 801189c:	4607      	mov	r7, r0
 801189e:	db01      	blt.n	80118a4 <_malloc_r+0x1c>
 80118a0:	42a9      	cmp	r1, r5
 80118a2:	d905      	bls.n	80118b0 <_malloc_r+0x28>
 80118a4:	230c      	movs	r3, #12
 80118a6:	603b      	str	r3, [r7, #0]
 80118a8:	2600      	movs	r6, #0
 80118aa:	4630      	mov	r0, r6
 80118ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118b0:	4e2e      	ldr	r6, [pc, #184]	; (801196c <_malloc_r+0xe4>)
 80118b2:	f000 fdc3 	bl	801243c <__malloc_lock>
 80118b6:	6833      	ldr	r3, [r6, #0]
 80118b8:	461c      	mov	r4, r3
 80118ba:	bb34      	cbnz	r4, 801190a <_malloc_r+0x82>
 80118bc:	4629      	mov	r1, r5
 80118be:	4638      	mov	r0, r7
 80118c0:	f7ff ffc2 	bl	8011848 <sbrk_aligned>
 80118c4:	1c43      	adds	r3, r0, #1
 80118c6:	4604      	mov	r4, r0
 80118c8:	d14d      	bne.n	8011966 <_malloc_r+0xde>
 80118ca:	6834      	ldr	r4, [r6, #0]
 80118cc:	4626      	mov	r6, r4
 80118ce:	2e00      	cmp	r6, #0
 80118d0:	d140      	bne.n	8011954 <_malloc_r+0xcc>
 80118d2:	6823      	ldr	r3, [r4, #0]
 80118d4:	4631      	mov	r1, r6
 80118d6:	4638      	mov	r0, r7
 80118d8:	eb04 0803 	add.w	r8, r4, r3
 80118dc:	f000 fb36 	bl	8011f4c <_sbrk_r>
 80118e0:	4580      	cmp	r8, r0
 80118e2:	d13a      	bne.n	801195a <_malloc_r+0xd2>
 80118e4:	6821      	ldr	r1, [r4, #0]
 80118e6:	3503      	adds	r5, #3
 80118e8:	1a6d      	subs	r5, r5, r1
 80118ea:	f025 0503 	bic.w	r5, r5, #3
 80118ee:	3508      	adds	r5, #8
 80118f0:	2d0c      	cmp	r5, #12
 80118f2:	bf38      	it	cc
 80118f4:	250c      	movcc	r5, #12
 80118f6:	4629      	mov	r1, r5
 80118f8:	4638      	mov	r0, r7
 80118fa:	f7ff ffa5 	bl	8011848 <sbrk_aligned>
 80118fe:	3001      	adds	r0, #1
 8011900:	d02b      	beq.n	801195a <_malloc_r+0xd2>
 8011902:	6823      	ldr	r3, [r4, #0]
 8011904:	442b      	add	r3, r5
 8011906:	6023      	str	r3, [r4, #0]
 8011908:	e00e      	b.n	8011928 <_malloc_r+0xa0>
 801190a:	6822      	ldr	r2, [r4, #0]
 801190c:	1b52      	subs	r2, r2, r5
 801190e:	d41e      	bmi.n	801194e <_malloc_r+0xc6>
 8011910:	2a0b      	cmp	r2, #11
 8011912:	d916      	bls.n	8011942 <_malloc_r+0xba>
 8011914:	1961      	adds	r1, r4, r5
 8011916:	42a3      	cmp	r3, r4
 8011918:	6025      	str	r5, [r4, #0]
 801191a:	bf18      	it	ne
 801191c:	6059      	strne	r1, [r3, #4]
 801191e:	6863      	ldr	r3, [r4, #4]
 8011920:	bf08      	it	eq
 8011922:	6031      	streq	r1, [r6, #0]
 8011924:	5162      	str	r2, [r4, r5]
 8011926:	604b      	str	r3, [r1, #4]
 8011928:	4638      	mov	r0, r7
 801192a:	f104 060b 	add.w	r6, r4, #11
 801192e:	f000 fd8b 	bl	8012448 <__malloc_unlock>
 8011932:	f026 0607 	bic.w	r6, r6, #7
 8011936:	1d23      	adds	r3, r4, #4
 8011938:	1af2      	subs	r2, r6, r3
 801193a:	d0b6      	beq.n	80118aa <_malloc_r+0x22>
 801193c:	1b9b      	subs	r3, r3, r6
 801193e:	50a3      	str	r3, [r4, r2]
 8011940:	e7b3      	b.n	80118aa <_malloc_r+0x22>
 8011942:	6862      	ldr	r2, [r4, #4]
 8011944:	42a3      	cmp	r3, r4
 8011946:	bf0c      	ite	eq
 8011948:	6032      	streq	r2, [r6, #0]
 801194a:	605a      	strne	r2, [r3, #4]
 801194c:	e7ec      	b.n	8011928 <_malloc_r+0xa0>
 801194e:	4623      	mov	r3, r4
 8011950:	6864      	ldr	r4, [r4, #4]
 8011952:	e7b2      	b.n	80118ba <_malloc_r+0x32>
 8011954:	4634      	mov	r4, r6
 8011956:	6876      	ldr	r6, [r6, #4]
 8011958:	e7b9      	b.n	80118ce <_malloc_r+0x46>
 801195a:	230c      	movs	r3, #12
 801195c:	603b      	str	r3, [r7, #0]
 801195e:	4638      	mov	r0, r7
 8011960:	f000 fd72 	bl	8012448 <__malloc_unlock>
 8011964:	e7a1      	b.n	80118aa <_malloc_r+0x22>
 8011966:	6025      	str	r5, [r4, #0]
 8011968:	e7de      	b.n	8011928 <_malloc_r+0xa0>
 801196a:	bf00      	nop
 801196c:	24008188 	.word	0x24008188

08011970 <__sfputc_r>:
 8011970:	6893      	ldr	r3, [r2, #8]
 8011972:	3b01      	subs	r3, #1
 8011974:	2b00      	cmp	r3, #0
 8011976:	b410      	push	{r4}
 8011978:	6093      	str	r3, [r2, #8]
 801197a:	da08      	bge.n	801198e <__sfputc_r+0x1e>
 801197c:	6994      	ldr	r4, [r2, #24]
 801197e:	42a3      	cmp	r3, r4
 8011980:	db01      	blt.n	8011986 <__sfputc_r+0x16>
 8011982:	290a      	cmp	r1, #10
 8011984:	d103      	bne.n	801198e <__sfputc_r+0x1e>
 8011986:	f85d 4b04 	ldr.w	r4, [sp], #4
 801198a:	f000 bb33 	b.w	8011ff4 <__swbuf_r>
 801198e:	6813      	ldr	r3, [r2, #0]
 8011990:	1c58      	adds	r0, r3, #1
 8011992:	6010      	str	r0, [r2, #0]
 8011994:	7019      	strb	r1, [r3, #0]
 8011996:	4608      	mov	r0, r1
 8011998:	f85d 4b04 	ldr.w	r4, [sp], #4
 801199c:	4770      	bx	lr

0801199e <__sfputs_r>:
 801199e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119a0:	4606      	mov	r6, r0
 80119a2:	460f      	mov	r7, r1
 80119a4:	4614      	mov	r4, r2
 80119a6:	18d5      	adds	r5, r2, r3
 80119a8:	42ac      	cmp	r4, r5
 80119aa:	d101      	bne.n	80119b0 <__sfputs_r+0x12>
 80119ac:	2000      	movs	r0, #0
 80119ae:	e007      	b.n	80119c0 <__sfputs_r+0x22>
 80119b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119b4:	463a      	mov	r2, r7
 80119b6:	4630      	mov	r0, r6
 80119b8:	f7ff ffda 	bl	8011970 <__sfputc_r>
 80119bc:	1c43      	adds	r3, r0, #1
 80119be:	d1f3      	bne.n	80119a8 <__sfputs_r+0xa>
 80119c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080119c4 <_vfiprintf_r>:
 80119c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c8:	460d      	mov	r5, r1
 80119ca:	b09d      	sub	sp, #116	; 0x74
 80119cc:	4614      	mov	r4, r2
 80119ce:	4698      	mov	r8, r3
 80119d0:	4606      	mov	r6, r0
 80119d2:	b118      	cbz	r0, 80119dc <_vfiprintf_r+0x18>
 80119d4:	6983      	ldr	r3, [r0, #24]
 80119d6:	b90b      	cbnz	r3, 80119dc <_vfiprintf_r+0x18>
 80119d8:	f7ff fe30 	bl	801163c <__sinit>
 80119dc:	4b89      	ldr	r3, [pc, #548]	; (8011c04 <_vfiprintf_r+0x240>)
 80119de:	429d      	cmp	r5, r3
 80119e0:	d11b      	bne.n	8011a1a <_vfiprintf_r+0x56>
 80119e2:	6875      	ldr	r5, [r6, #4]
 80119e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119e6:	07d9      	lsls	r1, r3, #31
 80119e8:	d405      	bmi.n	80119f6 <_vfiprintf_r+0x32>
 80119ea:	89ab      	ldrh	r3, [r5, #12]
 80119ec:	059a      	lsls	r2, r3, #22
 80119ee:	d402      	bmi.n	80119f6 <_vfiprintf_r+0x32>
 80119f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119f2:	f7ff fed3 	bl	801179c <__retarget_lock_acquire_recursive>
 80119f6:	89ab      	ldrh	r3, [r5, #12]
 80119f8:	071b      	lsls	r3, r3, #28
 80119fa:	d501      	bpl.n	8011a00 <_vfiprintf_r+0x3c>
 80119fc:	692b      	ldr	r3, [r5, #16]
 80119fe:	b9eb      	cbnz	r3, 8011a3c <_vfiprintf_r+0x78>
 8011a00:	4629      	mov	r1, r5
 8011a02:	4630      	mov	r0, r6
 8011a04:	f000 fb5a 	bl	80120bc <__swsetup_r>
 8011a08:	b1c0      	cbz	r0, 8011a3c <_vfiprintf_r+0x78>
 8011a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a0c:	07dc      	lsls	r4, r3, #31
 8011a0e:	d50e      	bpl.n	8011a2e <_vfiprintf_r+0x6a>
 8011a10:	f04f 30ff 	mov.w	r0, #4294967295
 8011a14:	b01d      	add	sp, #116	; 0x74
 8011a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a1a:	4b7b      	ldr	r3, [pc, #492]	; (8011c08 <_vfiprintf_r+0x244>)
 8011a1c:	429d      	cmp	r5, r3
 8011a1e:	d101      	bne.n	8011a24 <_vfiprintf_r+0x60>
 8011a20:	68b5      	ldr	r5, [r6, #8]
 8011a22:	e7df      	b.n	80119e4 <_vfiprintf_r+0x20>
 8011a24:	4b79      	ldr	r3, [pc, #484]	; (8011c0c <_vfiprintf_r+0x248>)
 8011a26:	429d      	cmp	r5, r3
 8011a28:	bf08      	it	eq
 8011a2a:	68f5      	ldreq	r5, [r6, #12]
 8011a2c:	e7da      	b.n	80119e4 <_vfiprintf_r+0x20>
 8011a2e:	89ab      	ldrh	r3, [r5, #12]
 8011a30:	0598      	lsls	r0, r3, #22
 8011a32:	d4ed      	bmi.n	8011a10 <_vfiprintf_r+0x4c>
 8011a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a36:	f7ff feb2 	bl	801179e <__retarget_lock_release_recursive>
 8011a3a:	e7e9      	b.n	8011a10 <_vfiprintf_r+0x4c>
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8011a40:	2320      	movs	r3, #32
 8011a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a4a:	2330      	movs	r3, #48	; 0x30
 8011a4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011c10 <_vfiprintf_r+0x24c>
 8011a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a54:	f04f 0901 	mov.w	r9, #1
 8011a58:	4623      	mov	r3, r4
 8011a5a:	469a      	mov	sl, r3
 8011a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a60:	b10a      	cbz	r2, 8011a66 <_vfiprintf_r+0xa2>
 8011a62:	2a25      	cmp	r2, #37	; 0x25
 8011a64:	d1f9      	bne.n	8011a5a <_vfiprintf_r+0x96>
 8011a66:	ebba 0b04 	subs.w	fp, sl, r4
 8011a6a:	d00b      	beq.n	8011a84 <_vfiprintf_r+0xc0>
 8011a6c:	465b      	mov	r3, fp
 8011a6e:	4622      	mov	r2, r4
 8011a70:	4629      	mov	r1, r5
 8011a72:	4630      	mov	r0, r6
 8011a74:	f7ff ff93 	bl	801199e <__sfputs_r>
 8011a78:	3001      	adds	r0, #1
 8011a7a:	f000 80aa 	beq.w	8011bd2 <_vfiprintf_r+0x20e>
 8011a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a80:	445a      	add	r2, fp
 8011a82:	9209      	str	r2, [sp, #36]	; 0x24
 8011a84:	f89a 3000 	ldrb.w	r3, [sl]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	f000 80a2 	beq.w	8011bd2 <_vfiprintf_r+0x20e>
 8011a8e:	2300      	movs	r3, #0
 8011a90:	f04f 32ff 	mov.w	r2, #4294967295
 8011a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a98:	f10a 0a01 	add.w	sl, sl, #1
 8011a9c:	9304      	str	r3, [sp, #16]
 8011a9e:	9307      	str	r3, [sp, #28]
 8011aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8011aa6:	4654      	mov	r4, sl
 8011aa8:	2205      	movs	r2, #5
 8011aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aae:	4858      	ldr	r0, [pc, #352]	; (8011c10 <_vfiprintf_r+0x24c>)
 8011ab0:	f7ee fc16 	bl	80002e0 <memchr>
 8011ab4:	9a04      	ldr	r2, [sp, #16]
 8011ab6:	b9d8      	cbnz	r0, 8011af0 <_vfiprintf_r+0x12c>
 8011ab8:	06d1      	lsls	r1, r2, #27
 8011aba:	bf44      	itt	mi
 8011abc:	2320      	movmi	r3, #32
 8011abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ac2:	0713      	lsls	r3, r2, #28
 8011ac4:	bf44      	itt	mi
 8011ac6:	232b      	movmi	r3, #43	; 0x2b
 8011ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011acc:	f89a 3000 	ldrb.w	r3, [sl]
 8011ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8011ad2:	d015      	beq.n	8011b00 <_vfiprintf_r+0x13c>
 8011ad4:	9a07      	ldr	r2, [sp, #28]
 8011ad6:	4654      	mov	r4, sl
 8011ad8:	2000      	movs	r0, #0
 8011ada:	f04f 0c0a 	mov.w	ip, #10
 8011ade:	4621      	mov	r1, r4
 8011ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ae4:	3b30      	subs	r3, #48	; 0x30
 8011ae6:	2b09      	cmp	r3, #9
 8011ae8:	d94e      	bls.n	8011b88 <_vfiprintf_r+0x1c4>
 8011aea:	b1b0      	cbz	r0, 8011b1a <_vfiprintf_r+0x156>
 8011aec:	9207      	str	r2, [sp, #28]
 8011aee:	e014      	b.n	8011b1a <_vfiprintf_r+0x156>
 8011af0:	eba0 0308 	sub.w	r3, r0, r8
 8011af4:	fa09 f303 	lsl.w	r3, r9, r3
 8011af8:	4313      	orrs	r3, r2
 8011afa:	9304      	str	r3, [sp, #16]
 8011afc:	46a2      	mov	sl, r4
 8011afe:	e7d2      	b.n	8011aa6 <_vfiprintf_r+0xe2>
 8011b00:	9b03      	ldr	r3, [sp, #12]
 8011b02:	1d19      	adds	r1, r3, #4
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	9103      	str	r1, [sp, #12]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	bfbb      	ittet	lt
 8011b0c:	425b      	neglt	r3, r3
 8011b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8011b12:	9307      	strge	r3, [sp, #28]
 8011b14:	9307      	strlt	r3, [sp, #28]
 8011b16:	bfb8      	it	lt
 8011b18:	9204      	strlt	r2, [sp, #16]
 8011b1a:	7823      	ldrb	r3, [r4, #0]
 8011b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8011b1e:	d10c      	bne.n	8011b3a <_vfiprintf_r+0x176>
 8011b20:	7863      	ldrb	r3, [r4, #1]
 8011b22:	2b2a      	cmp	r3, #42	; 0x2a
 8011b24:	d135      	bne.n	8011b92 <_vfiprintf_r+0x1ce>
 8011b26:	9b03      	ldr	r3, [sp, #12]
 8011b28:	1d1a      	adds	r2, r3, #4
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	9203      	str	r2, [sp, #12]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	bfb8      	it	lt
 8011b32:	f04f 33ff 	movlt.w	r3, #4294967295
 8011b36:	3402      	adds	r4, #2
 8011b38:	9305      	str	r3, [sp, #20]
 8011b3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011c20 <_vfiprintf_r+0x25c>
 8011b3e:	7821      	ldrb	r1, [r4, #0]
 8011b40:	2203      	movs	r2, #3
 8011b42:	4650      	mov	r0, sl
 8011b44:	f7ee fbcc 	bl	80002e0 <memchr>
 8011b48:	b140      	cbz	r0, 8011b5c <_vfiprintf_r+0x198>
 8011b4a:	2340      	movs	r3, #64	; 0x40
 8011b4c:	eba0 000a 	sub.w	r0, r0, sl
 8011b50:	fa03 f000 	lsl.w	r0, r3, r0
 8011b54:	9b04      	ldr	r3, [sp, #16]
 8011b56:	4303      	orrs	r3, r0
 8011b58:	3401      	adds	r4, #1
 8011b5a:	9304      	str	r3, [sp, #16]
 8011b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b60:	482c      	ldr	r0, [pc, #176]	; (8011c14 <_vfiprintf_r+0x250>)
 8011b62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b66:	2206      	movs	r2, #6
 8011b68:	f7ee fbba 	bl	80002e0 <memchr>
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	d03f      	beq.n	8011bf0 <_vfiprintf_r+0x22c>
 8011b70:	4b29      	ldr	r3, [pc, #164]	; (8011c18 <_vfiprintf_r+0x254>)
 8011b72:	bb1b      	cbnz	r3, 8011bbc <_vfiprintf_r+0x1f8>
 8011b74:	9b03      	ldr	r3, [sp, #12]
 8011b76:	3307      	adds	r3, #7
 8011b78:	f023 0307 	bic.w	r3, r3, #7
 8011b7c:	3308      	adds	r3, #8
 8011b7e:	9303      	str	r3, [sp, #12]
 8011b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b82:	443b      	add	r3, r7
 8011b84:	9309      	str	r3, [sp, #36]	; 0x24
 8011b86:	e767      	b.n	8011a58 <_vfiprintf_r+0x94>
 8011b88:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b8c:	460c      	mov	r4, r1
 8011b8e:	2001      	movs	r0, #1
 8011b90:	e7a5      	b.n	8011ade <_vfiprintf_r+0x11a>
 8011b92:	2300      	movs	r3, #0
 8011b94:	3401      	adds	r4, #1
 8011b96:	9305      	str	r3, [sp, #20]
 8011b98:	4619      	mov	r1, r3
 8011b9a:	f04f 0c0a 	mov.w	ip, #10
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ba4:	3a30      	subs	r2, #48	; 0x30
 8011ba6:	2a09      	cmp	r2, #9
 8011ba8:	d903      	bls.n	8011bb2 <_vfiprintf_r+0x1ee>
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d0c5      	beq.n	8011b3a <_vfiprintf_r+0x176>
 8011bae:	9105      	str	r1, [sp, #20]
 8011bb0:	e7c3      	b.n	8011b3a <_vfiprintf_r+0x176>
 8011bb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e7f0      	b.n	8011b9e <_vfiprintf_r+0x1da>
 8011bbc:	ab03      	add	r3, sp, #12
 8011bbe:	9300      	str	r3, [sp, #0]
 8011bc0:	462a      	mov	r2, r5
 8011bc2:	4b16      	ldr	r3, [pc, #88]	; (8011c1c <_vfiprintf_r+0x258>)
 8011bc4:	a904      	add	r1, sp, #16
 8011bc6:	4630      	mov	r0, r6
 8011bc8:	f3af 8000 	nop.w
 8011bcc:	4607      	mov	r7, r0
 8011bce:	1c78      	adds	r0, r7, #1
 8011bd0:	d1d6      	bne.n	8011b80 <_vfiprintf_r+0x1bc>
 8011bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bd4:	07d9      	lsls	r1, r3, #31
 8011bd6:	d405      	bmi.n	8011be4 <_vfiprintf_r+0x220>
 8011bd8:	89ab      	ldrh	r3, [r5, #12]
 8011bda:	059a      	lsls	r2, r3, #22
 8011bdc:	d402      	bmi.n	8011be4 <_vfiprintf_r+0x220>
 8011bde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011be0:	f7ff fddd 	bl	801179e <__retarget_lock_release_recursive>
 8011be4:	89ab      	ldrh	r3, [r5, #12]
 8011be6:	065b      	lsls	r3, r3, #25
 8011be8:	f53f af12 	bmi.w	8011a10 <_vfiprintf_r+0x4c>
 8011bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011bee:	e711      	b.n	8011a14 <_vfiprintf_r+0x50>
 8011bf0:	ab03      	add	r3, sp, #12
 8011bf2:	9300      	str	r3, [sp, #0]
 8011bf4:	462a      	mov	r2, r5
 8011bf6:	4b09      	ldr	r3, [pc, #36]	; (8011c1c <_vfiprintf_r+0x258>)
 8011bf8:	a904      	add	r1, sp, #16
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f000 f880 	bl	8011d00 <_printf_i>
 8011c00:	e7e4      	b.n	8011bcc <_vfiprintf_r+0x208>
 8011c02:	bf00      	nop
 8011c04:	080153b0 	.word	0x080153b0
 8011c08:	080153d0 	.word	0x080153d0
 8011c0c:	08015390 	.word	0x08015390
 8011c10:	080153f0 	.word	0x080153f0
 8011c14:	080153fa 	.word	0x080153fa
 8011c18:	00000000 	.word	0x00000000
 8011c1c:	0801199f 	.word	0x0801199f
 8011c20:	080153f6 	.word	0x080153f6

08011c24 <_printf_common>:
 8011c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c28:	4616      	mov	r6, r2
 8011c2a:	4699      	mov	r9, r3
 8011c2c:	688a      	ldr	r2, [r1, #8]
 8011c2e:	690b      	ldr	r3, [r1, #16]
 8011c30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c34:	4293      	cmp	r3, r2
 8011c36:	bfb8      	it	lt
 8011c38:	4613      	movlt	r3, r2
 8011c3a:	6033      	str	r3, [r6, #0]
 8011c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c40:	4607      	mov	r7, r0
 8011c42:	460c      	mov	r4, r1
 8011c44:	b10a      	cbz	r2, 8011c4a <_printf_common+0x26>
 8011c46:	3301      	adds	r3, #1
 8011c48:	6033      	str	r3, [r6, #0]
 8011c4a:	6823      	ldr	r3, [r4, #0]
 8011c4c:	0699      	lsls	r1, r3, #26
 8011c4e:	bf42      	ittt	mi
 8011c50:	6833      	ldrmi	r3, [r6, #0]
 8011c52:	3302      	addmi	r3, #2
 8011c54:	6033      	strmi	r3, [r6, #0]
 8011c56:	6825      	ldr	r5, [r4, #0]
 8011c58:	f015 0506 	ands.w	r5, r5, #6
 8011c5c:	d106      	bne.n	8011c6c <_printf_common+0x48>
 8011c5e:	f104 0a19 	add.w	sl, r4, #25
 8011c62:	68e3      	ldr	r3, [r4, #12]
 8011c64:	6832      	ldr	r2, [r6, #0]
 8011c66:	1a9b      	subs	r3, r3, r2
 8011c68:	42ab      	cmp	r3, r5
 8011c6a:	dc26      	bgt.n	8011cba <_printf_common+0x96>
 8011c6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c70:	1e13      	subs	r3, r2, #0
 8011c72:	6822      	ldr	r2, [r4, #0]
 8011c74:	bf18      	it	ne
 8011c76:	2301      	movne	r3, #1
 8011c78:	0692      	lsls	r2, r2, #26
 8011c7a:	d42b      	bmi.n	8011cd4 <_printf_common+0xb0>
 8011c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c80:	4649      	mov	r1, r9
 8011c82:	4638      	mov	r0, r7
 8011c84:	47c0      	blx	r8
 8011c86:	3001      	adds	r0, #1
 8011c88:	d01e      	beq.n	8011cc8 <_printf_common+0xa4>
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	68e5      	ldr	r5, [r4, #12]
 8011c8e:	6832      	ldr	r2, [r6, #0]
 8011c90:	f003 0306 	and.w	r3, r3, #6
 8011c94:	2b04      	cmp	r3, #4
 8011c96:	bf08      	it	eq
 8011c98:	1aad      	subeq	r5, r5, r2
 8011c9a:	68a3      	ldr	r3, [r4, #8]
 8011c9c:	6922      	ldr	r2, [r4, #16]
 8011c9e:	bf0c      	ite	eq
 8011ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ca4:	2500      	movne	r5, #0
 8011ca6:	4293      	cmp	r3, r2
 8011ca8:	bfc4      	itt	gt
 8011caa:	1a9b      	subgt	r3, r3, r2
 8011cac:	18ed      	addgt	r5, r5, r3
 8011cae:	2600      	movs	r6, #0
 8011cb0:	341a      	adds	r4, #26
 8011cb2:	42b5      	cmp	r5, r6
 8011cb4:	d11a      	bne.n	8011cec <_printf_common+0xc8>
 8011cb6:	2000      	movs	r0, #0
 8011cb8:	e008      	b.n	8011ccc <_printf_common+0xa8>
 8011cba:	2301      	movs	r3, #1
 8011cbc:	4652      	mov	r2, sl
 8011cbe:	4649      	mov	r1, r9
 8011cc0:	4638      	mov	r0, r7
 8011cc2:	47c0      	blx	r8
 8011cc4:	3001      	adds	r0, #1
 8011cc6:	d103      	bne.n	8011cd0 <_printf_common+0xac>
 8011cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cd0:	3501      	adds	r5, #1
 8011cd2:	e7c6      	b.n	8011c62 <_printf_common+0x3e>
 8011cd4:	18e1      	adds	r1, r4, r3
 8011cd6:	1c5a      	adds	r2, r3, #1
 8011cd8:	2030      	movs	r0, #48	; 0x30
 8011cda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011cde:	4422      	add	r2, r4
 8011ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011ce4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011ce8:	3302      	adds	r3, #2
 8011cea:	e7c7      	b.n	8011c7c <_printf_common+0x58>
 8011cec:	2301      	movs	r3, #1
 8011cee:	4622      	mov	r2, r4
 8011cf0:	4649      	mov	r1, r9
 8011cf2:	4638      	mov	r0, r7
 8011cf4:	47c0      	blx	r8
 8011cf6:	3001      	adds	r0, #1
 8011cf8:	d0e6      	beq.n	8011cc8 <_printf_common+0xa4>
 8011cfa:	3601      	adds	r6, #1
 8011cfc:	e7d9      	b.n	8011cb2 <_printf_common+0x8e>
	...

08011d00 <_printf_i>:
 8011d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d04:	7e0f      	ldrb	r7, [r1, #24]
 8011d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011d08:	2f78      	cmp	r7, #120	; 0x78
 8011d0a:	4691      	mov	r9, r2
 8011d0c:	4680      	mov	r8, r0
 8011d0e:	460c      	mov	r4, r1
 8011d10:	469a      	mov	sl, r3
 8011d12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011d16:	d807      	bhi.n	8011d28 <_printf_i+0x28>
 8011d18:	2f62      	cmp	r7, #98	; 0x62
 8011d1a:	d80a      	bhi.n	8011d32 <_printf_i+0x32>
 8011d1c:	2f00      	cmp	r7, #0
 8011d1e:	f000 80d8 	beq.w	8011ed2 <_printf_i+0x1d2>
 8011d22:	2f58      	cmp	r7, #88	; 0x58
 8011d24:	f000 80a3 	beq.w	8011e6e <_printf_i+0x16e>
 8011d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011d30:	e03a      	b.n	8011da8 <_printf_i+0xa8>
 8011d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011d36:	2b15      	cmp	r3, #21
 8011d38:	d8f6      	bhi.n	8011d28 <_printf_i+0x28>
 8011d3a:	a101      	add	r1, pc, #4	; (adr r1, 8011d40 <_printf_i+0x40>)
 8011d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d40:	08011d99 	.word	0x08011d99
 8011d44:	08011dad 	.word	0x08011dad
 8011d48:	08011d29 	.word	0x08011d29
 8011d4c:	08011d29 	.word	0x08011d29
 8011d50:	08011d29 	.word	0x08011d29
 8011d54:	08011d29 	.word	0x08011d29
 8011d58:	08011dad 	.word	0x08011dad
 8011d5c:	08011d29 	.word	0x08011d29
 8011d60:	08011d29 	.word	0x08011d29
 8011d64:	08011d29 	.word	0x08011d29
 8011d68:	08011d29 	.word	0x08011d29
 8011d6c:	08011eb9 	.word	0x08011eb9
 8011d70:	08011ddd 	.word	0x08011ddd
 8011d74:	08011e9b 	.word	0x08011e9b
 8011d78:	08011d29 	.word	0x08011d29
 8011d7c:	08011d29 	.word	0x08011d29
 8011d80:	08011edb 	.word	0x08011edb
 8011d84:	08011d29 	.word	0x08011d29
 8011d88:	08011ddd 	.word	0x08011ddd
 8011d8c:	08011d29 	.word	0x08011d29
 8011d90:	08011d29 	.word	0x08011d29
 8011d94:	08011ea3 	.word	0x08011ea3
 8011d98:	682b      	ldr	r3, [r5, #0]
 8011d9a:	1d1a      	adds	r2, r3, #4
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	602a      	str	r2, [r5, #0]
 8011da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011da8:	2301      	movs	r3, #1
 8011daa:	e0a3      	b.n	8011ef4 <_printf_i+0x1f4>
 8011dac:	6820      	ldr	r0, [r4, #0]
 8011dae:	6829      	ldr	r1, [r5, #0]
 8011db0:	0606      	lsls	r6, r0, #24
 8011db2:	f101 0304 	add.w	r3, r1, #4
 8011db6:	d50a      	bpl.n	8011dce <_printf_i+0xce>
 8011db8:	680e      	ldr	r6, [r1, #0]
 8011dba:	602b      	str	r3, [r5, #0]
 8011dbc:	2e00      	cmp	r6, #0
 8011dbe:	da03      	bge.n	8011dc8 <_printf_i+0xc8>
 8011dc0:	232d      	movs	r3, #45	; 0x2d
 8011dc2:	4276      	negs	r6, r6
 8011dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011dc8:	485e      	ldr	r0, [pc, #376]	; (8011f44 <_printf_i+0x244>)
 8011dca:	230a      	movs	r3, #10
 8011dcc:	e019      	b.n	8011e02 <_printf_i+0x102>
 8011dce:	680e      	ldr	r6, [r1, #0]
 8011dd0:	602b      	str	r3, [r5, #0]
 8011dd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011dd6:	bf18      	it	ne
 8011dd8:	b236      	sxthne	r6, r6
 8011dda:	e7ef      	b.n	8011dbc <_printf_i+0xbc>
 8011ddc:	682b      	ldr	r3, [r5, #0]
 8011dde:	6820      	ldr	r0, [r4, #0]
 8011de0:	1d19      	adds	r1, r3, #4
 8011de2:	6029      	str	r1, [r5, #0]
 8011de4:	0601      	lsls	r1, r0, #24
 8011de6:	d501      	bpl.n	8011dec <_printf_i+0xec>
 8011de8:	681e      	ldr	r6, [r3, #0]
 8011dea:	e002      	b.n	8011df2 <_printf_i+0xf2>
 8011dec:	0646      	lsls	r6, r0, #25
 8011dee:	d5fb      	bpl.n	8011de8 <_printf_i+0xe8>
 8011df0:	881e      	ldrh	r6, [r3, #0]
 8011df2:	4854      	ldr	r0, [pc, #336]	; (8011f44 <_printf_i+0x244>)
 8011df4:	2f6f      	cmp	r7, #111	; 0x6f
 8011df6:	bf0c      	ite	eq
 8011df8:	2308      	moveq	r3, #8
 8011dfa:	230a      	movne	r3, #10
 8011dfc:	2100      	movs	r1, #0
 8011dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e02:	6865      	ldr	r5, [r4, #4]
 8011e04:	60a5      	str	r5, [r4, #8]
 8011e06:	2d00      	cmp	r5, #0
 8011e08:	bfa2      	ittt	ge
 8011e0a:	6821      	ldrge	r1, [r4, #0]
 8011e0c:	f021 0104 	bicge.w	r1, r1, #4
 8011e10:	6021      	strge	r1, [r4, #0]
 8011e12:	b90e      	cbnz	r6, 8011e18 <_printf_i+0x118>
 8011e14:	2d00      	cmp	r5, #0
 8011e16:	d04d      	beq.n	8011eb4 <_printf_i+0x1b4>
 8011e18:	4615      	mov	r5, r2
 8011e1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011e1e:	fb03 6711 	mls	r7, r3, r1, r6
 8011e22:	5dc7      	ldrb	r7, [r0, r7]
 8011e24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011e28:	4637      	mov	r7, r6
 8011e2a:	42bb      	cmp	r3, r7
 8011e2c:	460e      	mov	r6, r1
 8011e2e:	d9f4      	bls.n	8011e1a <_printf_i+0x11a>
 8011e30:	2b08      	cmp	r3, #8
 8011e32:	d10b      	bne.n	8011e4c <_printf_i+0x14c>
 8011e34:	6823      	ldr	r3, [r4, #0]
 8011e36:	07de      	lsls	r6, r3, #31
 8011e38:	d508      	bpl.n	8011e4c <_printf_i+0x14c>
 8011e3a:	6923      	ldr	r3, [r4, #16]
 8011e3c:	6861      	ldr	r1, [r4, #4]
 8011e3e:	4299      	cmp	r1, r3
 8011e40:	bfde      	ittt	le
 8011e42:	2330      	movle	r3, #48	; 0x30
 8011e44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011e48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011e4c:	1b52      	subs	r2, r2, r5
 8011e4e:	6122      	str	r2, [r4, #16]
 8011e50:	f8cd a000 	str.w	sl, [sp]
 8011e54:	464b      	mov	r3, r9
 8011e56:	aa03      	add	r2, sp, #12
 8011e58:	4621      	mov	r1, r4
 8011e5a:	4640      	mov	r0, r8
 8011e5c:	f7ff fee2 	bl	8011c24 <_printf_common>
 8011e60:	3001      	adds	r0, #1
 8011e62:	d14c      	bne.n	8011efe <_printf_i+0x1fe>
 8011e64:	f04f 30ff 	mov.w	r0, #4294967295
 8011e68:	b004      	add	sp, #16
 8011e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6e:	4835      	ldr	r0, [pc, #212]	; (8011f44 <_printf_i+0x244>)
 8011e70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011e74:	6829      	ldr	r1, [r5, #0]
 8011e76:	6823      	ldr	r3, [r4, #0]
 8011e78:	f851 6b04 	ldr.w	r6, [r1], #4
 8011e7c:	6029      	str	r1, [r5, #0]
 8011e7e:	061d      	lsls	r5, r3, #24
 8011e80:	d514      	bpl.n	8011eac <_printf_i+0x1ac>
 8011e82:	07df      	lsls	r7, r3, #31
 8011e84:	bf44      	itt	mi
 8011e86:	f043 0320 	orrmi.w	r3, r3, #32
 8011e8a:	6023      	strmi	r3, [r4, #0]
 8011e8c:	b91e      	cbnz	r6, 8011e96 <_printf_i+0x196>
 8011e8e:	6823      	ldr	r3, [r4, #0]
 8011e90:	f023 0320 	bic.w	r3, r3, #32
 8011e94:	6023      	str	r3, [r4, #0]
 8011e96:	2310      	movs	r3, #16
 8011e98:	e7b0      	b.n	8011dfc <_printf_i+0xfc>
 8011e9a:	6823      	ldr	r3, [r4, #0]
 8011e9c:	f043 0320 	orr.w	r3, r3, #32
 8011ea0:	6023      	str	r3, [r4, #0]
 8011ea2:	2378      	movs	r3, #120	; 0x78
 8011ea4:	4828      	ldr	r0, [pc, #160]	; (8011f48 <_printf_i+0x248>)
 8011ea6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011eaa:	e7e3      	b.n	8011e74 <_printf_i+0x174>
 8011eac:	0659      	lsls	r1, r3, #25
 8011eae:	bf48      	it	mi
 8011eb0:	b2b6      	uxthmi	r6, r6
 8011eb2:	e7e6      	b.n	8011e82 <_printf_i+0x182>
 8011eb4:	4615      	mov	r5, r2
 8011eb6:	e7bb      	b.n	8011e30 <_printf_i+0x130>
 8011eb8:	682b      	ldr	r3, [r5, #0]
 8011eba:	6826      	ldr	r6, [r4, #0]
 8011ebc:	6961      	ldr	r1, [r4, #20]
 8011ebe:	1d18      	adds	r0, r3, #4
 8011ec0:	6028      	str	r0, [r5, #0]
 8011ec2:	0635      	lsls	r5, r6, #24
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	d501      	bpl.n	8011ecc <_printf_i+0x1cc>
 8011ec8:	6019      	str	r1, [r3, #0]
 8011eca:	e002      	b.n	8011ed2 <_printf_i+0x1d2>
 8011ecc:	0670      	lsls	r0, r6, #25
 8011ece:	d5fb      	bpl.n	8011ec8 <_printf_i+0x1c8>
 8011ed0:	8019      	strh	r1, [r3, #0]
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	6123      	str	r3, [r4, #16]
 8011ed6:	4615      	mov	r5, r2
 8011ed8:	e7ba      	b.n	8011e50 <_printf_i+0x150>
 8011eda:	682b      	ldr	r3, [r5, #0]
 8011edc:	1d1a      	adds	r2, r3, #4
 8011ede:	602a      	str	r2, [r5, #0]
 8011ee0:	681d      	ldr	r5, [r3, #0]
 8011ee2:	6862      	ldr	r2, [r4, #4]
 8011ee4:	2100      	movs	r1, #0
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	f7ee f9fa 	bl	80002e0 <memchr>
 8011eec:	b108      	cbz	r0, 8011ef2 <_printf_i+0x1f2>
 8011eee:	1b40      	subs	r0, r0, r5
 8011ef0:	6060      	str	r0, [r4, #4]
 8011ef2:	6863      	ldr	r3, [r4, #4]
 8011ef4:	6123      	str	r3, [r4, #16]
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011efc:	e7a8      	b.n	8011e50 <_printf_i+0x150>
 8011efe:	6923      	ldr	r3, [r4, #16]
 8011f00:	462a      	mov	r2, r5
 8011f02:	4649      	mov	r1, r9
 8011f04:	4640      	mov	r0, r8
 8011f06:	47d0      	blx	sl
 8011f08:	3001      	adds	r0, #1
 8011f0a:	d0ab      	beq.n	8011e64 <_printf_i+0x164>
 8011f0c:	6823      	ldr	r3, [r4, #0]
 8011f0e:	079b      	lsls	r3, r3, #30
 8011f10:	d413      	bmi.n	8011f3a <_printf_i+0x23a>
 8011f12:	68e0      	ldr	r0, [r4, #12]
 8011f14:	9b03      	ldr	r3, [sp, #12]
 8011f16:	4298      	cmp	r0, r3
 8011f18:	bfb8      	it	lt
 8011f1a:	4618      	movlt	r0, r3
 8011f1c:	e7a4      	b.n	8011e68 <_printf_i+0x168>
 8011f1e:	2301      	movs	r3, #1
 8011f20:	4632      	mov	r2, r6
 8011f22:	4649      	mov	r1, r9
 8011f24:	4640      	mov	r0, r8
 8011f26:	47d0      	blx	sl
 8011f28:	3001      	adds	r0, #1
 8011f2a:	d09b      	beq.n	8011e64 <_printf_i+0x164>
 8011f2c:	3501      	adds	r5, #1
 8011f2e:	68e3      	ldr	r3, [r4, #12]
 8011f30:	9903      	ldr	r1, [sp, #12]
 8011f32:	1a5b      	subs	r3, r3, r1
 8011f34:	42ab      	cmp	r3, r5
 8011f36:	dcf2      	bgt.n	8011f1e <_printf_i+0x21e>
 8011f38:	e7eb      	b.n	8011f12 <_printf_i+0x212>
 8011f3a:	2500      	movs	r5, #0
 8011f3c:	f104 0619 	add.w	r6, r4, #25
 8011f40:	e7f5      	b.n	8011f2e <_printf_i+0x22e>
 8011f42:	bf00      	nop
 8011f44:	08015401 	.word	0x08015401
 8011f48:	08015412 	.word	0x08015412

08011f4c <_sbrk_r>:
 8011f4c:	b538      	push	{r3, r4, r5, lr}
 8011f4e:	4d06      	ldr	r5, [pc, #24]	; (8011f68 <_sbrk_r+0x1c>)
 8011f50:	2300      	movs	r3, #0
 8011f52:	4604      	mov	r4, r0
 8011f54:	4608      	mov	r0, r1
 8011f56:	602b      	str	r3, [r5, #0]
 8011f58:	f7ef f8c2 	bl	80010e0 <_sbrk>
 8011f5c:	1c43      	adds	r3, r0, #1
 8011f5e:	d102      	bne.n	8011f66 <_sbrk_r+0x1a>
 8011f60:	682b      	ldr	r3, [r5, #0]
 8011f62:	b103      	cbz	r3, 8011f66 <_sbrk_r+0x1a>
 8011f64:	6023      	str	r3, [r4, #0]
 8011f66:	bd38      	pop	{r3, r4, r5, pc}
 8011f68:	24008180 	.word	0x24008180

08011f6c <__sread>:
 8011f6c:	b510      	push	{r4, lr}
 8011f6e:	460c      	mov	r4, r1
 8011f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f74:	f000 fa6e 	bl	8012454 <_read_r>
 8011f78:	2800      	cmp	r0, #0
 8011f7a:	bfab      	itete	ge
 8011f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8011f80:	181b      	addge	r3, r3, r0
 8011f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f86:	bfac      	ite	ge
 8011f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f8a:	81a3      	strhlt	r3, [r4, #12]
 8011f8c:	bd10      	pop	{r4, pc}

08011f8e <__swrite>:
 8011f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f92:	461f      	mov	r7, r3
 8011f94:	898b      	ldrh	r3, [r1, #12]
 8011f96:	05db      	lsls	r3, r3, #23
 8011f98:	4605      	mov	r5, r0
 8011f9a:	460c      	mov	r4, r1
 8011f9c:	4616      	mov	r6, r2
 8011f9e:	d505      	bpl.n	8011fac <__swrite+0x1e>
 8011fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fa4:	2302      	movs	r3, #2
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	f000 f9d0 	bl	801234c <_lseek_r>
 8011fac:	89a3      	ldrh	r3, [r4, #12]
 8011fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011fb6:	81a3      	strh	r3, [r4, #12]
 8011fb8:	4632      	mov	r2, r6
 8011fba:	463b      	mov	r3, r7
 8011fbc:	4628      	mov	r0, r5
 8011fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc2:	f000 b869 	b.w	8012098 <_write_r>

08011fc6 <__sseek>:
 8011fc6:	b510      	push	{r4, lr}
 8011fc8:	460c      	mov	r4, r1
 8011fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fce:	f000 f9bd 	bl	801234c <_lseek_r>
 8011fd2:	1c43      	adds	r3, r0, #1
 8011fd4:	89a3      	ldrh	r3, [r4, #12]
 8011fd6:	bf15      	itete	ne
 8011fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011fe2:	81a3      	strheq	r3, [r4, #12]
 8011fe4:	bf18      	it	ne
 8011fe6:	81a3      	strhne	r3, [r4, #12]
 8011fe8:	bd10      	pop	{r4, pc}

08011fea <__sclose>:
 8011fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fee:	f000 b8db 	b.w	80121a8 <_close_r>
	...

08011ff4 <__swbuf_r>:
 8011ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ff6:	460e      	mov	r6, r1
 8011ff8:	4614      	mov	r4, r2
 8011ffa:	4605      	mov	r5, r0
 8011ffc:	b118      	cbz	r0, 8012006 <__swbuf_r+0x12>
 8011ffe:	6983      	ldr	r3, [r0, #24]
 8012000:	b90b      	cbnz	r3, 8012006 <__swbuf_r+0x12>
 8012002:	f7ff fb1b 	bl	801163c <__sinit>
 8012006:	4b21      	ldr	r3, [pc, #132]	; (801208c <__swbuf_r+0x98>)
 8012008:	429c      	cmp	r4, r3
 801200a:	d12b      	bne.n	8012064 <__swbuf_r+0x70>
 801200c:	686c      	ldr	r4, [r5, #4]
 801200e:	69a3      	ldr	r3, [r4, #24]
 8012010:	60a3      	str	r3, [r4, #8]
 8012012:	89a3      	ldrh	r3, [r4, #12]
 8012014:	071a      	lsls	r2, r3, #28
 8012016:	d52f      	bpl.n	8012078 <__swbuf_r+0x84>
 8012018:	6923      	ldr	r3, [r4, #16]
 801201a:	b36b      	cbz	r3, 8012078 <__swbuf_r+0x84>
 801201c:	6923      	ldr	r3, [r4, #16]
 801201e:	6820      	ldr	r0, [r4, #0]
 8012020:	1ac0      	subs	r0, r0, r3
 8012022:	6963      	ldr	r3, [r4, #20]
 8012024:	b2f6      	uxtb	r6, r6
 8012026:	4283      	cmp	r3, r0
 8012028:	4637      	mov	r7, r6
 801202a:	dc04      	bgt.n	8012036 <__swbuf_r+0x42>
 801202c:	4621      	mov	r1, r4
 801202e:	4628      	mov	r0, r5
 8012030:	f000 f950 	bl	80122d4 <_fflush_r>
 8012034:	bb30      	cbnz	r0, 8012084 <__swbuf_r+0x90>
 8012036:	68a3      	ldr	r3, [r4, #8]
 8012038:	3b01      	subs	r3, #1
 801203a:	60a3      	str	r3, [r4, #8]
 801203c:	6823      	ldr	r3, [r4, #0]
 801203e:	1c5a      	adds	r2, r3, #1
 8012040:	6022      	str	r2, [r4, #0]
 8012042:	701e      	strb	r6, [r3, #0]
 8012044:	6963      	ldr	r3, [r4, #20]
 8012046:	3001      	adds	r0, #1
 8012048:	4283      	cmp	r3, r0
 801204a:	d004      	beq.n	8012056 <__swbuf_r+0x62>
 801204c:	89a3      	ldrh	r3, [r4, #12]
 801204e:	07db      	lsls	r3, r3, #31
 8012050:	d506      	bpl.n	8012060 <__swbuf_r+0x6c>
 8012052:	2e0a      	cmp	r6, #10
 8012054:	d104      	bne.n	8012060 <__swbuf_r+0x6c>
 8012056:	4621      	mov	r1, r4
 8012058:	4628      	mov	r0, r5
 801205a:	f000 f93b 	bl	80122d4 <_fflush_r>
 801205e:	b988      	cbnz	r0, 8012084 <__swbuf_r+0x90>
 8012060:	4638      	mov	r0, r7
 8012062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012064:	4b0a      	ldr	r3, [pc, #40]	; (8012090 <__swbuf_r+0x9c>)
 8012066:	429c      	cmp	r4, r3
 8012068:	d101      	bne.n	801206e <__swbuf_r+0x7a>
 801206a:	68ac      	ldr	r4, [r5, #8]
 801206c:	e7cf      	b.n	801200e <__swbuf_r+0x1a>
 801206e:	4b09      	ldr	r3, [pc, #36]	; (8012094 <__swbuf_r+0xa0>)
 8012070:	429c      	cmp	r4, r3
 8012072:	bf08      	it	eq
 8012074:	68ec      	ldreq	r4, [r5, #12]
 8012076:	e7ca      	b.n	801200e <__swbuf_r+0x1a>
 8012078:	4621      	mov	r1, r4
 801207a:	4628      	mov	r0, r5
 801207c:	f000 f81e 	bl	80120bc <__swsetup_r>
 8012080:	2800      	cmp	r0, #0
 8012082:	d0cb      	beq.n	801201c <__swbuf_r+0x28>
 8012084:	f04f 37ff 	mov.w	r7, #4294967295
 8012088:	e7ea      	b.n	8012060 <__swbuf_r+0x6c>
 801208a:	bf00      	nop
 801208c:	080153b0 	.word	0x080153b0
 8012090:	080153d0 	.word	0x080153d0
 8012094:	08015390 	.word	0x08015390

08012098 <_write_r>:
 8012098:	b538      	push	{r3, r4, r5, lr}
 801209a:	4d07      	ldr	r5, [pc, #28]	; (80120b8 <_write_r+0x20>)
 801209c:	4604      	mov	r4, r0
 801209e:	4608      	mov	r0, r1
 80120a0:	4611      	mov	r1, r2
 80120a2:	2200      	movs	r2, #0
 80120a4:	602a      	str	r2, [r5, #0]
 80120a6:	461a      	mov	r2, r3
 80120a8:	f7ee fdb8 	bl	8000c1c <_write>
 80120ac:	1c43      	adds	r3, r0, #1
 80120ae:	d102      	bne.n	80120b6 <_write_r+0x1e>
 80120b0:	682b      	ldr	r3, [r5, #0]
 80120b2:	b103      	cbz	r3, 80120b6 <_write_r+0x1e>
 80120b4:	6023      	str	r3, [r4, #0]
 80120b6:	bd38      	pop	{r3, r4, r5, pc}
 80120b8:	24008180 	.word	0x24008180

080120bc <__swsetup_r>:
 80120bc:	4b32      	ldr	r3, [pc, #200]	; (8012188 <__swsetup_r+0xcc>)
 80120be:	b570      	push	{r4, r5, r6, lr}
 80120c0:	681d      	ldr	r5, [r3, #0]
 80120c2:	4606      	mov	r6, r0
 80120c4:	460c      	mov	r4, r1
 80120c6:	b125      	cbz	r5, 80120d2 <__swsetup_r+0x16>
 80120c8:	69ab      	ldr	r3, [r5, #24]
 80120ca:	b913      	cbnz	r3, 80120d2 <__swsetup_r+0x16>
 80120cc:	4628      	mov	r0, r5
 80120ce:	f7ff fab5 	bl	801163c <__sinit>
 80120d2:	4b2e      	ldr	r3, [pc, #184]	; (801218c <__swsetup_r+0xd0>)
 80120d4:	429c      	cmp	r4, r3
 80120d6:	d10f      	bne.n	80120f8 <__swsetup_r+0x3c>
 80120d8:	686c      	ldr	r4, [r5, #4]
 80120da:	89a3      	ldrh	r3, [r4, #12]
 80120dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120e0:	0719      	lsls	r1, r3, #28
 80120e2:	d42c      	bmi.n	801213e <__swsetup_r+0x82>
 80120e4:	06dd      	lsls	r5, r3, #27
 80120e6:	d411      	bmi.n	801210c <__swsetup_r+0x50>
 80120e8:	2309      	movs	r3, #9
 80120ea:	6033      	str	r3, [r6, #0]
 80120ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80120f0:	81a3      	strh	r3, [r4, #12]
 80120f2:	f04f 30ff 	mov.w	r0, #4294967295
 80120f6:	e03e      	b.n	8012176 <__swsetup_r+0xba>
 80120f8:	4b25      	ldr	r3, [pc, #148]	; (8012190 <__swsetup_r+0xd4>)
 80120fa:	429c      	cmp	r4, r3
 80120fc:	d101      	bne.n	8012102 <__swsetup_r+0x46>
 80120fe:	68ac      	ldr	r4, [r5, #8]
 8012100:	e7eb      	b.n	80120da <__swsetup_r+0x1e>
 8012102:	4b24      	ldr	r3, [pc, #144]	; (8012194 <__swsetup_r+0xd8>)
 8012104:	429c      	cmp	r4, r3
 8012106:	bf08      	it	eq
 8012108:	68ec      	ldreq	r4, [r5, #12]
 801210a:	e7e6      	b.n	80120da <__swsetup_r+0x1e>
 801210c:	0758      	lsls	r0, r3, #29
 801210e:	d512      	bpl.n	8012136 <__swsetup_r+0x7a>
 8012110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012112:	b141      	cbz	r1, 8012126 <__swsetup_r+0x6a>
 8012114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012118:	4299      	cmp	r1, r3
 801211a:	d002      	beq.n	8012122 <__swsetup_r+0x66>
 801211c:	4630      	mov	r0, r6
 801211e:	f7ff fb47 	bl	80117b0 <_free_r>
 8012122:	2300      	movs	r3, #0
 8012124:	6363      	str	r3, [r4, #52]	; 0x34
 8012126:	89a3      	ldrh	r3, [r4, #12]
 8012128:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801212c:	81a3      	strh	r3, [r4, #12]
 801212e:	2300      	movs	r3, #0
 8012130:	6063      	str	r3, [r4, #4]
 8012132:	6923      	ldr	r3, [r4, #16]
 8012134:	6023      	str	r3, [r4, #0]
 8012136:	89a3      	ldrh	r3, [r4, #12]
 8012138:	f043 0308 	orr.w	r3, r3, #8
 801213c:	81a3      	strh	r3, [r4, #12]
 801213e:	6923      	ldr	r3, [r4, #16]
 8012140:	b94b      	cbnz	r3, 8012156 <__swsetup_r+0x9a>
 8012142:	89a3      	ldrh	r3, [r4, #12]
 8012144:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801214c:	d003      	beq.n	8012156 <__swsetup_r+0x9a>
 801214e:	4621      	mov	r1, r4
 8012150:	4630      	mov	r0, r6
 8012152:	f000 f933 	bl	80123bc <__smakebuf_r>
 8012156:	89a0      	ldrh	r0, [r4, #12]
 8012158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801215c:	f010 0301 	ands.w	r3, r0, #1
 8012160:	d00a      	beq.n	8012178 <__swsetup_r+0xbc>
 8012162:	2300      	movs	r3, #0
 8012164:	60a3      	str	r3, [r4, #8]
 8012166:	6963      	ldr	r3, [r4, #20]
 8012168:	425b      	negs	r3, r3
 801216a:	61a3      	str	r3, [r4, #24]
 801216c:	6923      	ldr	r3, [r4, #16]
 801216e:	b943      	cbnz	r3, 8012182 <__swsetup_r+0xc6>
 8012170:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012174:	d1ba      	bne.n	80120ec <__swsetup_r+0x30>
 8012176:	bd70      	pop	{r4, r5, r6, pc}
 8012178:	0781      	lsls	r1, r0, #30
 801217a:	bf58      	it	pl
 801217c:	6963      	ldrpl	r3, [r4, #20]
 801217e:	60a3      	str	r3, [r4, #8]
 8012180:	e7f4      	b.n	801216c <__swsetup_r+0xb0>
 8012182:	2000      	movs	r0, #0
 8012184:	e7f7      	b.n	8012176 <__swsetup_r+0xba>
 8012186:	bf00      	nop
 8012188:	24000018 	.word	0x24000018
 801218c:	080153b0 	.word	0x080153b0
 8012190:	080153d0 	.word	0x080153d0
 8012194:	08015390 	.word	0x08015390

08012198 <abort>:
 8012198:	b508      	push	{r3, lr}
 801219a:	2006      	movs	r0, #6
 801219c:	f000 f994 	bl	80124c8 <raise>
 80121a0:	2001      	movs	r0, #1
 80121a2:	f7ee ff41 	bl	8001028 <_exit>
	...

080121a8 <_close_r>:
 80121a8:	b538      	push	{r3, r4, r5, lr}
 80121aa:	4d06      	ldr	r5, [pc, #24]	; (80121c4 <_close_r+0x1c>)
 80121ac:	2300      	movs	r3, #0
 80121ae:	4604      	mov	r4, r0
 80121b0:	4608      	mov	r0, r1
 80121b2:	602b      	str	r3, [r5, #0]
 80121b4:	f7ee ff5f 	bl	8001076 <_close>
 80121b8:	1c43      	adds	r3, r0, #1
 80121ba:	d102      	bne.n	80121c2 <_close_r+0x1a>
 80121bc:	682b      	ldr	r3, [r5, #0]
 80121be:	b103      	cbz	r3, 80121c2 <_close_r+0x1a>
 80121c0:	6023      	str	r3, [r4, #0]
 80121c2:	bd38      	pop	{r3, r4, r5, pc}
 80121c4:	24008180 	.word	0x24008180

080121c8 <__sflush_r>:
 80121c8:	898a      	ldrh	r2, [r1, #12]
 80121ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ce:	4605      	mov	r5, r0
 80121d0:	0710      	lsls	r0, r2, #28
 80121d2:	460c      	mov	r4, r1
 80121d4:	d458      	bmi.n	8012288 <__sflush_r+0xc0>
 80121d6:	684b      	ldr	r3, [r1, #4]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	dc05      	bgt.n	80121e8 <__sflush_r+0x20>
 80121dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80121de:	2b00      	cmp	r3, #0
 80121e0:	dc02      	bgt.n	80121e8 <__sflush_r+0x20>
 80121e2:	2000      	movs	r0, #0
 80121e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121ea:	2e00      	cmp	r6, #0
 80121ec:	d0f9      	beq.n	80121e2 <__sflush_r+0x1a>
 80121ee:	2300      	movs	r3, #0
 80121f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80121f4:	682f      	ldr	r7, [r5, #0]
 80121f6:	602b      	str	r3, [r5, #0]
 80121f8:	d032      	beq.n	8012260 <__sflush_r+0x98>
 80121fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80121fc:	89a3      	ldrh	r3, [r4, #12]
 80121fe:	075a      	lsls	r2, r3, #29
 8012200:	d505      	bpl.n	801220e <__sflush_r+0x46>
 8012202:	6863      	ldr	r3, [r4, #4]
 8012204:	1ac0      	subs	r0, r0, r3
 8012206:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012208:	b10b      	cbz	r3, 801220e <__sflush_r+0x46>
 801220a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801220c:	1ac0      	subs	r0, r0, r3
 801220e:	2300      	movs	r3, #0
 8012210:	4602      	mov	r2, r0
 8012212:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012214:	6a21      	ldr	r1, [r4, #32]
 8012216:	4628      	mov	r0, r5
 8012218:	47b0      	blx	r6
 801221a:	1c43      	adds	r3, r0, #1
 801221c:	89a3      	ldrh	r3, [r4, #12]
 801221e:	d106      	bne.n	801222e <__sflush_r+0x66>
 8012220:	6829      	ldr	r1, [r5, #0]
 8012222:	291d      	cmp	r1, #29
 8012224:	d82c      	bhi.n	8012280 <__sflush_r+0xb8>
 8012226:	4a2a      	ldr	r2, [pc, #168]	; (80122d0 <__sflush_r+0x108>)
 8012228:	40ca      	lsrs	r2, r1
 801222a:	07d6      	lsls	r6, r2, #31
 801222c:	d528      	bpl.n	8012280 <__sflush_r+0xb8>
 801222e:	2200      	movs	r2, #0
 8012230:	6062      	str	r2, [r4, #4]
 8012232:	04d9      	lsls	r1, r3, #19
 8012234:	6922      	ldr	r2, [r4, #16]
 8012236:	6022      	str	r2, [r4, #0]
 8012238:	d504      	bpl.n	8012244 <__sflush_r+0x7c>
 801223a:	1c42      	adds	r2, r0, #1
 801223c:	d101      	bne.n	8012242 <__sflush_r+0x7a>
 801223e:	682b      	ldr	r3, [r5, #0]
 8012240:	b903      	cbnz	r3, 8012244 <__sflush_r+0x7c>
 8012242:	6560      	str	r0, [r4, #84]	; 0x54
 8012244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012246:	602f      	str	r7, [r5, #0]
 8012248:	2900      	cmp	r1, #0
 801224a:	d0ca      	beq.n	80121e2 <__sflush_r+0x1a>
 801224c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012250:	4299      	cmp	r1, r3
 8012252:	d002      	beq.n	801225a <__sflush_r+0x92>
 8012254:	4628      	mov	r0, r5
 8012256:	f7ff faab 	bl	80117b0 <_free_r>
 801225a:	2000      	movs	r0, #0
 801225c:	6360      	str	r0, [r4, #52]	; 0x34
 801225e:	e7c1      	b.n	80121e4 <__sflush_r+0x1c>
 8012260:	6a21      	ldr	r1, [r4, #32]
 8012262:	2301      	movs	r3, #1
 8012264:	4628      	mov	r0, r5
 8012266:	47b0      	blx	r6
 8012268:	1c41      	adds	r1, r0, #1
 801226a:	d1c7      	bne.n	80121fc <__sflush_r+0x34>
 801226c:	682b      	ldr	r3, [r5, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d0c4      	beq.n	80121fc <__sflush_r+0x34>
 8012272:	2b1d      	cmp	r3, #29
 8012274:	d001      	beq.n	801227a <__sflush_r+0xb2>
 8012276:	2b16      	cmp	r3, #22
 8012278:	d101      	bne.n	801227e <__sflush_r+0xb6>
 801227a:	602f      	str	r7, [r5, #0]
 801227c:	e7b1      	b.n	80121e2 <__sflush_r+0x1a>
 801227e:	89a3      	ldrh	r3, [r4, #12]
 8012280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012284:	81a3      	strh	r3, [r4, #12]
 8012286:	e7ad      	b.n	80121e4 <__sflush_r+0x1c>
 8012288:	690f      	ldr	r7, [r1, #16]
 801228a:	2f00      	cmp	r7, #0
 801228c:	d0a9      	beq.n	80121e2 <__sflush_r+0x1a>
 801228e:	0793      	lsls	r3, r2, #30
 8012290:	680e      	ldr	r6, [r1, #0]
 8012292:	bf08      	it	eq
 8012294:	694b      	ldreq	r3, [r1, #20]
 8012296:	600f      	str	r7, [r1, #0]
 8012298:	bf18      	it	ne
 801229a:	2300      	movne	r3, #0
 801229c:	eba6 0807 	sub.w	r8, r6, r7
 80122a0:	608b      	str	r3, [r1, #8]
 80122a2:	f1b8 0f00 	cmp.w	r8, #0
 80122a6:	dd9c      	ble.n	80121e2 <__sflush_r+0x1a>
 80122a8:	6a21      	ldr	r1, [r4, #32]
 80122aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80122ac:	4643      	mov	r3, r8
 80122ae:	463a      	mov	r2, r7
 80122b0:	4628      	mov	r0, r5
 80122b2:	47b0      	blx	r6
 80122b4:	2800      	cmp	r0, #0
 80122b6:	dc06      	bgt.n	80122c6 <__sflush_r+0xfe>
 80122b8:	89a3      	ldrh	r3, [r4, #12]
 80122ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122be:	81a3      	strh	r3, [r4, #12]
 80122c0:	f04f 30ff 	mov.w	r0, #4294967295
 80122c4:	e78e      	b.n	80121e4 <__sflush_r+0x1c>
 80122c6:	4407      	add	r7, r0
 80122c8:	eba8 0800 	sub.w	r8, r8, r0
 80122cc:	e7e9      	b.n	80122a2 <__sflush_r+0xda>
 80122ce:	bf00      	nop
 80122d0:	20400001 	.word	0x20400001

080122d4 <_fflush_r>:
 80122d4:	b538      	push	{r3, r4, r5, lr}
 80122d6:	690b      	ldr	r3, [r1, #16]
 80122d8:	4605      	mov	r5, r0
 80122da:	460c      	mov	r4, r1
 80122dc:	b913      	cbnz	r3, 80122e4 <_fflush_r+0x10>
 80122de:	2500      	movs	r5, #0
 80122e0:	4628      	mov	r0, r5
 80122e2:	bd38      	pop	{r3, r4, r5, pc}
 80122e4:	b118      	cbz	r0, 80122ee <_fflush_r+0x1a>
 80122e6:	6983      	ldr	r3, [r0, #24]
 80122e8:	b90b      	cbnz	r3, 80122ee <_fflush_r+0x1a>
 80122ea:	f7ff f9a7 	bl	801163c <__sinit>
 80122ee:	4b14      	ldr	r3, [pc, #80]	; (8012340 <_fflush_r+0x6c>)
 80122f0:	429c      	cmp	r4, r3
 80122f2:	d11b      	bne.n	801232c <_fflush_r+0x58>
 80122f4:	686c      	ldr	r4, [r5, #4]
 80122f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d0ef      	beq.n	80122de <_fflush_r+0xa>
 80122fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012300:	07d0      	lsls	r0, r2, #31
 8012302:	d404      	bmi.n	801230e <_fflush_r+0x3a>
 8012304:	0599      	lsls	r1, r3, #22
 8012306:	d402      	bmi.n	801230e <_fflush_r+0x3a>
 8012308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801230a:	f7ff fa47 	bl	801179c <__retarget_lock_acquire_recursive>
 801230e:	4628      	mov	r0, r5
 8012310:	4621      	mov	r1, r4
 8012312:	f7ff ff59 	bl	80121c8 <__sflush_r>
 8012316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012318:	07da      	lsls	r2, r3, #31
 801231a:	4605      	mov	r5, r0
 801231c:	d4e0      	bmi.n	80122e0 <_fflush_r+0xc>
 801231e:	89a3      	ldrh	r3, [r4, #12]
 8012320:	059b      	lsls	r3, r3, #22
 8012322:	d4dd      	bmi.n	80122e0 <_fflush_r+0xc>
 8012324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012326:	f7ff fa3a 	bl	801179e <__retarget_lock_release_recursive>
 801232a:	e7d9      	b.n	80122e0 <_fflush_r+0xc>
 801232c:	4b05      	ldr	r3, [pc, #20]	; (8012344 <_fflush_r+0x70>)
 801232e:	429c      	cmp	r4, r3
 8012330:	d101      	bne.n	8012336 <_fflush_r+0x62>
 8012332:	68ac      	ldr	r4, [r5, #8]
 8012334:	e7df      	b.n	80122f6 <_fflush_r+0x22>
 8012336:	4b04      	ldr	r3, [pc, #16]	; (8012348 <_fflush_r+0x74>)
 8012338:	429c      	cmp	r4, r3
 801233a:	bf08      	it	eq
 801233c:	68ec      	ldreq	r4, [r5, #12]
 801233e:	e7da      	b.n	80122f6 <_fflush_r+0x22>
 8012340:	080153b0 	.word	0x080153b0
 8012344:	080153d0 	.word	0x080153d0
 8012348:	08015390 	.word	0x08015390

0801234c <_lseek_r>:
 801234c:	b538      	push	{r3, r4, r5, lr}
 801234e:	4d07      	ldr	r5, [pc, #28]	; (801236c <_lseek_r+0x20>)
 8012350:	4604      	mov	r4, r0
 8012352:	4608      	mov	r0, r1
 8012354:	4611      	mov	r1, r2
 8012356:	2200      	movs	r2, #0
 8012358:	602a      	str	r2, [r5, #0]
 801235a:	461a      	mov	r2, r3
 801235c:	f7ee feb2 	bl	80010c4 <_lseek>
 8012360:	1c43      	adds	r3, r0, #1
 8012362:	d102      	bne.n	801236a <_lseek_r+0x1e>
 8012364:	682b      	ldr	r3, [r5, #0]
 8012366:	b103      	cbz	r3, 801236a <_lseek_r+0x1e>
 8012368:	6023      	str	r3, [r4, #0]
 801236a:	bd38      	pop	{r3, r4, r5, pc}
 801236c:	24008180 	.word	0x24008180

08012370 <__swhatbuf_r>:
 8012370:	b570      	push	{r4, r5, r6, lr}
 8012372:	460e      	mov	r6, r1
 8012374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012378:	2900      	cmp	r1, #0
 801237a:	b096      	sub	sp, #88	; 0x58
 801237c:	4614      	mov	r4, r2
 801237e:	461d      	mov	r5, r3
 8012380:	da08      	bge.n	8012394 <__swhatbuf_r+0x24>
 8012382:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012386:	2200      	movs	r2, #0
 8012388:	602a      	str	r2, [r5, #0]
 801238a:	061a      	lsls	r2, r3, #24
 801238c:	d410      	bmi.n	80123b0 <__swhatbuf_r+0x40>
 801238e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012392:	e00e      	b.n	80123b2 <__swhatbuf_r+0x42>
 8012394:	466a      	mov	r2, sp
 8012396:	f000 f8b3 	bl	8012500 <_fstat_r>
 801239a:	2800      	cmp	r0, #0
 801239c:	dbf1      	blt.n	8012382 <__swhatbuf_r+0x12>
 801239e:	9a01      	ldr	r2, [sp, #4]
 80123a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80123a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80123a8:	425a      	negs	r2, r3
 80123aa:	415a      	adcs	r2, r3
 80123ac:	602a      	str	r2, [r5, #0]
 80123ae:	e7ee      	b.n	801238e <__swhatbuf_r+0x1e>
 80123b0:	2340      	movs	r3, #64	; 0x40
 80123b2:	2000      	movs	r0, #0
 80123b4:	6023      	str	r3, [r4, #0]
 80123b6:	b016      	add	sp, #88	; 0x58
 80123b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080123bc <__smakebuf_r>:
 80123bc:	898b      	ldrh	r3, [r1, #12]
 80123be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80123c0:	079d      	lsls	r5, r3, #30
 80123c2:	4606      	mov	r6, r0
 80123c4:	460c      	mov	r4, r1
 80123c6:	d507      	bpl.n	80123d8 <__smakebuf_r+0x1c>
 80123c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80123cc:	6023      	str	r3, [r4, #0]
 80123ce:	6123      	str	r3, [r4, #16]
 80123d0:	2301      	movs	r3, #1
 80123d2:	6163      	str	r3, [r4, #20]
 80123d4:	b002      	add	sp, #8
 80123d6:	bd70      	pop	{r4, r5, r6, pc}
 80123d8:	ab01      	add	r3, sp, #4
 80123da:	466a      	mov	r2, sp
 80123dc:	f7ff ffc8 	bl	8012370 <__swhatbuf_r>
 80123e0:	9900      	ldr	r1, [sp, #0]
 80123e2:	4605      	mov	r5, r0
 80123e4:	4630      	mov	r0, r6
 80123e6:	f7ff fa4f 	bl	8011888 <_malloc_r>
 80123ea:	b948      	cbnz	r0, 8012400 <__smakebuf_r+0x44>
 80123ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123f0:	059a      	lsls	r2, r3, #22
 80123f2:	d4ef      	bmi.n	80123d4 <__smakebuf_r+0x18>
 80123f4:	f023 0303 	bic.w	r3, r3, #3
 80123f8:	f043 0302 	orr.w	r3, r3, #2
 80123fc:	81a3      	strh	r3, [r4, #12]
 80123fe:	e7e3      	b.n	80123c8 <__smakebuf_r+0xc>
 8012400:	4b0d      	ldr	r3, [pc, #52]	; (8012438 <__smakebuf_r+0x7c>)
 8012402:	62b3      	str	r3, [r6, #40]	; 0x28
 8012404:	89a3      	ldrh	r3, [r4, #12]
 8012406:	6020      	str	r0, [r4, #0]
 8012408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801240c:	81a3      	strh	r3, [r4, #12]
 801240e:	9b00      	ldr	r3, [sp, #0]
 8012410:	6163      	str	r3, [r4, #20]
 8012412:	9b01      	ldr	r3, [sp, #4]
 8012414:	6120      	str	r0, [r4, #16]
 8012416:	b15b      	cbz	r3, 8012430 <__smakebuf_r+0x74>
 8012418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801241c:	4630      	mov	r0, r6
 801241e:	f000 f881 	bl	8012524 <_isatty_r>
 8012422:	b128      	cbz	r0, 8012430 <__smakebuf_r+0x74>
 8012424:	89a3      	ldrh	r3, [r4, #12]
 8012426:	f023 0303 	bic.w	r3, r3, #3
 801242a:	f043 0301 	orr.w	r3, r3, #1
 801242e:	81a3      	strh	r3, [r4, #12]
 8012430:	89a0      	ldrh	r0, [r4, #12]
 8012432:	4305      	orrs	r5, r0
 8012434:	81a5      	strh	r5, [r4, #12]
 8012436:	e7cd      	b.n	80123d4 <__smakebuf_r+0x18>
 8012438:	080115d5 	.word	0x080115d5

0801243c <__malloc_lock>:
 801243c:	4801      	ldr	r0, [pc, #4]	; (8012444 <__malloc_lock+0x8>)
 801243e:	f7ff b9ad 	b.w	801179c <__retarget_lock_acquire_recursive>
 8012442:	bf00      	nop
 8012444:	24008184 	.word	0x24008184

08012448 <__malloc_unlock>:
 8012448:	4801      	ldr	r0, [pc, #4]	; (8012450 <__malloc_unlock+0x8>)
 801244a:	f7ff b9a8 	b.w	801179e <__retarget_lock_release_recursive>
 801244e:	bf00      	nop
 8012450:	24008184 	.word	0x24008184

08012454 <_read_r>:
 8012454:	b538      	push	{r3, r4, r5, lr}
 8012456:	4d07      	ldr	r5, [pc, #28]	; (8012474 <_read_r+0x20>)
 8012458:	4604      	mov	r4, r0
 801245a:	4608      	mov	r0, r1
 801245c:	4611      	mov	r1, r2
 801245e:	2200      	movs	r2, #0
 8012460:	602a      	str	r2, [r5, #0]
 8012462:	461a      	mov	r2, r3
 8012464:	f7ee fdea 	bl	800103c <_read>
 8012468:	1c43      	adds	r3, r0, #1
 801246a:	d102      	bne.n	8012472 <_read_r+0x1e>
 801246c:	682b      	ldr	r3, [r5, #0]
 801246e:	b103      	cbz	r3, 8012472 <_read_r+0x1e>
 8012470:	6023      	str	r3, [r4, #0]
 8012472:	bd38      	pop	{r3, r4, r5, pc}
 8012474:	24008180 	.word	0x24008180

08012478 <_raise_r>:
 8012478:	291f      	cmp	r1, #31
 801247a:	b538      	push	{r3, r4, r5, lr}
 801247c:	4604      	mov	r4, r0
 801247e:	460d      	mov	r5, r1
 8012480:	d904      	bls.n	801248c <_raise_r+0x14>
 8012482:	2316      	movs	r3, #22
 8012484:	6003      	str	r3, [r0, #0]
 8012486:	f04f 30ff 	mov.w	r0, #4294967295
 801248a:	bd38      	pop	{r3, r4, r5, pc}
 801248c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801248e:	b112      	cbz	r2, 8012496 <_raise_r+0x1e>
 8012490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012494:	b94b      	cbnz	r3, 80124aa <_raise_r+0x32>
 8012496:	4620      	mov	r0, r4
 8012498:	f000 f830 	bl	80124fc <_getpid_r>
 801249c:	462a      	mov	r2, r5
 801249e:	4601      	mov	r1, r0
 80124a0:	4620      	mov	r0, r4
 80124a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124a6:	f000 b817 	b.w	80124d8 <_kill_r>
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d00a      	beq.n	80124c4 <_raise_r+0x4c>
 80124ae:	1c59      	adds	r1, r3, #1
 80124b0:	d103      	bne.n	80124ba <_raise_r+0x42>
 80124b2:	2316      	movs	r3, #22
 80124b4:	6003      	str	r3, [r0, #0]
 80124b6:	2001      	movs	r0, #1
 80124b8:	e7e7      	b.n	801248a <_raise_r+0x12>
 80124ba:	2400      	movs	r4, #0
 80124bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80124c0:	4628      	mov	r0, r5
 80124c2:	4798      	blx	r3
 80124c4:	2000      	movs	r0, #0
 80124c6:	e7e0      	b.n	801248a <_raise_r+0x12>

080124c8 <raise>:
 80124c8:	4b02      	ldr	r3, [pc, #8]	; (80124d4 <raise+0xc>)
 80124ca:	4601      	mov	r1, r0
 80124cc:	6818      	ldr	r0, [r3, #0]
 80124ce:	f7ff bfd3 	b.w	8012478 <_raise_r>
 80124d2:	bf00      	nop
 80124d4:	24000018 	.word	0x24000018

080124d8 <_kill_r>:
 80124d8:	b538      	push	{r3, r4, r5, lr}
 80124da:	4d07      	ldr	r5, [pc, #28]	; (80124f8 <_kill_r+0x20>)
 80124dc:	2300      	movs	r3, #0
 80124de:	4604      	mov	r4, r0
 80124e0:	4608      	mov	r0, r1
 80124e2:	4611      	mov	r1, r2
 80124e4:	602b      	str	r3, [r5, #0]
 80124e6:	f7ee fd8d 	bl	8001004 <_kill>
 80124ea:	1c43      	adds	r3, r0, #1
 80124ec:	d102      	bne.n	80124f4 <_kill_r+0x1c>
 80124ee:	682b      	ldr	r3, [r5, #0]
 80124f0:	b103      	cbz	r3, 80124f4 <_kill_r+0x1c>
 80124f2:	6023      	str	r3, [r4, #0]
 80124f4:	bd38      	pop	{r3, r4, r5, pc}
 80124f6:	bf00      	nop
 80124f8:	24008180 	.word	0x24008180

080124fc <_getpid_r>:
 80124fc:	f7ee bd7a 	b.w	8000ff4 <_getpid>

08012500 <_fstat_r>:
 8012500:	b538      	push	{r3, r4, r5, lr}
 8012502:	4d07      	ldr	r5, [pc, #28]	; (8012520 <_fstat_r+0x20>)
 8012504:	2300      	movs	r3, #0
 8012506:	4604      	mov	r4, r0
 8012508:	4608      	mov	r0, r1
 801250a:	4611      	mov	r1, r2
 801250c:	602b      	str	r3, [r5, #0]
 801250e:	f7ee fdbe 	bl	800108e <_fstat>
 8012512:	1c43      	adds	r3, r0, #1
 8012514:	d102      	bne.n	801251c <_fstat_r+0x1c>
 8012516:	682b      	ldr	r3, [r5, #0]
 8012518:	b103      	cbz	r3, 801251c <_fstat_r+0x1c>
 801251a:	6023      	str	r3, [r4, #0]
 801251c:	bd38      	pop	{r3, r4, r5, pc}
 801251e:	bf00      	nop
 8012520:	24008180 	.word	0x24008180

08012524 <_isatty_r>:
 8012524:	b538      	push	{r3, r4, r5, lr}
 8012526:	4d06      	ldr	r5, [pc, #24]	; (8012540 <_isatty_r+0x1c>)
 8012528:	2300      	movs	r3, #0
 801252a:	4604      	mov	r4, r0
 801252c:	4608      	mov	r0, r1
 801252e:	602b      	str	r3, [r5, #0]
 8012530:	f7ee fdbd 	bl	80010ae <_isatty>
 8012534:	1c43      	adds	r3, r0, #1
 8012536:	d102      	bne.n	801253e <_isatty_r+0x1a>
 8012538:	682b      	ldr	r3, [r5, #0]
 801253a:	b103      	cbz	r3, 801253e <_isatty_r+0x1a>
 801253c:	6023      	str	r3, [r4, #0]
 801253e:	bd38      	pop	{r3, r4, r5, pc}
 8012540:	24008180 	.word	0x24008180

08012544 <_init>:
 8012544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012546:	bf00      	nop
 8012548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801254a:	bc08      	pop	{r3}
 801254c:	469e      	mov	lr, r3
 801254e:	4770      	bx	lr

08012550 <_fini>:
 8012550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012552:	bf00      	nop
 8012554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012556:	bc08      	pop	{r3}
 8012558:	469e      	mov	lr, r3
 801255a:	4770      	bx	lr
