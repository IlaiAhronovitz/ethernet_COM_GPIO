
LWIPPING_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .lwip_sec     00000200  30040000  08000000  00020000  2**2
                  ALLOC
  1 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00012d10  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002e4c  08012fb0  08012fb0  00022fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08015dfc  08015dfc  00030094  2**0
                  CONTENTS
  5 .ARM          00000008  08015dfc  08015dfc  00025dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08015e04  08015e04  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08015e04  08015e04  00025e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08015e08  08015e08  00025e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000094  24000000  08015e0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00008130  24000094  08015ea0  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  240081c4  08015ea0  000381c4  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ac72  00000000  00000000  000300c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005fa1  00000000  00000000  0005ad34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba0  00000000  00000000  00060cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ac0  00000000  00000000  00062878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00046d43  00000000  00000000  00064338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002efd7  00000000  00000000  000ab07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00192c57  00000000  00000000  000da052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0026cca9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b50  00000000  00000000  0026ccfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012f98 	.word	0x08012f98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	08012f98 	.word	0x08012f98

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d013      	beq.n	80007f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00b      	beq.n	80007f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007d8:	e000      	b.n	80007dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80007da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f9      	beq.n	80007da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <send_icmp_ping>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void send_icmp_ping()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b090      	sub	sp, #64	; 0x40
 8000804:	af02      	add	r7, sp, #8
  struct ip_hdr *iphdr;
  ip_addr_t src_ip, dest_ip;
  struct netif *netif;

  // Set the source and destination IP addresses
  IP4_ADDR(&src_ip, 192, 168, 0, 123);
 8000806:	4b58      	ldr	r3, [pc, #352]	; (8000968 <send_icmp_ping+0x168>)
 8000808:	61fb      	str	r3, [r7, #28]
  IP4_ADDR(&dest_ip, 192, 168, 0, 155);
 800080a:	4b58      	ldr	r3, [pc, #352]	; (800096c <send_icmp_ping+0x16c>)
 800080c:	61bb      	str	r3, [r7, #24]
//  if (ip_p == NULL) {
//    // Handle allocation error
//    return;
//  }

  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr), PBUF_RAM);
 800080e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000812:	2108      	movs	r1, #8
 8000814:	2022      	movs	r0, #34	; 0x22
 8000816:	f00b f995 	bl	800bb44 <pbuf_alloc>
 800081a:	6378      	str	r0, [r7, #52]	; 0x34
  p = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN,
 800081c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000820:	211c      	movs	r1, #28
 8000822:	2022      	movs	r0, #34	; 0x22
 8000824:	f00b f98e 	bl	800bb44 <pbuf_alloc>
 8000828:	6338      	str	r0, [r7, #48]	; 0x30
                   PBUF_RAM);
  iphdr = (struct ip_hdr *)p->payload;
 800082a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8000830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  icmphdr->type = 8;
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	2208      	movs	r2, #8
 800083a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = 0;
 800083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083e:	2200      	movs	r2, #0
 8000840:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0x3412;
 8000842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000844:	2200      	movs	r2, #0
 8000846:	f042 0212 	orr.w	r2, r2, #18
 800084a:	711a      	strb	r2, [r3, #4]
 800084c:	2200      	movs	r2, #0
 800084e:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8000852:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 1;
 8000854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000856:	2200      	movs	r2, #0
 8000858:	f042 0201 	orr.w	r2, r2, #1
 800085c:	719a      	strb	r2, [r3, #6]
 800085e:	2200      	movs	r2, #0
 8000860:	71da      	strb	r2, [r3, #7]
  icmphdr->chksum = 0;
 8000862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000864:	2200      	movs	r2, #0
 8000866:	709a      	strb	r2, [r3, #2]
 8000868:	2200      	movs	r2, #0
 800086a:	70da      	strb	r2, [r3, #3]
  icmphdr->chksum = inet_chksum(icmphdr, sizeof(struct icmp_echo_hdr));
 800086c:	2108      	movs	r1, #8
 800086e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000870:	f008 ffcb 	bl	800980a <inet_chksum>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087a:	805a      	strh	r2, [r3, #2]

  iphdr->_ttl = 255;
 800087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	721a      	strb	r2, [r3, #8]
  iphdr->src.addr = src_ip.addr;
 8000882:	69fa      	ldr	r2, [r7, #28]
 8000884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000886:	60da      	str	r2, [r3, #12]
  iphdr->dest.addr = dest_ip.addr;
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088c:	611a      	str	r2, [r3, #16]
  iphdr->_tos = 0;
 800088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000890:	2200      	movs	r2, #0
 8000892:	705a      	strb	r2, [r3, #1]
  iphdr->_offset = 0;
 8000894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000896:	2200      	movs	r2, #0
 8000898:	719a      	strb	r2, [r3, #6]
 800089a:	2200      	movs	r2, #0
 800089c:	71da      	strb	r2, [r3, #7]
  iphdr->_proto = 1;
 800089e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a0:	2201      	movs	r2, #1
 80008a2:	725a      	strb	r2, [r3, #9]
  iphdr->_v_hl = 0x45;
 80008a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a6:	2245      	movs	r2, #69	; 0x45
 80008a8:	701a      	strb	r2, [r3, #0]
  iphdr->_id = 0xABCD;
 80008aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ac:	2200      	movs	r2, #0
 80008ae:	f062 0232 	orn	r2, r2, #50	; 0x32
 80008b2:	711a      	strb	r2, [r3, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	f062 0254 	orn	r2, r2, #84	; 0x54
 80008ba:	715a      	strb	r2, [r3, #5]
  //IPH_VHL_SET(iphdr, 4, IP_HLEN);
  iphdr->_len = htons(46);
 80008bc:	202e      	movs	r0, #46	; 0x2e
 80008be:	f007 fd43 	bl	8008348 <lwip_htons>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	805a      	strh	r2, [r3, #2]
  iphdr->_chksum = 0;
 80008ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008cc:	2200      	movs	r2, #0
 80008ce:	729a      	strb	r2, [r3, #10]
 80008d0:	2200      	movs	r2, #0
 80008d2:	72da      	strb	r2, [r3, #11]
  iphdr->_chksum = inet_chksum(iphdr, IP_HLEN);
 80008d4:	2114      	movs	r1, #20
 80008d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80008d8:	f008 ff97 	bl	800980a <inet_chksum>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e2:	815a      	strh	r2, [r3, #10]


  SMEMCPY((u8_t *)p->payload + (IP_HLEN), (u8_t *)q->payload,
 80008e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f103 0014 	add.w	r0, r3, #20
 80008ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2208      	movs	r2, #8
 80008f2:	4619      	mov	r1, r3
 80008f4:	f011 faea 	bl	8011ecc <memcpy>
		  sizeof(struct icmp_echo_hdr));
//SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,IP_HLEN);
  netif = ip4_route_src(&src_ip, &dest_ip);
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	4618      	mov	r0, r3
 80008fe:	f008 fff9 	bl	80098f4 <ip4_route>
 8000902:	6278      	str	r0, [r7, #36]	; 0x24
  //ip4_output_if(q, &src_ip, &dest_ip, 255, 0, 1, netif);
  struct eth_addr mac_src;
    struct eth_addr mac_dst;  // Destination MAC address (example)
    uint8_t mac_dst_addr[6] = {0x00, 0x80, 0xE1, 0x00, 0x00, 0x01};
 8000904:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <send_icmp_ping+0x170>)
 8000906:	463b      	mov	r3, r7
 8000908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090c:	6018      	str	r0, [r3, #0]
 800090e:	3304      	adds	r3, #4
 8000910:	8019      	strh	r1, [r3, #0]
    memcpy(mac_src.addr, netif->hwaddr, 6);
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	6810      	ldr	r0, [r2, #0]
 800091e:	6018      	str	r0, [r3, #0]
 8000920:	8892      	ldrh	r2, [r2, #4]
 8000922:	809a      	strh	r2, [r3, #4]
    memcpy(mac_dst.addr, mac_dst_addr, 6);
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	463a      	mov	r2, r7
 800092a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800092e:	6018      	str	r0, [r3, #0]
 8000930:	3304      	adds	r3, #4
 8000932:	8019      	strh	r1, [r3, #0]
    u16_t eth_type = ETHTYPE_IP;  // Ethernet type for IP packets
 8000934:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000938:	847b      	strh	r3, [r7, #34]	; 0x22


    if(ethernet_output(netif, p, &mac_src, &mac_dst, eth_type) != ERR_OK){
 800093a:	f107 0108 	add.w	r1, r7, #8
 800093e:	f107 0210 	add.w	r2, r7, #16
 8000942:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	460b      	mov	r3, r1
 8000948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800094a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800094c:	f008 fd04 	bl	8009358 <ethernet_output>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d005      	beq.n	8000962 <send_icmp_ping+0x162>
    	  pbuf_free(q);
 8000956:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000958:	f00b fbd8 	bl	800c10c <pbuf_free>
    	  pbuf_free(p);
 800095c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800095e:	f00b fbd5 	bl	800c10c <pbuf_free>
    	  return;
      }
}
 8000962:	3738      	adds	r7, #56	; 0x38
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	7b00a8c0 	.word	0x7b00a8c0
 800096c:	9b00a8c0 	.word	0x9b00a8c0
 8000970:	08012fb0 	.word	0x08012fb0

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  //int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800097a:	f000 fa27 	bl	8000dcc <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800097e:	4b53      	ldr	r3, [pc, #332]	; (8000acc <main+0x158>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d11b      	bne.n	80009c2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800098a:	f3bf 8f4f 	dsb	sy
}
 800098e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000990:	f3bf 8f6f 	isb	sy
}
 8000994:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000996:	4b4d      	ldr	r3, [pc, #308]	; (8000acc <main+0x158>)
 8000998:	2200      	movs	r2, #0
 800099a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800099e:	f3bf 8f4f 	dsb	sy
}
 80009a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a4:	f3bf 8f6f 	isb	sy
}
 80009a8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009aa:	4b48      	ldr	r3, [pc, #288]	; (8000acc <main+0x158>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a47      	ldr	r2, [pc, #284]	; (8000acc <main+0x158>)
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009b6:	f3bf 8f4f 	dsb	sy
}
 80009ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009bc:	f3bf 8f6f 	isb	sy
}
 80009c0:	e000      	b.n	80009c4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009c2:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009c4:	4b41      	ldr	r3, [pc, #260]	; (8000acc <main+0x158>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d138      	bne.n	8000a42 <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009d0:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <main+0x158>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009d8:	f3bf 8f4f 	dsb	sy
}
 80009dc:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <main+0x158>)
 80009e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009e4:	60bb      	str	r3, [r7, #8]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	0b5b      	lsrs	r3, r3, #13
 80009ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009ee:	607b      	str	r3, [r7, #4]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009f8:	603b      	str	r3, [r7, #0]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	015a      	lsls	r2, r3, #5
 80009fe:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a02:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a08:	4930      	ldr	r1, [pc, #192]	; (8000acc <main+0x158>)
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	1e5a      	subs	r2, r3, #1
 8000a14:	603a      	str	r2, [r7, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1ef      	bne.n	80009fa <main+0x86>
    } while(sets-- != 0U);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	1e5a      	subs	r2, r3, #1
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1e5      	bne.n	80009f0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a24:	f3bf 8f4f 	dsb	sy
}
 8000a28:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <main+0x158>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a27      	ldr	r2, [pc, #156]	; (8000acc <main+0x158>)
 8000a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a34:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a36:	f3bf 8f4f 	dsb	sy
}
 8000a3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a3c:	f3bf 8f6f 	isb	sy
}
 8000a40:	e000      	b.n	8000a44 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a42:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f000 fd7a 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f842 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f000 f93c 	bl	8000cc8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a50:	f000 f8bc 	bl	8000bcc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a54:	f000 f906 	bl	8000c64 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000a58:	f006 fffa 	bl	8007a50 <MX_LWIP_Init>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <main+0x158>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a64:	f3bf 8f4f 	dsb	sy
}
 8000a68:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <main+0x158>)
 8000a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a70:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	0b5b      	lsrs	r3, r3, #13
 8000a76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a7a:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	08db      	lsrs	r3, r3, #3
 8000a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a84:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	015a      	lsls	r2, r3, #5
 8000a8a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a8e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000a94:	490d      	ldr	r1, [pc, #52]	; (8000acc <main+0x158>)
 8000a96:	4313      	orrs	r3, r2
 8000a98:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	1e5a      	subs	r2, r3, #1
 8000aa0:	60fa      	str	r2, [r7, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1ef      	bne.n	8000a86 <main+0x112>
    } while(sets-- != 0U);
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	1e5a      	subs	r2, r3, #1
 8000aaa:	613a      	str	r2, [r7, #16]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1e5      	bne.n	8000a7c <main+0x108>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab0:	f3bf 8f4f 	dsb	sy
}
 8000ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab6:	f3bf 8f6f 	isb	sy
}
 8000aba:	bf00      	nop
}
 8000abc:	bf00      	nop
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //MX_LWIP_Process();
	  send_icmp_ping();
 8000abe:	f7ff fe9f 	bl	8000800 <send_icmp_ping>
	  HAL_Delay(2000);
 8000ac2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ac6:	f000 fdcb 	bl	8001660 <HAL_Delay>
	  send_icmp_ping();
 8000aca:	e7f8      	b.n	8000abe <main+0x14a>
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09c      	sub	sp, #112	; 0x70
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	224c      	movs	r2, #76	; 0x4c
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f011 fa02 	bl	8011ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f011 f9fc 	bl	8011ee8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000af0:	2004      	movs	r0, #4
 8000af2:	f002 fd51 	bl	8003598 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <SystemClock_Config+0xf4>)
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <SystemClock_Config+0xf4>)
 8000b00:	f023 0301 	bic.w	r3, r3, #1
 8000b04:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b06:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <SystemClock_Config+0xf4>)
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <SystemClock_Config+0xf8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b18:	4a2b      	ldr	r2, [pc, #172]	; (8000bc8 <SystemClock_Config+0xf8>)
 8000b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <SystemClock_Config+0xf8>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b2c:	bf00      	nop
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <SystemClock_Config+0xf8>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b3a:	d1f8      	bne.n	8000b2e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000b52:	2312      	movs	r3, #18
 8000b54:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b62:	230c      	movs	r3, #12
 8000b64:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000b66:	2302      	movs	r3, #2
 8000b68:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000b6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 fd79 	bl	800366c <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b80:	f000 f964 	bl	8000e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	233f      	movs	r3, #63	; 0x3f
 8000b86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b94:	2340      	movs	r3, #64	; 0x40
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b98:	2340      	movs	r3, #64	; 0x40
 8000b9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ba2:	2340      	movs	r3, #64	; 0x40
 8000ba4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f003 f9b8 	bl	8003f20 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000bb6:	f000 f949 	bl	8000e4c <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3770      	adds	r7, #112	; 0x70
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	58000400 	.word	0x58000400
 8000bc8:	58024800 	.word	0x58024800

08000bcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <MX_USART3_UART_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c16:	f005 fb3b 	bl	8006290 <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 f914 	bl	8000e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c28:	f006 fb3d 	bl	80072a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 f90b 	bl	8000e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c3a:	f006 fb72 	bl	8007322 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 f902 	bl	8000e4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c4a:	f006 faf3 	bl	8007234 <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 f8fa 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	240000b0 	.word	0x240000b0
 8000c60:	40004800 	.word	0x40004800

08000c64 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c6a:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c70:	2209      	movs	r2, #9
 8000c72:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c82:	2202      	movs	r2, #2
 8000c84:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cac:	f002 fb2c 	bl	8003308 <HAL_PCD_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cb6:	f000 f8c9 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	24000144 	.word	0x24000144
 8000cc4:	40080000 	.word	0x40080000

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	4a2e      	ldr	r2, [pc, #184]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	4a27      	ldr	r2, [pc, #156]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	4a1f      	ldr	r2, [pc, #124]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_GPIO_Init+0xc8>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d82:	bf00      	nop
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	58024400 	.word	0x58024400

08000d94 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
	int var;
	for (var = 0; var < len; ++var) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e009      	b.n	8000dba <_write+0x26>
		ITM_SendChar(*ptr++);
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	60ba      	str	r2, [r7, #8]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fcfe 	bl	80007b0 <ITM_SendChar>
	for (var = 0; var < len; ++var) {
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3301      	adds	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	dbf1      	blt.n	8000da6 <_write+0x12>
	}
	return len;
 8000dc2:	687b      	ldr	r3, [r7, #4]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dde:	f000 fd67 	bl	80018b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000de2:	2301      	movs	r3, #1
 8000de4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MPU_Config+0x78>)
 8000dec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000dee:	2307      	movs	r3, #7
 8000df0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fd85 	bl	8001920 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <MPU_Config+0x7c>)
 8000e1c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000e1e:	230d      	movs	r3, #13
 8000e20:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e26:	2301      	movs	r3, #1
 8000e28:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fd75 	bl	8001920 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e36:	2004      	movs	r0, #4
 8000e38:	f000 fd52 	bl	80018e0 <HAL_MPU_Enable>

}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	30040000 	.word	0x30040000
 8000e48:	30044000 	.word	0x30044000

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_MspInit+0x30>)
 8000e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e64:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_MspInit+0x30>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_MspInit+0x30>)
 8000e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	58024400 	.word	0x58024400

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0ba      	sub	sp, #232	; 0xe8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	22c0      	movs	r2, #192	; 0xc0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f011 f81b 	bl	8011ee8 <memset>
  if(huart->Instance==USART3)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <HAL_UART_MspInit+0xc8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d146      	bne.n	8000f4a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ebc:	f04f 0202 	mov.w	r2, #2
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 fbb0 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ede:	f7ff ffb5 	bl	8000e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_UART_MspInit+0xcc>)
 8000ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <HAL_UART_MspInit+0xcc>)
 8000eea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_UART_MspInit+0xcc>)
 8000ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_MspInit+0xcc>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <HAL_UART_MspInit+0xcc>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_UART_MspInit+0xcc>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_UART_MspInit+0xd0>)
 8000f46:	f002 f82f 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	37e8      	adds	r7, #232	; 0xe8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40004800 	.word	0x40004800
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	58020c00 	.word	0x58020c00

08000f60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0ba      	sub	sp, #232	; 0xe8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	22c0      	movs	r2, #192	; 0xc0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f010 ffb1 	bl	8011ee8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a38      	ldr	r2, [pc, #224]	; (800106c <HAL_PCD_MspInit+0x10c>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d169      	bne.n	8001064 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f90:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000fa0:	2312      	movs	r3, #18
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000fb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000fb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fba:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000fbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 fb35 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000fd4:	f7ff ff3a 	bl	8000e4c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fd8:	f002 fb38 	bl	800364c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_PCD_MspInit+0x110>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a23      	ldr	r2, [pc, #140]	; (8001070 <HAL_PCD_MspInit+0x110>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_PCD_MspInit+0x110>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ffa:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001014:	230a      	movs	r3, #10
 8001016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800101e:	4619      	mov	r1, r3
 8001020:	4814      	ldr	r0, [pc, #80]	; (8001074 <HAL_PCD_MspInit+0x114>)
 8001022:	f001 ffc1 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <HAL_PCD_MspInit+0x114>)
 8001042:	f001 ffb1 	bl	8002fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_PCD_MspInit+0x110>)
 8001048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800104c:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_PCD_MspInit+0x110>)
 800104e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001052:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_PCD_MspInit+0x110>)
 8001058:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800105c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	37e8      	adds	r7, #232	; 0xe8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40080000 	.word	0x40080000
 8001070:	58024400 	.word	0x58024400
 8001074:	58020000 	.word	0x58020000

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 faac 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return 1;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_kill>:

int _kill(int pid, int sig)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <_kill+0x20>)
 80010e8:	2216      	movs	r2, #22
 80010ea:	601a      	str	r2, [r3, #0]
  return -1;
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	240081b4 	.word	0x240081b4

08001100 <_exit>:

void _exit (int status)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ffe5 	bl	80010dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001112:	e7fe      	b.n	8001112 <_exit+0x12>

08001114 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e00a      	b.n	800113c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001126:	f3af 8000 	nop.w
 800112a:	4601      	mov	r1, r0
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	60ba      	str	r2, [r7, #8]
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	dbf0      	blt.n	8001126 <_read+0x12>
  }

  return len;
 8001144:	687b      	ldr	r3, [r7, #4]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_close>:
  }
  return len;
}

int _close(int file)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001176:	605a      	str	r2, [r3, #4]
  return 0;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <_isatty>:

int _isatty(int file)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d205      	bcs.n	80011f4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <_sbrk+0x6c>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e009      	b.n	8001208 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a06      	ldr	r2, [pc, #24]	; (800121c <_sbrk+0x64>)
 8001204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	371c      	adds	r7, #28
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	24080000 	.word	0x24080000
 8001218:	00000400 	.word	0x00000400
 800121c:	24000650 	.word	0x24000650
 8001220:	240081c8 	.word	0x240081c8
 8001224:	240081b4 	.word	0x240081b4

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800122c:	f7ff fa2a 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001232:	490d      	ldr	r1, [pc, #52]	; (8001268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001248:	4c0a      	ldr	r4, [pc, #40]	; (8001274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001256:	f010 fe05 	bl	8011e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff fb8b 	bl	8000974 <main>
  bx  lr
 800125e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001264:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001268:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 800126c:	08015e0c 	.word	0x08015e0c
  ldr r2, =_sbss
 8001270:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 8001274:	240081c4 	.word	0x240081c4

08001278 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC3_IRQHandler>

0800127a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00b      	beq.n	80012a2 <LAN8742_RegisterBusIO+0x28>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <LAN8742_RegisterBusIO+0x28>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <LAN8742_RegisterBusIO+0x28>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e014      	b.n	80012d2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d17c      	bne.n	80013f8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2220      	movs	r2, #32
 8001310:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e01c      	b.n	8001352 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	f107 0208 	add.w	r2, r7, #8
 8001320:	2112      	movs	r1, #18
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	4798      	blx	r3
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	da03      	bge.n	8001334 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800132c:	f06f 0304 	mvn.w	r3, #4
 8001330:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001332:	e00b      	b.n	800134c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	429a      	cmp	r2, r3
 800133e:	d105      	bne.n	800134c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
         break;
 800134a:	e005      	b.n	8001358 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b1f      	cmp	r3, #31
 8001356:	d9df      	bls.n	8001318 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b1f      	cmp	r3, #31
 800135e:	d902      	bls.n	8001366 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001360:	f06f 0302 	mvn.w	r3, #2
 8001364:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d145      	bne.n	80013f8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6810      	ldr	r0, [r2, #0]
 8001374:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001378:	2100      	movs	r1, #0
 800137a:	4798      	blx	r3
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	db37      	blt.n	80013f2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6810      	ldr	r0, [r2, #0]
 800138a:	f107 0208 	add.w	r2, r7, #8
 800138e:	2100      	movs	r1, #0
 8001390:	4798      	blx	r3
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	db28      	blt.n	80013ea <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4798      	blx	r3
 800139e:	4603      	mov	r3, r0
 80013a0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80013a2:	e01c      	b.n	80013de <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4798      	blx	r3
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013b6:	d80e      	bhi.n	80013d6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6810      	ldr	r0, [r2, #0]
 80013c0:	f107 0208 	add.w	r2, r7, #8
 80013c4:	2100      	movs	r1, #0
 80013c6:	4798      	blx	r3
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	da07      	bge.n	80013de <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80013ce:	f06f 0304 	mvn.w	r3, #4
 80013d2:	613b      	str	r3, [r7, #16]
                 break;
 80013d4:	e010      	b.n	80013f8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80013d6:	f06f 0301 	mvn.w	r3, #1
 80013da:	613b      	str	r3, [r7, #16]
               break;
 80013dc:	e00c      	b.n	80013f8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1dd      	bne.n	80013a4 <LAN8742_Init+0xc6>
 80013e8:	e006      	b.n	80013f8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80013ea:	f06f 0304 	mvn.w	r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	e002      	b.n	80013f8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80013f2:	f06f 0303 	mvn.w	r3, #3
 80013f6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d112      	bne.n	8001424 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	4798      	blx	r3
 8001404:	4603      	mov	r3, r0
 8001406:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001408:	bf00      	nop
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4798      	blx	r3
 8001410:	4603      	mov	r3, r0
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800141c:	d9f5      	bls.n	800140a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001424:	693b      	ldr	r3, [r7, #16]
 }
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6810      	ldr	r0, [r2, #0]
 8001442:	f107 020c 	add.w	r2, r7, #12
 8001446:	2101      	movs	r1, #1
 8001448:	4798      	blx	r3
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	da02      	bge.n	8001456 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001450:	f06f 0304 	mvn.w	r3, #4
 8001454:	e06e      	b.n	8001534 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6810      	ldr	r0, [r2, #0]
 800145e:	f107 020c 	add.w	r2, r7, #12
 8001462:	2101      	movs	r1, #1
 8001464:	4798      	blx	r3
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	da02      	bge.n	8001472 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800146c:	f06f 0304 	mvn.w	r3, #4
 8001470:	e060      	b.n	8001534 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800147c:	2301      	movs	r3, #1
 800147e:	e059      	b.n	8001534 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6810      	ldr	r0, [r2, #0]
 8001488:	f107 020c 	add.w	r2, r7, #12
 800148c:	2100      	movs	r1, #0
 800148e:	4798      	blx	r3
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	da02      	bge.n	800149c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001496:	f06f 0304 	mvn.w	r3, #4
 800149a:	e04b      	b.n	8001534 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d11b      	bne.n	80014de <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <LAN8742_GetLinkState+0x90>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014ba:	2302      	movs	r3, #2
 80014bc:	e03a      	b.n	8001534 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e033      	b.n	8001534 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014d6:	2304      	movs	r3, #4
 80014d8:	e02c      	b.n	8001534 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014da:	2305      	movs	r3, #5
 80014dc:	e02a      	b.n	8001534 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6810      	ldr	r0, [r2, #0]
 80014e6:	f107 020c 	add.w	r2, r7, #12
 80014ea:	211f      	movs	r1, #31
 80014ec:	4798      	blx	r3
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da02      	bge.n	80014fa <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80014f4:	f06f 0304 	mvn.w	r3, #4
 80014f8:	e01c      	b.n	8001534 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001504:	2306      	movs	r3, #6
 8001506:	e015      	b.n	8001534 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 031c 	and.w	r3, r3, #28
 800150e:	2b18      	cmp	r3, #24
 8001510:	d101      	bne.n	8001516 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001512:	2302      	movs	r3, #2
 8001514:	e00e      	b.n	8001534 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f003 031c 	and.w	r3, r3, #28
 800151c:	2b08      	cmp	r3, #8
 800151e:	d101      	bne.n	8001524 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001520:	2303      	movs	r3, #3
 8001522:	e007      	b.n	8001534 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 031c 	and.w	r3, r3, #28
 800152a:	2b14      	cmp	r3, #20
 800152c:	d101      	bne.n	8001532 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800152e:	2304      	movs	r3, #4
 8001530:	e000      	b.n	8001534 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001532:	2305      	movs	r3, #5
    }				
  }
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001542:	2003      	movs	r0, #3
 8001544:	f000 f982 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001548:	f002 fea0 	bl	800428c <HAL_RCC_GetSysClockFreq>
 800154c:	4602      	mov	r2, r0
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_Init+0x68>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	4913      	ldr	r1, [pc, #76]	; (80015a8 <HAL_Init+0x6c>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_Init+0x68>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_Init+0x6c>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_Init+0x70>)
 800157e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_Init+0x74>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f814 	bl	80015b4 <HAL_InitTick>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e002      	b.n	800159c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001596:	f7ff fc5f 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	58024400 	.word	0x58024400
 80015a8:	08015b8c 	.word	0x08015b8c
 80015ac:	24000004 	.word	0x24000004
 80015b0:	24000000 	.word	0x24000000

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_InitTick+0x60>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e021      	b.n	800160c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_InitTick+0x64>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_InitTick+0x60>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f959 	bl	8001896 <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f000 f931 	bl	8001862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <HAL_InitTick+0x68>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2400000c 	.word	0x2400000c
 8001618:	24000000 	.word	0x24000000
 800161c:	24000008 	.word	0x24000008

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	2400000c 	.word	0x2400000c
 8001644:	24000654 	.word	0x24000654

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	24000654 	.word	0x24000654

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2400000c 	.word	0x2400000c

080016a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_GetREVID+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0c1b      	lsrs	r3, r3, #16
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	5c001000 	.word	0x5c001000

080016c0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80016d0:	4904      	ldr	r1, [pc, #16]	; (80016e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	58000400 	.word	0x58000400

080016e8 <__NVIC_SetPriorityGrouping>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <__NVIC_SetPriorityGrouping+0x40>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	4313      	orrs	r3, r2
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x40>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00
 800172c:	05fa0000 	.word	0x05fa0000

08001730 <__NVIC_GetPriorityGrouping>:
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_SetPriority>:
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <__NVIC_SetPriority+0x50>)
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff47 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff5e 	bl	8001730 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff90 	bl	80017a0 <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5f 	bl	800174c <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffb2 	bl	8001808 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018b4:	f3bf 8f5f 	dmb	sy
}
 80018b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_MPU_Disable+0x28>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <HAL_MPU_Disable+0x28>)
 80018c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_MPU_Disable+0x2c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	605a      	str	r2, [r3, #4]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00
 80018dc:	e000ed90 	.word	0xe000ed90

080018e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80018e8:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <HAL_MPU_Enable+0x38>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_MPU_Enable+0x3c>)
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_MPU_Enable+0x3c>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80018fe:	f3bf 8f4f 	dsb	sy
}
 8001902:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001904:	f3bf 8f6f 	isb	sy
}
 8001908:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed90 	.word	0xe000ed90
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	785a      	ldrb	r2, [r3, #1]
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_MPU_ConfigRegion+0x84>)
 800192e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d029      	beq.n	800198c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001938:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <HAL_MPU_ConfigRegion+0x84>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7b1b      	ldrb	r3, [r3, #12]
 8001944:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7adb      	ldrb	r3, [r3, #11]
 800194a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800194c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7a9b      	ldrb	r3, [r3, #10]
 8001952:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001954:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7b5b      	ldrb	r3, [r3, #13]
 800195a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800195c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7b9b      	ldrb	r3, [r3, #14]
 8001962:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001964:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7bdb      	ldrb	r3, [r3, #15]
 800196a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800196c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7a5b      	ldrb	r3, [r3, #9]
 8001972:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001974:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7a1b      	ldrb	r3, [r3, #8]
 800197a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800197c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001986:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001988:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800198a:	e005      	b.n	8001998 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_MPU_ConfigRegion+0x84>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_MPU_ConfigRegion+0x84>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed90 	.word	0xe000ed90

080019a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0cf      	b.n	8001b5a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d106      	bne.n	80019d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2223      	movs	r2, #35	; 0x23
 80019c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f006 fae3 	bl	8007f98 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <HAL_ETH_Init+0x1bc>)
 80019d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019d8:	4a62      	ldr	r2, [pc, #392]	; (8001b64 <HAL_ETH_Init+0x1bc>)
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019e2:	4b60      	ldr	r3, [pc, #384]	; (8001b64 <HAL_ETH_Init+0x1bc>)
 80019e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7a1b      	ldrb	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d103      	bne.n	8001a00 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7ff fe61 	bl	80016c0 <HAL_SYSCFG_ETHInterfaceSelect>
 80019fe:	e003      	b.n	8001a08 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a00:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a04:	f7ff fe5c 	bl	80016c0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a08:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <HAL_ETH_Init+0x1c0>)
 8001a0a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a24:	f7ff fe10 	bl	8001648 <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a2a:	e011      	b.n	8001a50 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a2c:	f7ff fe0c 	bl	8001648 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a3a:	d909      	bls.n	8001a50 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	22e0      	movs	r2, #224	; 0xe0
 8001a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e084      	b.n	8001b5a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1e4      	bne.n	8001a2c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fcd4 	bl	8002410 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a68:	f002 fd8a 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a3f      	ldr	r2, [pc, #252]	; (8001b6c <HAL_ETH_Init+0x1c4>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9a      	lsrs	r2, r3, #18
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 febf 	bl	8002804 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001a92:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aa2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	22e0      	movs	r2, #224	; 0xe0
 8001abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e049      	b.n	8001b5a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ace:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_ETH_Init+0x1c8>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6952      	ldr	r2, [r2, #20]
 8001ada:	0051      	lsls	r1, r2, #1
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ae6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 ff27 	bl	800293e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 ff6d 	bl	80029d0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	3305      	adds	r3, #5
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	021a      	lsls	r2, r3, #8
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	3304      	adds	r3, #4
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	3303      	adds	r3, #3
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	061a      	lsls	r2, r3, #24
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	3302      	adds	r3, #2
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b34:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b42:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2210      	movs	r2, #16
 8001b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	58024400 	.word	0x58024400
 8001b68:	58000400 	.word	0x58000400
 8001b6c:	431bde83 	.word	0x431bde83
 8001b70:	ffff8001 	.word	0xffff8001

08001b74 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d153      	bne.n	8001c2e <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2223      	movs	r2, #35	; 0x23
 8001b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2204      	movs	r2, #4
 8001b92:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f936 	bl	8001e06 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0202 	orr.w	r2, r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001be6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c02:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001c1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c1e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2223      	movs	r2, #35	; 0x23
 8001c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c46:	2b23      	cmp	r3, #35	; 0x23
 8001c48:	d13f      	bne.n	8001cca <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2223      	movs	r2, #35	; 0x23
 8001c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c6a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c86:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0201 	bic.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0202 	bic.w	r2, r2, #2
 8001cbc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
  }
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07f      	b.n	8001dfe <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d04:	2b23      	cmp	r3, #35	; 0x23
 8001d06:	d179      	bne.n	8001dfc <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 febd 	bl	8002a8c <ETH_Prepare_Tx_Descriptors>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	f043 0202 	orr.w	r2, r3, #2
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e068      	b.n	8001dfe <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2c:	f3bf 8f4f 	dsb	sy
}
 8001d30:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3206      	adds	r2, #6
 8001d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d904      	bls.n	8001d5c <HAL_ETH_Transmit+0x84>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	1f1a      	subs	r2, r3, #4
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3106      	adds	r1, #6
 8001d68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d70:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8001d74:	f7ff fc68 	bl	8001648 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001d7a:	e039      	b.n	8001df0 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d84:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d012      	beq.n	8001db6 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	f043 0208 	orr.w	r2, r3, #8
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da8:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e023      	b.n	8001dfe <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d018      	beq.n	8001df0 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dbe:	f7ff fc43 	bl	8001648 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d302      	bcc.n	8001dd4 <HAL_ETH_Transmit+0xfc>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	f043 0204 	orr.w	r2, r3, #4
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001dea:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e006      	b.n	8001dfe <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	dbc1      	blt.n	8001d7c <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b088      	sub	sp, #32
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001e12:	2301      	movs	r3, #1
 8001e14:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e1a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	3212      	adds	r2, #18
 8001e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e26:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e2c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001e2e:	e03b      	b.n	8001ea8 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d112      	bne.n	8001e5e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f006 fa53 	bl	80082e8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	74fb      	strb	r3, [r7, #19]
 8001e4c:	e007      	b.n	8001e5e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	461a      	mov	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001e5e:	7cfb      	ldrb	r3, [r7, #19]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d021      	beq.n	8001ea8 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001e64:	f3bf 8f5f 	dmb	sy
}
 8001e68:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d004      	beq.n	8001e7c <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	e003      	b.n	8001e84 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001e82:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	3301      	adds	r3, #1
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d902      	bls.n	8001e96 <ETH_UpdateDescriptor+0x90>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	3b04      	subs	r3, #4
 8001e94:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	3212      	adds	r2, #18
 8001e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <ETH_UpdateDescriptor+0xae>
 8001eae:	7cfb      	ldrb	r3, [r7, #19]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1bd      	bne.n	8001e30 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d00d      	beq.n	8001eda <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e03e      	b.n	8001f82 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f0c:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	055b      	lsls	r3, r3, #21
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f043 030c 	orr.w	r3, r3, #12
 8001f30:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f44:	f7ff fb80 	bl	8001648 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f4a:	e009      	b.n	8001f60 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f4c:	f7ff fb7c 	bl	8001648 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f5a:	d901      	bls.n	8001f60 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e010      	b.n	8001f82 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ed      	bne.n	8001f4c <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e03c      	b.n	8002028 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fb6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	055b      	lsls	r3, r3, #21
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f023 030c 	bic.w	r3, r3, #12
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_ETH_WritePHYRegister+0xa4>)
 8001fee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <HAL_ETH_WritePHYRegister+0xa4>)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001ffa:	f7ff fb25 	bl	8001648 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002000:	e009      	b.n	8002016 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002002:	f7ff fb21 	bl	8001648 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002010:	d901      	bls.n	8002016 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e008      	b.n	8002028 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1ed      	bne.n	8002002 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40028000 	.word	0x40028000

08002034 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e1c3      	b.n	80023d0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf0c      	ite	eq
 800208e:	2301      	moveq	r3, #1
 8002090:	2300      	movne	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80020d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	bf14      	ite	ne
 800212e:	2301      	movne	r3, #1
 8002130:	2300      	moveq	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf14      	ite	ne
 8002196:	2301      	movne	r3, #1
 8002198:	2300      	moveq	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80021c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bf14      	ite	ne
 80021f2:	2301      	movne	r3, #1
 80021f4:	2300      	moveq	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	0e5b      	lsrs	r3, r3, #25
 8002292:	f003 021f 	and.w	r2, r3, #31
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 020f 	and.w	r2, r3, #15
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf14      	ite	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	2300      	moveq	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	b29a      	uxth	r2, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf14      	ite	ne
 8002346:	2301      	movne	r3, #1
 8002348:	2300      	moveq	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800235c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800236c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e00b      	b.n	8002408 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d105      	bne.n	8002406 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80023fa:	6839      	ldr	r1, [r7, #0]
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f85f 	bl	80024c0 <ETH_SetMACConfig>

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002420:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002428:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800242a:	f002 f8a9 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 800242e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d908      	bls.n	800244a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d804      	bhi.n	800244a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e027      	b.n	800249a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d908      	bls.n	8002464 <HAL_ETH_SetMDIOClockRange+0x54>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d204      	bcs.n	8002464 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	e01a      	b.n	800249a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d303      	bcc.n	8002474 <HAL_ETH_SetMDIOClockRange+0x64>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d911      	bls.n	8002498 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d908      	bls.n	800248e <HAL_ETH_SetMDIOClockRange+0x7e>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_ETH_SetMDIOClockRange+0xac>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d804      	bhi.n	800248e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e005      	b.n	800249a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	e000      	b.n	800249a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002498:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	01312cff 	.word	0x01312cff
 80024b0:	02160ebf 	.word	0x02160ebf
 80024b4:	03938700 	.word	0x03938700
 80024b8:	05f5e0ff 	.word	0x05f5e0ff
 80024bc:	08f0d17f 	.word	0x08f0d17f

080024c0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80024d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	791b      	ldrb	r3, [r3, #4]
 80024d8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80024da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	7b1b      	ldrb	r3, [r3, #12]
 80024e0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80024e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	7b5b      	ldrb	r3, [r3, #13]
 80024e8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	7b9b      	ldrb	r3, [r3, #14]
 80024f0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	7bdb      	ldrb	r3, [r3, #15]
 80024f8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	7c12      	ldrb	r2, [r2, #16]
 8002500:	2a00      	cmp	r2, #0
 8002502:	d102      	bne.n	800250a <ETH_SetMACConfig+0x4a>
 8002504:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002508:	e000      	b.n	800250c <ETH_SetMACConfig+0x4c>
 800250a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800250c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	7c52      	ldrb	r2, [r2, #17]
 8002512:	2a00      	cmp	r2, #0
 8002514:	d102      	bne.n	800251c <ETH_SetMACConfig+0x5c>
 8002516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800251a:	e000      	b.n	800251e <ETH_SetMACConfig+0x5e>
 800251c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800251e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	7c9b      	ldrb	r3, [r3, #18]
 8002524:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002526:	431a      	orrs	r2, r3
               macconf->Speed |
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800252c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002532:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	7f1b      	ldrb	r3, [r3, #28]
 8002538:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800253a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7f5b      	ldrb	r3, [r3, #29]
 8002540:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002542:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	7f92      	ldrb	r2, [r2, #30]
 8002548:	2a00      	cmp	r2, #0
 800254a:	d102      	bne.n	8002552 <ETH_SetMACConfig+0x92>
 800254c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002550:	e000      	b.n	8002554 <ETH_SetMACConfig+0x94>
 8002552:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002554:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	7fdb      	ldrb	r3, [r3, #31]
 800255a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800255c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002564:	2a00      	cmp	r2, #0
 8002566:	d102      	bne.n	800256e <ETH_SetMACConfig+0xae>
 8002568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800256c:	e000      	b.n	8002570 <ETH_SetMACConfig+0xb0>
 800256e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002570:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002576:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800257e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002580:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b56      	ldr	r3, [pc, #344]	; (80026ec <ETH_SetMACConfig+0x22c>)
 8002592:	4013      	ands	r3, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	68f9      	ldr	r1, [r7, #12]
 800259a:	430b      	orrs	r3, r1
 800259c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80025b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80025be:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80025c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80025c8:	2a00      	cmp	r2, #0
 80025ca:	d102      	bne.n	80025d2 <ETH_SetMACConfig+0x112>
 80025cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025d0:	e000      	b.n	80025d4 <ETH_SetMACConfig+0x114>
 80025d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80025d4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	4b42      	ldr	r3, [pc, #264]	; (80026f0 <ETH_SetMACConfig+0x230>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	430b      	orrs	r3, r1
 80025f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <ETH_SetMACConfig+0x234>)
 800260a:	4013      	ands	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	68f9      	ldr	r1, [r7, #12]
 8002612:	430b      	orrs	r3, r1
 8002614:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800261c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002622:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800262a:	2a00      	cmp	r2, #0
 800262c:	d101      	bne.n	8002632 <ETH_SetMACConfig+0x172>
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	e000      	b.n	8002634 <ETH_SetMACConfig+0x174>
 8002632:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002634:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002646:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800264a:	4013      	ands	r3, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	430b      	orrs	r3, r1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800265c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002664:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	f023 0103 	bic.w	r1, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	430a      	orrs	r2, r1
 800267e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800268a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80026a6:	2a00      	cmp	r2, #0
 80026a8:	d101      	bne.n	80026ae <ETH_SetMACConfig+0x1ee>
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	e000      	b.n	80026b0 <ETH_SetMACConfig+0x1f0>
 80026ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80026b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80026b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80026c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80026d0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	430a      	orrs	r2, r1
 80026dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	00048083 	.word	0x00048083
 80026f0:	c0f88000 	.word	0xc0f88000
 80026f4:	fffffef0 	.word	0xfffffef0

080026f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <ETH_SetDMAConfig+0xf8>)
 800270e:	4013      	ands	r3, r2
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	6811      	ldr	r1, [r2, #0]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	430b      	orrs	r3, r1
 800271a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800271e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	791b      	ldrb	r3, [r3, #4]
 8002724:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800272a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	7b1b      	ldrb	r3, [r3, #12]
 8002730:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <ETH_SetDMAConfig+0xfc>)
 8002742:	4013      	ands	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	68f9      	ldr	r1, [r7, #12]
 800274a:	430b      	orrs	r3, r1
 800274c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002750:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	7b5b      	ldrb	r3, [r3, #13]
 8002756:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002768:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <ETH_SetDMAConfig+0x100>)
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	430b      	orrs	r3, r1
 8002778:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800277c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	7d1b      	ldrb	r3, [r3, #20]
 8002788:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800278a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	7f5b      	ldrb	r3, [r3, #29]
 8002790:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <ETH_SetDMAConfig+0x104>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	68f9      	ldr	r1, [r7, #12]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027b2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	7f1b      	ldrb	r3, [r3, #28]
 80027ba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <ETH_SetDMAConfig+0x108>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	430b      	orrs	r3, r1
 80027dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027e0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	ffff87fd 	.word	0xffff87fd
 80027f4:	ffff2ffe 	.word	0xffff2ffe
 80027f8:	fffec000 	.word	0xfffec000
 80027fc:	ffc0efef 	.word	0xffc0efef
 8002800:	7fc0ffff 	.word	0x7fc0ffff

08002804 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b0a4      	sub	sp, #144	; 0x90
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002812:	2300      	movs	r3, #0
 8002814:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800282e:	2301      	movs	r3, #1
 8002830:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800283a:	2301      	movs	r3, #1
 800283c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800284c:	2300      	movs	r3, #0
 800284e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800285c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002860:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002868:	2300      	movs	r3, #0
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800286c:	2301      	movs	r3, #1
 800286e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800287e:	2300      	movs	r3, #0
 8002880:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002882:	2300      	movs	r3, #0
 8002884:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002886:	2300      	movs	r3, #0
 8002888:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002896:	2301      	movs	r3, #1
 8002898:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800289c:	2320      	movs	r3, #32
 800289e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80028ae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028b8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80028de:	2300      	movs	r3, #0
 80028e0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fde6 	bl	80024c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028f4:	2301      	movs	r3, #1
 80028f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028f8:	2301      	movs	r3, #1
 80028fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002900:	2300      	movs	r3, #0
 8002902:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800290a:	2300      	movs	r3, #0
 800290c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800290e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002912:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002918:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800291c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002924:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800292a:	f107 0308 	add.w	r3, r7, #8
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fee1 	bl	80026f8 <ETH_SetDMAConfig>
}
 8002936:	bf00      	nop
 8002938:	3790      	adds	r7, #144	; 0x90
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e01d      	b.n	8002988 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68d9      	ldr	r1, [r3, #12]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2200      	movs	r2, #0
 8002968:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	3206      	adds	r2, #6
 800297e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3301      	adds	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d9de      	bls.n	800294c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800299c:	461a      	mov	r2, r3
 800299e:	2303      	movs	r3, #3
 80029a0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e023      	b.n	8002a26 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6919      	ldr	r1, [r3, #16]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	3212      	adds	r2, #18
 8002a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3301      	adds	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d9d8      	bls.n	80029de <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a52:	461a      	mov	r2, r3
 8002a54:	2303      	movs	r3, #3
 8002a56:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a66:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b08d      	sub	sp, #52	; 0x34
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3318      	adds	r3, #24
 8002a9c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ace:	d007      	beq.n	8002ae0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e259      	b.n	8002f98 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d044      	beq.n	8002b7a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	4b75      	ldr	r3, [pc, #468]	; (8002ccc <ETH_Prepare_Tx_Descriptors+0x240>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002afc:	431a      	orrs	r2, r3
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d027      	beq.n	8002b7a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	041b      	lsls	r3, r3, #16
 8002b36:	431a      	orrs	r2, r3
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	431a      	orrs	r2, r3
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b68:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b78:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	6992      	ldr	r2, [r2, #24]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d036      	beq.n	8002c2a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002bc8:	f3bf 8f5f 	dmb	sy
}
 8002bcc:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	3301      	adds	r3, #1
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d902      	bls.n	8002bec <ETH_Prepare_Tx_Descriptors+0x160>
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	3b04      	subs	r3, #4
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf4:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c08:	d10f      	bne.n	8002c2a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c14:	f3bf 8f5f 	dmb	sy
}
 8002c18:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002c26:	2302      	movs	r3, #2
 8002c28:	e1b6      	b.n	8002f98 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	6852      	ldr	r2, [r2, #4]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d012      	beq.n	8002c7a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	6852      	ldr	r2, [r2, #4]
 8002c70:	0412      	lsls	r2, r2, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	e008      	b.n	8002c8c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d021      	beq.n	8002cdc <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	04db      	lsls	r3, r3, #19
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	69d2      	ldr	r2, [r2, #28]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	e02e      	b.n	8002d2a <ETH_Prepare_Tx_Descriptors+0x29e>
 8002ccc:	ffff0000 	.word	0xffff0000
 8002cd0:	ffffc000 	.word	0xffffc000
 8002cd4:	c000ffff 	.word	0xc000ffff
 8002cd8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4b7b      	ldr	r3, [pc, #492]	; (8002ed0 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	6852      	ldr	r2, [r2, #4]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	431a      	orrs	r2, r3
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d60:	f3bf 8f5f 	dmb	sy
}
 8002d64:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80da 	beq.w	8002f34 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d92:	e0cf      	b.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	3301      	adds	r3, #1
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d902      	bls.n	8002db2 <ETH_Prepare_Tx_Descriptors+0x326>
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	3b04      	subs	r3, #4
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dba:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dd4:	d007      	beq.n	8002de6 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	3304      	adds	r3, #4
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d029      	beq.n	8002e3a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df2:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df8:	e019      	b.n	8002e2e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002dfa:	f3bf 8f5f 	dmb	sy
}
 8002dfe:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	3301      	adds	r3, #1
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d902      	bls.n	8002e1e <ETH_Prepare_Tx_Descriptors+0x392>
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e26:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d3e1      	bcc.n	8002dfa <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0ae      	b.n	8002f98 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	6852      	ldr	r2, [r2, #4]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d012      	beq.n	8002e90 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	6852      	ldr	r2, [r2, #4]
 8002e86:	0412      	lsls	r2, r2, #16
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	e008      	b.n	8002ea2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2200      	movs	r2, #0
 8002e94:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	6a3a      	ldr	r2, [r7, #32]
 8002ea0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <ETH_Prepare_Tx_Descriptors+0x450>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	69d2      	ldr	r2, [r2, #28]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	60da      	str	r2, [r3, #12]
 8002ecc:	e020      	b.n	8002f10 <ETH_Prepare_Tx_Descriptors+0x484>
 8002ece:	bf00      	nop
 8002ed0:	ffff8000 	.word	0xffff8000
 8002ed4:	ffffc000 	.word	0xffffc000
 8002ed8:	c000ffff 	.word	0xc000ffff
 8002edc:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <ETH_Prepare_Tx_Descriptors+0x518>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	6852      	ldr	r2, [r2, #4]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002f16:	f3bf 8f5f 	dmb	sy
}
 8002f1a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f47f af2b 	bne.w	8002d94 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d006      	beq.n	8002f52 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	e005      	b.n	8002f5e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f6e:	6979      	ldr	r1, [r7, #20]
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	3304      	adds	r3, #4
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f7e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f80:	b672      	cpsid	i
}
 8002f82:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002f92:	b662      	cpsie	i
}
 8002f94:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3734      	adds	r7, #52	; 0x34
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	ffff8000 	.word	0xffff8000

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fb6:	4b89      	ldr	r3, [pc, #548]	; (80031dc <HAL_GPIO_Init+0x234>)
 8002fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fba:	e194      	b.n	80032e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8186 	beq.w	80032e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d005      	beq.n	8002fec <HAL_GPIO_Init+0x44>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d130      	bne.n	800304e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003022:	2201      	movs	r2, #1
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f003 0201 	and.w	r2, r3, #1
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b03      	cmp	r3, #3
 8003058:	d017      	beq.n	800308a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d123      	bne.n	80030de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	08da      	lsrs	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3208      	adds	r2, #8
 800309e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	220f      	movs	r2, #15
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	08da      	lsrs	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3208      	adds	r2, #8
 80030d8:	69b9      	ldr	r1, [r7, #24]
 80030da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	2203      	movs	r2, #3
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0203 	and.w	r2, r3, #3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80e0 	beq.w	80032e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003120:	4b2f      	ldr	r3, [pc, #188]	; (80031e0 <HAL_GPIO_Init+0x238>)
 8003122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003126:	4a2e      	ldr	r2, [pc, #184]	; (80031e0 <HAL_GPIO_Init+0x238>)
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_GPIO_Init+0x238>)
 8003132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800313e:	4a29      	ldr	r2, [pc, #164]	; (80031e4 <HAL_GPIO_Init+0x23c>)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3302      	adds	r3, #2
 8003146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a20      	ldr	r2, [pc, #128]	; (80031e8 <HAL_GPIO_Init+0x240>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d052      	beq.n	8003210 <HAL_GPIO_Init+0x268>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a1f      	ldr	r2, [pc, #124]	; (80031ec <HAL_GPIO_Init+0x244>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d031      	beq.n	80031d6 <HAL_GPIO_Init+0x22e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <HAL_GPIO_Init+0x248>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02b      	beq.n	80031d2 <HAL_GPIO_Init+0x22a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_GPIO_Init+0x24c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d025      	beq.n	80031ce <HAL_GPIO_Init+0x226>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <HAL_GPIO_Init+0x250>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01f      	beq.n	80031ca <HAL_GPIO_Init+0x222>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <HAL_GPIO_Init+0x254>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d019      	beq.n	80031c6 <HAL_GPIO_Init+0x21e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_GPIO_Init+0x258>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_GPIO_Init+0x21a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a19      	ldr	r2, [pc, #100]	; (8003204 <HAL_GPIO_Init+0x25c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00d      	beq.n	80031be <HAL_GPIO_Init+0x216>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a18      	ldr	r2, [pc, #96]	; (8003208 <HAL_GPIO_Init+0x260>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <HAL_GPIO_Init+0x212>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a17      	ldr	r2, [pc, #92]	; (800320c <HAL_GPIO_Init+0x264>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_GPIO_Init+0x20e>
 80031b2:	2309      	movs	r3, #9
 80031b4:	e02d      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031b6:	230a      	movs	r3, #10
 80031b8:	e02b      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031ba:	2308      	movs	r3, #8
 80031bc:	e029      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031be:	2307      	movs	r3, #7
 80031c0:	e027      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031c2:	2306      	movs	r3, #6
 80031c4:	e025      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031c6:	2305      	movs	r3, #5
 80031c8:	e023      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031ca:	2304      	movs	r3, #4
 80031cc:	e021      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031ce:	2303      	movs	r3, #3
 80031d0:	e01f      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e01d      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e01b      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031da:	bf00      	nop
 80031dc:	58000080 	.word	0x58000080
 80031e0:	58024400 	.word	0x58024400
 80031e4:	58000400 	.word	0x58000400
 80031e8:	58020000 	.word	0x58020000
 80031ec:	58020400 	.word	0x58020400
 80031f0:	58020800 	.word	0x58020800
 80031f4:	58020c00 	.word	0x58020c00
 80031f8:	58021000 	.word	0x58021000
 80031fc:	58021400 	.word	0x58021400
 8003200:	58021800 	.word	0x58021800
 8003204:	58021c00 	.word	0x58021c00
 8003208:	58022000 	.word	0x58022000
 800320c:	58022400 	.word	0x58022400
 8003210:	2300      	movs	r3, #0
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	f002 0203 	and.w	r2, r2, #3
 8003218:	0092      	lsls	r2, r2, #2
 800321a:	4093      	lsls	r3, r2
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003222:	4938      	ldr	r1, [pc, #224]	; (8003304 <HAL_GPIO_Init+0x35c>)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	3302      	adds	r3, #2
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	3301      	adds	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f47f ae63 	bne.w	8002fbc <HAL_GPIO_Init+0x14>
  }
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	3724      	adds	r7, #36	; 0x24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	58000400 	.word	0x58000400

08003308 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330a:	b08f      	sub	sp, #60	; 0x3c
 800330c:	af0a      	add	r7, sp, #40	; 0x28
 800330e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e116      	b.n	8003548 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d106      	bne.n	800333a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7fd fe13 	bl	8000f60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f004 f8dd 	bl	8007518 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	687e      	ldr	r6, [r7, #4]
 8003366:	466d      	mov	r5, sp
 8003368:	f106 0410 	add.w	r4, r6, #16
 800336c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800336e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003374:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003378:	e885 0003 	stmia.w	r5, {r0, r1}
 800337c:	1d33      	adds	r3, r6, #4
 800337e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003380:	6838      	ldr	r0, [r7, #0]
 8003382:	f004 f85b 	bl	800743c <USB_CoreInit>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0d7      	b.n	8003548 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f004 f8cb 	bl	800753a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	e04a      	b.n	8003440 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	333d      	adds	r3, #61	; 0x3d
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	333c      	adds	r3, #60	; 0x3c
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	b298      	uxth	r0, r3
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3356      	adds	r3, #86	; 0x56
 80033e6:	4602      	mov	r2, r0
 80033e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3340      	adds	r3, #64	; 0x40
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3344      	adds	r3, #68	; 0x44
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3348      	adds	r3, #72	; 0x48
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	334c      	adds	r3, #76	; 0x4c
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	3301      	adds	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	d3af      	bcc.n	80033aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e044      	b.n	80034da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	3301      	adds	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3b5      	bcc.n	8003450 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	687e      	ldr	r6, [r7, #4]
 80034ec:	466d      	mov	r5, sp
 80034ee:	f106 0410 	add.w	r4, r6, #16
 80034f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003502:	1d33      	adds	r3, r6, #4
 8003504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003506:	6838      	ldr	r0, [r7, #0]
 8003508:	f004 f864 	bl	80075d4 <USB_DevInit>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e014      	b.n	8003548 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b01      	cmp	r3, #1
 8003534:	d102      	bne.n	800353c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f80a 	bl	8003550 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f004 fa22 	bl	800798a <USB_DevDisconnect>

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003550 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_PCDEx_ActivateLPM+0x44>)
 8003580:	4313      	orrs	r3, r2
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	10000003 	.word	0x10000003

08003598 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80035a0:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	2b06      	cmp	r3, #6
 80035aa:	d00a      	beq.n	80035c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035ac:	4b26      	ldr	r3, [pc, #152]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d001      	beq.n	80035be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e040      	b.n	8003640 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e03e      	b.n	8003640 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035c2:	4b21      	ldr	r3, [pc, #132]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80035ca:	491f      	ldr	r1, [pc, #124]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035d2:	f7fe f839 	bl	8001648 <HAL_GetTick>
 80035d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035d8:	e009      	b.n	80035ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035da:	f7fe f835 	bl	8001648 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035e8:	d901      	bls.n	80035ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e028      	b.n	8003640 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fa:	d1ee      	bne.n	80035da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b1e      	cmp	r3, #30
 8003600:	d008      	beq.n	8003614 <HAL_PWREx_ConfigSupply+0x7c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b2e      	cmp	r3, #46	; 0x2e
 8003606:	d005      	beq.n	8003614 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b1d      	cmp	r3, #29
 800360c:	d002      	beq.n	8003614 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b2d      	cmp	r3, #45	; 0x2d
 8003612:	d114      	bne.n	800363e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003614:	f7fe f818 	bl	8001648 <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800361a:	e009      	b.n	8003630 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800361c:	f7fe f814 	bl	8001648 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800362a:	d901      	bls.n	8003630 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_PWREx_ConfigSupply+0xb0>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363c:	d1ee      	bne.n	800361c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	58024800 	.word	0x58024800

0800364c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365a:	60d3      	str	r3, [r2, #12]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	58024800 	.word	0x58024800

0800366c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08c      	sub	sp, #48	; 0x30
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f000 bc48 	b.w	8003f10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8088 	beq.w	800379e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800368e:	4b99      	ldr	r3, [pc, #612]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003698:	4b96      	ldr	r3, [pc, #600]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d007      	beq.n	80036b4 <HAL_RCC_OscConfig+0x48>
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	2b18      	cmp	r3, #24
 80036a8:	d111      	bne.n	80036ce <HAL_RCC_OscConfig+0x62>
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d10c      	bne.n	80036ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	4b8f      	ldr	r3, [pc, #572]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d06d      	beq.n	800379c <HAL_RCC_OscConfig+0x130>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d169      	bne.n	800379c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f000 bc21 	b.w	8003f10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x7a>
 80036d8:	4b86      	ldr	r3, [pc, #536]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a85      	ldr	r2, [pc, #532]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	e02e      	b.n	8003744 <HAL_RCC_OscConfig+0xd8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x9c>
 80036ee:	4b81      	ldr	r3, [pc, #516]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a80      	ldr	r2, [pc, #512]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80036f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b7e      	ldr	r3, [pc, #504]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a7d      	ldr	r2, [pc, #500]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e01d      	b.n	8003744 <HAL_RCC_OscConfig+0xd8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003710:	d10c      	bne.n	800372c <HAL_RCC_OscConfig+0xc0>
 8003712:	4b78      	ldr	r3, [pc, #480]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a77      	ldr	r2, [pc, #476]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b75      	ldr	r3, [pc, #468]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a74      	ldr	r2, [pc, #464]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e00b      	b.n	8003744 <HAL_RCC_OscConfig+0xd8>
 800372c:	4b71      	ldr	r3, [pc, #452]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a70      	ldr	r2, [pc, #448]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	4b6e      	ldr	r3, [pc, #440]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a6d      	ldr	r2, [pc, #436]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 800373e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d013      	beq.n	8003774 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fd ff7c 	bl	8001648 <HAL_GetTick>
 8003750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003754:	f7fd ff78 	bl	8001648 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e3d4      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003766:	4b63      	ldr	r3, [pc, #396]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0xe8>
 8003772:	e014      	b.n	800379e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fd ff68 	bl	8001648 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800377c:	f7fd ff64 	bl	8001648 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e3c0      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800378e:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x110>
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80ca 	beq.w	8003940 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ac:	4b51      	ldr	r3, [pc, #324]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037b6:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_RCC_OscConfig+0x166>
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	2b18      	cmp	r3, #24
 80037c6:	d156      	bne.n	8003876 <HAL_RCC_OscConfig+0x20a>
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d151      	bne.n	8003876 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037d2:	4b48      	ldr	r3, [pc, #288]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_RCC_OscConfig+0x17e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e392      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037ea:	4b42      	ldr	r3, [pc, #264]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 0219 	bic.w	r2, r3, #25
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	493f      	ldr	r1, [pc, #252]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd ff24 	bl	8001648 <HAL_GetTick>
 8003800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003804:	f7fd ff20 	bl	8001648 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e37c      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003822:	f7fd ff41 	bl	80016a8 <HAL_GetREVID>
 8003826:	4603      	mov	r3, r0
 8003828:	f241 0203 	movw	r2, #4099	; 0x1003
 800382c:	4293      	cmp	r3, r2
 800382e:	d817      	bhi.n	8003860 <HAL_RCC_OscConfig+0x1f4>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b40      	cmp	r3, #64	; 0x40
 8003836:	d108      	bne.n	800384a <HAL_RCC_OscConfig+0x1de>
 8003838:	4b2e      	ldr	r3, [pc, #184]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003840:	4a2c      	ldr	r2, [pc, #176]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003846:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003848:	e07a      	b.n	8003940 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384a:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	031b      	lsls	r3, r3, #12
 8003858:	4926      	ldr	r1, [pc, #152]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385e:	e06f      	b.n	8003940 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	061b      	lsls	r3, r3, #24
 800386e:	4921      	ldr	r1, [pc, #132]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003874:	e064      	b.n	8003940 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d047      	beq.n	800390e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800387e:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 0219 	bic.w	r2, r3, #25
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	491a      	ldr	r1, [pc, #104]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fd feda 	bl	8001648 <HAL_GetTick>
 8003894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003898:	f7fd fed6 	bl	8001648 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e332      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b6:	f7fd fef7 	bl	80016a8 <HAL_GetREVID>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d819      	bhi.n	80038f8 <HAL_RCC_OscConfig+0x28c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d108      	bne.n	80038de <HAL_RCC_OscConfig+0x272>
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038d4:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80038d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038da:	6053      	str	r3, [r2, #4]
 80038dc:	e030      	b.n	8003940 <HAL_RCC_OscConfig+0x2d4>
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	031b      	lsls	r3, r3, #12
 80038ec:	4901      	ldr	r1, [pc, #4]	; (80038f4 <HAL_RCC_OscConfig+0x288>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
 80038f2:	e025      	b.n	8003940 <HAL_RCC_OscConfig+0x2d4>
 80038f4:	58024400 	.word	0x58024400
 80038f8:	4b9a      	ldr	r3, [pc, #616]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	4997      	ldr	r1, [pc, #604]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
 800390c:	e018      	b.n	8003940 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800390e:	4b95      	ldr	r3, [pc, #596]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a94      	ldr	r2, [pc, #592]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003914:	f023 0301 	bic.w	r3, r3, #1
 8003918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7fd fe95 	bl	8001648 <HAL_GetTick>
 800391e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003922:	f7fd fe91 	bl	8001648 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e2ed      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003934:	4b8b      	ldr	r3, [pc, #556]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80a9 	beq.w	8003aa0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394e:	4b85      	ldr	r3, [pc, #532]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003956:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003958:	4b82      	ldr	r3, [pc, #520]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d007      	beq.n	8003974 <HAL_RCC_OscConfig+0x308>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b18      	cmp	r3, #24
 8003968:	d13a      	bne.n	80039e0 <HAL_RCC_OscConfig+0x374>
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d135      	bne.n	80039e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003974:	4b7b      	ldr	r3, [pc, #492]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_OscConfig+0x320>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	2b80      	cmp	r3, #128	; 0x80
 8003986:	d001      	beq.n	800398c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e2c1      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800398c:	f7fd fe8c 	bl	80016a8 <HAL_GetREVID>
 8003990:	4603      	mov	r3, r0
 8003992:	f241 0203 	movw	r2, #4099	; 0x1003
 8003996:	4293      	cmp	r3, r2
 8003998:	d817      	bhi.n	80039ca <HAL_RCC_OscConfig+0x35e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d108      	bne.n	80039b4 <HAL_RCC_OscConfig+0x348>
 80039a2:	4b70      	ldr	r3, [pc, #448]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039aa:	4a6e      	ldr	r2, [pc, #440]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039b2:	e075      	b.n	8003aa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039b4:	4b6b      	ldr	r3, [pc, #428]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	069b      	lsls	r3, r3, #26
 80039c2:	4968      	ldr	r1, [pc, #416]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039c8:	e06a      	b.n	8003aa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ca:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	061b      	lsls	r3, r3, #24
 80039d8:	4962      	ldr	r1, [pc, #392]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039de:	e05f      	b.n	8003aa0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d042      	beq.n	8003a6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039e8:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a5d      	ldr	r2, [pc, #372]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 80039ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fd fe28 	bl	8001648 <HAL_GetTick>
 80039f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039fc:	f7fd fe24 	bl	8001648 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e280      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a0e:	4b55      	ldr	r3, [pc, #340]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a1a:	f7fd fe45 	bl	80016a8 <HAL_GetREVID>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d817      	bhi.n	8003a58 <HAL_RCC_OscConfig+0x3ec>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d108      	bne.n	8003a42 <HAL_RCC_OscConfig+0x3d6>
 8003a30:	4b4c      	ldr	r3, [pc, #304]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a38:	4a4a      	ldr	r2, [pc, #296]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003a3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a3e:	6053      	str	r3, [r2, #4]
 8003a40:	e02e      	b.n	8003aa0 <HAL_RCC_OscConfig+0x434>
 8003a42:	4b48      	ldr	r3, [pc, #288]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	069b      	lsls	r3, r3, #26
 8003a50:	4944      	ldr	r1, [pc, #272]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]
 8003a56:	e023      	b.n	8003aa0 <HAL_RCC_OscConfig+0x434>
 8003a58:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	493f      	ldr	r1, [pc, #252]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60cb      	str	r3, [r1, #12]
 8003a6c:	e018      	b.n	8003aa0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a6e:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3c      	ldr	r2, [pc, #240]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7fd fde5 	bl	8001648 <HAL_GetTick>
 8003a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a82:	f7fd fde1 	bl	8001648 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e23d      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a94:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d036      	beq.n	8003b1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d019      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab4:	4b2b      	ldr	r3, [pc, #172]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab8:	4a2a      	ldr	r2, [pc, #168]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fdc2 	bl	8001648 <HAL_GetTick>
 8003ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac8:	f7fd fdbe 	bl	8001648 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e21a      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ada:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x45c>
 8003ae6:	e018      	b.n	8003b1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aec:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fd fda8 	bl	8001648 <HAL_GetTick>
 8003af8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afc:	f7fd fda4 	bl	8001648 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e200      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d039      	beq.n	8003b9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01c      	beq.n	8003b68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a0c      	ldr	r2, [pc, #48]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b3a:	f7fd fd85 	bl	8001648 <HAL_GetTick>
 8003b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b42:	f7fd fd81 	bl	8001648 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e1dd      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_RCC_OscConfig+0x4f8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x4d6>
 8003b60:	e01b      	b.n	8003b9a <HAL_RCC_OscConfig+0x52e>
 8003b62:	bf00      	nop
 8003b64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b68:	4b9b      	ldr	r3, [pc, #620]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a9a      	ldr	r2, [pc, #616]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b74:	f7fd fd68 	bl	8001648 <HAL_GetTick>
 8003b78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b7c:	f7fd fd64 	bl	8001648 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e1c0      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b8e:	4b92      	ldr	r3, [pc, #584]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8081 	beq.w	8003caa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ba8:	4b8c      	ldr	r3, [pc, #560]	; (8003ddc <HAL_RCC_OscConfig+0x770>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a8b      	ldr	r2, [pc, #556]	; (8003ddc <HAL_RCC_OscConfig+0x770>)
 8003bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bb4:	f7fd fd48 	bl	8001648 <HAL_GetTick>
 8003bb8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbc:	f7fd fd44 	bl	8001648 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e1a0      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bce:	4b83      	ldr	r3, [pc, #524]	; (8003ddc <HAL_RCC_OscConfig+0x770>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x584>
 8003be2:	4b7d      	ldr	r3, [pc, #500]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a7c      	ldr	r2, [pc, #496]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	e02d      	b.n	8003c4c <HAL_RCC_OscConfig+0x5e0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x5a6>
 8003bf8:	4b77      	ldr	r3, [pc, #476]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a76      	ldr	r2, [pc, #472]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	4b74      	ldr	r3, [pc, #464]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a73      	ldr	r2, [pc, #460]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003c0a:	f023 0304 	bic.w	r3, r3, #4
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	e01c      	b.n	8003c4c <HAL_RCC_OscConfig+0x5e0>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5c8>
 8003c1a:	4b6f      	ldr	r3, [pc, #444]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a6e      	ldr	r2, [pc, #440]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
 8003c26:	4b6c      	ldr	r3, [pc, #432]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a6b      	ldr	r2, [pc, #428]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0x5e0>
 8003c34:	4b68      	ldr	r3, [pc, #416]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a67      	ldr	r2, [pc, #412]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c40:	4b65      	ldr	r3, [pc, #404]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4a64      	ldr	r2, [pc, #400]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003c46:	f023 0304 	bic.w	r3, r3, #4
 8003c4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fd fcf8 	bl	8001648 <HAL_GetTick>
 8003c58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fcf4 	bl	8001648 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e14e      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c72:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0ee      	beq.n	8003c5c <HAL_RCC_OscConfig+0x5f0>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd fce2 	bl	8001648 <HAL_GetTick>
 8003c84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fd fcde 	bl	8001648 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e138      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c9e:	4b4e      	ldr	r3, [pc, #312]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ee      	bne.n	8003c88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 812d 	beq.w	8003f0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003cb4:	4b48      	ldr	r3, [pc, #288]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cbc:	2b18      	cmp	r3, #24
 8003cbe:	f000 80bd 	beq.w	8003e3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	f040 809e 	bne.w	8003e08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ccc:	4b42      	ldr	r3, [pc, #264]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a41      	ldr	r2, [pc, #260]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fcb6 	bl	8001648 <HAL_GetTick>
 8003cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fd fcb2 	bl	8001648 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e10e      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cfe:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d02:	4b37      	ldr	r3, [pc, #220]	; (8003de0 <HAL_RCC_OscConfig+0x774>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d0e:	0112      	lsls	r2, r2, #4
 8003d10:	430a      	orrs	r2, r1
 8003d12:	4931      	ldr	r1, [pc, #196]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	628b      	str	r3, [r1, #40]	; 0x28
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	3b01      	subs	r3, #1
 8003d28:	025b      	lsls	r3, r3, #9
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	3b01      	subs	r3, #1
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	3b01      	subs	r3, #1
 8003d42:	061b      	lsls	r3, r3, #24
 8003d44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d48:	4923      	ldr	r1, [pc, #140]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d4e:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d5a:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d5e:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <HAL_RCC_OscConfig+0x778>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d66:	00d2      	lsls	r2, r2, #3
 8003d68:	491b      	ldr	r1, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f023 020c 	bic.w	r2, r3, #12
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4917      	ldr	r1, [pc, #92]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d80:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	f023 0202 	bic.w	r2, r3, #2
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	4912      	ldr	r1, [pc, #72]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	4a10      	ldr	r2, [pc, #64]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	4a0d      	ldr	r2, [pc, #52]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4a07      	ldr	r2, [pc, #28]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <HAL_RCC_OscConfig+0x76c>)
 8003dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fd fc3b 	bl	8001648 <HAL_GetTick>
 8003dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dd4:	e011      	b.n	8003dfa <HAL_RCC_OscConfig+0x78e>
 8003dd6:	bf00      	nop
 8003dd8:	58024400 	.word	0x58024400
 8003ddc:	58024800 	.word	0x58024800
 8003de0:	fffffc0c 	.word	0xfffffc0c
 8003de4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fc2e 	bl	8001648 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e08a      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dfa:	4b47      	ldr	r3, [pc, #284]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x77c>
 8003e06:	e082      	b.n	8003f0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e08:	4b43      	ldr	r3, [pc, #268]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a42      	ldr	r2, [pc, #264]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fd fc18 	bl	8001648 <HAL_GetTick>
 8003e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fd fc14 	bl	8001648 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e070      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e2e:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x7b0>
 8003e3a:	e068      	b.n	8003f0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e3c:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e42:	4b35      	ldr	r3, [pc, #212]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d031      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f003 0203 	and.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d12a      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d122      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d11a      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	0a5b      	lsrs	r3, r3, #9
 8003e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d111      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d108      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	0e1b      	lsrs	r3, r3, #24
 8003ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e02b      	b.n	8003f10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003eb8:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebc:	08db      	lsrs	r3, r3, #3
 8003ebe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ec2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d01f      	beq.n	8003f0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003ece:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	4a11      	ldr	r2, [pc, #68]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eda:	f7fd fbb5 	bl	8001648 <HAL_GetTick>
 8003ede:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ee0:	bf00      	nop
 8003ee2:	f7fd fbb1 	bl	8001648 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d0f9      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <HAL_RCC_OscConfig+0x8b0>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003efa:	00d2      	lsls	r2, r2, #3
 8003efc:	4906      	ldr	r1, [pc, #24]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <HAL_RCC_OscConfig+0x8ac>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3730      	adds	r7, #48	; 0x30
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	58024400 	.word	0x58024400
 8003f1c:	ffff0007 	.word	0xffff0007

08003f20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e19c      	b.n	800426e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f34:	4b8a      	ldr	r3, [pc, #552]	; (8004160 <HAL_RCC_ClockConfig+0x240>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d910      	bls.n	8003f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f42:	4b87      	ldr	r3, [pc, #540]	; (8004160 <HAL_RCC_ClockConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 020f 	bic.w	r2, r3, #15
 8003f4a:	4985      	ldr	r1, [pc, #532]	; (8004160 <HAL_RCC_ClockConfig+0x240>)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b83      	ldr	r3, [pc, #524]	; (8004160 <HAL_RCC_ClockConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e184      	b.n	800426e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d010      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	4b7b      	ldr	r3, [pc, #492]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d908      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f80:	4b78      	ldr	r3, [pc, #480]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	4975      	ldr	r1, [pc, #468]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d010      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	4b70      	ldr	r3, [pc, #448]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d908      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fae:	4b6d      	ldr	r3, [pc, #436]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	496a      	ldr	r1, [pc, #424]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d010      	beq.n	8003fee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	4b64      	ldr	r3, [pc, #400]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d908      	bls.n	8003fee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fdc:	4b61      	ldr	r3, [pc, #388]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	495e      	ldr	r1, [pc, #376]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d010      	beq.n	800401c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	4b59      	ldr	r3, [pc, #356]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004006:	429a      	cmp	r2, r3
 8004008:	d908      	bls.n	800401c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800400a:	4b56      	ldr	r3, [pc, #344]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4953      	ldr	r1, [pc, #332]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8004018:	4313      	orrs	r3, r2
 800401a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	4b4d      	ldr	r3, [pc, #308]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	429a      	cmp	r2, r3
 8004036:	d908      	bls.n	800404a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004038:	4b4a      	ldr	r3, [pc, #296]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f023 020f 	bic.w	r2, r3, #15
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4947      	ldr	r1, [pc, #284]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8004046:	4313      	orrs	r3, r2
 8004048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d055      	beq.n	8004102 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004056:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	4940      	ldr	r1, [pc, #256]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8004064:	4313      	orrs	r3, r2
 8004066:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d107      	bne.n	8004080 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004070:	4b3c      	ldr	r3, [pc, #240]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d121      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0f6      	b.n	800426e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d107      	bne.n	8004098 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d115      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0ea      	b.n	800426e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040a0:	4b30      	ldr	r3, [pc, #192]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0de      	b.n	800426e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040b0:	4b2c      	ldr	r3, [pc, #176]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0d6      	b.n	800426e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040c0:	4b28      	ldr	r3, [pc, #160]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f023 0207 	bic.w	r2, r3, #7
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4925      	ldr	r1, [pc, #148]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d2:	f7fd fab9 	bl	8001648 <HAL_GetTick>
 80040d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040da:	f7fd fab5 	bl	8001648 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e0be      	b.n	800426e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f0:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	429a      	cmp	r2, r3
 8004100:	d1eb      	bne.n	80040da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d010      	beq.n	8004130 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	429a      	cmp	r2, r3
 800411c:	d208      	bcs.n	8004130 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411e:	4b11      	ldr	r3, [pc, #68]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f023 020f 	bic.w	r2, r3, #15
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	490e      	ldr	r1, [pc, #56]	; (8004164 <HAL_RCC_ClockConfig+0x244>)
 800412c:	4313      	orrs	r3, r2
 800412e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_ClockConfig+0x240>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d214      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <HAL_RCC_ClockConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 020f 	bic.w	r2, r3, #15
 8004146:	4906      	ldr	r1, [pc, #24]	; (8004160 <HAL_RCC_ClockConfig+0x240>)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b04      	ldr	r3, [pc, #16]	; (8004160 <HAL_RCC_ClockConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e086      	b.n	800426e <HAL_RCC_ClockConfig+0x34e>
 8004160:	52002000 	.word	0x52002000
 8004164:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d010      	beq.n	8004196 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	4b3f      	ldr	r3, [pc, #252]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004180:	429a      	cmp	r2, r3
 8004182:	d208      	bcs.n	8004196 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004184:	4b3c      	ldr	r3, [pc, #240]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	4939      	ldr	r1, [pc, #228]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 8004192:	4313      	orrs	r3, r2
 8004194:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d010      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	4b34      	ldr	r3, [pc, #208]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d208      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041b2:	4b31      	ldr	r3, [pc, #196]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	492e      	ldr	r1, [pc, #184]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d010      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	4b28      	ldr	r3, [pc, #160]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041dc:	429a      	cmp	r2, r3
 80041de:	d208      	bcs.n	80041f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	4922      	ldr	r1, [pc, #136]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d010      	beq.n	8004220 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800420a:	429a      	cmp	r2, r3
 800420c:	d208      	bcs.n	8004220 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	4917      	ldr	r1, [pc, #92]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 800421c:	4313      	orrs	r3, r2
 800421e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004220:	f000 f834 	bl	800428c <HAL_RCC_GetSysClockFreq>
 8004224:	4602      	mov	r2, r0
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	4912      	ldr	r1, [pc, #72]	; (800427c <HAL_RCC_ClockConfig+0x35c>)
 8004232:	5ccb      	ldrb	r3, [r1, r3]
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
 800423c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <HAL_RCC_ClockConfig+0x358>)
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	4a0d      	ldr	r2, [pc, #52]	; (800427c <HAL_RCC_ClockConfig+0x35c>)
 8004248:	5cd3      	ldrb	r3, [r2, r3]
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
 8004254:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x360>)
 8004256:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004258:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <HAL_RCC_ClockConfig+0x364>)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_RCC_ClockConfig+0x368>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd f9a6 	bl	80015b4 <HAL_InitTick>
 8004268:	4603      	mov	r3, r0
 800426a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
 800427c:	08015b8c 	.word	0x08015b8c
 8004280:	24000004 	.word	0x24000004
 8004284:	24000000 	.word	0x24000000
 8004288:	24000008 	.word	0x24000008

0800428c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004292:	4bb3      	ldr	r3, [pc, #716]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800429a:	2b18      	cmp	r3, #24
 800429c:	f200 8155 	bhi.w	800454a <HAL_RCC_GetSysClockFreq+0x2be>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	0800430d 	.word	0x0800430d
 80042ac:	0800454b 	.word	0x0800454b
 80042b0:	0800454b 	.word	0x0800454b
 80042b4:	0800454b 	.word	0x0800454b
 80042b8:	0800454b 	.word	0x0800454b
 80042bc:	0800454b 	.word	0x0800454b
 80042c0:	0800454b 	.word	0x0800454b
 80042c4:	0800454b 	.word	0x0800454b
 80042c8:	08004333 	.word	0x08004333
 80042cc:	0800454b 	.word	0x0800454b
 80042d0:	0800454b 	.word	0x0800454b
 80042d4:	0800454b 	.word	0x0800454b
 80042d8:	0800454b 	.word	0x0800454b
 80042dc:	0800454b 	.word	0x0800454b
 80042e0:	0800454b 	.word	0x0800454b
 80042e4:	0800454b 	.word	0x0800454b
 80042e8:	08004339 	.word	0x08004339
 80042ec:	0800454b 	.word	0x0800454b
 80042f0:	0800454b 	.word	0x0800454b
 80042f4:	0800454b 	.word	0x0800454b
 80042f8:	0800454b 	.word	0x0800454b
 80042fc:	0800454b 	.word	0x0800454b
 8004300:	0800454b 	.word	0x0800454b
 8004304:	0800454b 	.word	0x0800454b
 8004308:	0800433f 	.word	0x0800433f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800430c:	4b94      	ldr	r3, [pc, #592]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004318:	4b91      	ldr	r3, [pc, #580]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	08db      	lsrs	r3, r3, #3
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	4a90      	ldr	r2, [pc, #576]	; (8004564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800432a:	e111      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800432c:	4b8d      	ldr	r3, [pc, #564]	; (8004564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800432e:	61bb      	str	r3, [r7, #24]
      break;
 8004330:	e10e      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004332:	4b8d      	ldr	r3, [pc, #564]	; (8004568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004334:	61bb      	str	r3, [r7, #24]
      break;
 8004336:	e10b      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004338:	4b8c      	ldr	r3, [pc, #560]	; (800456c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800433a:	61bb      	str	r3, [r7, #24]
      break;
 800433c:	e108      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800433e:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004348:	4b85      	ldr	r3, [pc, #532]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004352:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004354:	4b82      	ldr	r3, [pc, #520]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800435e:	4b80      	ldr	r3, [pc, #512]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	08db      	lsrs	r3, r3, #3
 8004364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004376:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80e1 	beq.w	8004544 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b02      	cmp	r3, #2
 8004386:	f000 8083 	beq.w	8004490 <HAL_RCC_GetSysClockFreq+0x204>
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b02      	cmp	r3, #2
 800438e:	f200 80a1 	bhi.w	80044d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0x114>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d056      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x1c0>
 800439e:	e099      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a0:	4b6f      	ldr	r3, [pc, #444]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02d      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043ac:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	4a6b      	ldr	r2, [pc, #428]	; (8004564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
 80043bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	ee07 3a90 	vmov	s15, r3
 80043c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d6:	4b62      	ldr	r3, [pc, #392]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004402:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004406:	e087      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004574 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441a:	4b51      	ldr	r3, [pc, #324]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442a:	ed97 6a02 	vldr	s12, [r7, #8]
 800442e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800443e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004446:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800444a:	e065      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004456:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004578 <HAL_RCC_GetSysClockFreq+0x2ec>
 800445a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445e:	4b40      	ldr	r3, [pc, #256]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004472:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800448e:	e043      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800457c <HAL_RCC_GetSysClockFreq+0x2f0>
 800449e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a2:	4b2f      	ldr	r3, [pc, #188]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044d2:	e021      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004578 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004512:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004516:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	0a5b      	lsrs	r3, r3, #9
 800451e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004522:	3301      	adds	r3, #1
 8004524:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	ee07 3a90 	vmov	s15, r3
 800452c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004530:	edd7 6a07 	vldr	s13, [r7, #28]
 8004534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800453c:	ee17 3a90 	vmov	r3, s15
 8004540:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004542:	e005      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
      break;
 8004548:	e002      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800454c:	61bb      	str	r3, [r7, #24]
      break;
 800454e:	bf00      	nop
  }

  return sysclockfreq;
 8004550:	69bb      	ldr	r3, [r7, #24]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3724      	adds	r7, #36	; 0x24
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	58024400 	.word	0x58024400
 8004564:	03d09000 	.word	0x03d09000
 8004568:	003d0900 	.word	0x003d0900
 800456c:	007a1200 	.word	0x007a1200
 8004570:	46000000 	.word	0x46000000
 8004574:	4c742400 	.word	0x4c742400
 8004578:	4a742400 	.word	0x4a742400
 800457c:	4af42400 	.word	0x4af42400

08004580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004586:	f7ff fe81 	bl	800428c <HAL_RCC_GetSysClockFreq>
 800458a:	4602      	mov	r2, r0
 800458c:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	490f      	ldr	r1, [pc, #60]	; (80045d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004598:	5ccb      	ldrb	r3, [r1, r3]
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	fa22 f303 	lsr.w	r3, r2, r3
 80045a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045a4:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ba:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80045bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045be:	4a07      	ldr	r2, [pc, #28]	; (80045dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	58024400 	.word	0x58024400
 80045d4:	08015b8c 	.word	0x08015b8c
 80045d8:	24000004 	.word	0x24000004
 80045dc:	24000000 	.word	0x24000000

080045e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045e4:	f7ff ffcc 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045e8:	4602      	mov	r2, r0
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	4904      	ldr	r1, [pc, #16]	; (8004608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045f6:	5ccb      	ldrb	r3, [r1, r3]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	58024400 	.word	0x58024400
 8004608:	08015b8c 	.word	0x08015b8c

0800460c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004610:	f7ff ffb6 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	4904      	ldr	r1, [pc, #16]	; (8004634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	58024400 	.word	0x58024400
 8004634:	08015b8c 	.word	0x08015b8c

08004638 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800463c:	b0ca      	sub	sp, #296	; 0x128
 800463e:	af00      	add	r7, sp, #0
 8004640:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004644:	2300      	movs	r3, #0
 8004646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800464a:	2300      	movs	r3, #0
 800464c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800465c:	2500      	movs	r5, #0
 800465e:	ea54 0305 	orrs.w	r3, r4, r5
 8004662:	d049      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800466a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800466e:	d02f      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004674:	d828      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800467a:	d01a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800467c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004680:	d822      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800468a:	d007      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800468c:	e01c      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468e:	4bb8      	ldr	r3, [pc, #736]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	4ab7      	ldr	r2, [pc, #732]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004698:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800469a:	e01a      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a0:	3308      	adds	r3, #8
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f001 fc8f 	bl	8005fc8 <RCCEx_PLL2_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046b0:	e00f      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b6:	3328      	adds	r3, #40	; 0x28
 80046b8:	2102      	movs	r1, #2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 fd36 	bl	800612c <RCCEx_PLL3_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046c6:	e004      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046ce:	e000      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80046d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046da:	4ba5      	ldr	r3, [pc, #660]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e8:	4aa1      	ldr	r2, [pc, #644]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6513      	str	r3, [r2, #80]	; 0x50
 80046ee:	e003      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004704:	f04f 0900 	mov.w	r9, #0
 8004708:	ea58 0309 	orrs.w	r3, r8, r9
 800470c:	d047      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	2b04      	cmp	r3, #4
 8004716:	d82a      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004718:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004735 	.word	0x08004735
 8004724:	08004743 	.word	0x08004743
 8004728:	08004759 	.word	0x08004759
 800472c:	08004777 	.word	0x08004777
 8004730:	08004777 	.word	0x08004777
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004734:	4b8e      	ldr	r3, [pc, #568]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	4a8d      	ldr	r2, [pc, #564]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800473a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004740:	e01a      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004746:	3308      	adds	r3, #8
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f001 fc3c 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004756:	e00f      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475c:	3328      	adds	r3, #40	; 0x28
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f001 fce3 	bl	800612c <RCCEx_PLL3_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800476c:	e004      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004774:	e000      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004780:	4b7b      	ldr	r3, [pc, #492]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004784:	f023 0107 	bic.w	r1, r3, #7
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	4a78      	ldr	r2, [pc, #480]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004790:	430b      	orrs	r3, r1
 8004792:	6513      	str	r3, [r2, #80]	; 0x50
 8004794:	e003      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800479a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80047aa:	f04f 0b00 	mov.w	fp, #0
 80047ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80047b2:	d04c      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047be:	d030      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80047c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c4:	d829      	bhi.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047c6:	2bc0      	cmp	r3, #192	; 0xc0
 80047c8:	d02d      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80047ca:	2bc0      	cmp	r3, #192	; 0xc0
 80047cc:	d825      	bhi.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047ce:	2b80      	cmp	r3, #128	; 0x80
 80047d0:	d018      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80047d2:	2b80      	cmp	r3, #128	; 0x80
 80047d4:	d821      	bhi.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80047da:	2b40      	cmp	r3, #64	; 0x40
 80047dc:	d007      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80047de:	e01c      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e0:	4b63      	ldr	r3, [pc, #396]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	4a62      	ldr	r2, [pc, #392]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047ec:	e01c      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f2:	3308      	adds	r3, #8
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 fbe6 	bl	8005fc8 <RCCEx_PLL2_Config>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004802:	e011      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004808:	3328      	adds	r3, #40	; 0x28
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f001 fc8d 	bl	800612c <RCCEx_PLL3_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004818:	e006      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004820:	e002      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004822:	bf00      	nop
 8004824:	e000      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004830:	4b4f      	ldr	r3, [pc, #316]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483e:	4a4c      	ldr	r2, [pc, #304]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004840:	430b      	orrs	r3, r1
 8004842:	6513      	str	r3, [r2, #80]	; 0x50
 8004844:	e003      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800484a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800485a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800485e:	2300      	movs	r3, #0
 8004860:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004864:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004868:	460b      	mov	r3, r1
 800486a:	4313      	orrs	r3, r2
 800486c:	d053      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004872:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004876:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800487a:	d035      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800487c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004880:	d82e      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004882:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004886:	d031      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004888:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800488c:	d828      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800488e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004892:	d01a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004898:	d822      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800489e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048a2:	d007      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80048a4:	e01c      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a6:	4b32      	ldr	r3, [pc, #200]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	4a31      	ldr	r2, [pc, #196]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048b2:	e01c      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b8:	3308      	adds	r3, #8
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 fb83 	bl	8005fc8 <RCCEx_PLL2_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80048c8:	e011      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ce:	3328      	adds	r3, #40	; 0x28
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fc2a 	bl	800612c <RCCEx_PLL3_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048de:	e006      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048e6:	e002      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048e8:	bf00      	nop
 80048ea:	e000      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048f6:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004902:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004906:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004908:	430b      	orrs	r3, r1
 800490a:	6593      	str	r3, [r2, #88]	; 0x58
 800490c:	e003      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004912:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004922:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004926:	2300      	movs	r3, #0
 8004928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800492c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004930:	460b      	mov	r3, r1
 8004932:	4313      	orrs	r3, r2
 8004934:	d056      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800493e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004942:	d038      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004948:	d831      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800494a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800494e:	d034      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004950:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004954:	d82b      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800495a:	d01d      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800495c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004960:	d825      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004966:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800496c:	e01f      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004974:	4ba2      	ldr	r3, [pc, #648]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4aa1      	ldr	r2, [pc, #644]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800497a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004980:	e01c      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004986:	3308      	adds	r3, #8
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f001 fb1c 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004996:	e011      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800499c:	3328      	adds	r3, #40	; 0x28
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f001 fbc3 	bl	800612c <RCCEx_PLL3_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049ac:	e006      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049b4:	e002      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049b6:	bf00      	nop
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049c4:	4b8e      	ldr	r3, [pc, #568]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049d4:	4a8a      	ldr	r2, [pc, #552]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6593      	str	r3, [r2, #88]	; 0x58
 80049da:	e003      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80049f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d03a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0a:	2b30      	cmp	r3, #48	; 0x30
 8004a0c:	d01f      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004a0e:	2b30      	cmp	r3, #48	; 0x30
 8004a10:	d819      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d00c      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d815      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d019      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d111      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a22:	4b77      	ldr	r3, [pc, #476]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	4a76      	ldr	r2, [pc, #472]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a2e:	e011      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a34:	3308      	adds	r3, #8
 8004a36:	2102      	movs	r1, #2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 fac5 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a44:	e006      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a4c:	e002      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a4e:	bf00      	nop
 8004a50:	e000      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a5c:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a60:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	4a65      	ldr	r2, [pc, #404]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a70:	e003      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004a86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004a90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d051      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aa4:	d035      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aaa:	d82e      	bhi.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004aac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ab0:	d031      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ab2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ab6:	d828      	bhi.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004abc:	d01a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac2:	d822      	bhi.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004acc:	d007      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004ace:	e01c      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad0:	4b4b      	ldr	r3, [pc, #300]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	4a4a      	ldr	r2, [pc, #296]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004adc:	e01c      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 fa6e 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004af2:	e011      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af8:	3328      	adds	r3, #40	; 0x28
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 fb15 	bl	800612c <RCCEx_PLL3_Config>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b08:	e006      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b10:	e002      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b12:	bf00      	nop
 8004b14:	e000      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b20:	4b37      	ldr	r3, [pc, #220]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b24:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2e:	4a34      	ldr	r2, [pc, #208]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b30:	430b      	orrs	r3, r1
 8004b32:	6513      	str	r3, [r2, #80]	; 0x50
 8004b34:	e003      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	d056      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b68:	d033      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b6e:	d82c      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b74:	d02f      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b7a:	d826      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b80:	d02b      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004b82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b86:	d820      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b8c:	d012      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b92:	d81a      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d022      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d115      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 fa0e 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bb2:	e015      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb8:	3328      	adds	r3, #40	; 0x28
 8004bba:	2101      	movs	r1, #1
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 fab5 	bl	800612c <RCCEx_PLL3_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bd0:	e006      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bd2:	bf00      	nop
 8004bd4:	e004      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bd6:	bf00      	nop
 8004bd8:	e002      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10d      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf6:	4a02      	ldr	r2, [pc, #8]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6513      	str	r3, [r2, #80]	; 0x50
 8004bfc:	e006      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004bfe:	bf00      	nop
 8004c00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c22:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	d055      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c38:	d033      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c3e:	d82c      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d02f      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4a:	d826      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c50:	d02b      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c56:	d820      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c5c:	d012      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c62:	d81a      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d022      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c6c:	d115      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c72:	3308      	adds	r3, #8
 8004c74:	2101      	movs	r1, #1
 8004c76:	4618      	mov	r0, r3
 8004c78:	f001 f9a6 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c82:	e015      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c88:	3328      	adds	r3, #40	; 0x28
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fa4d 	bl	800612c <RCCEx_PLL3_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ca0:	e006      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ca2:	bf00      	nop
 8004ca4:	e004      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ca6:	bf00      	nop
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004caa:	bf00      	nop
 8004cac:	e000      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004cb8:	4ba3      	ldr	r3, [pc, #652]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cc8:	4a9f      	ldr	r2, [pc, #636]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8004cce:	e003      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	d037      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d02:	d00e      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d08:	d816      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d018      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d12:	d111      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d14:	4b8c      	ldr	r3, [pc, #560]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	4a8b      	ldr	r2, [pc, #556]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d20:	e00f      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d26:	3308      	adds	r3, #8
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 f94c 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d36:	e004      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d3e:	e000      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d4a:	4b7f      	ldr	r3, [pc, #508]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	4a7b      	ldr	r2, [pc, #492]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	6513      	str	r3, [r2, #80]	; 0x50
 8004d5e:	e003      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004d7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4313      	orrs	r3, r2
 8004d86:	d039      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d81c      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004d92:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004dd5 	.word	0x08004dd5
 8004d9c:	08004da9 	.word	0x08004da9
 8004da0:	08004db7 	.word	0x08004db7
 8004da4:	08004dd5 	.word	0x08004dd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da8:	4b67      	ldr	r3, [pc, #412]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	4a66      	ldr	r2, [pc, #408]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004db4:	e00f      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dba:	3308      	adds	r3, #8
 8004dbc:	2102      	movs	r1, #2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 f902 	bl	8005fc8 <RCCEx_PLL2_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004dca:	e004      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dd2:	e000      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dde:	4b5a      	ldr	r3, [pc, #360]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de2:	f023 0103 	bic.w	r1, r3, #3
 8004de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dec:	4a56      	ldr	r2, [pc, #344]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dee:	430b      	orrs	r3, r1
 8004df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004df2:	e003      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004e08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004e16:	460b      	mov	r3, r1
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f000 809f 	beq.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e1e:	4b4b      	ldr	r3, [pc, #300]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a4a      	ldr	r2, [pc, #296]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e2a:	f7fc fc0d 	bl	8001648 <HAL_GetTick>
 8004e2e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e32:	e00b      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e34:	f7fc fc08 	bl	8001648 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b64      	cmp	r3, #100	; 0x64
 8004e42:	d903      	bls.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e4a:	e005      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e4c:	4b3f      	ldr	r3, [pc, #252]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0ed      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d179      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e60:	4b39      	ldr	r3, [pc, #228]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e6c:	4053      	eors	r3, r2
 8004e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d015      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e76:	4b34      	ldr	r3, [pc, #208]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e82:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	4a30      	ldr	r2, [pc, #192]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e8e:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a2d      	ldr	r2, [pc, #180]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e9a:	4a2b      	ldr	r2, [pc, #172]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ea0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d118      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fc fbca 	bl	8001648 <HAL_GetTick>
 8004eb4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb8:	e00d      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fc fbc5 	bl	8001648 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ec4:	1ad2      	subs	r2, r2, r3
 8004ec6:	f241 3388 	movw	r3, #5000	; 0x1388
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d903      	bls.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004ed4:	e005      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0eb      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d129      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004efa:	d10e      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004efc:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f0c:	091a      	lsrs	r2, r3, #4
 8004f0e:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	4a0d      	ldr	r2, [pc, #52]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6113      	str	r3, [r2, #16]
 8004f18:	e005      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f24:	6113      	str	r3, [r2, #16]
 8004f26:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f28:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f36:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3c:	e00e      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004f46:	e009      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	58024800 	.word	0x58024800
 8004f50:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f002 0301 	and.w	r3, r2, #1
 8004f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f000 8089 	beq.w	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f84:	2b28      	cmp	r3, #40	; 0x28
 8004f86:	d86b      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08005069 	.word	0x08005069
 8004f94:	08005061 	.word	0x08005061
 8004f98:	08005061 	.word	0x08005061
 8004f9c:	08005061 	.word	0x08005061
 8004fa0:	08005061 	.word	0x08005061
 8004fa4:	08005061 	.word	0x08005061
 8004fa8:	08005061 	.word	0x08005061
 8004fac:	08005061 	.word	0x08005061
 8004fb0:	08005035 	.word	0x08005035
 8004fb4:	08005061 	.word	0x08005061
 8004fb8:	08005061 	.word	0x08005061
 8004fbc:	08005061 	.word	0x08005061
 8004fc0:	08005061 	.word	0x08005061
 8004fc4:	08005061 	.word	0x08005061
 8004fc8:	08005061 	.word	0x08005061
 8004fcc:	08005061 	.word	0x08005061
 8004fd0:	0800504b 	.word	0x0800504b
 8004fd4:	08005061 	.word	0x08005061
 8004fd8:	08005061 	.word	0x08005061
 8004fdc:	08005061 	.word	0x08005061
 8004fe0:	08005061 	.word	0x08005061
 8004fe4:	08005061 	.word	0x08005061
 8004fe8:	08005061 	.word	0x08005061
 8004fec:	08005061 	.word	0x08005061
 8004ff0:	08005069 	.word	0x08005069
 8004ff4:	08005061 	.word	0x08005061
 8004ff8:	08005061 	.word	0x08005061
 8004ffc:	08005061 	.word	0x08005061
 8005000:	08005061 	.word	0x08005061
 8005004:	08005061 	.word	0x08005061
 8005008:	08005061 	.word	0x08005061
 800500c:	08005061 	.word	0x08005061
 8005010:	08005069 	.word	0x08005069
 8005014:	08005061 	.word	0x08005061
 8005018:	08005061 	.word	0x08005061
 800501c:	08005061 	.word	0x08005061
 8005020:	08005061 	.word	0x08005061
 8005024:	08005061 	.word	0x08005061
 8005028:	08005061 	.word	0x08005061
 800502c:	08005061 	.word	0x08005061
 8005030:	08005069 	.word	0x08005069
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005038:	3308      	adds	r3, #8
 800503a:	2101      	movs	r1, #1
 800503c:	4618      	mov	r0, r3
 800503e:	f000 ffc3 	bl	8005fc8 <RCCEx_PLL2_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005048:	e00f      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800504a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504e:	3328      	adds	r3, #40	; 0x28
 8005050:	2101      	movs	r1, #1
 8005052:	4618      	mov	r0, r3
 8005054:	f001 f86a 	bl	800612c <RCCEx_PLL3_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800505e:	e004      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005066:	e000      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800506a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10a      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005072:	4bbf      	ldr	r3, [pc, #764]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005080:	4abb      	ldr	r2, [pc, #748]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005082:	430b      	orrs	r3, r1
 8005084:	6553      	str	r3, [r2, #84]	; 0x54
 8005086:	e003      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800508c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f002 0302 	and.w	r3, r2, #2
 800509c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050a0:	2300      	movs	r3, #0
 80050a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80050a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80050aa:	460b      	mov	r3, r1
 80050ac:	4313      	orrs	r3, r2
 80050ae:	d041      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80050b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050b6:	2b05      	cmp	r3, #5
 80050b8:	d824      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	0800510d 	.word	0x0800510d
 80050c4:	080050d9 	.word	0x080050d9
 80050c8:	080050ef 	.word	0x080050ef
 80050cc:	0800510d 	.word	0x0800510d
 80050d0:	0800510d 	.word	0x0800510d
 80050d4:	0800510d 	.word	0x0800510d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050dc:	3308      	adds	r3, #8
 80050de:	2101      	movs	r1, #1
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 ff71 	bl	8005fc8 <RCCEx_PLL2_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050ec:	e00f      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f2:	3328      	adds	r3, #40	; 0x28
 80050f4:	2101      	movs	r1, #1
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 f818 	bl	800612c <RCCEx_PLL3_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005102:	e004      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800510a:	e000      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800510c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800510e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005116:	4b96      	ldr	r3, [pc, #600]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511a:	f023 0107 	bic.w	r1, r3, #7
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005124:	4a92      	ldr	r2, [pc, #584]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005126:	430b      	orrs	r3, r1
 8005128:	6553      	str	r3, [r2, #84]	; 0x54
 800512a:	e003      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005130:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f002 0304 	and.w	r3, r2, #4
 8005140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005144:	2300      	movs	r3, #0
 8005146:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800514a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800514e:	460b      	mov	r3, r1
 8005150:	4313      	orrs	r3, r2
 8005152:	d044      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800515c:	2b05      	cmp	r3, #5
 800515e:	d825      	bhi.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005160:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005166:	bf00      	nop
 8005168:	080051b5 	.word	0x080051b5
 800516c:	08005181 	.word	0x08005181
 8005170:	08005197 	.word	0x08005197
 8005174:	080051b5 	.word	0x080051b5
 8005178:	080051b5 	.word	0x080051b5
 800517c:	080051b5 	.word	0x080051b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005184:	3308      	adds	r3, #8
 8005186:	2101      	movs	r1, #1
 8005188:	4618      	mov	r0, r3
 800518a:	f000 ff1d 	bl	8005fc8 <RCCEx_PLL2_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005194:	e00f      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800519a:	3328      	adds	r3, #40	; 0x28
 800519c:	2101      	movs	r1, #1
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 ffc4 	bl	800612c <RCCEx_PLL3_Config>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051aa:	e004      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051b2:	e000      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80051b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051be:	4b6c      	ldr	r3, [pc, #432]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c2:	f023 0107 	bic.w	r1, r3, #7
 80051c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ce:	4a68      	ldr	r2, [pc, #416]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6593      	str	r3, [r2, #88]	; 0x58
 80051d4:	e003      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f002 0320 	and.w	r3, r2, #32
 80051ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051ee:	2300      	movs	r3, #0
 80051f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051f8:	460b      	mov	r3, r1
 80051fa:	4313      	orrs	r3, r2
 80051fc:	d055      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800520a:	d033      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800520c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005210:	d82c      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005216:	d02f      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521c:	d826      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800521e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005222:	d02b      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005224:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005228:	d820      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800522a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800522e:	d012      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005234:	d81a      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d022      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800523a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800523e:	d115      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005244:	3308      	adds	r3, #8
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f000 febd 	bl	8005fc8 <RCCEx_PLL2_Config>
 800524e:	4603      	mov	r3, r0
 8005250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005254:	e015      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525a:	3328      	adds	r3, #40	; 0x28
 800525c:	2102      	movs	r1, #2
 800525e:	4618      	mov	r0, r3
 8005260:	f000 ff64 	bl	800612c <RCCEx_PLL3_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800526a:	e00a      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005272:	e006      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005274:	bf00      	nop
 8005276:	e004      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005278:	bf00      	nop
 800527a:	e002      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800527c:	bf00      	nop
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	4a35      	ldr	r2, [pc, #212]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800529c:	430b      	orrs	r3, r1
 800529e:	6553      	str	r3, [r2, #84]	; 0x54
 80052a0:	e003      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80052b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ba:	2300      	movs	r3, #0
 80052bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80052c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4313      	orrs	r3, r2
 80052c8:	d058      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052d6:	d033      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80052d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052dc:	d82c      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e2:	d02f      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e8:	d826      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ee:	d02b      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80052f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f4:	d820      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fa:	d012      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005300:	d81a      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d022      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530a:	d115      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800530c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005310:	3308      	adds	r3, #8
 8005312:	2100      	movs	r1, #0
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fe57 	bl	8005fc8 <RCCEx_PLL2_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005320:	e015      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005326:	3328      	adds	r3, #40	; 0x28
 8005328:	2102      	movs	r1, #2
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fefe 	bl	800612c <RCCEx_PLL3_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005336:	e00a      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800533e:	e006      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005340:	bf00      	nop
 8005342:	e004      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005344:	bf00      	nop
 8005346:	e002      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005348:	bf00      	nop
 800534a:	e000      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800534c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10e      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005366:	4a02      	ldr	r2, [pc, #8]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005368:	430b      	orrs	r3, r1
 800536a:	6593      	str	r3, [r2, #88]	; 0x58
 800536c:	e006      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800536e:	bf00      	nop
 8005370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800538c:	2300      	movs	r3, #0
 800538e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005392:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005396:	460b      	mov	r3, r1
 8005398:	4313      	orrs	r3, r2
 800539a:	d055      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800539c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053a8:	d033      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80053aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053ae:	d82c      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b4:	d02f      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80053b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ba:	d826      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053c0:	d02b      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80053c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053c6:	d820      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053cc:	d012      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80053ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d2:	d81a      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d022      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80053d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053dc:	d115      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e2:	3308      	adds	r3, #8
 80053e4:	2100      	movs	r1, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fdee 	bl	8005fc8 <RCCEx_PLL2_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053f2:	e015      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f8:	3328      	adds	r3, #40	; 0x28
 80053fa:	2102      	movs	r1, #2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fe95 	bl	800612c <RCCEx_PLL3_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005408:	e00a      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005410:	e006      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005412:	bf00      	nop
 8005414:	e004      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005416:	bf00      	nop
 8005418:	e002      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800541e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10b      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005428:	4ba1      	ldr	r3, [pc, #644]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005434:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005438:	4a9d      	ldr	r2, [pc, #628]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800543a:	430b      	orrs	r3, r1
 800543c:	6593      	str	r3, [r2, #88]	; 0x58
 800543e:	e003      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f002 0308 	and.w	r3, r2, #8
 8005454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005458:	2300      	movs	r3, #0
 800545a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800545e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005462:	460b      	mov	r3, r1
 8005464:	4313      	orrs	r3, r2
 8005466:	d01e      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005474:	d10c      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	3328      	adds	r3, #40	; 0x28
 800547c:	2102      	movs	r1, #2
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fe54 	bl	800612c <RCCEx_PLL3_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005490:	4b87      	ldr	r3, [pc, #540]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005494:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800549c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a0:	4a83      	ldr	r2, [pc, #524]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054a2:	430b      	orrs	r3, r1
 80054a4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f002 0310 	and.w	r3, r2, #16
 80054b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054b6:	2300      	movs	r3, #0
 80054b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80054bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80054c0:	460b      	mov	r3, r1
 80054c2:	4313      	orrs	r3, r2
 80054c4:	d01e      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d2:	d10c      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d8:	3328      	adds	r3, #40	; 0x28
 80054da:	2102      	movs	r1, #2
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fe25 	bl	800612c <RCCEx_PLL3_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054ee:	4b70      	ldr	r3, [pc, #448]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054fe:	4a6c      	ldr	r2, [pc, #432]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005500:	430b      	orrs	r3, r1
 8005502:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800551a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800551e:	460b      	mov	r3, r1
 8005520:	4313      	orrs	r3, r2
 8005522:	d03e      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800552c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005530:	d022      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005536:	d81b      	bhi.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800553c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005540:	d00b      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005542:	e015      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005548:	3308      	adds	r3, #8
 800554a:	2100      	movs	r1, #0
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fd3b 	bl	8005fc8 <RCCEx_PLL2_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005558:	e00f      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800555a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555e:	3328      	adds	r3, #40	; 0x28
 8005560:	2102      	movs	r1, #2
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fde2 	bl	800612c <RCCEx_PLL3_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800556e:	e004      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005576:	e000      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800557a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10b      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005582:	4b4b      	ldr	r3, [pc, #300]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005586:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800558a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800558e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005592:	4a47      	ldr	r2, [pc, #284]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005594:	430b      	orrs	r3, r1
 8005596:	6593      	str	r3, [r2, #88]	; 0x58
 8005598:	e003      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800559e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80055ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80055b0:	2300      	movs	r3, #0
 80055b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80055b8:	460b      	mov	r3, r1
 80055ba:	4313      	orrs	r3, r2
 80055bc:	d03b      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055ca:	d01f      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80055cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055d0:	d818      	bhi.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80055d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d6:	d003      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80055d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055dc:	d007      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80055de:	e011      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e0:	4b33      	ldr	r3, [pc, #204]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	4a32      	ldr	r2, [pc, #200]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055ec:	e00f      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f2:	3328      	adds	r3, #40	; 0x28
 80055f4:	2101      	movs	r1, #1
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fd98 	bl	800612c <RCCEx_PLL3_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005602:	e004      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800560a:	e000      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800560c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005616:	4b26      	ldr	r3, [pc, #152]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005628:	430b      	orrs	r3, r1
 800562a:	6553      	str	r3, [r2, #84]	; 0x54
 800562c:	e003      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005642:	673b      	str	r3, [r7, #112]	; 0x70
 8005644:	2300      	movs	r3, #0
 8005646:	677b      	str	r3, [r7, #116]	; 0x74
 8005648:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800564c:	460b      	mov	r3, r1
 800564e:	4313      	orrs	r3, r2
 8005650:	d034      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800565c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005660:	d007      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005662:	e011      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005664:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	4a11      	ldr	r2, [pc, #68]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800566a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800566e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005670:	e00e      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005676:	3308      	adds	r3, #8
 8005678:	2102      	movs	r1, #2
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fca4 	bl	8005fc8 <RCCEx_PLL2_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005686:	e003      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800568e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005690:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10d      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800569a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a6:	4a02      	ldr	r2, [pc, #8]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056ac:	e006      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80056ae:	bf00      	nop
 80056b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80056c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ca:	2300      	movs	r3, #0
 80056cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80056d2:	460b      	mov	r3, r1
 80056d4:	4313      	orrs	r3, r2
 80056d6:	d00c      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056dc:	3328      	adds	r3, #40	; 0x28
 80056de:	2102      	movs	r1, #2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fd23 	bl	800612c <RCCEx_PLL3_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80056fe:	663b      	str	r3, [r7, #96]	; 0x60
 8005700:	2300      	movs	r3, #0
 8005702:	667b      	str	r3, [r7, #100]	; 0x64
 8005704:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005708:	460b      	mov	r3, r1
 800570a:	4313      	orrs	r3, r2
 800570c:	d038      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800571a:	d018      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800571c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005720:	d811      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005726:	d014      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572c:	d80b      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d011      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005736:	d106      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005738:	4bc3      	ldr	r3, [pc, #780]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	4ac2      	ldr	r2, [pc, #776]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800573e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005744:	e008      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800574c:	e004      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800574e:	bf00      	nop
 8005750:	e002      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005752:	bf00      	nop
 8005754:	e000      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10b      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005760:	4bb9      	ldr	r3, [pc, #740]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005770:	4ab5      	ldr	r2, [pc, #724]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005772:	430b      	orrs	r3, r1
 8005774:	6553      	str	r3, [r2, #84]	; 0x54
 8005776:	e003      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800577c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800578c:	65bb      	str	r3, [r7, #88]	; 0x58
 800578e:	2300      	movs	r3, #0
 8005790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005792:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d009      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800579c:	4baa      	ldr	r3, [pc, #680]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800579e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80057a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057aa:	4aa7      	ldr	r2, [pc, #668]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ac:	430b      	orrs	r3, r1
 80057ae:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80057bc:	653b      	str	r3, [r7, #80]	; 0x50
 80057be:	2300      	movs	r3, #0
 80057c0:	657b      	str	r3, [r7, #84]	; 0x54
 80057c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80057c6:	460b      	mov	r3, r1
 80057c8:	4313      	orrs	r3, r2
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057cc:	4b9e      	ldr	r3, [pc, #632]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80057dc:	4a9a      	ldr	r2, [pc, #616]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057de:	430b      	orrs	r3, r1
 80057e0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80057ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f0:	2300      	movs	r3, #0
 80057f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80057f8:	460b      	mov	r3, r1
 80057fa:	4313      	orrs	r3, r2
 80057fc:	d009      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057fe:	4b92      	ldr	r3, [pc, #584]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005802:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580c:	4a8e      	ldr	r2, [pc, #568]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800580e:	430b      	orrs	r3, r1
 8005810:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800581e:	643b      	str	r3, [r7, #64]	; 0x40
 8005820:	2300      	movs	r3, #0
 8005822:	647b      	str	r3, [r7, #68]	; 0x44
 8005824:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005828:	460b      	mov	r3, r1
 800582a:	4313      	orrs	r3, r2
 800582c:	d00e      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800582e:	4b86      	ldr	r3, [pc, #536]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	4a85      	ldr	r2, [pc, #532]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005834:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005838:	6113      	str	r3, [r2, #16]
 800583a:	4b83      	ldr	r3, [pc, #524]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800583c:	6919      	ldr	r1, [r3, #16]
 800583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005842:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005846:	4a80      	ldr	r2, [pc, #512]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005848:	430b      	orrs	r3, r1
 800584a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005858:	63bb      	str	r3, [r7, #56]	; 0x38
 800585a:	2300      	movs	r3, #0
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800585e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005868:	4b77      	ldr	r3, [pc, #476]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800586a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	4a74      	ldr	r2, [pc, #464]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005878:	430b      	orrs	r3, r1
 800587a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005888:	633b      	str	r3, [r7, #48]	; 0x30
 800588a:	2300      	movs	r3, #0
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
 800588e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005892:	460b      	mov	r3, r1
 8005894:	4313      	orrs	r3, r2
 8005896:	d00a      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005898:	4b6b      	ldr	r3, [pc, #428]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80058a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a8:	4a67      	ldr	r2, [pc, #412]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058aa:	430b      	orrs	r3, r1
 80058ac:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	2100      	movs	r1, #0
 80058b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80058c4:	460b      	mov	r3, r1
 80058c6:	4313      	orrs	r3, r2
 80058c8:	d011      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ce:	3308      	adds	r3, #8
 80058d0:	2100      	movs	r1, #0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fb78 	bl	8005fc8 <RCCEx_PLL2_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80058de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	2100      	movs	r1, #0
 80058f8:	6239      	str	r1, [r7, #32]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005900:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005904:	460b      	mov	r3, r1
 8005906:	4313      	orrs	r3, r2
 8005908:	d011      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590e:	3308      	adds	r3, #8
 8005910:	2101      	movs	r1, #1
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fb58 	bl	8005fc8 <RCCEx_PLL2_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800591e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800592a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800592e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	2100      	movs	r1, #0
 8005938:	61b9      	str	r1, [r7, #24]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005944:	460b      	mov	r3, r1
 8005946:	4313      	orrs	r3, r2
 8005948:	d011      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800594e:	3308      	adds	r3, #8
 8005950:	2102      	movs	r1, #2
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fb38 	bl	8005fc8 <RCCEx_PLL2_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800595e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800596a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	2100      	movs	r1, #0
 8005978:	6139      	str	r1, [r7, #16]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005984:	460b      	mov	r3, r1
 8005986:	4313      	orrs	r3, r2
 8005988:	d011      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598e:	3328      	adds	r3, #40	; 0x28
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fbca 	bl	800612c <RCCEx_PLL3_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800599e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	2100      	movs	r1, #0
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059c4:	460b      	mov	r3, r1
 80059c6:	4313      	orrs	r3, r2
 80059c8:	d011      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ce:	3328      	adds	r3, #40	; 0x28
 80059d0:	2101      	movs	r1, #1
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fbaa 	bl	800612c <RCCEx_PLL3_Config>
 80059d8:	4603      	mov	r3, r0
 80059da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80059de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	2100      	movs	r1, #0
 80059f8:	6039      	str	r1, [r7, #0]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	607b      	str	r3, [r7, #4]
 8005a00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a04:	460b      	mov	r3, r1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	d011      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0e:	3328      	adds	r3, #40	; 0x28
 8005a10:	2102      	movs	r1, #2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fb8a 	bl	800612c <RCCEx_PLL3_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005a2e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e000      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005a42:	46bd      	mov	sp, r7
 8005a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a48:	58024400 	.word	0x58024400

08005a4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a50:	f7fe fd96 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 8005a54:	4602      	mov	r2, r0
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	091b      	lsrs	r3, r3, #4
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	4904      	ldr	r1, [pc, #16]	; (8005a74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a62:	5ccb      	ldrb	r3, [r1, r3]
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	58024400 	.word	0x58024400
 8005a74:	08015b8c 	.word	0x08015b8c

08005a78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	; 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a80:	4ba1      	ldr	r3, [pc, #644]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a8a:	4b9f      	ldr	r3, [pc, #636]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	0b1b      	lsrs	r3, r3, #12
 8005a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a96:	4b9c      	ldr	r3, [pc, #624]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	091b      	lsrs	r3, r3, #4
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005aa2:	4b99      	ldr	r3, [pc, #612]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa6:	08db      	lsrs	r3, r3, #3
 8005aa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	fb02 f303 	mul.w	r3, r2, r3
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8111 	beq.w	8005ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	f000 8083 	beq.w	8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	f200 80a1 	bhi.w	8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d056      	beq.n	8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ae2:	e099      	b.n	8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae4:	4b88      	ldr	r3, [pc, #544]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d02d      	beq.n	8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005af0:	4b85      	ldr	r3, [pc, #532]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	08db      	lsrs	r3, r3, #3
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	4a84      	ldr	r2, [pc, #528]	; (8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
 8005b00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	ee07 3a90 	vmov	s15, r3
 8005b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1a:	4b7b      	ldr	r3, [pc, #492]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b4a:	e087      	b.n	8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5e:	4b6a      	ldr	r3, [pc, #424]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b8e:	e065      	b.n	8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba2:	4b59      	ldr	r3, [pc, #356]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bd2:	e043      	b.n	8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be6:	4b48      	ldr	r3, [pc, #288]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c16:	e021      	b.n	8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2a:	4b37      	ldr	r3, [pc, #220]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c5c:	4b2a      	ldr	r3, [pc, #168]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	0a5b      	lsrs	r3, r3, #9
 8005c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c82:	ee17 2a90 	vmov	r2, s15
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c8a:	4b1f      	ldr	r3, [pc, #124]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	0c1b      	lsrs	r3, r3, #16
 8005c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cb0:	ee17 2a90 	vmov	r2, s15
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005cb8:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	0e1b      	lsrs	r3, r3, #24
 8005cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cde:	ee17 2a90 	vmov	r2, s15
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ce6:	e008      	b.n	8005cfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	609a      	str	r2, [r3, #8]
}
 8005cfa:	bf00      	nop
 8005cfc:	3724      	adds	r7, #36	; 0x24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	58024400 	.word	0x58024400
 8005d0c:	03d09000 	.word	0x03d09000
 8005d10:	46000000 	.word	0x46000000
 8005d14:	4c742400 	.word	0x4c742400
 8005d18:	4a742400 	.word	0x4a742400
 8005d1c:	4af42400 	.word	0x4af42400

08005d20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b089      	sub	sp, #36	; 0x24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d28:	4ba1      	ldr	r3, [pc, #644]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d32:	4b9f      	ldr	r3, [pc, #636]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d36:	0d1b      	lsrs	r3, r3, #20
 8005d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d3e:	4b9c      	ldr	r3, [pc, #624]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	0a1b      	lsrs	r3, r3, #8
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d4a:	4b99      	ldr	r3, [pc, #612]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	08db      	lsrs	r3, r3, #3
 8005d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	fb02 f303 	mul.w	r3, r2, r3
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8111 	beq.w	8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	f000 8083 	beq.w	8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	f200 80a1 	bhi.w	8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d056      	beq.n	8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d8a:	e099      	b.n	8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d8c:	4b88      	ldr	r3, [pc, #544]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d02d      	beq.n	8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d98:	4b85      	ldr	r3, [pc, #532]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	08db      	lsrs	r3, r3, #3
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	4a84      	ldr	r2, [pc, #528]	; (8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
 8005da8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	ee07 3a90 	vmov	s15, r3
 8005db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc2:	4b7b      	ldr	r3, [pc, #492]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005df2:	e087      	b.n	8005f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005fbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e06:	4b6a      	ldr	r3, [pc, #424]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e36:	e065      	b.n	8005f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4a:	4b59      	ldr	r3, [pc, #356]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e7a:	e043      	b.n	8005f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8e:	4b48      	ldr	r3, [pc, #288]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ea2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ebe:	e021      	b.n	8005f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed2:	4b37      	ldr	r3, [pc, #220]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ee6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f04:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	0a5b      	lsrs	r3, r3, #9
 8005f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f2a:	ee17 2a90 	vmov	r2, s15
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f32:	4b1f      	ldr	r3, [pc, #124]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	0c1b      	lsrs	r3, r3, #16
 8005f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f3c:	ee07 3a90 	vmov	s15, r3
 8005f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f58:	ee17 2a90 	vmov	r2, s15
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f60:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	0e1b      	lsrs	r3, r3, #24
 8005f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f86:	ee17 2a90 	vmov	r2, s15
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	609a      	str	r2, [r3, #8]
}
 8005fa2:	bf00      	nop
 8005fa4:	3724      	adds	r7, #36	; 0x24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	03d09000 	.word	0x03d09000
 8005fb8:	46000000 	.word	0x46000000
 8005fbc:	4c742400 	.word	0x4c742400
 8005fc0:	4a742400 	.word	0x4a742400
 8005fc4:	4af42400 	.word	0x4af42400

08005fc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fd6:	4b53      	ldr	r3, [pc, #332]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d101      	bne.n	8005fe6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e099      	b.n	800611a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005fe6:	4b4f      	ldr	r3, [pc, #316]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a4e      	ldr	r2, [pc, #312]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 8005fec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff2:	f7fb fb29 	bl	8001648 <HAL_GetTick>
 8005ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ff8:	e008      	b.n	800600c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ffa:	f7fb fb25 	bl	8001648 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e086      	b.n	800611a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800600c:	4b45      	ldr	r3, [pc, #276]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1f0      	bne.n	8005ffa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006018:	4b42      	ldr	r3, [pc, #264]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	031b      	lsls	r3, r3, #12
 8006026:	493f      	ldr	r1, [pc, #252]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006028:	4313      	orrs	r3, r2
 800602a:	628b      	str	r3, [r1, #40]	; 0x28
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	3b01      	subs	r3, #1
 8006032:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	3b01      	subs	r3, #1
 800603c:	025b      	lsls	r3, r3, #9
 800603e:	b29b      	uxth	r3, r3
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	3b01      	subs	r3, #1
 8006048:	041b      	lsls	r3, r3, #16
 800604a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	3b01      	subs	r3, #1
 8006056:	061b      	lsls	r3, r3, #24
 8006058:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800605c:	4931      	ldr	r1, [pc, #196]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 800605e:	4313      	orrs	r3, r2
 8006060:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006062:	4b30      	ldr	r3, [pc, #192]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	492d      	ldr	r1, [pc, #180]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006070:	4313      	orrs	r3, r2
 8006072:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006074:	4b2b      	ldr	r3, [pc, #172]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	f023 0220 	bic.w	r2, r3, #32
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	4928      	ldr	r1, [pc, #160]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006082:	4313      	orrs	r3, r2
 8006084:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006086:	4b27      	ldr	r3, [pc, #156]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	4a26      	ldr	r2, [pc, #152]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 800608c:	f023 0310 	bic.w	r3, r3, #16
 8006090:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006092:	4b24      	ldr	r3, [pc, #144]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 8006094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006096:	4b24      	ldr	r3, [pc, #144]	; (8006128 <RCCEx_PLL2_Config+0x160>)
 8006098:	4013      	ands	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	69d2      	ldr	r2, [r2, #28]
 800609e:	00d2      	lsls	r2, r2, #3
 80060a0:	4920      	ldr	r1, [pc, #128]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80060a6:	4b1f      	ldr	r3, [pc, #124]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060ac:	f043 0310 	orr.w	r3, r3, #16
 80060b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d106      	bne.n	80060c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80060b8:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	4a19      	ldr	r2, [pc, #100]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060c4:	e00f      	b.n	80060e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d106      	bne.n	80060da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060cc:	4b15      	ldr	r3, [pc, #84]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	4a14      	ldr	r2, [pc, #80]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060d8:	e005      	b.n	80060e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060da:	4b12      	ldr	r3, [pc, #72]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	4a11      	ldr	r2, [pc, #68]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80060e6:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a0e      	ldr	r2, [pc, #56]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 80060ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f2:	f7fb faa9 	bl	8001648 <HAL_GetTick>
 80060f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060f8:	e008      	b.n	800610c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060fa:	f7fb faa5 	bl	8001648 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e006      	b.n	800611a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800610c:	4b05      	ldr	r3, [pc, #20]	; (8006124 <RCCEx_PLL2_Config+0x15c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006118:	7bfb      	ldrb	r3, [r7, #15]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	58024400 	.word	0x58024400
 8006128:	ffff0007 	.word	0xffff0007

0800612c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800613a:	4b53      	ldr	r3, [pc, #332]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	2b03      	cmp	r3, #3
 8006144:	d101      	bne.n	800614a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e099      	b.n	800627e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800614a:	4b4f      	ldr	r3, [pc, #316]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a4e      	ldr	r2, [pc, #312]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006156:	f7fb fa77 	bl	8001648 <HAL_GetTick>
 800615a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800615c:	e008      	b.n	8006170 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800615e:	f7fb fa73 	bl	8001648 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e086      	b.n	800627e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006170:	4b45      	ldr	r3, [pc, #276]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f0      	bne.n	800615e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800617c:	4b42      	ldr	r3, [pc, #264]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	051b      	lsls	r3, r3, #20
 800618a:	493f      	ldr	r1, [pc, #252]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 800618c:	4313      	orrs	r3, r2
 800618e:	628b      	str	r3, [r1, #40]	; 0x28
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	3b01      	subs	r3, #1
 8006196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	3b01      	subs	r3, #1
 80061a0:	025b      	lsls	r3, r3, #9
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	041b      	lsls	r3, r3, #16
 80061ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	061b      	lsls	r3, r3, #24
 80061bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061c0:	4931      	ldr	r1, [pc, #196]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061c6:	4b30      	ldr	r3, [pc, #192]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	492d      	ldr	r1, [pc, #180]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061d8:	4b2b      	ldr	r3, [pc, #172]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	4928      	ldr	r1, [pc, #160]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80061ea:	4b27      	ldr	r3, [pc, #156]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	4a26      	ldr	r2, [pc, #152]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061f6:	4b24      	ldr	r3, [pc, #144]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 80061f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061fa:	4b24      	ldr	r3, [pc, #144]	; (800628c <RCCEx_PLL3_Config+0x160>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	69d2      	ldr	r2, [r2, #28]
 8006202:	00d2      	lsls	r2, r2, #3
 8006204:	4920      	ldr	r1, [pc, #128]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006206:	4313      	orrs	r3, r2
 8006208:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800620a:	4b1f      	ldr	r3, [pc, #124]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006214:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800621c:	4b1a      	ldr	r3, [pc, #104]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	4a19      	ldr	r2, [pc, #100]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006226:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006228:	e00f      	b.n	800624a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d106      	bne.n	800623e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006230:	4b15      	ldr	r3, [pc, #84]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	4a14      	ldr	r2, [pc, #80]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006236:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800623a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800623c:	e005      	b.n	800624a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	4a11      	ldr	r2, [pc, #68]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006248:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800624a:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a0e      	ldr	r2, [pc, #56]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006256:	f7fb f9f7 	bl	8001648 <HAL_GetTick>
 800625a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800625c:	e008      	b.n	8006270 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800625e:	f7fb f9f3 	bl	8001648 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d901      	bls.n	8006270 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e006      	b.n	800627e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006270:	4b05      	ldr	r3, [pc, #20]	; (8006288 <RCCEx_PLL3_Config+0x15c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0f0      	beq.n	800625e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	58024400 	.word	0x58024400
 800628c:	ffff0007 	.word	0xffff0007

08006290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e042      	b.n	8006328 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7fa fde9 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2224      	movs	r2, #36	; 0x24
 80062be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f82c 	bl	8006330 <UART_SetConfig>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e022      	b.n	8006328 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fd88 	bl	8006e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800630e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fe0f 	bl	8006f44 <UART_CheckIdleState>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006334:	b092      	sub	sp, #72	; 0x48
 8006336:	af00      	add	r7, sp, #0
 8006338:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	431a      	orrs	r2, r3
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	431a      	orrs	r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	4313      	orrs	r3, r2
 8006356:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	4bbe      	ldr	r3, [pc, #760]	; (8006658 <UART_SetConfig+0x328>)
 8006360:	4013      	ands	r3, r2
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006368:	430b      	orrs	r3, r1
 800636a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4ab3      	ldr	r2, [pc, #716]	; (800665c <UART_SetConfig+0x32c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006398:	4313      	orrs	r3, r2
 800639a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	4baf      	ldr	r3, [pc, #700]	; (8006660 <UART_SetConfig+0x330>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	6812      	ldr	r2, [r2, #0]
 80063aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	f023 010f 	bic.w	r1, r3, #15
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4aa6      	ldr	r2, [pc, #664]	; (8006664 <UART_SetConfig+0x334>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d177      	bne.n	80064c0 <UART_SetConfig+0x190>
 80063d0:	4ba5      	ldr	r3, [pc, #660]	; (8006668 <UART_SetConfig+0x338>)
 80063d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063d8:	2b28      	cmp	r3, #40	; 0x28
 80063da:	d86d      	bhi.n	80064b8 <UART_SetConfig+0x188>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <UART_SetConfig+0xb4>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	08006489 	.word	0x08006489
 80063e8:	080064b9 	.word	0x080064b9
 80063ec:	080064b9 	.word	0x080064b9
 80063f0:	080064b9 	.word	0x080064b9
 80063f4:	080064b9 	.word	0x080064b9
 80063f8:	080064b9 	.word	0x080064b9
 80063fc:	080064b9 	.word	0x080064b9
 8006400:	080064b9 	.word	0x080064b9
 8006404:	08006491 	.word	0x08006491
 8006408:	080064b9 	.word	0x080064b9
 800640c:	080064b9 	.word	0x080064b9
 8006410:	080064b9 	.word	0x080064b9
 8006414:	080064b9 	.word	0x080064b9
 8006418:	080064b9 	.word	0x080064b9
 800641c:	080064b9 	.word	0x080064b9
 8006420:	080064b9 	.word	0x080064b9
 8006424:	08006499 	.word	0x08006499
 8006428:	080064b9 	.word	0x080064b9
 800642c:	080064b9 	.word	0x080064b9
 8006430:	080064b9 	.word	0x080064b9
 8006434:	080064b9 	.word	0x080064b9
 8006438:	080064b9 	.word	0x080064b9
 800643c:	080064b9 	.word	0x080064b9
 8006440:	080064b9 	.word	0x080064b9
 8006444:	080064a1 	.word	0x080064a1
 8006448:	080064b9 	.word	0x080064b9
 800644c:	080064b9 	.word	0x080064b9
 8006450:	080064b9 	.word	0x080064b9
 8006454:	080064b9 	.word	0x080064b9
 8006458:	080064b9 	.word	0x080064b9
 800645c:	080064b9 	.word	0x080064b9
 8006460:	080064b9 	.word	0x080064b9
 8006464:	080064a9 	.word	0x080064a9
 8006468:	080064b9 	.word	0x080064b9
 800646c:	080064b9 	.word	0x080064b9
 8006470:	080064b9 	.word	0x080064b9
 8006474:	080064b9 	.word	0x080064b9
 8006478:	080064b9 	.word	0x080064b9
 800647c:	080064b9 	.word	0x080064b9
 8006480:	080064b9 	.word	0x080064b9
 8006484:	080064b1 	.word	0x080064b1
 8006488:	2301      	movs	r3, #1
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648e:	e222      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006490:	2304      	movs	r3, #4
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006496:	e21e      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006498:	2308      	movs	r3, #8
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649e:	e21a      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80064a0:	2310      	movs	r3, #16
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e216      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80064a8:	2320      	movs	r3, #32
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e212      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80064b0:	2340      	movs	r3, #64	; 0x40
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e20e      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e20a      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a69      	ldr	r2, [pc, #420]	; (800666c <UART_SetConfig+0x33c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d130      	bne.n	800652c <UART_SetConfig+0x1fc>
 80064ca:	4b67      	ldr	r3, [pc, #412]	; (8006668 <UART_SetConfig+0x338>)
 80064cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	2b05      	cmp	r3, #5
 80064d4:	d826      	bhi.n	8006524 <UART_SetConfig+0x1f4>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <UART_SetConfig+0x1ac>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	080064f5 	.word	0x080064f5
 80064e0:	080064fd 	.word	0x080064fd
 80064e4:	08006505 	.word	0x08006505
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	08006515 	.word	0x08006515
 80064f0:	0800651d 	.word	0x0800651d
 80064f4:	2300      	movs	r3, #0
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fa:	e1ec      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80064fc:	2304      	movs	r3, #4
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006502:	e1e8      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006504:	2308      	movs	r3, #8
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650a:	e1e4      	b.n	80068d6 <UART_SetConfig+0x5a6>
 800650c:	2310      	movs	r3, #16
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006512:	e1e0      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006514:	2320      	movs	r3, #32
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651a:	e1dc      	b.n	80068d6 <UART_SetConfig+0x5a6>
 800651c:	2340      	movs	r3, #64	; 0x40
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006522:	e1d8      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652a:	e1d4      	b.n	80068d6 <UART_SetConfig+0x5a6>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a4f      	ldr	r2, [pc, #316]	; (8006670 <UART_SetConfig+0x340>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d130      	bne.n	8006598 <UART_SetConfig+0x268>
 8006536:	4b4c      	ldr	r3, [pc, #304]	; (8006668 <UART_SetConfig+0x338>)
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	2b05      	cmp	r3, #5
 8006540:	d826      	bhi.n	8006590 <UART_SetConfig+0x260>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <UART_SetConfig+0x218>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	08006561 	.word	0x08006561
 800654c:	08006569 	.word	0x08006569
 8006550:	08006571 	.word	0x08006571
 8006554:	08006579 	.word	0x08006579
 8006558:	08006581 	.word	0x08006581
 800655c:	08006589 	.word	0x08006589
 8006560:	2300      	movs	r3, #0
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006566:	e1b6      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006568:	2304      	movs	r3, #4
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656e:	e1b2      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006570:	2308      	movs	r3, #8
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006576:	e1ae      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006578:	2310      	movs	r3, #16
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657e:	e1aa      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006580:	2320      	movs	r3, #32
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006586:	e1a6      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006588:	2340      	movs	r3, #64	; 0x40
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658e:	e1a2      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006596:	e19e      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a35      	ldr	r2, [pc, #212]	; (8006674 <UART_SetConfig+0x344>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d130      	bne.n	8006604 <UART_SetConfig+0x2d4>
 80065a2:	4b31      	ldr	r3, [pc, #196]	; (8006668 <UART_SetConfig+0x338>)
 80065a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d826      	bhi.n	80065fc <UART_SetConfig+0x2cc>
 80065ae:	a201      	add	r2, pc, #4	; (adr r2, 80065b4 <UART_SetConfig+0x284>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	080065cd 	.word	0x080065cd
 80065b8:	080065d5 	.word	0x080065d5
 80065bc:	080065dd 	.word	0x080065dd
 80065c0:	080065e5 	.word	0x080065e5
 80065c4:	080065ed 	.word	0x080065ed
 80065c8:	080065f5 	.word	0x080065f5
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d2:	e180      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80065d4:	2304      	movs	r3, #4
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065da:	e17c      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80065dc:	2308      	movs	r3, #8
 80065de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065e2:	e178      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80065e4:	2310      	movs	r3, #16
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ea:	e174      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80065ec:	2320      	movs	r3, #32
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f2:	e170      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80065f4:	2340      	movs	r3, #64	; 0x40
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fa:	e16c      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e168      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a1b      	ldr	r2, [pc, #108]	; (8006678 <UART_SetConfig+0x348>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d142      	bne.n	8006694 <UART_SetConfig+0x364>
 800660e:	4b16      	ldr	r3, [pc, #88]	; (8006668 <UART_SetConfig+0x338>)
 8006610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	2b05      	cmp	r3, #5
 8006618:	d838      	bhi.n	800668c <UART_SetConfig+0x35c>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <UART_SetConfig+0x2f0>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006639 	.word	0x08006639
 8006624:	08006641 	.word	0x08006641
 8006628:	08006649 	.word	0x08006649
 800662c:	08006651 	.word	0x08006651
 8006630:	0800667d 	.word	0x0800667d
 8006634:	08006685 	.word	0x08006685
 8006638:	2300      	movs	r3, #0
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663e:	e14a      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006640:	2304      	movs	r3, #4
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006646:	e146      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006648:	2308      	movs	r3, #8
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664e:	e142      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006650:	2310      	movs	r3, #16
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006656:	e13e      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006658:	cfff69f3 	.word	0xcfff69f3
 800665c:	58000c00 	.word	0x58000c00
 8006660:	11fff4ff 	.word	0x11fff4ff
 8006664:	40011000 	.word	0x40011000
 8006668:	58024400 	.word	0x58024400
 800666c:	40004400 	.word	0x40004400
 8006670:	40004800 	.word	0x40004800
 8006674:	40004c00 	.word	0x40004c00
 8006678:	40005000 	.word	0x40005000
 800667c:	2320      	movs	r3, #32
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006682:	e128      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006684:	2340      	movs	r3, #64	; 0x40
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668a:	e124      	b.n	80068d6 <UART_SetConfig+0x5a6>
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006692:	e120      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4acb      	ldr	r2, [pc, #812]	; (80069c8 <UART_SetConfig+0x698>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d176      	bne.n	800678c <UART_SetConfig+0x45c>
 800669e:	4bcb      	ldr	r3, [pc, #812]	; (80069cc <UART_SetConfig+0x69c>)
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a6:	2b28      	cmp	r3, #40	; 0x28
 80066a8:	d86c      	bhi.n	8006784 <UART_SetConfig+0x454>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <UART_SetConfig+0x380>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	08006755 	.word	0x08006755
 80066b4:	08006785 	.word	0x08006785
 80066b8:	08006785 	.word	0x08006785
 80066bc:	08006785 	.word	0x08006785
 80066c0:	08006785 	.word	0x08006785
 80066c4:	08006785 	.word	0x08006785
 80066c8:	08006785 	.word	0x08006785
 80066cc:	08006785 	.word	0x08006785
 80066d0:	0800675d 	.word	0x0800675d
 80066d4:	08006785 	.word	0x08006785
 80066d8:	08006785 	.word	0x08006785
 80066dc:	08006785 	.word	0x08006785
 80066e0:	08006785 	.word	0x08006785
 80066e4:	08006785 	.word	0x08006785
 80066e8:	08006785 	.word	0x08006785
 80066ec:	08006785 	.word	0x08006785
 80066f0:	08006765 	.word	0x08006765
 80066f4:	08006785 	.word	0x08006785
 80066f8:	08006785 	.word	0x08006785
 80066fc:	08006785 	.word	0x08006785
 8006700:	08006785 	.word	0x08006785
 8006704:	08006785 	.word	0x08006785
 8006708:	08006785 	.word	0x08006785
 800670c:	08006785 	.word	0x08006785
 8006710:	0800676d 	.word	0x0800676d
 8006714:	08006785 	.word	0x08006785
 8006718:	08006785 	.word	0x08006785
 800671c:	08006785 	.word	0x08006785
 8006720:	08006785 	.word	0x08006785
 8006724:	08006785 	.word	0x08006785
 8006728:	08006785 	.word	0x08006785
 800672c:	08006785 	.word	0x08006785
 8006730:	08006775 	.word	0x08006775
 8006734:	08006785 	.word	0x08006785
 8006738:	08006785 	.word	0x08006785
 800673c:	08006785 	.word	0x08006785
 8006740:	08006785 	.word	0x08006785
 8006744:	08006785 	.word	0x08006785
 8006748:	08006785 	.word	0x08006785
 800674c:	08006785 	.word	0x08006785
 8006750:	0800677d 	.word	0x0800677d
 8006754:	2301      	movs	r3, #1
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675a:	e0bc      	b.n	80068d6 <UART_SetConfig+0x5a6>
 800675c:	2304      	movs	r3, #4
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006762:	e0b8      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006764:	2308      	movs	r3, #8
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676a:	e0b4      	b.n	80068d6 <UART_SetConfig+0x5a6>
 800676c:	2310      	movs	r3, #16
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006772:	e0b0      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006774:	2320      	movs	r3, #32
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e0ac      	b.n	80068d6 <UART_SetConfig+0x5a6>
 800677c:	2340      	movs	r3, #64	; 0x40
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e0a8      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e0a4      	b.n	80068d6 <UART_SetConfig+0x5a6>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a8f      	ldr	r2, [pc, #572]	; (80069d0 <UART_SetConfig+0x6a0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d130      	bne.n	80067f8 <UART_SetConfig+0x4c8>
 8006796:	4b8d      	ldr	r3, [pc, #564]	; (80069cc <UART_SetConfig+0x69c>)
 8006798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	2b05      	cmp	r3, #5
 80067a0:	d826      	bhi.n	80067f0 <UART_SetConfig+0x4c0>
 80067a2:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <UART_SetConfig+0x478>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	080067c1 	.word	0x080067c1
 80067ac:	080067c9 	.word	0x080067c9
 80067b0:	080067d1 	.word	0x080067d1
 80067b4:	080067d9 	.word	0x080067d9
 80067b8:	080067e1 	.word	0x080067e1
 80067bc:	080067e9 	.word	0x080067e9
 80067c0:	2300      	movs	r3, #0
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c6:	e086      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80067c8:	2304      	movs	r3, #4
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ce:	e082      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80067d0:	2308      	movs	r3, #8
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d6:	e07e      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80067d8:	2310      	movs	r3, #16
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067de:	e07a      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80067e0:	2320      	movs	r3, #32
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e6:	e076      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80067e8:	2340      	movs	r3, #64	; 0x40
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ee:	e072      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80067f0:	2380      	movs	r3, #128	; 0x80
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f6:	e06e      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a75      	ldr	r2, [pc, #468]	; (80069d4 <UART_SetConfig+0x6a4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d130      	bne.n	8006864 <UART_SetConfig+0x534>
 8006802:	4b72      	ldr	r3, [pc, #456]	; (80069cc <UART_SetConfig+0x69c>)
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b05      	cmp	r3, #5
 800680c:	d826      	bhi.n	800685c <UART_SetConfig+0x52c>
 800680e:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <UART_SetConfig+0x4e4>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	0800682d 	.word	0x0800682d
 8006818:	08006835 	.word	0x08006835
 800681c:	0800683d 	.word	0x0800683d
 8006820:	08006845 	.word	0x08006845
 8006824:	0800684d 	.word	0x0800684d
 8006828:	08006855 	.word	0x08006855
 800682c:	2300      	movs	r3, #0
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006832:	e050      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006834:	2304      	movs	r3, #4
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683a:	e04c      	b.n	80068d6 <UART_SetConfig+0x5a6>
 800683c:	2308      	movs	r3, #8
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006842:	e048      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006844:	2310      	movs	r3, #16
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684a:	e044      	b.n	80068d6 <UART_SetConfig+0x5a6>
 800684c:	2320      	movs	r3, #32
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006852:	e040      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006854:	2340      	movs	r3, #64	; 0x40
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685a:	e03c      	b.n	80068d6 <UART_SetConfig+0x5a6>
 800685c:	2380      	movs	r3, #128	; 0x80
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006862:	e038      	b.n	80068d6 <UART_SetConfig+0x5a6>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a5b      	ldr	r2, [pc, #364]	; (80069d8 <UART_SetConfig+0x6a8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d130      	bne.n	80068d0 <UART_SetConfig+0x5a0>
 800686e:	4b57      	ldr	r3, [pc, #348]	; (80069cc <UART_SetConfig+0x69c>)
 8006870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b05      	cmp	r3, #5
 8006878:	d826      	bhi.n	80068c8 <UART_SetConfig+0x598>
 800687a:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <UART_SetConfig+0x550>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	08006899 	.word	0x08006899
 8006884:	080068a1 	.word	0x080068a1
 8006888:	080068a9 	.word	0x080068a9
 800688c:	080068b1 	.word	0x080068b1
 8006890:	080068b9 	.word	0x080068b9
 8006894:	080068c1 	.word	0x080068c1
 8006898:	2302      	movs	r3, #2
 800689a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689e:	e01a      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80068a0:	2304      	movs	r3, #4
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a6:	e016      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80068a8:	2308      	movs	r3, #8
 80068aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ae:	e012      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80068b0:	2310      	movs	r3, #16
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b6:	e00e      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80068b8:	2320      	movs	r3, #32
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068be:	e00a      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80068c0:	2340      	movs	r3, #64	; 0x40
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068c6:	e006      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ce:	e002      	b.n	80068d6 <UART_SetConfig+0x5a6>
 80068d0:	2380      	movs	r3, #128	; 0x80
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a3f      	ldr	r2, [pc, #252]	; (80069d8 <UART_SetConfig+0x6a8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	f040 80f8 	bne.w	8006ad2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	dc46      	bgt.n	8006978 <UART_SetConfig+0x648>
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	f2c0 8082 	blt.w	80069f4 <UART_SetConfig+0x6c4>
 80068f0:	3b02      	subs	r3, #2
 80068f2:	2b1e      	cmp	r3, #30
 80068f4:	d87e      	bhi.n	80069f4 <UART_SetConfig+0x6c4>
 80068f6:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <UART_SetConfig+0x5cc>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	0800697f 	.word	0x0800697f
 8006900:	080069f5 	.word	0x080069f5
 8006904:	08006987 	.word	0x08006987
 8006908:	080069f5 	.word	0x080069f5
 800690c:	080069f5 	.word	0x080069f5
 8006910:	080069f5 	.word	0x080069f5
 8006914:	08006997 	.word	0x08006997
 8006918:	080069f5 	.word	0x080069f5
 800691c:	080069f5 	.word	0x080069f5
 8006920:	080069f5 	.word	0x080069f5
 8006924:	080069f5 	.word	0x080069f5
 8006928:	080069f5 	.word	0x080069f5
 800692c:	080069f5 	.word	0x080069f5
 8006930:	080069f5 	.word	0x080069f5
 8006934:	080069a7 	.word	0x080069a7
 8006938:	080069f5 	.word	0x080069f5
 800693c:	080069f5 	.word	0x080069f5
 8006940:	080069f5 	.word	0x080069f5
 8006944:	080069f5 	.word	0x080069f5
 8006948:	080069f5 	.word	0x080069f5
 800694c:	080069f5 	.word	0x080069f5
 8006950:	080069f5 	.word	0x080069f5
 8006954:	080069f5 	.word	0x080069f5
 8006958:	080069f5 	.word	0x080069f5
 800695c:	080069f5 	.word	0x080069f5
 8006960:	080069f5 	.word	0x080069f5
 8006964:	080069f5 	.word	0x080069f5
 8006968:	080069f5 	.word	0x080069f5
 800696c:	080069f5 	.word	0x080069f5
 8006970:	080069f5 	.word	0x080069f5
 8006974:	080069e7 	.word	0x080069e7
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d037      	beq.n	80069ec <UART_SetConfig+0x6bc>
 800697c:	e03a      	b.n	80069f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800697e:	f7ff f865 	bl	8005a4c <HAL_RCCEx_GetD3PCLK1Freq>
 8006982:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006984:	e03c      	b.n	8006a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff f874 	bl	8005a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006994:	e034      	b.n	8006a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006996:	f107 0318 	add.w	r3, r7, #24
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff f9c0 	bl	8005d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a4:	e02c      	b.n	8006a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069a6:	4b09      	ldr	r3, [pc, #36]	; (80069cc <UART_SetConfig+0x69c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d016      	beq.n	80069e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069b2:	4b06      	ldr	r3, [pc, #24]	; (80069cc <UART_SetConfig+0x69c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	08db      	lsrs	r3, r3, #3
 80069b8:	f003 0303 	and.w	r3, r3, #3
 80069bc:	4a07      	ldr	r2, [pc, #28]	; (80069dc <UART_SetConfig+0x6ac>)
 80069be:	fa22 f303 	lsr.w	r3, r2, r3
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069c4:	e01c      	b.n	8006a00 <UART_SetConfig+0x6d0>
 80069c6:	bf00      	nop
 80069c8:	40011400 	.word	0x40011400
 80069cc:	58024400 	.word	0x58024400
 80069d0:	40007800 	.word	0x40007800
 80069d4:	40007c00 	.word	0x40007c00
 80069d8:	58000c00 	.word	0x58000c00
 80069dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80069e0:	4b9d      	ldr	r3, [pc, #628]	; (8006c58 <UART_SetConfig+0x928>)
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e4:	e00c      	b.n	8006a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069e6:	4b9d      	ldr	r3, [pc, #628]	; (8006c5c <UART_SetConfig+0x92c>)
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ea:	e009      	b.n	8006a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069f2:	e005      	b.n	8006a00 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80069fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 81de 	beq.w	8006dc4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	4a94      	ldr	r2, [pc, #592]	; (8006c60 <UART_SetConfig+0x930>)
 8006a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a1a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	4413      	add	r3, r2
 8006a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d305      	bcc.n	8006a38 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d903      	bls.n	8006a40 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a3e:	e1c1      	b.n	8006dc4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a42:	2200      	movs	r2, #0
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	60fa      	str	r2, [r7, #12]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	4a84      	ldr	r2, [pc, #528]	; (8006c60 <UART_SetConfig+0x930>)
 8006a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2200      	movs	r2, #0
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	607a      	str	r2, [r7, #4]
 8006a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a62:	f7f9 fc8d 	bl	8000380 <__aeabi_uldivmod>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	020b      	lsls	r3, r1, #8
 8006a78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a7c:	0202      	lsls	r2, r0, #8
 8006a7e:	6979      	ldr	r1, [r7, #20]
 8006a80:	6849      	ldr	r1, [r1, #4]
 8006a82:	0849      	lsrs	r1, r1, #1
 8006a84:	2000      	movs	r0, #0
 8006a86:	460c      	mov	r4, r1
 8006a88:	4605      	mov	r5, r0
 8006a8a:	eb12 0804 	adds.w	r8, r2, r4
 8006a8e:	eb43 0905 	adc.w	r9, r3, r5
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	469a      	mov	sl, r3
 8006a9a:	4693      	mov	fp, r2
 8006a9c:	4652      	mov	r2, sl
 8006a9e:	465b      	mov	r3, fp
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	f7f9 fc6c 	bl	8000380 <__aeabi_uldivmod>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4613      	mov	r3, r2
 8006aae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ab6:	d308      	bcc.n	8006aca <UART_SetConfig+0x79a>
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006abe:	d204      	bcs.n	8006aca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ac6:	60da      	str	r2, [r3, #12]
 8006ac8:	e17c      	b.n	8006dc4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006ad0:	e178      	b.n	8006dc4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ada:	f040 80c5 	bne.w	8006c68 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006ade:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	dc48      	bgt.n	8006b78 <UART_SetConfig+0x848>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	db7b      	blt.n	8006be2 <UART_SetConfig+0x8b2>
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d879      	bhi.n	8006be2 <UART_SetConfig+0x8b2>
 8006aee:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <UART_SetConfig+0x7c4>)
 8006af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af4:	08006b7f 	.word	0x08006b7f
 8006af8:	08006b87 	.word	0x08006b87
 8006afc:	08006be3 	.word	0x08006be3
 8006b00:	08006be3 	.word	0x08006be3
 8006b04:	08006b8f 	.word	0x08006b8f
 8006b08:	08006be3 	.word	0x08006be3
 8006b0c:	08006be3 	.word	0x08006be3
 8006b10:	08006be3 	.word	0x08006be3
 8006b14:	08006b9f 	.word	0x08006b9f
 8006b18:	08006be3 	.word	0x08006be3
 8006b1c:	08006be3 	.word	0x08006be3
 8006b20:	08006be3 	.word	0x08006be3
 8006b24:	08006be3 	.word	0x08006be3
 8006b28:	08006be3 	.word	0x08006be3
 8006b2c:	08006be3 	.word	0x08006be3
 8006b30:	08006be3 	.word	0x08006be3
 8006b34:	08006baf 	.word	0x08006baf
 8006b38:	08006be3 	.word	0x08006be3
 8006b3c:	08006be3 	.word	0x08006be3
 8006b40:	08006be3 	.word	0x08006be3
 8006b44:	08006be3 	.word	0x08006be3
 8006b48:	08006be3 	.word	0x08006be3
 8006b4c:	08006be3 	.word	0x08006be3
 8006b50:	08006be3 	.word	0x08006be3
 8006b54:	08006be3 	.word	0x08006be3
 8006b58:	08006be3 	.word	0x08006be3
 8006b5c:	08006be3 	.word	0x08006be3
 8006b60:	08006be3 	.word	0x08006be3
 8006b64:	08006be3 	.word	0x08006be3
 8006b68:	08006be3 	.word	0x08006be3
 8006b6c:	08006be3 	.word	0x08006be3
 8006b70:	08006be3 	.word	0x08006be3
 8006b74:	08006bd5 	.word	0x08006bd5
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d02e      	beq.n	8006bda <UART_SetConfig+0x8aa>
 8006b7c:	e031      	b.n	8006be2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b7e:	f7fd fd2f 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8006b82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b84:	e033      	b.n	8006bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b86:	f7fd fd41 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 8006b8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b8c:	e02f      	b.n	8006bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe ff70 	bl	8005a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b9c:	e027      	b.n	8006bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b9e:	f107 0318 	add.w	r3, r7, #24
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff f8bc 	bl	8005d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bac:	e01f      	b.n	8006bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bae:	4b2d      	ldr	r3, [pc, #180]	; (8006c64 <UART_SetConfig+0x934>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bba:	4b2a      	ldr	r3, [pc, #168]	; (8006c64 <UART_SetConfig+0x934>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	08db      	lsrs	r3, r3, #3
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	4a24      	ldr	r2, [pc, #144]	; (8006c58 <UART_SetConfig+0x928>)
 8006bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bcc:	e00f      	b.n	8006bee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006bce:	4b22      	ldr	r3, [pc, #136]	; (8006c58 <UART_SetConfig+0x928>)
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd2:	e00c      	b.n	8006bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bd4:	4b21      	ldr	r3, [pc, #132]	; (8006c5c <UART_SetConfig+0x92c>)
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd8:	e009      	b.n	8006bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be0:	e005      	b.n	8006bee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006bec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80e7 	beq.w	8006dc4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	4a19      	ldr	r2, [pc, #100]	; (8006c60 <UART_SetConfig+0x930>)
 8006bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c00:	461a      	mov	r2, r3
 8006c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c08:	005a      	lsls	r2, r3, #1
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	085b      	lsrs	r3, r3, #1
 8006c10:	441a      	add	r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	2b0f      	cmp	r3, #15
 8006c20:	d916      	bls.n	8006c50 <UART_SetConfig+0x920>
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c28:	d212      	bcs.n	8006c50 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	f023 030f 	bic.w	r3, r3, #15
 8006c32:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c42:	4313      	orrs	r3, r2
 8006c44:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c4c:	60da      	str	r2, [r3, #12]
 8006c4e:	e0b9      	b.n	8006dc4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c56:	e0b5      	b.n	8006dc4 <UART_SetConfig+0xa94>
 8006c58:	03d09000 	.word	0x03d09000
 8006c5c:	003d0900 	.word	0x003d0900
 8006c60:	08015b9c 	.word	0x08015b9c
 8006c64:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	dc49      	bgt.n	8006d04 <UART_SetConfig+0x9d4>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	db7c      	blt.n	8006d6e <UART_SetConfig+0xa3e>
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d87a      	bhi.n	8006d6e <UART_SetConfig+0xa3e>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <UART_SetConfig+0x950>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006d0b 	.word	0x08006d0b
 8006c84:	08006d13 	.word	0x08006d13
 8006c88:	08006d6f 	.word	0x08006d6f
 8006c8c:	08006d6f 	.word	0x08006d6f
 8006c90:	08006d1b 	.word	0x08006d1b
 8006c94:	08006d6f 	.word	0x08006d6f
 8006c98:	08006d6f 	.word	0x08006d6f
 8006c9c:	08006d6f 	.word	0x08006d6f
 8006ca0:	08006d2b 	.word	0x08006d2b
 8006ca4:	08006d6f 	.word	0x08006d6f
 8006ca8:	08006d6f 	.word	0x08006d6f
 8006cac:	08006d6f 	.word	0x08006d6f
 8006cb0:	08006d6f 	.word	0x08006d6f
 8006cb4:	08006d6f 	.word	0x08006d6f
 8006cb8:	08006d6f 	.word	0x08006d6f
 8006cbc:	08006d6f 	.word	0x08006d6f
 8006cc0:	08006d3b 	.word	0x08006d3b
 8006cc4:	08006d6f 	.word	0x08006d6f
 8006cc8:	08006d6f 	.word	0x08006d6f
 8006ccc:	08006d6f 	.word	0x08006d6f
 8006cd0:	08006d6f 	.word	0x08006d6f
 8006cd4:	08006d6f 	.word	0x08006d6f
 8006cd8:	08006d6f 	.word	0x08006d6f
 8006cdc:	08006d6f 	.word	0x08006d6f
 8006ce0:	08006d6f 	.word	0x08006d6f
 8006ce4:	08006d6f 	.word	0x08006d6f
 8006ce8:	08006d6f 	.word	0x08006d6f
 8006cec:	08006d6f 	.word	0x08006d6f
 8006cf0:	08006d6f 	.word	0x08006d6f
 8006cf4:	08006d6f 	.word	0x08006d6f
 8006cf8:	08006d6f 	.word	0x08006d6f
 8006cfc:	08006d6f 	.word	0x08006d6f
 8006d00:	08006d61 	.word	0x08006d61
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	d02e      	beq.n	8006d66 <UART_SetConfig+0xa36>
 8006d08:	e031      	b.n	8006d6e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d0a:	f7fd fc69 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8006d0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d10:	e033      	b.n	8006d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d12:	f7fd fc7b 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 8006d16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d18:	e02f      	b.n	8006d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe feaa 	bl	8005a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d28:	e027      	b.n	8006d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d2a:	f107 0318 	add.w	r3, r7, #24
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fe fff6 	bl	8005d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d38:	e01f      	b.n	8006d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d3a:	4b2d      	ldr	r3, [pc, #180]	; (8006df0 <UART_SetConfig+0xac0>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d009      	beq.n	8006d5a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d46:	4b2a      	ldr	r3, [pc, #168]	; (8006df0 <UART_SetConfig+0xac0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	08db      	lsrs	r3, r3, #3
 8006d4c:	f003 0303 	and.w	r3, r3, #3
 8006d50:	4a28      	ldr	r2, [pc, #160]	; (8006df4 <UART_SetConfig+0xac4>)
 8006d52:	fa22 f303 	lsr.w	r3, r2, r3
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d58:	e00f      	b.n	8006d7a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006d5a:	4b26      	ldr	r3, [pc, #152]	; (8006df4 <UART_SetConfig+0xac4>)
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d5e:	e00c      	b.n	8006d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d60:	4b25      	ldr	r3, [pc, #148]	; (8006df8 <UART_SetConfig+0xac8>)
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d64:	e009      	b.n	8006d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d6c:	e005      	b.n	8006d7a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d78:	bf00      	nop
    }

    if (pclk != 0U)
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d021      	beq.n	8006dc4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	4a1d      	ldr	r2, [pc, #116]	; (8006dfc <UART_SetConfig+0xacc>)
 8006d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	085b      	lsrs	r3, r3, #1
 8006d98:	441a      	add	r2, r3
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	2b0f      	cmp	r3, #15
 8006da8:	d909      	bls.n	8006dbe <UART_SetConfig+0xa8e>
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db0:	d205      	bcs.n	8006dbe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60da      	str	r2, [r3, #12]
 8006dbc:	e002      	b.n	8006dc4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006de0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3748      	adds	r7, #72	; 0x48
 8006de8:	46bd      	mov	sp, r7
 8006dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dee:	bf00      	nop
 8006df0:	58024400 	.word	0x58024400
 8006df4:	03d09000 	.word	0x03d09000
 8006df8:	003d0900 	.word	0x003d0900
 8006dfc:	08015b9c 	.word	0x08015b9c

08006e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01a      	beq.n	8006f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006efe:	d10a      	bne.n	8006f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	605a      	str	r2, [r3, #4]
  }
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b098      	sub	sp, #96	; 0x60
 8006f48:	af02      	add	r7, sp, #8
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f54:	f7fa fb78 	bl	8001648 <HAL_GetTick>
 8006f58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0308 	and.w	r3, r3, #8
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d12f      	bne.n	8006fc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f70:	2200      	movs	r2, #0
 8006f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f88e 	bl	8007098 <UART_WaitOnFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d022      	beq.n	8006fc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f96:	653b      	str	r3, [r7, #80]	; 0x50
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e6      	bne.n	8006f82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e063      	b.n	8007090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0304 	and.w	r3, r3, #4
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d149      	bne.n	800706a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f857 	bl	8007098 <UART_WaitOnFlagUntilTimeout>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d03c      	beq.n	800706a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700e:	633b      	str	r3, [r7, #48]	; 0x30
 8007010:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e6      	bne.n	8006ff0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3308      	adds	r3, #8
 8007028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	60fb      	str	r3, [r7, #12]
   return(result);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	64bb      	str	r3, [r7, #72]	; 0x48
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3308      	adds	r3, #8
 8007040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007042:	61fa      	str	r2, [r7, #28]
 8007044:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	69b9      	ldr	r1, [r7, #24]
 8007048:	69fa      	ldr	r2, [r7, #28]
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	617b      	str	r3, [r7, #20]
   return(result);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e5      	bne.n	8007022 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e012      	b.n	8007090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2220      	movs	r2, #32
 800706e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3758      	adds	r7, #88	; 0x58
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a8:	e049      	b.n	800713e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d045      	beq.n	800713e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070b2:	f7fa fac9 	bl	8001648 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d302      	bcc.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e048      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d031      	beq.n	800713e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d110      	bne.n	800710a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2208      	movs	r2, #8
 80070ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f839 	bl	8007168 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2208      	movs	r2, #8
 80070fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e029      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007118:	d111      	bne.n	800713e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f81f 	bl	8007168 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e00f      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4013      	ands	r3, r2
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	429a      	cmp	r2, r3
 800714c:	bf0c      	ite	eq
 800714e:	2301      	moveq	r3, #1
 8007150:	2300      	movne	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	429a      	cmp	r2, r3
 800715a:	d0a6      	beq.n	80070aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007168:	b480      	push	{r7}
 800716a:	b095      	sub	sp, #84	; 0x54
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007184:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718e:	643b      	str	r3, [r7, #64]	; 0x40
 8007190:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007194:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e6      	bne.n	8007170 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3308      	adds	r3, #8
 80071a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <UART_EndRxTransfer+0xc8>)
 80071b6:	4013      	ands	r3, r2
 80071b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3308      	adds	r3, #8
 80071c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e5      	bne.n	80071a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d118      	bne.n	8007210 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f023 0310 	bic.w	r3, r3, #16
 80071f2:	647b      	str	r3, [r7, #68]	; 0x44
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6979      	ldr	r1, [r7, #20]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	613b      	str	r3, [r7, #16]
   return(result);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e6      	bne.n	80071de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007224:	bf00      	nop
 8007226:	3754      	adds	r7, #84	; 0x54
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	effffffe 	.word	0xeffffffe

08007234 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007242:	2b01      	cmp	r3, #1
 8007244:	d101      	bne.n	800724a <HAL_UARTEx_DisableFifoMode+0x16>
 8007246:	2302      	movs	r3, #2
 8007248:	e027      	b.n	800729a <HAL_UARTEx_DisableFifoMode+0x66>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2224      	movs	r2, #36	; 0x24
 8007256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0201 	bic.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007278:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2220      	movs	r2, #32
 800728c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d101      	bne.n	80072be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072ba:	2302      	movs	r3, #2
 80072bc:	e02d      	b.n	800731a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2224      	movs	r2, #36	; 0x24
 80072ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0201 	bic.w	r2, r2, #1
 80072e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f850 	bl	80073a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007332:	2b01      	cmp	r3, #1
 8007334:	d101      	bne.n	800733a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007336:	2302      	movs	r3, #2
 8007338:	e02d      	b.n	8007396 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2224      	movs	r2, #36	; 0x24
 8007346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0201 	bic.w	r2, r2, #1
 8007360:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f812 	bl	80073a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2220      	movs	r2, #32
 8007388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d108      	bne.n	80073c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073c0:	e031      	b.n	8007426 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073c2:	2310      	movs	r3, #16
 80073c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073c6:	2310      	movs	r3, #16
 80073c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	0e5b      	lsrs	r3, r3, #25
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	f003 0307 	and.w	r3, r3, #7
 80073d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	0f5b      	lsrs	r3, r3, #29
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	7b3a      	ldrb	r2, [r7, #12]
 80073ee:	4911      	ldr	r1, [pc, #68]	; (8007434 <UARTEx_SetNbDataToProcess+0x94>)
 80073f0:	5c8a      	ldrb	r2, [r1, r2]
 80073f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073f6:	7b3a      	ldrb	r2, [r7, #12]
 80073f8:	490f      	ldr	r1, [pc, #60]	; (8007438 <UARTEx_SetNbDataToProcess+0x98>)
 80073fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007400:	b29a      	uxth	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	7b7a      	ldrb	r2, [r7, #13]
 800740c:	4909      	ldr	r1, [pc, #36]	; (8007434 <UARTEx_SetNbDataToProcess+0x94>)
 800740e:	5c8a      	ldrb	r2, [r1, r2]
 8007410:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007414:	7b7a      	ldrb	r2, [r7, #13]
 8007416:	4908      	ldr	r1, [pc, #32]	; (8007438 <UARTEx_SetNbDataToProcess+0x98>)
 8007418:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800741a:	fb93 f3f2 	sdiv	r3, r3, r2
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007426:	bf00      	nop
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	08015bb4 	.word	0x08015bb4
 8007438:	08015bbc 	.word	0x08015bbc

0800743c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800743c:	b084      	sub	sp, #16
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	f107 001c 	add.w	r0, r7, #28
 800744a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	2b01      	cmp	r3, #1
 8007452:	d120      	bne.n	8007496 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	4b2a      	ldr	r3, [pc, #168]	; (8007510 <USB_CoreInit+0xd4>)
 8007466:	4013      	ands	r3, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800747a:	2b01      	cmp	r3, #1
 800747c:	d105      	bne.n	800748a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 faac 	bl	80079e8 <USB_CoreReset>
 8007490:	4603      	mov	r3, r0
 8007492:	73fb      	strb	r3, [r7, #15]
 8007494:	e01a      	b.n	80074cc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 faa0 	bl	80079e8 <USB_CoreReset>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d106      	bne.n	80074c0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	639a      	str	r2, [r3, #56]	; 0x38
 80074be:	e005      	b.n	80074cc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d116      	bne.n	8007500 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80074e0:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <USB_CoreInit+0xd8>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f043 0206 	orr.w	r2, r3, #6
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f043 0220 	orr.w	r2, r3, #32
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800750c:	b004      	add	sp, #16
 800750e:	4770      	bx	lr
 8007510:	ffbdffbf 	.word	0xffbdffbf
 8007514:	03ee0000 	.word	0x03ee0000

08007518 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f023 0201 	bic.w	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d115      	bne.n	8007588 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007568:	2001      	movs	r0, #1
 800756a:	f7fa f879 	bl	8001660 <HAL_Delay>
      ms++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa29 	bl	80079cc <USB_GetMode>
 800757a:	4603      	mov	r3, r0
 800757c:	2b01      	cmp	r3, #1
 800757e:	d01e      	beq.n	80075be <USB_SetCurrentMode+0x84>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b31      	cmp	r3, #49	; 0x31
 8007584:	d9f0      	bls.n	8007568 <USB_SetCurrentMode+0x2e>
 8007586:	e01a      	b.n	80075be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d115      	bne.n	80075ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800759a:	2001      	movs	r0, #1
 800759c:	f7fa f860 	bl	8001660 <HAL_Delay>
      ms++;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3301      	adds	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa10 	bl	80079cc <USB_GetMode>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <USB_SetCurrentMode+0x84>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b31      	cmp	r3, #49	; 0x31
 80075b6:	d9f0      	bls.n	800759a <USB_SetCurrentMode+0x60>
 80075b8:	e001      	b.n	80075be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e005      	b.n	80075ca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b32      	cmp	r3, #50	; 0x32
 80075c2:	d101      	bne.n	80075c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e000      	b.n	80075ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
	...

080075d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075d4:	b084      	sub	sp, #16
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b086      	sub	sp, #24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80075e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80075ee:	2300      	movs	r3, #0
 80075f0:	613b      	str	r3, [r7, #16]
 80075f2:	e009      	b.n	8007608 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	3340      	adds	r3, #64	; 0x40
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	3301      	adds	r3, #1
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b0e      	cmp	r3, #14
 800760c:	d9f2      	bls.n	80075f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800760e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d11c      	bne.n	800764e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007622:	f043 0302 	orr.w	r3, r3, #2
 8007626:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	e005      	b.n	800765a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007660:	461a      	mov	r2, r3
 8007662:	2300      	movs	r3, #0
 8007664:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766c:	4619      	mov	r1, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007674:	461a      	mov	r2, r3
 8007676:	680b      	ldr	r3, [r1, #0]
 8007678:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	2b01      	cmp	r3, #1
 800767e:	d10c      	bne.n	800769a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007686:	2100      	movs	r1, #0
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f965 	bl	8007958 <USB_SetDevSpeed>
 800768e:	e008      	b.n	80076a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007690:	2101      	movs	r1, #1
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f960 	bl	8007958 <USB_SetDevSpeed>
 8007698:	e003      	b.n	80076a2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800769a:	2103      	movs	r1, #3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f95b 	bl	8007958 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076a2:	2110      	movs	r1, #16
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f8f3 	bl	8007890 <USB_FlushTxFifo>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f91f 	bl	80078f8 <USB_FlushRxFifo>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ca:	461a      	mov	r2, r3
 80076cc:	2300      	movs	r3, #0
 80076ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d6:	461a      	mov	r2, r3
 80076d8:	2300      	movs	r3, #0
 80076da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e2:	461a      	mov	r2, r3
 80076e4:	2300      	movs	r3, #0
 80076e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076e8:	2300      	movs	r3, #0
 80076ea:	613b      	str	r3, [r7, #16]
 80076ec:	e043      	b.n	8007776 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007704:	d118      	bne.n	8007738 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007718:	461a      	mov	r2, r3
 800771a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	e013      	b.n	800774a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772e:	461a      	mov	r2, r3
 8007730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	e008      	b.n	800774a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007744:	461a      	mov	r2, r3
 8007746:	2300      	movs	r3, #0
 8007748:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007756:	461a      	mov	r2, r3
 8007758:	2300      	movs	r3, #0
 800775a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007768:	461a      	mov	r2, r3
 800776a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800776e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	3301      	adds	r3, #1
 8007774:	613b      	str	r3, [r7, #16]
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	429a      	cmp	r2, r3
 800777c:	d3b7      	bcc.n	80076ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	e043      	b.n	800780c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800779a:	d118      	bne.n	80077ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10a      	bne.n	80077b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ae:	461a      	mov	r2, r3
 80077b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	e013      	b.n	80077e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c4:	461a      	mov	r2, r3
 80077c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	e008      	b.n	80077e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077da:	461a      	mov	r2, r3
 80077dc:	2300      	movs	r3, #0
 80077de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ec:	461a      	mov	r2, r3
 80077ee:	2300      	movs	r3, #0
 80077f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fe:	461a      	mov	r2, r3
 8007800:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007804:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	3301      	adds	r3, #1
 800780a:	613b      	str	r3, [r7, #16]
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	429a      	cmp	r2, r3
 8007812:	d3b7      	bcc.n	8007784 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007826:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007834:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d105      	bne.n	8007848 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	f043 0210 	orr.w	r2, r3, #16
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	699a      	ldr	r2, [r3, #24]
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <USB_DevInit+0x2b4>)
 800784e:	4313      	orrs	r3, r2
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f043 0208 	orr.w	r2, r3, #8
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007868:	2b01      	cmp	r3, #1
 800786a:	d105      	bne.n	8007878 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699a      	ldr	r2, [r3, #24]
 8007870:	4b06      	ldr	r3, [pc, #24]	; (800788c <USB_DevInit+0x2b8>)
 8007872:	4313      	orrs	r3, r2
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007878:	7dfb      	ldrb	r3, [r7, #23]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007884:	b004      	add	sp, #16
 8007886:	4770      	bx	lr
 8007888:	803c3800 	.word	0x803c3800
 800788c:	40000004 	.word	0x40000004

08007890 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3301      	adds	r3, #1
 80078a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a13      	ldr	r2, [pc, #76]	; (80078f4 <USB_FlushTxFifo+0x64>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d901      	bls.n	80078b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e01b      	b.n	80078e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	daf2      	bge.n	800789e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	019b      	lsls	r3, r3, #6
 80078c0:	f043 0220 	orr.w	r2, r3, #32
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4a08      	ldr	r2, [pc, #32]	; (80078f4 <USB_FlushTxFifo+0x64>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d901      	bls.n	80078da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e006      	b.n	80078e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b20      	cmp	r3, #32
 80078e4:	d0f0      	beq.n	80078c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	00030d40 	.word	0x00030d40

080078f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3301      	adds	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4a11      	ldr	r2, [pc, #68]	; (8007954 <USB_FlushRxFifo+0x5c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d901      	bls.n	8007916 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e018      	b.n	8007948 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	daf2      	bge.n	8007904 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2210      	movs	r2, #16
 8007926:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	3301      	adds	r3, #1
 800792c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4a08      	ldr	r2, [pc, #32]	; (8007954 <USB_FlushRxFifo+0x5c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d901      	bls.n	800793a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e006      	b.n	8007948 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f003 0310 	and.w	r3, r3, #16
 8007942:	2b10      	cmp	r3, #16
 8007944:	d0f0      	beq.n	8007928 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	00030d40 	.word	0x00030d40

08007958 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	68f9      	ldr	r1, [r7, #12]
 8007974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007978:	4313      	orrs	r3, r2
 800797a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800798a:	b480      	push	{r7}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079a4:	f023 0303 	bic.w	r3, r3, #3
 80079a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079b8:	f043 0302 	orr.w	r3, r3, #2
 80079bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	f003 0301 	and.w	r3, r3, #1
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3301      	adds	r3, #1
 80079f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4a13      	ldr	r2, [pc, #76]	; (8007a4c <USB_CoreReset+0x64>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d901      	bls.n	8007a06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e01b      	b.n	8007a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	daf2      	bge.n	80079f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f043 0201 	orr.w	r2, r3, #1
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3301      	adds	r3, #1
 8007a22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4a09      	ldr	r2, [pc, #36]	; (8007a4c <USB_CoreReset+0x64>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d901      	bls.n	8007a30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e006      	b.n	8007a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d0f0      	beq.n	8007a1e <USB_CoreReset+0x36>

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	00030d40 	.word	0x00030d40

08007a50 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007a56:	4b8d      	ldr	r3, [pc, #564]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007a58:	22c0      	movs	r2, #192	; 0xc0
 8007a5a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007a5c:	4b8b      	ldr	r3, [pc, #556]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007a5e:	22a8      	movs	r2, #168	; 0xa8
 8007a60:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007a62:	4b8a      	ldr	r3, [pc, #552]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8007a68:	4b88      	ldr	r3, [pc, #544]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007a6a:	227b      	movs	r2, #123	; 0x7b
 8007a6c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007a6e:	4b88      	ldr	r3, [pc, #544]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007a70:	22ff      	movs	r2, #255	; 0xff
 8007a72:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007a74:	4b86      	ldr	r3, [pc, #536]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007a76:	22ff      	movs	r2, #255	; 0xff
 8007a78:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007a7a:	4b85      	ldr	r3, [pc, #532]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007a7c:	22ff      	movs	r2, #255	; 0xff
 8007a7e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007a80:	4b83      	ldr	r3, [pc, #524]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8007a86:	4b83      	ldr	r3, [pc, #524]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8007a8c:	4b81      	ldr	r3, [pc, #516]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007a92:	4b80      	ldr	r3, [pc, #512]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8007a98:	4b7e      	ldr	r3, [pc, #504]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007a9e:	f001 ff13 	bl	80098c8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007aa2:	4b7a      	ldr	r3, [pc, #488]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	061a      	lsls	r2, r3, #24
 8007aa8:	4b78      	ldr	r3, [pc, #480]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	041b      	lsls	r3, r3, #16
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	4b76      	ldr	r3, [pc, #472]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007ab2:	789b      	ldrb	r3, [r3, #2]
 8007ab4:	021b      	lsls	r3, r3, #8
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	4a74      	ldr	r2, [pc, #464]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007aba:	78d2      	ldrb	r2, [r2, #3]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	061a      	lsls	r2, r3, #24
 8007ac0:	4b72      	ldr	r3, [pc, #456]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	0619      	lsls	r1, r3, #24
 8007ac6:	4b71      	ldr	r3, [pc, #452]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007ac8:	785b      	ldrb	r3, [r3, #1]
 8007aca:	041b      	lsls	r3, r3, #16
 8007acc:	4319      	orrs	r1, r3
 8007ace:	4b6f      	ldr	r3, [pc, #444]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007ad0:	789b      	ldrb	r3, [r3, #2]
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	496d      	ldr	r1, [pc, #436]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007ad8:	78c9      	ldrb	r1, [r1, #3]
 8007ada:	430b      	orrs	r3, r1
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	4b69      	ldr	r3, [pc, #420]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	0619      	lsls	r1, r3, #24
 8007aea:	4b68      	ldr	r3, [pc, #416]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	4319      	orrs	r1, r3
 8007af2:	4b66      	ldr	r3, [pc, #408]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007af4:	789b      	ldrb	r3, [r3, #2]
 8007af6:	021b      	lsls	r3, r3, #8
 8007af8:	430b      	orrs	r3, r1
 8007afa:	4964      	ldr	r1, [pc, #400]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007afc:	78c9      	ldrb	r1, [r1, #3]
 8007afe:	430b      	orrs	r3, r1
 8007b00:	0a1b      	lsrs	r3, r3, #8
 8007b02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b06:	431a      	orrs	r2, r3
 8007b08:	4b60      	ldr	r3, [pc, #384]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	0619      	lsls	r1, r3, #24
 8007b0e:	4b5f      	ldr	r3, [pc, #380]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007b10:	785b      	ldrb	r3, [r3, #1]
 8007b12:	041b      	lsls	r3, r3, #16
 8007b14:	4319      	orrs	r1, r3
 8007b16:	4b5d      	ldr	r3, [pc, #372]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007b18:	789b      	ldrb	r3, [r3, #2]
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	495b      	ldr	r1, [pc, #364]	; (8007c8c <MX_LWIP_Init+0x23c>)
 8007b20:	78c9      	ldrb	r1, [r1, #3]
 8007b22:	430b      	orrs	r3, r1
 8007b24:	0e1b      	lsrs	r3, r3, #24
 8007b26:	4313      	orrs	r3, r2
 8007b28:	4a5b      	ldr	r2, [pc, #364]	; (8007c98 <MX_LWIP_Init+0x248>)
 8007b2a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007b2c:	4b58      	ldr	r3, [pc, #352]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	061a      	lsls	r2, r3, #24
 8007b32:	4b57      	ldr	r3, [pc, #348]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	041b      	lsls	r3, r3, #16
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	4b55      	ldr	r3, [pc, #340]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b3c:	789b      	ldrb	r3, [r3, #2]
 8007b3e:	021b      	lsls	r3, r3, #8
 8007b40:	4313      	orrs	r3, r2
 8007b42:	4a53      	ldr	r2, [pc, #332]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b44:	78d2      	ldrb	r2, [r2, #3]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	061a      	lsls	r2, r3, #24
 8007b4a:	4b51      	ldr	r3, [pc, #324]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	0619      	lsls	r1, r3, #24
 8007b50:	4b4f      	ldr	r3, [pc, #316]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b52:	785b      	ldrb	r3, [r3, #1]
 8007b54:	041b      	lsls	r3, r3, #16
 8007b56:	4319      	orrs	r1, r3
 8007b58:	4b4d      	ldr	r3, [pc, #308]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b5a:	789b      	ldrb	r3, [r3, #2]
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	430b      	orrs	r3, r1
 8007b60:	494b      	ldr	r1, [pc, #300]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b62:	78c9      	ldrb	r1, [r1, #3]
 8007b64:	430b      	orrs	r3, r1
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	4b48      	ldr	r3, [pc, #288]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	0619      	lsls	r1, r3, #24
 8007b74:	4b46      	ldr	r3, [pc, #280]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b76:	785b      	ldrb	r3, [r3, #1]
 8007b78:	041b      	lsls	r3, r3, #16
 8007b7a:	4319      	orrs	r1, r3
 8007b7c:	4b44      	ldr	r3, [pc, #272]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b7e:	789b      	ldrb	r3, [r3, #2]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	430b      	orrs	r3, r1
 8007b84:	4942      	ldr	r1, [pc, #264]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b86:	78c9      	ldrb	r1, [r1, #3]
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	0a1b      	lsrs	r3, r3, #8
 8007b8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b90:	431a      	orrs	r2, r3
 8007b92:	4b3f      	ldr	r3, [pc, #252]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	0619      	lsls	r1, r3, #24
 8007b98:	4b3d      	ldr	r3, [pc, #244]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	041b      	lsls	r3, r3, #16
 8007b9e:	4319      	orrs	r1, r3
 8007ba0:	4b3b      	ldr	r3, [pc, #236]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007ba2:	789b      	ldrb	r3, [r3, #2]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	4939      	ldr	r1, [pc, #228]	; (8007c90 <MX_LWIP_Init+0x240>)
 8007baa:	78c9      	ldrb	r1, [r1, #3]
 8007bac:	430b      	orrs	r3, r1
 8007bae:	0e1b      	lsrs	r3, r3, #24
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	4a3a      	ldr	r2, [pc, #232]	; (8007c9c <MX_LWIP_Init+0x24c>)
 8007bb4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007bb6:	4b37      	ldr	r3, [pc, #220]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	061a      	lsls	r2, r3, #24
 8007bbc:	4b35      	ldr	r3, [pc, #212]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007bbe:	785b      	ldrb	r3, [r3, #1]
 8007bc0:	041b      	lsls	r3, r3, #16
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	4b33      	ldr	r3, [pc, #204]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007bc6:	789b      	ldrb	r3, [r3, #2]
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	4a31      	ldr	r2, [pc, #196]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007bce:	78d2      	ldrb	r2, [r2, #3]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	061a      	lsls	r2, r3, #24
 8007bd4:	4b2f      	ldr	r3, [pc, #188]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	0619      	lsls	r1, r3, #24
 8007bda:	4b2e      	ldr	r3, [pc, #184]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007bdc:	785b      	ldrb	r3, [r3, #1]
 8007bde:	041b      	lsls	r3, r3, #16
 8007be0:	4319      	orrs	r1, r3
 8007be2:	4b2c      	ldr	r3, [pc, #176]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007be4:	789b      	ldrb	r3, [r3, #2]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	430b      	orrs	r3, r1
 8007bea:	492a      	ldr	r1, [pc, #168]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007bec:	78c9      	ldrb	r1, [r1, #3]
 8007bee:	430b      	orrs	r3, r1
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	4b26      	ldr	r3, [pc, #152]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	0619      	lsls	r1, r3, #24
 8007bfe:	4b25      	ldr	r3, [pc, #148]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	041b      	lsls	r3, r3, #16
 8007c04:	4319      	orrs	r1, r3
 8007c06:	4b23      	ldr	r3, [pc, #140]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007c08:	789b      	ldrb	r3, [r3, #2]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	4921      	ldr	r1, [pc, #132]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007c10:	78c9      	ldrb	r1, [r1, #3]
 8007c12:	430b      	orrs	r3, r1
 8007c14:	0a1b      	lsrs	r3, r3, #8
 8007c16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	0619      	lsls	r1, r3, #24
 8007c22:	4b1c      	ldr	r3, [pc, #112]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	041b      	lsls	r3, r3, #16
 8007c28:	4319      	orrs	r1, r3
 8007c2a:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007c2c:	789b      	ldrb	r3, [r3, #2]
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	430b      	orrs	r3, r1
 8007c32:	4918      	ldr	r1, [pc, #96]	; (8007c94 <MX_LWIP_Init+0x244>)
 8007c34:	78c9      	ldrb	r1, [r1, #3]
 8007c36:	430b      	orrs	r3, r1
 8007c38:	0e1b      	lsrs	r3, r3, #24
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	4a18      	ldr	r2, [pc, #96]	; (8007ca0 <MX_LWIP_Init+0x250>)
 8007c3e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007c40:	4b18      	ldr	r3, [pc, #96]	; (8007ca4 <MX_LWIP_Init+0x254>)
 8007c42:	9302      	str	r3, [sp, #8]
 8007c44:	4b18      	ldr	r3, [pc, #96]	; (8007ca8 <MX_LWIP_Init+0x258>)
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	4b14      	ldr	r3, [pc, #80]	; (8007ca0 <MX_LWIP_Init+0x250>)
 8007c4e:	4a13      	ldr	r2, [pc, #76]	; (8007c9c <MX_LWIP_Init+0x24c>)
 8007c50:	4911      	ldr	r1, [pc, #68]	; (8007c98 <MX_LWIP_Init+0x248>)
 8007c52:	4816      	ldr	r0, [pc, #88]	; (8007cac <MX_LWIP_Init+0x25c>)
 8007c54:	f003 fc36 	bl	800b4c4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007c58:	4814      	ldr	r0, [pc, #80]	; (8007cac <MX_LWIP_Init+0x25c>)
 8007c5a:	f003 fde5 	bl	800b828 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007c5e:	4b13      	ldr	r3, [pc, #76]	; (8007cac <MX_LWIP_Init+0x25c>)
 8007c60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c64:	089b      	lsrs	r3, r3, #2
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d003      	beq.n	8007c78 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007c70:	480e      	ldr	r0, [pc, #56]	; (8007cac <MX_LWIP_Init+0x25c>)
 8007c72:	f003 fde9 	bl	800b848 <netif_set_up>
 8007c76:	e002      	b.n	8007c7e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007c78:	480c      	ldr	r0, [pc, #48]	; (8007cac <MX_LWIP_Init+0x25c>)
 8007c7a:	f003 fe51 	bl	800b920 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007c7e:	490c      	ldr	r1, [pc, #48]	; (8007cb0 <MX_LWIP_Init+0x260>)
 8007c80:	480a      	ldr	r0, [pc, #40]	; (8007cac <MX_LWIP_Init+0x25c>)
 8007c82:	f003 fee3 	bl	800ba4c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007c86:	bf00      	nop
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	24000698 	.word	0x24000698
 8007c90:	2400069c 	.word	0x2400069c
 8007c94:	240006a0 	.word	0x240006a0
 8007c98:	2400068c 	.word	0x2400068c
 8007c9c:	24000690 	.word	0x24000690
 8007ca0:	24000694 	.word	0x24000694
 8007ca4:	0800923d 	.word	0x0800923d
 8007ca8:	08007ef9 	.word	0x08007ef9
 8007cac:	24000658 	.word	0x24000658
 8007cb0:	08007cb5 	.word	0x08007cb5

08007cb4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007cd4:	4b3f      	ldr	r3, [pc, #252]	; (8007dd4 <low_level_init+0x10c>)
 8007cd6:	4a40      	ldr	r2, [pc, #256]	; (8007dd8 <low_level_init+0x110>)
 8007cd8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007cde:	2380      	movs	r3, #128	; 0x80
 8007ce0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007ce2:	23e1      	movs	r3, #225	; 0xe1
 8007ce4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007cea:	2300      	movs	r3, #0
 8007cec:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007cf2:	4a38      	ldr	r2, [pc, #224]	; (8007dd4 <low_level_init+0x10c>)
 8007cf4:	f107 0308 	add.w	r3, r7, #8
 8007cf8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007cfa:	4b36      	ldr	r3, [pc, #216]	; (8007dd4 <low_level_init+0x10c>)
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007d00:	4b34      	ldr	r3, [pc, #208]	; (8007dd4 <low_level_init+0x10c>)
 8007d02:	4a36      	ldr	r2, [pc, #216]	; (8007ddc <low_level_init+0x114>)
 8007d04:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007d06:	4b33      	ldr	r3, [pc, #204]	; (8007dd4 <low_level_init+0x10c>)
 8007d08:	4a35      	ldr	r2, [pc, #212]	; (8007de0 <low_level_init+0x118>)
 8007d0a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007d0c:	4b31      	ldr	r3, [pc, #196]	; (8007dd4 <low_level_init+0x10c>)
 8007d0e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007d12:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007d14:	482f      	ldr	r0, [pc, #188]	; (8007dd4 <low_level_init+0x10c>)
 8007d16:	f7f9 fe47 	bl	80019a8 <HAL_ETH_Init>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007d1e:	2238      	movs	r2, #56	; 0x38
 8007d20:	2100      	movs	r1, #0
 8007d22:	4830      	ldr	r0, [pc, #192]	; (8007de4 <low_level_init+0x11c>)
 8007d24:	f00a f8e0 	bl	8011ee8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007d28:	4b2e      	ldr	r3, [pc, #184]	; (8007de4 <low_level_init+0x11c>)
 8007d2a:	2221      	movs	r2, #33	; 0x21
 8007d2c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007d2e:	4b2d      	ldr	r3, [pc, #180]	; (8007de4 <low_level_init+0x11c>)
 8007d30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007d34:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007d36:	4b2b      	ldr	r3, [pc, #172]	; (8007de4 <low_level_init+0x11c>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007d3c:	482a      	ldr	r0, [pc, #168]	; (8007de8 <low_level_init+0x120>)
 8007d3e:	f003 fa89 	bl	800b254 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2206      	movs	r2, #6
 8007d46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007d4a:	4b22      	ldr	r3, [pc, #136]	; (8007dd4 <low_level_init+0x10c>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	781a      	ldrb	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007d56:	4b1f      	ldr	r3, [pc, #124]	; (8007dd4 <low_level_init+0x10c>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	785a      	ldrb	r2, [r3, #1]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007d62:	4b1c      	ldr	r3, [pc, #112]	; (8007dd4 <low_level_init+0x10c>)
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	789a      	ldrb	r2, [r3, #2]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007d6e:	4b19      	ldr	r3, [pc, #100]	; (8007dd4 <low_level_init+0x10c>)
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	78da      	ldrb	r2, [r3, #3]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007d7a:	4b16      	ldr	r3, [pc, #88]	; (8007dd4 <low_level_init+0x10c>)
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	791a      	ldrb	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007d86:	4b13      	ldr	r3, [pc, #76]	; (8007dd4 <low_level_init+0x10c>)
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	795a      	ldrb	r2, [r3, #5]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007d98:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007da0:	f043 030a 	orr.w	r3, r3, #10
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007dac:	490f      	ldr	r1, [pc, #60]	; (8007dec <low_level_init+0x124>)
 8007dae:	4810      	ldr	r0, [pc, #64]	; (8007df0 <low_level_init+0x128>)
 8007db0:	f7f9 fa63 	bl	800127a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007db4:	480e      	ldr	r0, [pc, #56]	; (8007df0 <low_level_init+0x128>)
 8007db6:	f7f9 fa92 	bl	80012de <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d103      	bne.n	8007dc8 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fa05 	bl	80081d0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007dc6:	e001      	b.n	8007dcc <low_level_init+0x104>
    Error_Handler();
 8007dc8:	f7f9 f840 	bl	8000e4c <Error_Handler>
}
 8007dcc:	bf00      	nop
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	24005030 	.word	0x24005030
 8007dd8:	40028000 	.word	0x40028000
 8007ddc:	30040060 	.word	0x30040060
 8007de0:	30040000 	.word	0x30040000
 8007de4:	240050e0 	.word	0x240050e0
 8007de8:	08015bc4 	.word	0x08015bc4
 8007dec:	24000010 	.word	0x24000010
 8007df0:	24005118 	.word	0x24005118

08007df4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b092      	sub	sp, #72	; 0x48
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007e0c:	f107 030c 	add.w	r3, r7, #12
 8007e10:	2230      	movs	r2, #48	; 0x30
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f00a f867 	bl	8011ee8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007e1a:	f107 030c 	add.w	r3, r7, #12
 8007e1e:	2230      	movs	r2, #48	; 0x30
 8007e20:	2100      	movs	r1, #0
 8007e22:	4618      	mov	r0, r3
 8007e24:	f00a f860 	bl	8011ee8 <memset>

  for(q = p; q != NULL; q = q->next)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e2c:	e045      	b.n	8007eba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d902      	bls.n	8007e3a <low_level_output+0x46>
      return ERR_IF;
 8007e34:	f06f 030b 	mvn.w	r3, #11
 8007e38:	e055      	b.n	8007ee6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8007e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e3c:	6859      	ldr	r1, [r3, #4]
 8007e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e40:	4613      	mov	r3, r2
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	3348      	adds	r3, #72	; 0x48
 8007e4a:	443b      	add	r3, r7
 8007e4c:	3b3c      	subs	r3, #60	; 0x3c
 8007e4e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e52:	895b      	ldrh	r3, [r3, #10]
 8007e54:	4619      	mov	r1, r3
 8007e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e58:	4613      	mov	r3, r2
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	4413      	add	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	3348      	adds	r3, #72	; 0x48
 8007e62:	443b      	add	r3, r7
 8007e64:	3b38      	subs	r3, #56	; 0x38
 8007e66:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d011      	beq.n	8007e92 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e70:	1e5a      	subs	r2, r3, #1
 8007e72:	f107 000c 	add.w	r0, r7, #12
 8007e76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e78:	460b      	mov	r3, r1
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	440b      	add	r3, r1
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	18c1      	adds	r1, r0, r3
 8007e82:	4613      	mov	r3, r2
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	3348      	adds	r3, #72	; 0x48
 8007e8c:	443b      	add	r3, r7
 8007e8e:	3b34      	subs	r3, #52	; 0x34
 8007e90:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	3348      	adds	r3, #72	; 0x48
 8007ea6:	443b      	add	r3, r7
 8007ea8:	3b34      	subs	r3, #52	; 0x34
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8007eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1b6      	bne.n	8007e2e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	891b      	ldrh	r3, [r3, #8]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	4b0a      	ldr	r3, [pc, #40]	; (8007ef0 <low_level_output+0xfc>)
 8007ec8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007eca:	4a09      	ldr	r2, [pc, #36]	; (8007ef0 <low_level_output+0xfc>)
 8007ecc:	f107 030c 	add.w	r3, r7, #12
 8007ed0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007ed2:	4a07      	ldr	r2, [pc, #28]	; (8007ef0 <low_level_output+0xfc>)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007ed8:	2214      	movs	r2, #20
 8007eda:	4905      	ldr	r1, [pc, #20]	; (8007ef0 <low_level_output+0xfc>)
 8007edc:	4805      	ldr	r0, [pc, #20]	; (8007ef4 <low_level_output+0x100>)
 8007ede:	f7f9 fefb 	bl	8001cd8 <HAL_ETH_Transmit>

  return errval;
 8007ee2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3748      	adds	r7, #72	; 0x48
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	240050e0 	.word	0x240050e0
 8007ef4:	24005030 	.word	0x24005030

08007ef8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <ethernetif_init+0x1c>
 8007f06:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <ethernetif_init+0x48>)
 8007f08:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8007f0c:	490d      	ldr	r1, [pc, #52]	; (8007f44 <ethernetif_init+0x4c>)
 8007f0e:	480e      	ldr	r0, [pc, #56]	; (8007f48 <ethernetif_init+0x50>)
 8007f10:	f009 fff2 	bl	8011ef8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2273      	movs	r2, #115	; 0x73
 8007f18:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2274      	movs	r2, #116	; 0x74
 8007f20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a09      	ldr	r2, [pc, #36]	; (8007f4c <ethernetif_init+0x54>)
 8007f28:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a08      	ldr	r2, [pc, #32]	; (8007f50 <ethernetif_init+0x58>)
 8007f2e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff fec9 	bl	8007cc8 <low_level_init>

  return ERR_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	08012fc8 	.word	0x08012fc8
 8007f44:	08012fe4 	.word	0x08012fe4
 8007f48:	08012ff4 	.word	0x08012ff4
 8007f4c:	08008c3d 	.word	0x08008c3d
 8007f50:	08007df5 	.word	0x08007df5

08007f54 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007f60:	68f9      	ldr	r1, [r7, #12]
 8007f62:	4807      	ldr	r0, [pc, #28]	; (8007f80 <pbuf_free_custom+0x2c>)
 8007f64:	f003 fa58 	bl	800b418 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <pbuf_free_custom+0x30>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d102      	bne.n	8007f76 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007f70:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <pbuf_free_custom+0x30>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	701a      	strb	r2, [r3, #0]
  }
}
 8007f76:	bf00      	nop
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	08015bc4 	.word	0x08015bc4
 8007f84:	2400502c 	.word	0x2400502c

08007f88 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007f8c:	f7f9 fb5c 	bl	8001648 <HAL_GetTick>
 8007f90:	4603      	mov	r3, r0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08e      	sub	sp, #56	; 0x38
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	605a      	str	r2, [r3, #4]
 8007faa:	609a      	str	r2, [r3, #8]
 8007fac:	60da      	str	r2, [r3, #12]
 8007fae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a59      	ldr	r2, [pc, #356]	; (800811c <HAL_ETH_MspInit+0x184>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	f040 80ab 	bne.w	8008112 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007fbc:	4b58      	ldr	r3, [pc, #352]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8007fbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fc2:	4a57      	ldr	r2, [pc, #348]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8007fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007fcc:	4b54      	ldr	r3, [pc, #336]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8007fce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fd6:	623b      	str	r3, [r7, #32]
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007fda:	4b51      	ldr	r3, [pc, #324]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8007fdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fe0:	4a4f      	ldr	r2, [pc, #316]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8007fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007fea:	4b4d      	ldr	r3, [pc, #308]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8007fec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007ff8:	4b49      	ldr	r3, [pc, #292]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8007ffa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007ffe:	4a48      	ldr	r2, [pc, #288]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8008000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008004:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008008:	4b45      	ldr	r3, [pc, #276]	; (8008120 <HAL_ETH_MspInit+0x188>)
 800800a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800800e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008012:	61bb      	str	r3, [r7, #24]
 8008014:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008016:	4b42      	ldr	r3, [pc, #264]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8008018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800801c:	4a40      	ldr	r2, [pc, #256]	; (8008120 <HAL_ETH_MspInit+0x188>)
 800801e:	f043 0304 	orr.w	r3, r3, #4
 8008022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008026:	4b3e      	ldr	r3, [pc, #248]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8008028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008034:	4b3a      	ldr	r3, [pc, #232]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8008036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800803a:	4a39      	ldr	r2, [pc, #228]	; (8008120 <HAL_ETH_MspInit+0x188>)
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008044:	4b36      	ldr	r3, [pc, #216]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8008046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	613b      	str	r3, [r7, #16]
 8008050:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008052:	4b33      	ldr	r3, [pc, #204]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8008054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008058:	4a31      	ldr	r2, [pc, #196]	; (8008120 <HAL_ETH_MspInit+0x188>)
 800805a:	f043 0302 	orr.w	r3, r3, #2
 800805e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008062:	4b2f      	ldr	r3, [pc, #188]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8008064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008070:	4b2b      	ldr	r3, [pc, #172]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8008072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008076:	4a2a      	ldr	r2, [pc, #168]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8008078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800807c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008080:	4b27      	ldr	r3, [pc, #156]	; (8008120 <HAL_ETH_MspInit+0x188>)
 8008082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808a:	60bb      	str	r3, [r7, #8]
 800808c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800808e:	2332      	movs	r3, #50	; 0x32
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008092:	2302      	movs	r3, #2
 8008094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008096:	2300      	movs	r3, #0
 8008098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800809a:	2300      	movs	r3, #0
 800809c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800809e:	230b      	movs	r3, #11
 80080a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080a6:	4619      	mov	r1, r3
 80080a8:	481e      	ldr	r0, [pc, #120]	; (8008124 <HAL_ETH_MspInit+0x18c>)
 80080aa:	f7fa ff7d 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80080ae:	2386      	movs	r3, #134	; 0x86
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080b2:	2302      	movs	r3, #2
 80080b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080ba:	2300      	movs	r3, #0
 80080bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080be:	230b      	movs	r3, #11
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080c6:	4619      	mov	r1, r3
 80080c8:	4817      	ldr	r0, [pc, #92]	; (8008128 <HAL_ETH_MspInit+0x190>)
 80080ca:	f7fa ff6d 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80080ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d4:	2302      	movs	r3, #2
 80080d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d8:	2300      	movs	r3, #0
 80080da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080dc:	2300      	movs	r3, #0
 80080de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080e0:	230b      	movs	r3, #11
 80080e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080e8:	4619      	mov	r1, r3
 80080ea:	4810      	ldr	r0, [pc, #64]	; (800812c <HAL_ETH_MspInit+0x194>)
 80080ec:	f7fa ff5c 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80080f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f6:	2302      	movs	r3, #2
 80080f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080fe:	2300      	movs	r3, #0
 8008100:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008102:	230b      	movs	r3, #11
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800810a:	4619      	mov	r1, r3
 800810c:	4808      	ldr	r0, [pc, #32]	; (8008130 <HAL_ETH_MspInit+0x198>)
 800810e:	f7fa ff4b 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008112:	bf00      	nop
 8008114:	3738      	adds	r7, #56	; 0x38
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	40028000 	.word	0x40028000
 8008120:	58024400 	.word	0x58024400
 8008124:	58020800 	.word	0x58020800
 8008128:	58020000 	.word	0x58020000
 800812c:	58020400 	.word	0x58020400
 8008130:	58021800 	.word	0x58021800

08008134 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008138:	4802      	ldr	r0, [pc, #8]	; (8008144 <ETH_PHY_IO_Init+0x10>)
 800813a:	f7fa f969 	bl	8002410 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	bd80      	pop	{r7, pc}
 8008144:	24005030 	.word	0x24005030

08008148 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008148:	b480      	push	{r7}
 800814a:	af00      	add	r7, sp, #0
  return 0;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	68f9      	ldr	r1, [r7, #12]
 800816a:	4807      	ldr	r0, [pc, #28]	; (8008188 <ETH_PHY_IO_ReadReg+0x30>)
 800816c:	f7f9 feb9 	bl	8001ee2 <HAL_ETH_ReadPHYRegister>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008176:	f04f 33ff 	mov.w	r3, #4294967295
 800817a:	e000      	b.n	800817e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	24005030 	.word	0x24005030

0800818c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	68f9      	ldr	r1, [r7, #12]
 800819e:	4807      	ldr	r0, [pc, #28]	; (80081bc <ETH_PHY_IO_WriteReg+0x30>)
 80081a0:	f7f9 fef4 	bl	8001f8c <HAL_ETH_WritePHYRegister>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80081aa:	f04f 33ff 	mov.w	r3, #4294967295
 80081ae:	e000      	b.n	80081b2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	24005030 	.word	0x24005030

080081c0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80081c4:	f7f9 fa40 	bl	8001648 <HAL_GetTick>
 80081c8:	4603      	mov	r3, r0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b0a0      	sub	sp, #128	; 0x80
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80081d8:	f107 030c 	add.w	r3, r7, #12
 80081dc:	2264      	movs	r2, #100	; 0x64
 80081de:	2100      	movs	r1, #0
 80081e0:	4618      	mov	r0, r3
 80081e2:	f009 fe81 	bl	8011ee8 <memset>
  int32_t PHYLinkState = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081ee:	2300      	movs	r3, #0
 80081f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80081f2:	2300      	movs	r3, #0
 80081f4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80081f6:	483a      	ldr	r0, [pc, #232]	; (80082e0 <ethernet_link_check_state+0x110>)
 80081f8:	f7f9 f919 	bl	800142e <LAN8742_GetLinkState>
 80081fc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008204:	089b      	lsrs	r3, r3, #2
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00c      	beq.n	800822a <ethernet_link_check_state+0x5a>
 8008210:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008212:	2b01      	cmp	r3, #1
 8008214:	dc09      	bgt.n	800822a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8008216:	4833      	ldr	r0, [pc, #204]	; (80082e4 <ethernet_link_check_state+0x114>)
 8008218:	f7f9 fd0e 	bl	8001c38 <HAL_ETH_Stop>
    netif_set_down(netif);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f003 fb7f 	bl	800b920 <netif_set_down>
    netif_set_link_down(netif);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f003 fbe2 	bl	800b9ec <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8008228:	e055      	b.n	80082d6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b00      	cmp	r3, #0
 8008236:	d14e      	bne.n	80082d6 <ethernet_link_check_state+0x106>
 8008238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800823a:	2b01      	cmp	r3, #1
 800823c:	dd4b      	ble.n	80082d6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800823e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008240:	3b02      	subs	r3, #2
 8008242:	2b03      	cmp	r3, #3
 8008244:	d82a      	bhi.n	800829c <ethernet_link_check_state+0xcc>
 8008246:	a201      	add	r2, pc, #4	; (adr r2, 800824c <ethernet_link_check_state+0x7c>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	0800825d 	.word	0x0800825d
 8008250:	0800826f 	.word	0x0800826f
 8008254:	0800827f 	.word	0x0800827f
 8008258:	0800828f 	.word	0x0800828f
      duplex = ETH_FULLDUPLEX_MODE;
 800825c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008260:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008262:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008266:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008268:	2301      	movs	r3, #1
 800826a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800826c:	e017      	b.n	800829e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800826e:	2300      	movs	r3, #0
 8008270:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008272:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008276:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008278:	2301      	movs	r3, #1
 800827a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800827c:	e00f      	b.n	800829e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800827e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008282:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008284:	2300      	movs	r3, #0
 8008286:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008288:	2301      	movs	r3, #1
 800828a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800828c:	e007      	b.n	800829e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800828e:	2300      	movs	r3, #0
 8008290:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008292:	2300      	movs	r3, #0
 8008294:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008296:	2301      	movs	r3, #1
 8008298:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800829a:	e000      	b.n	800829e <ethernet_link_check_state+0xce>
      break;
 800829c:	bf00      	nop
    if(linkchanged)
 800829e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d018      	beq.n	80082d6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80082a4:	f107 030c 	add.w	r3, r7, #12
 80082a8:	4619      	mov	r1, r3
 80082aa:	480e      	ldr	r0, [pc, #56]	; (80082e4 <ethernet_link_check_state+0x114>)
 80082ac:	f7f9 fec2 	bl	8002034 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80082b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80082b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082b6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80082b8:	f107 030c 	add.w	r3, r7, #12
 80082bc:	4619      	mov	r1, r3
 80082be:	4809      	ldr	r0, [pc, #36]	; (80082e4 <ethernet_link_check_state+0x114>)
 80082c0:	f7fa f88c 	bl	80023dc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80082c4:	4807      	ldr	r0, [pc, #28]	; (80082e4 <ethernet_link_check_state+0x114>)
 80082c6:	f7f9 fc55 	bl	8001b74 <HAL_ETH_Start>
      netif_set_up(netif);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f003 fabc 	bl	800b848 <netif_set_up>
      netif_set_link_up(netif);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f003 fb57 	bl	800b984 <netif_set_link_up>
}
 80082d6:	bf00      	nop
 80082d8:	3780      	adds	r7, #128	; 0x80
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	24005118 	.word	0x24005118
 80082e4:	24005030 	.word	0x24005030

080082e8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80082f0:	4812      	ldr	r0, [pc, #72]	; (800833c <HAL_ETH_RxAllocateCallback+0x54>)
 80082f2:	f003 f823 	bl	800b33c <memp_malloc_pool>
 80082f6:	60f8      	str	r0, [r7, #12]
  if (p)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d014      	beq.n	8008328 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f103 0220 	add.w	r2, r3, #32
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4a0d      	ldr	r2, [pc, #52]	; (8008340 <HAL_ETH_RxAllocateCallback+0x58>)
 800830c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008316:	9201      	str	r2, [sp, #4]
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2241      	movs	r2, #65	; 0x41
 800831e:	2100      	movs	r1, #0
 8008320:	2000      	movs	r0, #0
 8008322:	f003 fd39 	bl	800bd98 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008326:	e005      	b.n	8008334 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008328:	4b06      	ldr	r3, [pc, #24]	; (8008344 <HAL_ETH_RxAllocateCallback+0x5c>)
 800832a:	2201      	movs	r2, #1
 800832c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	601a      	str	r2, [r3, #0]
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	08015bc4 	.word	0x08015bc4
 8008340:	08007f55 	.word	0x08007f55
 8008344:	2400502c 	.word	0x2400502c

08008348 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008352:	88fb      	ldrh	r3, [r7, #6]
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	b21a      	sxth	r2, r3
 8008358:	88fb      	ldrh	r3, [r7, #6]
 800835a:	0a1b      	lsrs	r3, r3, #8
 800835c:	b29b      	uxth	r3, r3
 800835e:	b21b      	sxth	r3, r3
 8008360:	4313      	orrs	r3, r2
 8008362:	b21b      	sxth	r3, r3
 8008364:	b29b      	uxth	r3, r3
}
 8008366:	4618      	mov	r0, r3
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	061a      	lsls	r2, r3, #24
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	0a1b      	lsrs	r3, r3, #8
 800838c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008390:	431a      	orrs	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	0e1b      	lsrs	r3, r3, #24
 8008396:	4313      	orrs	r3, r2
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80083ac:	4915      	ldr	r1, [pc, #84]	; (8008404 <etharp_free_entry+0x60>)
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	4613      	mov	r3, r2
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	4413      	add	r3, r2
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	440b      	add	r3, r1
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d013      	beq.n	80083e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80083c0:	4910      	ldr	r1, [pc, #64]	; (8008404 <etharp_free_entry+0x60>)
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	4613      	mov	r3, r2
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	4413      	add	r3, r2
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	440b      	add	r3, r1
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f003 fe9b 	bl	800c10c <pbuf_free>
    arp_table[i].q = NULL;
 80083d6:	490b      	ldr	r1, [pc, #44]	; (8008404 <etharp_free_entry+0x60>)
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	4413      	add	r3, r2
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	440b      	add	r3, r1
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80083e8:	4906      	ldr	r1, [pc, #24]	; (8008404 <etharp_free_entry+0x60>)
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	4613      	mov	r3, r2
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	4413      	add	r3, r2
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	440b      	add	r3, r1
 80083f6:	3314      	adds	r3, #20
 80083f8:	2200      	movs	r2, #0
 80083fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	24005138 	.word	0x24005138

08008408 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800840e:	2300      	movs	r3, #0
 8008410:	607b      	str	r3, [r7, #4]
 8008412:	e096      	b.n	8008542 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8008414:	494f      	ldr	r1, [pc, #316]	; (8008554 <etharp_tmr+0x14c>)
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	4613      	mov	r3, r2
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	4413      	add	r3, r2
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	440b      	add	r3, r1
 8008422:	3314      	adds	r3, #20
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8008428:	78fb      	ldrb	r3, [r7, #3]
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 8086 	beq.w	800853c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8008430:	4948      	ldr	r1, [pc, #288]	; (8008554 <etharp_tmr+0x14c>)
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	4613      	mov	r3, r2
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	4413      	add	r3, r2
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	440b      	add	r3, r1
 800843e:	3312      	adds	r3, #18
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	3301      	adds	r3, #1
 8008444:	b298      	uxth	r0, r3
 8008446:	4943      	ldr	r1, [pc, #268]	; (8008554 <etharp_tmr+0x14c>)
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	4413      	add	r3, r2
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	440b      	add	r3, r1
 8008454:	3312      	adds	r3, #18
 8008456:	4602      	mov	r2, r0
 8008458:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800845a:	493e      	ldr	r1, [pc, #248]	; (8008554 <etharp_tmr+0x14c>)
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	4413      	add	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	440b      	add	r3, r1
 8008468:	3312      	adds	r3, #18
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008470:	d215      	bcs.n	800849e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008472:	4938      	ldr	r1, [pc, #224]	; (8008554 <etharp_tmr+0x14c>)
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	4413      	add	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	440b      	add	r3, r1
 8008480:	3314      	adds	r3, #20
 8008482:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008484:	2b01      	cmp	r3, #1
 8008486:	d10e      	bne.n	80084a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8008488:	4932      	ldr	r1, [pc, #200]	; (8008554 <etharp_tmr+0x14c>)
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	4613      	mov	r3, r2
 800848e:	005b      	lsls	r3, r3, #1
 8008490:	4413      	add	r3, r2
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	440b      	add	r3, r1
 8008496:	3312      	adds	r3, #18
 8008498:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800849a:	2b04      	cmp	r3, #4
 800849c:	d903      	bls.n	80084a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff ff80 	bl	80083a4 <etharp_free_entry>
 80084a4:	e04a      	b.n	800853c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80084a6:	492b      	ldr	r1, [pc, #172]	; (8008554 <etharp_tmr+0x14c>)
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	4613      	mov	r3, r2
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	4413      	add	r3, r2
 80084b0:	00db      	lsls	r3, r3, #3
 80084b2:	440b      	add	r3, r1
 80084b4:	3314      	adds	r3, #20
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d10a      	bne.n	80084d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80084bc:	4925      	ldr	r1, [pc, #148]	; (8008554 <etharp_tmr+0x14c>)
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	4613      	mov	r3, r2
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	4413      	add	r3, r2
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	440b      	add	r3, r1
 80084ca:	3314      	adds	r3, #20
 80084cc:	2204      	movs	r2, #4
 80084ce:	701a      	strb	r2, [r3, #0]
 80084d0:	e034      	b.n	800853c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80084d2:	4920      	ldr	r1, [pc, #128]	; (8008554 <etharp_tmr+0x14c>)
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	4613      	mov	r3, r2
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	4413      	add	r3, r2
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	440b      	add	r3, r1
 80084e0:	3314      	adds	r3, #20
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d10a      	bne.n	80084fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80084e8:	491a      	ldr	r1, [pc, #104]	; (8008554 <etharp_tmr+0x14c>)
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	4613      	mov	r3, r2
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	4413      	add	r3, r2
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	440b      	add	r3, r1
 80084f6:	3314      	adds	r3, #20
 80084f8:	2202      	movs	r2, #2
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e01e      	b.n	800853c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80084fe:	4915      	ldr	r1, [pc, #84]	; (8008554 <etharp_tmr+0x14c>)
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	4613      	mov	r3, r2
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	4413      	add	r3, r2
 8008508:	00db      	lsls	r3, r3, #3
 800850a:	440b      	add	r3, r1
 800850c:	3314      	adds	r3, #20
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d113      	bne.n	800853c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8008514:	490f      	ldr	r1, [pc, #60]	; (8008554 <etharp_tmr+0x14c>)
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	4613      	mov	r3, r2
 800851a:	005b      	lsls	r3, r3, #1
 800851c:	4413      	add	r3, r2
 800851e:	00db      	lsls	r3, r3, #3
 8008520:	440b      	add	r3, r1
 8008522:	3308      	adds	r3, #8
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	4613      	mov	r3, r2
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	4413      	add	r3, r2
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	4a08      	ldr	r2, [pc, #32]	; (8008554 <etharp_tmr+0x14c>)
 8008532:	4413      	add	r3, r2
 8008534:	3304      	adds	r3, #4
 8008536:	4619      	mov	r1, r3
 8008538:	f000 fe6e 	bl	8009218 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3301      	adds	r3, #1
 8008540:	607b      	str	r3, [r7, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b09      	cmp	r3, #9
 8008546:	f77f af65 	ble.w	8008414 <etharp_tmr+0xc>
      }
    }
  }
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	24005138 	.word	0x24005138

08008558 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08a      	sub	sp, #40	; 0x28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	460b      	mov	r3, r1
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8008566:	230a      	movs	r3, #10
 8008568:	84fb      	strh	r3, [r7, #38]	; 0x26
 800856a:	230a      	movs	r3, #10
 800856c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800856e:	230a      	movs	r3, #10
 8008570:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8008572:	2300      	movs	r3, #0
 8008574:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8008576:	230a      	movs	r3, #10
 8008578:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	83bb      	strh	r3, [r7, #28]
 800857e:	2300      	movs	r3, #0
 8008580:	837b      	strh	r3, [r7, #26]
 8008582:	2300      	movs	r3, #0
 8008584:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008586:	2300      	movs	r3, #0
 8008588:	843b      	strh	r3, [r7, #32]
 800858a:	e0ae      	b.n	80086ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800858c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008590:	49a6      	ldr	r1, [pc, #664]	; (800882c <etharp_find_entry+0x2d4>)
 8008592:	4613      	mov	r3, r2
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	4413      	add	r3, r2
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	440b      	add	r3, r1
 800859c:	3314      	adds	r3, #20
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80085a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80085a6:	2b0a      	cmp	r3, #10
 80085a8:	d105      	bne.n	80085b6 <etharp_find_entry+0x5e>
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d102      	bne.n	80085b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80085b0:	8c3b      	ldrh	r3, [r7, #32]
 80085b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80085b4:	e095      	b.n	80086e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8092 	beq.w	80086e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d009      	beq.n	80085d8 <etharp_find_entry+0x80>
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d806      	bhi.n	80085d8 <etharp_find_entry+0x80>
 80085ca:	4b99      	ldr	r3, [pc, #612]	; (8008830 <etharp_find_entry+0x2d8>)
 80085cc:	f240 1223 	movw	r2, #291	; 0x123
 80085d0:	4998      	ldr	r1, [pc, #608]	; (8008834 <etharp_find_entry+0x2dc>)
 80085d2:	4899      	ldr	r0, [pc, #612]	; (8008838 <etharp_find_entry+0x2e0>)
 80085d4:	f009 fc90 	bl	8011ef8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d020      	beq.n	8008620 <etharp_find_entry+0xc8>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6819      	ldr	r1, [r3, #0]
 80085e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80085e6:	4891      	ldr	r0, [pc, #580]	; (800882c <etharp_find_entry+0x2d4>)
 80085e8:	4613      	mov	r3, r2
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	4413      	add	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	4403      	add	r3, r0
 80085f2:	3304      	adds	r3, #4
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4299      	cmp	r1, r3
 80085f8:	d112      	bne.n	8008620 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00c      	beq.n	800861a <etharp_find_entry+0xc2>
 8008600:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008604:	4989      	ldr	r1, [pc, #548]	; (800882c <etharp_find_entry+0x2d4>)
 8008606:	4613      	mov	r3, r2
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	4413      	add	r3, r2
 800860c:	00db      	lsls	r3, r3, #3
 800860e:	440b      	add	r3, r1
 8008610:	3308      	adds	r3, #8
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	429a      	cmp	r2, r3
 8008618:	d102      	bne.n	8008620 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800861a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800861e:	e100      	b.n	8008822 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8008620:	7dfb      	ldrb	r3, [r7, #23]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d140      	bne.n	80086a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8008626:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800862a:	4980      	ldr	r1, [pc, #512]	; (800882c <etharp_find_entry+0x2d4>)
 800862c:	4613      	mov	r3, r2
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	4413      	add	r3, r2
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	440b      	add	r3, r1
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01a      	beq.n	8008672 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800863c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008640:	497a      	ldr	r1, [pc, #488]	; (800882c <etharp_find_entry+0x2d4>)
 8008642:	4613      	mov	r3, r2
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	4413      	add	r3, r2
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	440b      	add	r3, r1
 800864c:	3312      	adds	r3, #18
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	8bba      	ldrh	r2, [r7, #28]
 8008652:	429a      	cmp	r2, r3
 8008654:	d845      	bhi.n	80086e2 <etharp_find_entry+0x18a>
            old_queue = i;
 8008656:	8c3b      	ldrh	r3, [r7, #32]
 8008658:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800865a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800865e:	4973      	ldr	r1, [pc, #460]	; (800882c <etharp_find_entry+0x2d4>)
 8008660:	4613      	mov	r3, r2
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	4413      	add	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	440b      	add	r3, r1
 800866a:	3312      	adds	r3, #18
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	83bb      	strh	r3, [r7, #28]
 8008670:	e037      	b.n	80086e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8008672:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008676:	496d      	ldr	r1, [pc, #436]	; (800882c <etharp_find_entry+0x2d4>)
 8008678:	4613      	mov	r3, r2
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	4413      	add	r3, r2
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	440b      	add	r3, r1
 8008682:	3312      	adds	r3, #18
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	8b7a      	ldrh	r2, [r7, #26]
 8008688:	429a      	cmp	r2, r3
 800868a:	d82a      	bhi.n	80086e2 <etharp_find_entry+0x18a>
            old_pending = i;
 800868c:	8c3b      	ldrh	r3, [r7, #32]
 800868e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8008690:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008694:	4965      	ldr	r1, [pc, #404]	; (800882c <etharp_find_entry+0x2d4>)
 8008696:	4613      	mov	r3, r2
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	4413      	add	r3, r2
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	440b      	add	r3, r1
 80086a0:	3312      	adds	r3, #18
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	837b      	strh	r3, [r7, #26]
 80086a6:	e01c      	b.n	80086e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80086a8:	7dfb      	ldrb	r3, [r7, #23]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d919      	bls.n	80086e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80086ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80086b2:	495e      	ldr	r1, [pc, #376]	; (800882c <etharp_find_entry+0x2d4>)
 80086b4:	4613      	mov	r3, r2
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	4413      	add	r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	440b      	add	r3, r1
 80086be:	3312      	adds	r3, #18
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	8b3a      	ldrh	r2, [r7, #24]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d80c      	bhi.n	80086e2 <etharp_find_entry+0x18a>
            old_stable = i;
 80086c8:	8c3b      	ldrh	r3, [r7, #32]
 80086ca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80086cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80086d0:	4956      	ldr	r1, [pc, #344]	; (800882c <etharp_find_entry+0x2d4>)
 80086d2:	4613      	mov	r3, r2
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	4413      	add	r3, r2
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	440b      	add	r3, r1
 80086dc:	3312      	adds	r3, #18
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80086e2:	8c3b      	ldrh	r3, [r7, #32]
 80086e4:	3301      	adds	r3, #1
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	843b      	strh	r3, [r7, #32]
 80086ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80086ee:	2b09      	cmp	r3, #9
 80086f0:	f77f af4c 	ble.w	800858c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80086f4:	7afb      	ldrb	r3, [r7, #11]
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d108      	bne.n	8008710 <etharp_find_entry+0x1b8>
 80086fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008702:	2b0a      	cmp	r3, #10
 8008704:	d107      	bne.n	8008716 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8008706:	7afb      	ldrb	r3, [r7, #11]
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8008710:	f04f 33ff 	mov.w	r3, #4294967295
 8008714:	e085      	b.n	8008822 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8008716:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800871a:	2b09      	cmp	r3, #9
 800871c:	dc02      	bgt.n	8008724 <etharp_find_entry+0x1cc>
    i = empty;
 800871e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008720:	843b      	strh	r3, [r7, #32]
 8008722:	e039      	b.n	8008798 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8008724:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008728:	2b09      	cmp	r3, #9
 800872a:	dc14      	bgt.n	8008756 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800872c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800872e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8008730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008734:	493d      	ldr	r1, [pc, #244]	; (800882c <etharp_find_entry+0x2d4>)
 8008736:	4613      	mov	r3, r2
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	4413      	add	r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	440b      	add	r3, r1
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d018      	beq.n	8008778 <etharp_find_entry+0x220>
 8008746:	4b3a      	ldr	r3, [pc, #232]	; (8008830 <etharp_find_entry+0x2d8>)
 8008748:	f240 126d 	movw	r2, #365	; 0x16d
 800874c:	493b      	ldr	r1, [pc, #236]	; (800883c <etharp_find_entry+0x2e4>)
 800874e:	483a      	ldr	r0, [pc, #232]	; (8008838 <etharp_find_entry+0x2e0>)
 8008750:	f009 fbd2 	bl	8011ef8 <iprintf>
 8008754:	e010      	b.n	8008778 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8008756:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800875a:	2b09      	cmp	r3, #9
 800875c:	dc02      	bgt.n	8008764 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800875e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008760:	843b      	strh	r3, [r7, #32]
 8008762:	e009      	b.n	8008778 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008764:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008768:	2b09      	cmp	r3, #9
 800876a:	dc02      	bgt.n	8008772 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800876c:	8bfb      	ldrh	r3, [r7, #30]
 800876e:	843b      	strh	r3, [r7, #32]
 8008770:	e002      	b.n	8008778 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8008772:	f04f 33ff 	mov.w	r3, #4294967295
 8008776:	e054      	b.n	8008822 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008778:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800877c:	2b09      	cmp	r3, #9
 800877e:	dd06      	ble.n	800878e <etharp_find_entry+0x236>
 8008780:	4b2b      	ldr	r3, [pc, #172]	; (8008830 <etharp_find_entry+0x2d8>)
 8008782:	f240 127f 	movw	r2, #383	; 0x17f
 8008786:	492e      	ldr	r1, [pc, #184]	; (8008840 <etharp_find_entry+0x2e8>)
 8008788:	482b      	ldr	r0, [pc, #172]	; (8008838 <etharp_find_entry+0x2e0>)
 800878a:	f009 fbb5 	bl	8011ef8 <iprintf>
    etharp_free_entry(i);
 800878e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008792:	4618      	mov	r0, r3
 8008794:	f7ff fe06 	bl	80083a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008798:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800879c:	2b09      	cmp	r3, #9
 800879e:	dd06      	ble.n	80087ae <etharp_find_entry+0x256>
 80087a0:	4b23      	ldr	r3, [pc, #140]	; (8008830 <etharp_find_entry+0x2d8>)
 80087a2:	f240 1283 	movw	r2, #387	; 0x183
 80087a6:	4926      	ldr	r1, [pc, #152]	; (8008840 <etharp_find_entry+0x2e8>)
 80087a8:	4823      	ldr	r0, [pc, #140]	; (8008838 <etharp_find_entry+0x2e0>)
 80087aa:	f009 fba5 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80087ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087b2:	491e      	ldr	r1, [pc, #120]	; (800882c <etharp_find_entry+0x2d4>)
 80087b4:	4613      	mov	r3, r2
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	4413      	add	r3, r2
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	440b      	add	r3, r1
 80087be:	3314      	adds	r3, #20
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d006      	beq.n	80087d4 <etharp_find_entry+0x27c>
 80087c6:	4b1a      	ldr	r3, [pc, #104]	; (8008830 <etharp_find_entry+0x2d8>)
 80087c8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80087cc:	491d      	ldr	r1, [pc, #116]	; (8008844 <etharp_find_entry+0x2ec>)
 80087ce:	481a      	ldr	r0, [pc, #104]	; (8008838 <etharp_find_entry+0x2e0>)
 80087d0:	f009 fb92 	bl	8011ef8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80087da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6819      	ldr	r1, [r3, #0]
 80087e2:	4812      	ldr	r0, [pc, #72]	; (800882c <etharp_find_entry+0x2d4>)
 80087e4:	4613      	mov	r3, r2
 80087e6:	005b      	lsls	r3, r3, #1
 80087e8:	4413      	add	r3, r2
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	4403      	add	r3, r0
 80087ee:	3304      	adds	r3, #4
 80087f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80087f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087f6:	490d      	ldr	r1, [pc, #52]	; (800882c <etharp_find_entry+0x2d4>)
 80087f8:	4613      	mov	r3, r2
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	4413      	add	r3, r2
 80087fe:	00db      	lsls	r3, r3, #3
 8008800:	440b      	add	r3, r1
 8008802:	3312      	adds	r3, #18
 8008804:	2200      	movs	r2, #0
 8008806:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8008808:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800880c:	4907      	ldr	r1, [pc, #28]	; (800882c <etharp_find_entry+0x2d4>)
 800880e:	4613      	mov	r3, r2
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	4413      	add	r3, r2
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	440b      	add	r3, r1
 8008818:	3308      	adds	r3, #8
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800881e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3728      	adds	r7, #40	; 0x28
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	24005138 	.word	0x24005138
 8008830:	0801301c 	.word	0x0801301c
 8008834:	08013078 	.word	0x08013078
 8008838:	080130b8 	.word	0x080130b8
 800883c:	080130e0 	.word	0x080130e0
 8008840:	080130f8 	.word	0x080130f8
 8008844:	0801310c 	.word	0x0801310c

08008848 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af02      	add	r7, sp, #8
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800885c:	2b06      	cmp	r3, #6
 800885e:	d006      	beq.n	800886e <etharp_update_arp_entry+0x26>
 8008860:	4b48      	ldr	r3, [pc, #288]	; (8008984 <etharp_update_arp_entry+0x13c>)
 8008862:	f240 12a9 	movw	r2, #425	; 0x1a9
 8008866:	4948      	ldr	r1, [pc, #288]	; (8008988 <etharp_update_arp_entry+0x140>)
 8008868:	4848      	ldr	r0, [pc, #288]	; (800898c <etharp_update_arp_entry+0x144>)
 800886a:	f009 fb45 	bl	8011ef8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d012      	beq.n	800889a <etharp_update_arp_entry+0x52>
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00e      	beq.n	800889a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68f9      	ldr	r1, [r7, #12]
 8008882:	4618      	mov	r0, r3
 8008884:	f001 facc 	bl	8009e20 <ip4_addr_isbroadcast_u32>
 8008888:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800888a:	2b00      	cmp	r3, #0
 800888c:	d105      	bne.n	800889a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008896:	2be0      	cmp	r3, #224	; 0xe0
 8008898:	d102      	bne.n	80088a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800889a:	f06f 030f 	mvn.w	r3, #15
 800889e:	e06c      	b.n	800897a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80088a0:	78fb      	ldrb	r3, [r7, #3]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	4619      	mov	r1, r3
 80088a6:	68b8      	ldr	r0, [r7, #8]
 80088a8:	f7ff fe56 	bl	8008558 <etharp_find_entry>
 80088ac:	4603      	mov	r3, r0
 80088ae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80088b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da02      	bge.n	80088be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80088b8:	8afb      	ldrh	r3, [r7, #22]
 80088ba:	b25b      	sxtb	r3, r3
 80088bc:	e05d      	b.n	800897a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80088be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80088c2:	4933      	ldr	r1, [pc, #204]	; (8008990 <etharp_update_arp_entry+0x148>)
 80088c4:	4613      	mov	r3, r2
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	4413      	add	r3, r2
 80088ca:	00db      	lsls	r3, r3, #3
 80088cc:	440b      	add	r3, r1
 80088ce:	3314      	adds	r3, #20
 80088d0:	2202      	movs	r2, #2
 80088d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80088d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80088d8:	492d      	ldr	r1, [pc, #180]	; (8008990 <etharp_update_arp_entry+0x148>)
 80088da:	4613      	mov	r3, r2
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	4413      	add	r3, r2
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	440b      	add	r3, r1
 80088e4:	3308      	adds	r3, #8
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80088ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80088ee:	4613      	mov	r3, r2
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4413      	add	r3, r2
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	3308      	adds	r3, #8
 80088f8:	4a25      	ldr	r2, [pc, #148]	; (8008990 <etharp_update_arp_entry+0x148>)
 80088fa:	4413      	add	r3, r2
 80088fc:	3304      	adds	r3, #4
 80088fe:	2206      	movs	r2, #6
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	4618      	mov	r0, r3
 8008904:	f009 fae2 	bl	8011ecc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8008908:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800890c:	4920      	ldr	r1, [pc, #128]	; (8008990 <etharp_update_arp_entry+0x148>)
 800890e:	4613      	mov	r3, r2
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	4413      	add	r3, r2
 8008914:	00db      	lsls	r3, r3, #3
 8008916:	440b      	add	r3, r1
 8008918:	3312      	adds	r3, #18
 800891a:	2200      	movs	r2, #0
 800891c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800891e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008922:	491b      	ldr	r1, [pc, #108]	; (8008990 <etharp_update_arp_entry+0x148>)
 8008924:	4613      	mov	r3, r2
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	4413      	add	r3, r2
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	440b      	add	r3, r1
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d021      	beq.n	8008978 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8008934:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008938:	4915      	ldr	r1, [pc, #84]	; (8008990 <etharp_update_arp_entry+0x148>)
 800893a:	4613      	mov	r3, r2
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	4413      	add	r3, r2
 8008940:	00db      	lsls	r3, r3, #3
 8008942:	440b      	add	r3, r1
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8008948:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800894c:	4910      	ldr	r1, [pc, #64]	; (8008990 <etharp_update_arp_entry+0x148>)
 800894e:	4613      	mov	r3, r2
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	4413      	add	r3, r2
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	440b      	add	r3, r1
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6939      	ldr	r1, [r7, #16]
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 fcf3 	bl	8009358 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8008972:	6938      	ldr	r0, [r7, #16]
 8008974:	f003 fbca 	bl	800c10c <pbuf_free>
  }
  return ERR_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	0801301c 	.word	0x0801301c
 8008988:	08013138 	.word	0x08013138
 800898c:	080130b8 	.word	0x080130b8
 8008990:	24005138 	.word	0x24005138

08008994 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800899c:	2300      	movs	r3, #0
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	e01e      	b.n	80089e0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80089a2:	4913      	ldr	r1, [pc, #76]	; (80089f0 <etharp_cleanup_netif+0x5c>)
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	4613      	mov	r3, r2
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	4413      	add	r3, r2
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	440b      	add	r3, r1
 80089b0:	3314      	adds	r3, #20
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80089b6:	7afb      	ldrb	r3, [r7, #11]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00e      	beq.n	80089da <etharp_cleanup_netif+0x46>
 80089bc:	490c      	ldr	r1, [pc, #48]	; (80089f0 <etharp_cleanup_netif+0x5c>)
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4613      	mov	r3, r2
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	4413      	add	r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	440b      	add	r3, r1
 80089ca:	3308      	adds	r3, #8
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d102      	bne.n	80089da <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f7ff fce5 	bl	80083a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	3301      	adds	r3, #1
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b09      	cmp	r3, #9
 80089e4:	dddd      	ble.n	80089a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	24005138 	.word	0x24005138

080089f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80089f4:	b5b0      	push	{r4, r5, r7, lr}
 80089f6:	b08a      	sub	sp, #40	; 0x28
 80089f8:	af04      	add	r7, sp, #16
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d107      	bne.n	8008a14 <etharp_input+0x20>
 8008a04:	4b3d      	ldr	r3, [pc, #244]	; (8008afc <etharp_input+0x108>)
 8008a06:	f240 228a 	movw	r2, #650	; 0x28a
 8008a0a:	493d      	ldr	r1, [pc, #244]	; (8008b00 <etharp_input+0x10c>)
 8008a0c:	483d      	ldr	r0, [pc, #244]	; (8008b04 <etharp_input+0x110>)
 8008a0e:	f009 fa73 	bl	8011ef8 <iprintf>
 8008a12:	e06f      	b.n	8008af4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a24:	d10c      	bne.n	8008a40 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008a2a:	2b06      	cmp	r3, #6
 8008a2c:	d108      	bne.n	8008a40 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d104      	bne.n	8008a40 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	885b      	ldrh	r3, [r3, #2]
 8008a3a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d003      	beq.n	8008a48 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f003 fb63 	bl	800c10c <pbuf_free>
    return;
 8008a46:	e055      	b.n	8008af4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	330e      	adds	r3, #14
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	3318      	adds	r3, #24
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d102      	bne.n	8008a68 <etharp_input+0x74>
    for_us = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]
 8008a66:	e009      	b.n	8008a7c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	bf0c      	ite	eq
 8008a74:	2301      	moveq	r3, #1
 8008a76:	2300      	movne	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f103 0208 	add.w	r2, r3, #8
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <etharp_input+0x98>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <etharp_input+0x9a>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	f107 010c 	add.w	r1, r7, #12
 8008a92:	6838      	ldr	r0, [r7, #0]
 8008a94:	f7ff fed8 	bl	8008848 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	88db      	ldrh	r3, [r3, #6]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa2:	d003      	beq.n	8008aac <etharp_input+0xb8>
 8008aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa8:	d01e      	beq.n	8008ae8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8008aaa:	e020      	b.n	8008aee <etharp_input+0xfa>
      if (for_us) {
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d01c      	beq.n	8008aec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	3208      	adds	r2, #8
        etharp_raw(netif,
 8008acc:	2102      	movs	r1, #2
 8008ace:	9103      	str	r1, [sp, #12]
 8008ad0:	f107 010c 	add.w	r1, r7, #12
 8008ad4:	9102      	str	r1, [sp, #8]
 8008ad6:	9201      	str	r2, [sp, #4]
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	462b      	mov	r3, r5
 8008adc:	4622      	mov	r2, r4
 8008ade:	4601      	mov	r1, r0
 8008ae0:	6838      	ldr	r0, [r7, #0]
 8008ae2:	f000 faeb 	bl	80090bc <etharp_raw>
      break;
 8008ae6:	e001      	b.n	8008aec <etharp_input+0xf8>
      break;
 8008ae8:	bf00      	nop
 8008aea:	e000      	b.n	8008aee <etharp_input+0xfa>
      break;
 8008aec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f003 fb0c 	bl	800c10c <pbuf_free>
}
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bdb0      	pop	{r4, r5, r7, pc}
 8008afa:	bf00      	nop
 8008afc:	0801301c 	.word	0x0801301c
 8008b00:	08013190 	.word	0x08013190
 8008b04:	080130b8 	.word	0x080130b8

08008b08 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af02      	add	r7, sp, #8
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	4613      	mov	r3, r2
 8008b14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008b16:	79fa      	ldrb	r2, [r7, #7]
 8008b18:	4944      	ldr	r1, [pc, #272]	; (8008c2c <etharp_output_to_arp_index+0x124>)
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	4413      	add	r3, r2
 8008b20:	00db      	lsls	r3, r3, #3
 8008b22:	440b      	add	r3, r1
 8008b24:	3314      	adds	r3, #20
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d806      	bhi.n	8008b3a <etharp_output_to_arp_index+0x32>
 8008b2c:	4b40      	ldr	r3, [pc, #256]	; (8008c30 <etharp_output_to_arp_index+0x128>)
 8008b2e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008b32:	4940      	ldr	r1, [pc, #256]	; (8008c34 <etharp_output_to_arp_index+0x12c>)
 8008b34:	4840      	ldr	r0, [pc, #256]	; (8008c38 <etharp_output_to_arp_index+0x130>)
 8008b36:	f009 f9df 	bl	8011ef8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008b3a:	79fa      	ldrb	r2, [r7, #7]
 8008b3c:	493b      	ldr	r1, [pc, #236]	; (8008c2c <etharp_output_to_arp_index+0x124>)
 8008b3e:	4613      	mov	r3, r2
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	4413      	add	r3, r2
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	440b      	add	r3, r1
 8008b48:	3314      	adds	r3, #20
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d153      	bne.n	8008bf8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008b50:	79fa      	ldrb	r2, [r7, #7]
 8008b52:	4936      	ldr	r1, [pc, #216]	; (8008c2c <etharp_output_to_arp_index+0x124>)
 8008b54:	4613      	mov	r3, r2
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	4413      	add	r3, r2
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	440b      	add	r3, r1
 8008b5e:	3312      	adds	r3, #18
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008b66:	d919      	bls.n	8008b9c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008b68:	79fa      	ldrb	r2, [r7, #7]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	4413      	add	r3, r2
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	4a2e      	ldr	r2, [pc, #184]	; (8008c2c <etharp_output_to_arp_index+0x124>)
 8008b74:	4413      	add	r3, r2
 8008b76:	3304      	adds	r3, #4
 8008b78:	4619      	mov	r1, r3
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 fb4c 	bl	8009218 <etharp_request>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d138      	bne.n	8008bf8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008b86:	79fa      	ldrb	r2, [r7, #7]
 8008b88:	4928      	ldr	r1, [pc, #160]	; (8008c2c <etharp_output_to_arp_index+0x124>)
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	4413      	add	r3, r2
 8008b90:	00db      	lsls	r3, r3, #3
 8008b92:	440b      	add	r3, r1
 8008b94:	3314      	adds	r3, #20
 8008b96:	2203      	movs	r2, #3
 8008b98:	701a      	strb	r2, [r3, #0]
 8008b9a:	e02d      	b.n	8008bf8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008b9c:	79fa      	ldrb	r2, [r7, #7]
 8008b9e:	4923      	ldr	r1, [pc, #140]	; (8008c2c <etharp_output_to_arp_index+0x124>)
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	4413      	add	r3, r2
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	440b      	add	r3, r1
 8008baa:	3312      	adds	r3, #18
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008bb2:	d321      	bcc.n	8008bf8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008bb4:	79fa      	ldrb	r2, [r7, #7]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	4413      	add	r3, r2
 8008bbc:	00db      	lsls	r3, r3, #3
 8008bbe:	4a1b      	ldr	r2, [pc, #108]	; (8008c2c <etharp_output_to_arp_index+0x124>)
 8008bc0:	4413      	add	r3, r2
 8008bc2:	1d19      	adds	r1, r3, #4
 8008bc4:	79fa      	ldrb	r2, [r7, #7]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	4413      	add	r3, r2
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	3308      	adds	r3, #8
 8008bd0:	4a16      	ldr	r2, [pc, #88]	; (8008c2c <etharp_output_to_arp_index+0x124>)
 8008bd2:	4413      	add	r3, r2
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 fafb 	bl	80091d4 <etharp_request_dst>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d109      	bne.n	8008bf8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008be4:	79fa      	ldrb	r2, [r7, #7]
 8008be6:	4911      	ldr	r1, [pc, #68]	; (8008c2c <etharp_output_to_arp_index+0x124>)
 8008be8:	4613      	mov	r3, r2
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	4413      	add	r3, r2
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	440b      	add	r3, r1
 8008bf2:	3314      	adds	r3, #20
 8008bf4:	2203      	movs	r2, #3
 8008bf6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8008bfe:	79fa      	ldrb	r2, [r7, #7]
 8008c00:	4613      	mov	r3, r2
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	4413      	add	r3, r2
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	3308      	adds	r3, #8
 8008c0a:	4a08      	ldr	r2, [pc, #32]	; (8008c2c <etharp_output_to_arp_index+0x124>)
 8008c0c:	4413      	add	r3, r2
 8008c0e:	3304      	adds	r3, #4
 8008c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c14:	9200      	str	r2, [sp, #0]
 8008c16:	460a      	mov	r2, r1
 8008c18:	68b9      	ldr	r1, [r7, #8]
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 fb9c 	bl	8009358 <ethernet_output>
 8008c20:	4603      	mov	r3, r0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	24005138 	.word	0x24005138
 8008c30:	0801301c 	.word	0x0801301c
 8008c34:	080131b0 	.word	0x080131b0
 8008c38:	080130b8 	.word	0x080130b8

08008c3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08a      	sub	sp, #40	; 0x28
 8008c40:	af02      	add	r7, sp, #8
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <etharp_output+0x24>
 8008c52:	4b73      	ldr	r3, [pc, #460]	; (8008e20 <etharp_output+0x1e4>)
 8008c54:	f240 321e 	movw	r2, #798	; 0x31e
 8008c58:	4972      	ldr	r1, [pc, #456]	; (8008e24 <etharp_output+0x1e8>)
 8008c5a:	4873      	ldr	r0, [pc, #460]	; (8008e28 <etharp_output+0x1ec>)
 8008c5c:	f009 f94c 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d106      	bne.n	8008c74 <etharp_output+0x38>
 8008c66:	4b6e      	ldr	r3, [pc, #440]	; (8008e20 <etharp_output+0x1e4>)
 8008c68:	f240 321f 	movw	r2, #799	; 0x31f
 8008c6c:	496f      	ldr	r1, [pc, #444]	; (8008e2c <etharp_output+0x1f0>)
 8008c6e:	486e      	ldr	r0, [pc, #440]	; (8008e28 <etharp_output+0x1ec>)
 8008c70:	f009 f942 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d106      	bne.n	8008c88 <etharp_output+0x4c>
 8008c7a:	4b69      	ldr	r3, [pc, #420]	; (8008e20 <etharp_output+0x1e4>)
 8008c7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008c80:	496b      	ldr	r1, [pc, #428]	; (8008e30 <etharp_output+0x1f4>)
 8008c82:	4869      	ldr	r0, [pc, #420]	; (8008e28 <etharp_output+0x1ec>)
 8008c84:	f009 f938 	bl	8011ef8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68f9      	ldr	r1, [r7, #12]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 f8c6 	bl	8009e20 <ip4_addr_isbroadcast_u32>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8008c9a:	4b66      	ldr	r3, [pc, #408]	; (8008e34 <etharp_output+0x1f8>)
 8008c9c:	61fb      	str	r3, [r7, #28]
 8008c9e:	e0af      	b.n	8008e00 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ca8:	2be0      	cmp	r3, #224	; 0xe0
 8008caa:	d118      	bne.n	8008cde <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008cac:	2301      	movs	r3, #1
 8008cae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008cb4:	235e      	movs	r3, #94	; 0x5e
 8008cb6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3302      	adds	r3, #2
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3303      	adds	r3, #3
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8008cd6:	f107 0310 	add.w	r3, r7, #16
 8008cda:	61fb      	str	r3, [r7, #28]
 8008cdc:	e090      	b.n	8008e00 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	405a      	eors	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3308      	adds	r3, #8
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d012      	beq.n	8008d1c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008cfc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d00b      	beq.n	8008d1c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	330c      	adds	r3, #12
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	330c      	adds	r3, #12
 8008d12:	61bb      	str	r3, [r7, #24]
 8008d14:	e002      	b.n	8008d1c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8008d16:	f06f 0303 	mvn.w	r3, #3
 8008d1a:	e07d      	b.n	8008e18 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008d1c:	4b46      	ldr	r3, [pc, #280]	; (8008e38 <etharp_output+0x1fc>)
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	4619      	mov	r1, r3
 8008d22:	4a46      	ldr	r2, [pc, #280]	; (8008e3c <etharp_output+0x200>)
 8008d24:	460b      	mov	r3, r1
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	440b      	add	r3, r1
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	4413      	add	r3, r2
 8008d2e:	3314      	adds	r3, #20
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d925      	bls.n	8008d82 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008d36:	4b40      	ldr	r3, [pc, #256]	; (8008e38 <etharp_output+0x1fc>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4a3f      	ldr	r2, [pc, #252]	; (8008e3c <etharp_output+0x200>)
 8008d3e:	460b      	mov	r3, r1
 8008d40:	005b      	lsls	r3, r3, #1
 8008d42:	440b      	add	r3, r1
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	4413      	add	r3, r2
 8008d48:	3308      	adds	r3, #8
 8008d4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d117      	bne.n	8008d82 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	4b38      	ldr	r3, [pc, #224]	; (8008e38 <etharp_output+0x1fc>)
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	4937      	ldr	r1, [pc, #220]	; (8008e3c <etharp_output+0x200>)
 8008d5e:	4603      	mov	r3, r0
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	4403      	add	r3, r0
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	440b      	add	r3, r1
 8008d68:	3304      	adds	r3, #4
 8008d6a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d108      	bne.n	8008d82 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8008d70:	4b31      	ldr	r3, [pc, #196]	; (8008e38 <etharp_output+0x1fc>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	461a      	mov	r2, r3
 8008d76:	68b9      	ldr	r1, [r7, #8]
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7ff fec5 	bl	8008b08 <etharp_output_to_arp_index>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	e04a      	b.n	8008e18 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008d82:	2300      	movs	r3, #0
 8008d84:	75fb      	strb	r3, [r7, #23]
 8008d86:	e031      	b.n	8008dec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008d88:	7dfa      	ldrb	r2, [r7, #23]
 8008d8a:	492c      	ldr	r1, [pc, #176]	; (8008e3c <etharp_output+0x200>)
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	005b      	lsls	r3, r3, #1
 8008d90:	4413      	add	r3, r2
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	440b      	add	r3, r1
 8008d96:	3314      	adds	r3, #20
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d923      	bls.n	8008de6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8008d9e:	7dfa      	ldrb	r2, [r7, #23]
 8008da0:	4926      	ldr	r1, [pc, #152]	; (8008e3c <etharp_output+0x200>)
 8008da2:	4613      	mov	r3, r2
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	4413      	add	r3, r2
 8008da8:	00db      	lsls	r3, r3, #3
 8008daa:	440b      	add	r3, r1
 8008dac:	3308      	adds	r3, #8
 8008dae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d117      	bne.n	8008de6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	6819      	ldr	r1, [r3, #0]
 8008dba:	7dfa      	ldrb	r2, [r7, #23]
 8008dbc:	481f      	ldr	r0, [pc, #124]	; (8008e3c <etharp_output+0x200>)
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	005b      	lsls	r3, r3, #1
 8008dc2:	4413      	add	r3, r2
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	4403      	add	r3, r0
 8008dc8:	3304      	adds	r3, #4
 8008dca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	d10a      	bne.n	8008de6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8008dd0:	4a19      	ldr	r2, [pc, #100]	; (8008e38 <etharp_output+0x1fc>)
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
 8008dd4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	68b9      	ldr	r1, [r7, #8]
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f7ff fe93 	bl	8008b08 <etharp_output_to_arp_index>
 8008de2:	4603      	mov	r3, r0
 8008de4:	e018      	b.n	8008e18 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	3301      	adds	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
 8008dec:	7dfb      	ldrb	r3, [r7, #23]
 8008dee:	2b09      	cmp	r3, #9
 8008df0:	d9ca      	bls.n	8008d88 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	69b9      	ldr	r1, [r7, #24]
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f000 f822 	bl	8008e40 <etharp_query>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	e00b      	b.n	8008e18 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	68b9      	ldr	r1, [r7, #8]
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 faa1 	bl	8009358 <ethernet_output>
 8008e16:	4603      	mov	r3, r0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3720      	adds	r7, #32
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	0801301c 	.word	0x0801301c
 8008e24:	08013190 	.word	0x08013190
 8008e28:	080130b8 	.word	0x080130b8
 8008e2c:	080131e0 	.word	0x080131e0
 8008e30:	08013180 	.word	0x08013180
 8008e34:	08015bd0 	.word	0x08015bd0
 8008e38:	24005228 	.word	0x24005228
 8008e3c:	24005138 	.word	0x24005138

08008e40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08c      	sub	sp, #48	; 0x30
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3326      	adds	r3, #38	; 0x26
 8008e50:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8008e52:	23ff      	movs	r3, #255	; 0xff
 8008e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68f9      	ldr	r1, [r7, #12]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 ffdc 	bl	8009e20 <ip4_addr_isbroadcast_u32>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10c      	bne.n	8008e88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008e76:	2be0      	cmp	r3, #224	; 0xe0
 8008e78:	d006      	beq.n	8008e88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008e88:	f06f 030f 	mvn.w	r3, #15
 8008e8c:	e101      	b.n	8009092 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	2101      	movs	r1, #1
 8008e92:	68b8      	ldr	r0, [r7, #8]
 8008e94:	f7ff fb60 	bl	8008558 <etharp_find_entry>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8008e9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	da02      	bge.n	8008eaa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8008ea4:	8a7b      	ldrh	r3, [r7, #18]
 8008ea6:	b25b      	sxtb	r3, r3
 8008ea8:	e0f3      	b.n	8009092 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8008eaa:	8a7b      	ldrh	r3, [r7, #18]
 8008eac:	2b7e      	cmp	r3, #126	; 0x7e
 8008eae:	d906      	bls.n	8008ebe <etharp_query+0x7e>
 8008eb0:	4b7a      	ldr	r3, [pc, #488]	; (800909c <etharp_query+0x25c>)
 8008eb2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8008eb6:	497a      	ldr	r1, [pc, #488]	; (80090a0 <etharp_query+0x260>)
 8008eb8:	487a      	ldr	r0, [pc, #488]	; (80090a4 <etharp_query+0x264>)
 8008eba:	f009 f81d 	bl	8011ef8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8008ebe:	8a7b      	ldrh	r3, [r7, #18]
 8008ec0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8008ec2:	7c7a      	ldrb	r2, [r7, #17]
 8008ec4:	4978      	ldr	r1, [pc, #480]	; (80090a8 <etharp_query+0x268>)
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	4413      	add	r3, r2
 8008ecc:	00db      	lsls	r3, r3, #3
 8008ece:	440b      	add	r3, r1
 8008ed0:	3314      	adds	r3, #20
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d115      	bne.n	8008f04 <etharp_query+0xc4>
    is_new_entry = 1;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008edc:	7c7a      	ldrb	r2, [r7, #17]
 8008ede:	4972      	ldr	r1, [pc, #456]	; (80090a8 <etharp_query+0x268>)
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	005b      	lsls	r3, r3, #1
 8008ee4:	4413      	add	r3, r2
 8008ee6:	00db      	lsls	r3, r3, #3
 8008ee8:	440b      	add	r3, r1
 8008eea:	3314      	adds	r3, #20
 8008eec:	2201      	movs	r2, #1
 8008eee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8008ef0:	7c7a      	ldrb	r2, [r7, #17]
 8008ef2:	496d      	ldr	r1, [pc, #436]	; (80090a8 <etharp_query+0x268>)
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	4413      	add	r3, r2
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	440b      	add	r3, r1
 8008efe:	3308      	adds	r3, #8
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8008f04:	7c7a      	ldrb	r2, [r7, #17]
 8008f06:	4968      	ldr	r1, [pc, #416]	; (80090a8 <etharp_query+0x268>)
 8008f08:	4613      	mov	r3, r2
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	4413      	add	r3, r2
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	440b      	add	r3, r1
 8008f12:	3314      	adds	r3, #20
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d011      	beq.n	8008f3e <etharp_query+0xfe>
 8008f1a:	7c7a      	ldrb	r2, [r7, #17]
 8008f1c:	4962      	ldr	r1, [pc, #392]	; (80090a8 <etharp_query+0x268>)
 8008f1e:	4613      	mov	r3, r2
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	4413      	add	r3, r2
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	440b      	add	r3, r1
 8008f28:	3314      	adds	r3, #20
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d806      	bhi.n	8008f3e <etharp_query+0xfe>
 8008f30:	4b5a      	ldr	r3, [pc, #360]	; (800909c <etharp_query+0x25c>)
 8008f32:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008f36:	495d      	ldr	r1, [pc, #372]	; (80090ac <etharp_query+0x26c>)
 8008f38:	485a      	ldr	r0, [pc, #360]	; (80090a4 <etharp_query+0x264>)
 8008f3a:	f008 ffdd 	bl	8011ef8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d102      	bne.n	8008f4a <etharp_query+0x10a>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10c      	bne.n	8008f64 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8008f4a:	68b9      	ldr	r1, [r7, #8]
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 f963 	bl	8009218 <etharp_request>
 8008f52:	4603      	mov	r3, r0
 8008f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d102      	bne.n	8008f64 <etharp_query+0x124>
      return result;
 8008f5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f62:	e096      	b.n	8009092 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d106      	bne.n	8008f78 <etharp_query+0x138>
 8008f6a:	4b4c      	ldr	r3, [pc, #304]	; (800909c <etharp_query+0x25c>)
 8008f6c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8008f70:	494f      	ldr	r1, [pc, #316]	; (80090b0 <etharp_query+0x270>)
 8008f72:	484c      	ldr	r0, [pc, #304]	; (80090a4 <etharp_query+0x264>)
 8008f74:	f008 ffc0 	bl	8011ef8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8008f78:	7c7a      	ldrb	r2, [r7, #17]
 8008f7a:	494b      	ldr	r1, [pc, #300]	; (80090a8 <etharp_query+0x268>)
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	4413      	add	r3, r2
 8008f82:	00db      	lsls	r3, r3, #3
 8008f84:	440b      	add	r3, r1
 8008f86:	3314      	adds	r3, #20
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d917      	bls.n	8008fbe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8008f8e:	4a49      	ldr	r2, [pc, #292]	; (80090b4 <etharp_query+0x274>)
 8008f90:	7c7b      	ldrb	r3, [r7, #17]
 8008f92:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008f94:	7c7a      	ldrb	r2, [r7, #17]
 8008f96:	4613      	mov	r3, r2
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	4413      	add	r3, r2
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	4a41      	ldr	r2, [pc, #260]	; (80090a8 <etharp_query+0x268>)
 8008fa2:	4413      	add	r3, r2
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008faa:	9200      	str	r2, [sp, #0]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f9d1 	bl	8009358 <ethernet_output>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fbc:	e067      	b.n	800908e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008fbe:	7c7a      	ldrb	r2, [r7, #17]
 8008fc0:	4939      	ldr	r1, [pc, #228]	; (80090a8 <etharp_query+0x268>)
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	4413      	add	r3, r2
 8008fc8:	00db      	lsls	r3, r3, #3
 8008fca:	440b      	add	r3, r1
 8008fcc:	3314      	adds	r3, #20
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d15c      	bne.n	800908e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	61fb      	str	r3, [r7, #28]
    while (p) {
 8008fdc:	e01c      	b.n	8009018 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	895a      	ldrh	r2, [r3, #10]
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	891b      	ldrh	r3, [r3, #8]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d10a      	bne.n	8009000 <etharp_query+0x1c0>
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d006      	beq.n	8009000 <etharp_query+0x1c0>
 8008ff2:	4b2a      	ldr	r3, [pc, #168]	; (800909c <etharp_query+0x25c>)
 8008ff4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008ff8:	492f      	ldr	r1, [pc, #188]	; (80090b8 <etharp_query+0x278>)
 8008ffa:	482a      	ldr	r0, [pc, #168]	; (80090a4 <etharp_query+0x264>)
 8008ffc:	f008 ff7c 	bl	8011ef8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	7b1b      	ldrb	r3, [r3, #12]
 8009004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <etharp_query+0x1d2>
        copy_needed = 1;
 800900c:	2301      	movs	r3, #1
 800900e:	61bb      	str	r3, [r7, #24]
        break;
 8009010:	e005      	b.n	800901e <etharp_query+0x1de>
      }
      p = p->next;
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1df      	bne.n	8008fde <etharp_query+0x19e>
    }
    if (copy_needed) {
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d007      	beq.n	8009034 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	f44f 7120 	mov.w	r1, #640	; 0x280
 800902a:	200e      	movs	r0, #14
 800902c:	f003 faca 	bl	800c5c4 <pbuf_clone>
 8009030:	61f8      	str	r0, [r7, #28]
 8009032:	e004      	b.n	800903e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8009038:	69f8      	ldr	r0, [r7, #28]
 800903a:	f003 f907 	bl	800c24c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d021      	beq.n	8009088 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8009044:	7c7a      	ldrb	r2, [r7, #17]
 8009046:	4918      	ldr	r1, [pc, #96]	; (80090a8 <etharp_query+0x268>)
 8009048:	4613      	mov	r3, r2
 800904a:	005b      	lsls	r3, r3, #1
 800904c:	4413      	add	r3, r2
 800904e:	00db      	lsls	r3, r3, #3
 8009050:	440b      	add	r3, r1
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8009058:	7c7a      	ldrb	r2, [r7, #17]
 800905a:	4913      	ldr	r1, [pc, #76]	; (80090a8 <etharp_query+0x268>)
 800905c:	4613      	mov	r3, r2
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	4413      	add	r3, r2
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	440b      	add	r3, r1
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4618      	mov	r0, r3
 800906a:	f003 f84f 	bl	800c10c <pbuf_free>
      }
      arp_table[i].q = p;
 800906e:	7c7a      	ldrb	r2, [r7, #17]
 8009070:	490d      	ldr	r1, [pc, #52]	; (80090a8 <etharp_query+0x268>)
 8009072:	4613      	mov	r3, r2
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	4413      	add	r3, r2
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	440b      	add	r3, r1
 800907c:	69fa      	ldr	r2, [r7, #28]
 800907e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009086:	e002      	b.n	800908e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8009088:	23ff      	movs	r3, #255	; 0xff
 800908a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800908e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009092:	4618      	mov	r0, r3
 8009094:	3728      	adds	r7, #40	; 0x28
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	0801301c 	.word	0x0801301c
 80090a0:	080131ec 	.word	0x080131ec
 80090a4:	080130b8 	.word	0x080130b8
 80090a8:	24005138 	.word	0x24005138
 80090ac:	080131fc 	.word	0x080131fc
 80090b0:	080131e0 	.word	0x080131e0
 80090b4:	24005228 	.word	0x24005228
 80090b8:	08013224 	.word	0x08013224

080090bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08a      	sub	sp, #40	; 0x28
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d106      	bne.n	80090e2 <etharp_raw+0x26>
 80090d4:	4b3a      	ldr	r3, [pc, #232]	; (80091c0 <etharp_raw+0x104>)
 80090d6:	f240 4257 	movw	r2, #1111	; 0x457
 80090da:	493a      	ldr	r1, [pc, #232]	; (80091c4 <etharp_raw+0x108>)
 80090dc:	483a      	ldr	r0, [pc, #232]	; (80091c8 <etharp_raw+0x10c>)
 80090de:	f008 ff0b 	bl	8011ef8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80090e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80090e6:	211c      	movs	r1, #28
 80090e8:	200e      	movs	r0, #14
 80090ea:	f002 fd2b 	bl	800bb44 <pbuf_alloc>
 80090ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d102      	bne.n	80090fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80090f6:	f04f 33ff 	mov.w	r3, #4294967295
 80090fa:	e05d      	b.n	80091b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	895b      	ldrh	r3, [r3, #10]
 8009100:	2b1b      	cmp	r3, #27
 8009102:	d806      	bhi.n	8009112 <etharp_raw+0x56>
 8009104:	4b2e      	ldr	r3, [pc, #184]	; (80091c0 <etharp_raw+0x104>)
 8009106:	f240 4262 	movw	r2, #1122	; 0x462
 800910a:	4930      	ldr	r1, [pc, #192]	; (80091cc <etharp_raw+0x110>)
 800910c:	482e      	ldr	r0, [pc, #184]	; (80091c8 <etharp_raw+0x10c>)
 800910e:	f008 fef3 	bl	8011ef8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009118:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff f914 	bl	8008348 <lwip_htons>
 8009120:	4603      	mov	r3, r0
 8009122:	461a      	mov	r2, r3
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800912e:	2b06      	cmp	r3, #6
 8009130:	d006      	beq.n	8009140 <etharp_raw+0x84>
 8009132:	4b23      	ldr	r3, [pc, #140]	; (80091c0 <etharp_raw+0x104>)
 8009134:	f240 4269 	movw	r2, #1129	; 0x469
 8009138:	4925      	ldr	r1, [pc, #148]	; (80091d0 <etharp_raw+0x114>)
 800913a:	4823      	ldr	r0, [pc, #140]	; (80091c8 <etharp_raw+0x10c>)
 800913c:	f008 fedc 	bl	8011ef8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	3308      	adds	r3, #8
 8009144:	2206      	movs	r2, #6
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	4618      	mov	r0, r3
 800914a:	f008 febf 	bl	8011ecc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	3312      	adds	r3, #18
 8009152:	2206      	movs	r2, #6
 8009154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009156:	4618      	mov	r0, r3
 8009158:	f008 feb8 	bl	8011ecc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	330e      	adds	r3, #14
 8009160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009162:	6812      	ldr	r2, [r2, #0]
 8009164:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	3318      	adds	r3, #24
 800916a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800916c:	6812      	ldr	r2, [r2, #0]
 800916e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2200      	movs	r2, #0
 8009174:	701a      	strb	r2, [r3, #0]
 8009176:	2200      	movs	r2, #0
 8009178:	f042 0201 	orr.w	r2, r2, #1
 800917c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2200      	movs	r2, #0
 8009182:	f042 0208 	orr.w	r2, r2, #8
 8009186:	709a      	strb	r2, [r3, #2]
 8009188:	2200      	movs	r2, #0
 800918a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	2206      	movs	r2, #6
 8009190:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2204      	movs	r2, #4
 8009196:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009198:	f640 0306 	movw	r3, #2054	; 0x806
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	69b9      	ldr	r1, [r7, #24]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 f8d7 	bl	8009358 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80091aa:	69b8      	ldr	r0, [r7, #24]
 80091ac:	f002 ffae 	bl	800c10c <pbuf_free>
  p = NULL;
 80091b0:	2300      	movs	r3, #0
 80091b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80091b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3720      	adds	r7, #32
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	0801301c 	.word	0x0801301c
 80091c4:	08013190 	.word	0x08013190
 80091c8:	080130b8 	.word	0x080130b8
 80091cc:	08013240 	.word	0x08013240
 80091d0:	08013274 	.word	0x08013274

080091d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af04      	add	r7, sp, #16
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80091f0:	2201      	movs	r2, #1
 80091f2:	9203      	str	r2, [sp, #12]
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	9202      	str	r2, [sp, #8]
 80091f8:	4a06      	ldr	r2, [pc, #24]	; (8009214 <etharp_request_dst+0x40>)
 80091fa:	9201      	str	r2, [sp, #4]
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	4603      	mov	r3, r0
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff ff5a 	bl	80090bc <etharp_raw>
 8009208:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	08015bd8 	.word	0x08015bd8

08009218 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8009222:	4a05      	ldr	r2, [pc, #20]	; (8009238 <etharp_request+0x20>)
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff ffd4 	bl	80091d4 <etharp_request_dst>
 800922c:	4603      	mov	r3, r0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	08015bd0 	.word	0x08015bd0

0800923c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8009246:	230e      	movs	r3, #14
 8009248:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	895b      	ldrh	r3, [r3, #10]
 800924e:	2b0e      	cmp	r3, #14
 8009250:	d96e      	bls.n	8009330 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	7bdb      	ldrb	r3, [r3, #15]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009260:	3301      	adds	r3, #1
 8009262:	b2da      	uxtb	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	7b1a      	ldrb	r2, [r3, #12]
 8009272:	7b5b      	ldrb	r3, [r3, #13]
 8009274:	021b      	lsls	r3, r3, #8
 8009276:	4313      	orrs	r3, r2
 8009278:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	2b00      	cmp	r3, #0
 8009284:	d023      	beq.n	80092ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d10f      	bne.n	80092ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	785b      	ldrb	r3, [r3, #1]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d11b      	bne.n	80092ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800929a:	2b5e      	cmp	r3, #94	; 0x5e
 800929c:	d117      	bne.n	80092ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	7b5b      	ldrb	r3, [r3, #13]
 80092a2:	f043 0310 	orr.w	r3, r3, #16
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	735a      	strb	r2, [r3, #13]
 80092ac:	e00f      	b.n	80092ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	2206      	movs	r2, #6
 80092b2:	4928      	ldr	r1, [pc, #160]	; (8009354 <ethernet_input+0x118>)
 80092b4:	4618      	mov	r0, r3
 80092b6:	f008 fdf9 	bl	8011eac <memcmp>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d106      	bne.n	80092ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	7b5b      	ldrb	r3, [r3, #13]
 80092c4:	f043 0308 	orr.w	r3, r3, #8
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80092ce:	89fb      	ldrh	r3, [r7, #14]
 80092d0:	2b08      	cmp	r3, #8
 80092d2:	d003      	beq.n	80092dc <ethernet_input+0xa0>
 80092d4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80092d8:	d014      	beq.n	8009304 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80092da:	e032      	b.n	8009342 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092e2:	f003 0308 	and.w	r3, r3, #8
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d024      	beq.n	8009334 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80092ea:	8afb      	ldrh	r3, [r7, #22]
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f002 fe86 	bl	800c000 <pbuf_remove_header>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d11e      	bne.n	8009338 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fb93 	bl	8009a28 <ip4_input>
      break;
 8009302:	e013      	b.n	800932c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800930a:	f003 0308 	and.w	r3, r3, #8
 800930e:	2b00      	cmp	r3, #0
 8009310:	d014      	beq.n	800933c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8009312:	8afb      	ldrh	r3, [r7, #22]
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f002 fe72 	bl	800c000 <pbuf_remove_header>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10e      	bne.n	8009340 <ethernet_input+0x104>
        etharp_input(p, netif);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7ff fb65 	bl	80089f4 <etharp_input>
      break;
 800932a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	e00c      	b.n	800934a <ethernet_input+0x10e>
    goto free_and_return;
 8009330:	bf00      	nop
 8009332:	e006      	b.n	8009342 <ethernet_input+0x106>
        goto free_and_return;
 8009334:	bf00      	nop
 8009336:	e004      	b.n	8009342 <ethernet_input+0x106>
        goto free_and_return;
 8009338:	bf00      	nop
 800933a:	e002      	b.n	8009342 <ethernet_input+0x106>
        goto free_and_return;
 800933c:	bf00      	nop
 800933e:	e000      	b.n	8009342 <ethernet_input+0x106>
        goto free_and_return;
 8009340:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f002 fee2 	bl	800c10c <pbuf_free>
  return ERR_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	08015bd0 	.word	0x08015bd0

08009358 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8009366:	8c3b      	ldrh	r3, [r7, #32]
 8009368:	4618      	mov	r0, r3
 800936a:	f7fe ffed 	bl	8008348 <lwip_htons>
 800936e:	4603      	mov	r3, r0
 8009370:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8009372:	210e      	movs	r1, #14
 8009374:	68b8      	ldr	r0, [r7, #8]
 8009376:	f002 fe33 	bl	800bfe0 <pbuf_add_header>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d125      	bne.n	80093cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	8afa      	ldrh	r2, [r7, #22]
 800938a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	2206      	movs	r2, #6
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	4618      	mov	r0, r3
 8009394:	f008 fd9a 	bl	8011ecc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	3306      	adds	r3, #6
 800939c:	2206      	movs	r2, #6
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f008 fd93 	bl	8011ecc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093ac:	2b06      	cmp	r3, #6
 80093ae:	d006      	beq.n	80093be <ethernet_output+0x66>
 80093b0:	4b0a      	ldr	r3, [pc, #40]	; (80093dc <ethernet_output+0x84>)
 80093b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80093b6:	490a      	ldr	r1, [pc, #40]	; (80093e0 <ethernet_output+0x88>)
 80093b8:	480a      	ldr	r0, [pc, #40]	; (80093e4 <ethernet_output+0x8c>)
 80093ba:	f008 fd9d 	bl	8011ef8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	4798      	blx	r3
 80093c8:	4603      	mov	r3, r0
 80093ca:	e002      	b.n	80093d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80093cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80093ce:	f06f 0301 	mvn.w	r3, #1
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	080132b8 	.word	0x080132b8
 80093e0:	08013310 	.word	0x08013310
 80093e4:	08013344 	.word	0x08013344

080093e8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08e      	sub	sp, #56	; 0x38
 80093ec:	af04      	add	r7, sp, #16
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80093f2:	4b87      	ldr	r3, [pc, #540]	; (8009610 <icmp_input+0x228>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	f003 030f 	and.w	r3, r3, #15
 8009400:	b2db      	uxtb	r3, r3
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	b2db      	uxtb	r3, r3
 8009406:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8009408:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800940a:	2b13      	cmp	r3, #19
 800940c:	f240 80e8 	bls.w	80095e0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	895b      	ldrh	r3, [r3, #10]
 8009414:	2b03      	cmp	r3, #3
 8009416:	f240 80e5 	bls.w	80095e4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8009424:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 80d2 	beq.w	80095d2 <icmp_input+0x1ea>
 800942e:	2b08      	cmp	r3, #8
 8009430:	f040 80d2 	bne.w	80095d8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8009434:	4b77      	ldr	r3, [pc, #476]	; (8009614 <icmp_input+0x22c>)
 8009436:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009438:	4b75      	ldr	r3, [pc, #468]	; (8009610 <icmp_input+0x228>)
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009440:	2be0      	cmp	r3, #224	; 0xe0
 8009442:	f000 80d6 	beq.w	80095f2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009446:	4b72      	ldr	r3, [pc, #456]	; (8009610 <icmp_input+0x228>)
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	4a71      	ldr	r2, [pc, #452]	; (8009610 <icmp_input+0x228>)
 800944c:	6812      	ldr	r2, [r2, #0]
 800944e:	4611      	mov	r1, r2
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fce5 	bl	8009e20 <ip4_addr_isbroadcast_u32>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	f040 80cc 	bne.w	80095f6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	891b      	ldrh	r3, [r3, #8]
 8009462:	2b07      	cmp	r3, #7
 8009464:	f240 80c0 	bls.w	80095e8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f9e0 	bl	800982e <inet_chksum_pbuf>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d003      	beq.n	800947c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f002 fe49 	bl	800c10c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800947a:	e0c5      	b.n	8009608 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800947c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800947e:	330e      	adds	r3, #14
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f002 fdac 	bl	800bfe0 <pbuf_add_header>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d04b      	beq.n	8009526 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	891a      	ldrh	r2, [r3, #8]
 8009492:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009494:	4413      	add	r3, r2
 8009496:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	891b      	ldrh	r3, [r3, #8]
 800949c:	8b7a      	ldrh	r2, [r7, #26]
 800949e:	429a      	cmp	r2, r3
 80094a0:	f0c0 80ab 	bcc.w	80095fa <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80094a4:	8b7b      	ldrh	r3, [r7, #26]
 80094a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80094aa:	4619      	mov	r1, r3
 80094ac:	200e      	movs	r0, #14
 80094ae:	f002 fb49 	bl	800bb44 <pbuf_alloc>
 80094b2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 80a1 	beq.w	80095fe <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	895b      	ldrh	r3, [r3, #10]
 80094c0:	461a      	mov	r2, r3
 80094c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094c4:	3308      	adds	r3, #8
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d203      	bcs.n	80094d2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80094ca:	6978      	ldr	r0, [r7, #20]
 80094cc:	f002 fe1e 	bl	800c10c <pbuf_free>
          goto icmperr;
 80094d0:	e096      	b.n	8009600 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80094d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094da:	4618      	mov	r0, r3
 80094dc:	f008 fcf6 	bl	8011ecc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80094e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094e2:	4619      	mov	r1, r3
 80094e4:	6978      	ldr	r0, [r7, #20]
 80094e6:	f002 fd8b 	bl	800c000 <pbuf_remove_header>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d009      	beq.n	8009504 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80094f0:	4b49      	ldr	r3, [pc, #292]	; (8009618 <icmp_input+0x230>)
 80094f2:	22b5      	movs	r2, #181	; 0xb5
 80094f4:	4949      	ldr	r1, [pc, #292]	; (800961c <icmp_input+0x234>)
 80094f6:	484a      	ldr	r0, [pc, #296]	; (8009620 <icmp_input+0x238>)
 80094f8:	f008 fcfe 	bl	8011ef8 <iprintf>
          pbuf_free(r);
 80094fc:	6978      	ldr	r0, [r7, #20]
 80094fe:	f002 fe05 	bl	800c10c <pbuf_free>
          goto icmperr;
 8009502:	e07d      	b.n	8009600 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	6978      	ldr	r0, [r7, #20]
 8009508:	f002 ff18 	bl	800c33c <pbuf_copy>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8009512:	6978      	ldr	r0, [r7, #20]
 8009514:	f002 fdfa 	bl	800c10c <pbuf_free>
          goto icmperr;
 8009518:	e072      	b.n	8009600 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f002 fdf6 	bl	800c10c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	607b      	str	r3, [r7, #4]
 8009524:	e00f      	b.n	8009546 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009526:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009528:	330e      	adds	r3, #14
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f002 fd67 	bl	800c000 <pbuf_remove_header>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d006      	beq.n	8009546 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8009538:	4b37      	ldr	r3, [pc, #220]	; (8009618 <icmp_input+0x230>)
 800953a:	22c6      	movs	r2, #198	; 0xc6
 800953c:	4939      	ldr	r1, [pc, #228]	; (8009624 <icmp_input+0x23c>)
 800953e:	4838      	ldr	r0, [pc, #224]	; (8009620 <icmp_input+0x238>)
 8009540:	f008 fcda 	bl	8011ef8 <iprintf>
          goto icmperr;
 8009544:	e05c      	b.n	8009600 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800954c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f002 fd45 	bl	800bfe0 <pbuf_add_header>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d13c      	bne.n	80095d6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800956a:	4b29      	ldr	r3, [pc, #164]	; (8009610 <icmp_input+0x228>)
 800956c:	691a      	ldr	r2, [r3, #16]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	885b      	ldrh	r3, [r3, #2]
 800957c:	b29b      	uxth	r3, r3
 800957e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8009582:	4293      	cmp	r3, r2
 8009584:	d907      	bls.n	8009596 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	885b      	ldrh	r3, [r3, #2]
 800958a:	b29b      	uxth	r3, r3
 800958c:	3309      	adds	r3, #9
 800958e:	b29a      	uxth	r2, r3
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	805a      	strh	r2, [r3, #2]
 8009594:	e006      	b.n	80095a4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	885b      	ldrh	r3, [r3, #2]
 800959a:	b29b      	uxth	r3, r3
 800959c:	3308      	adds	r3, #8
 800959e:	b29a      	uxth	r2, r3
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	22ff      	movs	r2, #255	; 0xff
 80095a8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	729a      	strb	r2, [r3, #10]
 80095b0:	2200      	movs	r2, #0
 80095b2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	9302      	str	r3, [sp, #8]
 80095b8:	2301      	movs	r3, #1
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	2300      	movs	r3, #0
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	23ff      	movs	r3, #255	; 0xff
 80095c2:	2200      	movs	r2, #0
 80095c4:	69f9      	ldr	r1, [r7, #28]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fb52 	bl	8009c70 <ip4_output_if>
 80095cc:	4603      	mov	r3, r0
 80095ce:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80095d0:	e001      	b.n	80095d6 <icmp_input+0x1ee>
      break;
 80095d2:	bf00      	nop
 80095d4:	e000      	b.n	80095d8 <icmp_input+0x1f0>
      break;
 80095d6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f002 fd97 	bl	800c10c <pbuf_free>
  return;
 80095de:	e013      	b.n	8009608 <icmp_input+0x220>
    goto lenerr;
 80095e0:	bf00      	nop
 80095e2:	e002      	b.n	80095ea <icmp_input+0x202>
    goto lenerr;
 80095e4:	bf00      	nop
 80095e6:	e000      	b.n	80095ea <icmp_input+0x202>
        goto lenerr;
 80095e8:	bf00      	nop
lenerr:
  pbuf_free(p);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f002 fd8e 	bl	800c10c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80095f0:	e00a      	b.n	8009608 <icmp_input+0x220>
        goto icmperr;
 80095f2:	bf00      	nop
 80095f4:	e004      	b.n	8009600 <icmp_input+0x218>
        goto icmperr;
 80095f6:	bf00      	nop
 80095f8:	e002      	b.n	8009600 <icmp_input+0x218>
          goto icmperr;
 80095fa:	bf00      	nop
 80095fc:	e000      	b.n	8009600 <icmp_input+0x218>
          goto icmperr;
 80095fe:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f002 fd83 	bl	800c10c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8009606:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8009608:	3728      	adds	r7, #40	; 0x28
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	2400522c 	.word	0x2400522c
 8009614:	24005240 	.word	0x24005240
 8009618:	0801336c 	.word	0x0801336c
 800961c:	080133c4 	.word	0x080133c4
 8009620:	080133fc 	.word	0x080133fc
 8009624:	08013424 	.word	0x08013424

08009628 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	461a      	mov	r2, r3
 8009638:	2103      	movs	r1, #3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f814 	bl	8009668 <icmp_send_response>
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	461a      	mov	r2, r3
 8009658:	210b      	movs	r1, #11
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f804 	bl	8009668 <icmp_send_response>
}
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08c      	sub	sp, #48	; 0x30
 800966c:	af04      	add	r7, sp, #16
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
 8009674:	4613      	mov	r3, r2
 8009676:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009678:	f44f 7220 	mov.w	r2, #640	; 0x280
 800967c:	2124      	movs	r1, #36	; 0x24
 800967e:	2022      	movs	r0, #34	; 0x22
 8009680:	f002 fa60 	bl	800bb44 <pbuf_alloc>
 8009684:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d056      	beq.n	800973a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	895b      	ldrh	r3, [r3, #10]
 8009690:	2b23      	cmp	r3, #35	; 0x23
 8009692:	d806      	bhi.n	80096a2 <icmp_send_response+0x3a>
 8009694:	4b2b      	ldr	r3, [pc, #172]	; (8009744 <icmp_send_response+0xdc>)
 8009696:	f240 1267 	movw	r2, #359	; 0x167
 800969a:	492b      	ldr	r1, [pc, #172]	; (8009748 <icmp_send_response+0xe0>)
 800969c:	482b      	ldr	r0, [pc, #172]	; (800974c <icmp_send_response+0xe4>)
 800969e:	f008 fc2b 	bl	8011ef8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	78fa      	ldrb	r2, [r7, #3]
 80096b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	78ba      	ldrb	r2, [r7, #2]
 80096b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2200      	movs	r2, #0
 80096be:	711a      	strb	r2, [r3, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2200      	movs	r2, #0
 80096c8:	719a      	strb	r2, [r3, #6]
 80096ca:	2200      	movs	r2, #0
 80096cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f103 0008 	add.w	r0, r3, #8
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	221c      	movs	r2, #28
 80096dc:	4619      	mov	r1, r3
 80096de:	f008 fbf5 	bl	8011ecc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80096e8:	f107 030c 	add.w	r3, r7, #12
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 f901 	bl	80098f4 <ip4_route>
 80096f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01b      	beq.n	8009732 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2200      	movs	r2, #0
 80096fe:	709a      	strb	r2, [r3, #2]
 8009700:	2200      	movs	r2, #0
 8009702:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	895b      	ldrh	r3, [r3, #10]
 8009708:	4619      	mov	r1, r3
 800970a:	6978      	ldr	r0, [r7, #20]
 800970c:	f000 f87d 	bl	800980a <inet_chksum>
 8009710:	4603      	mov	r3, r0
 8009712:	461a      	mov	r2, r3
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009718:	f107 020c 	add.w	r2, r7, #12
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	9302      	str	r3, [sp, #8]
 8009720:	2301      	movs	r3, #1
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	2300      	movs	r3, #0
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	23ff      	movs	r3, #255	; 0xff
 800972a:	2100      	movs	r1, #0
 800972c:	69f8      	ldr	r0, [r7, #28]
 800972e:	f000 fa9f 	bl	8009c70 <ip4_output_if>
  }
  pbuf_free(q);
 8009732:	69f8      	ldr	r0, [r7, #28]
 8009734:	f002 fcea 	bl	800c10c <pbuf_free>
 8009738:	e000      	b.n	800973c <icmp_send_response+0xd4>
    return;
 800973a:	bf00      	nop
}
 800973c:	3720      	adds	r7, #32
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	0801336c 	.word	0x0801336c
 8009748:	08013458 	.word	0x08013458
 800974c:	080133fc 	.word	0x080133fc

08009750 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009750:	b480      	push	{r7}
 8009752:	b089      	sub	sp, #36	; 0x24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00d      	beq.n	8009790 <lwip_standard_chksum+0x40>
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	dd0a      	ble.n	8009790 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800977a:	69fa      	ldr	r2, [r7, #28]
 800977c:	1c53      	adds	r3, r2, #1
 800977e:	61fb      	str	r3, [r7, #28]
 8009780:	f107 030e 	add.w	r3, r7, #14
 8009784:	3301      	adds	r3, #1
 8009786:	7812      	ldrb	r2, [r2, #0]
 8009788:	701a      	strb	r2, [r3, #0]
    len--;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	3b01      	subs	r3, #1
 800978e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8009794:	e00a      	b.n	80097ac <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	1c9a      	adds	r2, r3, #2
 800979a:	61ba      	str	r2, [r7, #24]
 800979c:	881b      	ldrh	r3, [r3, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	4413      	add	r3, r2
 80097a4:	617b      	str	r3, [r7, #20]
    len -= 2;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	3b02      	subs	r3, #2
 80097aa:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	dcf1      	bgt.n	8009796 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	dd04      	ble.n	80097c2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80097b8:	f107 030e 	add.w	r3, r7, #14
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	7812      	ldrb	r2, [r2, #0]
 80097c0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80097c2:	89fb      	ldrh	r3, [r7, #14]
 80097c4:	461a      	mov	r2, r3
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	4413      	add	r3, r2
 80097ca:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	0c1a      	lsrs	r2, r3, #16
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	4413      	add	r3, r2
 80097d6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	0c1a      	lsrs	r2, r3, #16
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	b29b      	uxth	r3, r3
 80097e0:	4413      	add	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d007      	beq.n	80097fa <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	0a1b      	lsrs	r3, r3, #8
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	4313      	orrs	r3, r2
 80097f8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	b29b      	uxth	r3, r3
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3724      	adds	r7, #36	; 0x24
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009816:	887b      	ldrh	r3, [r7, #2]
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7ff ff98 	bl	8009750 <lwip_standard_chksum>
 8009820:	4603      	mov	r3, r0
 8009822:	43db      	mvns	r3, r3
 8009824:	b29b      	uxth	r3, r3
}
 8009826:	4618      	mov	r0, r3
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b086      	sub	sp, #24
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8009836:	2300      	movs	r3, #0
 8009838:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	613b      	str	r3, [r7, #16]
 8009842:	e02b      	b.n	800989c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	895b      	ldrh	r3, [r3, #10]
 800984c:	4619      	mov	r1, r3
 800984e:	4610      	mov	r0, r2
 8009850:	f7ff ff7e 	bl	8009750 <lwip_standard_chksum>
 8009854:	4603      	mov	r3, r0
 8009856:	461a      	mov	r2, r3
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	4413      	add	r3, r2
 800985c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	0c1a      	lsrs	r2, r3, #16
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	b29b      	uxth	r3, r3
 8009866:	4413      	add	r3, r2
 8009868:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	895b      	ldrh	r3, [r3, #10]
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	b29b      	uxth	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00e      	beq.n	8009896 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	bf0c      	ite	eq
 800987e:	2301      	moveq	r3, #1
 8009880:	2300      	movne	r3, #0
 8009882:	b2db      	uxtb	r3, r3
 8009884:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	021b      	lsls	r3, r3, #8
 800988a:	b29a      	uxth	r2, r3
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	0a1b      	lsrs	r3, r3, #8
 8009890:	b2db      	uxtb	r3, r3
 8009892:	4313      	orrs	r3, r2
 8009894:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	613b      	str	r3, [r7, #16]
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1d0      	bne.n	8009844 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d007      	beq.n	80098b8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	021b      	lsls	r3, r3, #8
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	0a1b      	lsrs	r3, r3, #8
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	4313      	orrs	r3, r2
 80098b6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	43db      	mvns	r3, r3
 80098be:	b29b      	uxth	r3, r3
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80098d2:	f001 f9eb 	bl	800acac <mem_init>
  memp_init();
 80098d6:	f001 fced 	bl	800b2b4 <memp_init>
  pbuf_init();
  netif_init();
 80098da:	f001 fdeb 	bl	800b4b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80098de:	f008 f907 	bl	8011af0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80098e2:	f002 fea1 	bl	800c628 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80098e6:	f008 f8bb 	bl	8011a60 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80098ea:	bf00      	nop
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80098fc:	4b33      	ldr	r3, [pc, #204]	; (80099cc <ip4_route+0xd8>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	60fb      	str	r3, [r7, #12]
 8009902:	e036      	b.n	8009972 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	d02b      	beq.n	800996c <ip4_route+0x78>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800991a:	089b      	lsrs	r3, r3, #2
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d022      	beq.n	800996c <ip4_route+0x78>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3304      	adds	r3, #4
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d01d      	beq.n	800996c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	3304      	adds	r3, #4
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	405a      	eors	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3308      	adds	r3, #8
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4013      	ands	r3, r2
 8009944:	2b00      	cmp	r3, #0
 8009946:	d101      	bne.n	800994c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	e038      	b.n	80099be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009952:	f003 0302 	and.w	r3, r3, #2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d108      	bne.n	800996c <ip4_route+0x78>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	330c      	adds	r3, #12
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	429a      	cmp	r2, r3
 8009966:	d101      	bne.n	800996c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	e028      	b.n	80099be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	60fb      	str	r3, [r7, #12]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1c5      	bne.n	8009904 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <ip4_route+0xdc>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d01a      	beq.n	80099b6 <ip4_route+0xc2>
 8009980:	4b13      	ldr	r3, [pc, #76]	; (80099d0 <ip4_route+0xdc>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	2b00      	cmp	r3, #0
 800998e:	d012      	beq.n	80099b6 <ip4_route+0xc2>
 8009990:	4b0f      	ldr	r3, [pc, #60]	; (80099d0 <ip4_route+0xdc>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009998:	f003 0304 	and.w	r3, r3, #4
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00a      	beq.n	80099b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80099a0:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <ip4_route+0xdc>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3304      	adds	r3, #4
 80099a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d004      	beq.n	80099b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b7f      	cmp	r3, #127	; 0x7f
 80099b4:	d101      	bne.n	80099ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	e001      	b.n	80099be <ip4_route+0xca>
  }

  return netif_default;
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <ip4_route+0xdc>)
 80099bc:	681b      	ldr	r3, [r3, #0]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	24008148 	.word	0x24008148
 80099d0:	2400814c 	.word	0x2400814c

080099d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d016      	beq.n	8009a1a <ip4_input_accept+0x46>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	3304      	adds	r3, #4
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d011      	beq.n	8009a1a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80099f6:	4b0b      	ldr	r3, [pc, #44]	; (8009a24 <ip4_input_accept+0x50>)
 80099f8:	695a      	ldr	r2, [r3, #20]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3304      	adds	r3, #4
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d008      	beq.n	8009a16 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8009a04:	4b07      	ldr	r3, [pc, #28]	; (8009a24 <ip4_input_accept+0x50>)
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	6879      	ldr	r1, [r7, #4]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 fa08 	bl	8009e20 <ip4_addr_isbroadcast_u32>
 8009a10:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e000      	b.n	8009a1c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	2400522c 	.word	0x2400522c

08009a28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	091b      	lsrs	r3, r3, #4
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	d004      	beq.n	8009a4e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f002 fb61 	bl	800c10c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e107      	b.n	8009c5e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	f003 030f 	and.w	r3, r3, #15
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	885b      	ldrh	r3, [r3, #2]
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fe fc6f 	bl	8008348 <lwip_htons>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	891b      	ldrh	r3, [r3, #8]
 8009a72:	89ba      	ldrh	r2, [r7, #12]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d204      	bcs.n	8009a82 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8009a78:	89bb      	ldrh	r3, [r7, #12]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f002 f9bf 	bl	800be00 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	895b      	ldrh	r3, [r3, #10]
 8009a86:	89fa      	ldrh	r2, [r7, #14]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d807      	bhi.n	8009a9c <ip4_input+0x74>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	891b      	ldrh	r3, [r3, #8]
 8009a90:	89ba      	ldrh	r2, [r7, #12]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d802      	bhi.n	8009a9c <ip4_input+0x74>
 8009a96:	89fb      	ldrh	r3, [r7, #14]
 8009a98:	2b13      	cmp	r3, #19
 8009a9a:	d804      	bhi.n	8009aa6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f002 fb35 	bl	800c10c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e0db      	b.n	8009c5e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	4a6f      	ldr	r2, [pc, #444]	; (8009c68 <ip4_input+0x240>)
 8009aac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	4a6d      	ldr	r2, [pc, #436]	; (8009c68 <ip4_input+0x240>)
 8009ab4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009ab6:	4b6c      	ldr	r3, [pc, #432]	; (8009c68 <ip4_input+0x240>)
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009abe:	2be0      	cmp	r3, #224	; 0xe0
 8009ac0:	d112      	bne.n	8009ae8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d007      	beq.n	8009ae2 <ip4_input+0xba>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <ip4_input+0xba>
      netif = inp;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	e02a      	b.n	8009b38 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	613b      	str	r3, [r7, #16]
 8009ae6:	e027      	b.n	8009b38 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8009ae8:	6838      	ldr	r0, [r7, #0]
 8009aea:	f7ff ff73 	bl	80099d4 <ip4_input_accept>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <ip4_input+0xd2>
      netif = inp;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	613b      	str	r3, [r7, #16]
 8009af8:	e01e      	b.n	8009b38 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8009afe:	4b5a      	ldr	r3, [pc, #360]	; (8009c68 <ip4_input+0x240>)
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b7f      	cmp	r3, #127	; 0x7f
 8009b06:	d017      	beq.n	8009b38 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8009b08:	4b58      	ldr	r3, [pc, #352]	; (8009c6c <ip4_input+0x244>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	613b      	str	r3, [r7, #16]
 8009b0e:	e00e      	b.n	8009b2e <ip4_input+0x106>
          if (netif == inp) {
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d006      	beq.n	8009b26 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8009b18:	6938      	ldr	r0, [r7, #16]
 8009b1a:	f7ff ff5b 	bl	80099d4 <ip4_input_accept>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d108      	bne.n	8009b36 <ip4_input+0x10e>
 8009b24:	e000      	b.n	8009b28 <ip4_input+0x100>
            continue;
 8009b26:	bf00      	nop
        NETIF_FOREACH(netif) {
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	613b      	str	r3, [r7, #16]
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1ed      	bne.n	8009b10 <ip4_input+0xe8>
 8009b34:	e000      	b.n	8009b38 <ip4_input+0x110>
            break;
 8009b36:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009b38:	4b4b      	ldr	r3, [pc, #300]	; (8009c68 <ip4_input+0x240>)
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f96e 	bl	8009e20 <ip4_addr_isbroadcast_u32>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d105      	bne.n	8009b56 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009b4a:	4b47      	ldr	r3, [pc, #284]	; (8009c68 <ip4_input+0x240>)
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009b52:	2be0      	cmp	r3, #224	; 0xe0
 8009b54:	d104      	bne.n	8009b60 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f002 fad8 	bl	800c10c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	e07e      	b.n	8009c5e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d104      	bne.n	8009b70 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f002 fad0 	bl	800c10c <pbuf_free>
    return ERR_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e076      	b.n	8009c5e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	88db      	ldrh	r3, [r3, #6]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	461a      	mov	r2, r3
 8009b78:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00b      	beq.n	8009b9a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fc92 	bl	800a4ac <ip4_reass>
 8009b88:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <ip4_input+0x16c>
      return ERR_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	e064      	b.n	8009c5e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8009b9a:	4a33      	ldr	r2, [pc, #204]	; (8009c68 <ip4_input+0x240>)
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8009ba0:	4a31      	ldr	r2, [pc, #196]	; (8009c68 <ip4_input+0x240>)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8009ba6:	4a30      	ldr	r2, [pc, #192]	; (8009c68 <ip4_input+0x240>)
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	4b2a      	ldr	r3, [pc, #168]	; (8009c68 <ip4_input+0x240>)
 8009bbe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009bc0:	89fb      	ldrh	r3, [r7, #14]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f002 fa1b 	bl	800c000 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	7a5b      	ldrb	r3, [r3, #9]
 8009bce:	2b11      	cmp	r3, #17
 8009bd0:	d006      	beq.n	8009be0 <ip4_input+0x1b8>
 8009bd2:	2b11      	cmp	r3, #17
 8009bd4:	dc13      	bgt.n	8009bfe <ip4_input+0x1d6>
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d00c      	beq.n	8009bf4 <ip4_input+0x1cc>
 8009bda:	2b06      	cmp	r3, #6
 8009bdc:	d005      	beq.n	8009bea <ip4_input+0x1c2>
 8009bde:	e00e      	b.n	8009bfe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f007 fffa 	bl	8011bdc <udp_input>
        break;
 8009be8:	e026      	b.n	8009c38 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f004 f8b5 	bl	800dd5c <tcp_input>
        break;
 8009bf2:	e021      	b.n	8009c38 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7ff fbf6 	bl	80093e8 <icmp_input>
        break;
 8009bfc:	e01c      	b.n	8009c38 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009bfe:	4b1a      	ldr	r3, [pc, #104]	; (8009c68 <ip4_input+0x240>)
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	6939      	ldr	r1, [r7, #16]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 f90b 	bl	8009e20 <ip4_addr_isbroadcast_u32>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10f      	bne.n	8009c30 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009c10:	4b15      	ldr	r3, [pc, #84]	; (8009c68 <ip4_input+0x240>)
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009c18:	2be0      	cmp	r3, #224	; 0xe0
 8009c1a:	d009      	beq.n	8009c30 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f002 fa5f 	bl	800c0e6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8009c28:	2102      	movs	r1, #2
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7ff fcfc 	bl	8009628 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f002 fa6b 	bl	800c10c <pbuf_free>
        break;
 8009c36:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8009c38:	4b0b      	ldr	r3, [pc, #44]	; (8009c68 <ip4_input+0x240>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8009c3e:	4b0a      	ldr	r3, [pc, #40]	; (8009c68 <ip4_input+0x240>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8009c44:	4b08      	ldr	r3, [pc, #32]	; (8009c68 <ip4_input+0x240>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009c4a:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <ip4_input+0x240>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009c50:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <ip4_input+0x240>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009c56:	4b04      	ldr	r3, [pc, #16]	; (8009c68 <ip4_input+0x240>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	2400522c 	.word	0x2400522c
 8009c6c:	24008148 	.word	0x24008148

08009c70 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08a      	sub	sp, #40	; 0x28
 8009c74:	af04      	add	r7, sp, #16
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d009      	beq.n	8009c9c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <ip4_output_if+0x26>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d102      	bne.n	8009c9c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	3304      	adds	r3, #4
 8009c9a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009c9c:	78fa      	ldrb	r2, [r7, #3]
 8009c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca0:	9302      	str	r3, [sp, #8]
 8009ca2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	6979      	ldr	r1, [r7, #20]
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f000 f805 	bl	8009cc4 <ip4_output_if_src>
 8009cba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
 8009cd0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	7b9b      	ldrb	r3, [r3, #14]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d006      	beq.n	8009ce8 <ip4_output_if_src+0x24>
 8009cda:	4b4b      	ldr	r3, [pc, #300]	; (8009e08 <ip4_output_if_src+0x144>)
 8009cdc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8009ce0:	494a      	ldr	r1, [pc, #296]	; (8009e0c <ip4_output_if_src+0x148>)
 8009ce2:	484b      	ldr	r0, [pc, #300]	; (8009e10 <ip4_output_if_src+0x14c>)
 8009ce4:	f008 f908 	bl	8011ef8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d060      	beq.n	8009db0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8009cee:	2314      	movs	r3, #20
 8009cf0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8009cf2:	2114      	movs	r1, #20
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f002 f973 	bl	800bfe0 <pbuf_add_header>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009d00:	f06f 0301 	mvn.w	r3, #1
 8009d04:	e07c      	b.n	8009e00 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	895b      	ldrh	r3, [r3, #10]
 8009d10:	2b13      	cmp	r3, #19
 8009d12:	d806      	bhi.n	8009d22 <ip4_output_if_src+0x5e>
 8009d14:	4b3c      	ldr	r3, [pc, #240]	; (8009e08 <ip4_output_if_src+0x144>)
 8009d16:	f44f 7262 	mov.w	r2, #904	; 0x388
 8009d1a:	493e      	ldr	r1, [pc, #248]	; (8009e14 <ip4_output_if_src+0x150>)
 8009d1c:	483c      	ldr	r0, [pc, #240]	; (8009e10 <ip4_output_if_src+0x14c>)
 8009d1e:	f008 f8eb 	bl	8011ef8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	78fa      	ldrb	r2, [r7, #3]
 8009d26:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009d2e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8009d38:	8b7b      	ldrh	r3, [r7, #26]
 8009d3a:	089b      	lsrs	r3, r3, #2
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009d50:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	891b      	ldrh	r3, [r3, #8]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe faf6 	bl	8008348 <lwip_htons>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	461a      	mov	r2, r3
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	2200      	movs	r2, #0
 8009d68:	719a      	strb	r2, [r3, #6]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009d6e:	4b2a      	ldr	r3, [pc, #168]	; (8009e18 <ip4_output_if_src+0x154>)
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe fae8 	bl	8008348 <lwip_htons>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8009d80:	4b25      	ldr	r3, [pc, #148]	; (8009e18 <ip4_output_if_src+0x154>)
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	3301      	adds	r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	4b23      	ldr	r3, [pc, #140]	; (8009e18 <ip4_output_if_src+0x154>)
 8009d8a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d104      	bne.n	8009d9c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009d92:	4b22      	ldr	r3, [pc, #136]	; (8009e1c <ip4_output_if_src+0x158>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	60da      	str	r2, [r3, #12]
 8009d9a:	e003      	b.n	8009da4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	2200      	movs	r2, #0
 8009da8:	729a      	strb	r2, [r3, #10]
 8009daa:	2200      	movs	r2, #0
 8009dac:	72da      	strb	r2, [r3, #11]
 8009dae:	e00f      	b.n	8009dd0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	895b      	ldrh	r3, [r3, #10]
 8009db4:	2b13      	cmp	r3, #19
 8009db6:	d802      	bhi.n	8009dbe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009db8:	f06f 0301 	mvn.w	r3, #1
 8009dbc:	e020      	b.n	8009e00 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8009dca:	f107 0314 	add.w	r3, r7, #20
 8009dce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00c      	beq.n	8009df2 <ip4_output_if_src+0x12e>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	891a      	ldrh	r2, [r3, #8]
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d906      	bls.n	8009df2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 fd53 	bl	800a894 <ip4_frag>
 8009dee:	4603      	mov	r3, r0
 8009df0:	e006      	b.n	8009e00 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	68f9      	ldr	r1, [r7, #12]
 8009dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dfc:	4798      	blx	r3
 8009dfe:	4603      	mov	r3, r0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3720      	adds	r7, #32
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	08013484 	.word	0x08013484
 8009e0c:	080134dc 	.word	0x080134dc
 8009e10:	080134e8 	.word	0x080134e8
 8009e14:	08013510 	.word	0x08013510
 8009e18:	24005244 	.word	0x24005244
 8009e1c:	08015be0 	.word	0x08015be0

08009e20 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e34:	d002      	beq.n	8009e3c <ip4_addr_isbroadcast_u32+0x1c>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e02a      	b.n	8009e96 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009e46:	f003 0302 	and.w	r3, r3, #2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e021      	b.n	8009e96 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	3304      	adds	r3, #4
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d101      	bne.n	8009e62 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	e019      	b.n	8009e96 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	3304      	adds	r3, #4
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	405a      	eors	r2, r3
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	3308      	adds	r3, #8
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4013      	ands	r3, r2
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10d      	bne.n	8009e94 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	43da      	mvns	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	3308      	adds	r3, #8
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d101      	bne.n	8009e94 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e000      	b.n	8009e96 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8009e94:	2300      	movs	r3, #0
  }
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
	...

08009ea4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8009eae:	4b12      	ldr	r3, [pc, #72]	; (8009ef8 <ip_reass_tmr+0x54>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8009eb4:	e018      	b.n	8009ee8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	7fdb      	ldrb	r3, [r3, #31]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00b      	beq.n	8009ed6 <ip_reass_tmr+0x32>
      r->timer--;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	7fdb      	ldrb	r3, [r3, #31]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e008      	b.n	8009ee8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8009ee0:	68b9      	ldr	r1, [r7, #8]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f80a 	bl	8009efc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1e3      	bne.n	8009eb6 <ip_reass_tmr+0x12>
    }
  }
}
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	24005248 	.word	0x24005248

08009efc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b088      	sub	sp, #32
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d105      	bne.n	8009f1e <ip_reass_free_complete_datagram+0x22>
 8009f12:	4b45      	ldr	r3, [pc, #276]	; (800a028 <ip_reass_free_complete_datagram+0x12c>)
 8009f14:	22ab      	movs	r2, #171	; 0xab
 8009f16:	4945      	ldr	r1, [pc, #276]	; (800a02c <ip_reass_free_complete_datagram+0x130>)
 8009f18:	4845      	ldr	r0, [pc, #276]	; (800a030 <ip_reass_free_complete_datagram+0x134>)
 8009f1a:	f007 ffed 	bl	8011ef8 <iprintf>
  if (prev != NULL) {
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00a      	beq.n	8009f3a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d005      	beq.n	8009f3a <ip_reass_free_complete_datagram+0x3e>
 8009f2e:	4b3e      	ldr	r3, [pc, #248]	; (800a028 <ip_reass_free_complete_datagram+0x12c>)
 8009f30:	22ad      	movs	r2, #173	; 0xad
 8009f32:	4940      	ldr	r1, [pc, #256]	; (800a034 <ip_reass_free_complete_datagram+0x138>)
 8009f34:	483e      	ldr	r0, [pc, #248]	; (800a030 <ip_reass_free_complete_datagram+0x134>)
 8009f36:	f007 ffdf 	bl	8011ef8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	889b      	ldrh	r3, [r3, #4]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d12a      	bne.n	8009fa2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	6858      	ldr	r0, [r3, #4]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	3308      	adds	r3, #8
 8009f62:	2214      	movs	r2, #20
 8009f64:	4619      	mov	r1, r3
 8009f66:	f007 ffb1 	bl	8011ecc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	69b8      	ldr	r0, [r7, #24]
 8009f6e:	f7ff fb6b 	bl	8009648 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8009f72:	69b8      	ldr	r0, [r7, #24]
 8009f74:	f002 f952 	bl	800c21c <pbuf_clen>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009f7c:	8bfa      	ldrh	r2, [r7, #30]
 8009f7e:	8a7b      	ldrh	r3, [r7, #18]
 8009f80:	4413      	add	r3, r2
 8009f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f86:	db05      	blt.n	8009f94 <ip_reass_free_complete_datagram+0x98>
 8009f88:	4b27      	ldr	r3, [pc, #156]	; (800a028 <ip_reass_free_complete_datagram+0x12c>)
 8009f8a:	22bc      	movs	r2, #188	; 0xbc
 8009f8c:	492a      	ldr	r1, [pc, #168]	; (800a038 <ip_reass_free_complete_datagram+0x13c>)
 8009f8e:	4828      	ldr	r0, [pc, #160]	; (800a030 <ip_reass_free_complete_datagram+0x134>)
 8009f90:	f007 ffb2 	bl	8011ef8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009f94:	8bfa      	ldrh	r2, [r7, #30]
 8009f96:	8a7b      	ldrh	r3, [r7, #18]
 8009f98:	4413      	add	r3, r2
 8009f9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8009f9c:	69b8      	ldr	r0, [r7, #24]
 8009f9e:	f002 f8b5 	bl	800c10c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8009fa8:	e01f      	b.n	8009fea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	617b      	str	r3, [r7, #20]
    pcur = p;
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f002 f92e 	bl	800c21c <pbuf_clen>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009fc4:	8bfa      	ldrh	r2, [r7, #30]
 8009fc6:	8a7b      	ldrh	r3, [r7, #18]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fce:	db05      	blt.n	8009fdc <ip_reass_free_complete_datagram+0xe0>
 8009fd0:	4b15      	ldr	r3, [pc, #84]	; (800a028 <ip_reass_free_complete_datagram+0x12c>)
 8009fd2:	22cc      	movs	r2, #204	; 0xcc
 8009fd4:	4918      	ldr	r1, [pc, #96]	; (800a038 <ip_reass_free_complete_datagram+0x13c>)
 8009fd6:	4816      	ldr	r0, [pc, #88]	; (800a030 <ip_reass_free_complete_datagram+0x134>)
 8009fd8:	f007 ff8e 	bl	8011ef8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009fdc:	8bfa      	ldrh	r2, [r7, #30]
 8009fde:	8a7b      	ldrh	r3, [r7, #18]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f002 f891 	bl	800c10c <pbuf_free>
  while (p != NULL) {
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1dc      	bne.n	8009faa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f8c2 	bl	800a17c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009ff8:	4b10      	ldr	r3, [pc, #64]	; (800a03c <ip_reass_free_complete_datagram+0x140>)
 8009ffa:	881b      	ldrh	r3, [r3, #0]
 8009ffc:	8bfa      	ldrh	r2, [r7, #30]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d905      	bls.n	800a00e <ip_reass_free_complete_datagram+0x112>
 800a002:	4b09      	ldr	r3, [pc, #36]	; (800a028 <ip_reass_free_complete_datagram+0x12c>)
 800a004:	22d2      	movs	r2, #210	; 0xd2
 800a006:	490e      	ldr	r1, [pc, #56]	; (800a040 <ip_reass_free_complete_datagram+0x144>)
 800a008:	4809      	ldr	r0, [pc, #36]	; (800a030 <ip_reass_free_complete_datagram+0x134>)
 800a00a:	f007 ff75 	bl	8011ef8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800a00e:	4b0b      	ldr	r3, [pc, #44]	; (800a03c <ip_reass_free_complete_datagram+0x140>)
 800a010:	881a      	ldrh	r2, [r3, #0]
 800a012:	8bfb      	ldrh	r3, [r7, #30]
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	b29a      	uxth	r2, r3
 800a018:	4b08      	ldr	r3, [pc, #32]	; (800a03c <ip_reass_free_complete_datagram+0x140>)
 800a01a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800a01c:	8bfb      	ldrh	r3, [r7, #30]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3720      	adds	r7, #32
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	08013540 	.word	0x08013540
 800a02c:	0801359c 	.word	0x0801359c
 800a030:	080135a8 	.word	0x080135a8
 800a034:	080135d0 	.word	0x080135d0
 800a038:	080135e4 	.word	0x080135e4
 800a03c:	2400524c 	.word	0x2400524c
 800a040:	08013604 	.word	0x08013604

0800a044 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08a      	sub	sp, #40	; 0x28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800a056:	2300      	movs	r3, #0
 800a058:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800a062:	4b28      	ldr	r3, [pc, #160]	; (800a104 <ip_reass_remove_oldest_datagram+0xc0>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a068:	e030      	b.n	800a0cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	695a      	ldr	r2, [r3, #20]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	429a      	cmp	r2, r3
 800a074:	d10c      	bne.n	800a090 <ip_reass_remove_oldest_datagram+0x4c>
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d106      	bne.n	800a090 <ip_reass_remove_oldest_datagram+0x4c>
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	899a      	ldrh	r2, [r3, #12]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	889b      	ldrh	r3, [r3, #4]
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d014      	beq.n	800a0ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	3301      	adds	r3, #1
 800a094:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d104      	bne.n	800a0a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800a09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	61bb      	str	r3, [r7, #24]
 800a0a4:	e009      	b.n	800a0ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	7fda      	ldrb	r2, [r3, #31]
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	7fdb      	ldrb	r3, [r3, #31]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d803      	bhi.n	800a0ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1cb      	bne.n	800a06a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d008      	beq.n	800a0ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a0d8:	69b9      	ldr	r1, [r7, #24]
 800a0da:	6a38      	ldr	r0, [r7, #32]
 800a0dc:	f7ff ff0e 	bl	8009efc <ip_reass_free_complete_datagram>
 800a0e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	da02      	bge.n	800a0f8 <ip_reass_remove_oldest_datagram+0xb4>
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	dcac      	bgt.n	800a052 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a0f8:	697b      	ldr	r3, [r7, #20]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3728      	adds	r7, #40	; 0x28
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	24005248 	.word	0x24005248

0800a108 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a112:	2004      	movs	r0, #4
 800a114:	f001 f934 	bl	800b380 <memp_malloc>
 800a118:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d110      	bne.n	800a142 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7ff ff8e 	bl	800a044 <ip_reass_remove_oldest_datagram>
 800a128:	4602      	mov	r2, r0
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	4293      	cmp	r3, r2
 800a12e:	dc03      	bgt.n	800a138 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a130:	2004      	movs	r0, #4
 800a132:	f001 f925 	bl	800b380 <memp_malloc>
 800a136:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	e016      	b.n	800a170 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a142:	2220      	movs	r2, #32
 800a144:	2100      	movs	r1, #0
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f007 fece 	bl	8011ee8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	220f      	movs	r2, #15
 800a150:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <ip_reass_enqueue_new_datagram+0x70>)
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a15a:	4a07      	ldr	r2, [pc, #28]	; (800a178 <ip_reass_enqueue_new_datagram+0x70>)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	3308      	adds	r3, #8
 800a164:	2214      	movs	r2, #20
 800a166:	6879      	ldr	r1, [r7, #4]
 800a168:	4618      	mov	r0, r3
 800a16a:	f007 feaf 	bl	8011ecc <memcpy>
  return ipr;
 800a16e:	68fb      	ldr	r3, [r7, #12]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	24005248 	.word	0x24005248

0800a17c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a186:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <ip_reass_dequeue_datagram+0x4c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d104      	bne.n	800a19a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a0c      	ldr	r2, [pc, #48]	; (800a1c8 <ip_reass_dequeue_datagram+0x4c>)
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	e00d      	b.n	800a1b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d106      	bne.n	800a1ae <ip_reass_dequeue_datagram+0x32>
 800a1a0:	4b0a      	ldr	r3, [pc, #40]	; (800a1cc <ip_reass_dequeue_datagram+0x50>)
 800a1a2:	f240 1245 	movw	r2, #325	; 0x145
 800a1a6:	490a      	ldr	r1, [pc, #40]	; (800a1d0 <ip_reass_dequeue_datagram+0x54>)
 800a1a8:	480a      	ldr	r0, [pc, #40]	; (800a1d4 <ip_reass_dequeue_datagram+0x58>)
 800a1aa:	f007 fea5 	bl	8011ef8 <iprintf>
    prev->next = ipr->next;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	2004      	movs	r0, #4
 800a1ba:	f001 f951 	bl	800b460 <memp_free>
}
 800a1be:	bf00      	nop
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	24005248 	.word	0x24005248
 800a1cc:	08013540 	.word	0x08013540
 800a1d0:	08013628 	.word	0x08013628
 800a1d4:	080135a8 	.word	0x080135a8

0800a1d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08c      	sub	sp, #48	; 0x30
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	885b      	ldrh	r3, [r3, #2]
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fe f8a5 	bl	8008348 <lwip_htons>
 800a1fe:	4603      	mov	r3, r0
 800a200:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	f003 030f 	and.w	r3, r3, #15
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800a210:	7e7b      	ldrb	r3, [r7, #25]
 800a212:	b29b      	uxth	r3, r3
 800a214:	8b7a      	ldrh	r2, [r7, #26]
 800a216:	429a      	cmp	r2, r3
 800a218:	d202      	bcs.n	800a220 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a21a:	f04f 33ff 	mov.w	r3, #4294967295
 800a21e:	e135      	b.n	800a48c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800a220:	7e7b      	ldrb	r3, [r7, #25]
 800a222:	b29b      	uxth	r3, r3
 800a224:	8b7a      	ldrh	r2, [r7, #26]
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	88db      	ldrh	r3, [r3, #6]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe f889 	bl	8008348 <lwip_htons>
 800a236:	4603      	mov	r3, r0
 800a238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24a:	2200      	movs	r2, #0
 800a24c:	701a      	strb	r2, [r3, #0]
 800a24e:	2200      	movs	r2, #0
 800a250:	705a      	strb	r2, [r3, #1]
 800a252:	2200      	movs	r2, #0
 800a254:	709a      	strb	r2, [r3, #2]
 800a256:	2200      	movs	r2, #0
 800a258:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25c:	8afa      	ldrh	r2, [r7, #22]
 800a25e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800a260:	8afa      	ldrh	r2, [r7, #22]
 800a262:	8b7b      	ldrh	r3, [r7, #26]
 800a264:	4413      	add	r3, r2
 800a266:	b29a      	uxth	r2, r3
 800a268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800a26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26e:	88db      	ldrh	r3, [r3, #6]
 800a270:	b29b      	uxth	r3, r3
 800a272:	8afa      	ldrh	r2, [r7, #22]
 800a274:	429a      	cmp	r2, r3
 800a276:	d902      	bls.n	800a27e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a278:	f04f 33ff 	mov.w	r3, #4294967295
 800a27c:	e106      	b.n	800a48c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	627b      	str	r3, [r7, #36]	; 0x24
 800a284:	e068      	b.n	800a358 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	889b      	ldrh	r3, [r3, #4]
 800a290:	b29a      	uxth	r2, r3
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	889b      	ldrh	r3, [r3, #4]
 800a296:	b29b      	uxth	r3, r3
 800a298:	429a      	cmp	r2, r3
 800a29a:	d235      	bcs.n	800a308 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d020      	beq.n	800a2ea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2aa:	889b      	ldrh	r3, [r3, #4]
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b0:	88db      	ldrh	r3, [r3, #6]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d307      	bcc.n	800a2c8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800a2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ba:	88db      	ldrh	r3, [r3, #6]
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	889b      	ldrh	r3, [r3, #4]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d902      	bls.n	800a2ce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2cc:	e0de      	b.n	800a48c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d6:	88db      	ldrh	r3, [r3, #6]
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	889b      	ldrh	r3, [r3, #4]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d03d      	beq.n	800a360 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800a2e8:	e03a      	b.n	800a360 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	88db      	ldrh	r3, [r3, #6]
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	889b      	ldrh	r3, [r3, #4]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d902      	bls.n	800a300 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fe:	e0c5      	b.n	800a48c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	605a      	str	r2, [r3, #4]
      break;
 800a306:	e02b      	b.n	800a360 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800a308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30a:	889b      	ldrh	r3, [r3, #4]
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	889b      	ldrh	r3, [r3, #4]
 800a312:	b29b      	uxth	r3, r3
 800a314:	429a      	cmp	r2, r3
 800a316:	d102      	bne.n	800a31e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a318:	f04f 33ff 	mov.w	r3, #4294967295
 800a31c:	e0b6      	b.n	800a48c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a320:	889b      	ldrh	r3, [r3, #4]
 800a322:	b29a      	uxth	r2, r3
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	88db      	ldrh	r3, [r3, #6]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d202      	bcs.n	800a334 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a32e:	f04f 33ff 	mov.w	r3, #4294967295
 800a332:	e0ab      	b.n	800a48c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	2b00      	cmp	r3, #0
 800a338:	d009      	beq.n	800a34e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33c:	88db      	ldrh	r3, [r3, #6]
 800a33e:	b29a      	uxth	r2, r3
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	889b      	ldrh	r3, [r3, #4]
 800a344:	b29b      	uxth	r3, r3
 800a346:	429a      	cmp	r2, r3
 800a348:	d001      	beq.n	800a34e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d193      	bne.n	800a286 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800a35e:	e000      	b.n	800a362 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800a360:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	2b00      	cmp	r3, #0
 800a366:	d12d      	bne.n	800a3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d01c      	beq.n	800a3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a370:	88db      	ldrh	r3, [r3, #6]
 800a372:	b29a      	uxth	r2, r3
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	889b      	ldrh	r3, [r3, #4]
 800a378:	b29b      	uxth	r3, r3
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d906      	bls.n	800a38c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800a37e:	4b45      	ldr	r3, [pc, #276]	; (800a494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a380:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800a384:	4944      	ldr	r1, [pc, #272]	; (800a498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800a386:	4845      	ldr	r0, [pc, #276]	; (800a49c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a388:	f007 fdb6 	bl	8011ef8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	88db      	ldrh	r3, [r3, #6]
 800a396:	b29a      	uxth	r2, r3
 800a398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39a:	889b      	ldrh	r3, [r3, #4]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d010      	beq.n	800a3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	623b      	str	r3, [r7, #32]
 800a3a6:	e00d      	b.n	800a3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d006      	beq.n	800a3be <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800a3b0:	4b38      	ldr	r3, [pc, #224]	; (800a494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a3b2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800a3b6:	493a      	ldr	r1, [pc, #232]	; (800a4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800a3b8:	4838      	ldr	r0, [pc, #224]	; (800a49c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a3ba:	f007 fd9d 	bl	8011ef8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	7f9b      	ldrb	r3, [r3, #30]
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d059      	beq.n	800a48a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d04f      	beq.n	800a47c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	889b      	ldrh	r3, [r3, #4]
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	623b      	str	r3, [r7, #32]
 800a3f6:	e041      	b.n	800a47c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800a3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a402:	e012      	b.n	800a42a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	88db      	ldrh	r3, [r3, #6]
 800a40e:	b29a      	uxth	r2, r3
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a412:	889b      	ldrh	r3, [r3, #4]
 800a414:	b29b      	uxth	r3, r3
 800a416:	429a      	cmp	r2, r3
 800a418:	d002      	beq.n	800a420 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	623b      	str	r3, [r7, #32]
            break;
 800a41e:	e007      	b.n	800a430 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a422:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e9      	bne.n	800a404 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d022      	beq.n	800a47c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d106      	bne.n	800a44c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800a43e:	4b15      	ldr	r3, [pc, #84]	; (800a494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a440:	f240 12df 	movw	r2, #479	; 0x1df
 800a444:	4917      	ldr	r1, [pc, #92]	; (800a4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a446:	4815      	ldr	r0, [pc, #84]	; (800a49c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a448:	f007 fd56 	bl	8011ef8 <iprintf>
          LWIP_ASSERT("sanity check",
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a454:	429a      	cmp	r2, r3
 800a456:	d106      	bne.n	800a466 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800a458:	4b0e      	ldr	r3, [pc, #56]	; (800a494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a45a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a45e:	4911      	ldr	r1, [pc, #68]	; (800a4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a460:	480e      	ldr	r0, [pc, #56]	; (800a49c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a462:	f007 fd49 	bl	8011ef8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d006      	beq.n	800a47c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800a46e:	4b09      	ldr	r3, [pc, #36]	; (800a494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a470:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800a474:	490c      	ldr	r1, [pc, #48]	; (800a4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800a476:	4809      	ldr	r0, [pc, #36]	; (800a49c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a478:	f007 fd3e 	bl	8011ef8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	bf14      	ite	ne
 800a482:	2301      	movne	r3, #1
 800a484:	2300      	moveq	r3, #0
 800a486:	b2db      	uxtb	r3, r3
 800a488:	e000      	b.n	800a48c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3730      	adds	r7, #48	; 0x30
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	08013540 	.word	0x08013540
 800a498:	08013644 	.word	0x08013644
 800a49c:	080135a8 	.word	0x080135a8
 800a4a0:	08013664 	.word	0x08013664
 800a4a4:	0801369c 	.word	0x0801369c
 800a4a8:	080136ac 	.word	0x080136ac

0800a4ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b08e      	sub	sp, #56	; 0x38
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800a4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	f003 030f 	and.w	r3, r3, #15
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b14      	cmp	r3, #20
 800a4ca:	f040 8171 	bne.w	800a7b0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d0:	88db      	ldrh	r3, [r3, #6]
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fd ff37 	bl	8008348 <lwip_htons>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	885b      	ldrh	r3, [r3, #2]
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fd ff2b 	bl	8008348 <lwip_htons>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	f003 030f 	and.w	r3, r3, #15
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800a506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a50e:	429a      	cmp	r2, r3
 800a510:	f0c0 8150 	bcc.w	800a7b4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800a514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a518:	b29b      	uxth	r3, r3
 800a51a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f001 fe7b 	bl	800c21c <pbuf_clen>
 800a526:	4603      	mov	r3, r0
 800a528:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a52a:	4b8c      	ldr	r3, [pc, #560]	; (800a75c <ip4_reass+0x2b0>)
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	8c3b      	ldrh	r3, [r7, #32]
 800a532:	4413      	add	r3, r2
 800a534:	2b0a      	cmp	r3, #10
 800a536:	dd10      	ble.n	800a55a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a538:	8c3b      	ldrh	r3, [r7, #32]
 800a53a:	4619      	mov	r1, r3
 800a53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a53e:	f7ff fd81 	bl	800a044 <ip_reass_remove_oldest_datagram>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 8137 	beq.w	800a7b8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800a54a:	4b84      	ldr	r3, [pc, #528]	; (800a75c <ip4_reass+0x2b0>)
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	8c3b      	ldrh	r3, [r7, #32]
 800a552:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a554:	2b0a      	cmp	r3, #10
 800a556:	f300 812f 	bgt.w	800a7b8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a55a:	4b81      	ldr	r3, [pc, #516]	; (800a760 <ip4_reass+0x2b4>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	633b      	str	r3, [r7, #48]	; 0x30
 800a560:	e015      	b.n	800a58e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800a562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a564:	695a      	ldr	r2, [r3, #20]
 800a566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d10c      	bne.n	800a588 <ip4_reass+0xdc>
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	699a      	ldr	r2, [r3, #24]
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	429a      	cmp	r2, r3
 800a578:	d106      	bne.n	800a588 <ip4_reass+0xdc>
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	899a      	ldrh	r2, [r3, #12]
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	889b      	ldrh	r3, [r3, #4]
 800a582:	b29b      	uxth	r3, r3
 800a584:	429a      	cmp	r2, r3
 800a586:	d006      	beq.n	800a596 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	633b      	str	r3, [r7, #48]	; 0x30
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e6      	bne.n	800a562 <ip4_reass+0xb6>
 800a594:	e000      	b.n	800a598 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800a596:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d109      	bne.n	800a5b2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800a59e:	8c3b      	ldrh	r3, [r7, #32]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a4:	f7ff fdb0 	bl	800a108 <ip_reass_enqueue_new_datagram>
 800a5a8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d11c      	bne.n	800a5ea <ip4_reass+0x13e>
      goto nullreturn;
 800a5b0:	e105      	b.n	800a7be <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	88db      	ldrh	r3, [r3, #6]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fd fec5 	bl	8008348 <lwip_htons>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d110      	bne.n	800a5ea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	89db      	ldrh	r3, [r3, #14]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fd febb 	bl	8008348 <lwip_htons>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d006      	beq.n	800a5ea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	3308      	adds	r3, #8
 800a5e0:	2214      	movs	r2, #20
 800a5e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f007 fc71 	bl	8011ecc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	88db      	ldrh	r3, [r3, #6]
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	f003 0320 	and.w	r3, r3, #32
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bf0c      	ite	eq
 800a5f8:	2301      	moveq	r3, #1
 800a5fa:	2300      	movne	r3, #0
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00e      	beq.n	800a624 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800a606:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a60a:	4413      	add	r3, r2
 800a60c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800a60e:	8b7a      	ldrh	r2, [r7, #26]
 800a610:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a612:	429a      	cmp	r2, r3
 800a614:	f0c0 80a0 	bcc.w	800a758 <ip4_reass+0x2ac>
 800a618:	8b7b      	ldrh	r3, [r7, #26]
 800a61a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800a61e:	4293      	cmp	r3, r2
 800a620:	f200 809a 	bhi.w	800a758 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800a624:	69fa      	ldr	r2, [r7, #28]
 800a626:	6879      	ldr	r1, [r7, #4]
 800a628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a62a:	f7ff fdd5 	bl	800a1d8 <ip_reass_chain_frag_into_datagram_and_validate>
 800a62e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a636:	f000 809b 	beq.w	800a770 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a63a:	4b48      	ldr	r3, [pc, #288]	; (800a75c <ip4_reass+0x2b0>)
 800a63c:	881a      	ldrh	r2, [r3, #0]
 800a63e:	8c3b      	ldrh	r3, [r7, #32]
 800a640:	4413      	add	r3, r2
 800a642:	b29a      	uxth	r2, r3
 800a644:	4b45      	ldr	r3, [pc, #276]	; (800a75c <ip4_reass+0x2b0>)
 800a646:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00d      	beq.n	800a66a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800a64e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a652:	4413      	add	r3, r2
 800a654:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	8a7a      	ldrh	r2, [r7, #18]
 800a65a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	7f9b      	ldrb	r3, [r3, #30]
 800a660:	f043 0301 	orr.w	r3, r3, #1
 800a664:	b2da      	uxtb	r2, r3
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d171      	bne.n	800a754 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a672:	8b9b      	ldrh	r3, [r3, #28]
 800a674:	3314      	adds	r3, #20
 800a676:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	3308      	adds	r3, #8
 800a68e:	2214      	movs	r2, #20
 800a690:	4619      	mov	r1, r3
 800a692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a694:	f007 fc1a 	bl	8011ecc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a698:	8a3b      	ldrh	r3, [r7, #16]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fd fe54 	bl	8008348 <lwip_htons>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	719a      	strb	r2, [r3, #6]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	729a      	strb	r2, [r3, #10]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800a6c2:	e00d      	b.n	800a6e0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800a6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800a6ca:	2114      	movs	r1, #20
 800a6cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a6ce:	f001 fc97 	bl	800c000 <pbuf_remove_header>
      pbuf_cat(p, r);
 800a6d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f001 fddb 	bl	800c290 <pbuf_cat>
      r = iprh->next_pbuf;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800a6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1ee      	bne.n	800a6c4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800a6e6:	4b1e      	ldr	r3, [pc, #120]	; (800a760 <ip4_reass+0x2b4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d102      	bne.n	800a6f6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6f4:	e010      	b.n	800a718 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a6f6:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <ip4_reass+0x2b4>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6fc:	e007      	b.n	800a70e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a704:	429a      	cmp	r2, r3
 800a706:	d006      	beq.n	800a716 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1f4      	bne.n	800a6fe <ip4_reass+0x252>
 800a714:	e000      	b.n	800a718 <ip4_reass+0x26c>
          break;
 800a716:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a71a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a71c:	f7ff fd2e 	bl	800a17c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f001 fd7b 	bl	800c21c <pbuf_clen>
 800a726:	4603      	mov	r3, r0
 800a728:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a72a:	4b0c      	ldr	r3, [pc, #48]	; (800a75c <ip4_reass+0x2b0>)
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	8c3a      	ldrh	r2, [r7, #32]
 800a730:	429a      	cmp	r2, r3
 800a732:	d906      	bls.n	800a742 <ip4_reass+0x296>
 800a734:	4b0b      	ldr	r3, [pc, #44]	; (800a764 <ip4_reass+0x2b8>)
 800a736:	f240 229b 	movw	r2, #667	; 0x29b
 800a73a:	490b      	ldr	r1, [pc, #44]	; (800a768 <ip4_reass+0x2bc>)
 800a73c:	480b      	ldr	r0, [pc, #44]	; (800a76c <ip4_reass+0x2c0>)
 800a73e:	f007 fbdb 	bl	8011ef8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a742:	4b06      	ldr	r3, [pc, #24]	; (800a75c <ip4_reass+0x2b0>)
 800a744:	881a      	ldrh	r2, [r3, #0]
 800a746:	8c3b      	ldrh	r3, [r7, #32]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	4b03      	ldr	r3, [pc, #12]	; (800a75c <ip4_reass+0x2b0>)
 800a74e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	e038      	b.n	800a7c6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800a754:	2300      	movs	r3, #0
 800a756:	e036      	b.n	800a7c6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800a758:	bf00      	nop
 800a75a:	e00a      	b.n	800a772 <ip4_reass+0x2c6>
 800a75c:	2400524c 	.word	0x2400524c
 800a760:	24005248 	.word	0x24005248
 800a764:	08013540 	.word	0x08013540
 800a768:	080136d0 	.word	0x080136d0
 800a76c:	080135a8 	.word	0x080135a8
    goto nullreturn_ipr;
 800a770:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	2b00      	cmp	r3, #0
 800a776:	d106      	bne.n	800a786 <ip4_reass+0x2da>
 800a778:	4b15      	ldr	r3, [pc, #84]	; (800a7d0 <ip4_reass+0x324>)
 800a77a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800a77e:	4915      	ldr	r1, [pc, #84]	; (800a7d4 <ip4_reass+0x328>)
 800a780:	4815      	ldr	r0, [pc, #84]	; (800a7d8 <ip4_reass+0x32c>)
 800a782:	f007 fbb9 	bl	8011ef8 <iprintf>
  if (ipr->p == NULL) {
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d116      	bne.n	800a7bc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <ip4_reass+0x330>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a794:	429a      	cmp	r2, r3
 800a796:	d006      	beq.n	800a7a6 <ip4_reass+0x2fa>
 800a798:	4b0d      	ldr	r3, [pc, #52]	; (800a7d0 <ip4_reass+0x324>)
 800a79a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a79e:	4910      	ldr	r1, [pc, #64]	; (800a7e0 <ip4_reass+0x334>)
 800a7a0:	480d      	ldr	r0, [pc, #52]	; (800a7d8 <ip4_reass+0x32c>)
 800a7a2:	f007 fba9 	bl	8011ef8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7aa:	f7ff fce7 	bl	800a17c <ip_reass_dequeue_datagram>
 800a7ae:	e006      	b.n	800a7be <ip4_reass+0x312>
    goto nullreturn;
 800a7b0:	bf00      	nop
 800a7b2:	e004      	b.n	800a7be <ip4_reass+0x312>
    goto nullreturn;
 800a7b4:	bf00      	nop
 800a7b6:	e002      	b.n	800a7be <ip4_reass+0x312>
      goto nullreturn;
 800a7b8:	bf00      	nop
 800a7ba:	e000      	b.n	800a7be <ip4_reass+0x312>
  }

nullreturn:
 800a7bc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f001 fca4 	bl	800c10c <pbuf_free>
  return NULL;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3738      	adds	r7, #56	; 0x38
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	08013540 	.word	0x08013540
 800a7d4:	080136ec 	.word	0x080136ec
 800a7d8:	080135a8 	.word	0x080135a8
 800a7dc:	24005248 	.word	0x24005248
 800a7e0:	080136f8 	.word	0x080136f8

0800a7e4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a7e8:	2005      	movs	r0, #5
 800a7ea:	f000 fdc9 	bl	800b380 <memp_malloc>
 800a7ee:	4603      	mov	r3, r0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d106      	bne.n	800a810 <ip_frag_free_pbuf_custom_ref+0x1c>
 800a802:	4b07      	ldr	r3, [pc, #28]	; (800a820 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800a804:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800a808:	4906      	ldr	r1, [pc, #24]	; (800a824 <ip_frag_free_pbuf_custom_ref+0x30>)
 800a80a:	4807      	ldr	r0, [pc, #28]	; (800a828 <ip_frag_free_pbuf_custom_ref+0x34>)
 800a80c:	f007 fb74 	bl	8011ef8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	2005      	movs	r0, #5
 800a814:	f000 fe24 	bl	800b460 <memp_free>
}
 800a818:	bf00      	nop
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	08013540 	.word	0x08013540
 800a824:	08013718 	.word	0x08013718
 800a828:	080135a8 	.word	0x080135a8

0800a82c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d106      	bne.n	800a84c <ipfrag_free_pbuf_custom+0x20>
 800a83e:	4b11      	ldr	r3, [pc, #68]	; (800a884 <ipfrag_free_pbuf_custom+0x58>)
 800a840:	f240 22ce 	movw	r2, #718	; 0x2ce
 800a844:	4910      	ldr	r1, [pc, #64]	; (800a888 <ipfrag_free_pbuf_custom+0x5c>)
 800a846:	4811      	ldr	r0, [pc, #68]	; (800a88c <ipfrag_free_pbuf_custom+0x60>)
 800a848:	f007 fb56 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	429a      	cmp	r2, r3
 800a852:	d006      	beq.n	800a862 <ipfrag_free_pbuf_custom+0x36>
 800a854:	4b0b      	ldr	r3, [pc, #44]	; (800a884 <ipfrag_free_pbuf_custom+0x58>)
 800a856:	f240 22cf 	movw	r2, #719	; 0x2cf
 800a85a:	490d      	ldr	r1, [pc, #52]	; (800a890 <ipfrag_free_pbuf_custom+0x64>)
 800a85c:	480b      	ldr	r0, [pc, #44]	; (800a88c <ipfrag_free_pbuf_custom+0x60>)
 800a85e:	f007 fb4b 	bl	8011ef8 <iprintf>
  if (pcr->original != NULL) {
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d004      	beq.n	800a874 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	4618      	mov	r0, r3
 800a870:	f001 fc4c 	bl	800c10c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7ff ffbd 	bl	800a7f4 <ip_frag_free_pbuf_custom_ref>
}
 800a87a:	bf00      	nop
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	08013540 	.word	0x08013540
 800a888:	08013724 	.word	0x08013724
 800a88c:	080135a8 	.word	0x080135a8
 800a890:	08013730 	.word	0x08013730

0800a894 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b094      	sub	sp, #80	; 0x50
 800a898:	af02      	add	r7, sp, #8
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a8aa:	3b14      	subs	r3, #20
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	da00      	bge.n	800a8b2 <ip4_frag+0x1e>
 800a8b0:	3307      	adds	r3, #7
 800a8b2:	10db      	asrs	r3, r3, #3
 800a8b4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800a8b6:	2314      	movs	r3, #20
 800a8b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800a8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	f003 030f 	and.w	r3, r3, #15
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b14      	cmp	r3, #20
 800a8d4:	d002      	beq.n	800a8dc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800a8d6:	f06f 0305 	mvn.w	r3, #5
 800a8da:	e110      	b.n	800aafe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	895b      	ldrh	r3, [r3, #10]
 800a8e0:	2b13      	cmp	r3, #19
 800a8e2:	d809      	bhi.n	800a8f8 <ip4_frag+0x64>
 800a8e4:	4b88      	ldr	r3, [pc, #544]	; (800ab08 <ip4_frag+0x274>)
 800a8e6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800a8ea:	4988      	ldr	r1, [pc, #544]	; (800ab0c <ip4_frag+0x278>)
 800a8ec:	4888      	ldr	r0, [pc, #544]	; (800ab10 <ip4_frag+0x27c>)
 800a8ee:	f007 fb03 	bl	8011ef8 <iprintf>
 800a8f2:	f06f 0305 	mvn.w	r3, #5
 800a8f6:	e102      	b.n	800aafe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fa:	88db      	ldrh	r3, [r3, #6]
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fd fd22 	bl	8008348 <lwip_htons>
 800a904:	4603      	mov	r3, r0
 800a906:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800a908:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a90a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a90e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800a912:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a918:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	891b      	ldrh	r3, [r3, #8]
 800a91e:	3b14      	subs	r3, #20
 800a920:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800a924:	e0e1      	b.n	800aaea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a926:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a928:	00db      	lsls	r3, r3, #3
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a930:	4293      	cmp	r3, r2
 800a932:	bf28      	it	cs
 800a934:	4613      	movcs	r3, r2
 800a936:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a938:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a93c:	2114      	movs	r1, #20
 800a93e:	200e      	movs	r0, #14
 800a940:	f001 f900 	bl	800bb44 <pbuf_alloc>
 800a944:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 80d5 	beq.w	800aaf8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	895b      	ldrh	r3, [r3, #10]
 800a952:	2b13      	cmp	r3, #19
 800a954:	d806      	bhi.n	800a964 <ip4_frag+0xd0>
 800a956:	4b6c      	ldr	r3, [pc, #432]	; (800ab08 <ip4_frag+0x274>)
 800a958:	f44f 7249 	mov.w	r2, #804	; 0x324
 800a95c:	496d      	ldr	r1, [pc, #436]	; (800ab14 <ip4_frag+0x280>)
 800a95e:	486c      	ldr	r0, [pc, #432]	; (800ab10 <ip4_frag+0x27c>)
 800a960:	f007 faca 	bl	8011ef8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	2214      	movs	r2, #20
 800a96a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a96c:	4618      	mov	r0, r3
 800a96e:	f007 faad 	bl	8011ecc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800a978:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a97a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800a97e:	e064      	b.n	800aa4a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	895a      	ldrh	r2, [r3, #10]
 800a984:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	895b      	ldrh	r3, [r3, #10]
 800a98e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a990:	429a      	cmp	r2, r3
 800a992:	d906      	bls.n	800a9a2 <ip4_frag+0x10e>
 800a994:	4b5c      	ldr	r3, [pc, #368]	; (800ab08 <ip4_frag+0x274>)
 800a996:	f240 322d 	movw	r2, #813	; 0x32d
 800a99a:	495f      	ldr	r1, [pc, #380]	; (800ab18 <ip4_frag+0x284>)
 800a99c:	485c      	ldr	r0, [pc, #368]	; (800ab10 <ip4_frag+0x27c>)
 800a99e:	f007 faab 	bl	8011ef8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800a9a2:	8bfa      	ldrh	r2, [r7, #30]
 800a9a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	bf28      	it	cs
 800a9ac:	4613      	movcs	r3, r2
 800a9ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800a9b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d105      	bne.n	800a9c6 <ip4_frag+0x132>
        poff = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	60fb      	str	r3, [r7, #12]
        continue;
 800a9c4:	e041      	b.n	800aa4a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800a9c6:	f7ff ff0d 	bl	800a7e4 <ip_frag_alloc_pbuf_custom_ref>
 800a9ca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d103      	bne.n	800a9da <ip4_frag+0x146>
        pbuf_free(rambuf);
 800a9d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9d4:	f001 fb9a 	bl	800c10c <pbuf_free>
        goto memerr;
 800a9d8:	e08f      	b.n	800aafa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a9da:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a9e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800a9e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a9ec:	9201      	str	r2, [sp, #4]
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2241      	movs	r2, #65	; 0x41
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	f001 f9cf 	bl	800bd98 <pbuf_alloced_custom>
 800a9fa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d106      	bne.n	800aa10 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800aa02:	69b8      	ldr	r0, [r7, #24]
 800aa04:	f7ff fef6 	bl	800a7f4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800aa08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa0a:	f001 fb7f 	bl	800c10c <pbuf_free>
        goto memerr;
 800aa0e:	e074      	b.n	800aafa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f001 fc1b 	bl	800c24c <pbuf_ref>
      pcr->original = p;
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	4a3f      	ldr	r2, [pc, #252]	; (800ab1c <ip4_frag+0x288>)
 800aa20:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800aa22:	6979      	ldr	r1, [r7, #20]
 800aa24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa26:	f001 fc33 	bl	800c290 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800aa2a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800aa2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800aa38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d004      	beq.n	800aa4a <ip4_frag+0x1b6>
        poff = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800aa4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d196      	bne.n	800a980 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800aa52:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800aa54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aa58:	4413      	add	r3, r2
 800aa5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa60:	f1a3 0213 	sub.w	r2, r3, #19
 800aa64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	bfcc      	ite	gt
 800aa6c:	2301      	movgt	r3, #1
 800aa6e:	2300      	movle	r3, #0
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800aa74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aa78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <ip4_frag+0x1f6>
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800aa8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aa8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aa90:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800aa92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fd fc57 	bl	8008348 <lwip_htons>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800aaa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aaa4:	3314      	adds	r3, #20
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fd fc4d 	bl	8008348 <lwip_htons>
 800aaae:	4603      	mov	r3, r0
 800aab0:	461a      	mov	r2, r3
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	2200      	movs	r2, #0
 800aaba:	729a      	strb	r2, [r3, #10]
 800aabc:	2200      	movs	r2, #0
 800aabe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aac8:	68b8      	ldr	r0, [r7, #8]
 800aaca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800aacc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aace:	f001 fb1d 	bl	800c10c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800aad2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aad6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800aade:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800aae2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aae4:	4413      	add	r3, r2
 800aae6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800aaea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f47f af19 	bne.w	800a926 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e002      	b.n	800aafe <ip4_frag+0x26a>
      goto memerr;
 800aaf8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800aafa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3748      	adds	r7, #72	; 0x48
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	08013540 	.word	0x08013540
 800ab0c:	0801373c 	.word	0x0801373c
 800ab10:	080135a8 	.word	0x080135a8
 800ab14:	08013758 	.word	0x08013758
 800ab18:	08013778 	.word	0x08013778
 800ab1c:	0800a82d 	.word	0x0800a82d

0800ab20 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ab2a:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <ptr_to_mem+0x20>)
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	88fb      	ldrh	r3, [r7, #6]
 800ab30:	4413      	add	r3, r2
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	24005250 	.word	0x24005250

0800ab44 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ab4c:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <mem_to_ptr+0x20>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	b29b      	uxth	r3, r3
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	24005250 	.word	0x24005250

0800ab68 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ab68:	b590      	push	{r4, r7, lr}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ab70:	4b45      	ldr	r3, [pc, #276]	; (800ac88 <plug_holes+0x120>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d206      	bcs.n	800ab88 <plug_holes+0x20>
 800ab7a:	4b44      	ldr	r3, [pc, #272]	; (800ac8c <plug_holes+0x124>)
 800ab7c:	f240 12df 	movw	r2, #479	; 0x1df
 800ab80:	4943      	ldr	r1, [pc, #268]	; (800ac90 <plug_holes+0x128>)
 800ab82:	4844      	ldr	r0, [pc, #272]	; (800ac94 <plug_holes+0x12c>)
 800ab84:	f007 f9b8 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ab88:	4b43      	ldr	r3, [pc, #268]	; (800ac98 <plug_holes+0x130>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d306      	bcc.n	800aba0 <plug_holes+0x38>
 800ab92:	4b3e      	ldr	r3, [pc, #248]	; (800ac8c <plug_holes+0x124>)
 800ab94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ab98:	4940      	ldr	r1, [pc, #256]	; (800ac9c <plug_holes+0x134>)
 800ab9a:	483e      	ldr	r0, [pc, #248]	; (800ac94 <plug_holes+0x12c>)
 800ab9c:	f007 f9ac 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	791b      	ldrb	r3, [r3, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d006      	beq.n	800abb6 <plug_holes+0x4e>
 800aba8:	4b38      	ldr	r3, [pc, #224]	; (800ac8c <plug_holes+0x124>)
 800abaa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800abae:	493c      	ldr	r1, [pc, #240]	; (800aca0 <plug_holes+0x138>)
 800abb0:	4838      	ldr	r0, [pc, #224]	; (800ac94 <plug_holes+0x12c>)
 800abb2:	f007 f9a1 	bl	8011ef8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800abbe:	d906      	bls.n	800abce <plug_holes+0x66>
 800abc0:	4b32      	ldr	r3, [pc, #200]	; (800ac8c <plug_holes+0x124>)
 800abc2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800abc6:	4937      	ldr	r1, [pc, #220]	; (800aca4 <plug_holes+0x13c>)
 800abc8:	4832      	ldr	r0, [pc, #200]	; (800ac94 <plug_holes+0x12c>)
 800abca:	f007 f995 	bl	8011ef8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	881b      	ldrh	r3, [r3, #0]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7ff ffa4 	bl	800ab20 <ptr_to_mem>
 800abd8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d024      	beq.n	800ac2c <plug_holes+0xc4>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	791b      	ldrb	r3, [r3, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d120      	bne.n	800ac2c <plug_holes+0xc4>
 800abea:	4b2b      	ldr	r3, [pc, #172]	; (800ac98 <plug_holes+0x130>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d01b      	beq.n	800ac2c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800abf4:	4b2c      	ldr	r3, [pc, #176]	; (800aca8 <plug_holes+0x140>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d102      	bne.n	800ac04 <plug_holes+0x9c>
      lfree = mem;
 800abfe:	4a2a      	ldr	r2, [pc, #168]	; (800aca8 <plug_holes+0x140>)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	881a      	ldrh	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac14:	d00a      	beq.n	800ac2c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	881b      	ldrh	r3, [r3, #0]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff ff80 	bl	800ab20 <ptr_to_mem>
 800ac20:	4604      	mov	r4, r0
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff ff8e 	bl	800ab44 <mem_to_ptr>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	885b      	ldrh	r3, [r3, #2]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7ff ff75 	bl	800ab20 <ptr_to_mem>
 800ac36:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d01f      	beq.n	800ac80 <plug_holes+0x118>
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	791b      	ldrb	r3, [r3, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d11b      	bne.n	800ac80 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ac48:	4b17      	ldr	r3, [pc, #92]	; (800aca8 <plug_holes+0x140>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d102      	bne.n	800ac58 <plug_holes+0xf0>
      lfree = pmem;
 800ac52:	4a15      	ldr	r2, [pc, #84]	; (800aca8 <plug_holes+0x140>)
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	881a      	ldrh	r2, [r3, #0]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac68:	d00a      	beq.n	800ac80 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7ff ff56 	bl	800ab20 <ptr_to_mem>
 800ac74:	4604      	mov	r4, r0
 800ac76:	68b8      	ldr	r0, [r7, #8]
 800ac78:	f7ff ff64 	bl	800ab44 <mem_to_ptr>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ac80:	bf00      	nop
 800ac82:	3714      	adds	r7, #20
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd90      	pop	{r4, r7, pc}
 800ac88:	24005250 	.word	0x24005250
 800ac8c:	08013788 	.word	0x08013788
 800ac90:	080137dc 	.word	0x080137dc
 800ac94:	080137f4 	.word	0x080137f4
 800ac98:	24005254 	.word	0x24005254
 800ac9c:	0801381c 	.word	0x0801381c
 800aca0:	08013838 	.word	0x08013838
 800aca4:	08013854 	.word	0x08013854
 800aca8:	24005258 	.word	0x24005258

0800acac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800acb2:	4b16      	ldr	r3, [pc, #88]	; (800ad0c <mem_init+0x60>)
 800acb4:	4a16      	ldr	r2, [pc, #88]	; (800ad10 <mem_init+0x64>)
 800acb6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800acb8:	4b14      	ldr	r3, [pc, #80]	; (800ad0c <mem_init+0x60>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800acc4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800acd2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800acd6:	f7ff ff23 	bl	800ab20 <ptr_to_mem>
 800acda:	4603      	mov	r3, r0
 800acdc:	4a0d      	ldr	r2, [pc, #52]	; (800ad14 <mem_init+0x68>)
 800acde:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ace0:	4b0c      	ldr	r3, [pc, #48]	; (800ad14 <mem_init+0x68>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2201      	movs	r2, #1
 800ace6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ace8:	4b0a      	ldr	r3, [pc, #40]	; (800ad14 <mem_init+0x68>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800acf0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800acf2:	4b08      	ldr	r3, [pc, #32]	; (800ad14 <mem_init+0x68>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800acfa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800acfc:	4b03      	ldr	r3, [pc, #12]	; (800ad0c <mem_init+0x60>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a05      	ldr	r2, [pc, #20]	; (800ad18 <mem_init+0x6c>)
 800ad02:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	24005250 	.word	0x24005250
 800ad10:	30044000 	.word	0x30044000
 800ad14:	24005254 	.word	0x24005254
 800ad18:	24005258 	.word	0x24005258

0800ad1c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff ff0d 	bl	800ab44 <mem_to_ptr>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7ff fef4 	bl	800ab20 <ptr_to_mem>
 800ad38:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	885b      	ldrh	r3, [r3, #2]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff feee 	bl	800ab20 <ptr_to_mem>
 800ad44:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad4e:	d818      	bhi.n	800ad82 <mem_link_valid+0x66>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	885b      	ldrh	r3, [r3, #2]
 800ad54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad58:	d813      	bhi.n	800ad82 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ad5e:	8afa      	ldrh	r2, [r7, #22]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d004      	beq.n	800ad6e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	8afa      	ldrh	r2, [r7, #22]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d109      	bne.n	800ad82 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ad6e:	4b08      	ldr	r3, [pc, #32]	; (800ad90 <mem_link_valid+0x74>)
 800ad70:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d006      	beq.n	800ad86 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	885b      	ldrh	r3, [r3, #2]
 800ad7c:	8afa      	ldrh	r2, [r7, #22]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d001      	beq.n	800ad86 <mem_link_valid+0x6a>
    return 0;
 800ad82:	2300      	movs	r3, #0
 800ad84:	e000      	b.n	800ad88 <mem_link_valid+0x6c>
  }
  return 1;
 800ad86:	2301      	movs	r3, #1
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	24005254 	.word	0x24005254

0800ad94 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d04c      	beq.n	800ae3c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f003 0303 	and.w	r3, r3, #3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d007      	beq.n	800adbc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800adac:	4b25      	ldr	r3, [pc, #148]	; (800ae44 <mem_free+0xb0>)
 800adae:	f240 2273 	movw	r2, #627	; 0x273
 800adb2:	4925      	ldr	r1, [pc, #148]	; (800ae48 <mem_free+0xb4>)
 800adb4:	4825      	ldr	r0, [pc, #148]	; (800ae4c <mem_free+0xb8>)
 800adb6:	f007 f89f 	bl	8011ef8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800adba:	e040      	b.n	800ae3e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3b08      	subs	r3, #8
 800adc0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800adc2:	4b23      	ldr	r3, [pc, #140]	; (800ae50 <mem_free+0xbc>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d306      	bcc.n	800adda <mem_free+0x46>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f103 020c 	add.w	r2, r3, #12
 800add2:	4b20      	ldr	r3, [pc, #128]	; (800ae54 <mem_free+0xc0>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	429a      	cmp	r2, r3
 800add8:	d907      	bls.n	800adea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800adda:	4b1a      	ldr	r3, [pc, #104]	; (800ae44 <mem_free+0xb0>)
 800addc:	f240 227f 	movw	r2, #639	; 0x27f
 800ade0:	491d      	ldr	r1, [pc, #116]	; (800ae58 <mem_free+0xc4>)
 800ade2:	481a      	ldr	r0, [pc, #104]	; (800ae4c <mem_free+0xb8>)
 800ade4:	f007 f888 	bl	8011ef8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ade8:	e029      	b.n	800ae3e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	791b      	ldrb	r3, [r3, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d107      	bne.n	800ae02 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800adf2:	4b14      	ldr	r3, [pc, #80]	; (800ae44 <mem_free+0xb0>)
 800adf4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800adf8:	4918      	ldr	r1, [pc, #96]	; (800ae5c <mem_free+0xc8>)
 800adfa:	4814      	ldr	r0, [pc, #80]	; (800ae4c <mem_free+0xb8>)
 800adfc:	f007 f87c 	bl	8011ef8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ae00:	e01d      	b.n	800ae3e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f7ff ff8a 	bl	800ad1c <mem_link_valid>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d107      	bne.n	800ae1e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ae0e:	4b0d      	ldr	r3, [pc, #52]	; (800ae44 <mem_free+0xb0>)
 800ae10:	f240 2295 	movw	r2, #661	; 0x295
 800ae14:	4912      	ldr	r1, [pc, #72]	; (800ae60 <mem_free+0xcc>)
 800ae16:	480d      	ldr	r0, [pc, #52]	; (800ae4c <mem_free+0xb8>)
 800ae18:	f007 f86e 	bl	8011ef8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ae1c:	e00f      	b.n	800ae3e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ae24:	4b0f      	ldr	r3, [pc, #60]	; (800ae64 <mem_free+0xd0>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d202      	bcs.n	800ae34 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ae2e:	4a0d      	ldr	r2, [pc, #52]	; (800ae64 <mem_free+0xd0>)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff fe97 	bl	800ab68 <plug_holes>
 800ae3a:	e000      	b.n	800ae3e <mem_free+0xaa>
    return;
 800ae3c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	08013788 	.word	0x08013788
 800ae48:	08013880 	.word	0x08013880
 800ae4c:	080137f4 	.word	0x080137f4
 800ae50:	24005250 	.word	0x24005250
 800ae54:	24005254 	.word	0x24005254
 800ae58:	080138a4 	.word	0x080138a4
 800ae5c:	080138c0 	.word	0x080138c0
 800ae60:	080138e8 	.word	0x080138e8
 800ae64:	24005258 	.word	0x24005258

0800ae68 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b088      	sub	sp, #32
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ae74:	887b      	ldrh	r3, [r7, #2]
 800ae76:	3303      	adds	r3, #3
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	f023 0303 	bic.w	r3, r3, #3
 800ae7e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ae80:	8bfb      	ldrh	r3, [r7, #30]
 800ae82:	2b0b      	cmp	r3, #11
 800ae84:	d801      	bhi.n	800ae8a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ae86:	230c      	movs	r3, #12
 800ae88:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ae8a:	8bfb      	ldrh	r3, [r7, #30]
 800ae8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae90:	d803      	bhi.n	800ae9a <mem_trim+0x32>
 800ae92:	8bfa      	ldrh	r2, [r7, #30]
 800ae94:	887b      	ldrh	r3, [r7, #2]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d201      	bcs.n	800ae9e <mem_trim+0x36>
    return NULL;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e0cc      	b.n	800b038 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ae9e:	4b68      	ldr	r3, [pc, #416]	; (800b040 <mem_trim+0x1d8>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d304      	bcc.n	800aeb2 <mem_trim+0x4a>
 800aea8:	4b66      	ldr	r3, [pc, #408]	; (800b044 <mem_trim+0x1dc>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d306      	bcc.n	800aec0 <mem_trim+0x58>
 800aeb2:	4b65      	ldr	r3, [pc, #404]	; (800b048 <mem_trim+0x1e0>)
 800aeb4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800aeb8:	4964      	ldr	r1, [pc, #400]	; (800b04c <mem_trim+0x1e4>)
 800aeba:	4865      	ldr	r0, [pc, #404]	; (800b050 <mem_trim+0x1e8>)
 800aebc:	f007 f81c 	bl	8011ef8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800aec0:	4b5f      	ldr	r3, [pc, #380]	; (800b040 <mem_trim+0x1d8>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d304      	bcc.n	800aed4 <mem_trim+0x6c>
 800aeca:	4b5e      	ldr	r3, [pc, #376]	; (800b044 <mem_trim+0x1dc>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d301      	bcc.n	800aed8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	e0af      	b.n	800b038 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	3b08      	subs	r3, #8
 800aedc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800aede:	69b8      	ldr	r0, [r7, #24]
 800aee0:	f7ff fe30 	bl	800ab44 <mem_to_ptr>
 800aee4:	4603      	mov	r3, r0
 800aee6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	881a      	ldrh	r2, [r3, #0]
 800aeec:	8afb      	ldrh	r3, [r7, #22]
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	3b08      	subs	r3, #8
 800aef4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800aef6:	8bfa      	ldrh	r2, [r7, #30]
 800aef8:	8abb      	ldrh	r3, [r7, #20]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d906      	bls.n	800af0c <mem_trim+0xa4>
 800aefe:	4b52      	ldr	r3, [pc, #328]	; (800b048 <mem_trim+0x1e0>)
 800af00:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800af04:	4953      	ldr	r1, [pc, #332]	; (800b054 <mem_trim+0x1ec>)
 800af06:	4852      	ldr	r0, [pc, #328]	; (800b050 <mem_trim+0x1e8>)
 800af08:	f006 fff6 	bl	8011ef8 <iprintf>
  if (newsize > size) {
 800af0c:	8bfa      	ldrh	r2, [r7, #30]
 800af0e:	8abb      	ldrh	r3, [r7, #20]
 800af10:	429a      	cmp	r2, r3
 800af12:	d901      	bls.n	800af18 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800af14:	2300      	movs	r3, #0
 800af16:	e08f      	b.n	800b038 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800af18:	8bfa      	ldrh	r2, [r7, #30]
 800af1a:	8abb      	ldrh	r3, [r7, #20]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d101      	bne.n	800af24 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	e089      	b.n	800b038 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff fdf9 	bl	800ab20 <ptr_to_mem>
 800af2e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	791b      	ldrb	r3, [r3, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d13f      	bne.n	800afb8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	881b      	ldrh	r3, [r3, #0]
 800af3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af40:	d106      	bne.n	800af50 <mem_trim+0xe8>
 800af42:	4b41      	ldr	r3, [pc, #260]	; (800b048 <mem_trim+0x1e0>)
 800af44:	f240 22f5 	movw	r2, #757	; 0x2f5
 800af48:	4943      	ldr	r1, [pc, #268]	; (800b058 <mem_trim+0x1f0>)
 800af4a:	4841      	ldr	r0, [pc, #260]	; (800b050 <mem_trim+0x1e8>)
 800af4c:	f006 ffd4 	bl	8011ef8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800af56:	8afa      	ldrh	r2, [r7, #22]
 800af58:	8bfb      	ldrh	r3, [r7, #30]
 800af5a:	4413      	add	r3, r2
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	3308      	adds	r3, #8
 800af60:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800af62:	4b3e      	ldr	r3, [pc, #248]	; (800b05c <mem_trim+0x1f4>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d106      	bne.n	800af7a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800af6c:	89fb      	ldrh	r3, [r7, #14]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff fdd6 	bl	800ab20 <ptr_to_mem>
 800af74:	4603      	mov	r3, r0
 800af76:	4a39      	ldr	r2, [pc, #228]	; (800b05c <mem_trim+0x1f4>)
 800af78:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800af7a:	89fb      	ldrh	r3, [r7, #14]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff fdcf 	bl	800ab20 <ptr_to_mem>
 800af82:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	2200      	movs	r2, #0
 800af88:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	89ba      	ldrh	r2, [r7, #12]
 800af8e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	8afa      	ldrh	r2, [r7, #22]
 800af94:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	89fa      	ldrh	r2, [r7, #14]
 800af9a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afa4:	d047      	beq.n	800b036 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff fdb8 	bl	800ab20 <ptr_to_mem>
 800afb0:	4602      	mov	r2, r0
 800afb2:	89fb      	ldrh	r3, [r7, #14]
 800afb4:	8053      	strh	r3, [r2, #2]
 800afb6:	e03e      	b.n	800b036 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800afb8:	8bfb      	ldrh	r3, [r7, #30]
 800afba:	f103 0214 	add.w	r2, r3, #20
 800afbe:	8abb      	ldrh	r3, [r7, #20]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d838      	bhi.n	800b036 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800afc4:	8afa      	ldrh	r2, [r7, #22]
 800afc6:	8bfb      	ldrh	r3, [r7, #30]
 800afc8:	4413      	add	r3, r2
 800afca:	b29b      	uxth	r3, r3
 800afcc:	3308      	adds	r3, #8
 800afce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afd8:	d106      	bne.n	800afe8 <mem_trim+0x180>
 800afda:	4b1b      	ldr	r3, [pc, #108]	; (800b048 <mem_trim+0x1e0>)
 800afdc:	f240 3216 	movw	r2, #790	; 0x316
 800afe0:	491d      	ldr	r1, [pc, #116]	; (800b058 <mem_trim+0x1f0>)
 800afe2:	481b      	ldr	r0, [pc, #108]	; (800b050 <mem_trim+0x1e8>)
 800afe4:	f006 ff88 	bl	8011ef8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800afe8:	89fb      	ldrh	r3, [r7, #14]
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff fd98 	bl	800ab20 <ptr_to_mem>
 800aff0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800aff2:	4b1a      	ldr	r3, [pc, #104]	; (800b05c <mem_trim+0x1f4>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	693a      	ldr	r2, [r7, #16]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d202      	bcs.n	800b002 <mem_trim+0x19a>
      lfree = mem2;
 800affc:	4a17      	ldr	r2, [pc, #92]	; (800b05c <mem_trim+0x1f4>)
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	2200      	movs	r2, #0
 800b006:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	881a      	ldrh	r2, [r3, #0]
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	8afa      	ldrh	r2, [r7, #22]
 800b014:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	89fa      	ldrh	r2, [r7, #14]
 800b01a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b024:	d007      	beq.n	800b036 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7ff fd78 	bl	800ab20 <ptr_to_mem>
 800b030:	4602      	mov	r2, r0
 800b032:	89fb      	ldrh	r3, [r7, #14]
 800b034:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b036:	687b      	ldr	r3, [r7, #4]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3720      	adds	r7, #32
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	24005250 	.word	0x24005250
 800b044:	24005254 	.word	0x24005254
 800b048:	08013788 	.word	0x08013788
 800b04c:	0801391c 	.word	0x0801391c
 800b050:	080137f4 	.word	0x080137f4
 800b054:	08013934 	.word	0x08013934
 800b058:	08013954 	.word	0x08013954
 800b05c:	24005258 	.word	0x24005258

0800b060 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b088      	sub	sp, #32
 800b064:	af00      	add	r7, sp, #0
 800b066:	4603      	mov	r3, r0
 800b068:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b06a:	88fb      	ldrh	r3, [r7, #6]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <mem_malloc+0x14>
    return NULL;
 800b070:	2300      	movs	r3, #0
 800b072:	e0d9      	b.n	800b228 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b074:	88fb      	ldrh	r3, [r7, #6]
 800b076:	3303      	adds	r3, #3
 800b078:	b29b      	uxth	r3, r3
 800b07a:	f023 0303 	bic.w	r3, r3, #3
 800b07e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b080:	8bbb      	ldrh	r3, [r7, #28]
 800b082:	2b0b      	cmp	r3, #11
 800b084:	d801      	bhi.n	800b08a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b086:	230c      	movs	r3, #12
 800b088:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b08a:	8bbb      	ldrh	r3, [r7, #28]
 800b08c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b090:	d803      	bhi.n	800b09a <mem_malloc+0x3a>
 800b092:	8bba      	ldrh	r2, [r7, #28]
 800b094:	88fb      	ldrh	r3, [r7, #6]
 800b096:	429a      	cmp	r2, r3
 800b098:	d201      	bcs.n	800b09e <mem_malloc+0x3e>
    return NULL;
 800b09a:	2300      	movs	r3, #0
 800b09c:	e0c4      	b.n	800b228 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b09e:	4b64      	ldr	r3, [pc, #400]	; (800b230 <mem_malloc+0x1d0>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7ff fd4e 	bl	800ab44 <mem_to_ptr>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	83fb      	strh	r3, [r7, #30]
 800b0ac:	e0b4      	b.n	800b218 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b0ae:	8bfb      	ldrh	r3, [r7, #30]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7ff fd35 	bl	800ab20 <ptr_to_mem>
 800b0b6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	791b      	ldrb	r3, [r3, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f040 80a4 	bne.w	800b20a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	881b      	ldrh	r3, [r3, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	8bfb      	ldrh	r3, [r7, #30]
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	f1a3 0208 	sub.w	r2, r3, #8
 800b0d0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	f0c0 8099 	bcc.w	800b20a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	8bfb      	ldrh	r3, [r7, #30]
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	f1a3 0208 	sub.w	r2, r3, #8
 800b0e6:	8bbb      	ldrh	r3, [r7, #28]
 800b0e8:	3314      	adds	r3, #20
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d333      	bcc.n	800b156 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b0ee:	8bfa      	ldrh	r2, [r7, #30]
 800b0f0:	8bbb      	ldrh	r3, [r7, #28]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	3308      	adds	r3, #8
 800b0f8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b0fa:	8a7b      	ldrh	r3, [r7, #18]
 800b0fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b100:	d106      	bne.n	800b110 <mem_malloc+0xb0>
 800b102:	4b4c      	ldr	r3, [pc, #304]	; (800b234 <mem_malloc+0x1d4>)
 800b104:	f240 3287 	movw	r2, #903	; 0x387
 800b108:	494b      	ldr	r1, [pc, #300]	; (800b238 <mem_malloc+0x1d8>)
 800b10a:	484c      	ldr	r0, [pc, #304]	; (800b23c <mem_malloc+0x1dc>)
 800b10c:	f006 fef4 	bl	8011ef8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b110:	8a7b      	ldrh	r3, [r7, #18]
 800b112:	4618      	mov	r0, r3
 800b114:	f7ff fd04 	bl	800ab20 <ptr_to_mem>
 800b118:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	881a      	ldrh	r2, [r3, #0]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	8bfa      	ldrh	r2, [r7, #30]
 800b12c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	8a7a      	ldrh	r2, [r7, #18]
 800b132:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2201      	movs	r2, #1
 800b138:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	881b      	ldrh	r3, [r3, #0]
 800b13e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b142:	d00b      	beq.n	800b15c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	881b      	ldrh	r3, [r3, #0]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff fce9 	bl	800ab20 <ptr_to_mem>
 800b14e:	4602      	mov	r2, r0
 800b150:	8a7b      	ldrh	r3, [r7, #18]
 800b152:	8053      	strh	r3, [r2, #2]
 800b154:	e002      	b.n	800b15c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2201      	movs	r2, #1
 800b15a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b15c:	4b34      	ldr	r3, [pc, #208]	; (800b230 <mem_malloc+0x1d0>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	697a      	ldr	r2, [r7, #20]
 800b162:	429a      	cmp	r2, r3
 800b164:	d127      	bne.n	800b1b6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b166:	4b32      	ldr	r3, [pc, #200]	; (800b230 <mem_malloc+0x1d0>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b16c:	e005      	b.n	800b17a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff fcd4 	bl	800ab20 <ptr_to_mem>
 800b178:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	791b      	ldrb	r3, [r3, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d004      	beq.n	800b18c <mem_malloc+0x12c>
 800b182:	4b2f      	ldr	r3, [pc, #188]	; (800b240 <mem_malloc+0x1e0>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d1f0      	bne.n	800b16e <mem_malloc+0x10e>
          }
          lfree = cur;
 800b18c:	4a28      	ldr	r2, [pc, #160]	; (800b230 <mem_malloc+0x1d0>)
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b192:	4b27      	ldr	r3, [pc, #156]	; (800b230 <mem_malloc+0x1d0>)
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	4b2a      	ldr	r3, [pc, #168]	; (800b240 <mem_malloc+0x1e0>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d00b      	beq.n	800b1b6 <mem_malloc+0x156>
 800b19e:	4b24      	ldr	r3, [pc, #144]	; (800b230 <mem_malloc+0x1d0>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	791b      	ldrb	r3, [r3, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d006      	beq.n	800b1b6 <mem_malloc+0x156>
 800b1a8:	4b22      	ldr	r3, [pc, #136]	; (800b234 <mem_malloc+0x1d4>)
 800b1aa:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b1ae:	4925      	ldr	r1, [pc, #148]	; (800b244 <mem_malloc+0x1e4>)
 800b1b0:	4822      	ldr	r0, [pc, #136]	; (800b23c <mem_malloc+0x1dc>)
 800b1b2:	f006 fea1 	bl	8011ef8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b1b6:	8bba      	ldrh	r2, [r7, #28]
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	3308      	adds	r3, #8
 800b1be:	4a20      	ldr	r2, [pc, #128]	; (800b240 <mem_malloc+0x1e0>)
 800b1c0:	6812      	ldr	r2, [r2, #0]
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d906      	bls.n	800b1d4 <mem_malloc+0x174>
 800b1c6:	4b1b      	ldr	r3, [pc, #108]	; (800b234 <mem_malloc+0x1d4>)
 800b1c8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b1cc:	491e      	ldr	r1, [pc, #120]	; (800b248 <mem_malloc+0x1e8>)
 800b1ce:	481b      	ldr	r0, [pc, #108]	; (800b23c <mem_malloc+0x1dc>)
 800b1d0:	f006 fe92 	bl	8011ef8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	f003 0303 	and.w	r3, r3, #3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d006      	beq.n	800b1ec <mem_malloc+0x18c>
 800b1de:	4b15      	ldr	r3, [pc, #84]	; (800b234 <mem_malloc+0x1d4>)
 800b1e0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b1e4:	4919      	ldr	r1, [pc, #100]	; (800b24c <mem_malloc+0x1ec>)
 800b1e6:	4815      	ldr	r0, [pc, #84]	; (800b23c <mem_malloc+0x1dc>)
 800b1e8:	f006 fe86 	bl	8011ef8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	f003 0303 	and.w	r3, r3, #3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d006      	beq.n	800b204 <mem_malloc+0x1a4>
 800b1f6:	4b0f      	ldr	r3, [pc, #60]	; (800b234 <mem_malloc+0x1d4>)
 800b1f8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b1fc:	4914      	ldr	r1, [pc, #80]	; (800b250 <mem_malloc+0x1f0>)
 800b1fe:	480f      	ldr	r0, [pc, #60]	; (800b23c <mem_malloc+0x1dc>)
 800b200:	f006 fe7a 	bl	8011ef8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	3308      	adds	r3, #8
 800b208:	e00e      	b.n	800b228 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b20a:	8bfb      	ldrh	r3, [r7, #30]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff fc87 	bl	800ab20 <ptr_to_mem>
 800b212:	4603      	mov	r3, r0
 800b214:	881b      	ldrh	r3, [r3, #0]
 800b216:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b218:	8bfa      	ldrh	r2, [r7, #30]
 800b21a:	8bbb      	ldrh	r3, [r7, #28]
 800b21c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b220:	429a      	cmp	r2, r3
 800b222:	f4ff af44 	bcc.w	800b0ae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	24005258 	.word	0x24005258
 800b234:	08013788 	.word	0x08013788
 800b238:	08013954 	.word	0x08013954
 800b23c:	080137f4 	.word	0x080137f4
 800b240:	24005254 	.word	0x24005254
 800b244:	08013968 	.word	0x08013968
 800b248:	08013984 	.word	0x08013984
 800b24c:	080139b4 	.word	0x080139b4
 800b250:	080139e4 	.word	0x080139e4

0800b254 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	3303      	adds	r3, #3
 800b26a:	f023 0303 	bic.w	r3, r3, #3
 800b26e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b270:	2300      	movs	r3, #0
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	e011      	b.n	800b29a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	461a      	mov	r2, r3
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	4413      	add	r3, r2
 800b292:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3301      	adds	r3, #1
 800b298:	60fb      	str	r3, [r7, #12]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	885b      	ldrh	r3, [r3, #2]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	dbe7      	blt.n	800b276 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b2a6:	bf00      	nop
 800b2a8:	bf00      	nop
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	80fb      	strh	r3, [r7, #6]
 800b2be:	e009      	b.n	800b2d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b2c0:	88fb      	ldrh	r3, [r7, #6]
 800b2c2:	4a08      	ldr	r2, [pc, #32]	; (800b2e4 <memp_init+0x30>)
 800b2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7ff ffc3 	bl	800b254 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b2ce:	88fb      	ldrh	r3, [r7, #6]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	80fb      	strh	r3, [r7, #6]
 800b2d4:	88fb      	ldrh	r3, [r7, #6]
 800b2d6:	2b08      	cmp	r3, #8
 800b2d8:	d9f2      	bls.n	800b2c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b2da:	bf00      	nop
 800b2dc:	bf00      	nop
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	08015c50 	.word	0x08015c50

0800b2e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d012      	beq.n	800b324 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	6812      	ldr	r2, [r2, #0]
 800b306:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f003 0303 	and.w	r3, r3, #3
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d006      	beq.n	800b320 <do_memp_malloc_pool+0x38>
 800b312:	4b07      	ldr	r3, [pc, #28]	; (800b330 <do_memp_malloc_pool+0x48>)
 800b314:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b318:	4906      	ldr	r1, [pc, #24]	; (800b334 <do_memp_malloc_pool+0x4c>)
 800b31a:	4807      	ldr	r0, [pc, #28]	; (800b338 <do_memp_malloc_pool+0x50>)
 800b31c:	f006 fdec 	bl	8011ef8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	e000      	b.n	800b326 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	08013a08 	.word	0x08013a08
 800b334:	08013a5c 	.word	0x08013a5c
 800b338:	08013a80 	.word	0x08013a80

0800b33c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d106      	bne.n	800b358 <memp_malloc_pool+0x1c>
 800b34a:	4b0a      	ldr	r3, [pc, #40]	; (800b374 <memp_malloc_pool+0x38>)
 800b34c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b350:	4909      	ldr	r1, [pc, #36]	; (800b378 <memp_malloc_pool+0x3c>)
 800b352:	480a      	ldr	r0, [pc, #40]	; (800b37c <memp_malloc_pool+0x40>)
 800b354:	f006 fdd0 	bl	8011ef8 <iprintf>
  if (desc == NULL) {
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <memp_malloc_pool+0x26>
    return NULL;
 800b35e:	2300      	movs	r3, #0
 800b360:	e003      	b.n	800b36a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7ff ffc0 	bl	800b2e8 <do_memp_malloc_pool>
 800b368:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	08013a08 	.word	0x08013a08
 800b378:	08013aa8 	.word	0x08013aa8
 800b37c:	08013a80 	.word	0x08013a80

0800b380 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	2b08      	cmp	r3, #8
 800b38e:	d908      	bls.n	800b3a2 <memp_malloc+0x22>
 800b390:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <memp_malloc+0x3c>)
 800b392:	f240 1257 	movw	r2, #343	; 0x157
 800b396:	490a      	ldr	r1, [pc, #40]	; (800b3c0 <memp_malloc+0x40>)
 800b398:	480a      	ldr	r0, [pc, #40]	; (800b3c4 <memp_malloc+0x44>)
 800b39a:	f006 fdad 	bl	8011ef8 <iprintf>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e008      	b.n	800b3b4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	4a08      	ldr	r2, [pc, #32]	; (800b3c8 <memp_malloc+0x48>)
 800b3a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff ff9c 	bl	800b2e8 <do_memp_malloc_pool>
 800b3b0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	08013a08 	.word	0x08013a08
 800b3c0:	08013abc 	.word	0x08013abc
 800b3c4:	08013a80 	.word	0x08013a80
 800b3c8:	08015c50 	.word	0x08015c50

0800b3cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	f003 0303 	and.w	r3, r3, #3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d006      	beq.n	800b3ee <do_memp_free_pool+0x22>
 800b3e0:	4b0a      	ldr	r3, [pc, #40]	; (800b40c <do_memp_free_pool+0x40>)
 800b3e2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b3e6:	490a      	ldr	r1, [pc, #40]	; (800b410 <do_memp_free_pool+0x44>)
 800b3e8:	480a      	ldr	r0, [pc, #40]	; (800b414 <do_memp_free_pool+0x48>)
 800b3ea:	f006 fd85 	bl	8011ef8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b404:	bf00      	nop
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	08013a08 	.word	0x08013a08
 800b410:	08013adc 	.word	0x08013adc
 800b414:	08013a80 	.word	0x08013a80

0800b418 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d106      	bne.n	800b436 <memp_free_pool+0x1e>
 800b428:	4b0a      	ldr	r3, [pc, #40]	; (800b454 <memp_free_pool+0x3c>)
 800b42a:	f240 1295 	movw	r2, #405	; 0x195
 800b42e:	490a      	ldr	r1, [pc, #40]	; (800b458 <memp_free_pool+0x40>)
 800b430:	480a      	ldr	r0, [pc, #40]	; (800b45c <memp_free_pool+0x44>)
 800b432:	f006 fd61 	bl	8011ef8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d007      	beq.n	800b44c <memp_free_pool+0x34>
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d004      	beq.n	800b44c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7ff ffc1 	bl	800b3cc <do_memp_free_pool>
 800b44a:	e000      	b.n	800b44e <memp_free_pool+0x36>
    return;
 800b44c:	bf00      	nop
}
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	08013a08 	.word	0x08013a08
 800b458:	08013aa8 	.word	0x08013aa8
 800b45c:	08013a80 	.word	0x08013a80

0800b460 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	4603      	mov	r3, r0
 800b468:	6039      	str	r1, [r7, #0]
 800b46a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b46c:	79fb      	ldrb	r3, [r7, #7]
 800b46e:	2b08      	cmp	r3, #8
 800b470:	d907      	bls.n	800b482 <memp_free+0x22>
 800b472:	4b0c      	ldr	r3, [pc, #48]	; (800b4a4 <memp_free+0x44>)
 800b474:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b478:	490b      	ldr	r1, [pc, #44]	; (800b4a8 <memp_free+0x48>)
 800b47a:	480c      	ldr	r0, [pc, #48]	; (800b4ac <memp_free+0x4c>)
 800b47c:	f006 fd3c 	bl	8011ef8 <iprintf>
 800b480:	e00c      	b.n	800b49c <memp_free+0x3c>

  if (mem == NULL) {
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d008      	beq.n	800b49a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b488:	79fb      	ldrb	r3, [r7, #7]
 800b48a:	4a09      	ldr	r2, [pc, #36]	; (800b4b0 <memp_free+0x50>)
 800b48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff ff9a 	bl	800b3cc <do_memp_free_pool>
 800b498:	e000      	b.n	800b49c <memp_free+0x3c>
    return;
 800b49a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	08013a08 	.word	0x08013a08
 800b4a8:	08013afc 	.word	0x08013afc
 800b4ac:	08013a80 	.word	0x08013a80
 800b4b0:	08015c50 	.word	0x08015c50

0800b4b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b4b8:	bf00      	nop
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
	...

0800b4c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d108      	bne.n	800b4ea <netif_add+0x26>
 800b4d8:	4b57      	ldr	r3, [pc, #348]	; (800b638 <netif_add+0x174>)
 800b4da:	f240 1227 	movw	r2, #295	; 0x127
 800b4de:	4957      	ldr	r1, [pc, #348]	; (800b63c <netif_add+0x178>)
 800b4e0:	4857      	ldr	r0, [pc, #348]	; (800b640 <netif_add+0x17c>)
 800b4e2:	f006 fd09 	bl	8011ef8 <iprintf>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e0a2      	b.n	800b630 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d108      	bne.n	800b502 <netif_add+0x3e>
 800b4f0:	4b51      	ldr	r3, [pc, #324]	; (800b638 <netif_add+0x174>)
 800b4f2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b4f6:	4953      	ldr	r1, [pc, #332]	; (800b644 <netif_add+0x180>)
 800b4f8:	4851      	ldr	r0, [pc, #324]	; (800b640 <netif_add+0x17c>)
 800b4fa:	f006 fcfd 	bl	8011ef8 <iprintf>
 800b4fe:	2300      	movs	r3, #0
 800b500:	e096      	b.n	800b630 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d101      	bne.n	800b50c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b508:	4b4f      	ldr	r3, [pc, #316]	; (800b648 <netif_add+0x184>)
 800b50a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b512:	4b4d      	ldr	r3, [pc, #308]	; (800b648 <netif_add+0x184>)
 800b514:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d101      	bne.n	800b520 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b51c:	4b4a      	ldr	r3, [pc, #296]	; (800b648 <netif_add+0x184>)
 800b51e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	4a45      	ldr	r2, [pc, #276]	; (800b64c <netif_add+0x188>)
 800b536:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6a3a      	ldr	r2, [r7, #32]
 800b550:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b552:	4b3f      	ldr	r3, [pc, #252]	; (800b650 <netif_add+0x18c>)
 800b554:	781a      	ldrb	r2, [r3, #0]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b560:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 f913 	bl	800b794 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	4798      	blx	r3
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <netif_add+0xba>
    return NULL;
 800b57a:	2300      	movs	r3, #0
 800b57c:	e058      	b.n	800b630 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b584:	2bff      	cmp	r3, #255	; 0xff
 800b586:	d103      	bne.n	800b590 <netif_add+0xcc>
        netif->num = 0;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b594:	4b2f      	ldr	r3, [pc, #188]	; (800b654 <netif_add+0x190>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	617b      	str	r3, [r7, #20]
 800b59a:	e02b      	b.n	800b5f4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b59c:	697a      	ldr	r2, [r7, #20]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d106      	bne.n	800b5b2 <netif_add+0xee>
 800b5a4:	4b24      	ldr	r3, [pc, #144]	; (800b638 <netif_add+0x174>)
 800b5a6:	f240 128b 	movw	r2, #395	; 0x18b
 800b5aa:	492b      	ldr	r1, [pc, #172]	; (800b658 <netif_add+0x194>)
 800b5ac:	4824      	ldr	r0, [pc, #144]	; (800b640 <netif_add+0x17c>)
 800b5ae:	f006 fca3 	bl	8011ef8 <iprintf>
        num_netifs++;
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	2bff      	cmp	r3, #255	; 0xff
 800b5bc:	dd06      	ble.n	800b5cc <netif_add+0x108>
 800b5be:	4b1e      	ldr	r3, [pc, #120]	; (800b638 <netif_add+0x174>)
 800b5c0:	f240 128d 	movw	r2, #397	; 0x18d
 800b5c4:	4925      	ldr	r1, [pc, #148]	; (800b65c <netif_add+0x198>)
 800b5c6:	481e      	ldr	r0, [pc, #120]	; (800b640 <netif_add+0x17c>)
 800b5c8:	f006 fc96 	bl	8011ef8 <iprintf>
        if (netif2->num == netif->num) {
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d108      	bne.n	800b5ee <netif_add+0x12a>
          netif->num++;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	b2da      	uxtb	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b5ec:	e005      	b.n	800b5fa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1d0      	bne.n	800b59c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1be      	bne.n	800b57e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b606:	2bfe      	cmp	r3, #254	; 0xfe
 800b608:	d103      	bne.n	800b612 <netif_add+0x14e>
    netif_num = 0;
 800b60a:	4b11      	ldr	r3, [pc, #68]	; (800b650 <netif_add+0x18c>)
 800b60c:	2200      	movs	r2, #0
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	e006      	b.n	800b620 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b618:	3301      	adds	r3, #1
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	4b0c      	ldr	r3, [pc, #48]	; (800b650 <netif_add+0x18c>)
 800b61e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b620:	4b0c      	ldr	r3, [pc, #48]	; (800b654 <netif_add+0x190>)
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b628:	4a0a      	ldr	r2, [pc, #40]	; (800b654 <netif_add+0x190>)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b62e:	68fb      	ldr	r3, [r7, #12]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	08013b18 	.word	0x08013b18
 800b63c:	08013bcc 	.word	0x08013bcc
 800b640:	08013b88 	.word	0x08013b88
 800b644:	08013be8 	.word	0x08013be8
 800b648:	08015be0 	.word	0x08015be0
 800b64c:	0800ba6f 	.word	0x0800ba6f
 800b650:	24008150 	.word	0x24008150
 800b654:	24008148 	.word	0x24008148
 800b658:	08013c0c 	.word	0x08013c0c
 800b65c:	08013c20 	.word	0x08013c20

0800b660 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f002 fb23 	bl	800dcb8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f006 fbc5 	bl	8011e04 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b67a:	bf00      	nop
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d106      	bne.n	800b6a4 <netif_do_set_ipaddr+0x20>
 800b696:	4b1d      	ldr	r3, [pc, #116]	; (800b70c <netif_do_set_ipaddr+0x88>)
 800b698:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b69c:	491c      	ldr	r1, [pc, #112]	; (800b710 <netif_do_set_ipaddr+0x8c>)
 800b69e:	481d      	ldr	r0, [pc, #116]	; (800b714 <netif_do_set_ipaddr+0x90>)
 800b6a0:	f006 fc2a 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <netif_do_set_ipaddr+0x34>
 800b6aa:	4b18      	ldr	r3, [pc, #96]	; (800b70c <netif_do_set_ipaddr+0x88>)
 800b6ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b6b0:	4917      	ldr	r1, [pc, #92]	; (800b710 <netif_do_set_ipaddr+0x8c>)
 800b6b2:	4818      	ldr	r0, [pc, #96]	; (800b714 <netif_do_set_ipaddr+0x90>)
 800b6b4:	f006 fc20 	bl	8011ef8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	3304      	adds	r3, #4
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d01c      	beq.n	800b700 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	3304      	adds	r3, #4
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b6d6:	f107 0314 	add.w	r3, r7, #20
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7ff ffbf 	bl	800b660 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <netif_do_set_ipaddr+0x6a>
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	e000      	b.n	800b6f0 <netif_do_set_ipaddr+0x6c>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f000 f8d2 	bl	800b8a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e000      	b.n	800b702 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	08013b18 	.word	0x08013b18
 800b710:	08013c50 	.word	0x08013c50
 800b714:	08013b88 	.word	0x08013b88

0800b718 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	3308      	adds	r3, #8
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d00a      	beq.n	800b748 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <netif_do_set_netmask+0x26>
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	e000      	b.n	800b740 <netif_do_set_netmask+0x28>
 800b73e:	2300      	movs	r3, #0
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b744:	2301      	movs	r3, #1
 800b746:	e000      	b.n	800b74a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b756:	b480      	push	{r7}
 800b758:	b085      	sub	sp, #20
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	60f8      	str	r0, [r7, #12]
 800b75e:	60b9      	str	r1, [r7, #8]
 800b760:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	330c      	adds	r3, #12
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d00a      	beq.n	800b786 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d002      	beq.n	800b77c <netif_do_set_gw+0x26>
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	e000      	b.n	800b77e <netif_do_set_gw+0x28>
 800b77c:	2300      	movs	r3, #0
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b782:	2301      	movs	r3, #1
 800b784:	e000      	b.n	800b788 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b7b0:	4b1c      	ldr	r3, [pc, #112]	; (800b824 <netif_set_addr+0x90>)
 800b7b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b7ba:	4b1a      	ldr	r3, [pc, #104]	; (800b824 <netif_set_addr+0x90>)
 800b7bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b7c4:	4b17      	ldr	r3, [pc, #92]	; (800b824 <netif_set_addr+0x90>)
 800b7c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d003      	beq.n	800b7d6 <netif_set_addr+0x42>
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <netif_set_addr+0x46>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e000      	b.n	800b7dc <netif_set_addr+0x48>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d006      	beq.n	800b7f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b7e4:	f107 0310 	add.w	r3, r7, #16
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	68b9      	ldr	r1, [r7, #8]
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f7ff ff49 	bl	800b684 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b7f2:	69fa      	ldr	r2, [r7, #28]
 800b7f4:	6879      	ldr	r1, [r7, #4]
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f7ff ff8e 	bl	800b718 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b7fc:	69ba      	ldr	r2, [r7, #24]
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f7ff ffa8 	bl	800b756 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d106      	bne.n	800b81a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b80c:	f107 0310 	add.w	r3, r7, #16
 800b810:	461a      	mov	r2, r3
 800b812:	68b9      	ldr	r1, [r7, #8]
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7ff ff35 	bl	800b684 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b81a:	bf00      	nop
 800b81c:	3720      	adds	r7, #32
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	08015be0 	.word	0x08015be0

0800b828 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b830:	4a04      	ldr	r2, [pc, #16]	; (800b844 <netif_set_default+0x1c>)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b836:	bf00      	nop
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	2400814c 	.word	0x2400814c

0800b848 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d107      	bne.n	800b866 <netif_set_up+0x1e>
 800b856:	4b0f      	ldr	r3, [pc, #60]	; (800b894 <netif_set_up+0x4c>)
 800b858:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b85c:	490e      	ldr	r1, [pc, #56]	; (800b898 <netif_set_up+0x50>)
 800b85e:	480f      	ldr	r0, [pc, #60]	; (800b89c <netif_set_up+0x54>)
 800b860:	f006 fb4a 	bl	8011ef8 <iprintf>
 800b864:	e013      	b.n	800b88e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b86c:	f003 0301 	and.w	r3, r3, #1
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10c      	bne.n	800b88e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b87a:	f043 0301 	orr.w	r3, r3, #1
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b886:	2103      	movs	r1, #3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f809 	bl	800b8a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	08013b18 	.word	0x08013b18
 800b898:	08013cc0 	.word	0x08013cc0
 800b89c:	08013b88 	.word	0x08013b88

0800b8a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <netif_issue_reports+0x20>
 800b8b2:	4b18      	ldr	r3, [pc, #96]	; (800b914 <netif_issue_reports+0x74>)
 800b8b4:	f240 326d 	movw	r2, #877	; 0x36d
 800b8b8:	4917      	ldr	r1, [pc, #92]	; (800b918 <netif_issue_reports+0x78>)
 800b8ba:	4818      	ldr	r0, [pc, #96]	; (800b91c <netif_issue_reports+0x7c>)
 800b8bc:	f006 fb1c 	bl	8011ef8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8c6:	f003 0304 	and.w	r3, r3, #4
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d01e      	beq.n	800b90c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d017      	beq.n	800b90c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b8dc:	78fb      	ldrb	r3, [r7, #3]
 800b8de:	f003 0301 	and.w	r3, r3, #1
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d013      	beq.n	800b90e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00e      	beq.n	800b90e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8f6:	f003 0308 	and.w	r3, r3, #8
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d007      	beq.n	800b90e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3304      	adds	r3, #4
 800b902:	4619      	mov	r1, r3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7fd fc87 	bl	8009218 <etharp_request>
 800b90a:	e000      	b.n	800b90e <netif_issue_reports+0x6e>
    return;
 800b90c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	08013b18 	.word	0x08013b18
 800b918:	08013cdc 	.word	0x08013cdc
 800b91c:	08013b88 	.word	0x08013b88

0800b920 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d107      	bne.n	800b93e <netif_set_down+0x1e>
 800b92e:	4b12      	ldr	r3, [pc, #72]	; (800b978 <netif_set_down+0x58>)
 800b930:	f240 329b 	movw	r2, #923	; 0x39b
 800b934:	4911      	ldr	r1, [pc, #68]	; (800b97c <netif_set_down+0x5c>)
 800b936:	4812      	ldr	r0, [pc, #72]	; (800b980 <netif_set_down+0x60>)
 800b938:	f006 fade 	bl	8011ef8 <iprintf>
 800b93c:	e019      	b.n	800b972 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b944:	f003 0301 	and.w	r3, r3, #1
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d012      	beq.n	800b972 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b952:	f023 0301 	bic.w	r3, r3, #1
 800b956:	b2da      	uxtb	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b964:	f003 0308 	and.w	r3, r3, #8
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f7fd f811 	bl	8008994 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	08013b18 	.word	0x08013b18
 800b97c:	08013d00 	.word	0x08013d00
 800b980:	08013b88 	.word	0x08013b88

0800b984 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d107      	bne.n	800b9a2 <netif_set_link_up+0x1e>
 800b992:	4b13      	ldr	r3, [pc, #76]	; (800b9e0 <netif_set_link_up+0x5c>)
 800b994:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b998:	4912      	ldr	r1, [pc, #72]	; (800b9e4 <netif_set_link_up+0x60>)
 800b99a:	4813      	ldr	r0, [pc, #76]	; (800b9e8 <netif_set_link_up+0x64>)
 800b99c:	f006 faac 	bl	8011ef8 <iprintf>
 800b9a0:	e01b      	b.n	800b9da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9a8:	f003 0304 	and.w	r3, r3, #4
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d114      	bne.n	800b9da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9b6:	f043 0304 	orr.w	r3, r3, #4
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b9c2:	2103      	movs	r1, #3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff ff6b 	bl	800b8a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <netif_set_link_up+0x56>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	08013b18 	.word	0x08013b18
 800b9e4:	08013d20 	.word	0x08013d20
 800b9e8:	08013b88 	.word	0x08013b88

0800b9ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d107      	bne.n	800ba0a <netif_set_link_down+0x1e>
 800b9fa:	4b11      	ldr	r3, [pc, #68]	; (800ba40 <netif_set_link_down+0x54>)
 800b9fc:	f240 4206 	movw	r2, #1030	; 0x406
 800ba00:	4910      	ldr	r1, [pc, #64]	; (800ba44 <netif_set_link_down+0x58>)
 800ba02:	4811      	ldr	r0, [pc, #68]	; (800ba48 <netif_set_link_down+0x5c>)
 800ba04:	f006 fa78 	bl	8011ef8 <iprintf>
 800ba08:	e017      	b.n	800ba3a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba10:	f003 0304 	and.w	r3, r3, #4
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d010      	beq.n	800ba3a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba1e:	f023 0304 	bic.w	r3, r3, #4
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	69db      	ldr	r3, [r3, #28]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <netif_set_link_down+0x4e>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	69db      	ldr	r3, [r3, #28]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	08013b18 	.word	0x08013b18
 800ba44:	08013d44 	.word	0x08013d44
 800ba48:	08013b88 	.word	0x08013b88

0800ba4c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d002      	beq.n	800ba62 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	61da      	str	r2, [r3, #28]
  }
}
 800ba62:	bf00      	nop
 800ba64:	370c      	adds	r7, #12
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b085      	sub	sp, #20
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	60f8      	str	r0, [r7, #12]
 800ba76:	60b9      	str	r1, [r7, #8]
 800ba78:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ba7a:	f06f 030b 	mvn.w	r3, #11
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3714      	adds	r7, #20
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr
	...

0800ba8c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	4603      	mov	r3, r0
 800ba94:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ba96:	79fb      	ldrb	r3, [r7, #7]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d013      	beq.n	800bac4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ba9c:	4b0d      	ldr	r3, [pc, #52]	; (800bad4 <netif_get_by_index+0x48>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	60fb      	str	r3, [r7, #12]
 800baa2:	e00c      	b.n	800babe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800baaa:	3301      	adds	r3, #1
 800baac:	b2db      	uxtb	r3, r3
 800baae:	79fa      	ldrb	r2, [r7, #7]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d101      	bne.n	800bab8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	e006      	b.n	800bac6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	60fb      	str	r3, [r7, #12]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1ef      	bne.n	800baa4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	24008148 	.word	0x24008148

0800bad8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bad8:	b480      	push	{r7}
 800bada:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800badc:	4b03      	ldr	r3, [pc, #12]	; (800baec <pbuf_pool_is_empty+0x14>)
 800bade:	2201      	movs	r2, #1
 800bae0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bae2:	bf00      	nop
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	24008151 	.word	0x24008151

0800baf0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	4611      	mov	r1, r2
 800bafc:	461a      	mov	r2, r3
 800bafe:	460b      	mov	r3, r1
 800bb00:	80fb      	strh	r3, [r7, #6]
 800bb02:	4613      	mov	r3, r2
 800bb04:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	88fa      	ldrh	r2, [r7, #6]
 800bb16:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	88ba      	ldrh	r2, [r7, #4]
 800bb1c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bb1e:	8b3b      	ldrh	r3, [r7, #24]
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	7f3a      	ldrb	r2, [r7, #28]
 800bb2a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	73da      	strb	r2, [r3, #15]
}
 800bb38:	bf00      	nop
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08c      	sub	sp, #48	; 0x30
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	71fb      	strb	r3, [r7, #7]
 800bb4e:	460b      	mov	r3, r1
 800bb50:	80bb      	strh	r3, [r7, #4]
 800bb52:	4613      	mov	r3, r2
 800bb54:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bb5a:	887b      	ldrh	r3, [r7, #2]
 800bb5c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bb60:	d07f      	beq.n	800bc62 <pbuf_alloc+0x11e>
 800bb62:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bb66:	f300 80c8 	bgt.w	800bcfa <pbuf_alloc+0x1b6>
 800bb6a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bb6e:	d010      	beq.n	800bb92 <pbuf_alloc+0x4e>
 800bb70:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bb74:	f300 80c1 	bgt.w	800bcfa <pbuf_alloc+0x1b6>
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d002      	beq.n	800bb82 <pbuf_alloc+0x3e>
 800bb7c:	2b41      	cmp	r3, #65	; 0x41
 800bb7e:	f040 80bc 	bne.w	800bcfa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bb82:	887a      	ldrh	r2, [r7, #2]
 800bb84:	88bb      	ldrh	r3, [r7, #4]
 800bb86:	4619      	mov	r1, r3
 800bb88:	2000      	movs	r0, #0
 800bb8a:	f000 f8d1 	bl	800bd30 <pbuf_alloc_reference>
 800bb8e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bb90:	e0bd      	b.n	800bd0e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bb92:	2300      	movs	r3, #0
 800bb94:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bb9a:	88bb      	ldrh	r3, [r7, #4]
 800bb9c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bb9e:	2008      	movs	r0, #8
 800bba0:	f7ff fbee 	bl	800b380 <memp_malloc>
 800bba4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d109      	bne.n	800bbc0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bbac:	f7ff ff94 	bl	800bad8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d002      	beq.n	800bbbc <pbuf_alloc+0x78>
            pbuf_free(p);
 800bbb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbb8:	f000 faa8 	bl	800c10c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	e0a7      	b.n	800bd10 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bbc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbc2:	3303      	adds	r3, #3
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	f023 0303 	bic.w	r3, r3, #3
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	8b7a      	ldrh	r2, [r7, #26]
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	bf28      	it	cs
 800bbd8:	4613      	movcs	r3, r2
 800bbda:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bbdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbde:	3310      	adds	r3, #16
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	3303      	adds	r3, #3
 800bbe6:	f023 0303 	bic.w	r3, r3, #3
 800bbea:	4618      	mov	r0, r3
 800bbec:	89f9      	ldrh	r1, [r7, #14]
 800bbee:	8b7a      	ldrh	r2, [r7, #26]
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	9301      	str	r3, [sp, #4]
 800bbf4:	887b      	ldrh	r3, [r7, #2]
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	4601      	mov	r1, r0
 800bbfc:	6938      	ldr	r0, [r7, #16]
 800bbfe:	f7ff ff77 	bl	800baf0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	f003 0303 	and.w	r3, r3, #3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d006      	beq.n	800bc1c <pbuf_alloc+0xd8>
 800bc0e:	4b42      	ldr	r3, [pc, #264]	; (800bd18 <pbuf_alloc+0x1d4>)
 800bc10:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc14:	4941      	ldr	r1, [pc, #260]	; (800bd1c <pbuf_alloc+0x1d8>)
 800bc16:	4842      	ldr	r0, [pc, #264]	; (800bd20 <pbuf_alloc+0x1dc>)
 800bc18:	f006 f96e 	bl	8011ef8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bc1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc1e:	3303      	adds	r3, #3
 800bc20:	f023 0303 	bic.w	r3, r3, #3
 800bc24:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bc28:	d106      	bne.n	800bc38 <pbuf_alloc+0xf4>
 800bc2a:	4b3b      	ldr	r3, [pc, #236]	; (800bd18 <pbuf_alloc+0x1d4>)
 800bc2c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bc30:	493c      	ldr	r1, [pc, #240]	; (800bd24 <pbuf_alloc+0x1e0>)
 800bc32:	483b      	ldr	r0, [pc, #236]	; (800bd20 <pbuf_alloc+0x1dc>)
 800bc34:	f006 f960 	bl	8011ef8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d102      	bne.n	800bc44 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
 800bc42:	e002      	b.n	800bc4a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	693a      	ldr	r2, [r7, #16]
 800bc48:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bc4e:	8b7a      	ldrh	r2, [r7, #26]
 800bc50:	89fb      	ldrh	r3, [r7, #14]
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bc5a:	8b7b      	ldrh	r3, [r7, #26]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d19e      	bne.n	800bb9e <pbuf_alloc+0x5a>
      break;
 800bc60:	e055      	b.n	800bd0e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bc62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc64:	3303      	adds	r3, #3
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	f023 0303 	bic.w	r3, r3, #3
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	88bb      	ldrh	r3, [r7, #4]
 800bc70:	3303      	adds	r3, #3
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	f023 0303 	bic.w	r3, r3, #3
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	4413      	add	r3, r2
 800bc7c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bc7e:	8b3b      	ldrh	r3, [r7, #24]
 800bc80:	3310      	adds	r3, #16
 800bc82:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bc84:	8b3a      	ldrh	r2, [r7, #24]
 800bc86:	88bb      	ldrh	r3, [r7, #4]
 800bc88:	3303      	adds	r3, #3
 800bc8a:	f023 0303 	bic.w	r3, r3, #3
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d306      	bcc.n	800bca0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bc92:	8afa      	ldrh	r2, [r7, #22]
 800bc94:	88bb      	ldrh	r3, [r7, #4]
 800bc96:	3303      	adds	r3, #3
 800bc98:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d201      	bcs.n	800bca4 <pbuf_alloc+0x160>
        return NULL;
 800bca0:	2300      	movs	r3, #0
 800bca2:	e035      	b.n	800bd10 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bca4:	8afb      	ldrh	r3, [r7, #22]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7ff f9da 	bl	800b060 <mem_malloc>
 800bcac:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d101      	bne.n	800bcb8 <pbuf_alloc+0x174>
        return NULL;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e02b      	b.n	800bd10 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bcb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcba:	3310      	adds	r3, #16
 800bcbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcbe:	4413      	add	r3, r2
 800bcc0:	3303      	adds	r3, #3
 800bcc2:	f023 0303 	bic.w	r3, r3, #3
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	88b9      	ldrh	r1, [r7, #4]
 800bcca:	88ba      	ldrh	r2, [r7, #4]
 800bccc:	2300      	movs	r3, #0
 800bcce:	9301      	str	r3, [sp, #4]
 800bcd0:	887b      	ldrh	r3, [r7, #2]
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4601      	mov	r1, r0
 800bcd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcda:	f7ff ff09 	bl	800baf0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	f003 0303 	and.w	r3, r3, #3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d010      	beq.n	800bd0c <pbuf_alloc+0x1c8>
 800bcea:	4b0b      	ldr	r3, [pc, #44]	; (800bd18 <pbuf_alloc+0x1d4>)
 800bcec:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bcf0:	490d      	ldr	r1, [pc, #52]	; (800bd28 <pbuf_alloc+0x1e4>)
 800bcf2:	480b      	ldr	r0, [pc, #44]	; (800bd20 <pbuf_alloc+0x1dc>)
 800bcf4:	f006 f900 	bl	8011ef8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bcf8:	e008      	b.n	800bd0c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bcfa:	4b07      	ldr	r3, [pc, #28]	; (800bd18 <pbuf_alloc+0x1d4>)
 800bcfc:	f240 1227 	movw	r2, #295	; 0x127
 800bd00:	490a      	ldr	r1, [pc, #40]	; (800bd2c <pbuf_alloc+0x1e8>)
 800bd02:	4807      	ldr	r0, [pc, #28]	; (800bd20 <pbuf_alloc+0x1dc>)
 800bd04:	f006 f8f8 	bl	8011ef8 <iprintf>
      return NULL;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	e001      	b.n	800bd10 <pbuf_alloc+0x1cc>
      break;
 800bd0c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3728      	adds	r7, #40	; 0x28
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	08013d68 	.word	0x08013d68
 800bd1c:	08013dbc 	.word	0x08013dbc
 800bd20:	08013dec 	.word	0x08013dec
 800bd24:	08013e14 	.word	0x08013e14
 800bd28:	08013e48 	.word	0x08013e48
 800bd2c:	08013e74 	.word	0x08013e74

0800bd30 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	807b      	strh	r3, [r7, #2]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bd40:	883b      	ldrh	r3, [r7, #0]
 800bd42:	2b41      	cmp	r3, #65	; 0x41
 800bd44:	d009      	beq.n	800bd5a <pbuf_alloc_reference+0x2a>
 800bd46:	883b      	ldrh	r3, [r7, #0]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d006      	beq.n	800bd5a <pbuf_alloc_reference+0x2a>
 800bd4c:	4b0f      	ldr	r3, [pc, #60]	; (800bd8c <pbuf_alloc_reference+0x5c>)
 800bd4e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bd52:	490f      	ldr	r1, [pc, #60]	; (800bd90 <pbuf_alloc_reference+0x60>)
 800bd54:	480f      	ldr	r0, [pc, #60]	; (800bd94 <pbuf_alloc_reference+0x64>)
 800bd56:	f006 f8cf 	bl	8011ef8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bd5a:	2007      	movs	r0, #7
 800bd5c:	f7ff fb10 	bl	800b380 <memp_malloc>
 800bd60:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d101      	bne.n	800bd6c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e00b      	b.n	800bd84 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bd6c:	8879      	ldrh	r1, [r7, #2]
 800bd6e:	887a      	ldrh	r2, [r7, #2]
 800bd70:	2300      	movs	r3, #0
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	883b      	ldrh	r3, [r7, #0]
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	6879      	ldr	r1, [r7, #4]
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f7ff feb7 	bl	800baf0 <pbuf_init_alloced_pbuf>
  return p;
 800bd82:	68fb      	ldr	r3, [r7, #12]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	08013d68 	.word	0x08013d68
 800bd90:	08013e90 	.word	0x08013e90
 800bd94:	08013dec 	.word	0x08013dec

0800bd98 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af02      	add	r7, sp, #8
 800bd9e:	607b      	str	r3, [r7, #4]
 800bda0:	4603      	mov	r3, r0
 800bda2:	73fb      	strb	r3, [r7, #15]
 800bda4:	460b      	mov	r3, r1
 800bda6:	81bb      	strh	r3, [r7, #12]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bdb0:	8a7b      	ldrh	r3, [r7, #18]
 800bdb2:	3303      	adds	r3, #3
 800bdb4:	f023 0203 	bic.w	r2, r3, #3
 800bdb8:	89bb      	ldrh	r3, [r7, #12]
 800bdba:	441a      	add	r2, r3
 800bdbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d901      	bls.n	800bdc6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e018      	b.n	800bdf8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bdc6:	6a3b      	ldr	r3, [r7, #32]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d007      	beq.n	800bddc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bdcc:	8a7b      	ldrh	r3, [r7, #18]
 800bdce:	3303      	adds	r3, #3
 800bdd0:	f023 0303 	bic.w	r3, r3, #3
 800bdd4:	6a3a      	ldr	r2, [r7, #32]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	617b      	str	r3, [r7, #20]
 800bdda:	e001      	b.n	800bde0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bddc:	2300      	movs	r3, #0
 800bdde:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	89b9      	ldrh	r1, [r7, #12]
 800bde4:	89ba      	ldrh	r2, [r7, #12]
 800bde6:	2302      	movs	r3, #2
 800bde8:	9301      	str	r3, [sp, #4]
 800bdea:	897b      	ldrh	r3, [r7, #10]
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	6979      	ldr	r1, [r7, #20]
 800bdf2:	f7ff fe7d 	bl	800baf0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bdf6:	687b      	ldr	r3, [r7, #4]
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	460b      	mov	r3, r1
 800be0a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d106      	bne.n	800be20 <pbuf_realloc+0x20>
 800be12:	4b3a      	ldr	r3, [pc, #232]	; (800befc <pbuf_realloc+0xfc>)
 800be14:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800be18:	4939      	ldr	r1, [pc, #228]	; (800bf00 <pbuf_realloc+0x100>)
 800be1a:	483a      	ldr	r0, [pc, #232]	; (800bf04 <pbuf_realloc+0x104>)
 800be1c:	f006 f86c 	bl	8011ef8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	891b      	ldrh	r3, [r3, #8]
 800be24:	887a      	ldrh	r2, [r7, #2]
 800be26:	429a      	cmp	r2, r3
 800be28:	d263      	bcs.n	800bef2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	891a      	ldrh	r2, [r3, #8]
 800be2e:	887b      	ldrh	r3, [r7, #2]
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800be34:	887b      	ldrh	r3, [r7, #2]
 800be36:	817b      	strh	r3, [r7, #10]
  q = p;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800be3c:	e018      	b.n	800be70 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	895b      	ldrh	r3, [r3, #10]
 800be42:	897a      	ldrh	r2, [r7, #10]
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	891a      	ldrh	r2, [r3, #8]
 800be4c:	893b      	ldrh	r3, [r7, #8]
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	b29a      	uxth	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d106      	bne.n	800be70 <pbuf_realloc+0x70>
 800be62:	4b26      	ldr	r3, [pc, #152]	; (800befc <pbuf_realloc+0xfc>)
 800be64:	f240 12af 	movw	r2, #431	; 0x1af
 800be68:	4927      	ldr	r1, [pc, #156]	; (800bf08 <pbuf_realloc+0x108>)
 800be6a:	4826      	ldr	r0, [pc, #152]	; (800bf04 <pbuf_realloc+0x104>)
 800be6c:	f006 f844 	bl	8011ef8 <iprintf>
  while (rem_len > q->len) {
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	895b      	ldrh	r3, [r3, #10]
 800be74:	897a      	ldrh	r2, [r7, #10]
 800be76:	429a      	cmp	r2, r3
 800be78:	d8e1      	bhi.n	800be3e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	7b1b      	ldrb	r3, [r3, #12]
 800be7e:	f003 030f 	and.w	r3, r3, #15
 800be82:	2b00      	cmp	r3, #0
 800be84:	d121      	bne.n	800beca <pbuf_realloc+0xca>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	895b      	ldrh	r3, [r3, #10]
 800be8a:	897a      	ldrh	r2, [r7, #10]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d01c      	beq.n	800beca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	7b5b      	ldrb	r3, [r3, #13]
 800be94:	f003 0302 	and.w	r3, r3, #2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d116      	bne.n	800beca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	897b      	ldrh	r3, [r7, #10]
 800bea8:	4413      	add	r3, r2
 800beaa:	b29b      	uxth	r3, r3
 800beac:	4619      	mov	r1, r3
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f7fe ffda 	bl	800ae68 <mem_trim>
 800beb4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d106      	bne.n	800beca <pbuf_realloc+0xca>
 800bebc:	4b0f      	ldr	r3, [pc, #60]	; (800befc <pbuf_realloc+0xfc>)
 800bebe:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bec2:	4912      	ldr	r1, [pc, #72]	; (800bf0c <pbuf_realloc+0x10c>)
 800bec4:	480f      	ldr	r0, [pc, #60]	; (800bf04 <pbuf_realloc+0x104>)
 800bec6:	f006 f817 	bl	8011ef8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	897a      	ldrh	r2, [r7, #10]
 800bece:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	895a      	ldrh	r2, [r3, #10]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d004      	beq.n	800beea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f000 f911 	bl	800c10c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2200      	movs	r2, #0
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	e000      	b.n	800bef4 <pbuf_realloc+0xf4>
    return;
 800bef2:	bf00      	nop

}
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	08013d68 	.word	0x08013d68
 800bf00:	08013ea4 	.word	0x08013ea4
 800bf04:	08013dec 	.word	0x08013dec
 800bf08:	08013ebc 	.word	0x08013ebc
 800bf0c:	08013ed4 	.word	0x08013ed4

0800bf10 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d106      	bne.n	800bf32 <pbuf_add_header_impl+0x22>
 800bf24:	4b2b      	ldr	r3, [pc, #172]	; (800bfd4 <pbuf_add_header_impl+0xc4>)
 800bf26:	f240 12df 	movw	r2, #479	; 0x1df
 800bf2a:	492b      	ldr	r1, [pc, #172]	; (800bfd8 <pbuf_add_header_impl+0xc8>)
 800bf2c:	482b      	ldr	r0, [pc, #172]	; (800bfdc <pbuf_add_header_impl+0xcc>)
 800bf2e:	f005 ffe3 	bl	8011ef8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d003      	beq.n	800bf40 <pbuf_add_header_impl+0x30>
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf3e:	d301      	bcc.n	800bf44 <pbuf_add_header_impl+0x34>
    return 1;
 800bf40:	2301      	movs	r3, #1
 800bf42:	e043      	b.n	800bfcc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d101      	bne.n	800bf4e <pbuf_add_header_impl+0x3e>
    return 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	e03e      	b.n	800bfcc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	891a      	ldrh	r2, [r3, #8]
 800bf56:	8a7b      	ldrh	r3, [r7, #18]
 800bf58:	4413      	add	r3, r2
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	8a7a      	ldrh	r2, [r7, #18]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d901      	bls.n	800bf66 <pbuf_add_header_impl+0x56>
    return 1;
 800bf62:	2301      	movs	r3, #1
 800bf64:	e032      	b.n	800bfcc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	7b1b      	ldrb	r3, [r3, #12]
 800bf6a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bf6c:	8a3b      	ldrh	r3, [r7, #16]
 800bf6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00c      	beq.n	800bf90 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	685a      	ldr	r2, [r3, #4]
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	425b      	negs	r3, r3
 800bf7e:	4413      	add	r3, r2
 800bf80:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	3310      	adds	r3, #16
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d20d      	bcs.n	800bfa8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e01d      	b.n	800bfcc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d006      	beq.n	800bfa4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	425b      	negs	r3, r3
 800bf9e:	4413      	add	r3, r2
 800bfa0:	617b      	str	r3, [r7, #20]
 800bfa2:	e001      	b.n	800bfa8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e011      	b.n	800bfcc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	895a      	ldrh	r2, [r3, #10]
 800bfb2:	8a7b      	ldrh	r3, [r7, #18]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	891a      	ldrh	r2, [r3, #8]
 800bfc0:	8a7b      	ldrh	r3, [r7, #18]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	811a      	strh	r2, [r3, #8]


  return 0;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	08013d68 	.word	0x08013d68
 800bfd8:	08013ef0 	.word	0x08013ef0
 800bfdc:	08013dec 	.word	0x08013dec

0800bfe0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bfea:	2200      	movs	r2, #0
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7ff ff8e 	bl	800bf10 <pbuf_add_header_impl>
 800bff4:	4603      	mov	r3, r0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
	...

0800c000 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d106      	bne.n	800c01e <pbuf_remove_header+0x1e>
 800c010:	4b20      	ldr	r3, [pc, #128]	; (800c094 <pbuf_remove_header+0x94>)
 800c012:	f240 224b 	movw	r2, #587	; 0x24b
 800c016:	4920      	ldr	r1, [pc, #128]	; (800c098 <pbuf_remove_header+0x98>)
 800c018:	4820      	ldr	r0, [pc, #128]	; (800c09c <pbuf_remove_header+0x9c>)
 800c01a:	f005 ff6d 	bl	8011ef8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d003      	beq.n	800c02c <pbuf_remove_header+0x2c>
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c02a:	d301      	bcc.n	800c030 <pbuf_remove_header+0x30>
    return 1;
 800c02c:	2301      	movs	r3, #1
 800c02e:	e02c      	b.n	800c08a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d101      	bne.n	800c03a <pbuf_remove_header+0x3a>
    return 0;
 800c036:	2300      	movs	r3, #0
 800c038:	e027      	b.n	800c08a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	895b      	ldrh	r3, [r3, #10]
 800c042:	89fa      	ldrh	r2, [r7, #14]
 800c044:	429a      	cmp	r2, r3
 800c046:	d908      	bls.n	800c05a <pbuf_remove_header+0x5a>
 800c048:	4b12      	ldr	r3, [pc, #72]	; (800c094 <pbuf_remove_header+0x94>)
 800c04a:	f240 2255 	movw	r2, #597	; 0x255
 800c04e:	4914      	ldr	r1, [pc, #80]	; (800c0a0 <pbuf_remove_header+0xa0>)
 800c050:	4812      	ldr	r0, [pc, #72]	; (800c09c <pbuf_remove_header+0x9c>)
 800c052:	f005 ff51 	bl	8011ef8 <iprintf>
 800c056:	2301      	movs	r3, #1
 800c058:	e017      	b.n	800c08a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	441a      	add	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	895a      	ldrh	r2, [r3, #10]
 800c070:	89fb      	ldrh	r3, [r7, #14]
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	b29a      	uxth	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	891a      	ldrh	r2, [r3, #8]
 800c07e:	89fb      	ldrh	r3, [r7, #14]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	b29a      	uxth	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	08013d68 	.word	0x08013d68
 800c098:	08013ef0 	.word	0x08013ef0
 800c09c:	08013dec 	.word	0x08013dec
 800c0a0:	08013efc 	.word	0x08013efc

0800c0a4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	807b      	strh	r3, [r7, #2]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c0b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	da08      	bge.n	800c0ce <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c0bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0c0:	425b      	negs	r3, r3
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7ff ff9b 	bl	800c000 <pbuf_remove_header>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	e007      	b.n	800c0de <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c0ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0d2:	787a      	ldrb	r2, [r7, #1]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff ff1a 	bl	800bf10 <pbuf_add_header_impl>
 800c0dc:	4603      	mov	r3, r0
  }
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b082      	sub	sp, #8
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c0f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f7ff ffd2 	bl	800c0a4 <pbuf_header_impl>
 800c100:	4603      	mov	r3, r0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
	...

0800c10c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b086      	sub	sp, #24
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10b      	bne.n	800c132 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d106      	bne.n	800c12e <pbuf_free+0x22>
 800c120:	4b38      	ldr	r3, [pc, #224]	; (800c204 <pbuf_free+0xf8>)
 800c122:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c126:	4938      	ldr	r1, [pc, #224]	; (800c208 <pbuf_free+0xfc>)
 800c128:	4838      	ldr	r0, [pc, #224]	; (800c20c <pbuf_free+0x100>)
 800c12a:	f005 fee5 	bl	8011ef8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c12e:	2300      	movs	r3, #0
 800c130:	e063      	b.n	800c1fa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c132:	2300      	movs	r3, #0
 800c134:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c136:	e05c      	b.n	800c1f2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	7b9b      	ldrb	r3, [r3, #14]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d106      	bne.n	800c14e <pbuf_free+0x42>
 800c140:	4b30      	ldr	r3, [pc, #192]	; (800c204 <pbuf_free+0xf8>)
 800c142:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c146:	4932      	ldr	r1, [pc, #200]	; (800c210 <pbuf_free+0x104>)
 800c148:	4830      	ldr	r0, [pc, #192]	; (800c20c <pbuf_free+0x100>)
 800c14a:	f005 fed5 	bl	8011ef8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	7b9b      	ldrb	r3, [r3, #14]
 800c152:	3b01      	subs	r3, #1
 800c154:	b2da      	uxtb	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	739a      	strb	r2, [r3, #14]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	7b9b      	ldrb	r3, [r3, #14]
 800c15e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c160:	7dbb      	ldrb	r3, [r7, #22]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d143      	bne.n	800c1ee <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	7b1b      	ldrb	r3, [r3, #12]
 800c170:	f003 030f 	and.w	r3, r3, #15
 800c174:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	7b5b      	ldrb	r3, [r3, #13]
 800c17a:	f003 0302 	and.w	r3, r3, #2
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d011      	beq.n	800c1a6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <pbuf_free+0x90>
 800c18e:	4b1d      	ldr	r3, [pc, #116]	; (800c204 <pbuf_free+0xf8>)
 800c190:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c194:	491f      	ldr	r1, [pc, #124]	; (800c214 <pbuf_free+0x108>)
 800c196:	481d      	ldr	r0, [pc, #116]	; (800c20c <pbuf_free+0x100>)
 800c198:	f005 feae 	bl	8011ef8 <iprintf>
        pc->custom_free_function(p);
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	4798      	blx	r3
 800c1a4:	e01d      	b.n	800c1e2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	d104      	bne.n	800c1b6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c1ac:	6879      	ldr	r1, [r7, #4]
 800c1ae:	2008      	movs	r0, #8
 800c1b0:	f7ff f956 	bl	800b460 <memp_free>
 800c1b4:	e015      	b.n	800c1e2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d104      	bne.n	800c1c6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c1bc:	6879      	ldr	r1, [r7, #4]
 800c1be:	2007      	movs	r0, #7
 800c1c0:	f7ff f94e 	bl	800b460 <memp_free>
 800c1c4:	e00d      	b.n	800c1e2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d103      	bne.n	800c1d4 <pbuf_free+0xc8>
          mem_free(p);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7fe fde1 	bl	800ad94 <mem_free>
 800c1d2:	e006      	b.n	800c1e2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c1d4:	4b0b      	ldr	r3, [pc, #44]	; (800c204 <pbuf_free+0xf8>)
 800c1d6:	f240 320f 	movw	r2, #783	; 0x30f
 800c1da:	490f      	ldr	r1, [pc, #60]	; (800c218 <pbuf_free+0x10c>)
 800c1dc:	480b      	ldr	r0, [pc, #44]	; (800c20c <pbuf_free+0x100>)
 800c1de:	f005 fe8b 	bl	8011ef8 <iprintf>
        }
      }
      count++;
 800c1e2:	7dfb      	ldrb	r3, [r7, #23]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	607b      	str	r3, [r7, #4]
 800c1ec:	e001      	b.n	800c1f2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d19f      	bne.n	800c138 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3718      	adds	r7, #24
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	08013d68 	.word	0x08013d68
 800c208:	08013ef0 	.word	0x08013ef0
 800c20c:	08013dec 	.word	0x08013dec
 800c210:	08013f1c 	.word	0x08013f1c
 800c214:	08013f34 	.word	0x08013f34
 800c218:	08013f58 	.word	0x08013f58

0800c21c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c228:	e005      	b.n	800c236 <pbuf_clen+0x1a>
    ++len;
 800c22a:	89fb      	ldrh	r3, [r7, #14]
 800c22c:	3301      	adds	r3, #1
 800c22e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1f6      	bne.n	800c22a <pbuf_clen+0xe>
  }
  return len;
 800c23c:	89fb      	ldrh	r3, [r7, #14]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
	...

0800c24c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d010      	beq.n	800c27c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	7b9b      	ldrb	r3, [r3, #14]
 800c25e:	3301      	adds	r3, #1
 800c260:	b2da      	uxtb	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	7b9b      	ldrb	r3, [r3, #14]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d106      	bne.n	800c27c <pbuf_ref+0x30>
 800c26e:	4b05      	ldr	r3, [pc, #20]	; (800c284 <pbuf_ref+0x38>)
 800c270:	f240 3242 	movw	r2, #834	; 0x342
 800c274:	4904      	ldr	r1, [pc, #16]	; (800c288 <pbuf_ref+0x3c>)
 800c276:	4805      	ldr	r0, [pc, #20]	; (800c28c <pbuf_ref+0x40>)
 800c278:	f005 fe3e 	bl	8011ef8 <iprintf>
  }
}
 800c27c:	bf00      	nop
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	08013d68 	.word	0x08013d68
 800c288:	08013f6c 	.word	0x08013f6c
 800c28c:	08013dec 	.word	0x08013dec

0800c290 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <pbuf_cat+0x16>
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d107      	bne.n	800c2b6 <pbuf_cat+0x26>
 800c2a6:	4b20      	ldr	r3, [pc, #128]	; (800c328 <pbuf_cat+0x98>)
 800c2a8:	f240 3259 	movw	r2, #857	; 0x359
 800c2ac:	491f      	ldr	r1, [pc, #124]	; (800c32c <pbuf_cat+0x9c>)
 800c2ae:	4820      	ldr	r0, [pc, #128]	; (800c330 <pbuf_cat+0xa0>)
 800c2b0:	f005 fe22 	bl	8011ef8 <iprintf>
 800c2b4:	e034      	b.n	800c320 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	60fb      	str	r3, [r7, #12]
 800c2ba:	e00a      	b.n	800c2d2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	891a      	ldrh	r2, [r3, #8]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	891b      	ldrh	r3, [r3, #8]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	60fb      	str	r3, [r7, #12]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1f0      	bne.n	800c2bc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	891a      	ldrh	r2, [r3, #8]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	895b      	ldrh	r3, [r3, #10]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d006      	beq.n	800c2f4 <pbuf_cat+0x64>
 800c2e6:	4b10      	ldr	r3, [pc, #64]	; (800c328 <pbuf_cat+0x98>)
 800c2e8:	f240 3262 	movw	r2, #866	; 0x362
 800c2ec:	4911      	ldr	r1, [pc, #68]	; (800c334 <pbuf_cat+0xa4>)
 800c2ee:	4810      	ldr	r0, [pc, #64]	; (800c330 <pbuf_cat+0xa0>)
 800c2f0:	f005 fe02 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d006      	beq.n	800c30a <pbuf_cat+0x7a>
 800c2fc:	4b0a      	ldr	r3, [pc, #40]	; (800c328 <pbuf_cat+0x98>)
 800c2fe:	f240 3263 	movw	r2, #867	; 0x363
 800c302:	490d      	ldr	r1, [pc, #52]	; (800c338 <pbuf_cat+0xa8>)
 800c304:	480a      	ldr	r0, [pc, #40]	; (800c330 <pbuf_cat+0xa0>)
 800c306:	f005 fdf7 	bl	8011ef8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	891a      	ldrh	r2, [r3, #8]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	891b      	ldrh	r3, [r3, #8]
 800c312:	4413      	add	r3, r2
 800c314:	b29a      	uxth	r2, r3
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	08013d68 	.word	0x08013d68
 800c32c:	08013f80 	.word	0x08013f80
 800c330:	08013dec 	.word	0x08013dec
 800c334:	08013fb8 	.word	0x08013fb8
 800c338:	08013fe8 	.word	0x08013fe8

0800c33c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b086      	sub	sp, #24
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c346:	2300      	movs	r3, #0
 800c348:	617b      	str	r3, [r7, #20]
 800c34a:	2300      	movs	r3, #0
 800c34c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d008      	beq.n	800c366 <pbuf_copy+0x2a>
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d005      	beq.n	800c366 <pbuf_copy+0x2a>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	891a      	ldrh	r2, [r3, #8]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	891b      	ldrh	r3, [r3, #8]
 800c362:	429a      	cmp	r2, r3
 800c364:	d209      	bcs.n	800c37a <pbuf_copy+0x3e>
 800c366:	4b57      	ldr	r3, [pc, #348]	; (800c4c4 <pbuf_copy+0x188>)
 800c368:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c36c:	4956      	ldr	r1, [pc, #344]	; (800c4c8 <pbuf_copy+0x18c>)
 800c36e:	4857      	ldr	r0, [pc, #348]	; (800c4cc <pbuf_copy+0x190>)
 800c370:	f005 fdc2 	bl	8011ef8 <iprintf>
 800c374:	f06f 030f 	mvn.w	r3, #15
 800c378:	e09f      	b.n	800c4ba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	895b      	ldrh	r3, [r3, #10]
 800c37e:	461a      	mov	r2, r3
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	1ad2      	subs	r2, r2, r3
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	895b      	ldrh	r3, [r3, #10]
 800c388:	4619      	mov	r1, r3
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	1acb      	subs	r3, r1, r3
 800c38e:	429a      	cmp	r2, r3
 800c390:	d306      	bcc.n	800c3a0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	895b      	ldrh	r3, [r3, #10]
 800c396:	461a      	mov	r2, r3
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	60fb      	str	r3, [r7, #12]
 800c39e:	e005      	b.n	800c3ac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	895b      	ldrh	r3, [r3, #10]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	1ad3      	subs	r3, r2, r3
 800c3aa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685a      	ldr	r2, [r3, #4]
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	18d0      	adds	r0, r2, r3
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f005 fd84 	bl	8011ecc <memcpy>
    offset_to += len;
 800c3c4:	697a      	ldr	r2, [r7, #20]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	895b      	ldrh	r3, [r3, #10]
 800c3d8:	461a      	mov	r2, r3
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d906      	bls.n	800c3ee <pbuf_copy+0xb2>
 800c3e0:	4b38      	ldr	r3, [pc, #224]	; (800c4c4 <pbuf_copy+0x188>)
 800c3e2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c3e6:	493a      	ldr	r1, [pc, #232]	; (800c4d0 <pbuf_copy+0x194>)
 800c3e8:	4838      	ldr	r0, [pc, #224]	; (800c4cc <pbuf_copy+0x190>)
 800c3ea:	f005 fd85 	bl	8011ef8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	895b      	ldrh	r3, [r3, #10]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d906      	bls.n	800c408 <pbuf_copy+0xcc>
 800c3fa:	4b32      	ldr	r3, [pc, #200]	; (800c4c4 <pbuf_copy+0x188>)
 800c3fc:	f240 32da 	movw	r2, #986	; 0x3da
 800c400:	4934      	ldr	r1, [pc, #208]	; (800c4d4 <pbuf_copy+0x198>)
 800c402:	4832      	ldr	r0, [pc, #200]	; (800c4cc <pbuf_copy+0x190>)
 800c404:	f005 fd78 	bl	8011ef8 <iprintf>
    if (offset_from >= p_from->len) {
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	895b      	ldrh	r3, [r3, #10]
 800c40c:	461a      	mov	r2, r3
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	4293      	cmp	r3, r2
 800c412:	d304      	bcc.n	800c41e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c414:	2300      	movs	r3, #0
 800c416:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	895b      	ldrh	r3, [r3, #10]
 800c422:	461a      	mov	r2, r3
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	4293      	cmp	r3, r2
 800c428:	d114      	bne.n	800c454 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10c      	bne.n	800c454 <pbuf_copy+0x118>
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d009      	beq.n	800c454 <pbuf_copy+0x118>
 800c440:	4b20      	ldr	r3, [pc, #128]	; (800c4c4 <pbuf_copy+0x188>)
 800c442:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c446:	4924      	ldr	r1, [pc, #144]	; (800c4d8 <pbuf_copy+0x19c>)
 800c448:	4820      	ldr	r0, [pc, #128]	; (800c4cc <pbuf_copy+0x190>)
 800c44a:	f005 fd55 	bl	8011ef8 <iprintf>
 800c44e:	f06f 030f 	mvn.w	r3, #15
 800c452:	e032      	b.n	800c4ba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d013      	beq.n	800c482 <pbuf_copy+0x146>
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	895a      	ldrh	r2, [r3, #10]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	891b      	ldrh	r3, [r3, #8]
 800c462:	429a      	cmp	r2, r3
 800c464:	d10d      	bne.n	800c482 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d009      	beq.n	800c482 <pbuf_copy+0x146>
 800c46e:	4b15      	ldr	r3, [pc, #84]	; (800c4c4 <pbuf_copy+0x188>)
 800c470:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c474:	4919      	ldr	r1, [pc, #100]	; (800c4dc <pbuf_copy+0x1a0>)
 800c476:	4815      	ldr	r0, [pc, #84]	; (800c4cc <pbuf_copy+0x190>)
 800c478:	f005 fd3e 	bl	8011ef8 <iprintf>
 800c47c:	f06f 0305 	mvn.w	r3, #5
 800c480:	e01b      	b.n	800c4ba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d013      	beq.n	800c4b0 <pbuf_copy+0x174>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	895a      	ldrh	r2, [r3, #10]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	891b      	ldrh	r3, [r3, #8]
 800c490:	429a      	cmp	r2, r3
 800c492:	d10d      	bne.n	800c4b0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d009      	beq.n	800c4b0 <pbuf_copy+0x174>
 800c49c:	4b09      	ldr	r3, [pc, #36]	; (800c4c4 <pbuf_copy+0x188>)
 800c49e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c4a2:	490e      	ldr	r1, [pc, #56]	; (800c4dc <pbuf_copy+0x1a0>)
 800c4a4:	4809      	ldr	r0, [pc, #36]	; (800c4cc <pbuf_copy+0x190>)
 800c4a6:	f005 fd27 	bl	8011ef8 <iprintf>
 800c4aa:	f06f 0305 	mvn.w	r3, #5
 800c4ae:	e004      	b.n	800c4ba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f47f af61 	bne.w	800c37a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	08013d68 	.word	0x08013d68
 800c4c8:	08014034 	.word	0x08014034
 800c4cc:	08013dec 	.word	0x08013dec
 800c4d0:	08014064 	.word	0x08014064
 800c4d4:	0801407c 	.word	0x0801407c
 800c4d8:	08014098 	.word	0x08014098
 800c4dc:	080140a8 	.word	0x080140a8

0800c4e0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b088      	sub	sp, #32
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	4611      	mov	r1, r2
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	80fb      	strh	r3, [r7, #6]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d108      	bne.n	800c516 <pbuf_copy_partial+0x36>
 800c504:	4b2b      	ldr	r3, [pc, #172]	; (800c5b4 <pbuf_copy_partial+0xd4>)
 800c506:	f240 420a 	movw	r2, #1034	; 0x40a
 800c50a:	492b      	ldr	r1, [pc, #172]	; (800c5b8 <pbuf_copy_partial+0xd8>)
 800c50c:	482b      	ldr	r0, [pc, #172]	; (800c5bc <pbuf_copy_partial+0xdc>)
 800c50e:	f005 fcf3 	bl	8011ef8 <iprintf>
 800c512:	2300      	movs	r3, #0
 800c514:	e04a      	b.n	800c5ac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d108      	bne.n	800c52e <pbuf_copy_partial+0x4e>
 800c51c:	4b25      	ldr	r3, [pc, #148]	; (800c5b4 <pbuf_copy_partial+0xd4>)
 800c51e:	f240 420b 	movw	r2, #1035	; 0x40b
 800c522:	4927      	ldr	r1, [pc, #156]	; (800c5c0 <pbuf_copy_partial+0xe0>)
 800c524:	4825      	ldr	r0, [pc, #148]	; (800c5bc <pbuf_copy_partial+0xdc>)
 800c526:	f005 fce7 	bl	8011ef8 <iprintf>
 800c52a:	2300      	movs	r3, #0
 800c52c:	e03e      	b.n	800c5ac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	61fb      	str	r3, [r7, #28]
 800c532:	e034      	b.n	800c59e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c534:	88bb      	ldrh	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00a      	beq.n	800c550 <pbuf_copy_partial+0x70>
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	895b      	ldrh	r3, [r3, #10]
 800c53e:	88ba      	ldrh	r2, [r7, #4]
 800c540:	429a      	cmp	r2, r3
 800c542:	d305      	bcc.n	800c550 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	895b      	ldrh	r3, [r3, #10]
 800c548:	88ba      	ldrh	r2, [r7, #4]
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	80bb      	strh	r3, [r7, #4]
 800c54e:	e023      	b.n	800c598 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	895a      	ldrh	r2, [r3, #10]
 800c554:	88bb      	ldrh	r3, [r7, #4]
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c55a:	8b3a      	ldrh	r2, [r7, #24]
 800c55c:	88fb      	ldrh	r3, [r7, #6]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d901      	bls.n	800c566 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c562:	88fb      	ldrh	r3, [r7, #6]
 800c564:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c566:	8b7b      	ldrh	r3, [r7, #26]
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	18d0      	adds	r0, r2, r3
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	88bb      	ldrh	r3, [r7, #4]
 800c572:	4413      	add	r3, r2
 800c574:	8b3a      	ldrh	r2, [r7, #24]
 800c576:	4619      	mov	r1, r3
 800c578:	f005 fca8 	bl	8011ecc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c57c:	8afa      	ldrh	r2, [r7, #22]
 800c57e:	8b3b      	ldrh	r3, [r7, #24]
 800c580:	4413      	add	r3, r2
 800c582:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c584:	8b7a      	ldrh	r2, [r7, #26]
 800c586:	8b3b      	ldrh	r3, [r7, #24]
 800c588:	4413      	add	r3, r2
 800c58a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c58c:	88fa      	ldrh	r2, [r7, #6]
 800c58e:	8b3b      	ldrh	r3, [r7, #24]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c594:	2300      	movs	r3, #0
 800c596:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	61fb      	str	r3, [r7, #28]
 800c59e:	88fb      	ldrh	r3, [r7, #6]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d002      	beq.n	800c5aa <pbuf_copy_partial+0xca>
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1c4      	bne.n	800c534 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c5aa:	8afb      	ldrh	r3, [r7, #22]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3720      	adds	r7, #32
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	08013d68 	.word	0x08013d68
 800c5b8:	080140d4 	.word	0x080140d4
 800c5bc:	08013dec 	.word	0x08013dec
 800c5c0:	080140f4 	.word	0x080140f4

0800c5c4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	603a      	str	r2, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	8919      	ldrh	r1, [r3, #8]
 800c5d8:	88ba      	ldrh	r2, [r7, #4]
 800c5da:	79fb      	ldrb	r3, [r7, #7]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff fab1 	bl	800bb44 <pbuf_alloc>
 800c5e2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d101      	bne.n	800c5ee <pbuf_clone+0x2a>
    return NULL;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	e011      	b.n	800c612 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f7ff fea3 	bl	800c33c <pbuf_copy>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c5fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d006      	beq.n	800c610 <pbuf_clone+0x4c>
 800c602:	4b06      	ldr	r3, [pc, #24]	; (800c61c <pbuf_clone+0x58>)
 800c604:	f240 5224 	movw	r2, #1316	; 0x524
 800c608:	4905      	ldr	r1, [pc, #20]	; (800c620 <pbuf_clone+0x5c>)
 800c60a:	4806      	ldr	r0, [pc, #24]	; (800c624 <pbuf_clone+0x60>)
 800c60c:	f005 fc74 	bl	8011ef8 <iprintf>
  return q;
 800c610:	68fb      	ldr	r3, [r7, #12]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	08013d68 	.word	0x08013d68
 800c620:	08014200 	.word	0x08014200
 800c624:	08013dec 	.word	0x08013dec

0800c628 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c62c:	f005 fc7c 	bl	8011f28 <rand>
 800c630:	4603      	mov	r3, r0
 800c632:	b29b      	uxth	r3, r3
 800c634:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c638:	b29b      	uxth	r3, r3
 800c63a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c63e:	b29a      	uxth	r2, r3
 800c640:	4b01      	ldr	r3, [pc, #4]	; (800c648 <tcp_init+0x20>)
 800c642:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c644:	bf00      	nop
 800c646:	bd80      	pop	{r7, pc}
 800c648:	24000024 	.word	0x24000024

0800c64c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	7d1b      	ldrb	r3, [r3, #20]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d105      	bne.n	800c668 <tcp_free+0x1c>
 800c65c:	4b06      	ldr	r3, [pc, #24]	; (800c678 <tcp_free+0x2c>)
 800c65e:	22d4      	movs	r2, #212	; 0xd4
 800c660:	4906      	ldr	r1, [pc, #24]	; (800c67c <tcp_free+0x30>)
 800c662:	4807      	ldr	r0, [pc, #28]	; (800c680 <tcp_free+0x34>)
 800c664:	f005 fc48 	bl	8011ef8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c668:	6879      	ldr	r1, [r7, #4]
 800c66a:	2001      	movs	r0, #1
 800c66c:	f7fe fef8 	bl	800b460 <memp_free>
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	0801428c 	.word	0x0801428c
 800c67c:	080142e0 	.word	0x080142e0
 800c680:	080142f4 	.word	0x080142f4

0800c684 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	7d1b      	ldrb	r3, [r3, #20]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d105      	bne.n	800c6a0 <tcp_free_listen+0x1c>
 800c694:	4b06      	ldr	r3, [pc, #24]	; (800c6b0 <tcp_free_listen+0x2c>)
 800c696:	22df      	movs	r2, #223	; 0xdf
 800c698:	4906      	ldr	r1, [pc, #24]	; (800c6b4 <tcp_free_listen+0x30>)
 800c69a:	4807      	ldr	r0, [pc, #28]	; (800c6b8 <tcp_free_listen+0x34>)
 800c69c:	f005 fc2c 	bl	8011ef8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c6a0:	6879      	ldr	r1, [r7, #4]
 800c6a2:	2002      	movs	r0, #2
 800c6a4:	f7fe fedc 	bl	800b460 <memp_free>
}
 800c6a8:	bf00      	nop
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	0801428c 	.word	0x0801428c
 800c6b4:	0801431c 	.word	0x0801431c
 800c6b8:	080142f4 	.word	0x080142f4

0800c6bc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c6c0:	f000 fea2 	bl	800d408 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c6c4:	4b07      	ldr	r3, [pc, #28]	; (800c6e4 <tcp_tmr+0x28>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	4b05      	ldr	r3, [pc, #20]	; (800c6e4 <tcp_tmr+0x28>)
 800c6ce:	701a      	strb	r2, [r3, #0]
 800c6d0:	4b04      	ldr	r3, [pc, #16]	; (800c6e4 <tcp_tmr+0x28>)
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	f003 0301 	and.w	r3, r3, #1
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d001      	beq.n	800c6e0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c6dc:	f000 fb54 	bl	800cd88 <tcp_slowtmr>
  }
}
 800c6e0:	bf00      	nop
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	24008169 	.word	0x24008169

0800c6e8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d105      	bne.n	800c704 <tcp_remove_listener+0x1c>
 800c6f8:	4b0d      	ldr	r3, [pc, #52]	; (800c730 <tcp_remove_listener+0x48>)
 800c6fa:	22ff      	movs	r2, #255	; 0xff
 800c6fc:	490d      	ldr	r1, [pc, #52]	; (800c734 <tcp_remove_listener+0x4c>)
 800c6fe:	480e      	ldr	r0, [pc, #56]	; (800c738 <tcp_remove_listener+0x50>)
 800c700:	f005 fbfa 	bl	8011ef8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	e00a      	b.n	800c720 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c70e:	683a      	ldr	r2, [r7, #0]
 800c710:	429a      	cmp	r2, r3
 800c712:	d102      	bne.n	800c71a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	60fb      	str	r3, [r7, #12]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1f1      	bne.n	800c70a <tcp_remove_listener+0x22>
    }
  }
}
 800c726:	bf00      	nop
 800c728:	bf00      	nop
 800c72a:	3710      	adds	r7, #16
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	0801428c 	.word	0x0801428c
 800c734:	08014338 	.word	0x08014338
 800c738:	080142f4 	.word	0x080142f4

0800c73c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d106      	bne.n	800c758 <tcp_listen_closed+0x1c>
 800c74a:	4b14      	ldr	r3, [pc, #80]	; (800c79c <tcp_listen_closed+0x60>)
 800c74c:	f240 1211 	movw	r2, #273	; 0x111
 800c750:	4913      	ldr	r1, [pc, #76]	; (800c7a0 <tcp_listen_closed+0x64>)
 800c752:	4814      	ldr	r0, [pc, #80]	; (800c7a4 <tcp_listen_closed+0x68>)
 800c754:	f005 fbd0 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	7d1b      	ldrb	r3, [r3, #20]
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d006      	beq.n	800c76e <tcp_listen_closed+0x32>
 800c760:	4b0e      	ldr	r3, [pc, #56]	; (800c79c <tcp_listen_closed+0x60>)
 800c762:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c766:	4910      	ldr	r1, [pc, #64]	; (800c7a8 <tcp_listen_closed+0x6c>)
 800c768:	480e      	ldr	r0, [pc, #56]	; (800c7a4 <tcp_listen_closed+0x68>)
 800c76a:	f005 fbc5 	bl	8011ef8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c76e:	2301      	movs	r3, #1
 800c770:	60fb      	str	r3, [r7, #12]
 800c772:	e00b      	b.n	800c78c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c774:	4a0d      	ldr	r2, [pc, #52]	; (800c7ac <tcp_listen_closed+0x70>)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	6879      	ldr	r1, [r7, #4]
 800c780:	4618      	mov	r0, r3
 800c782:	f7ff ffb1 	bl	800c6e8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	3301      	adds	r3, #1
 800c78a:	60fb      	str	r3, [r7, #12]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2b03      	cmp	r3, #3
 800c790:	d9f0      	bls.n	800c774 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c792:	bf00      	nop
 800c794:	bf00      	nop
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	0801428c 	.word	0x0801428c
 800c7a0:	08014360 	.word	0x08014360
 800c7a4:	080142f4 	.word	0x080142f4
 800c7a8:	0801436c 	.word	0x0801436c
 800c7ac:	08015c8c 	.word	0x08015c8c

0800c7b0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c7b0:	b5b0      	push	{r4, r5, r7, lr}
 800c7b2:	b088      	sub	sp, #32
 800c7b4:	af04      	add	r7, sp, #16
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d106      	bne.n	800c7d0 <tcp_close_shutdown+0x20>
 800c7c2:	4b63      	ldr	r3, [pc, #396]	; (800c950 <tcp_close_shutdown+0x1a0>)
 800c7c4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c7c8:	4962      	ldr	r1, [pc, #392]	; (800c954 <tcp_close_shutdown+0x1a4>)
 800c7ca:	4863      	ldr	r0, [pc, #396]	; (800c958 <tcp_close_shutdown+0x1a8>)
 800c7cc:	f005 fb94 	bl	8011ef8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c7d0:	78fb      	ldrb	r3, [r7, #3]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d066      	beq.n	800c8a4 <tcp_close_shutdown+0xf4>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	7d1b      	ldrb	r3, [r3, #20]
 800c7da:	2b04      	cmp	r3, #4
 800c7dc:	d003      	beq.n	800c7e6 <tcp_close_shutdown+0x36>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	7d1b      	ldrb	r3, [r3, #20]
 800c7e2:	2b07      	cmp	r3, #7
 800c7e4:	d15e      	bne.n	800c8a4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d104      	bne.n	800c7f8 <tcp_close_shutdown+0x48>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c7f6:	d055      	beq.n	800c8a4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	8b5b      	ldrh	r3, [r3, #26]
 800c7fc:	f003 0310 	and.w	r3, r3, #16
 800c800:	2b00      	cmp	r3, #0
 800c802:	d106      	bne.n	800c812 <tcp_close_shutdown+0x62>
 800c804:	4b52      	ldr	r3, [pc, #328]	; (800c950 <tcp_close_shutdown+0x1a0>)
 800c806:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c80a:	4954      	ldr	r1, [pc, #336]	; (800c95c <tcp_close_shutdown+0x1ac>)
 800c80c:	4852      	ldr	r0, [pc, #328]	; (800c958 <tcp_close_shutdown+0x1a8>)
 800c80e:	f005 fb73 	bl	8011ef8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c81a:	687d      	ldr	r5, [r7, #4]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	3304      	adds	r3, #4
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	8ad2      	ldrh	r2, [r2, #22]
 800c824:	6879      	ldr	r1, [r7, #4]
 800c826:	8b09      	ldrh	r1, [r1, #24]
 800c828:	9102      	str	r1, [sp, #8]
 800c82a:	9201      	str	r2, [sp, #4]
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	462b      	mov	r3, r5
 800c830:	4622      	mov	r2, r4
 800c832:	4601      	mov	r1, r0
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f004 fe91 	bl	801155c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f001 f8c6 	bl	800d9cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c840:	4b47      	ldr	r3, [pc, #284]	; (800c960 <tcp_close_shutdown+0x1b0>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	429a      	cmp	r2, r3
 800c848:	d105      	bne.n	800c856 <tcp_close_shutdown+0xa6>
 800c84a:	4b45      	ldr	r3, [pc, #276]	; (800c960 <tcp_close_shutdown+0x1b0>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	4a43      	ldr	r2, [pc, #268]	; (800c960 <tcp_close_shutdown+0x1b0>)
 800c852:	6013      	str	r3, [r2, #0]
 800c854:	e013      	b.n	800c87e <tcp_close_shutdown+0xce>
 800c856:	4b42      	ldr	r3, [pc, #264]	; (800c960 <tcp_close_shutdown+0x1b0>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	60fb      	str	r3, [r7, #12]
 800c85c:	e00c      	b.n	800c878 <tcp_close_shutdown+0xc8>
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	429a      	cmp	r2, r3
 800c866:	d104      	bne.n	800c872 <tcp_close_shutdown+0xc2>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	68da      	ldr	r2, [r3, #12]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	60da      	str	r2, [r3, #12]
 800c870:	e005      	b.n	800c87e <tcp_close_shutdown+0xce>
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	60fb      	str	r3, [r7, #12]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1ef      	bne.n	800c85e <tcp_close_shutdown+0xae>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	60da      	str	r2, [r3, #12]
 800c884:	4b37      	ldr	r3, [pc, #220]	; (800c964 <tcp_close_shutdown+0x1b4>)
 800c886:	2201      	movs	r2, #1
 800c888:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c88a:	4b37      	ldr	r3, [pc, #220]	; (800c968 <tcp_close_shutdown+0x1b8>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	429a      	cmp	r2, r3
 800c892:	d102      	bne.n	800c89a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c894:	f003 fd5e 	bl	8010354 <tcp_trigger_input_pcb_close>
 800c898:	e002      	b.n	800c8a0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7ff fed6 	bl	800c64c <tcp_free>
      }
      return ERR_OK;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	e050      	b.n	800c946 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	7d1b      	ldrb	r3, [r3, #20]
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d03b      	beq.n	800c924 <tcp_close_shutdown+0x174>
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	dc44      	bgt.n	800c93a <tcp_close_shutdown+0x18a>
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d002      	beq.n	800c8ba <tcp_close_shutdown+0x10a>
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d02a      	beq.n	800c90e <tcp_close_shutdown+0x15e>
 800c8b8:	e03f      	b.n	800c93a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	8adb      	ldrh	r3, [r3, #22]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d021      	beq.n	800c906 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c8c2:	4b2a      	ldr	r3, [pc, #168]	; (800c96c <tcp_close_shutdown+0x1bc>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d105      	bne.n	800c8d8 <tcp_close_shutdown+0x128>
 800c8cc:	4b27      	ldr	r3, [pc, #156]	; (800c96c <tcp_close_shutdown+0x1bc>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	4a26      	ldr	r2, [pc, #152]	; (800c96c <tcp_close_shutdown+0x1bc>)
 800c8d4:	6013      	str	r3, [r2, #0]
 800c8d6:	e013      	b.n	800c900 <tcp_close_shutdown+0x150>
 800c8d8:	4b24      	ldr	r3, [pc, #144]	; (800c96c <tcp_close_shutdown+0x1bc>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	60bb      	str	r3, [r7, #8]
 800c8de:	e00c      	b.n	800c8fa <tcp_close_shutdown+0x14a>
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d104      	bne.n	800c8f4 <tcp_close_shutdown+0x144>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	60da      	str	r2, [r3, #12]
 800c8f2:	e005      	b.n	800c900 <tcp_close_shutdown+0x150>
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	60bb      	str	r3, [r7, #8]
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d1ef      	bne.n	800c8e0 <tcp_close_shutdown+0x130>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f7ff fea0 	bl	800c64c <tcp_free>
      break;
 800c90c:	e01a      	b.n	800c944 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f7ff ff14 	bl	800c73c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	4816      	ldr	r0, [pc, #88]	; (800c970 <tcp_close_shutdown+0x1c0>)
 800c918:	f001 f8a8 	bl	800da6c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7ff feb1 	bl	800c684 <tcp_free_listen>
      break;
 800c922:	e00f      	b.n	800c944 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c924:	6879      	ldr	r1, [r7, #4]
 800c926:	480e      	ldr	r0, [pc, #56]	; (800c960 <tcp_close_shutdown+0x1b0>)
 800c928:	f001 f8a0 	bl	800da6c <tcp_pcb_remove>
 800c92c:	4b0d      	ldr	r3, [pc, #52]	; (800c964 <tcp_close_shutdown+0x1b4>)
 800c92e:	2201      	movs	r2, #1
 800c930:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f7ff fe8a 	bl	800c64c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c938:	e004      	b.n	800c944 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f81a 	bl	800c974 <tcp_close_shutdown_fin>
 800c940:	4603      	mov	r3, r0
 800c942:	e000      	b.n	800c946 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bdb0      	pop	{r4, r5, r7, pc}
 800c94e:	bf00      	nop
 800c950:	0801428c 	.word	0x0801428c
 800c954:	08014384 	.word	0x08014384
 800c958:	080142f4 	.word	0x080142f4
 800c95c:	080143a4 	.word	0x080143a4
 800c960:	24008160 	.word	0x24008160
 800c964:	24008168 	.word	0x24008168
 800c968:	240081a0 	.word	0x240081a0
 800c96c:	24008158 	.word	0x24008158
 800c970:	2400815c 	.word	0x2400815c

0800c974 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d106      	bne.n	800c990 <tcp_close_shutdown_fin+0x1c>
 800c982:	4b2e      	ldr	r3, [pc, #184]	; (800ca3c <tcp_close_shutdown_fin+0xc8>)
 800c984:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c988:	492d      	ldr	r1, [pc, #180]	; (800ca40 <tcp_close_shutdown_fin+0xcc>)
 800c98a:	482e      	ldr	r0, [pc, #184]	; (800ca44 <tcp_close_shutdown_fin+0xd0>)
 800c98c:	f005 fab4 	bl	8011ef8 <iprintf>

  switch (pcb->state) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	7d1b      	ldrb	r3, [r3, #20]
 800c994:	2b07      	cmp	r3, #7
 800c996:	d020      	beq.n	800c9da <tcp_close_shutdown_fin+0x66>
 800c998:	2b07      	cmp	r3, #7
 800c99a:	dc2b      	bgt.n	800c9f4 <tcp_close_shutdown_fin+0x80>
 800c99c:	2b03      	cmp	r3, #3
 800c99e:	d002      	beq.n	800c9a6 <tcp_close_shutdown_fin+0x32>
 800c9a0:	2b04      	cmp	r3, #4
 800c9a2:	d00d      	beq.n	800c9c0 <tcp_close_shutdown_fin+0x4c>
 800c9a4:	e026      	b.n	800c9f4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f003 fee6 	bl	8010778 <tcp_send_fin>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d11f      	bne.n	800c9f8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2205      	movs	r2, #5
 800c9bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c9be:	e01b      	b.n	800c9f8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f003 fed9 	bl	8010778 <tcp_send_fin>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c9ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d114      	bne.n	800c9fc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2205      	movs	r2, #5
 800c9d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c9d8:	e010      	b.n	800c9fc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f003 fecc 	bl	8010778 <tcp_send_fin>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c9e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d109      	bne.n	800ca00 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2209      	movs	r2, #9
 800c9f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c9f2:	e005      	b.n	800ca00 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	e01c      	b.n	800ca32 <tcp_close_shutdown_fin+0xbe>
      break;
 800c9f8:	bf00      	nop
 800c9fa:	e002      	b.n	800ca02 <tcp_close_shutdown_fin+0x8e>
      break;
 800c9fc:	bf00      	nop
 800c9fe:	e000      	b.n	800ca02 <tcp_close_shutdown_fin+0x8e>
      break;
 800ca00:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ca02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d103      	bne.n	800ca12 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f003 fff2 	bl	80109f4 <tcp_output>
 800ca10:	e00d      	b.n	800ca2e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ca12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1a:	d108      	bne.n	800ca2e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	8b5b      	ldrh	r3, [r3, #26]
 800ca20:	f043 0308 	orr.w	r3, r3, #8
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	e001      	b.n	800ca32 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ca2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	0801428c 	.word	0x0801428c
 800ca40:	08014360 	.word	0x08014360
 800ca44:	080142f4 	.word	0x080142f4

0800ca48 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d109      	bne.n	800ca6a <tcp_close+0x22>
 800ca56:	4b0f      	ldr	r3, [pc, #60]	; (800ca94 <tcp_close+0x4c>)
 800ca58:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ca5c:	490e      	ldr	r1, [pc, #56]	; (800ca98 <tcp_close+0x50>)
 800ca5e:	480f      	ldr	r0, [pc, #60]	; (800ca9c <tcp_close+0x54>)
 800ca60:	f005 fa4a 	bl	8011ef8 <iprintf>
 800ca64:	f06f 030f 	mvn.w	r3, #15
 800ca68:	e00f      	b.n	800ca8a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	7d1b      	ldrb	r3, [r3, #20]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d006      	beq.n	800ca80 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	8b5b      	ldrh	r3, [r3, #26]
 800ca76:	f043 0310 	orr.w	r3, r3, #16
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ca80:	2101      	movs	r1, #1
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7ff fe94 	bl	800c7b0 <tcp_close_shutdown>
 800ca88:	4603      	mov	r3, r0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3708      	adds	r7, #8
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	0801428c 	.word	0x0801428c
 800ca98:	080143c0 	.word	0x080143c0
 800ca9c:	080142f4 	.word	0x080142f4

0800caa0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08e      	sub	sp, #56	; 0x38
 800caa4:	af04      	add	r7, sp, #16
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d107      	bne.n	800cac0 <tcp_abandon+0x20>
 800cab0:	4b52      	ldr	r3, [pc, #328]	; (800cbfc <tcp_abandon+0x15c>)
 800cab2:	f240 223d 	movw	r2, #573	; 0x23d
 800cab6:	4952      	ldr	r1, [pc, #328]	; (800cc00 <tcp_abandon+0x160>)
 800cab8:	4852      	ldr	r0, [pc, #328]	; (800cc04 <tcp_abandon+0x164>)
 800caba:	f005 fa1d 	bl	8011ef8 <iprintf>
 800cabe:	e099      	b.n	800cbf4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	7d1b      	ldrb	r3, [r3, #20]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d106      	bne.n	800cad6 <tcp_abandon+0x36>
 800cac8:	4b4c      	ldr	r3, [pc, #304]	; (800cbfc <tcp_abandon+0x15c>)
 800caca:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cace:	494e      	ldr	r1, [pc, #312]	; (800cc08 <tcp_abandon+0x168>)
 800cad0:	484c      	ldr	r0, [pc, #304]	; (800cc04 <tcp_abandon+0x164>)
 800cad2:	f005 fa11 	bl	8011ef8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	7d1b      	ldrb	r3, [r3, #20]
 800cada:	2b0a      	cmp	r3, #10
 800cadc:	d107      	bne.n	800caee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	484a      	ldr	r0, [pc, #296]	; (800cc0c <tcp_abandon+0x16c>)
 800cae2:	f000 ffc3 	bl	800da6c <tcp_pcb_remove>
    tcp_free(pcb);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff fdb0 	bl	800c64c <tcp_free>
 800caec:	e082      	b.n	800cbf4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cafa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb00:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb08:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	7d1b      	ldrb	r3, [r3, #20]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d126      	bne.n	800cb66 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	8adb      	ldrh	r3, [r3, #22]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d02e      	beq.n	800cb7e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb20:	4b3b      	ldr	r3, [pc, #236]	; (800cc10 <tcp_abandon+0x170>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d105      	bne.n	800cb36 <tcp_abandon+0x96>
 800cb2a:	4b39      	ldr	r3, [pc, #228]	; (800cc10 <tcp_abandon+0x170>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	4a37      	ldr	r2, [pc, #220]	; (800cc10 <tcp_abandon+0x170>)
 800cb32:	6013      	str	r3, [r2, #0]
 800cb34:	e013      	b.n	800cb5e <tcp_abandon+0xbe>
 800cb36:	4b36      	ldr	r3, [pc, #216]	; (800cc10 <tcp_abandon+0x170>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	61fb      	str	r3, [r7, #28]
 800cb3c:	e00c      	b.n	800cb58 <tcp_abandon+0xb8>
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d104      	bne.n	800cb52 <tcp_abandon+0xb2>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68da      	ldr	r2, [r3, #12]
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	60da      	str	r2, [r3, #12]
 800cb50:	e005      	b.n	800cb5e <tcp_abandon+0xbe>
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	61fb      	str	r3, [r7, #28]
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1ef      	bne.n	800cb3e <tcp_abandon+0x9e>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	60da      	str	r2, [r3, #12]
 800cb64:	e00b      	b.n	800cb7e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	8adb      	ldrh	r3, [r3, #22]
 800cb6e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cb70:	6879      	ldr	r1, [r7, #4]
 800cb72:	4828      	ldr	r0, [pc, #160]	; (800cc14 <tcp_abandon+0x174>)
 800cb74:	f000 ff7a 	bl	800da6c <tcp_pcb_remove>
 800cb78:	4b27      	ldr	r3, [pc, #156]	; (800cc18 <tcp_abandon+0x178>)
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d004      	beq.n	800cb90 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f000 fd1c 	bl	800d5c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d004      	beq.n	800cba2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f000 fd13 	bl	800d5c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d004      	beq.n	800cbb4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 fd0a 	bl	800d5c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00e      	beq.n	800cbd8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cbba:	6879      	ldr	r1, [r7, #4]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	8b12      	ldrh	r2, [r2, #24]
 800cbc4:	9202      	str	r2, [sp, #8]
 800cbc6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cbc8:	9201      	str	r2, [sp, #4]
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	697a      	ldr	r2, [r7, #20]
 800cbd0:	69b9      	ldr	r1, [r7, #24]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f004 fcc2 	bl	801155c <tcp_rst>
    }
    last_state = pcb->state;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	7d1b      	ldrb	r3, [r3, #20]
 800cbdc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7ff fd34 	bl	800c64c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d004      	beq.n	800cbf4 <tcp_abandon+0x154>
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	f06f 010c 	mvn.w	r1, #12
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	4798      	blx	r3
  }
}
 800cbf4:	3728      	adds	r7, #40	; 0x28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	0801428c 	.word	0x0801428c
 800cc00:	080143f4 	.word	0x080143f4
 800cc04:	080142f4 	.word	0x080142f4
 800cc08:	08014410 	.word	0x08014410
 800cc0c:	24008164 	.word	0x24008164
 800cc10:	24008158 	.word	0x24008158
 800cc14:	24008160 	.word	0x24008160
 800cc18:	24008168 	.word	0x24008168

0800cc1c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cc24:	2101      	movs	r1, #1
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7ff ff3a 	bl	800caa0 <tcp_abandon>
}
 800cc2c:	bf00      	nop
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d106      	bne.n	800cc50 <tcp_update_rcv_ann_wnd+0x1c>
 800cc42:	4b25      	ldr	r3, [pc, #148]	; (800ccd8 <tcp_update_rcv_ann_wnd+0xa4>)
 800cc44:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cc48:	4924      	ldr	r1, [pc, #144]	; (800ccdc <tcp_update_rcv_ann_wnd+0xa8>)
 800cc4a:	4825      	ldr	r0, [pc, #148]	; (800cce0 <tcp_update_rcv_ann_wnd+0xac>)
 800cc4c:	f005 f954 	bl	8011ef8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cc58:	4413      	add	r3, r2
 800cc5a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cc64:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cc68:	bf28      	it	cs
 800cc6a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cc6e:	b292      	uxth	r2, r2
 800cc70:	4413      	add	r3, r2
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	db08      	blt.n	800cc8c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	e020      	b.n	800ccce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	dd03      	ble.n	800cca2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cca0:	e014      	b.n	800cccc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccaa:	1ad3      	subs	r3, r2, r3
 800ccac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccb4:	d306      	bcc.n	800ccc4 <tcp_update_rcv_ann_wnd+0x90>
 800ccb6:	4b08      	ldr	r3, [pc, #32]	; (800ccd8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ccb8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ccbc:	4909      	ldr	r1, [pc, #36]	; (800cce4 <tcp_update_rcv_ann_wnd+0xb0>)
 800ccbe:	4808      	ldr	r0, [pc, #32]	; (800cce0 <tcp_update_rcv_ann_wnd+0xac>)
 800ccc0:	f005 f91a 	bl	8011ef8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cccc:	2300      	movs	r3, #0
  }
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	0801428c 	.word	0x0801428c
 800ccdc:	0801450c 	.word	0x0801450c
 800cce0:	080142f4 	.word	0x080142f4
 800cce4:	08014530 	.word	0x08014530

0800cce8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d107      	bne.n	800cd0a <tcp_recved+0x22>
 800ccfa:	4b1f      	ldr	r3, [pc, #124]	; (800cd78 <tcp_recved+0x90>)
 800ccfc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cd00:	491e      	ldr	r1, [pc, #120]	; (800cd7c <tcp_recved+0x94>)
 800cd02:	481f      	ldr	r0, [pc, #124]	; (800cd80 <tcp_recved+0x98>)
 800cd04:	f005 f8f8 	bl	8011ef8 <iprintf>
 800cd08:	e032      	b.n	800cd70 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	7d1b      	ldrb	r3, [r3, #20]
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d106      	bne.n	800cd20 <tcp_recved+0x38>
 800cd12:	4b19      	ldr	r3, [pc, #100]	; (800cd78 <tcp_recved+0x90>)
 800cd14:	f240 32d2 	movw	r2, #978	; 0x3d2
 800cd18:	491a      	ldr	r1, [pc, #104]	; (800cd84 <tcp_recved+0x9c>)
 800cd1a:	4819      	ldr	r0, [pc, #100]	; (800cd80 <tcp_recved+0x98>)
 800cd1c:	f005 f8ec 	bl	8011ef8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd24:	887b      	ldrh	r3, [r7, #2]
 800cd26:	4413      	add	r3, r2
 800cd28:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cd2a:	89fb      	ldrh	r3, [r7, #14]
 800cd2c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cd30:	d804      	bhi.n	800cd3c <tcp_recved+0x54>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd36:	89fa      	ldrh	r2, [r7, #14]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d204      	bcs.n	800cd46 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cd42:	851a      	strh	r2, [r3, #40]	; 0x28
 800cd44:	e002      	b.n	800cd4c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	89fa      	ldrh	r2, [r7, #14]
 800cd4a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7ff ff71 	bl	800cc34 <tcp_update_rcv_ann_wnd>
 800cd52:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cd5a:	d309      	bcc.n	800cd70 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	8b5b      	ldrh	r3, [r3, #26]
 800cd60:	f043 0302 	orr.w	r3, r3, #2
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f003 fe42 	bl	80109f4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	0801428c 	.word	0x0801428c
 800cd7c:	0801454c 	.word	0x0801454c
 800cd80:	080142f4 	.word	0x080142f4
 800cd84:	08014564 	.word	0x08014564

0800cd88 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cd88:	b5b0      	push	{r4, r5, r7, lr}
 800cd8a:	b090      	sub	sp, #64	; 0x40
 800cd8c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cd94:	4b94      	ldr	r3, [pc, #592]	; (800cfe8 <tcp_slowtmr+0x260>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	4a93      	ldr	r2, [pc, #588]	; (800cfe8 <tcp_slowtmr+0x260>)
 800cd9c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cd9e:	4b93      	ldr	r3, [pc, #588]	; (800cfec <tcp_slowtmr+0x264>)
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	3301      	adds	r3, #1
 800cda4:	b2da      	uxtb	r2, r3
 800cda6:	4b91      	ldr	r3, [pc, #580]	; (800cfec <tcp_slowtmr+0x264>)
 800cda8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cdae:	4b90      	ldr	r3, [pc, #576]	; (800cff0 <tcp_slowtmr+0x268>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cdb4:	e29d      	b.n	800d2f2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb8:	7d1b      	ldrb	r3, [r3, #20]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d106      	bne.n	800cdcc <tcp_slowtmr+0x44>
 800cdbe:	4b8d      	ldr	r3, [pc, #564]	; (800cff4 <tcp_slowtmr+0x26c>)
 800cdc0:	f240 42be 	movw	r2, #1214	; 0x4be
 800cdc4:	498c      	ldr	r1, [pc, #560]	; (800cff8 <tcp_slowtmr+0x270>)
 800cdc6:	488d      	ldr	r0, [pc, #564]	; (800cffc <tcp_slowtmr+0x274>)
 800cdc8:	f005 f896 	bl	8011ef8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdce:	7d1b      	ldrb	r3, [r3, #20]
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d106      	bne.n	800cde2 <tcp_slowtmr+0x5a>
 800cdd4:	4b87      	ldr	r3, [pc, #540]	; (800cff4 <tcp_slowtmr+0x26c>)
 800cdd6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cdda:	4989      	ldr	r1, [pc, #548]	; (800d000 <tcp_slowtmr+0x278>)
 800cddc:	4887      	ldr	r0, [pc, #540]	; (800cffc <tcp_slowtmr+0x274>)
 800cdde:	f005 f88b 	bl	8011ef8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde4:	7d1b      	ldrb	r3, [r3, #20]
 800cde6:	2b0a      	cmp	r3, #10
 800cde8:	d106      	bne.n	800cdf8 <tcp_slowtmr+0x70>
 800cdea:	4b82      	ldr	r3, [pc, #520]	; (800cff4 <tcp_slowtmr+0x26c>)
 800cdec:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cdf0:	4984      	ldr	r1, [pc, #528]	; (800d004 <tcp_slowtmr+0x27c>)
 800cdf2:	4882      	ldr	r0, [pc, #520]	; (800cffc <tcp_slowtmr+0x274>)
 800cdf4:	f005 f880 	bl	8011ef8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	7f9a      	ldrb	r2, [r3, #30]
 800cdfc:	4b7b      	ldr	r3, [pc, #492]	; (800cfec <tcp_slowtmr+0x264>)
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d105      	bne.n	800ce10 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ce04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ce0e:	e270      	b.n	800d2f2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ce10:	4b76      	ldr	r3, [pc, #472]	; (800cfec <tcp_slowtmr+0x264>)
 800ce12:	781a      	ldrb	r2, [r3, #0]
 800ce14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce16:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	7d1b      	ldrb	r3, [r3, #20]
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d10a      	bne.n	800ce42 <tcp_slowtmr+0xba>
 800ce2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce32:	2b05      	cmp	r3, #5
 800ce34:	d905      	bls.n	800ce42 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ce36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce40:	e11e      	b.n	800d080 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce48:	2b0b      	cmp	r3, #11
 800ce4a:	d905      	bls.n	800ce58 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ce4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce50:	3301      	adds	r3, #1
 800ce52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce56:	e113      	b.n	800d080 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ce58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d075      	beq.n	800cf4e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ce62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d006      	beq.n	800ce78 <tcp_slowtmr+0xf0>
 800ce6a:	4b62      	ldr	r3, [pc, #392]	; (800cff4 <tcp_slowtmr+0x26c>)
 800ce6c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ce70:	4965      	ldr	r1, [pc, #404]	; (800d008 <tcp_slowtmr+0x280>)
 800ce72:	4862      	ldr	r0, [pc, #392]	; (800cffc <tcp_slowtmr+0x274>)
 800ce74:	f005 f840 	bl	8011ef8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ce78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d106      	bne.n	800ce8e <tcp_slowtmr+0x106>
 800ce80:	4b5c      	ldr	r3, [pc, #368]	; (800cff4 <tcp_slowtmr+0x26c>)
 800ce82:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ce86:	4961      	ldr	r1, [pc, #388]	; (800d00c <tcp_slowtmr+0x284>)
 800ce88:	485c      	ldr	r0, [pc, #368]	; (800cffc <tcp_slowtmr+0x274>)
 800ce8a:	f005 f835 	bl	8011ef8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ce8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce90:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ce94:	2b0b      	cmp	r3, #11
 800ce96:	d905      	bls.n	800cea4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ce98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cea2:	e0ed      	b.n	800d080 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	4a58      	ldr	r2, [pc, #352]	; (800d010 <tcp_slowtmr+0x288>)
 800ceae:	5cd3      	ldrb	r3, [r2, r3]
 800ceb0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ceb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ceb8:	7c7a      	ldrb	r2, [r7, #17]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d907      	bls.n	800cece <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cec4:	3301      	adds	r3, #1
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ced4:	7c7a      	ldrb	r2, [r7, #17]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	f200 80d2 	bhi.w	800d080 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cedc:	2301      	movs	r3, #1
 800cede:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d108      	bne.n	800cefc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ceea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ceec:	f004 fc2a 	bl	8011744 <tcp_zero_window_probe>
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d014      	beq.n	800cf20 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cef6:	2300      	movs	r3, #0
 800cef8:	623b      	str	r3, [r7, #32]
 800cefa:	e011      	b.n	800cf20 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf02:	4619      	mov	r1, r3
 800cf04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf06:	f003 faef 	bl	80104e8 <tcp_split_unsent_seg>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d107      	bne.n	800cf20 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cf10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf12:	f003 fd6f 	bl	80109f4 <tcp_output>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d101      	bne.n	800cf20 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cf20:	6a3b      	ldr	r3, [r7, #32]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	f000 80ac 	beq.w	800d080 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf36:	2b06      	cmp	r3, #6
 800cf38:	f200 80a2 	bhi.w	800d080 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf42:	3301      	adds	r3, #1
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf48:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cf4c:	e098      	b.n	800d080 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	db0f      	blt.n	800cf78 <tcp_slowtmr+0x1f0>
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf5e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d008      	beq.n	800cf78 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	3301      	adds	r3, #1
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	b21a      	sxth	r2, r3
 800cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf76:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf80:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cf84:	429a      	cmp	r2, r3
 800cf86:	db7b      	blt.n	800d080 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cf88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf8a:	f004 f825 	bl	8010fd8 <tcp_rexmit_rto_prepare>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d007      	beq.n	800cfa4 <tcp_slowtmr+0x21c>
 800cf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d171      	bne.n	800d080 <tcp_slowtmr+0x2f8>
 800cf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d06d      	beq.n	800d080 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa6:	7d1b      	ldrb	r3, [r3, #20]
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d03a      	beq.n	800d022 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfb2:	2b0c      	cmp	r3, #12
 800cfb4:	bf28      	it	cs
 800cfb6:	230c      	movcs	r3, #12
 800cfb8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cfc0:	10db      	asrs	r3, r3, #3
 800cfc2:	b21b      	sxth	r3, r3
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cfcc:	4413      	add	r3, r2
 800cfce:	7efa      	ldrb	r2, [r7, #27]
 800cfd0:	4910      	ldr	r1, [pc, #64]	; (800d014 <tcp_slowtmr+0x28c>)
 800cfd2:	5c8a      	ldrb	r2, [r1, r2]
 800cfd4:	4093      	lsls	r3, r2
 800cfd6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	dc1a      	bgt.n	800d018 <tcp_slowtmr+0x290>
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	b21a      	sxth	r2, r3
 800cfe6:	e019      	b.n	800d01c <tcp_slowtmr+0x294>
 800cfe8:	24008154 	.word	0x24008154
 800cfec:	2400816a 	.word	0x2400816a
 800cff0:	24008160 	.word	0x24008160
 800cff4:	0801428c 	.word	0x0801428c
 800cff8:	080145f4 	.word	0x080145f4
 800cffc:	080142f4 	.word	0x080142f4
 800d000:	08014620 	.word	0x08014620
 800d004:	0801464c 	.word	0x0801464c
 800d008:	0801467c 	.word	0x0801467c
 800d00c:	080146b0 	.word	0x080146b0
 800d010:	08015c84 	.word	0x08015c84
 800d014:	08015c74 	.word	0x08015c74
 800d018:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d024:	2200      	movs	r2, #0
 800d026:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d030:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d034:	4293      	cmp	r3, r2
 800d036:	bf28      	it	cs
 800d038:	4613      	movcs	r3, r2
 800d03a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d03c:	8a7b      	ldrh	r3, [r7, #18]
 800d03e:	085b      	lsrs	r3, r3, #1
 800d040:	b29a      	uxth	r2, r3
 800d042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d044:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	b29b      	uxth	r3, r3
 800d056:	429a      	cmp	r2, r3
 800d058:	d206      	bcs.n	800d068 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	b29a      	uxth	r2, r3
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d074:	2200      	movs	r2, #0
 800d076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d07a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d07c:	f004 f81c 	bl	80110b8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d082:	7d1b      	ldrb	r3, [r3, #20]
 800d084:	2b06      	cmp	r3, #6
 800d086:	d111      	bne.n	800d0ac <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08a:	8b5b      	ldrh	r3, [r3, #26]
 800d08c:	f003 0310 	and.w	r3, r3, #16
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00b      	beq.n	800d0ac <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d094:	4b9c      	ldr	r3, [pc, #624]	; (800d308 <tcp_slowtmr+0x580>)
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09a:	6a1b      	ldr	r3, [r3, #32]
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	2b28      	cmp	r3, #40	; 0x28
 800d0a0:	d904      	bls.n	800d0ac <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d0a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ae:	7a5b      	ldrb	r3, [r3, #9]
 800d0b0:	f003 0308 	and.w	r3, r3, #8
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d04a      	beq.n	800d14e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d0bc:	2b04      	cmp	r3, #4
 800d0be:	d003      	beq.n	800d0c8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d0c4:	2b07      	cmp	r3, #7
 800d0c6:	d142      	bne.n	800d14e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d0c8:	4b8f      	ldr	r3, [pc, #572]	; (800d308 <tcp_slowtmr+0x580>)
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	6a1b      	ldr	r3, [r3, #32]
 800d0d0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d0d8:	4b8c      	ldr	r3, [pc, #560]	; (800d30c <tcp_slowtmr+0x584>)
 800d0da:	440b      	add	r3, r1
 800d0dc:	498c      	ldr	r1, [pc, #560]	; (800d310 <tcp_slowtmr+0x588>)
 800d0de:	fba1 1303 	umull	r1, r3, r1, r3
 800d0e2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d90a      	bls.n	800d0fe <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d0f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d0fc:	e027      	b.n	800d14e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d0fe:	4b82      	ldr	r3, [pc, #520]	; (800d308 <tcp_slowtmr+0x580>)
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d110:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d114:	4618      	mov	r0, r3
 800d116:	4b7f      	ldr	r3, [pc, #508]	; (800d314 <tcp_slowtmr+0x58c>)
 800d118:	fb00 f303 	mul.w	r3, r0, r3
 800d11c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d11e:	497c      	ldr	r1, [pc, #496]	; (800d310 <tcp_slowtmr+0x588>)
 800d120:	fba1 1303 	umull	r1, r3, r1, r3
 800d124:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d126:	429a      	cmp	r2, r3
 800d128:	d911      	bls.n	800d14e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d12a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d12c:	f004 faca 	bl	80116c4 <tcp_keepalive>
 800d130:	4603      	mov	r3, r0
 800d132:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d136:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d107      	bne.n	800d14e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d140:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d144:	3301      	adds	r3, #1
 800d146:	b2da      	uxtb	r2, r3
 800d148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d152:	2b00      	cmp	r3, #0
 800d154:	d011      	beq.n	800d17a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d156:	4b6c      	ldr	r3, [pc, #432]	; (800d308 <tcp_slowtmr+0x580>)
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	1ad2      	subs	r2, r2, r3
 800d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d162:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d166:	4619      	mov	r1, r3
 800d168:	460b      	mov	r3, r1
 800d16a:	005b      	lsls	r3, r3, #1
 800d16c:	440b      	add	r3, r1
 800d16e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d170:	429a      	cmp	r2, r3
 800d172:	d302      	bcc.n	800d17a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d176:	f000 fddd 	bl	800dd34 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17c:	7d1b      	ldrb	r3, [r3, #20]
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d10b      	bne.n	800d19a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d182:	4b61      	ldr	r3, [pc, #388]	; (800d308 <tcp_slowtmr+0x580>)
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d188:	6a1b      	ldr	r3, [r3, #32]
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	2b28      	cmp	r3, #40	; 0x28
 800d18e:	d904      	bls.n	800d19a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d194:	3301      	adds	r3, #1
 800d196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19c:	7d1b      	ldrb	r3, [r3, #20]
 800d19e:	2b09      	cmp	r3, #9
 800d1a0:	d10b      	bne.n	800d1ba <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d1a2:	4b59      	ldr	r3, [pc, #356]	; (800d308 <tcp_slowtmr+0x580>)
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a8:	6a1b      	ldr	r3, [r3, #32]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	2bf0      	cmp	r3, #240	; 0xf0
 800d1ae:	d904      	bls.n	800d1ba <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d1ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d060      	beq.n	800d284 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1c8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d1ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1cc:	f000 fbfe 	bl	800d9cc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d010      	beq.n	800d1f8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d1d6:	4b50      	ldr	r3, [pc, #320]	; (800d318 <tcp_slowtmr+0x590>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d106      	bne.n	800d1ee <tcp_slowtmr+0x466>
 800d1e0:	4b4e      	ldr	r3, [pc, #312]	; (800d31c <tcp_slowtmr+0x594>)
 800d1e2:	f240 526d 	movw	r2, #1389	; 0x56d
 800d1e6:	494e      	ldr	r1, [pc, #312]	; (800d320 <tcp_slowtmr+0x598>)
 800d1e8:	484e      	ldr	r0, [pc, #312]	; (800d324 <tcp_slowtmr+0x59c>)
 800d1ea:	f004 fe85 	bl	8011ef8 <iprintf>
        prev->next = pcb->next;
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	68da      	ldr	r2, [r3, #12]
 800d1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f4:	60da      	str	r2, [r3, #12]
 800d1f6:	e00f      	b.n	800d218 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d1f8:	4b47      	ldr	r3, [pc, #284]	; (800d318 <tcp_slowtmr+0x590>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d006      	beq.n	800d210 <tcp_slowtmr+0x488>
 800d202:	4b46      	ldr	r3, [pc, #280]	; (800d31c <tcp_slowtmr+0x594>)
 800d204:	f240 5271 	movw	r2, #1393	; 0x571
 800d208:	4947      	ldr	r1, [pc, #284]	; (800d328 <tcp_slowtmr+0x5a0>)
 800d20a:	4846      	ldr	r0, [pc, #280]	; (800d324 <tcp_slowtmr+0x59c>)
 800d20c:	f004 fe74 	bl	8011ef8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	4a40      	ldr	r2, [pc, #256]	; (800d318 <tcp_slowtmr+0x590>)
 800d216:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d218:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d013      	beq.n	800d248 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d222:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d226:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d228:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22c:	3304      	adds	r3, #4
 800d22e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d230:	8ad2      	ldrh	r2, [r2, #22]
 800d232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d234:	8b09      	ldrh	r1, [r1, #24]
 800d236:	9102      	str	r1, [sp, #8]
 800d238:	9201      	str	r2, [sp, #4]
 800d23a:	9300      	str	r3, [sp, #0]
 800d23c:	462b      	mov	r3, r5
 800d23e:	4622      	mov	r2, r4
 800d240:	4601      	mov	r1, r0
 800d242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d244:	f004 f98a 	bl	801155c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	7d1b      	ldrb	r3, [r3, #20]
 800d252:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d256:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d25e:	6838      	ldr	r0, [r7, #0]
 800d260:	f7ff f9f4 	bl	800c64c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d264:	4b31      	ldr	r3, [pc, #196]	; (800d32c <tcp_slowtmr+0x5a4>)
 800d266:	2200      	movs	r2, #0
 800d268:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d004      	beq.n	800d27a <tcp_slowtmr+0x4f2>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f06f 010c 	mvn.w	r1, #12
 800d276:	68b8      	ldr	r0, [r7, #8]
 800d278:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d27a:	4b2c      	ldr	r3, [pc, #176]	; (800d32c <tcp_slowtmr+0x5a4>)
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d037      	beq.n	800d2f2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d282:	e592      	b.n	800cdaa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d286:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d290:	7f1b      	ldrb	r3, [r3, #28]
 800d292:	3301      	adds	r3, #1
 800d294:	b2da      	uxtb	r2, r3
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29c:	7f1a      	ldrb	r2, [r3, #28]
 800d29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a0:	7f5b      	ldrb	r3, [r3, #29]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d325      	bcc.n	800d2f2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d2ac:	4b1f      	ldr	r3, [pc, #124]	; (800d32c <tcp_slowtmr+0x5a4>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00b      	beq.n	800d2d4 <tcp_slowtmr+0x54c>
 800d2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2c4:	6912      	ldr	r2, [r2, #16]
 800d2c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	4798      	blx	r3
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d2d2:	e002      	b.n	800d2da <tcp_slowtmr+0x552>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d2da:	4b14      	ldr	r3, [pc, #80]	; (800d32c <tcp_slowtmr+0x5a4>)
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d000      	beq.n	800d2e4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d2e2:	e562      	b.n	800cdaa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d2e4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d102      	bne.n	800d2f2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ee:	f003 fb81 	bl	80109f4 <tcp_output>
  while (pcb != NULL) {
 800d2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f47f ad5e 	bne.w	800cdb6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d2fe:	4b0c      	ldr	r3, [pc, #48]	; (800d330 <tcp_slowtmr+0x5a8>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d304:	e069      	b.n	800d3da <tcp_slowtmr+0x652>
 800d306:	bf00      	nop
 800d308:	24008154 	.word	0x24008154
 800d30c:	000a4cb8 	.word	0x000a4cb8
 800d310:	10624dd3 	.word	0x10624dd3
 800d314:	000124f8 	.word	0x000124f8
 800d318:	24008160 	.word	0x24008160
 800d31c:	0801428c 	.word	0x0801428c
 800d320:	080146e8 	.word	0x080146e8
 800d324:	080142f4 	.word	0x080142f4
 800d328:	08014714 	.word	0x08014714
 800d32c:	24008168 	.word	0x24008168
 800d330:	24008164 	.word	0x24008164
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d336:	7d1b      	ldrb	r3, [r3, #20]
 800d338:	2b0a      	cmp	r3, #10
 800d33a:	d006      	beq.n	800d34a <tcp_slowtmr+0x5c2>
 800d33c:	4b2b      	ldr	r3, [pc, #172]	; (800d3ec <tcp_slowtmr+0x664>)
 800d33e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d342:	492b      	ldr	r1, [pc, #172]	; (800d3f0 <tcp_slowtmr+0x668>)
 800d344:	482b      	ldr	r0, [pc, #172]	; (800d3f4 <tcp_slowtmr+0x66c>)
 800d346:	f004 fdd7 	bl	8011ef8 <iprintf>
    pcb_remove = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d350:	4b29      	ldr	r3, [pc, #164]	; (800d3f8 <tcp_slowtmr+0x670>)
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	1ad3      	subs	r3, r2, r3
 800d35a:	2bf0      	cmp	r3, #240	; 0xf0
 800d35c:	d904      	bls.n	800d368 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d35e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d362:	3301      	adds	r3, #1
 800d364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d02f      	beq.n	800d3d0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d372:	f000 fb2b 	bl	800d9cc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d010      	beq.n	800d39e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d37c:	4b1f      	ldr	r3, [pc, #124]	; (800d3fc <tcp_slowtmr+0x674>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d382:	429a      	cmp	r2, r3
 800d384:	d106      	bne.n	800d394 <tcp_slowtmr+0x60c>
 800d386:	4b19      	ldr	r3, [pc, #100]	; (800d3ec <tcp_slowtmr+0x664>)
 800d388:	f240 52af 	movw	r2, #1455	; 0x5af
 800d38c:	491c      	ldr	r1, [pc, #112]	; (800d400 <tcp_slowtmr+0x678>)
 800d38e:	4819      	ldr	r0, [pc, #100]	; (800d3f4 <tcp_slowtmr+0x66c>)
 800d390:	f004 fdb2 	bl	8011ef8 <iprintf>
        prev->next = pcb->next;
 800d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d396:	68da      	ldr	r2, [r3, #12]
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	60da      	str	r2, [r3, #12]
 800d39c:	e00f      	b.n	800d3be <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d39e:	4b17      	ldr	r3, [pc, #92]	; (800d3fc <tcp_slowtmr+0x674>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d006      	beq.n	800d3b6 <tcp_slowtmr+0x62e>
 800d3a8:	4b10      	ldr	r3, [pc, #64]	; (800d3ec <tcp_slowtmr+0x664>)
 800d3aa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d3ae:	4915      	ldr	r1, [pc, #84]	; (800d404 <tcp_slowtmr+0x67c>)
 800d3b0:	4810      	ldr	r0, [pc, #64]	; (800d3f4 <tcp_slowtmr+0x66c>)
 800d3b2:	f004 fda1 	bl	8011ef8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	4a10      	ldr	r2, [pc, #64]	; (800d3fc <tcp_slowtmr+0x674>)
 800d3bc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d3c8:	69f8      	ldr	r0, [r7, #28]
 800d3ca:	f7ff f93f 	bl	800c64c <tcp_free>
 800d3ce:	e004      	b.n	800d3da <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1a9      	bne.n	800d334 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d3e0:	bf00      	nop
 800d3e2:	bf00      	nop
 800d3e4:	3730      	adds	r7, #48	; 0x30
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bdb0      	pop	{r4, r5, r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	0801428c 	.word	0x0801428c
 800d3f0:	08014740 	.word	0x08014740
 800d3f4:	080142f4 	.word	0x080142f4
 800d3f8:	24008154 	.word	0x24008154
 800d3fc:	24008164 	.word	0x24008164
 800d400:	08014770 	.word	0x08014770
 800d404:	08014798 	.word	0x08014798

0800d408 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d40e:	4b2d      	ldr	r3, [pc, #180]	; (800d4c4 <tcp_fasttmr+0xbc>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	3301      	adds	r3, #1
 800d414:	b2da      	uxtb	r2, r3
 800d416:	4b2b      	ldr	r3, [pc, #172]	; (800d4c4 <tcp_fasttmr+0xbc>)
 800d418:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d41a:	4b2b      	ldr	r3, [pc, #172]	; (800d4c8 <tcp_fasttmr+0xc0>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d420:	e048      	b.n	800d4b4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	7f9a      	ldrb	r2, [r3, #30]
 800d426:	4b27      	ldr	r3, [pc, #156]	; (800d4c4 <tcp_fasttmr+0xbc>)
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d03f      	beq.n	800d4ae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d42e:	4b25      	ldr	r3, [pc, #148]	; (800d4c4 <tcp_fasttmr+0xbc>)
 800d430:	781a      	ldrb	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	8b5b      	ldrh	r3, [r3, #26]
 800d43a:	f003 0301 	and.w	r3, r3, #1
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d010      	beq.n	800d464 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	8b5b      	ldrh	r3, [r3, #26]
 800d446:	f043 0302 	orr.w	r3, r3, #2
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f003 facf 	bl	80109f4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	8b5b      	ldrh	r3, [r3, #26]
 800d45a:	f023 0303 	bic.w	r3, r3, #3
 800d45e:	b29a      	uxth	r2, r3
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	8b5b      	ldrh	r3, [r3, #26]
 800d468:	f003 0308 	and.w	r3, r3, #8
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d009      	beq.n	800d484 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	8b5b      	ldrh	r3, [r3, #26]
 800d474:	f023 0308 	bic.w	r3, r3, #8
 800d478:	b29a      	uxth	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f7ff fa78 	bl	800c974 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00a      	beq.n	800d4a8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d492:	4b0e      	ldr	r3, [pc, #56]	; (800d4cc <tcp_fasttmr+0xc4>)
 800d494:	2200      	movs	r2, #0
 800d496:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 f819 	bl	800d4d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d49e:	4b0b      	ldr	r3, [pc, #44]	; (800d4cc <tcp_fasttmr+0xc4>)
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d000      	beq.n	800d4a8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d4a6:	e7b8      	b.n	800d41a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	607b      	str	r3, [r7, #4]
 800d4ac:	e002      	b.n	800d4b4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d1b3      	bne.n	800d422 <tcp_fasttmr+0x1a>
    }
  }
}
 800d4ba:	bf00      	nop
 800d4bc:	bf00      	nop
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	2400816a 	.word	0x2400816a
 800d4c8:	24008160 	.word	0x24008160
 800d4cc:	24008168 	.word	0x24008168

0800d4d0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d4d0:	b590      	push	{r4, r7, lr}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d109      	bne.n	800d4f2 <tcp_process_refused_data+0x22>
 800d4de:	4b37      	ldr	r3, [pc, #220]	; (800d5bc <tcp_process_refused_data+0xec>)
 800d4e0:	f240 6209 	movw	r2, #1545	; 0x609
 800d4e4:	4936      	ldr	r1, [pc, #216]	; (800d5c0 <tcp_process_refused_data+0xf0>)
 800d4e6:	4837      	ldr	r0, [pc, #220]	; (800d5c4 <tcp_process_refused_data+0xf4>)
 800d4e8:	f004 fd06 	bl	8011ef8 <iprintf>
 800d4ec:	f06f 030f 	mvn.w	r3, #15
 800d4f0:	e060      	b.n	800d5b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4f6:	7b5b      	ldrb	r3, [r3, #13]
 800d4f8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4fe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00b      	beq.n	800d528 <tcp_process_refused_data+0x58>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6918      	ldr	r0, [r3, #16]
 800d51a:	2300      	movs	r3, #0
 800d51c:	68ba      	ldr	r2, [r7, #8]
 800d51e:	6879      	ldr	r1, [r7, #4]
 800d520:	47a0      	blx	r4
 800d522:	4603      	mov	r3, r0
 800d524:	73fb      	strb	r3, [r7, #15]
 800d526:	e007      	b.n	800d538 <tcp_process_refused_data+0x68>
 800d528:	2300      	movs	r3, #0
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	2000      	movs	r0, #0
 800d530:	f000 f8a4 	bl	800d67c <tcp_recv_null>
 800d534:	4603      	mov	r3, r0
 800d536:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d12a      	bne.n	800d596 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d540:	7bbb      	ldrb	r3, [r7, #14]
 800d542:	f003 0320 	and.w	r3, r3, #32
 800d546:	2b00      	cmp	r3, #0
 800d548:	d033      	beq.n	800d5b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d54e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d552:	d005      	beq.n	800d560 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d558:	3301      	adds	r3, #1
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00b      	beq.n	800d582 <tcp_process_refused_data+0xb2>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6918      	ldr	r0, [r3, #16]
 800d574:	2300      	movs	r3, #0
 800d576:	2200      	movs	r2, #0
 800d578:	6879      	ldr	r1, [r7, #4]
 800d57a:	47a0      	blx	r4
 800d57c:	4603      	mov	r3, r0
 800d57e:	73fb      	strb	r3, [r7, #15]
 800d580:	e001      	b.n	800d586 <tcp_process_refused_data+0xb6>
 800d582:	2300      	movs	r3, #0
 800d584:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d58a:	f113 0f0d 	cmn.w	r3, #13
 800d58e:	d110      	bne.n	800d5b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d590:	f06f 030c 	mvn.w	r3, #12
 800d594:	e00e      	b.n	800d5b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d59a:	f113 0f0d 	cmn.w	r3, #13
 800d59e:	d102      	bne.n	800d5a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d5a0:	f06f 030c 	mvn.w	r3, #12
 800d5a4:	e006      	b.n	800d5b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	68ba      	ldr	r2, [r7, #8]
 800d5aa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d5ac:	f06f 0304 	mvn.w	r3, #4
 800d5b0:	e000      	b.n	800d5b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3714      	adds	r7, #20
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd90      	pop	{r4, r7, pc}
 800d5bc:	0801428c 	.word	0x0801428c
 800d5c0:	080147c0 	.word	0x080147c0
 800d5c4:	080142f4 	.word	0x080142f4

0800d5c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d5d0:	e007      	b.n	800d5e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 f80a 	bl	800d5f2 <tcp_seg_free>
    seg = next;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d1f4      	bne.n	800d5d2 <tcp_segs_free+0xa>
  }
}
 800d5e8:	bf00      	nop
 800d5ea:	bf00      	nop
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b082      	sub	sp, #8
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00c      	beq.n	800d61a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d004      	beq.n	800d612 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fe fd7d 	bl	800c10c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d612:	6879      	ldr	r1, [r7, #4]
 800d614:	2003      	movs	r0, #3
 800d616:	f7fd ff23 	bl	800b460 <memp_free>
  }
}
 800d61a:	bf00      	nop
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
	...

0800d624 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d106      	bne.n	800d640 <tcp_seg_copy+0x1c>
 800d632:	4b0f      	ldr	r3, [pc, #60]	; (800d670 <tcp_seg_copy+0x4c>)
 800d634:	f240 6282 	movw	r2, #1666	; 0x682
 800d638:	490e      	ldr	r1, [pc, #56]	; (800d674 <tcp_seg_copy+0x50>)
 800d63a:	480f      	ldr	r0, [pc, #60]	; (800d678 <tcp_seg_copy+0x54>)
 800d63c:	f004 fc5c 	bl	8011ef8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d640:	2003      	movs	r0, #3
 800d642:	f7fd fe9d 	bl	800b380 <memp_malloc>
 800d646:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d101      	bne.n	800d652 <tcp_seg_copy+0x2e>
    return NULL;
 800d64e:	2300      	movs	r3, #0
 800d650:	e00a      	b.n	800d668 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d652:	2210      	movs	r2, #16
 800d654:	6879      	ldr	r1, [r7, #4]
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f004 fc38 	bl	8011ecc <memcpy>
  pbuf_ref(cseg->p);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	4618      	mov	r0, r3
 800d662:	f7fe fdf3 	bl	800c24c <pbuf_ref>
  return cseg;
 800d666:	68fb      	ldr	r3, [r7, #12]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	0801428c 	.word	0x0801428c
 800d674:	08014804 	.word	0x08014804
 800d678:	080142f4 	.word	0x080142f4

0800d67c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	607a      	str	r2, [r7, #4]
 800d688:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d109      	bne.n	800d6a4 <tcp_recv_null+0x28>
 800d690:	4b12      	ldr	r3, [pc, #72]	; (800d6dc <tcp_recv_null+0x60>)
 800d692:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d696:	4912      	ldr	r1, [pc, #72]	; (800d6e0 <tcp_recv_null+0x64>)
 800d698:	4812      	ldr	r0, [pc, #72]	; (800d6e4 <tcp_recv_null+0x68>)
 800d69a:	f004 fc2d 	bl	8011ef8 <iprintf>
 800d69e:	f06f 030f 	mvn.w	r3, #15
 800d6a2:	e016      	b.n	800d6d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d009      	beq.n	800d6be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	891b      	ldrh	r3, [r3, #8]
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	68b8      	ldr	r0, [r7, #8]
 800d6b2:	f7ff fb19 	bl	800cce8 <tcp_recved>
    pbuf_free(p);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7fe fd28 	bl	800c10c <pbuf_free>
 800d6bc:	e008      	b.n	800d6d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d6be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d104      	bne.n	800d6d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d6c6:	68b8      	ldr	r0, [r7, #8]
 800d6c8:	f7ff f9be 	bl	800ca48 <tcp_close>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	e000      	b.n	800d6d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d6d0:	2300      	movs	r3, #0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	0801428c 	.word	0x0801428c
 800d6e0:	08014820 	.word	0x08014820
 800d6e4:	080142f4 	.word	0x080142f4

0800d6e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d6f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	db01      	blt.n	800d6fe <tcp_kill_prio+0x16>
 800d6fa:	79fb      	ldrb	r3, [r7, #7]
 800d6fc:	e000      	b.n	800d700 <tcp_kill_prio+0x18>
 800d6fe:	237f      	movs	r3, #127	; 0x7f
 800d700:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d702:	7afb      	ldrb	r3, [r7, #11]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d034      	beq.n	800d772 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d708:	7afb      	ldrb	r3, [r7, #11]
 800d70a:	3b01      	subs	r3, #1
 800d70c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d70e:	2300      	movs	r3, #0
 800d710:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d712:	2300      	movs	r3, #0
 800d714:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d716:	4b19      	ldr	r3, [pc, #100]	; (800d77c <tcp_kill_prio+0x94>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	617b      	str	r3, [r7, #20]
 800d71c:	e01f      	b.n	800d75e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	7d5b      	ldrb	r3, [r3, #21]
 800d722:	7afa      	ldrb	r2, [r7, #11]
 800d724:	429a      	cmp	r2, r3
 800d726:	d80c      	bhi.n	800d742 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d72c:	7afa      	ldrb	r2, [r7, #11]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d112      	bne.n	800d758 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d732:	4b13      	ldr	r3, [pc, #76]	; (800d780 <tcp_kill_prio+0x98>)
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	6a1b      	ldr	r3, [r3, #32]
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d80a      	bhi.n	800d758 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d742:	4b0f      	ldr	r3, [pc, #60]	; (800d780 <tcp_kill_prio+0x98>)
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	7d5b      	ldrb	r3, [r3, #21]
 800d756:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	617b      	str	r3, [r7, #20]
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1dc      	bne.n	800d71e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d004      	beq.n	800d774 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d76a:	6938      	ldr	r0, [r7, #16]
 800d76c:	f7ff fa56 	bl	800cc1c <tcp_abort>
 800d770:	e000      	b.n	800d774 <tcp_kill_prio+0x8c>
    return;
 800d772:	bf00      	nop
  }
}
 800d774:	3718      	adds	r7, #24
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	24008160 	.word	0x24008160
 800d780:	24008154 	.word	0x24008154

0800d784 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b086      	sub	sp, #24
 800d788:	af00      	add	r7, sp, #0
 800d78a:	4603      	mov	r3, r0
 800d78c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d78e:	79fb      	ldrb	r3, [r7, #7]
 800d790:	2b08      	cmp	r3, #8
 800d792:	d009      	beq.n	800d7a8 <tcp_kill_state+0x24>
 800d794:	79fb      	ldrb	r3, [r7, #7]
 800d796:	2b09      	cmp	r3, #9
 800d798:	d006      	beq.n	800d7a8 <tcp_kill_state+0x24>
 800d79a:	4b1a      	ldr	r3, [pc, #104]	; (800d804 <tcp_kill_state+0x80>)
 800d79c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d7a0:	4919      	ldr	r1, [pc, #100]	; (800d808 <tcp_kill_state+0x84>)
 800d7a2:	481a      	ldr	r0, [pc, #104]	; (800d80c <tcp_kill_state+0x88>)
 800d7a4:	f004 fba8 	bl	8011ef8 <iprintf>

  inactivity = 0;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7b0:	4b17      	ldr	r3, [pc, #92]	; (800d810 <tcp_kill_state+0x8c>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	617b      	str	r3, [r7, #20]
 800d7b6:	e017      	b.n	800d7e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	7d1b      	ldrb	r3, [r3, #20]
 800d7bc:	79fa      	ldrb	r2, [r7, #7]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d10f      	bne.n	800d7e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d7c2:	4b14      	ldr	r3, [pc, #80]	; (800d814 <tcp_kill_state+0x90>)
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	6a1b      	ldr	r3, [r3, #32]
 800d7ca:	1ad3      	subs	r3, r2, r3
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d807      	bhi.n	800d7e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d7d2:	4b10      	ldr	r3, [pc, #64]	; (800d814 <tcp_kill_state+0x90>)
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	6a1b      	ldr	r3, [r3, #32]
 800d7da:	1ad3      	subs	r3, r2, r3
 800d7dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	617b      	str	r3, [r7, #20]
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1e4      	bne.n	800d7b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d003      	beq.n	800d7fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	6938      	ldr	r0, [r7, #16]
 800d7f8:	f7ff f952 	bl	800caa0 <tcp_abandon>
  }
}
 800d7fc:	bf00      	nop
 800d7fe:	3718      	adds	r7, #24
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	0801428c 	.word	0x0801428c
 800d808:	0801483c 	.word	0x0801483c
 800d80c:	080142f4 	.word	0x080142f4
 800d810:	24008160 	.word	0x24008160
 800d814:	24008154 	.word	0x24008154

0800d818 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d822:	2300      	movs	r3, #0
 800d824:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d826:	4b12      	ldr	r3, [pc, #72]	; (800d870 <tcp_kill_timewait+0x58>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	e012      	b.n	800d854 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d82e:	4b11      	ldr	r3, [pc, #68]	; (800d874 <tcp_kill_timewait+0x5c>)
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6a1b      	ldr	r3, [r3, #32]
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d807      	bhi.n	800d84e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d83e:	4b0d      	ldr	r3, [pc, #52]	; (800d874 <tcp_kill_timewait+0x5c>)
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6a1b      	ldr	r3, [r3, #32]
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	60fb      	str	r3, [r7, #12]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d1e9      	bne.n	800d82e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d002      	beq.n	800d866 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d860:	68b8      	ldr	r0, [r7, #8]
 800d862:	f7ff f9db 	bl	800cc1c <tcp_abort>
  }
}
 800d866:	bf00      	nop
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	24008164 	.word	0x24008164
 800d874:	24008154 	.word	0x24008154

0800d878 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d87e:	4b10      	ldr	r3, [pc, #64]	; (800d8c0 <tcp_handle_closepend+0x48>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d884:	e014      	b.n	800d8b0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	8b5b      	ldrh	r3, [r3, #26]
 800d890:	f003 0308 	and.w	r3, r3, #8
 800d894:	2b00      	cmp	r3, #0
 800d896:	d009      	beq.n	800d8ac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	8b5b      	ldrh	r3, [r3, #26]
 800d89c:	f023 0308 	bic.w	r3, r3, #8
 800d8a0:	b29a      	uxth	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7ff f864 	bl	800c974 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d1e7      	bne.n	800d886 <tcp_handle_closepend+0xe>
  }
}
 800d8b6:	bf00      	nop
 800d8b8:	bf00      	nop
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	24008160 	.word	0x24008160

0800d8c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d8ce:	2001      	movs	r0, #1
 800d8d0:	f7fd fd56 	bl	800b380 <memp_malloc>
 800d8d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d126      	bne.n	800d92a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d8dc:	f7ff ffcc 	bl	800d878 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d8e0:	f7ff ff9a 	bl	800d818 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d8e4:	2001      	movs	r0, #1
 800d8e6:	f7fd fd4b 	bl	800b380 <memp_malloc>
 800d8ea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d11b      	bne.n	800d92a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d8f2:	2009      	movs	r0, #9
 800d8f4:	f7ff ff46 	bl	800d784 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d8f8:	2001      	movs	r0, #1
 800d8fa:	f7fd fd41 	bl	800b380 <memp_malloc>
 800d8fe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d111      	bne.n	800d92a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d906:	2008      	movs	r0, #8
 800d908:	f7ff ff3c 	bl	800d784 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d90c:	2001      	movs	r0, #1
 800d90e:	f7fd fd37 	bl	800b380 <memp_malloc>
 800d912:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d107      	bne.n	800d92a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d91a:	79fb      	ldrb	r3, [r7, #7]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7ff fee3 	bl	800d6e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d922:	2001      	movs	r0, #1
 800d924:	f7fd fd2c 	bl	800b380 <memp_malloc>
 800d928:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d03f      	beq.n	800d9b0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d930:	229c      	movs	r2, #156	; 0x9c
 800d932:	2100      	movs	r1, #0
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f004 fad7 	bl	8011ee8 <memset>
    pcb->prio = prio;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	79fa      	ldrb	r2, [r7, #7]
 800d93e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d946:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d950:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	22ff      	movs	r2, #255	; 0xff
 800d95e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d966:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2206      	movs	r2, #6
 800d96c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2206      	movs	r2, #6
 800d974:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d97c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2201      	movs	r2, #1
 800d982:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d986:	4b0d      	ldr	r3, [pc, #52]	; (800d9bc <tcp_alloc+0xf8>)
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d98e:	4b0c      	ldr	r3, [pc, #48]	; (800d9c0 <tcp_alloc+0xfc>)
 800d990:	781a      	ldrb	r2, [r3, #0]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d99c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	4a08      	ldr	r2, [pc, #32]	; (800d9c4 <tcp_alloc+0x100>)
 800d9a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	4a07      	ldr	r2, [pc, #28]	; (800d9c8 <tcp_alloc+0x104>)
 800d9ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	24008154 	.word	0x24008154
 800d9c0:	2400816a 	.word	0x2400816a
 800d9c4:	0800d67d 	.word	0x0800d67d
 800d9c8:	006ddd00 	.word	0x006ddd00

0800d9cc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d107      	bne.n	800d9ea <tcp_pcb_purge+0x1e>
 800d9da:	4b21      	ldr	r3, [pc, #132]	; (800da60 <tcp_pcb_purge+0x94>)
 800d9dc:	f640 0251 	movw	r2, #2129	; 0x851
 800d9e0:	4920      	ldr	r1, [pc, #128]	; (800da64 <tcp_pcb_purge+0x98>)
 800d9e2:	4821      	ldr	r0, [pc, #132]	; (800da68 <tcp_pcb_purge+0x9c>)
 800d9e4:	f004 fa88 	bl	8011ef8 <iprintf>
 800d9e8:	e037      	b.n	800da5a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	7d1b      	ldrb	r3, [r3, #20]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d033      	beq.n	800da5a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d9f6:	2b0a      	cmp	r3, #10
 800d9f8:	d02f      	beq.n	800da5a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d02b      	beq.n	800da5a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da06:	2b00      	cmp	r3, #0
 800da08:	d007      	beq.n	800da1a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da0e:	4618      	mov	r0, r3
 800da10:	f7fe fb7c 	bl	800c10c <pbuf_free>
      pcb->refused_data = NULL;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d002      	beq.n	800da28 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f986 	bl	800dd34 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da2e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da34:	4618      	mov	r0, r3
 800da36:	f7ff fdc7 	bl	800d5c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da3e:	4618      	mov	r0, r3
 800da40:	f7ff fdc2 	bl	800d5c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	66da      	str	r2, [r3, #108]	; 0x6c
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800da5a:	3708      	adds	r7, #8
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	0801428c 	.word	0x0801428c
 800da64:	080148fc 	.word	0x080148fc
 800da68:	080142f4 	.word	0x080142f4

0800da6c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d106      	bne.n	800da8a <tcp_pcb_remove+0x1e>
 800da7c:	4b3e      	ldr	r3, [pc, #248]	; (800db78 <tcp_pcb_remove+0x10c>)
 800da7e:	f640 0283 	movw	r2, #2179	; 0x883
 800da82:	493e      	ldr	r1, [pc, #248]	; (800db7c <tcp_pcb_remove+0x110>)
 800da84:	483e      	ldr	r0, [pc, #248]	; (800db80 <tcp_pcb_remove+0x114>)
 800da86:	f004 fa37 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d106      	bne.n	800da9e <tcp_pcb_remove+0x32>
 800da90:	4b39      	ldr	r3, [pc, #228]	; (800db78 <tcp_pcb_remove+0x10c>)
 800da92:	f640 0284 	movw	r2, #2180	; 0x884
 800da96:	493b      	ldr	r1, [pc, #236]	; (800db84 <tcp_pcb_remove+0x118>)
 800da98:	4839      	ldr	r0, [pc, #228]	; (800db80 <tcp_pcb_remove+0x114>)
 800da9a:	f004 fa2d 	bl	8011ef8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	683a      	ldr	r2, [r7, #0]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d105      	bne.n	800dab4 <tcp_pcb_remove+0x48>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	68da      	ldr	r2, [r3, #12]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	e013      	b.n	800dadc <tcp_pcb_remove+0x70>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	60fb      	str	r3, [r7, #12]
 800daba:	e00c      	b.n	800dad6 <tcp_pcb_remove+0x6a>
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	683a      	ldr	r2, [r7, #0]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d104      	bne.n	800dad0 <tcp_pcb_remove+0x64>
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	68da      	ldr	r2, [r3, #12]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	60da      	str	r2, [r3, #12]
 800dace:	e005      	b.n	800dadc <tcp_pcb_remove+0x70>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	60fb      	str	r3, [r7, #12]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1ef      	bne.n	800dabc <tcp_pcb_remove+0x50>
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	2200      	movs	r2, #0
 800dae0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dae2:	6838      	ldr	r0, [r7, #0]
 800dae4:	f7ff ff72 	bl	800d9cc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	7d1b      	ldrb	r3, [r3, #20]
 800daec:	2b0a      	cmp	r3, #10
 800daee:	d013      	beq.n	800db18 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d00f      	beq.n	800db18 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	8b5b      	ldrh	r3, [r3, #26]
 800dafc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800db00:	2b00      	cmp	r3, #0
 800db02:	d009      	beq.n	800db18 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	8b5b      	ldrh	r3, [r3, #26]
 800db08:	f043 0302 	orr.w	r3, r3, #2
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db12:	6838      	ldr	r0, [r7, #0]
 800db14:	f002 ff6e 	bl	80109f4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	7d1b      	ldrb	r3, [r3, #20]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d020      	beq.n	800db62 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db24:	2b00      	cmp	r3, #0
 800db26:	d006      	beq.n	800db36 <tcp_pcb_remove+0xca>
 800db28:	4b13      	ldr	r3, [pc, #76]	; (800db78 <tcp_pcb_remove+0x10c>)
 800db2a:	f640 0293 	movw	r2, #2195	; 0x893
 800db2e:	4916      	ldr	r1, [pc, #88]	; (800db88 <tcp_pcb_remove+0x11c>)
 800db30:	4813      	ldr	r0, [pc, #76]	; (800db80 <tcp_pcb_remove+0x114>)
 800db32:	f004 f9e1 	bl	8011ef8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d006      	beq.n	800db4c <tcp_pcb_remove+0xe0>
 800db3e:	4b0e      	ldr	r3, [pc, #56]	; (800db78 <tcp_pcb_remove+0x10c>)
 800db40:	f640 0294 	movw	r2, #2196	; 0x894
 800db44:	4911      	ldr	r1, [pc, #68]	; (800db8c <tcp_pcb_remove+0x120>)
 800db46:	480e      	ldr	r0, [pc, #56]	; (800db80 <tcp_pcb_remove+0x114>)
 800db48:	f004 f9d6 	bl	8011ef8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db50:	2b00      	cmp	r3, #0
 800db52:	d006      	beq.n	800db62 <tcp_pcb_remove+0xf6>
 800db54:	4b08      	ldr	r3, [pc, #32]	; (800db78 <tcp_pcb_remove+0x10c>)
 800db56:	f640 0296 	movw	r2, #2198	; 0x896
 800db5a:	490d      	ldr	r1, [pc, #52]	; (800db90 <tcp_pcb_remove+0x124>)
 800db5c:	4808      	ldr	r0, [pc, #32]	; (800db80 <tcp_pcb_remove+0x114>)
 800db5e:	f004 f9cb 	bl	8011ef8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	2200      	movs	r2, #0
 800db66:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	2200      	movs	r2, #0
 800db6c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800db6e:	bf00      	nop
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	0801428c 	.word	0x0801428c
 800db7c:	08014918 	.word	0x08014918
 800db80:	080142f4 	.word	0x080142f4
 800db84:	08014934 	.word	0x08014934
 800db88:	08014954 	.word	0x08014954
 800db8c:	0801496c 	.word	0x0801496c
 800db90:	08014988 	.word	0x08014988

0800db94 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d106      	bne.n	800dbb0 <tcp_next_iss+0x1c>
 800dba2:	4b0a      	ldr	r3, [pc, #40]	; (800dbcc <tcp_next_iss+0x38>)
 800dba4:	f640 02af 	movw	r2, #2223	; 0x8af
 800dba8:	4909      	ldr	r1, [pc, #36]	; (800dbd0 <tcp_next_iss+0x3c>)
 800dbaa:	480a      	ldr	r0, [pc, #40]	; (800dbd4 <tcp_next_iss+0x40>)
 800dbac:	f004 f9a4 	bl	8011ef8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dbb0:	4b09      	ldr	r3, [pc, #36]	; (800dbd8 <tcp_next_iss+0x44>)
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	4b09      	ldr	r3, [pc, #36]	; (800dbdc <tcp_next_iss+0x48>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4413      	add	r3, r2
 800dbba:	4a07      	ldr	r2, [pc, #28]	; (800dbd8 <tcp_next_iss+0x44>)
 800dbbc:	6013      	str	r3, [r2, #0]
  return iss;
 800dbbe:	4b06      	ldr	r3, [pc, #24]	; (800dbd8 <tcp_next_iss+0x44>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3708      	adds	r7, #8
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	0801428c 	.word	0x0801428c
 800dbd0:	080149a0 	.word	0x080149a0
 800dbd4:	080142f4 	.word	0x080142f4
 800dbd8:	24000028 	.word	0x24000028
 800dbdc:	24008154 	.word	0x24008154

0800dbe0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	607a      	str	r2, [r7, #4]
 800dbec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d106      	bne.n	800dc02 <tcp_eff_send_mss_netif+0x22>
 800dbf4:	4b14      	ldr	r3, [pc, #80]	; (800dc48 <tcp_eff_send_mss_netif+0x68>)
 800dbf6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dbfa:	4914      	ldr	r1, [pc, #80]	; (800dc4c <tcp_eff_send_mss_netif+0x6c>)
 800dbfc:	4814      	ldr	r0, [pc, #80]	; (800dc50 <tcp_eff_send_mss_netif+0x70>)
 800dbfe:	f004 f97b 	bl	8011ef8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d101      	bne.n	800dc0c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dc08:	89fb      	ldrh	r3, [r7, #14]
 800dc0a:	e019      	b.n	800dc40 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc10:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dc12:	8afb      	ldrh	r3, [r7, #22]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d012      	beq.n	800dc3e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dc18:	2328      	movs	r3, #40	; 0x28
 800dc1a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dc1c:	8afa      	ldrh	r2, [r7, #22]
 800dc1e:	8abb      	ldrh	r3, [r7, #20]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d904      	bls.n	800dc2e <tcp_eff_send_mss_netif+0x4e>
 800dc24:	8afa      	ldrh	r2, [r7, #22]
 800dc26:	8abb      	ldrh	r3, [r7, #20]
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	e000      	b.n	800dc30 <tcp_eff_send_mss_netif+0x50>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dc32:	8a7a      	ldrh	r2, [r7, #18]
 800dc34:	89fb      	ldrh	r3, [r7, #14]
 800dc36:	4293      	cmp	r3, r2
 800dc38:	bf28      	it	cs
 800dc3a:	4613      	movcs	r3, r2
 800dc3c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dc3e:	89fb      	ldrh	r3, [r7, #14]
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3718      	adds	r7, #24
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	0801428c 	.word	0x0801428c
 800dc4c:	080149bc 	.word	0x080149bc
 800dc50:	080142f4 	.word	0x080142f4

0800dc54 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d119      	bne.n	800dc9c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dc68:	4b10      	ldr	r3, [pc, #64]	; (800dcac <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dc6a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dc6e:	4910      	ldr	r1, [pc, #64]	; (800dcb0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dc70:	4810      	ldr	r0, [pc, #64]	; (800dcb4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dc72:	f004 f941 	bl	8011ef8 <iprintf>

  while (pcb != NULL) {
 800dc76:	e011      	b.n	800dc9c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d108      	bne.n	800dc96 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f7fe ffc6 	bl	800cc1c <tcp_abort>
      pcb = next;
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	60fb      	str	r3, [r7, #12]
 800dc94:	e002      	b.n	800dc9c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d1ea      	bne.n	800dc78 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dca2:	bf00      	nop
 800dca4:	bf00      	nop
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	0801428c 	.word	0x0801428c
 800dcb0:	080149e4 	.word	0x080149e4
 800dcb4:	080142f4 	.word	0x080142f4

0800dcb8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d02a      	beq.n	800dd1e <tcp_netif_ip_addr_changed+0x66>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d026      	beq.n	800dd1e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dcd0:	4b15      	ldr	r3, [pc, #84]	; (800dd28 <tcp_netif_ip_addr_changed+0x70>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f7ff ffbc 	bl	800dc54 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dcdc:	4b13      	ldr	r3, [pc, #76]	; (800dd2c <tcp_netif_ip_addr_changed+0x74>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4619      	mov	r1, r3
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7ff ffb6 	bl	800dc54 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d017      	beq.n	800dd1e <tcp_netif_ip_addr_changed+0x66>
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d013      	beq.n	800dd1e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dcf6:	4b0e      	ldr	r3, [pc, #56]	; (800dd30 <tcp_netif_ip_addr_changed+0x78>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	60fb      	str	r3, [r7, #12]
 800dcfc:	e00c      	b.n	800dd18 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d103      	bne.n	800dd12 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1ef      	bne.n	800dcfe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dd1e:	bf00      	nop
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	24008160 	.word	0x24008160
 800dd2c:	24008158 	.word	0x24008158
 800dd30:	2400815c 	.word	0x2400815c

0800dd34 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d007      	beq.n	800dd54 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7ff fc3d 	bl	800d5c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dd54:	bf00      	nop
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dd5c:	b590      	push	{r4, r7, lr}
 800dd5e:	b08d      	sub	sp, #52	; 0x34
 800dd60:	af04      	add	r7, sp, #16
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d105      	bne.n	800dd78 <tcp_input+0x1c>
 800dd6c:	4b9b      	ldr	r3, [pc, #620]	; (800dfdc <tcp_input+0x280>)
 800dd6e:	2283      	movs	r2, #131	; 0x83
 800dd70:	499b      	ldr	r1, [pc, #620]	; (800dfe0 <tcp_input+0x284>)
 800dd72:	489c      	ldr	r0, [pc, #624]	; (800dfe4 <tcp_input+0x288>)
 800dd74:	f004 f8c0 	bl	8011ef8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	4a9a      	ldr	r2, [pc, #616]	; (800dfe8 <tcp_input+0x28c>)
 800dd7e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	895b      	ldrh	r3, [r3, #10]
 800dd84:	2b13      	cmp	r3, #19
 800dd86:	f240 83d1 	bls.w	800e52c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dd8a:	4b98      	ldr	r3, [pc, #608]	; (800dfec <tcp_input+0x290>)
 800dd8c:	695b      	ldr	r3, [r3, #20]
 800dd8e:	4a97      	ldr	r2, [pc, #604]	; (800dfec <tcp_input+0x290>)
 800dd90:	6812      	ldr	r2, [r2, #0]
 800dd92:	4611      	mov	r1, r2
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fc f843 	bl	8009e20 <ip4_addr_isbroadcast_u32>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f040 83c7 	bne.w	800e530 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800dda2:	4b92      	ldr	r3, [pc, #584]	; (800dfec <tcp_input+0x290>)
 800dda4:	695b      	ldr	r3, [r3, #20]
 800dda6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ddaa:	2be0      	cmp	r3, #224	; 0xe0
 800ddac:	f000 83c0 	beq.w	800e530 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ddb0:	4b8d      	ldr	r3, [pc, #564]	; (800dfe8 <tcp_input+0x28c>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	899b      	ldrh	r3, [r3, #12]
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7fa fac5 	bl	8008348 <lwip_htons>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	0b1b      	lsrs	r3, r3, #12
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ddca:	7cbb      	ldrb	r3, [r7, #18]
 800ddcc:	2b13      	cmp	r3, #19
 800ddce:	f240 83b1 	bls.w	800e534 <tcp_input+0x7d8>
 800ddd2:	7cbb      	ldrb	r3, [r7, #18]
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	891b      	ldrh	r3, [r3, #8]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	f200 83aa 	bhi.w	800e534 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dde0:	7cbb      	ldrb	r3, [r7, #18]
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	3b14      	subs	r3, #20
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	4b81      	ldr	r3, [pc, #516]	; (800dff0 <tcp_input+0x294>)
 800ddea:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ddec:	4b81      	ldr	r3, [pc, #516]	; (800dff4 <tcp_input+0x298>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	895a      	ldrh	r2, [r3, #10]
 800ddf6:	7cbb      	ldrb	r3, [r7, #18]
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d309      	bcc.n	800de12 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ddfe:	4b7c      	ldr	r3, [pc, #496]	; (800dff0 <tcp_input+0x294>)
 800de00:	881a      	ldrh	r2, [r3, #0]
 800de02:	4b7d      	ldr	r3, [pc, #500]	; (800dff8 <tcp_input+0x29c>)
 800de04:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800de06:	7cbb      	ldrb	r3, [r7, #18]
 800de08:	4619      	mov	r1, r3
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7fe f8f8 	bl	800c000 <pbuf_remove_header>
 800de10:	e04e      	b.n	800deb0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d105      	bne.n	800de26 <tcp_input+0xca>
 800de1a:	4b70      	ldr	r3, [pc, #448]	; (800dfdc <tcp_input+0x280>)
 800de1c:	22c2      	movs	r2, #194	; 0xc2
 800de1e:	4977      	ldr	r1, [pc, #476]	; (800dffc <tcp_input+0x2a0>)
 800de20:	4870      	ldr	r0, [pc, #448]	; (800dfe4 <tcp_input+0x288>)
 800de22:	f004 f869 	bl	8011ef8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800de26:	2114      	movs	r1, #20
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f7fe f8e9 	bl	800c000 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	895a      	ldrh	r2, [r3, #10]
 800de32:	4b71      	ldr	r3, [pc, #452]	; (800dff8 <tcp_input+0x29c>)
 800de34:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800de36:	4b6e      	ldr	r3, [pc, #440]	; (800dff0 <tcp_input+0x294>)
 800de38:	881a      	ldrh	r2, [r3, #0]
 800de3a:	4b6f      	ldr	r3, [pc, #444]	; (800dff8 <tcp_input+0x29c>)
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800de42:	4b6d      	ldr	r3, [pc, #436]	; (800dff8 <tcp_input+0x29c>)
 800de44:	881b      	ldrh	r3, [r3, #0]
 800de46:	4619      	mov	r1, r3
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7fe f8d9 	bl	800c000 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	895b      	ldrh	r3, [r3, #10]
 800de54:	8a3a      	ldrh	r2, [r7, #16]
 800de56:	429a      	cmp	r2, r3
 800de58:	f200 836e 	bhi.w	800e538 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	4a64      	ldr	r2, [pc, #400]	; (800dff4 <tcp_input+0x298>)
 800de64:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	8a3a      	ldrh	r2, [r7, #16]
 800de6c:	4611      	mov	r1, r2
 800de6e:	4618      	mov	r0, r3
 800de70:	f7fe f8c6 	bl	800c000 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	891a      	ldrh	r2, [r3, #8]
 800de78:	8a3b      	ldrh	r3, [r7, #16]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	895b      	ldrh	r3, [r3, #10]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d005      	beq.n	800de96 <tcp_input+0x13a>
 800de8a:	4b54      	ldr	r3, [pc, #336]	; (800dfdc <tcp_input+0x280>)
 800de8c:	22df      	movs	r2, #223	; 0xdf
 800de8e:	495c      	ldr	r1, [pc, #368]	; (800e000 <tcp_input+0x2a4>)
 800de90:	4854      	ldr	r0, [pc, #336]	; (800dfe4 <tcp_input+0x288>)
 800de92:	f004 f831 	bl	8011ef8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	891a      	ldrh	r2, [r3, #8]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	891b      	ldrh	r3, [r3, #8]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d005      	beq.n	800deb0 <tcp_input+0x154>
 800dea4:	4b4d      	ldr	r3, [pc, #308]	; (800dfdc <tcp_input+0x280>)
 800dea6:	22e0      	movs	r2, #224	; 0xe0
 800dea8:	4956      	ldr	r1, [pc, #344]	; (800e004 <tcp_input+0x2a8>)
 800deaa:	484e      	ldr	r0, [pc, #312]	; (800dfe4 <tcp_input+0x288>)
 800deac:	f004 f824 	bl	8011ef8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800deb0:	4b4d      	ldr	r3, [pc, #308]	; (800dfe8 <tcp_input+0x28c>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	881b      	ldrh	r3, [r3, #0]
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	4a4b      	ldr	r2, [pc, #300]	; (800dfe8 <tcp_input+0x28c>)
 800deba:	6814      	ldr	r4, [r2, #0]
 800debc:	4618      	mov	r0, r3
 800debe:	f7fa fa43 	bl	8008348 <lwip_htons>
 800dec2:	4603      	mov	r3, r0
 800dec4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dec6:	4b48      	ldr	r3, [pc, #288]	; (800dfe8 <tcp_input+0x28c>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	885b      	ldrh	r3, [r3, #2]
 800decc:	b29b      	uxth	r3, r3
 800dece:	4a46      	ldr	r2, [pc, #280]	; (800dfe8 <tcp_input+0x28c>)
 800ded0:	6814      	ldr	r4, [r2, #0]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fa fa38 	bl	8008348 <lwip_htons>
 800ded8:	4603      	mov	r3, r0
 800deda:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dedc:	4b42      	ldr	r3, [pc, #264]	; (800dfe8 <tcp_input+0x28c>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	4a41      	ldr	r2, [pc, #260]	; (800dfe8 <tcp_input+0x28c>)
 800dee4:	6814      	ldr	r4, [r2, #0]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fa fa43 	bl	8008372 <lwip_htonl>
 800deec:	4603      	mov	r3, r0
 800deee:	6063      	str	r3, [r4, #4]
 800def0:	6863      	ldr	r3, [r4, #4]
 800def2:	4a45      	ldr	r2, [pc, #276]	; (800e008 <tcp_input+0x2ac>)
 800def4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800def6:	4b3c      	ldr	r3, [pc, #240]	; (800dfe8 <tcp_input+0x28c>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	4a3a      	ldr	r2, [pc, #232]	; (800dfe8 <tcp_input+0x28c>)
 800defe:	6814      	ldr	r4, [r2, #0]
 800df00:	4618      	mov	r0, r3
 800df02:	f7fa fa36 	bl	8008372 <lwip_htonl>
 800df06:	4603      	mov	r3, r0
 800df08:	60a3      	str	r3, [r4, #8]
 800df0a:	68a3      	ldr	r3, [r4, #8]
 800df0c:	4a3f      	ldr	r2, [pc, #252]	; (800e00c <tcp_input+0x2b0>)
 800df0e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800df10:	4b35      	ldr	r3, [pc, #212]	; (800dfe8 <tcp_input+0x28c>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	89db      	ldrh	r3, [r3, #14]
 800df16:	b29b      	uxth	r3, r3
 800df18:	4a33      	ldr	r2, [pc, #204]	; (800dfe8 <tcp_input+0x28c>)
 800df1a:	6814      	ldr	r4, [r2, #0]
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fa fa13 	bl	8008348 <lwip_htons>
 800df22:	4603      	mov	r3, r0
 800df24:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800df26:	4b30      	ldr	r3, [pc, #192]	; (800dfe8 <tcp_input+0x28c>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	899b      	ldrh	r3, [r3, #12]
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fa fa0a 	bl	8008348 <lwip_htons>
 800df34:	4603      	mov	r3, r0
 800df36:	b2db      	uxtb	r3, r3
 800df38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	4b34      	ldr	r3, [pc, #208]	; (800e010 <tcp_input+0x2b4>)
 800df40:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	891a      	ldrh	r2, [r3, #8]
 800df46:	4b33      	ldr	r3, [pc, #204]	; (800e014 <tcp_input+0x2b8>)
 800df48:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800df4a:	4b31      	ldr	r3, [pc, #196]	; (800e010 <tcp_input+0x2b4>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	f003 0303 	and.w	r3, r3, #3
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00c      	beq.n	800df70 <tcp_input+0x214>
    tcplen++;
 800df56:	4b2f      	ldr	r3, [pc, #188]	; (800e014 <tcp_input+0x2b8>)
 800df58:	881b      	ldrh	r3, [r3, #0]
 800df5a:	3301      	adds	r3, #1
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	4b2d      	ldr	r3, [pc, #180]	; (800e014 <tcp_input+0x2b8>)
 800df60:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	891a      	ldrh	r2, [r3, #8]
 800df66:	4b2b      	ldr	r3, [pc, #172]	; (800e014 <tcp_input+0x2b8>)
 800df68:	881b      	ldrh	r3, [r3, #0]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	f200 82e6 	bhi.w	800e53c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800df70:	2300      	movs	r3, #0
 800df72:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df74:	4b28      	ldr	r3, [pc, #160]	; (800e018 <tcp_input+0x2bc>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	61fb      	str	r3, [r7, #28]
 800df7a:	e09d      	b.n	800e0b8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	7d1b      	ldrb	r3, [r3, #20]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d105      	bne.n	800df90 <tcp_input+0x234>
 800df84:	4b15      	ldr	r3, [pc, #84]	; (800dfdc <tcp_input+0x280>)
 800df86:	22fb      	movs	r2, #251	; 0xfb
 800df88:	4924      	ldr	r1, [pc, #144]	; (800e01c <tcp_input+0x2c0>)
 800df8a:	4816      	ldr	r0, [pc, #88]	; (800dfe4 <tcp_input+0x288>)
 800df8c:	f003 ffb4 	bl	8011ef8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	7d1b      	ldrb	r3, [r3, #20]
 800df94:	2b0a      	cmp	r3, #10
 800df96:	d105      	bne.n	800dfa4 <tcp_input+0x248>
 800df98:	4b10      	ldr	r3, [pc, #64]	; (800dfdc <tcp_input+0x280>)
 800df9a:	22fc      	movs	r2, #252	; 0xfc
 800df9c:	4920      	ldr	r1, [pc, #128]	; (800e020 <tcp_input+0x2c4>)
 800df9e:	4811      	ldr	r0, [pc, #68]	; (800dfe4 <tcp_input+0x288>)
 800dfa0:	f003 ffaa 	bl	8011ef8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	7d1b      	ldrb	r3, [r3, #20]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d105      	bne.n	800dfb8 <tcp_input+0x25c>
 800dfac:	4b0b      	ldr	r3, [pc, #44]	; (800dfdc <tcp_input+0x280>)
 800dfae:	22fd      	movs	r2, #253	; 0xfd
 800dfb0:	491c      	ldr	r1, [pc, #112]	; (800e024 <tcp_input+0x2c8>)
 800dfb2:	480c      	ldr	r0, [pc, #48]	; (800dfe4 <tcp_input+0x288>)
 800dfb4:	f003 ffa0 	bl	8011ef8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	7a1b      	ldrb	r3, [r3, #8]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d033      	beq.n	800e028 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	7a1a      	ldrb	r2, [r3, #8]
 800dfc4:	4b09      	ldr	r3, [pc, #36]	; (800dfec <tcp_input+0x290>)
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dfcc:	3301      	adds	r3, #1
 800dfce:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d029      	beq.n	800e028 <tcp_input+0x2cc>
      prev = pcb;
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	61bb      	str	r3, [r7, #24]
      continue;
 800dfd8:	e06b      	b.n	800e0b2 <tcp_input+0x356>
 800dfda:	bf00      	nop
 800dfdc:	08014a18 	.word	0x08014a18
 800dfe0:	08014a6c 	.word	0x08014a6c
 800dfe4:	08014a84 	.word	0x08014a84
 800dfe8:	2400817c 	.word	0x2400817c
 800dfec:	2400522c 	.word	0x2400522c
 800dff0:	24008180 	.word	0x24008180
 800dff4:	24008184 	.word	0x24008184
 800dff8:	24008182 	.word	0x24008182
 800dffc:	08014aac 	.word	0x08014aac
 800e000:	08014abc 	.word	0x08014abc
 800e004:	08014ac8 	.word	0x08014ac8
 800e008:	2400818c 	.word	0x2400818c
 800e00c:	24008190 	.word	0x24008190
 800e010:	24008198 	.word	0x24008198
 800e014:	24008196 	.word	0x24008196
 800e018:	24008160 	.word	0x24008160
 800e01c:	08014ae8 	.word	0x08014ae8
 800e020:	08014b10 	.word	0x08014b10
 800e024:	08014b3c 	.word	0x08014b3c
    }

    if (pcb->remote_port == tcphdr->src &&
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	8b1a      	ldrh	r2, [r3, #24]
 800e02c:	4b72      	ldr	r3, [pc, #456]	; (800e1f8 <tcp_input+0x49c>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	881b      	ldrh	r3, [r3, #0]
 800e032:	b29b      	uxth	r3, r3
 800e034:	429a      	cmp	r2, r3
 800e036:	d13a      	bne.n	800e0ae <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	8ada      	ldrh	r2, [r3, #22]
 800e03c:	4b6e      	ldr	r3, [pc, #440]	; (800e1f8 <tcp_input+0x49c>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	885b      	ldrh	r3, [r3, #2]
 800e042:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e044:	429a      	cmp	r2, r3
 800e046:	d132      	bne.n	800e0ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	685a      	ldr	r2, [r3, #4]
 800e04c:	4b6b      	ldr	r3, [pc, #428]	; (800e1fc <tcp_input+0x4a0>)
 800e04e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e050:	429a      	cmp	r2, r3
 800e052:	d12c      	bne.n	800e0ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	4b68      	ldr	r3, [pc, #416]	; (800e1fc <tcp_input+0x4a0>)
 800e05a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d126      	bne.n	800e0ae <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	69fa      	ldr	r2, [r7, #28]
 800e066:	429a      	cmp	r2, r3
 800e068:	d106      	bne.n	800e078 <tcp_input+0x31c>
 800e06a:	4b65      	ldr	r3, [pc, #404]	; (800e200 <tcp_input+0x4a4>)
 800e06c:	f240 120d 	movw	r2, #269	; 0x10d
 800e070:	4964      	ldr	r1, [pc, #400]	; (800e204 <tcp_input+0x4a8>)
 800e072:	4865      	ldr	r0, [pc, #404]	; (800e208 <tcp_input+0x4ac>)
 800e074:	f003 ff40 	bl	8011ef8 <iprintf>
      if (prev != NULL) {
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00a      	beq.n	800e094 <tcp_input+0x338>
        prev->next = pcb->next;
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	68da      	ldr	r2, [r3, #12]
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e086:	4b61      	ldr	r3, [pc, #388]	; (800e20c <tcp_input+0x4b0>)
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e08e:	4a5f      	ldr	r2, [pc, #380]	; (800e20c <tcp_input+0x4b0>)
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	69fa      	ldr	r2, [r7, #28]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d111      	bne.n	800e0c2 <tcp_input+0x366>
 800e09e:	4b58      	ldr	r3, [pc, #352]	; (800e200 <tcp_input+0x4a4>)
 800e0a0:	f240 1215 	movw	r2, #277	; 0x115
 800e0a4:	495a      	ldr	r1, [pc, #360]	; (800e210 <tcp_input+0x4b4>)
 800e0a6:	4858      	ldr	r0, [pc, #352]	; (800e208 <tcp_input+0x4ac>)
 800e0a8:	f003 ff26 	bl	8011ef8 <iprintf>
      break;
 800e0ac:	e009      	b.n	800e0c2 <tcp_input+0x366>
    }
    prev = pcb;
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	61fb      	str	r3, [r7, #28]
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f47f af5e 	bne.w	800df7c <tcp_input+0x220>
 800e0c0:	e000      	b.n	800e0c4 <tcp_input+0x368>
      break;
 800e0c2:	bf00      	nop
  }

  if (pcb == NULL) {
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f040 80aa 	bne.w	800e220 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0cc:	4b51      	ldr	r3, [pc, #324]	; (800e214 <tcp_input+0x4b8>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	61fb      	str	r3, [r7, #28]
 800e0d2:	e03f      	b.n	800e154 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	7d1b      	ldrb	r3, [r3, #20]
 800e0d8:	2b0a      	cmp	r3, #10
 800e0da:	d006      	beq.n	800e0ea <tcp_input+0x38e>
 800e0dc:	4b48      	ldr	r3, [pc, #288]	; (800e200 <tcp_input+0x4a4>)
 800e0de:	f240 121f 	movw	r2, #287	; 0x11f
 800e0e2:	494d      	ldr	r1, [pc, #308]	; (800e218 <tcp_input+0x4bc>)
 800e0e4:	4848      	ldr	r0, [pc, #288]	; (800e208 <tcp_input+0x4ac>)
 800e0e6:	f003 ff07 	bl	8011ef8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	7a1b      	ldrb	r3, [r3, #8]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d009      	beq.n	800e106 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	7a1a      	ldrb	r2, [r3, #8]
 800e0f6:	4b41      	ldr	r3, [pc, #260]	; (800e1fc <tcp_input+0x4a0>)
 800e0f8:	685b      	ldr	r3, [r3, #4]
 800e0fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0fe:	3301      	adds	r3, #1
 800e100:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e102:	429a      	cmp	r2, r3
 800e104:	d122      	bne.n	800e14c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	8b1a      	ldrh	r2, [r3, #24]
 800e10a:	4b3b      	ldr	r3, [pc, #236]	; (800e1f8 <tcp_input+0x49c>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	881b      	ldrh	r3, [r3, #0]
 800e110:	b29b      	uxth	r3, r3
 800e112:	429a      	cmp	r2, r3
 800e114:	d11b      	bne.n	800e14e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	8ada      	ldrh	r2, [r3, #22]
 800e11a:	4b37      	ldr	r3, [pc, #220]	; (800e1f8 <tcp_input+0x49c>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	885b      	ldrh	r3, [r3, #2]
 800e120:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e122:	429a      	cmp	r2, r3
 800e124:	d113      	bne.n	800e14e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	685a      	ldr	r2, [r3, #4]
 800e12a:	4b34      	ldr	r3, [pc, #208]	; (800e1fc <tcp_input+0x4a0>)
 800e12c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e12e:	429a      	cmp	r2, r3
 800e130:	d10d      	bne.n	800e14e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	4b31      	ldr	r3, [pc, #196]	; (800e1fc <tcp_input+0x4a0>)
 800e138:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d107      	bne.n	800e14e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e13e:	69f8      	ldr	r0, [r7, #28]
 800e140:	f000 fb56 	bl	800e7f0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f7fd ffe1 	bl	800c10c <pbuf_free>
        return;
 800e14a:	e1fd      	b.n	800e548 <tcp_input+0x7ec>
        continue;
 800e14c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	61fb      	str	r3, [r7, #28]
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1bc      	bne.n	800e0d4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e15e:	4b2f      	ldr	r3, [pc, #188]	; (800e21c <tcp_input+0x4c0>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	617b      	str	r3, [r7, #20]
 800e164:	e02a      	b.n	800e1bc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	7a1b      	ldrb	r3, [r3, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00c      	beq.n	800e188 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	7a1a      	ldrb	r2, [r3, #8]
 800e172:	4b22      	ldr	r3, [pc, #136]	; (800e1fc <tcp_input+0x4a0>)
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e17a:	3301      	adds	r3, #1
 800e17c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e17e:	429a      	cmp	r2, r3
 800e180:	d002      	beq.n	800e188 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	61bb      	str	r3, [r7, #24]
        continue;
 800e186:	e016      	b.n	800e1b6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	8ada      	ldrh	r2, [r3, #22]
 800e18c:	4b1a      	ldr	r3, [pc, #104]	; (800e1f8 <tcp_input+0x49c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	885b      	ldrh	r3, [r3, #2]
 800e192:	b29b      	uxth	r3, r3
 800e194:	429a      	cmp	r2, r3
 800e196:	d10c      	bne.n	800e1b2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	4b17      	ldr	r3, [pc, #92]	; (800e1fc <tcp_input+0x4a0>)
 800e19e:	695b      	ldr	r3, [r3, #20]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d00f      	beq.n	800e1c4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00d      	beq.n	800e1c6 <tcp_input+0x46a>
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d009      	beq.n	800e1c6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	617b      	str	r3, [r7, #20]
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1d1      	bne.n	800e166 <tcp_input+0x40a>
 800e1c2:	e000      	b.n	800e1c6 <tcp_input+0x46a>
            break;
 800e1c4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d029      	beq.n	800e220 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00a      	beq.n	800e1e8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	68da      	ldr	r2, [r3, #12]
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e1da:	4b10      	ldr	r3, [pc, #64]	; (800e21c <tcp_input+0x4c0>)
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e1e2:	4a0e      	ldr	r2, [pc, #56]	; (800e21c <tcp_input+0x4c0>)
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e1e8:	6978      	ldr	r0, [r7, #20]
 800e1ea:	f000 fa03 	bl	800e5f4 <tcp_listen_input>
      }
      pbuf_free(p);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7fd ff8c 	bl	800c10c <pbuf_free>
      return;
 800e1f4:	e1a8      	b.n	800e548 <tcp_input+0x7ec>
 800e1f6:	bf00      	nop
 800e1f8:	2400817c 	.word	0x2400817c
 800e1fc:	2400522c 	.word	0x2400522c
 800e200:	08014a18 	.word	0x08014a18
 800e204:	08014b64 	.word	0x08014b64
 800e208:	08014a84 	.word	0x08014a84
 800e20c:	24008160 	.word	0x24008160
 800e210:	08014b90 	.word	0x08014b90
 800e214:	24008164 	.word	0x24008164
 800e218:	08014bbc 	.word	0x08014bbc
 800e21c:	2400815c 	.word	0x2400815c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	2b00      	cmp	r3, #0
 800e224:	f000 8158 	beq.w	800e4d8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e228:	4b95      	ldr	r3, [pc, #596]	; (800e480 <tcp_input+0x724>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	891a      	ldrh	r2, [r3, #8]
 800e232:	4b93      	ldr	r3, [pc, #588]	; (800e480 <tcp_input+0x724>)
 800e234:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e236:	4a92      	ldr	r2, [pc, #584]	; (800e480 <tcp_input+0x724>)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e23c:	4b91      	ldr	r3, [pc, #580]	; (800e484 <tcp_input+0x728>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a8f      	ldr	r2, [pc, #572]	; (800e480 <tcp_input+0x724>)
 800e242:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e244:	4b90      	ldr	r3, [pc, #576]	; (800e488 <tcp_input+0x72c>)
 800e246:	2200      	movs	r2, #0
 800e248:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e24a:	4b90      	ldr	r3, [pc, #576]	; (800e48c <tcp_input+0x730>)
 800e24c:	2200      	movs	r2, #0
 800e24e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e250:	4b8f      	ldr	r3, [pc, #572]	; (800e490 <tcp_input+0x734>)
 800e252:	2200      	movs	r2, #0
 800e254:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e256:	4b8f      	ldr	r3, [pc, #572]	; (800e494 <tcp_input+0x738>)
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	f003 0308 	and.w	r3, r3, #8
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d006      	beq.n	800e270 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	7b5b      	ldrb	r3, [r3, #13]
 800e266:	f043 0301 	orr.w	r3, r3, #1
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e274:	2b00      	cmp	r3, #0
 800e276:	d017      	beq.n	800e2a8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e278:	69f8      	ldr	r0, [r7, #28]
 800e27a:	f7ff f929 	bl	800d4d0 <tcp_process_refused_data>
 800e27e:	4603      	mov	r3, r0
 800e280:	f113 0f0d 	cmn.w	r3, #13
 800e284:	d007      	beq.n	800e296 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d00c      	beq.n	800e2a8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e28e:	4b82      	ldr	r3, [pc, #520]	; (800e498 <tcp_input+0x73c>)
 800e290:	881b      	ldrh	r3, [r3, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d008      	beq.n	800e2a8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	f040 80e3 	bne.w	800e466 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e2a0:	69f8      	ldr	r0, [r7, #28]
 800e2a2:	f003 f9ad 	bl	8011600 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e2a6:	e0de      	b.n	800e466 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e2a8:	4a7c      	ldr	r2, [pc, #496]	; (800e49c <tcp_input+0x740>)
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e2ae:	69f8      	ldr	r0, [r7, #28]
 800e2b0:	f000 fb18 	bl	800e8e4 <tcp_process>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e2b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2bc:	f113 0f0d 	cmn.w	r3, #13
 800e2c0:	f000 80d3 	beq.w	800e46a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e2c4:	4b71      	ldr	r3, [pc, #452]	; (800e48c <tcp_input+0x730>)
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	f003 0308 	and.w	r3, r3, #8
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d015      	beq.n	800e2fc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d008      	beq.n	800e2ec <tcp_input+0x590>
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2e0:	69fa      	ldr	r2, [r7, #28]
 800e2e2:	6912      	ldr	r2, [r2, #16]
 800e2e4:	f06f 010d 	mvn.w	r1, #13
 800e2e8:	4610      	mov	r0, r2
 800e2ea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e2ec:	69f9      	ldr	r1, [r7, #28]
 800e2ee:	486c      	ldr	r0, [pc, #432]	; (800e4a0 <tcp_input+0x744>)
 800e2f0:	f7ff fbbc 	bl	800da6c <tcp_pcb_remove>
        tcp_free(pcb);
 800e2f4:	69f8      	ldr	r0, [r7, #28]
 800e2f6:	f7fe f9a9 	bl	800c64c <tcp_free>
 800e2fa:	e0da      	b.n	800e4b2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e300:	4b63      	ldr	r3, [pc, #396]	; (800e490 <tcp_input+0x734>)
 800e302:	881b      	ldrh	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d01d      	beq.n	800e344 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e308:	4b61      	ldr	r3, [pc, #388]	; (800e490 <tcp_input+0x734>)
 800e30a:	881b      	ldrh	r3, [r3, #0]
 800e30c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00a      	beq.n	800e32e <tcp_input+0x5d2>
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e31e:	69fa      	ldr	r2, [r7, #28]
 800e320:	6910      	ldr	r0, [r2, #16]
 800e322:	89fa      	ldrh	r2, [r7, #14]
 800e324:	69f9      	ldr	r1, [r7, #28]
 800e326:	4798      	blx	r3
 800e328:	4603      	mov	r3, r0
 800e32a:	74fb      	strb	r3, [r7, #19]
 800e32c:	e001      	b.n	800e332 <tcp_input+0x5d6>
 800e32e:	2300      	movs	r3, #0
 800e330:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e332:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e336:	f113 0f0d 	cmn.w	r3, #13
 800e33a:	f000 8098 	beq.w	800e46e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e33e:	4b54      	ldr	r3, [pc, #336]	; (800e490 <tcp_input+0x734>)
 800e340:	2200      	movs	r2, #0
 800e342:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e344:	69f8      	ldr	r0, [r7, #28]
 800e346:	f000 f915 	bl	800e574 <tcp_input_delayed_close>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f040 8090 	bne.w	800e472 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e352:	4b4d      	ldr	r3, [pc, #308]	; (800e488 <tcp_input+0x72c>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d041      	beq.n	800e3de <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d006      	beq.n	800e370 <tcp_input+0x614>
 800e362:	4b50      	ldr	r3, [pc, #320]	; (800e4a4 <tcp_input+0x748>)
 800e364:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e368:	494f      	ldr	r1, [pc, #316]	; (800e4a8 <tcp_input+0x74c>)
 800e36a:	4850      	ldr	r0, [pc, #320]	; (800e4ac <tcp_input+0x750>)
 800e36c:	f003 fdc4 	bl	8011ef8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	8b5b      	ldrh	r3, [r3, #26]
 800e374:	f003 0310 	and.w	r3, r3, #16
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d008      	beq.n	800e38e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e37c:	4b42      	ldr	r3, [pc, #264]	; (800e488 <tcp_input+0x72c>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4618      	mov	r0, r3
 800e382:	f7fd fec3 	bl	800c10c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e386:	69f8      	ldr	r0, [r7, #28]
 800e388:	f7fe fc48 	bl	800cc1c <tcp_abort>
            goto aborted;
 800e38c:	e091      	b.n	800e4b2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e38e:	69fb      	ldr	r3, [r7, #28]
 800e390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00c      	beq.n	800e3b2 <tcp_input+0x656>
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	6918      	ldr	r0, [r3, #16]
 800e3a2:	4b39      	ldr	r3, [pc, #228]	; (800e488 <tcp_input+0x72c>)
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	69f9      	ldr	r1, [r7, #28]
 800e3aa:	47a0      	blx	r4
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	74fb      	strb	r3, [r7, #19]
 800e3b0:	e008      	b.n	800e3c4 <tcp_input+0x668>
 800e3b2:	4b35      	ldr	r3, [pc, #212]	; (800e488 <tcp_input+0x72c>)
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	69f9      	ldr	r1, [r7, #28]
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	f7ff f95e 	bl	800d67c <tcp_recv_null>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e3c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3c8:	f113 0f0d 	cmn.w	r3, #13
 800e3cc:	d053      	beq.n	800e476 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e3ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d003      	beq.n	800e3de <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e3d6:	4b2c      	ldr	r3, [pc, #176]	; (800e488 <tcp_input+0x72c>)
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e3de:	4b2b      	ldr	r3, [pc, #172]	; (800e48c <tcp_input+0x730>)
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	f003 0320 	and.w	r3, r3, #32
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d030      	beq.n	800e44c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d009      	beq.n	800e406 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3f6:	7b5a      	ldrb	r2, [r3, #13]
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3fc:	f042 0220 	orr.w	r2, r2, #32
 800e400:	b2d2      	uxtb	r2, r2
 800e402:	735a      	strb	r2, [r3, #13]
 800e404:	e022      	b.n	800e44c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e40a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e40e:	d005      	beq.n	800e41c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e414:	3301      	adds	r3, #1
 800e416:	b29a      	uxth	r2, r3
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00b      	beq.n	800e43e <tcp_input+0x6e2>
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	6918      	ldr	r0, [r3, #16]
 800e430:	2300      	movs	r3, #0
 800e432:	2200      	movs	r2, #0
 800e434:	69f9      	ldr	r1, [r7, #28]
 800e436:	47a0      	blx	r4
 800e438:	4603      	mov	r3, r0
 800e43a:	74fb      	strb	r3, [r7, #19]
 800e43c:	e001      	b.n	800e442 <tcp_input+0x6e6>
 800e43e:	2300      	movs	r3, #0
 800e440:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e442:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e446:	f113 0f0d 	cmn.w	r3, #13
 800e44a:	d016      	beq.n	800e47a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e44c:	4b13      	ldr	r3, [pc, #76]	; (800e49c <tcp_input+0x740>)
 800e44e:	2200      	movs	r2, #0
 800e450:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e452:	69f8      	ldr	r0, [r7, #28]
 800e454:	f000 f88e 	bl	800e574 <tcp_input_delayed_close>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d128      	bne.n	800e4b0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e45e:	69f8      	ldr	r0, [r7, #28]
 800e460:	f002 fac8 	bl	80109f4 <tcp_output>
 800e464:	e025      	b.n	800e4b2 <tcp_input+0x756>
        goto aborted;
 800e466:	bf00      	nop
 800e468:	e023      	b.n	800e4b2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e46a:	bf00      	nop
 800e46c:	e021      	b.n	800e4b2 <tcp_input+0x756>
              goto aborted;
 800e46e:	bf00      	nop
 800e470:	e01f      	b.n	800e4b2 <tcp_input+0x756>
          goto aborted;
 800e472:	bf00      	nop
 800e474:	e01d      	b.n	800e4b2 <tcp_input+0x756>
            goto aborted;
 800e476:	bf00      	nop
 800e478:	e01b      	b.n	800e4b2 <tcp_input+0x756>
              goto aborted;
 800e47a:	bf00      	nop
 800e47c:	e019      	b.n	800e4b2 <tcp_input+0x756>
 800e47e:	bf00      	nop
 800e480:	2400816c 	.word	0x2400816c
 800e484:	2400817c 	.word	0x2400817c
 800e488:	2400819c 	.word	0x2400819c
 800e48c:	24008199 	.word	0x24008199
 800e490:	24008194 	.word	0x24008194
 800e494:	24008198 	.word	0x24008198
 800e498:	24008196 	.word	0x24008196
 800e49c:	240081a0 	.word	0x240081a0
 800e4a0:	24008160 	.word	0x24008160
 800e4a4:	08014a18 	.word	0x08014a18
 800e4a8:	08014bec 	.word	0x08014bec
 800e4ac:	08014a84 	.word	0x08014a84
          goto aborted;
 800e4b0:	bf00      	nop
    tcp_input_pcb = NULL;
 800e4b2:	4b27      	ldr	r3, [pc, #156]	; (800e550 <tcp_input+0x7f4>)
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e4b8:	4b26      	ldr	r3, [pc, #152]	; (800e554 <tcp_input+0x7f8>)
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e4be:	4b26      	ldr	r3, [pc, #152]	; (800e558 <tcp_input+0x7fc>)
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d03f      	beq.n	800e546 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e4c6:	4b24      	ldr	r3, [pc, #144]	; (800e558 <tcp_input+0x7fc>)
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fd fe1e 	bl	800c10c <pbuf_free>
      inseg.p = NULL;
 800e4d0:	4b21      	ldr	r3, [pc, #132]	; (800e558 <tcp_input+0x7fc>)
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e4d6:	e036      	b.n	800e546 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e4d8:	4b20      	ldr	r3, [pc, #128]	; (800e55c <tcp_input+0x800>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	899b      	ldrh	r3, [r3, #12]
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7f9 ff31 	bl	8008348 <lwip_htons>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	f003 0304 	and.w	r3, r3, #4
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d118      	bne.n	800e524 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4f2:	4b1b      	ldr	r3, [pc, #108]	; (800e560 <tcp_input+0x804>)
 800e4f4:	6819      	ldr	r1, [r3, #0]
 800e4f6:	4b1b      	ldr	r3, [pc, #108]	; (800e564 <tcp_input+0x808>)
 800e4f8:	881b      	ldrh	r3, [r3, #0]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	4b1a      	ldr	r3, [pc, #104]	; (800e568 <tcp_input+0x80c>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e502:	4b16      	ldr	r3, [pc, #88]	; (800e55c <tcp_input+0x800>)
 800e504:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e506:	885b      	ldrh	r3, [r3, #2]
 800e508:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e50a:	4a14      	ldr	r2, [pc, #80]	; (800e55c <tcp_input+0x800>)
 800e50c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e50e:	8812      	ldrh	r2, [r2, #0]
 800e510:	b292      	uxth	r2, r2
 800e512:	9202      	str	r2, [sp, #8]
 800e514:	9301      	str	r3, [sp, #4]
 800e516:	4b15      	ldr	r3, [pc, #84]	; (800e56c <tcp_input+0x810>)
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	4b15      	ldr	r3, [pc, #84]	; (800e570 <tcp_input+0x814>)
 800e51c:	4602      	mov	r2, r0
 800e51e:	2000      	movs	r0, #0
 800e520:	f003 f81c 	bl	801155c <tcp_rst>
    pbuf_free(p);
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7fd fdf1 	bl	800c10c <pbuf_free>
  return;
 800e52a:	e00c      	b.n	800e546 <tcp_input+0x7ea>
    goto dropped;
 800e52c:	bf00      	nop
 800e52e:	e006      	b.n	800e53e <tcp_input+0x7e2>
    goto dropped;
 800e530:	bf00      	nop
 800e532:	e004      	b.n	800e53e <tcp_input+0x7e2>
    goto dropped;
 800e534:	bf00      	nop
 800e536:	e002      	b.n	800e53e <tcp_input+0x7e2>
      goto dropped;
 800e538:	bf00      	nop
 800e53a:	e000      	b.n	800e53e <tcp_input+0x7e2>
      goto dropped;
 800e53c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7fd fde4 	bl	800c10c <pbuf_free>
 800e544:	e000      	b.n	800e548 <tcp_input+0x7ec>
  return;
 800e546:	bf00      	nop
}
 800e548:	3724      	adds	r7, #36	; 0x24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd90      	pop	{r4, r7, pc}
 800e54e:	bf00      	nop
 800e550:	240081a0 	.word	0x240081a0
 800e554:	2400819c 	.word	0x2400819c
 800e558:	2400816c 	.word	0x2400816c
 800e55c:	2400817c 	.word	0x2400817c
 800e560:	24008190 	.word	0x24008190
 800e564:	24008196 	.word	0x24008196
 800e568:	2400818c 	.word	0x2400818c
 800e56c:	2400523c 	.word	0x2400523c
 800e570:	24005240 	.word	0x24005240

0800e574 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d106      	bne.n	800e590 <tcp_input_delayed_close+0x1c>
 800e582:	4b17      	ldr	r3, [pc, #92]	; (800e5e0 <tcp_input_delayed_close+0x6c>)
 800e584:	f240 225a 	movw	r2, #602	; 0x25a
 800e588:	4916      	ldr	r1, [pc, #88]	; (800e5e4 <tcp_input_delayed_close+0x70>)
 800e58a:	4817      	ldr	r0, [pc, #92]	; (800e5e8 <tcp_input_delayed_close+0x74>)
 800e58c:	f003 fcb4 	bl	8011ef8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e590:	4b16      	ldr	r3, [pc, #88]	; (800e5ec <tcp_input_delayed_close+0x78>)
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	f003 0310 	and.w	r3, r3, #16
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d01c      	beq.n	800e5d6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	8b5b      	ldrh	r3, [r3, #26]
 800e5a0:	f003 0310 	and.w	r3, r3, #16
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d10d      	bne.n	800e5c4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d008      	beq.n	800e5c4 <tcp_input_delayed_close+0x50>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	6912      	ldr	r2, [r2, #16]
 800e5bc:	f06f 010e 	mvn.w	r1, #14
 800e5c0:	4610      	mov	r0, r2
 800e5c2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e5c4:	6879      	ldr	r1, [r7, #4]
 800e5c6:	480a      	ldr	r0, [pc, #40]	; (800e5f0 <tcp_input_delayed_close+0x7c>)
 800e5c8:	f7ff fa50 	bl	800da6c <tcp_pcb_remove>
    tcp_free(pcb);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7fe f83d 	bl	800c64c <tcp_free>
    return 1;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e000      	b.n	800e5d8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e5d6:	2300      	movs	r3, #0
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	08014a18 	.word	0x08014a18
 800e5e4:	08014c08 	.word	0x08014c08
 800e5e8:	08014a84 	.word	0x08014a84
 800e5ec:	24008199 	.word	0x24008199
 800e5f0:	24008160 	.word	0x24008160

0800e5f4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e5f4:	b590      	push	{r4, r7, lr}
 800e5f6:	b08b      	sub	sp, #44	; 0x2c
 800e5f8:	af04      	add	r7, sp, #16
 800e5fa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e5fc:	4b6f      	ldr	r3, [pc, #444]	; (800e7bc <tcp_listen_input+0x1c8>)
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	f003 0304 	and.w	r3, r3, #4
 800e604:	2b00      	cmp	r3, #0
 800e606:	f040 80d2 	bne.w	800e7ae <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d106      	bne.n	800e61e <tcp_listen_input+0x2a>
 800e610:	4b6b      	ldr	r3, [pc, #428]	; (800e7c0 <tcp_listen_input+0x1cc>)
 800e612:	f240 2281 	movw	r2, #641	; 0x281
 800e616:	496b      	ldr	r1, [pc, #428]	; (800e7c4 <tcp_listen_input+0x1d0>)
 800e618:	486b      	ldr	r0, [pc, #428]	; (800e7c8 <tcp_listen_input+0x1d4>)
 800e61a:	f003 fc6d 	bl	8011ef8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e61e:	4b67      	ldr	r3, [pc, #412]	; (800e7bc <tcp_listen_input+0x1c8>)
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	f003 0310 	and.w	r3, r3, #16
 800e626:	2b00      	cmp	r3, #0
 800e628:	d019      	beq.n	800e65e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e62a:	4b68      	ldr	r3, [pc, #416]	; (800e7cc <tcp_listen_input+0x1d8>)
 800e62c:	6819      	ldr	r1, [r3, #0]
 800e62e:	4b68      	ldr	r3, [pc, #416]	; (800e7d0 <tcp_listen_input+0x1dc>)
 800e630:	881b      	ldrh	r3, [r3, #0]
 800e632:	461a      	mov	r2, r3
 800e634:	4b67      	ldr	r3, [pc, #412]	; (800e7d4 <tcp_listen_input+0x1e0>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e63a:	4b67      	ldr	r3, [pc, #412]	; (800e7d8 <tcp_listen_input+0x1e4>)
 800e63c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e63e:	885b      	ldrh	r3, [r3, #2]
 800e640:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e642:	4a65      	ldr	r2, [pc, #404]	; (800e7d8 <tcp_listen_input+0x1e4>)
 800e644:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e646:	8812      	ldrh	r2, [r2, #0]
 800e648:	b292      	uxth	r2, r2
 800e64a:	9202      	str	r2, [sp, #8]
 800e64c:	9301      	str	r3, [sp, #4]
 800e64e:	4b63      	ldr	r3, [pc, #396]	; (800e7dc <tcp_listen_input+0x1e8>)
 800e650:	9300      	str	r3, [sp, #0]
 800e652:	4b63      	ldr	r3, [pc, #396]	; (800e7e0 <tcp_listen_input+0x1ec>)
 800e654:	4602      	mov	r2, r0
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f002 ff80 	bl	801155c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e65c:	e0a9      	b.n	800e7b2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e65e:	4b57      	ldr	r3, [pc, #348]	; (800e7bc <tcp_listen_input+0x1c8>)
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	f003 0302 	and.w	r3, r3, #2
 800e666:	2b00      	cmp	r3, #0
 800e668:	f000 80a3 	beq.w	800e7b2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	7d5b      	ldrb	r3, [r3, #21]
 800e670:	4618      	mov	r0, r3
 800e672:	f7ff f927 	bl	800d8c4 <tcp_alloc>
 800e676:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d111      	bne.n	800e6a2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	699b      	ldr	r3, [r3, #24]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d00a      	beq.n	800e69c <tcp_listen_input+0xa8>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	6910      	ldr	r0, [r2, #16]
 800e68e:	f04f 32ff 	mov.w	r2, #4294967295
 800e692:	2100      	movs	r1, #0
 800e694:	4798      	blx	r3
 800e696:	4603      	mov	r3, r0
 800e698:	73bb      	strb	r3, [r7, #14]
      return;
 800e69a:	e08b      	b.n	800e7b4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e69c:	23f0      	movs	r3, #240	; 0xf0
 800e69e:	73bb      	strb	r3, [r7, #14]
      return;
 800e6a0:	e088      	b.n	800e7b4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e6a2:	4b50      	ldr	r3, [pc, #320]	; (800e7e4 <tcp_listen_input+0x1f0>)
 800e6a4:	695a      	ldr	r2, [r3, #20]
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e6aa:	4b4e      	ldr	r3, [pc, #312]	; (800e7e4 <tcp_listen_input+0x1f0>)
 800e6ac:	691a      	ldr	r2, [r3, #16]
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	8ada      	ldrh	r2, [r3, #22]
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e6ba:	4b47      	ldr	r3, [pc, #284]	; (800e7d8 <tcp_listen_input+0x1e4>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	2203      	movs	r2, #3
 800e6ca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e6cc:	4b41      	ldr	r3, [pc, #260]	; (800e7d4 <tcp_listen_input+0x1e0>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	1c5a      	adds	r2, r3, #1
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e6de:	6978      	ldr	r0, [r7, #20]
 800e6e0:	f7ff fa58 	bl	800db94 <tcp_next_iss>
 800e6e4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	693a      	ldr	r2, [r7, #16]
 800e6ea:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	693a      	ldr	r2, [r7, #16]
 800e6f0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	693a      	ldr	r2, [r7, #16]
 800e6f6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	693a      	ldr	r2, [r7, #16]
 800e6fc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e6fe:	4b35      	ldr	r3, [pc, #212]	; (800e7d4 <tcp_listen_input+0x1e0>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	1e5a      	subs	r2, r3, #1
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	691a      	ldr	r2, [r3, #16]
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	7a5b      	ldrb	r3, [r3, #9]
 800e71a:	f003 030c 	and.w	r3, r3, #12
 800e71e:	b2da      	uxtb	r2, r3
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	7a1a      	ldrb	r2, [r3, #8]
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e72c:	4b2e      	ldr	r3, [pc, #184]	; (800e7e8 <tcp_listen_input+0x1f4>)
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	60da      	str	r2, [r3, #12]
 800e734:	4a2c      	ldr	r2, [pc, #176]	; (800e7e8 <tcp_listen_input+0x1f4>)
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	6013      	str	r3, [r2, #0]
 800e73a:	f003 f8d1 	bl	80118e0 <tcp_timer_needed>
 800e73e:	4b2b      	ldr	r3, [pc, #172]	; (800e7ec <tcp_listen_input+0x1f8>)
 800e740:	2201      	movs	r2, #1
 800e742:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e744:	6978      	ldr	r0, [r7, #20]
 800e746:	f001 fd8f 	bl	8010268 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e74a:	4b23      	ldr	r3, [pc, #140]	; (800e7d8 <tcp_listen_input+0x1e4>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	89db      	ldrh	r3, [r3, #14]
 800e750:	b29a      	uxth	r2, r3
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	3304      	adds	r3, #4
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7fb f8c1 	bl	80098f4 <ip4_route>
 800e772:	4601      	mov	r1, r0
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	3304      	adds	r3, #4
 800e778:	461a      	mov	r2, r3
 800e77a:	4620      	mov	r0, r4
 800e77c:	f7ff fa30 	bl	800dbe0 <tcp_eff_send_mss_netif>
 800e780:	4603      	mov	r3, r0
 800e782:	461a      	mov	r2, r3
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e788:	2112      	movs	r1, #18
 800e78a:	6978      	ldr	r0, [r7, #20]
 800e78c:	f002 f844 	bl	8010818 <tcp_enqueue_flags>
 800e790:	4603      	mov	r3, r0
 800e792:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d004      	beq.n	800e7a6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e79c:	2100      	movs	r1, #0
 800e79e:	6978      	ldr	r0, [r7, #20]
 800e7a0:	f7fe f97e 	bl	800caa0 <tcp_abandon>
      return;
 800e7a4:	e006      	b.n	800e7b4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e7a6:	6978      	ldr	r0, [r7, #20]
 800e7a8:	f002 f924 	bl	80109f4 <tcp_output>
  return;
 800e7ac:	e001      	b.n	800e7b2 <tcp_listen_input+0x1be>
    return;
 800e7ae:	bf00      	nop
 800e7b0:	e000      	b.n	800e7b4 <tcp_listen_input+0x1c0>
  return;
 800e7b2:	bf00      	nop
}
 800e7b4:	371c      	adds	r7, #28
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd90      	pop	{r4, r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	24008198 	.word	0x24008198
 800e7c0:	08014a18 	.word	0x08014a18
 800e7c4:	08014c30 	.word	0x08014c30
 800e7c8:	08014a84 	.word	0x08014a84
 800e7cc:	24008190 	.word	0x24008190
 800e7d0:	24008196 	.word	0x24008196
 800e7d4:	2400818c 	.word	0x2400818c
 800e7d8:	2400817c 	.word	0x2400817c
 800e7dc:	2400523c 	.word	0x2400523c
 800e7e0:	24005240 	.word	0x24005240
 800e7e4:	2400522c 	.word	0x2400522c
 800e7e8:	24008160 	.word	0x24008160
 800e7ec:	24008168 	.word	0x24008168

0800e7f0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b086      	sub	sp, #24
 800e7f4:	af04      	add	r7, sp, #16
 800e7f6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e7f8:	4b2f      	ldr	r3, [pc, #188]	; (800e8b8 <tcp_timewait_input+0xc8>)
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	f003 0304 	and.w	r3, r3, #4
 800e800:	2b00      	cmp	r3, #0
 800e802:	d153      	bne.n	800e8ac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d106      	bne.n	800e818 <tcp_timewait_input+0x28>
 800e80a:	4b2c      	ldr	r3, [pc, #176]	; (800e8bc <tcp_timewait_input+0xcc>)
 800e80c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e810:	492b      	ldr	r1, [pc, #172]	; (800e8c0 <tcp_timewait_input+0xd0>)
 800e812:	482c      	ldr	r0, [pc, #176]	; (800e8c4 <tcp_timewait_input+0xd4>)
 800e814:	f003 fb70 	bl	8011ef8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e818:	4b27      	ldr	r3, [pc, #156]	; (800e8b8 <tcp_timewait_input+0xc8>)
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	f003 0302 	and.w	r3, r3, #2
 800e820:	2b00      	cmp	r3, #0
 800e822:	d02a      	beq.n	800e87a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e824:	4b28      	ldr	r3, [pc, #160]	; (800e8c8 <tcp_timewait_input+0xd8>)
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82c:	1ad3      	subs	r3, r2, r3
 800e82e:	2b00      	cmp	r3, #0
 800e830:	db2d      	blt.n	800e88e <tcp_timewait_input+0x9e>
 800e832:	4b25      	ldr	r3, [pc, #148]	; (800e8c8 <tcp_timewait_input+0xd8>)
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e83a:	6879      	ldr	r1, [r7, #4]
 800e83c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e83e:	440b      	add	r3, r1
 800e840:	1ad3      	subs	r3, r2, r3
 800e842:	2b00      	cmp	r3, #0
 800e844:	dc23      	bgt.n	800e88e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e846:	4b21      	ldr	r3, [pc, #132]	; (800e8cc <tcp_timewait_input+0xdc>)
 800e848:	6819      	ldr	r1, [r3, #0]
 800e84a:	4b21      	ldr	r3, [pc, #132]	; (800e8d0 <tcp_timewait_input+0xe0>)
 800e84c:	881b      	ldrh	r3, [r3, #0]
 800e84e:	461a      	mov	r2, r3
 800e850:	4b1d      	ldr	r3, [pc, #116]	; (800e8c8 <tcp_timewait_input+0xd8>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e856:	4b1f      	ldr	r3, [pc, #124]	; (800e8d4 <tcp_timewait_input+0xe4>)
 800e858:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e85a:	885b      	ldrh	r3, [r3, #2]
 800e85c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e85e:	4a1d      	ldr	r2, [pc, #116]	; (800e8d4 <tcp_timewait_input+0xe4>)
 800e860:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e862:	8812      	ldrh	r2, [r2, #0]
 800e864:	b292      	uxth	r2, r2
 800e866:	9202      	str	r2, [sp, #8]
 800e868:	9301      	str	r3, [sp, #4]
 800e86a:	4b1b      	ldr	r3, [pc, #108]	; (800e8d8 <tcp_timewait_input+0xe8>)
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	4b1b      	ldr	r3, [pc, #108]	; (800e8dc <tcp_timewait_input+0xec>)
 800e870:	4602      	mov	r2, r0
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f002 fe72 	bl	801155c <tcp_rst>
      return;
 800e878:	e01b      	b.n	800e8b2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e87a:	4b0f      	ldr	r3, [pc, #60]	; (800e8b8 <tcp_timewait_input+0xc8>)
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	f003 0301 	and.w	r3, r3, #1
 800e882:	2b00      	cmp	r3, #0
 800e884:	d003      	beq.n	800e88e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e886:	4b16      	ldr	r3, [pc, #88]	; (800e8e0 <tcp_timewait_input+0xf0>)
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e88e:	4b10      	ldr	r3, [pc, #64]	; (800e8d0 <tcp_timewait_input+0xe0>)
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d00c      	beq.n	800e8b0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	8b5b      	ldrh	r3, [r3, #26]
 800e89a:	f043 0302 	orr.w	r3, r3, #2
 800e89e:	b29a      	uxth	r2, r3
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f002 f8a5 	bl	80109f4 <tcp_output>
  }
  return;
 800e8aa:	e001      	b.n	800e8b0 <tcp_timewait_input+0xc0>
    return;
 800e8ac:	bf00      	nop
 800e8ae:	e000      	b.n	800e8b2 <tcp_timewait_input+0xc2>
  return;
 800e8b0:	bf00      	nop
}
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	24008198 	.word	0x24008198
 800e8bc:	08014a18 	.word	0x08014a18
 800e8c0:	08014c50 	.word	0x08014c50
 800e8c4:	08014a84 	.word	0x08014a84
 800e8c8:	2400818c 	.word	0x2400818c
 800e8cc:	24008190 	.word	0x24008190
 800e8d0:	24008196 	.word	0x24008196
 800e8d4:	2400817c 	.word	0x2400817c
 800e8d8:	2400523c 	.word	0x2400523c
 800e8dc:	24005240 	.word	0x24005240
 800e8e0:	24008154 	.word	0x24008154

0800e8e4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e8e4:	b590      	push	{r4, r7, lr}
 800e8e6:	b08d      	sub	sp, #52	; 0x34
 800e8e8:	af04      	add	r7, sp, #16
 800e8ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d106      	bne.n	800e908 <tcp_process+0x24>
 800e8fa:	4b9d      	ldr	r3, [pc, #628]	; (800eb70 <tcp_process+0x28c>)
 800e8fc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e900:	499c      	ldr	r1, [pc, #624]	; (800eb74 <tcp_process+0x290>)
 800e902:	489d      	ldr	r0, [pc, #628]	; (800eb78 <tcp_process+0x294>)
 800e904:	f003 faf8 	bl	8011ef8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e908:	4b9c      	ldr	r3, [pc, #624]	; (800eb7c <tcp_process+0x298>)
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	f003 0304 	and.w	r3, r3, #4
 800e910:	2b00      	cmp	r3, #0
 800e912:	d04e      	beq.n	800e9b2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	7d1b      	ldrb	r3, [r3, #20]
 800e918:	2b02      	cmp	r3, #2
 800e91a:	d108      	bne.n	800e92e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e920:	4b97      	ldr	r3, [pc, #604]	; (800eb80 <tcp_process+0x29c>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	429a      	cmp	r2, r3
 800e926:	d123      	bne.n	800e970 <tcp_process+0x8c>
        acceptable = 1;
 800e928:	2301      	movs	r3, #1
 800e92a:	76fb      	strb	r3, [r7, #27]
 800e92c:	e020      	b.n	800e970 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e932:	4b94      	ldr	r3, [pc, #592]	; (800eb84 <tcp_process+0x2a0>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	429a      	cmp	r2, r3
 800e938:	d102      	bne.n	800e940 <tcp_process+0x5c>
        acceptable = 1;
 800e93a:	2301      	movs	r3, #1
 800e93c:	76fb      	strb	r3, [r7, #27]
 800e93e:	e017      	b.n	800e970 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e940:	4b90      	ldr	r3, [pc, #576]	; (800eb84 <tcp_process+0x2a0>)
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	db10      	blt.n	800e970 <tcp_process+0x8c>
 800e94e:	4b8d      	ldr	r3, [pc, #564]	; (800eb84 <tcp_process+0x2a0>)
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e956:	6879      	ldr	r1, [r7, #4]
 800e958:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e95a:	440b      	add	r3, r1
 800e95c:	1ad3      	subs	r3, r2, r3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	dc06      	bgt.n	800e970 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	8b5b      	ldrh	r3, [r3, #26]
 800e966:	f043 0302 	orr.w	r3, r3, #2
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e970:	7efb      	ldrb	r3, [r7, #27]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d01b      	beq.n	800e9ae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	7d1b      	ldrb	r3, [r3, #20]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d106      	bne.n	800e98c <tcp_process+0xa8>
 800e97e:	4b7c      	ldr	r3, [pc, #496]	; (800eb70 <tcp_process+0x28c>)
 800e980:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e984:	4980      	ldr	r1, [pc, #512]	; (800eb88 <tcp_process+0x2a4>)
 800e986:	487c      	ldr	r0, [pc, #496]	; (800eb78 <tcp_process+0x294>)
 800e988:	f003 fab6 	bl	8011ef8 <iprintf>
      recv_flags |= TF_RESET;
 800e98c:	4b7f      	ldr	r3, [pc, #508]	; (800eb8c <tcp_process+0x2a8>)
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	f043 0308 	orr.w	r3, r3, #8
 800e994:	b2da      	uxtb	r2, r3
 800e996:	4b7d      	ldr	r3, [pc, #500]	; (800eb8c <tcp_process+0x2a8>)
 800e998:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	8b5b      	ldrh	r3, [r3, #26]
 800e99e:	f023 0301 	bic.w	r3, r3, #1
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e9a8:	f06f 030d 	mvn.w	r3, #13
 800e9ac:	e37a      	b.n	800f0a4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	e378      	b.n	800f0a4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e9b2:	4b72      	ldr	r3, [pc, #456]	; (800eb7c <tcp_process+0x298>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	f003 0302 	and.w	r3, r3, #2
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d010      	beq.n	800e9e0 <tcp_process+0xfc>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	7d1b      	ldrb	r3, [r3, #20]
 800e9c2:	2b02      	cmp	r3, #2
 800e9c4:	d00c      	beq.n	800e9e0 <tcp_process+0xfc>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	7d1b      	ldrb	r3, [r3, #20]
 800e9ca:	2b03      	cmp	r3, #3
 800e9cc:	d008      	beq.n	800e9e0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	8b5b      	ldrh	r3, [r3, #26]
 800e9d2:	f043 0302 	orr.w	r3, r3, #2
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	e361      	b.n	800f0a4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	8b5b      	ldrh	r3, [r3, #26]
 800e9e4:	f003 0310 	and.w	r3, r3, #16
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d103      	bne.n	800e9f4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e9ec:	4b68      	ldr	r3, [pc, #416]	; (800eb90 <tcp_process+0x2ac>)
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f001 fc2f 	bl	8010268 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7d1b      	ldrb	r3, [r3, #20]
 800ea0e:	3b02      	subs	r3, #2
 800ea10:	2b07      	cmp	r3, #7
 800ea12:	f200 8337 	bhi.w	800f084 <tcp_process+0x7a0>
 800ea16:	a201      	add	r2, pc, #4	; (adr r2, 800ea1c <tcp_process+0x138>)
 800ea18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea1c:	0800ea3d 	.word	0x0800ea3d
 800ea20:	0800ec6d 	.word	0x0800ec6d
 800ea24:	0800ede5 	.word	0x0800ede5
 800ea28:	0800ee0f 	.word	0x0800ee0f
 800ea2c:	0800ef33 	.word	0x0800ef33
 800ea30:	0800ede5 	.word	0x0800ede5
 800ea34:	0800efbf 	.word	0x0800efbf
 800ea38:	0800f04f 	.word	0x0800f04f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ea3c:	4b4f      	ldr	r3, [pc, #316]	; (800eb7c <tcp_process+0x298>)
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	f003 0310 	and.w	r3, r3, #16
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f000 80e4 	beq.w	800ec12 <tcp_process+0x32e>
 800ea4a:	4b4c      	ldr	r3, [pc, #304]	; (800eb7c <tcp_process+0x298>)
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	f003 0302 	and.w	r3, r3, #2
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f000 80dd 	beq.w	800ec12 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea5c:	1c5a      	adds	r2, r3, #1
 800ea5e:	4b48      	ldr	r3, [pc, #288]	; (800eb80 <tcp_process+0x29c>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	f040 80d5 	bne.w	800ec12 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ea68:	4b46      	ldr	r3, [pc, #280]	; (800eb84 <tcp_process+0x2a0>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	1c5a      	adds	r2, r3, #1
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ea7a:	4b41      	ldr	r3, [pc, #260]	; (800eb80 <tcp_process+0x29c>)
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ea82:	4b44      	ldr	r3, [pc, #272]	; (800eb94 <tcp_process+0x2b0>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	89db      	ldrh	r3, [r3, #14]
 800ea88:	b29a      	uxth	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ea9c:	4b39      	ldr	r3, [pc, #228]	; (800eb84 <tcp_process+0x2a0>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	1e5a      	subs	r2, r3, #1
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2204      	movs	r2, #4
 800eaaa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	3304      	adds	r3, #4
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7fa ff1d 	bl	80098f4 <ip4_route>
 800eaba:	4601      	mov	r1, r0
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3304      	adds	r3, #4
 800eac0:	461a      	mov	r2, r3
 800eac2:	4620      	mov	r0, r4
 800eac4:	f7ff f88c 	bl	800dbe0 <tcp_eff_send_mss_netif>
 800eac8:	4603      	mov	r3, r0
 800eaca:	461a      	mov	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ead4:	009a      	lsls	r2, r3, #2
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eada:	005b      	lsls	r3, r3, #1
 800eadc:	f241 111c 	movw	r1, #4380	; 0x111c
 800eae0:	428b      	cmp	r3, r1
 800eae2:	bf38      	it	cc
 800eae4:	460b      	movcc	r3, r1
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d204      	bcs.n	800eaf4 <tcp_process+0x210>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaee:	009b      	lsls	r3, r3, #2
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	e00d      	b.n	800eb10 <tcp_process+0x22c>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaf8:	005b      	lsls	r3, r3, #1
 800eafa:	f241 121c 	movw	r2, #4380	; 0x111c
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d904      	bls.n	800eb0c <tcp_process+0x228>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb06:	005b      	lsls	r3, r3, #1
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	e001      	b.n	800eb10 <tcp_process+0x22c>
 800eb0c:	f241 131c 	movw	r3, #4380	; 0x111c
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d106      	bne.n	800eb2e <tcp_process+0x24a>
 800eb20:	4b13      	ldr	r3, [pc, #76]	; (800eb70 <tcp_process+0x28c>)
 800eb22:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800eb26:	491c      	ldr	r1, [pc, #112]	; (800eb98 <tcp_process+0x2b4>)
 800eb28:	4813      	ldr	r0, [pc, #76]	; (800eb78 <tcp_process+0x294>)
 800eb2a:	f003 f9e5 	bl	8011ef8 <iprintf>
        --pcb->snd_queuelen;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb34:	3b01      	subs	r3, #1
 800eb36:	b29a      	uxth	r2, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb42:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d12a      	bne.n	800eba0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb4e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d106      	bne.n	800eb64 <tcp_process+0x280>
 800eb56:	4b06      	ldr	r3, [pc, #24]	; (800eb70 <tcp_process+0x28c>)
 800eb58:	f44f 725d 	mov.w	r2, #884	; 0x374
 800eb5c:	490f      	ldr	r1, [pc, #60]	; (800eb9c <tcp_process+0x2b8>)
 800eb5e:	4806      	ldr	r0, [pc, #24]	; (800eb78 <tcp_process+0x294>)
 800eb60:	f003 f9ca 	bl	8011ef8 <iprintf>
          pcb->unsent = rseg->next;
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	66da      	str	r2, [r3, #108]	; 0x6c
 800eb6c:	e01c      	b.n	800eba8 <tcp_process+0x2c4>
 800eb6e:	bf00      	nop
 800eb70:	08014a18 	.word	0x08014a18
 800eb74:	08014c70 	.word	0x08014c70
 800eb78:	08014a84 	.word	0x08014a84
 800eb7c:	24008198 	.word	0x24008198
 800eb80:	24008190 	.word	0x24008190
 800eb84:	2400818c 	.word	0x2400818c
 800eb88:	08014c8c 	.word	0x08014c8c
 800eb8c:	24008199 	.word	0x24008199
 800eb90:	24008154 	.word	0x24008154
 800eb94:	2400817c 	.word	0x2400817c
 800eb98:	08014cac 	.word	0x08014cac
 800eb9c:	08014cc4 	.word	0x08014cc4
        } else {
          pcb->unacked = rseg->next;
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800eba8:	69f8      	ldr	r0, [r7, #28]
 800ebaa:	f7fe fd22 	bl	800d5f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d104      	bne.n	800ebc0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebbc:	861a      	strh	r2, [r3, #48]	; 0x30
 800ebbe:	e006      	b.n	800ebce <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00a      	beq.n	800ebee <tcp_process+0x30a>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	6910      	ldr	r0, [r2, #16]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	6879      	ldr	r1, [r7, #4]
 800ebe6:	4798      	blx	r3
 800ebe8:	4603      	mov	r3, r0
 800ebea:	76bb      	strb	r3, [r7, #26]
 800ebec:	e001      	b.n	800ebf2 <tcp_process+0x30e>
 800ebee:	2300      	movs	r3, #0
 800ebf0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ebf2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ebf6:	f113 0f0d 	cmn.w	r3, #13
 800ebfa:	d102      	bne.n	800ec02 <tcp_process+0x31e>
          return ERR_ABRT;
 800ebfc:	f06f 030c 	mvn.w	r3, #12
 800ec00:	e250      	b.n	800f0a4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	8b5b      	ldrh	r3, [r3, #26]
 800ec06:	f043 0302 	orr.w	r3, r3, #2
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ec10:	e23a      	b.n	800f088 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ec12:	4b98      	ldr	r3, [pc, #608]	; (800ee74 <tcp_process+0x590>)
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	f003 0310 	and.w	r3, r3, #16
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f000 8234 	beq.w	800f088 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec20:	4b95      	ldr	r3, [pc, #596]	; (800ee78 <tcp_process+0x594>)
 800ec22:	6819      	ldr	r1, [r3, #0]
 800ec24:	4b95      	ldr	r3, [pc, #596]	; (800ee7c <tcp_process+0x598>)
 800ec26:	881b      	ldrh	r3, [r3, #0]
 800ec28:	461a      	mov	r2, r3
 800ec2a:	4b95      	ldr	r3, [pc, #596]	; (800ee80 <tcp_process+0x59c>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec30:	4b94      	ldr	r3, [pc, #592]	; (800ee84 <tcp_process+0x5a0>)
 800ec32:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec34:	885b      	ldrh	r3, [r3, #2]
 800ec36:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec38:	4a92      	ldr	r2, [pc, #584]	; (800ee84 <tcp_process+0x5a0>)
 800ec3a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec3c:	8812      	ldrh	r2, [r2, #0]
 800ec3e:	b292      	uxth	r2, r2
 800ec40:	9202      	str	r2, [sp, #8]
 800ec42:	9301      	str	r3, [sp, #4]
 800ec44:	4b90      	ldr	r3, [pc, #576]	; (800ee88 <tcp_process+0x5a4>)
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	4b90      	ldr	r3, [pc, #576]	; (800ee8c <tcp_process+0x5a8>)
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f002 fc85 	bl	801155c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec58:	2b05      	cmp	r3, #5
 800ec5a:	f200 8215 	bhi.w	800f088 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f002 fa4f 	bl	8011108 <tcp_rexmit_rto>
      break;
 800ec6a:	e20d      	b.n	800f088 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ec6c:	4b81      	ldr	r3, [pc, #516]	; (800ee74 <tcp_process+0x590>)
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	f003 0310 	and.w	r3, r3, #16
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f000 80a1 	beq.w	800edbc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec7a:	4b7f      	ldr	r3, [pc, #508]	; (800ee78 <tcp_process+0x594>)
 800ec7c:	681a      	ldr	r2, [r3, #0]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	3b01      	subs	r3, #1
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	db7e      	blt.n	800ed88 <tcp_process+0x4a4>
 800ec8a:	4b7b      	ldr	r3, [pc, #492]	; (800ee78 <tcp_process+0x594>)
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec92:	1ad3      	subs	r3, r2, r3
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	dc77      	bgt.n	800ed88 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2204      	movs	r2, #4
 800ec9c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d102      	bne.n	800ecac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800eca6:	23fa      	movs	r3, #250	; 0xfa
 800eca8:	76bb      	strb	r3, [r7, #26]
 800ecaa:	e01d      	b.n	800ece8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecb0:	699b      	ldr	r3, [r3, #24]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d106      	bne.n	800ecc4 <tcp_process+0x3e0>
 800ecb6:	4b76      	ldr	r3, [pc, #472]	; (800ee90 <tcp_process+0x5ac>)
 800ecb8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ecbc:	4975      	ldr	r1, [pc, #468]	; (800ee94 <tcp_process+0x5b0>)
 800ecbe:	4876      	ldr	r0, [pc, #472]	; (800ee98 <tcp_process+0x5b4>)
 800ecc0:	f003 f91a 	bl	8011ef8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecc8:	699b      	ldr	r3, [r3, #24]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d00a      	beq.n	800ece4 <tcp_process+0x400>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecd2:	699b      	ldr	r3, [r3, #24]
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	6910      	ldr	r0, [r2, #16]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	6879      	ldr	r1, [r7, #4]
 800ecdc:	4798      	blx	r3
 800ecde:	4603      	mov	r3, r0
 800ece0:	76bb      	strb	r3, [r7, #26]
 800ece2:	e001      	b.n	800ece8 <tcp_process+0x404>
 800ece4:	23f0      	movs	r3, #240	; 0xf0
 800ece6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ece8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d00a      	beq.n	800ed06 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ecf0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ecf4:	f113 0f0d 	cmn.w	r3, #13
 800ecf8:	d002      	beq.n	800ed00 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f7fd ff8e 	bl	800cc1c <tcp_abort>
            }
            return ERR_ABRT;
 800ed00:	f06f 030c 	mvn.w	r3, #12
 800ed04:	e1ce      	b.n	800f0a4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 fae0 	bl	800f2cc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ed0c:	4b63      	ldr	r3, [pc, #396]	; (800ee9c <tcp_process+0x5b8>)
 800ed0e:	881b      	ldrh	r3, [r3, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d005      	beq.n	800ed20 <tcp_process+0x43c>
            recv_acked--;
 800ed14:	4b61      	ldr	r3, [pc, #388]	; (800ee9c <tcp_process+0x5b8>)
 800ed16:	881b      	ldrh	r3, [r3, #0]
 800ed18:	3b01      	subs	r3, #1
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	4b5f      	ldr	r3, [pc, #380]	; (800ee9c <tcp_process+0x5b8>)
 800ed1e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed24:	009a      	lsls	r2, r3, #2
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed2a:	005b      	lsls	r3, r3, #1
 800ed2c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ed30:	428b      	cmp	r3, r1
 800ed32:	bf38      	it	cc
 800ed34:	460b      	movcc	r3, r1
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d204      	bcs.n	800ed44 <tcp_process+0x460>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	e00d      	b.n	800ed60 <tcp_process+0x47c>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed48:	005b      	lsls	r3, r3, #1
 800ed4a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d904      	bls.n	800ed5c <tcp_process+0x478>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed56:	005b      	lsls	r3, r3, #1
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	e001      	b.n	800ed60 <tcp_process+0x47c>
 800ed5c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ed66:	4b4e      	ldr	r3, [pc, #312]	; (800eea0 <tcp_process+0x5bc>)
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	f003 0320 	and.w	r3, r3, #32
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d037      	beq.n	800ede2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	8b5b      	ldrh	r3, [r3, #26]
 800ed76:	f043 0302 	orr.w	r3, r3, #2
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2207      	movs	r2, #7
 800ed84:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ed86:	e02c      	b.n	800ede2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed88:	4b3b      	ldr	r3, [pc, #236]	; (800ee78 <tcp_process+0x594>)
 800ed8a:	6819      	ldr	r1, [r3, #0]
 800ed8c:	4b3b      	ldr	r3, [pc, #236]	; (800ee7c <tcp_process+0x598>)
 800ed8e:	881b      	ldrh	r3, [r3, #0]
 800ed90:	461a      	mov	r2, r3
 800ed92:	4b3b      	ldr	r3, [pc, #236]	; (800ee80 <tcp_process+0x59c>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed98:	4b3a      	ldr	r3, [pc, #232]	; (800ee84 <tcp_process+0x5a0>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed9c:	885b      	ldrh	r3, [r3, #2]
 800ed9e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eda0:	4a38      	ldr	r2, [pc, #224]	; (800ee84 <tcp_process+0x5a0>)
 800eda2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eda4:	8812      	ldrh	r2, [r2, #0]
 800eda6:	b292      	uxth	r2, r2
 800eda8:	9202      	str	r2, [sp, #8]
 800edaa:	9301      	str	r3, [sp, #4]
 800edac:	4b36      	ldr	r3, [pc, #216]	; (800ee88 <tcp_process+0x5a4>)
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	4b36      	ldr	r3, [pc, #216]	; (800ee8c <tcp_process+0x5a8>)
 800edb2:	4602      	mov	r2, r0
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f002 fbd1 	bl	801155c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800edba:	e167      	b.n	800f08c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800edbc:	4b2d      	ldr	r3, [pc, #180]	; (800ee74 <tcp_process+0x590>)
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	f003 0302 	and.w	r3, r3, #2
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f000 8161 	beq.w	800f08c <tcp_process+0x7a8>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edce:	1e5a      	subs	r2, r3, #1
 800edd0:	4b2b      	ldr	r3, [pc, #172]	; (800ee80 <tcp_process+0x59c>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	f040 8159 	bne.w	800f08c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f002 f9b6 	bl	801114c <tcp_rexmit>
      break;
 800ede0:	e154      	b.n	800f08c <tcp_process+0x7a8>
 800ede2:	e153      	b.n	800f08c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f000 fa71 	bl	800f2cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800edea:	4b2d      	ldr	r3, [pc, #180]	; (800eea0 <tcp_process+0x5bc>)
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	f003 0320 	and.w	r3, r3, #32
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f000 814c 	beq.w	800f090 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	8b5b      	ldrh	r3, [r3, #26]
 800edfc:	f043 0302 	orr.w	r3, r3, #2
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2207      	movs	r2, #7
 800ee0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee0c:	e140      	b.n	800f090 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f000 fa5c 	bl	800f2cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ee14:	4b22      	ldr	r3, [pc, #136]	; (800eea0 <tcp_process+0x5bc>)
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	f003 0320 	and.w	r3, r3, #32
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d071      	beq.n	800ef04 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee20:	4b14      	ldr	r3, [pc, #80]	; (800ee74 <tcp_process+0x590>)
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	f003 0310 	and.w	r3, r3, #16
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d060      	beq.n	800eeee <tcp_process+0x60a>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee30:	4b11      	ldr	r3, [pc, #68]	; (800ee78 <tcp_process+0x594>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d15a      	bne.n	800eeee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d156      	bne.n	800eeee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	8b5b      	ldrh	r3, [r3, #26]
 800ee44:	f043 0302 	orr.w	r3, r3, #2
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f7fe fdbc 	bl	800d9cc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ee54:	4b13      	ldr	r3, [pc, #76]	; (800eea4 <tcp_process+0x5c0>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d105      	bne.n	800ee6a <tcp_process+0x586>
 800ee5e:	4b11      	ldr	r3, [pc, #68]	; (800eea4 <tcp_process+0x5c0>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	4a0f      	ldr	r2, [pc, #60]	; (800eea4 <tcp_process+0x5c0>)
 800ee66:	6013      	str	r3, [r2, #0]
 800ee68:	e02e      	b.n	800eec8 <tcp_process+0x5e4>
 800ee6a:	4b0e      	ldr	r3, [pc, #56]	; (800eea4 <tcp_process+0x5c0>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	617b      	str	r3, [r7, #20]
 800ee70:	e027      	b.n	800eec2 <tcp_process+0x5de>
 800ee72:	bf00      	nop
 800ee74:	24008198 	.word	0x24008198
 800ee78:	24008190 	.word	0x24008190
 800ee7c:	24008196 	.word	0x24008196
 800ee80:	2400818c 	.word	0x2400818c
 800ee84:	2400817c 	.word	0x2400817c
 800ee88:	2400523c 	.word	0x2400523c
 800ee8c:	24005240 	.word	0x24005240
 800ee90:	08014a18 	.word	0x08014a18
 800ee94:	08014cd8 	.word	0x08014cd8
 800ee98:	08014a84 	.word	0x08014a84
 800ee9c:	24008194 	.word	0x24008194
 800eea0:	24008199 	.word	0x24008199
 800eea4:	24008160 	.word	0x24008160
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d104      	bne.n	800eebc <tcp_process+0x5d8>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68da      	ldr	r2, [r3, #12]
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	60da      	str	r2, [r3, #12]
 800eeba:	e005      	b.n	800eec8 <tcp_process+0x5e4>
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	617b      	str	r3, [r7, #20]
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d1ef      	bne.n	800eea8 <tcp_process+0x5c4>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2200      	movs	r2, #0
 800eecc:	60da      	str	r2, [r3, #12]
 800eece:	4b77      	ldr	r3, [pc, #476]	; (800f0ac <tcp_process+0x7c8>)
 800eed0:	2201      	movs	r2, #1
 800eed2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	220a      	movs	r2, #10
 800eed8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800eeda:	4b75      	ldr	r3, [pc, #468]	; (800f0b0 <tcp_process+0x7cc>)
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	60da      	str	r2, [r3, #12]
 800eee2:	4a73      	ldr	r2, [pc, #460]	; (800f0b0 <tcp_process+0x7cc>)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6013      	str	r3, [r2, #0]
 800eee8:	f002 fcfa 	bl	80118e0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800eeec:	e0d2      	b.n	800f094 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	8b5b      	ldrh	r3, [r3, #26]
 800eef2:	f043 0302 	orr.w	r3, r3, #2
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2208      	movs	r2, #8
 800ef00:	751a      	strb	r2, [r3, #20]
      break;
 800ef02:	e0c7      	b.n	800f094 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef04:	4b6b      	ldr	r3, [pc, #428]	; (800f0b4 <tcp_process+0x7d0>)
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	f003 0310 	and.w	r3, r3, #16
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	f000 80c1 	beq.w	800f094 <tcp_process+0x7b0>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef16:	4b68      	ldr	r3, [pc, #416]	; (800f0b8 <tcp_process+0x7d4>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	f040 80ba 	bne.w	800f094 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f040 80b5 	bne.w	800f094 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2206      	movs	r2, #6
 800ef2e:	751a      	strb	r2, [r3, #20]
      break;
 800ef30:	e0b0      	b.n	800f094 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f000 f9ca 	bl	800f2cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef38:	4b60      	ldr	r3, [pc, #384]	; (800f0bc <tcp_process+0x7d8>)
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	f003 0320 	and.w	r3, r3, #32
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f000 80a9 	beq.w	800f098 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	8b5b      	ldrh	r3, [r3, #26]
 800ef4a:	f043 0302 	orr.w	r3, r3, #2
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7fe fd39 	bl	800d9cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef5a:	4b59      	ldr	r3, [pc, #356]	; (800f0c0 <tcp_process+0x7dc>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d105      	bne.n	800ef70 <tcp_process+0x68c>
 800ef64:	4b56      	ldr	r3, [pc, #344]	; (800f0c0 <tcp_process+0x7dc>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	4a55      	ldr	r2, [pc, #340]	; (800f0c0 <tcp_process+0x7dc>)
 800ef6c:	6013      	str	r3, [r2, #0]
 800ef6e:	e013      	b.n	800ef98 <tcp_process+0x6b4>
 800ef70:	4b53      	ldr	r3, [pc, #332]	; (800f0c0 <tcp_process+0x7dc>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	613b      	str	r3, [r7, #16]
 800ef76:	e00c      	b.n	800ef92 <tcp_process+0x6ae>
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d104      	bne.n	800ef8c <tcp_process+0x6a8>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	68da      	ldr	r2, [r3, #12]
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	60da      	str	r2, [r3, #12]
 800ef8a:	e005      	b.n	800ef98 <tcp_process+0x6b4>
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	613b      	str	r3, [r7, #16]
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d1ef      	bne.n	800ef78 <tcp_process+0x694>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	60da      	str	r2, [r3, #12]
 800ef9e:	4b43      	ldr	r3, [pc, #268]	; (800f0ac <tcp_process+0x7c8>)
 800efa0:	2201      	movs	r2, #1
 800efa2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	220a      	movs	r2, #10
 800efa8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800efaa:	4b41      	ldr	r3, [pc, #260]	; (800f0b0 <tcp_process+0x7cc>)
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	60da      	str	r2, [r3, #12]
 800efb2:	4a3f      	ldr	r2, [pc, #252]	; (800f0b0 <tcp_process+0x7cc>)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6013      	str	r3, [r2, #0]
 800efb8:	f002 fc92 	bl	80118e0 <tcp_timer_needed>
      }
      break;
 800efbc:	e06c      	b.n	800f098 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 f984 	bl	800f2cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800efc4:	4b3b      	ldr	r3, [pc, #236]	; (800f0b4 <tcp_process+0x7d0>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	f003 0310 	and.w	r3, r3, #16
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d065      	beq.n	800f09c <tcp_process+0x7b8>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efd4:	4b38      	ldr	r3, [pc, #224]	; (800f0b8 <tcp_process+0x7d4>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d15f      	bne.n	800f09c <tcp_process+0x7b8>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d15b      	bne.n	800f09c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f7fe fcf1 	bl	800d9cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800efea:	4b35      	ldr	r3, [pc, #212]	; (800f0c0 <tcp_process+0x7dc>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d105      	bne.n	800f000 <tcp_process+0x71c>
 800eff4:	4b32      	ldr	r3, [pc, #200]	; (800f0c0 <tcp_process+0x7dc>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	4a31      	ldr	r2, [pc, #196]	; (800f0c0 <tcp_process+0x7dc>)
 800effc:	6013      	str	r3, [r2, #0]
 800effe:	e013      	b.n	800f028 <tcp_process+0x744>
 800f000:	4b2f      	ldr	r3, [pc, #188]	; (800f0c0 <tcp_process+0x7dc>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	60fb      	str	r3, [r7, #12]
 800f006:	e00c      	b.n	800f022 <tcp_process+0x73e>
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d104      	bne.n	800f01c <tcp_process+0x738>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	68da      	ldr	r2, [r3, #12]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	60da      	str	r2, [r3, #12]
 800f01a:	e005      	b.n	800f028 <tcp_process+0x744>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	60fb      	str	r3, [r7, #12]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1ef      	bne.n	800f008 <tcp_process+0x724>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2200      	movs	r2, #0
 800f02c:	60da      	str	r2, [r3, #12]
 800f02e:	4b1f      	ldr	r3, [pc, #124]	; (800f0ac <tcp_process+0x7c8>)
 800f030:	2201      	movs	r2, #1
 800f032:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	220a      	movs	r2, #10
 800f038:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f03a:	4b1d      	ldr	r3, [pc, #116]	; (800f0b0 <tcp_process+0x7cc>)
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	60da      	str	r2, [r3, #12]
 800f042:	4a1b      	ldr	r2, [pc, #108]	; (800f0b0 <tcp_process+0x7cc>)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6013      	str	r3, [r2, #0]
 800f048:	f002 fc4a 	bl	80118e0 <tcp_timer_needed>
      }
      break;
 800f04c:	e026      	b.n	800f09c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 f93c 	bl	800f2cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f054:	4b17      	ldr	r3, [pc, #92]	; (800f0b4 <tcp_process+0x7d0>)
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	f003 0310 	and.w	r3, r3, #16
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d01f      	beq.n	800f0a0 <tcp_process+0x7bc>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f064:	4b14      	ldr	r3, [pc, #80]	; (800f0b8 <tcp_process+0x7d4>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d119      	bne.n	800f0a0 <tcp_process+0x7bc>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f070:	2b00      	cmp	r3, #0
 800f072:	d115      	bne.n	800f0a0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f074:	4b11      	ldr	r3, [pc, #68]	; (800f0bc <tcp_process+0x7d8>)
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	f043 0310 	orr.w	r3, r3, #16
 800f07c:	b2da      	uxtb	r2, r3
 800f07e:	4b0f      	ldr	r3, [pc, #60]	; (800f0bc <tcp_process+0x7d8>)
 800f080:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f082:	e00d      	b.n	800f0a0 <tcp_process+0x7bc>
    default:
      break;
 800f084:	bf00      	nop
 800f086:	e00c      	b.n	800f0a2 <tcp_process+0x7be>
      break;
 800f088:	bf00      	nop
 800f08a:	e00a      	b.n	800f0a2 <tcp_process+0x7be>
      break;
 800f08c:	bf00      	nop
 800f08e:	e008      	b.n	800f0a2 <tcp_process+0x7be>
      break;
 800f090:	bf00      	nop
 800f092:	e006      	b.n	800f0a2 <tcp_process+0x7be>
      break;
 800f094:	bf00      	nop
 800f096:	e004      	b.n	800f0a2 <tcp_process+0x7be>
      break;
 800f098:	bf00      	nop
 800f09a:	e002      	b.n	800f0a2 <tcp_process+0x7be>
      break;
 800f09c:	bf00      	nop
 800f09e:	e000      	b.n	800f0a2 <tcp_process+0x7be>
      break;
 800f0a0:	bf00      	nop
  }
  return ERR_OK;
 800f0a2:	2300      	movs	r3, #0
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3724      	adds	r7, #36	; 0x24
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd90      	pop	{r4, r7, pc}
 800f0ac:	24008168 	.word	0x24008168
 800f0b0:	24008164 	.word	0x24008164
 800f0b4:	24008198 	.word	0x24008198
 800f0b8:	24008190 	.word	0x24008190
 800f0bc:	24008199 	.word	0x24008199
 800f0c0:	24008160 	.word	0x24008160

0800f0c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f0c4:	b590      	push	{r4, r7, lr}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d106      	bne.n	800f0e2 <tcp_oos_insert_segment+0x1e>
 800f0d4:	4b3b      	ldr	r3, [pc, #236]	; (800f1c4 <tcp_oos_insert_segment+0x100>)
 800f0d6:	f240 421f 	movw	r2, #1055	; 0x41f
 800f0da:	493b      	ldr	r1, [pc, #236]	; (800f1c8 <tcp_oos_insert_segment+0x104>)
 800f0dc:	483b      	ldr	r0, [pc, #236]	; (800f1cc <tcp_oos_insert_segment+0x108>)
 800f0de:	f002 ff0b 	bl	8011ef8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	68db      	ldr	r3, [r3, #12]
 800f0e6:	899b      	ldrh	r3, [r3, #12]
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7f9 f92c 	bl	8008348 <lwip_htons>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	f003 0301 	and.w	r3, r3, #1
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d028      	beq.n	800f14e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f0fc:	6838      	ldr	r0, [r7, #0]
 800f0fe:	f7fe fa63 	bl	800d5c8 <tcp_segs_free>
    next = NULL;
 800f102:	2300      	movs	r3, #0
 800f104:	603b      	str	r3, [r7, #0]
 800f106:	e056      	b.n	800f1b6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	899b      	ldrh	r3, [r3, #12]
 800f10e:	b29b      	uxth	r3, r3
 800f110:	4618      	mov	r0, r3
 800f112:	f7f9 f919 	bl	8008348 <lwip_htons>
 800f116:	4603      	mov	r3, r0
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	f003 0301 	and.w	r3, r3, #1
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00d      	beq.n	800f13e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	899b      	ldrh	r3, [r3, #12]
 800f128:	b29c      	uxth	r4, r3
 800f12a:	2001      	movs	r0, #1
 800f12c:	f7f9 f90c 	bl	8008348 <lwip_htons>
 800f130:	4603      	mov	r3, r0
 800f132:	461a      	mov	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	4322      	orrs	r2, r4
 800f13a:	b292      	uxth	r2, r2
 800f13c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f7fe fa52 	bl	800d5f2 <tcp_seg_free>
    while (next &&
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00e      	beq.n	800f172 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	891b      	ldrh	r3, [r3, #8]
 800f158:	461a      	mov	r2, r3
 800f15a:	4b1d      	ldr	r3, [pc, #116]	; (800f1d0 <tcp_oos_insert_segment+0x10c>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	441a      	add	r2, r3
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	6839      	ldr	r1, [r7, #0]
 800f168:	8909      	ldrh	r1, [r1, #8]
 800f16a:	440b      	add	r3, r1
 800f16c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f16e:	2b00      	cmp	r3, #0
 800f170:	daca      	bge.n	800f108 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d01e      	beq.n	800f1b6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	891b      	ldrh	r3, [r3, #8]
 800f17c:	461a      	mov	r2, r3
 800f17e:	4b14      	ldr	r3, [pc, #80]	; (800f1d0 <tcp_oos_insert_segment+0x10c>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	441a      	add	r2, r3
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	dd12      	ble.n	800f1b6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	b29a      	uxth	r2, r3
 800f198:	4b0d      	ldr	r3, [pc, #52]	; (800f1d0 <tcp_oos_insert_segment+0x10c>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	1ad3      	subs	r3, r2, r3
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	685a      	ldr	r2, [r3, #4]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	891b      	ldrh	r3, [r3, #8]
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	4610      	mov	r0, r2
 800f1b2:	f7fc fe25 	bl	800be00 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	601a      	str	r2, [r3, #0]
}
 800f1bc:	bf00      	nop
 800f1be:	3714      	adds	r7, #20
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd90      	pop	{r4, r7, pc}
 800f1c4:	08014a18 	.word	0x08014a18
 800f1c8:	08014cf8 	.word	0x08014cf8
 800f1cc:	08014a84 	.word	0x08014a84
 800f1d0:	2400818c 	.word	0x2400818c

0800f1d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f1d4:	b5b0      	push	{r4, r5, r7, lr}
 800f1d6:	b086      	sub	sp, #24
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	60f8      	str	r0, [r7, #12]
 800f1dc:	60b9      	str	r1, [r7, #8]
 800f1de:	607a      	str	r2, [r7, #4]
 800f1e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f1e2:	e03e      	b.n	800f262 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fd f812 	bl	800c21c <pbuf_clen>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f202:	8a7a      	ldrh	r2, [r7, #18]
 800f204:	429a      	cmp	r2, r3
 800f206:	d906      	bls.n	800f216 <tcp_free_acked_segments+0x42>
 800f208:	4b2a      	ldr	r3, [pc, #168]	; (800f2b4 <tcp_free_acked_segments+0xe0>)
 800f20a:	f240 4257 	movw	r2, #1111	; 0x457
 800f20e:	492a      	ldr	r1, [pc, #168]	; (800f2b8 <tcp_free_acked_segments+0xe4>)
 800f210:	482a      	ldr	r0, [pc, #168]	; (800f2bc <tcp_free_acked_segments+0xe8>)
 800f212:	f002 fe71 	bl	8011ef8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f21c:	8a7b      	ldrh	r3, [r7, #18]
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	b29a      	uxth	r2, r3
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	891a      	ldrh	r2, [r3, #8]
 800f22c:	4b24      	ldr	r3, [pc, #144]	; (800f2c0 <tcp_free_acked_segments+0xec>)
 800f22e:	881b      	ldrh	r3, [r3, #0]
 800f230:	4413      	add	r3, r2
 800f232:	b29a      	uxth	r2, r3
 800f234:	4b22      	ldr	r3, [pc, #136]	; (800f2c0 <tcp_free_acked_segments+0xec>)
 800f236:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f238:	6978      	ldr	r0, [r7, #20]
 800f23a:	f7fe f9da 	bl	800d5f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00c      	beq.n	800f262 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d109      	bne.n	800f262 <tcp_free_acked_segments+0x8e>
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d106      	bne.n	800f262 <tcp_free_acked_segments+0x8e>
 800f254:	4b17      	ldr	r3, [pc, #92]	; (800f2b4 <tcp_free_acked_segments+0xe0>)
 800f256:	f240 4261 	movw	r2, #1121	; 0x461
 800f25a:	491a      	ldr	r1, [pc, #104]	; (800f2c4 <tcp_free_acked_segments+0xf0>)
 800f25c:	4817      	ldr	r0, [pc, #92]	; (800f2bc <tcp_free_acked_segments+0xe8>)
 800f25e:	f002 fe4b 	bl	8011ef8 <iprintf>
  while (seg_list != NULL &&
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d020      	beq.n	800f2aa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	68db      	ldr	r3, [r3, #12]
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	4618      	mov	r0, r3
 800f270:	f7f9 f87f 	bl	8008372 <lwip_htonl>
 800f274:	4604      	mov	r4, r0
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	891b      	ldrh	r3, [r3, #8]
 800f27a:	461d      	mov	r5, r3
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	68db      	ldr	r3, [r3, #12]
 800f280:	899b      	ldrh	r3, [r3, #12]
 800f282:	b29b      	uxth	r3, r3
 800f284:	4618      	mov	r0, r3
 800f286:	f7f9 f85f 	bl	8008348 <lwip_htons>
 800f28a:	4603      	mov	r3, r0
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	f003 0303 	and.w	r3, r3, #3
 800f292:	2b00      	cmp	r3, #0
 800f294:	d001      	beq.n	800f29a <tcp_free_acked_segments+0xc6>
 800f296:	2301      	movs	r3, #1
 800f298:	e000      	b.n	800f29c <tcp_free_acked_segments+0xc8>
 800f29a:	2300      	movs	r3, #0
 800f29c:	442b      	add	r3, r5
 800f29e:	18e2      	adds	r2, r4, r3
 800f2a0:	4b09      	ldr	r3, [pc, #36]	; (800f2c8 <tcp_free_acked_segments+0xf4>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	dd9c      	ble.n	800f1e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f2aa:	68bb      	ldr	r3, [r7, #8]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3718      	adds	r7, #24
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bdb0      	pop	{r4, r5, r7, pc}
 800f2b4:	08014a18 	.word	0x08014a18
 800f2b8:	08014d20 	.word	0x08014d20
 800f2bc:	08014a84 	.word	0x08014a84
 800f2c0:	24008194 	.word	0x24008194
 800f2c4:	08014d48 	.word	0x08014d48
 800f2c8:	24008190 	.word	0x24008190

0800f2cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f2cc:	b5b0      	push	{r4, r5, r7, lr}
 800f2ce:	b094      	sub	sp, #80	; 0x50
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d106      	bne.n	800f2ec <tcp_receive+0x20>
 800f2de:	4b91      	ldr	r3, [pc, #580]	; (800f524 <tcp_receive+0x258>)
 800f2e0:	f240 427b 	movw	r2, #1147	; 0x47b
 800f2e4:	4990      	ldr	r1, [pc, #576]	; (800f528 <tcp_receive+0x25c>)
 800f2e6:	4891      	ldr	r0, [pc, #580]	; (800f52c <tcp_receive+0x260>)
 800f2e8:	f002 fe06 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	7d1b      	ldrb	r3, [r3, #20]
 800f2f0:	2b03      	cmp	r3, #3
 800f2f2:	d806      	bhi.n	800f302 <tcp_receive+0x36>
 800f2f4:	4b8b      	ldr	r3, [pc, #556]	; (800f524 <tcp_receive+0x258>)
 800f2f6:	f240 427c 	movw	r2, #1148	; 0x47c
 800f2fa:	498d      	ldr	r1, [pc, #564]	; (800f530 <tcp_receive+0x264>)
 800f2fc:	488b      	ldr	r0, [pc, #556]	; (800f52c <tcp_receive+0x260>)
 800f2fe:	f002 fdfb 	bl	8011ef8 <iprintf>

  if (flags & TCP_ACK) {
 800f302:	4b8c      	ldr	r3, [pc, #560]	; (800f534 <tcp_receive+0x268>)
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	f003 0310 	and.w	r3, r3, #16
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	f000 8264 	beq.w	800f7d8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f316:	461a      	mov	r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f31c:	4413      	add	r3, r2
 800f31e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f324:	4b84      	ldr	r3, [pc, #528]	; (800f538 <tcp_receive+0x26c>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	1ad3      	subs	r3, r2, r3
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	db1b      	blt.n	800f366 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f332:	4b81      	ldr	r3, [pc, #516]	; (800f538 <tcp_receive+0x26c>)
 800f334:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f336:	429a      	cmp	r2, r3
 800f338:	d106      	bne.n	800f348 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f33e:	4b7f      	ldr	r3, [pc, #508]	; (800f53c <tcp_receive+0x270>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	1ad3      	subs	r3, r2, r3
 800f344:	2b00      	cmp	r3, #0
 800f346:	db0e      	blt.n	800f366 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f34c:	4b7b      	ldr	r3, [pc, #492]	; (800f53c <tcp_receive+0x270>)
 800f34e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f350:	429a      	cmp	r2, r3
 800f352:	d125      	bne.n	800f3a0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f354:	4b7a      	ldr	r3, [pc, #488]	; (800f540 <tcp_receive+0x274>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	89db      	ldrh	r3, [r3, #14]
 800f35a:	b29a      	uxth	r2, r3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f362:	429a      	cmp	r2, r3
 800f364:	d91c      	bls.n	800f3a0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f366:	4b76      	ldr	r3, [pc, #472]	; (800f540 <tcp_receive+0x274>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	89db      	ldrh	r3, [r3, #14]
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f380:	429a      	cmp	r2, r3
 800f382:	d205      	bcs.n	800f390 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f390:	4b69      	ldr	r3, [pc, #420]	; (800f538 <tcp_receive+0x26c>)
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f398:	4b68      	ldr	r3, [pc, #416]	; (800f53c <tcp_receive+0x270>)
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f3a0:	4b66      	ldr	r3, [pc, #408]	; (800f53c <tcp_receive+0x270>)
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3a8:	1ad3      	subs	r3, r2, r3
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	dc58      	bgt.n	800f460 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f3ae:	4b65      	ldr	r3, [pc, #404]	; (800f544 <tcp_receive+0x278>)
 800f3b0:	881b      	ldrh	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d14b      	bne.n	800f44e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f3c0:	4413      	add	r3, r2
 800f3c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d142      	bne.n	800f44e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	db3d      	blt.n	800f44e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3d6:	4b59      	ldr	r3, [pc, #356]	; (800f53c <tcp_receive+0x270>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d137      	bne.n	800f44e <tcp_receive+0x182>
              found_dupack = 1;
 800f3de:	2301      	movs	r3, #1
 800f3e0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3e8:	2bff      	cmp	r3, #255	; 0xff
 800f3ea:	d007      	beq.n	800f3fc <tcp_receive+0x130>
                ++pcb->dupacks;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	b2da      	uxtb	r2, r3
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f402:	2b03      	cmp	r3, #3
 800f404:	d91b      	bls.n	800f43e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f410:	4413      	add	r3, r2
 800f412:	b29a      	uxth	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d30a      	bcc.n	800f434 <tcp_receive+0x168>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f428:	4413      	add	r3, r2
 800f42a:	b29a      	uxth	r2, r3
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f432:	e004      	b.n	800f43e <tcp_receive+0x172>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f43a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f444:	2b02      	cmp	r3, #2
 800f446:	d902      	bls.n	800f44e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f001 feeb 	bl	8011224 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f44e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f450:	2b00      	cmp	r3, #0
 800f452:	f040 8161 	bne.w	800f718 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f45e:	e15b      	b.n	800f718 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f460:	4b36      	ldr	r3, [pc, #216]	; (800f53c <tcp_receive+0x270>)
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f468:	1ad3      	subs	r3, r2, r3
 800f46a:	3b01      	subs	r3, #1
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	f2c0 814e 	blt.w	800f70e <tcp_receive+0x442>
 800f472:	4b32      	ldr	r3, [pc, #200]	; (800f53c <tcp_receive+0x270>)
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f47a:	1ad3      	subs	r3, r2, r3
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	f300 8146 	bgt.w	800f70e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	8b5b      	ldrh	r3, [r3, #26]
 800f486:	f003 0304 	and.w	r3, r3, #4
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d010      	beq.n	800f4b0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	8b5b      	ldrh	r3, [r3, #26]
 800f492:	f023 0304 	bic.w	r3, r3, #4
 800f496:	b29a      	uxth	r2, r3
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4be:	10db      	asrs	r3, r3, #3
 800f4c0:	b21b      	sxth	r3, r3
 800f4c2:	b29a      	uxth	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	4413      	add	r3, r2
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	b21a      	sxth	r2, r3
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f4d8:	4b18      	ldr	r3, [pc, #96]	; (800f53c <tcp_receive+0x270>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	b29a      	uxth	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	1ad3      	subs	r3, r2, r3
 800f4e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f4f0:	4b12      	ldr	r3, [pc, #72]	; (800f53c <tcp_receive+0x270>)
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	7d1b      	ldrb	r3, [r3, #20]
 800f4fc:	2b03      	cmp	r3, #3
 800f4fe:	f240 8097 	bls.w	800f630 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f50e:	429a      	cmp	r2, r3
 800f510:	d245      	bcs.n	800f59e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	8b5b      	ldrh	r3, [r3, #26]
 800f516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d014      	beq.n	800f548 <tcp_receive+0x27c>
 800f51e:	2301      	movs	r3, #1
 800f520:	e013      	b.n	800f54a <tcp_receive+0x27e>
 800f522:	bf00      	nop
 800f524:	08014a18 	.word	0x08014a18
 800f528:	08014d68 	.word	0x08014d68
 800f52c:	08014a84 	.word	0x08014a84
 800f530:	08014d84 	.word	0x08014d84
 800f534:	24008198 	.word	0x24008198
 800f538:	2400818c 	.word	0x2400818c
 800f53c:	24008190 	.word	0x24008190
 800f540:	2400817c 	.word	0x2400817c
 800f544:	24008196 	.word	0x24008196
 800f548:	2302      	movs	r3, #2
 800f54a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f54e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f552:	b29a      	uxth	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f558:	fb12 f303 	smulbb	r3, r2, r3
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f560:	4293      	cmp	r3, r2
 800f562:	bf28      	it	cs
 800f564:	4613      	movcs	r3, r2
 800f566:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f56e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f570:	4413      	add	r3, r2
 800f572:	b29a      	uxth	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d309      	bcc.n	800f592 <tcp_receive+0x2c6>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f584:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f586:	4413      	add	r3, r2
 800f588:	b29a      	uxth	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f590:	e04e      	b.n	800f630 <tcp_receive+0x364>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f598:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f59c:	e048      	b.n	800f630 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5a6:	4413      	add	r3, r2
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d309      	bcc.n	800f5c8 <tcp_receive+0x2fc>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5bc:	4413      	add	r3, r2
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f5c6:	e004      	b.n	800f5d2 <tcp_receive+0x306>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d326      	bcc.n	800f630 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5ee:	1ad3      	subs	r3, r2, r3
 800f5f0:	b29a      	uxth	r2, r3
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f602:	4413      	add	r3, r2
 800f604:	b29a      	uxth	r2, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d30a      	bcc.n	800f626 <tcp_receive+0x35a>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f61a:	4413      	add	r3, r2
 800f61c:	b29a      	uxth	r2, r3
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f624:	e004      	b.n	800f630 <tcp_receive+0x364>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f62c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f638:	4a98      	ldr	r2, [pc, #608]	; (800f89c <tcp_receive+0x5d0>)
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f7ff fdca 	bl	800f1d4 <tcp_free_acked_segments>
 800f640:	4602      	mov	r2, r0
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f64e:	4a94      	ldr	r2, [pc, #592]	; (800f8a0 <tcp_receive+0x5d4>)
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f7ff fdbf 	bl	800f1d4 <tcp_free_acked_segments>
 800f656:	4602      	mov	r2, r0
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f660:	2b00      	cmp	r3, #0
 800f662:	d104      	bne.n	800f66e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f66a:	861a      	strh	r2, [r3, #48]	; 0x30
 800f66c:	e002      	b.n	800f674 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2200      	movs	r2, #0
 800f672:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d103      	bne.n	800f68a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f690:	4b84      	ldr	r3, [pc, #528]	; (800f8a4 <tcp_receive+0x5d8>)
 800f692:	881b      	ldrh	r3, [r3, #0]
 800f694:	4413      	add	r3, r2
 800f696:	b29a      	uxth	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	8b5b      	ldrh	r3, [r3, #26]
 800f6a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d035      	beq.n	800f716 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d118      	bne.n	800f6e4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00c      	beq.n	800f6d4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7f8 fe53 	bl	8008372 <lwip_htonl>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	dc20      	bgt.n	800f716 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	8b5b      	ldrh	r3, [r3, #26]
 800f6d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f6dc:	b29a      	uxth	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f6e2:	e018      	b.n	800f716 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7f8 fe3e 	bl	8008372 <lwip_htonl>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	1ae3      	subs	r3, r4, r3
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	dc0b      	bgt.n	800f716 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	8b5b      	ldrh	r3, [r3, #26]
 800f702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f706:	b29a      	uxth	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f70c:	e003      	b.n	800f716 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f001 ff76 	bl	8011600 <tcp_send_empty_ack>
 800f714:	e000      	b.n	800f718 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f716:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d05b      	beq.n	800f7d8 <tcp_receive+0x50c>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f724:	4b60      	ldr	r3, [pc, #384]	; (800f8a8 <tcp_receive+0x5dc>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	1ad3      	subs	r3, r2, r3
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	da54      	bge.n	800f7d8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f72e:	4b5f      	ldr	r3, [pc, #380]	; (800f8ac <tcp_receive+0x5e0>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	b29a      	uxth	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f738:	b29b      	uxth	r3, r3
 800f73a:	1ad3      	subs	r3, r2, r3
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f742:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f74c:	10db      	asrs	r3, r3, #3
 800f74e:	b21b      	sxth	r3, r3
 800f750:	b29b      	uxth	r3, r3
 800f752:	1ad3      	subs	r3, r2, r3
 800f754:	b29b      	uxth	r3, r3
 800f756:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f760:	b29a      	uxth	r2, r3
 800f762:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f766:	4413      	add	r3, r2
 800f768:	b29b      	uxth	r3, r3
 800f76a:	b21a      	sxth	r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f770:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f774:	2b00      	cmp	r3, #0
 800f776:	da05      	bge.n	800f784 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f77c:	425b      	negs	r3, r3
 800f77e:	b29b      	uxth	r3, r3
 800f780:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f784:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f78e:	109b      	asrs	r3, r3, #2
 800f790:	b21b      	sxth	r3, r3
 800f792:	b29b      	uxth	r3, r3
 800f794:	1ad3      	subs	r3, r2, r3
 800f796:	b29b      	uxth	r3, r3
 800f798:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f7a8:	4413      	add	r3, r2
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	b21a      	sxth	r2, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7b8:	10db      	asrs	r3, r3, #3
 800f7ba:	b21b      	sxth	r3, r3
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	4413      	add	r3, r2
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	b21a      	sxth	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f7d8:	4b35      	ldr	r3, [pc, #212]	; (800f8b0 <tcp_receive+0x5e4>)
 800f7da:	881b      	ldrh	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	f000 84e2 	beq.w	80101a6 <tcp_receive+0xeda>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	7d1b      	ldrb	r3, [r3, #20]
 800f7e6:	2b06      	cmp	r3, #6
 800f7e8:	f200 84dd 	bhi.w	80101a6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7f0:	4b30      	ldr	r3, [pc, #192]	; (800f8b4 <tcp_receive+0x5e8>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	1ad3      	subs	r3, r2, r3
 800f7f6:	3b01      	subs	r3, #1
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	f2c0 808f 	blt.w	800f91c <tcp_receive+0x650>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f802:	4b2b      	ldr	r3, [pc, #172]	; (800f8b0 <tcp_receive+0x5e4>)
 800f804:	881b      	ldrh	r3, [r3, #0]
 800f806:	4619      	mov	r1, r3
 800f808:	4b2a      	ldr	r3, [pc, #168]	; (800f8b4 <tcp_receive+0x5e8>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	440b      	add	r3, r1
 800f80e:	1ad3      	subs	r3, r2, r3
 800f810:	3301      	adds	r3, #1
 800f812:	2b00      	cmp	r3, #0
 800f814:	f300 8082 	bgt.w	800f91c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f818:	4b27      	ldr	r3, [pc, #156]	; (800f8b8 <tcp_receive+0x5ec>)
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f822:	4b24      	ldr	r3, [pc, #144]	; (800f8b4 <tcp_receive+0x5e8>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	1ad3      	subs	r3, r2, r3
 800f828:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f82a:	4b23      	ldr	r3, [pc, #140]	; (800f8b8 <tcp_receive+0x5ec>)
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d106      	bne.n	800f840 <tcp_receive+0x574>
 800f832:	4b22      	ldr	r3, [pc, #136]	; (800f8bc <tcp_receive+0x5f0>)
 800f834:	f240 5294 	movw	r2, #1428	; 0x594
 800f838:	4921      	ldr	r1, [pc, #132]	; (800f8c0 <tcp_receive+0x5f4>)
 800f83a:	4822      	ldr	r0, [pc, #136]	; (800f8c4 <tcp_receive+0x5f8>)
 800f83c:	f002 fb5c 	bl	8011ef8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f842:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f846:	4293      	cmp	r3, r2
 800f848:	d906      	bls.n	800f858 <tcp_receive+0x58c>
 800f84a:	4b1c      	ldr	r3, [pc, #112]	; (800f8bc <tcp_receive+0x5f0>)
 800f84c:	f240 5295 	movw	r2, #1429	; 0x595
 800f850:	491d      	ldr	r1, [pc, #116]	; (800f8c8 <tcp_receive+0x5fc>)
 800f852:	481c      	ldr	r0, [pc, #112]	; (800f8c4 <tcp_receive+0x5f8>)
 800f854:	f002 fb50 	bl	8011ef8 <iprintf>
      off = (u16_t)off32;
 800f858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f85e:	4b16      	ldr	r3, [pc, #88]	; (800f8b8 <tcp_receive+0x5ec>)
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	891b      	ldrh	r3, [r3, #8]
 800f864:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f868:	429a      	cmp	r2, r3
 800f86a:	d906      	bls.n	800f87a <tcp_receive+0x5ae>
 800f86c:	4b13      	ldr	r3, [pc, #76]	; (800f8bc <tcp_receive+0x5f0>)
 800f86e:	f240 5297 	movw	r2, #1431	; 0x597
 800f872:	4916      	ldr	r1, [pc, #88]	; (800f8cc <tcp_receive+0x600>)
 800f874:	4813      	ldr	r0, [pc, #76]	; (800f8c4 <tcp_receive+0x5f8>)
 800f876:	f002 fb3f 	bl	8011ef8 <iprintf>
      inseg.len -= off;
 800f87a:	4b0f      	ldr	r3, [pc, #60]	; (800f8b8 <tcp_receive+0x5ec>)
 800f87c:	891a      	ldrh	r2, [r3, #8]
 800f87e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f882:	1ad3      	subs	r3, r2, r3
 800f884:	b29a      	uxth	r2, r3
 800f886:	4b0c      	ldr	r3, [pc, #48]	; (800f8b8 <tcp_receive+0x5ec>)
 800f888:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f88a:	4b0b      	ldr	r3, [pc, #44]	; (800f8b8 <tcp_receive+0x5ec>)
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	891a      	ldrh	r2, [r3, #8]
 800f890:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f894:	1ad3      	subs	r3, r2, r3
 800f896:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f898:	e02a      	b.n	800f8f0 <tcp_receive+0x624>
 800f89a:	bf00      	nop
 800f89c:	08014da0 	.word	0x08014da0
 800f8a0:	08014da8 	.word	0x08014da8
 800f8a4:	24008194 	.word	0x24008194
 800f8a8:	24008190 	.word	0x24008190
 800f8ac:	24008154 	.word	0x24008154
 800f8b0:	24008196 	.word	0x24008196
 800f8b4:	2400818c 	.word	0x2400818c
 800f8b8:	2400816c 	.word	0x2400816c
 800f8bc:	08014a18 	.word	0x08014a18
 800f8c0:	08014db0 	.word	0x08014db0
 800f8c4:	08014a84 	.word	0x08014a84
 800f8c8:	08014dc0 	.word	0x08014dc0
 800f8cc:	08014dd0 	.word	0x08014dd0
        off -= p->len;
 800f8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8d2:	895b      	ldrh	r3, [r3, #10]
 800f8d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f8d8:	1ad3      	subs	r3, r2, r3
 800f8da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f8de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f8e2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f8ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8f2:	895b      	ldrh	r3, [r3, #10]
 800f8f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d8e9      	bhi.n	800f8d0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f8fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f900:	4619      	mov	r1, r3
 800f902:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f904:	f7fc fb7c 	bl	800c000 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f90c:	4a91      	ldr	r2, [pc, #580]	; (800fb54 <tcp_receive+0x888>)
 800f90e:	6013      	str	r3, [r2, #0]
 800f910:	4b91      	ldr	r3, [pc, #580]	; (800fb58 <tcp_receive+0x88c>)
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	4a8f      	ldr	r2, [pc, #572]	; (800fb54 <tcp_receive+0x888>)
 800f916:	6812      	ldr	r2, [r2, #0]
 800f918:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f91a:	e00d      	b.n	800f938 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f91c:	4b8d      	ldr	r3, [pc, #564]	; (800fb54 <tcp_receive+0x888>)
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f924:	1ad3      	subs	r3, r2, r3
 800f926:	2b00      	cmp	r3, #0
 800f928:	da06      	bge.n	800f938 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	8b5b      	ldrh	r3, [r3, #26]
 800f92e:	f043 0302 	orr.w	r3, r3, #2
 800f932:	b29a      	uxth	r2, r3
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f938:	4b86      	ldr	r3, [pc, #536]	; (800fb54 <tcp_receive+0x888>)
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f940:	1ad3      	subs	r3, r2, r3
 800f942:	2b00      	cmp	r3, #0
 800f944:	f2c0 842a 	blt.w	801019c <tcp_receive+0xed0>
 800f948:	4b82      	ldr	r3, [pc, #520]	; (800fb54 <tcp_receive+0x888>)
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f950:	6879      	ldr	r1, [r7, #4]
 800f952:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f954:	440b      	add	r3, r1
 800f956:	1ad3      	subs	r3, r2, r3
 800f958:	3301      	adds	r3, #1
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f300 841e 	bgt.w	801019c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f964:	4b7b      	ldr	r3, [pc, #492]	; (800fb54 <tcp_receive+0x888>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	429a      	cmp	r2, r3
 800f96a:	f040 829a 	bne.w	800fea2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f96e:	4b7a      	ldr	r3, [pc, #488]	; (800fb58 <tcp_receive+0x88c>)
 800f970:	891c      	ldrh	r4, [r3, #8]
 800f972:	4b79      	ldr	r3, [pc, #484]	; (800fb58 <tcp_receive+0x88c>)
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	899b      	ldrh	r3, [r3, #12]
 800f978:	b29b      	uxth	r3, r3
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7f8 fce4 	bl	8008348 <lwip_htons>
 800f980:	4603      	mov	r3, r0
 800f982:	b2db      	uxtb	r3, r3
 800f984:	f003 0303 	and.w	r3, r3, #3
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d001      	beq.n	800f990 <tcp_receive+0x6c4>
 800f98c:	2301      	movs	r3, #1
 800f98e:	e000      	b.n	800f992 <tcp_receive+0x6c6>
 800f990:	2300      	movs	r3, #0
 800f992:	4423      	add	r3, r4
 800f994:	b29a      	uxth	r2, r3
 800f996:	4b71      	ldr	r3, [pc, #452]	; (800fb5c <tcp_receive+0x890>)
 800f998:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f99e:	4b6f      	ldr	r3, [pc, #444]	; (800fb5c <tcp_receive+0x890>)
 800f9a0:	881b      	ldrh	r3, [r3, #0]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d275      	bcs.n	800fa92 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9a6:	4b6c      	ldr	r3, [pc, #432]	; (800fb58 <tcp_receive+0x88c>)
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	899b      	ldrh	r3, [r3, #12]
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7f8 fcca 	bl	8008348 <lwip_htons>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	f003 0301 	and.w	r3, r3, #1
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d01f      	beq.n	800fa00 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f9c0:	4b65      	ldr	r3, [pc, #404]	; (800fb58 <tcp_receive+0x88c>)
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	899b      	ldrh	r3, [r3, #12]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	b21b      	sxth	r3, r3
 800f9ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f9ce:	b21c      	sxth	r4, r3
 800f9d0:	4b61      	ldr	r3, [pc, #388]	; (800fb58 <tcp_receive+0x88c>)
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	899b      	ldrh	r3, [r3, #12]
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7f8 fcb5 	bl	8008348 <lwip_htons>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7f8 fcac 	bl	8008348 <lwip_htons>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	b21b      	sxth	r3, r3
 800f9f4:	4323      	orrs	r3, r4
 800f9f6:	b21a      	sxth	r2, r3
 800f9f8:	4b57      	ldr	r3, [pc, #348]	; (800fb58 <tcp_receive+0x88c>)
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	b292      	uxth	r2, r2
 800f9fe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa04:	4b54      	ldr	r3, [pc, #336]	; (800fb58 <tcp_receive+0x88c>)
 800fa06:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fa08:	4b53      	ldr	r3, [pc, #332]	; (800fb58 <tcp_receive+0x88c>)
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	899b      	ldrh	r3, [r3, #12]
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7f8 fc99 	bl	8008348 <lwip_htons>
 800fa16:	4603      	mov	r3, r0
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	f003 0302 	and.w	r3, r3, #2
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d005      	beq.n	800fa2e <tcp_receive+0x762>
            inseg.len -= 1;
 800fa22:	4b4d      	ldr	r3, [pc, #308]	; (800fb58 <tcp_receive+0x88c>)
 800fa24:	891b      	ldrh	r3, [r3, #8]
 800fa26:	3b01      	subs	r3, #1
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	4b4b      	ldr	r3, [pc, #300]	; (800fb58 <tcp_receive+0x88c>)
 800fa2c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fa2e:	4b4a      	ldr	r3, [pc, #296]	; (800fb58 <tcp_receive+0x88c>)
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	4a49      	ldr	r2, [pc, #292]	; (800fb58 <tcp_receive+0x88c>)
 800fa34:	8912      	ldrh	r2, [r2, #8]
 800fa36:	4611      	mov	r1, r2
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fc f9e1 	bl	800be00 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fa3e:	4b46      	ldr	r3, [pc, #280]	; (800fb58 <tcp_receive+0x88c>)
 800fa40:	891c      	ldrh	r4, [r3, #8]
 800fa42:	4b45      	ldr	r3, [pc, #276]	; (800fb58 <tcp_receive+0x88c>)
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	899b      	ldrh	r3, [r3, #12]
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7f8 fc7c 	bl	8008348 <lwip_htons>
 800fa50:	4603      	mov	r3, r0
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	f003 0303 	and.w	r3, r3, #3
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d001      	beq.n	800fa60 <tcp_receive+0x794>
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	e000      	b.n	800fa62 <tcp_receive+0x796>
 800fa60:	2300      	movs	r3, #0
 800fa62:	4423      	add	r3, r4
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	4b3d      	ldr	r3, [pc, #244]	; (800fb5c <tcp_receive+0x890>)
 800fa68:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa6a:	4b3c      	ldr	r3, [pc, #240]	; (800fb5c <tcp_receive+0x890>)
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	4b38      	ldr	r3, [pc, #224]	; (800fb54 <tcp_receive+0x888>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	441a      	add	r2, r3
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7a:	6879      	ldr	r1, [r7, #4]
 800fa7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa7e:	440b      	add	r3, r1
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d006      	beq.n	800fa92 <tcp_receive+0x7c6>
 800fa84:	4b36      	ldr	r3, [pc, #216]	; (800fb60 <tcp_receive+0x894>)
 800fa86:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fa8a:	4936      	ldr	r1, [pc, #216]	; (800fb64 <tcp_receive+0x898>)
 800fa8c:	4836      	ldr	r0, [pc, #216]	; (800fb68 <tcp_receive+0x89c>)
 800fa8e:	f002 fa33 	bl	8011ef8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	f000 80e7 	beq.w	800fc6a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa9c:	4b2e      	ldr	r3, [pc, #184]	; (800fb58 <tcp_receive+0x88c>)
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	899b      	ldrh	r3, [r3, #12]
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7f8 fc4f 	bl	8008348 <lwip_htons>
 800faaa:	4603      	mov	r3, r0
 800faac:	b2db      	uxtb	r3, r3
 800faae:	f003 0301 	and.w	r3, r3, #1
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d010      	beq.n	800fad8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fab6:	e00a      	b.n	800face <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fabc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fac8:	68f8      	ldr	r0, [r7, #12]
 800faca:	f7fd fd92 	bl	800d5f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d1f0      	bne.n	800fab8 <tcp_receive+0x7ec>
 800fad6:	e0c8      	b.n	800fc6a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fadc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fade:	e052      	b.n	800fb86 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	899b      	ldrh	r3, [r3, #12]
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	4618      	mov	r0, r3
 800faea:	f7f8 fc2d 	bl	8008348 <lwip_htons>
 800faee:	4603      	mov	r3, r0
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	f003 0301 	and.w	r3, r3, #1
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d03d      	beq.n	800fb76 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fafa:	4b17      	ldr	r3, [pc, #92]	; (800fb58 <tcp_receive+0x88c>)
 800fafc:	68db      	ldr	r3, [r3, #12]
 800fafe:	899b      	ldrh	r3, [r3, #12]
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7f8 fc20 	bl	8008348 <lwip_htons>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d130      	bne.n	800fb76 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fb14:	4b10      	ldr	r3, [pc, #64]	; (800fb58 <tcp_receive+0x88c>)
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	899b      	ldrh	r3, [r3, #12]
 800fb1a:	b29c      	uxth	r4, r3
 800fb1c:	2001      	movs	r0, #1
 800fb1e:	f7f8 fc13 	bl	8008348 <lwip_htons>
 800fb22:	4603      	mov	r3, r0
 800fb24:	461a      	mov	r2, r3
 800fb26:	4b0c      	ldr	r3, [pc, #48]	; (800fb58 <tcp_receive+0x88c>)
 800fb28:	68db      	ldr	r3, [r3, #12]
 800fb2a:	4322      	orrs	r2, r4
 800fb2c:	b292      	uxth	r2, r2
 800fb2e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fb30:	4b09      	ldr	r3, [pc, #36]	; (800fb58 <tcp_receive+0x88c>)
 800fb32:	891c      	ldrh	r4, [r3, #8]
 800fb34:	4b08      	ldr	r3, [pc, #32]	; (800fb58 <tcp_receive+0x88c>)
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	899b      	ldrh	r3, [r3, #12]
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7f8 fc03 	bl	8008348 <lwip_htons>
 800fb42:	4603      	mov	r3, r0
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	f003 0303 	and.w	r3, r3, #3
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d00e      	beq.n	800fb6c <tcp_receive+0x8a0>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e00d      	b.n	800fb6e <tcp_receive+0x8a2>
 800fb52:	bf00      	nop
 800fb54:	2400818c 	.word	0x2400818c
 800fb58:	2400816c 	.word	0x2400816c
 800fb5c:	24008196 	.word	0x24008196
 800fb60:	08014a18 	.word	0x08014a18
 800fb64:	08014de0 	.word	0x08014de0
 800fb68:	08014a84 	.word	0x08014a84
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	4423      	add	r3, r4
 800fb70:	b29a      	uxth	r2, r3
 800fb72:	4b98      	ldr	r3, [pc, #608]	; (800fdd4 <tcp_receive+0xb08>)
 800fb74:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb78:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fb7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fb80:	6938      	ldr	r0, [r7, #16]
 800fb82:	f7fd fd36 	bl	800d5f2 <tcp_seg_free>
            while (next &&
 800fb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d00e      	beq.n	800fbaa <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fb8c:	4b91      	ldr	r3, [pc, #580]	; (800fdd4 <tcp_receive+0xb08>)
 800fb8e:	881b      	ldrh	r3, [r3, #0]
 800fb90:	461a      	mov	r2, r3
 800fb92:	4b91      	ldr	r3, [pc, #580]	; (800fdd8 <tcp_receive+0xb0c>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	441a      	add	r2, r3
 800fb98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb9a:	68db      	ldr	r3, [r3, #12]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fba0:	8909      	ldrh	r1, [r1, #8]
 800fba2:	440b      	add	r3, r1
 800fba4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	da9a      	bge.n	800fae0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d059      	beq.n	800fc64 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800fbb0:	4b88      	ldr	r3, [pc, #544]	; (800fdd4 <tcp_receive+0xb08>)
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	4b88      	ldr	r3, [pc, #544]	; (800fdd8 <tcp_receive+0xb0c>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	441a      	add	r2, r3
 800fbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbbe:	68db      	ldr	r3, [r3, #12]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	dd4d      	ble.n	800fc64 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	b29a      	uxth	r2, r3
 800fbd0:	4b81      	ldr	r3, [pc, #516]	; (800fdd8 <tcp_receive+0xb0c>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	1ad3      	subs	r3, r2, r3
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	4b80      	ldr	r3, [pc, #512]	; (800fddc <tcp_receive+0xb10>)
 800fbdc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fbde:	4b7f      	ldr	r3, [pc, #508]	; (800fddc <tcp_receive+0xb10>)
 800fbe0:	68db      	ldr	r3, [r3, #12]
 800fbe2:	899b      	ldrh	r3, [r3, #12]
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7f8 fbae 	bl	8008348 <lwip_htons>
 800fbec:	4603      	mov	r3, r0
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	f003 0302 	and.w	r3, r3, #2
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d005      	beq.n	800fc04 <tcp_receive+0x938>
                inseg.len -= 1;
 800fbf8:	4b78      	ldr	r3, [pc, #480]	; (800fddc <tcp_receive+0xb10>)
 800fbfa:	891b      	ldrh	r3, [r3, #8]
 800fbfc:	3b01      	subs	r3, #1
 800fbfe:	b29a      	uxth	r2, r3
 800fc00:	4b76      	ldr	r3, [pc, #472]	; (800fddc <tcp_receive+0xb10>)
 800fc02:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fc04:	4b75      	ldr	r3, [pc, #468]	; (800fddc <tcp_receive+0xb10>)
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	4a74      	ldr	r2, [pc, #464]	; (800fddc <tcp_receive+0xb10>)
 800fc0a:	8912      	ldrh	r2, [r2, #8]
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7fc f8f6 	bl	800be00 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fc14:	4b71      	ldr	r3, [pc, #452]	; (800fddc <tcp_receive+0xb10>)
 800fc16:	891c      	ldrh	r4, [r3, #8]
 800fc18:	4b70      	ldr	r3, [pc, #448]	; (800fddc <tcp_receive+0xb10>)
 800fc1a:	68db      	ldr	r3, [r3, #12]
 800fc1c:	899b      	ldrh	r3, [r3, #12]
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7f8 fb91 	bl	8008348 <lwip_htons>
 800fc26:	4603      	mov	r3, r0
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	f003 0303 	and.w	r3, r3, #3
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d001      	beq.n	800fc36 <tcp_receive+0x96a>
 800fc32:	2301      	movs	r3, #1
 800fc34:	e000      	b.n	800fc38 <tcp_receive+0x96c>
 800fc36:	2300      	movs	r3, #0
 800fc38:	4423      	add	r3, r4
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	4b65      	ldr	r3, [pc, #404]	; (800fdd4 <tcp_receive+0xb08>)
 800fc3e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fc40:	4b64      	ldr	r3, [pc, #400]	; (800fdd4 <tcp_receive+0xb08>)
 800fc42:	881b      	ldrh	r3, [r3, #0]
 800fc44:	461a      	mov	r2, r3
 800fc46:	4b64      	ldr	r3, [pc, #400]	; (800fdd8 <tcp_receive+0xb0c>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	441a      	add	r2, r3
 800fc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d006      	beq.n	800fc64 <tcp_receive+0x998>
 800fc56:	4b62      	ldr	r3, [pc, #392]	; (800fde0 <tcp_receive+0xb14>)
 800fc58:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fc5c:	4961      	ldr	r1, [pc, #388]	; (800fde4 <tcp_receive+0xb18>)
 800fc5e:	4862      	ldr	r0, [pc, #392]	; (800fde8 <tcp_receive+0xb1c>)
 800fc60:	f002 f94a 	bl	8011ef8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc68:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fc6a:	4b5a      	ldr	r3, [pc, #360]	; (800fdd4 <tcp_receive+0xb08>)
 800fc6c:	881b      	ldrh	r3, [r3, #0]
 800fc6e:	461a      	mov	r2, r3
 800fc70:	4b59      	ldr	r3, [pc, #356]	; (800fdd8 <tcp_receive+0xb0c>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	441a      	add	r2, r3
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc7e:	4b55      	ldr	r3, [pc, #340]	; (800fdd4 <tcp_receive+0xb08>)
 800fc80:	881b      	ldrh	r3, [r3, #0]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d206      	bcs.n	800fc94 <tcp_receive+0x9c8>
 800fc86:	4b56      	ldr	r3, [pc, #344]	; (800fde0 <tcp_receive+0xb14>)
 800fc88:	f240 6207 	movw	r2, #1543	; 0x607
 800fc8c:	4957      	ldr	r1, [pc, #348]	; (800fdec <tcp_receive+0xb20>)
 800fc8e:	4856      	ldr	r0, [pc, #344]	; (800fde8 <tcp_receive+0xb1c>)
 800fc90:	f002 f932 	bl	8011ef8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc98:	4b4e      	ldr	r3, [pc, #312]	; (800fdd4 <tcp_receive+0xb08>)
 800fc9a:	881b      	ldrh	r3, [r3, #0]
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7fc ffc5 	bl	800cc34 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fcaa:	4b4c      	ldr	r3, [pc, #304]	; (800fddc <tcp_receive+0xb10>)
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	891b      	ldrh	r3, [r3, #8]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d006      	beq.n	800fcc2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800fcb4:	4b49      	ldr	r3, [pc, #292]	; (800fddc <tcp_receive+0xb10>)
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	4a4d      	ldr	r2, [pc, #308]	; (800fdf0 <tcp_receive+0xb24>)
 800fcba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fcbc:	4b47      	ldr	r3, [pc, #284]	; (800fddc <tcp_receive+0xb10>)
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fcc2:	4b46      	ldr	r3, [pc, #280]	; (800fddc <tcp_receive+0xb10>)
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	899b      	ldrh	r3, [r3, #12]
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7f8 fb3c 	bl	8008348 <lwip_htons>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	f003 0301 	and.w	r3, r3, #1
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	f000 80b8 	beq.w	800fe4e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fcde:	4b45      	ldr	r3, [pc, #276]	; (800fdf4 <tcp_receive+0xb28>)
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	f043 0320 	orr.w	r3, r3, #32
 800fce6:	b2da      	uxtb	r2, r3
 800fce8:	4b42      	ldr	r3, [pc, #264]	; (800fdf4 <tcp_receive+0xb28>)
 800fcea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fcec:	e0af      	b.n	800fe4e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcf2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcf8:	68db      	ldr	r3, [r3, #12]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	4a36      	ldr	r2, [pc, #216]	; (800fdd8 <tcp_receive+0xb0c>)
 800fcfe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	891b      	ldrh	r3, [r3, #8]
 800fd04:	461c      	mov	r4, r3
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	68db      	ldr	r3, [r3, #12]
 800fd0a:	899b      	ldrh	r3, [r3, #12]
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7f8 fb1a 	bl	8008348 <lwip_htons>
 800fd14:	4603      	mov	r3, r0
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	f003 0303 	and.w	r3, r3, #3
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d001      	beq.n	800fd24 <tcp_receive+0xa58>
 800fd20:	2301      	movs	r3, #1
 800fd22:	e000      	b.n	800fd26 <tcp_receive+0xa5a>
 800fd24:	2300      	movs	r3, #0
 800fd26:	191a      	adds	r2, r3, r4
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2c:	441a      	add	r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd36:	461c      	mov	r4, r3
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	891b      	ldrh	r3, [r3, #8]
 800fd3c:	461d      	mov	r5, r3
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	899b      	ldrh	r3, [r3, #12]
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7f8 fafe 	bl	8008348 <lwip_htons>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	f003 0303 	and.w	r3, r3, #3
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d001      	beq.n	800fd5c <tcp_receive+0xa90>
 800fd58:	2301      	movs	r3, #1
 800fd5a:	e000      	b.n	800fd5e <tcp_receive+0xa92>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	442b      	add	r3, r5
 800fd60:	429c      	cmp	r4, r3
 800fd62:	d206      	bcs.n	800fd72 <tcp_receive+0xaa6>
 800fd64:	4b1e      	ldr	r3, [pc, #120]	; (800fde0 <tcp_receive+0xb14>)
 800fd66:	f240 622b 	movw	r2, #1579	; 0x62b
 800fd6a:	4923      	ldr	r1, [pc, #140]	; (800fdf8 <tcp_receive+0xb2c>)
 800fd6c:	481e      	ldr	r0, [pc, #120]	; (800fde8 <tcp_receive+0xb1c>)
 800fd6e:	f002 f8c3 	bl	8011ef8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	891b      	ldrh	r3, [r3, #8]
 800fd76:	461c      	mov	r4, r3
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	68db      	ldr	r3, [r3, #12]
 800fd7c:	899b      	ldrh	r3, [r3, #12]
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7f8 fae1 	bl	8008348 <lwip_htons>
 800fd86:	4603      	mov	r3, r0
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	f003 0303 	and.w	r3, r3, #3
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <tcp_receive+0xaca>
 800fd92:	2301      	movs	r3, #1
 800fd94:	e000      	b.n	800fd98 <tcp_receive+0xacc>
 800fd96:	2300      	movs	r3, #0
 800fd98:	1919      	adds	r1, r3, r4
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd9e:	b28b      	uxth	r3, r1
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	b29a      	uxth	r2, r3
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7fc ff43 	bl	800cc34 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	891b      	ldrh	r3, [r3, #8]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d028      	beq.n	800fe0a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fdb8:	4b0d      	ldr	r3, [pc, #52]	; (800fdf0 <tcp_receive+0xb24>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d01d      	beq.n	800fdfc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800fdc0:	4b0b      	ldr	r3, [pc, #44]	; (800fdf0 <tcp_receive+0xb24>)
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	4619      	mov	r1, r3
 800fdca:	4610      	mov	r0, r2
 800fdcc:	f7fc fa60 	bl	800c290 <pbuf_cat>
 800fdd0:	e018      	b.n	800fe04 <tcp_receive+0xb38>
 800fdd2:	bf00      	nop
 800fdd4:	24008196 	.word	0x24008196
 800fdd8:	2400818c 	.word	0x2400818c
 800fddc:	2400816c 	.word	0x2400816c
 800fde0:	08014a18 	.word	0x08014a18
 800fde4:	08014e18 	.word	0x08014e18
 800fde8:	08014a84 	.word	0x08014a84
 800fdec:	08014e54 	.word	0x08014e54
 800fdf0:	2400819c 	.word	0x2400819c
 800fdf4:	24008199 	.word	0x24008199
 800fdf8:	08014e74 	.word	0x08014e74
            } else {
              recv_data = cseg->p;
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	4a70      	ldr	r2, [pc, #448]	; (800ffc4 <tcp_receive+0xcf8>)
 800fe02:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	2200      	movs	r2, #0
 800fe08:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	899b      	ldrh	r3, [r3, #12]
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7f8 fa98 	bl	8008348 <lwip_htons>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	f003 0301 	and.w	r3, r3, #1
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00d      	beq.n	800fe40 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fe24:	4b68      	ldr	r3, [pc, #416]	; (800ffc8 <tcp_receive+0xcfc>)
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	f043 0320 	orr.w	r3, r3, #32
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	4b66      	ldr	r3, [pc, #408]	; (800ffc8 <tcp_receive+0xcfc>)
 800fe30:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	7d1b      	ldrb	r3, [r3, #20]
 800fe36:	2b04      	cmp	r3, #4
 800fe38:	d102      	bne.n	800fe40 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2207      	movs	r2, #7
 800fe3e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fe48:	68b8      	ldr	r0, [r7, #8]
 800fe4a:	f7fd fbd2 	bl	800d5f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d008      	beq.n	800fe68 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	685a      	ldr	r2, [r3, #4]
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fe62:	429a      	cmp	r2, r3
 800fe64:	f43f af43 	beq.w	800fcee <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	8b5b      	ldrh	r3, [r3, #26]
 800fe6c:	f003 0301 	and.w	r3, r3, #1
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d00e      	beq.n	800fe92 <tcp_receive+0xbc6>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	8b5b      	ldrh	r3, [r3, #26]
 800fe78:	f023 0301 	bic.w	r3, r3, #1
 800fe7c:	b29a      	uxth	r2, r3
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	835a      	strh	r2, [r3, #26]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	8b5b      	ldrh	r3, [r3, #26]
 800fe86:	f043 0302 	orr.w	r3, r3, #2
 800fe8a:	b29a      	uxth	r2, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fe90:	e188      	b.n	80101a4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	8b5b      	ldrh	r3, [r3, #26]
 800fe96:	f043 0301 	orr.w	r3, r3, #1
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fea0:	e180      	b.n	80101a4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d106      	bne.n	800feb8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800feaa:	4848      	ldr	r0, [pc, #288]	; (800ffcc <tcp_receive+0xd00>)
 800feac:	f7fd fbba 	bl	800d624 <tcp_seg_copy>
 800feb0:	4602      	mov	r2, r0
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	675a      	str	r2, [r3, #116]	; 0x74
 800feb6:	e16d      	b.n	8010194 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800feb8:	2300      	movs	r3, #0
 800feba:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fec0:	63bb      	str	r3, [r7, #56]	; 0x38
 800fec2:	e157      	b.n	8010174 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800fec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	685a      	ldr	r2, [r3, #4]
 800feca:	4b41      	ldr	r3, [pc, #260]	; (800ffd0 <tcp_receive+0xd04>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d11d      	bne.n	800ff0e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fed2:	4b3e      	ldr	r3, [pc, #248]	; (800ffcc <tcp_receive+0xd00>)
 800fed4:	891a      	ldrh	r2, [r3, #8]
 800fed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed8:	891b      	ldrh	r3, [r3, #8]
 800feda:	429a      	cmp	r2, r3
 800fedc:	f240 814f 	bls.w	801017e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fee0:	483a      	ldr	r0, [pc, #232]	; (800ffcc <tcp_receive+0xd00>)
 800fee2:	f7fd fb9f 	bl	800d624 <tcp_seg_copy>
 800fee6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	2b00      	cmp	r3, #0
 800feec:	f000 8149 	beq.w	8010182 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800fef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d003      	beq.n	800fefe <tcp_receive+0xc32>
                    prev->next = cseg;
 800fef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef8:	697a      	ldr	r2, [r7, #20]
 800fefa:	601a      	str	r2, [r3, #0]
 800fefc:	e002      	b.n	800ff04 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	697a      	ldr	r2, [r7, #20]
 800ff02:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ff04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff06:	6978      	ldr	r0, [r7, #20]
 800ff08:	f7ff f8dc 	bl	800f0c4 <tcp_oos_insert_segment>
                }
                break;
 800ff0c:	e139      	b.n	8010182 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ff0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d117      	bne.n	800ff44 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ff14:	4b2e      	ldr	r3, [pc, #184]	; (800ffd0 <tcp_receive+0xd04>)
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	1ad3      	subs	r3, r2, r3
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	da57      	bge.n	800ffd4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff24:	4829      	ldr	r0, [pc, #164]	; (800ffcc <tcp_receive+0xd00>)
 800ff26:	f7fd fb7d 	bl	800d624 <tcp_seg_copy>
 800ff2a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	f000 8129 	beq.w	8010186 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	69ba      	ldr	r2, [r7, #24]
 800ff38:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ff3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff3c:	69b8      	ldr	r0, [r7, #24]
 800ff3e:	f7ff f8c1 	bl	800f0c4 <tcp_oos_insert_segment>
                  }
                  break;
 800ff42:	e120      	b.n	8010186 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ff44:	4b22      	ldr	r3, [pc, #136]	; (800ffd0 <tcp_receive+0xd04>)
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	1ad3      	subs	r3, r2, r3
 800ff50:	3b01      	subs	r3, #1
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	db3e      	blt.n	800ffd4 <tcp_receive+0xd08>
 800ff56:	4b1e      	ldr	r3, [pc, #120]	; (800ffd0 <tcp_receive+0xd04>)
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5c:	68db      	ldr	r3, [r3, #12]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	3301      	adds	r3, #1
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	dc35      	bgt.n	800ffd4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff68:	4818      	ldr	r0, [pc, #96]	; (800ffcc <tcp_receive+0xd00>)
 800ff6a:	f7fd fb5b 	bl	800d624 <tcp_seg_copy>
 800ff6e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	f000 8109 	beq.w	801018a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ff78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff80:	8912      	ldrh	r2, [r2, #8]
 800ff82:	441a      	add	r2, r3
 800ff84:	4b12      	ldr	r3, [pc, #72]	; (800ffd0 <tcp_receive+0xd04>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	1ad3      	subs	r3, r2, r3
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	dd12      	ble.n	800ffb4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ff8e:	4b10      	ldr	r3, [pc, #64]	; (800ffd0 <tcp_receive+0xd04>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	1ad3      	subs	r3, r2, r3
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ffa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa6:	685a      	ldr	r2, [r3, #4]
 800ffa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffaa:	891b      	ldrh	r3, [r3, #8]
 800ffac:	4619      	mov	r1, r3
 800ffae:	4610      	mov	r0, r2
 800ffb0:	f7fb ff26 	bl	800be00 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ffb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb6:	69fa      	ldr	r2, [r7, #28]
 800ffb8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ffba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffbc:	69f8      	ldr	r0, [r7, #28]
 800ffbe:	f7ff f881 	bl	800f0c4 <tcp_oos_insert_segment>
                  }
                  break;
 800ffc2:	e0e2      	b.n	801018a <tcp_receive+0xebe>
 800ffc4:	2400819c 	.word	0x2400819c
 800ffc8:	24008199 	.word	0x24008199
 800ffcc:	2400816c 	.word	0x2400816c
 800ffd0:	2400818c 	.word	0x2400818c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ffd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	f040 80c6 	bne.w	801016e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ffe2:	4b80      	ldr	r3, [pc, #512]	; (80101e4 <tcp_receive+0xf18>)
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	f340 80bd 	ble.w	801016e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	899b      	ldrh	r3, [r3, #12]
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7f8 f9a3 	bl	8008348 <lwip_htons>
 8010002:	4603      	mov	r3, r0
 8010004:	b2db      	uxtb	r3, r3
 8010006:	f003 0301 	and.w	r3, r3, #1
 801000a:	2b00      	cmp	r3, #0
 801000c:	f040 80bf 	bne.w	801018e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010010:	4875      	ldr	r0, [pc, #468]	; (80101e8 <tcp_receive+0xf1c>)
 8010012:	f7fd fb07 	bl	800d624 <tcp_seg_copy>
 8010016:	4602      	mov	r2, r0
 8010018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801001c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	f000 80b6 	beq.w	8010192 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801002e:	8912      	ldrh	r2, [r2, #8]
 8010030:	441a      	add	r2, r3
 8010032:	4b6c      	ldr	r3, [pc, #432]	; (80101e4 <tcp_receive+0xf18>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	1ad3      	subs	r3, r2, r3
 8010038:	2b00      	cmp	r3, #0
 801003a:	dd12      	ble.n	8010062 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801003c:	4b69      	ldr	r3, [pc, #420]	; (80101e4 <tcp_receive+0xf18>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	b29a      	uxth	r2, r3
 8010042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	b29b      	uxth	r3, r3
 801004a:	1ad3      	subs	r3, r2, r3
 801004c:	b29a      	uxth	r2, r3
 801004e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010050:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010054:	685a      	ldr	r2, [r3, #4]
 8010056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010058:	891b      	ldrh	r3, [r3, #8]
 801005a:	4619      	mov	r1, r3
 801005c:	4610      	mov	r0, r2
 801005e:	f7fb fecf 	bl	800be00 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010062:	4b62      	ldr	r3, [pc, #392]	; (80101ec <tcp_receive+0xf20>)
 8010064:	881b      	ldrh	r3, [r3, #0]
 8010066:	461a      	mov	r2, r3
 8010068:	4b5e      	ldr	r3, [pc, #376]	; (80101e4 <tcp_receive+0xf18>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	441a      	add	r2, r3
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010072:	6879      	ldr	r1, [r7, #4]
 8010074:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010076:	440b      	add	r3, r1
 8010078:	1ad3      	subs	r3, r2, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	f340 8089 	ble.w	8010192 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	68db      	ldr	r3, [r3, #12]
 8010086:	899b      	ldrh	r3, [r3, #12]
 8010088:	b29b      	uxth	r3, r3
 801008a:	4618      	mov	r0, r3
 801008c:	f7f8 f95c 	bl	8008348 <lwip_htons>
 8010090:	4603      	mov	r3, r0
 8010092:	b2db      	uxtb	r3, r3
 8010094:	f003 0301 	and.w	r3, r3, #1
 8010098:	2b00      	cmp	r3, #0
 801009a:	d022      	beq.n	80100e2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801009c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	68db      	ldr	r3, [r3, #12]
 80100a2:	899b      	ldrh	r3, [r3, #12]
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	b21b      	sxth	r3, r3
 80100a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80100ac:	b21c      	sxth	r4, r3
 80100ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	899b      	ldrh	r3, [r3, #12]
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7f8 f945 	bl	8008348 <lwip_htons>
 80100be:	4603      	mov	r3, r0
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7f8 f93c 	bl	8008348 <lwip_htons>
 80100d0:	4603      	mov	r3, r0
 80100d2:	b21b      	sxth	r3, r3
 80100d4:	4323      	orrs	r3, r4
 80100d6:	b21a      	sxth	r2, r3
 80100d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	b292      	uxth	r2, r2
 80100e0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100ec:	4413      	add	r3, r2
 80100ee:	b299      	uxth	r1, r3
 80100f0:	4b3c      	ldr	r3, [pc, #240]	; (80101e4 <tcp_receive+0xf18>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	b29a      	uxth	r2, r3
 80100f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	1a8a      	subs	r2, r1, r2
 80100fc:	b292      	uxth	r2, r2
 80100fe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	685a      	ldr	r2, [r3, #4]
 8010106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	891b      	ldrh	r3, [r3, #8]
 801010c:	4619      	mov	r1, r3
 801010e:	4610      	mov	r0, r2
 8010110:	f7fb fe76 	bl	800be00 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	891c      	ldrh	r4, [r3, #8]
 801011a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	899b      	ldrh	r3, [r3, #12]
 8010122:	b29b      	uxth	r3, r3
 8010124:	4618      	mov	r0, r3
 8010126:	f7f8 f90f 	bl	8008348 <lwip_htons>
 801012a:	4603      	mov	r3, r0
 801012c:	b2db      	uxtb	r3, r3
 801012e:	f003 0303 	and.w	r3, r3, #3
 8010132:	2b00      	cmp	r3, #0
 8010134:	d001      	beq.n	801013a <tcp_receive+0xe6e>
 8010136:	2301      	movs	r3, #1
 8010138:	e000      	b.n	801013c <tcp_receive+0xe70>
 801013a:	2300      	movs	r3, #0
 801013c:	4423      	add	r3, r4
 801013e:	b29a      	uxth	r2, r3
 8010140:	4b2a      	ldr	r3, [pc, #168]	; (80101ec <tcp_receive+0xf20>)
 8010142:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010144:	4b29      	ldr	r3, [pc, #164]	; (80101ec <tcp_receive+0xf20>)
 8010146:	881b      	ldrh	r3, [r3, #0]
 8010148:	461a      	mov	r2, r3
 801014a:	4b26      	ldr	r3, [pc, #152]	; (80101e4 <tcp_receive+0xf18>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	441a      	add	r2, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010154:	6879      	ldr	r1, [r7, #4]
 8010156:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010158:	440b      	add	r3, r1
 801015a:	429a      	cmp	r2, r3
 801015c:	d019      	beq.n	8010192 <tcp_receive+0xec6>
 801015e:	4b24      	ldr	r3, [pc, #144]	; (80101f0 <tcp_receive+0xf24>)
 8010160:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010164:	4923      	ldr	r1, [pc, #140]	; (80101f4 <tcp_receive+0xf28>)
 8010166:	4824      	ldr	r0, [pc, #144]	; (80101f8 <tcp_receive+0xf2c>)
 8010168:	f001 fec6 	bl	8011ef8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801016c:	e011      	b.n	8010192 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801016e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	63bb      	str	r3, [r7, #56]	; 0x38
 8010174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010176:	2b00      	cmp	r3, #0
 8010178:	f47f aea4 	bne.w	800fec4 <tcp_receive+0xbf8>
 801017c:	e00a      	b.n	8010194 <tcp_receive+0xec8>
                break;
 801017e:	bf00      	nop
 8010180:	e008      	b.n	8010194 <tcp_receive+0xec8>
                break;
 8010182:	bf00      	nop
 8010184:	e006      	b.n	8010194 <tcp_receive+0xec8>
                  break;
 8010186:	bf00      	nop
 8010188:	e004      	b.n	8010194 <tcp_receive+0xec8>
                  break;
 801018a:	bf00      	nop
 801018c:	e002      	b.n	8010194 <tcp_receive+0xec8>
                  break;
 801018e:	bf00      	nop
 8010190:	e000      	b.n	8010194 <tcp_receive+0xec8>
                break;
 8010192:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f001 fa33 	bl	8011600 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801019a:	e003      	b.n	80101a4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f001 fa2f 	bl	8011600 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101a2:	e01a      	b.n	80101da <tcp_receive+0xf0e>
 80101a4:	e019      	b.n	80101da <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80101a6:	4b0f      	ldr	r3, [pc, #60]	; (80101e4 <tcp_receive+0xf18>)
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ae:	1ad3      	subs	r3, r2, r3
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	db0a      	blt.n	80101ca <tcp_receive+0xefe>
 80101b4:	4b0b      	ldr	r3, [pc, #44]	; (80101e4 <tcp_receive+0xf18>)
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101bc:	6879      	ldr	r1, [r7, #4]
 80101be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101c0:	440b      	add	r3, r1
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	3301      	adds	r3, #1
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	dd07      	ble.n	80101da <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	8b5b      	ldrh	r3, [r3, #26]
 80101ce:	f043 0302 	orr.w	r3, r3, #2
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80101d8:	e7ff      	b.n	80101da <tcp_receive+0xf0e>
 80101da:	bf00      	nop
 80101dc:	3750      	adds	r7, #80	; 0x50
 80101de:	46bd      	mov	sp, r7
 80101e0:	bdb0      	pop	{r4, r5, r7, pc}
 80101e2:	bf00      	nop
 80101e4:	2400818c 	.word	0x2400818c
 80101e8:	2400816c 	.word	0x2400816c
 80101ec:	24008196 	.word	0x24008196
 80101f0:	08014a18 	.word	0x08014a18
 80101f4:	08014de0 	.word	0x08014de0
 80101f8:	08014a84 	.word	0x08014a84

080101fc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010202:	4b15      	ldr	r3, [pc, #84]	; (8010258 <tcp_get_next_optbyte+0x5c>)
 8010204:	881b      	ldrh	r3, [r3, #0]
 8010206:	1c5a      	adds	r2, r3, #1
 8010208:	b291      	uxth	r1, r2
 801020a:	4a13      	ldr	r2, [pc, #76]	; (8010258 <tcp_get_next_optbyte+0x5c>)
 801020c:	8011      	strh	r1, [r2, #0]
 801020e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010210:	4b12      	ldr	r3, [pc, #72]	; (801025c <tcp_get_next_optbyte+0x60>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d004      	beq.n	8010222 <tcp_get_next_optbyte+0x26>
 8010218:	4b11      	ldr	r3, [pc, #68]	; (8010260 <tcp_get_next_optbyte+0x64>)
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	88fa      	ldrh	r2, [r7, #6]
 801021e:	429a      	cmp	r2, r3
 8010220:	d208      	bcs.n	8010234 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010222:	4b10      	ldr	r3, [pc, #64]	; (8010264 <tcp_get_next_optbyte+0x68>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	3314      	adds	r3, #20
 8010228:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801022a:	88fb      	ldrh	r3, [r7, #6]
 801022c:	683a      	ldr	r2, [r7, #0]
 801022e:	4413      	add	r3, r2
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	e00b      	b.n	801024c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010234:	88fb      	ldrh	r3, [r7, #6]
 8010236:	b2da      	uxtb	r2, r3
 8010238:	4b09      	ldr	r3, [pc, #36]	; (8010260 <tcp_get_next_optbyte+0x64>)
 801023a:	881b      	ldrh	r3, [r3, #0]
 801023c:	b2db      	uxtb	r3, r3
 801023e:	1ad3      	subs	r3, r2, r3
 8010240:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010242:	4b06      	ldr	r3, [pc, #24]	; (801025c <tcp_get_next_optbyte+0x60>)
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	797b      	ldrb	r3, [r7, #5]
 8010248:	4413      	add	r3, r2
 801024a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801024c:	4618      	mov	r0, r3
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr
 8010258:	24008188 	.word	0x24008188
 801025c:	24008184 	.word	0x24008184
 8010260:	24008182 	.word	0x24008182
 8010264:	2400817c 	.word	0x2400817c

08010268 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d106      	bne.n	8010284 <tcp_parseopt+0x1c>
 8010276:	4b32      	ldr	r3, [pc, #200]	; (8010340 <tcp_parseopt+0xd8>)
 8010278:	f240 727d 	movw	r2, #1917	; 0x77d
 801027c:	4931      	ldr	r1, [pc, #196]	; (8010344 <tcp_parseopt+0xdc>)
 801027e:	4832      	ldr	r0, [pc, #200]	; (8010348 <tcp_parseopt+0xe0>)
 8010280:	f001 fe3a 	bl	8011ef8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010284:	4b31      	ldr	r3, [pc, #196]	; (801034c <tcp_parseopt+0xe4>)
 8010286:	881b      	ldrh	r3, [r3, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d055      	beq.n	8010338 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801028c:	4b30      	ldr	r3, [pc, #192]	; (8010350 <tcp_parseopt+0xe8>)
 801028e:	2200      	movs	r2, #0
 8010290:	801a      	strh	r2, [r3, #0]
 8010292:	e045      	b.n	8010320 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010294:	f7ff ffb2 	bl	80101fc <tcp_get_next_optbyte>
 8010298:	4603      	mov	r3, r0
 801029a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801029c:	7bfb      	ldrb	r3, [r7, #15]
 801029e:	2b02      	cmp	r3, #2
 80102a0:	d006      	beq.n	80102b0 <tcp_parseopt+0x48>
 80102a2:	2b02      	cmp	r3, #2
 80102a4:	dc2b      	bgt.n	80102fe <tcp_parseopt+0x96>
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d041      	beq.n	801032e <tcp_parseopt+0xc6>
 80102aa:	2b01      	cmp	r3, #1
 80102ac:	d127      	bne.n	80102fe <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80102ae:	e037      	b.n	8010320 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80102b0:	f7ff ffa4 	bl	80101fc <tcp_get_next_optbyte>
 80102b4:	4603      	mov	r3, r0
 80102b6:	2b04      	cmp	r3, #4
 80102b8:	d13b      	bne.n	8010332 <tcp_parseopt+0xca>
 80102ba:	4b25      	ldr	r3, [pc, #148]	; (8010350 <tcp_parseopt+0xe8>)
 80102bc:	881b      	ldrh	r3, [r3, #0]
 80102be:	3301      	adds	r3, #1
 80102c0:	4a22      	ldr	r2, [pc, #136]	; (801034c <tcp_parseopt+0xe4>)
 80102c2:	8812      	ldrh	r2, [r2, #0]
 80102c4:	4293      	cmp	r3, r2
 80102c6:	da34      	bge.n	8010332 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80102c8:	f7ff ff98 	bl	80101fc <tcp_get_next_optbyte>
 80102cc:	4603      	mov	r3, r0
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	021b      	lsls	r3, r3, #8
 80102d2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80102d4:	f7ff ff92 	bl	80101fc <tcp_get_next_optbyte>
 80102d8:	4603      	mov	r3, r0
 80102da:	b29a      	uxth	r2, r3
 80102dc:	89bb      	ldrh	r3, [r7, #12]
 80102de:	4313      	orrs	r3, r2
 80102e0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80102e2:	89bb      	ldrh	r3, [r7, #12]
 80102e4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80102e8:	d804      	bhi.n	80102f4 <tcp_parseopt+0x8c>
 80102ea:	89bb      	ldrh	r3, [r7, #12]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d001      	beq.n	80102f4 <tcp_parseopt+0x8c>
 80102f0:	89ba      	ldrh	r2, [r7, #12]
 80102f2:	e001      	b.n	80102f8 <tcp_parseopt+0x90>
 80102f4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80102fc:	e010      	b.n	8010320 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80102fe:	f7ff ff7d 	bl	80101fc <tcp_get_next_optbyte>
 8010302:	4603      	mov	r3, r0
 8010304:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010306:	7afb      	ldrb	r3, [r7, #11]
 8010308:	2b01      	cmp	r3, #1
 801030a:	d914      	bls.n	8010336 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801030c:	7afb      	ldrb	r3, [r7, #11]
 801030e:	b29a      	uxth	r2, r3
 8010310:	4b0f      	ldr	r3, [pc, #60]	; (8010350 <tcp_parseopt+0xe8>)
 8010312:	881b      	ldrh	r3, [r3, #0]
 8010314:	4413      	add	r3, r2
 8010316:	b29b      	uxth	r3, r3
 8010318:	3b02      	subs	r3, #2
 801031a:	b29a      	uxth	r2, r3
 801031c:	4b0c      	ldr	r3, [pc, #48]	; (8010350 <tcp_parseopt+0xe8>)
 801031e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010320:	4b0b      	ldr	r3, [pc, #44]	; (8010350 <tcp_parseopt+0xe8>)
 8010322:	881a      	ldrh	r2, [r3, #0]
 8010324:	4b09      	ldr	r3, [pc, #36]	; (801034c <tcp_parseopt+0xe4>)
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	429a      	cmp	r2, r3
 801032a:	d3b3      	bcc.n	8010294 <tcp_parseopt+0x2c>
 801032c:	e004      	b.n	8010338 <tcp_parseopt+0xd0>
          return;
 801032e:	bf00      	nop
 8010330:	e002      	b.n	8010338 <tcp_parseopt+0xd0>
            return;
 8010332:	bf00      	nop
 8010334:	e000      	b.n	8010338 <tcp_parseopt+0xd0>
            return;
 8010336:	bf00      	nop
      }
    }
  }
}
 8010338:	3710      	adds	r7, #16
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	08014a18 	.word	0x08014a18
 8010344:	08014e9c 	.word	0x08014e9c
 8010348:	08014a84 	.word	0x08014a84
 801034c:	24008180 	.word	0x24008180
 8010350:	24008188 	.word	0x24008188

08010354 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010354:	b480      	push	{r7}
 8010356:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010358:	4b05      	ldr	r3, [pc, #20]	; (8010370 <tcp_trigger_input_pcb_close+0x1c>)
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	f043 0310 	orr.w	r3, r3, #16
 8010360:	b2da      	uxtb	r2, r3
 8010362:	4b03      	ldr	r3, [pc, #12]	; (8010370 <tcp_trigger_input_pcb_close+0x1c>)
 8010364:	701a      	strb	r2, [r3, #0]
}
 8010366:	bf00      	nop
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr
 8010370:	24008199 	.word	0x24008199

08010374 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00a      	beq.n	801039c <tcp_route+0x28>
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	7a1b      	ldrb	r3, [r3, #8]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d006      	beq.n	801039c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	7a1b      	ldrb	r3, [r3, #8]
 8010392:	4618      	mov	r0, r3
 8010394:	f7fb fb7a 	bl	800ba8c <netif_get_by_index>
 8010398:	4603      	mov	r3, r0
 801039a:	e003      	b.n	80103a4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7f9 faa9 	bl	80098f4 <ip4_route>
 80103a2:	4603      	mov	r3, r0
  }
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80103ac:	b590      	push	{r4, r7, lr}
 80103ae:	b087      	sub	sp, #28
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	60b9      	str	r1, [r7, #8]
 80103b6:	603b      	str	r3, [r7, #0]
 80103b8:	4613      	mov	r3, r2
 80103ba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d105      	bne.n	80103ce <tcp_create_segment+0x22>
 80103c2:	4b44      	ldr	r3, [pc, #272]	; (80104d4 <tcp_create_segment+0x128>)
 80103c4:	22a3      	movs	r2, #163	; 0xa3
 80103c6:	4944      	ldr	r1, [pc, #272]	; (80104d8 <tcp_create_segment+0x12c>)
 80103c8:	4844      	ldr	r0, [pc, #272]	; (80104dc <tcp_create_segment+0x130>)
 80103ca:	f001 fd95 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d105      	bne.n	80103e0 <tcp_create_segment+0x34>
 80103d4:	4b3f      	ldr	r3, [pc, #252]	; (80104d4 <tcp_create_segment+0x128>)
 80103d6:	22a4      	movs	r2, #164	; 0xa4
 80103d8:	4941      	ldr	r1, [pc, #260]	; (80104e0 <tcp_create_segment+0x134>)
 80103da:	4840      	ldr	r0, [pc, #256]	; (80104dc <tcp_create_segment+0x130>)
 80103dc:	f001 fd8c 	bl	8011ef8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80103e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	f003 0304 	and.w	r3, r3, #4
 80103ec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80103ee:	2003      	movs	r0, #3
 80103f0:	f7fa ffc6 	bl	800b380 <memp_malloc>
 80103f4:	6138      	str	r0, [r7, #16]
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d104      	bne.n	8010406 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80103fc:	68b8      	ldr	r0, [r7, #8]
 80103fe:	f7fb fe85 	bl	800c10c <pbuf_free>
    return NULL;
 8010402:	2300      	movs	r3, #0
 8010404:	e061      	b.n	80104ca <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801040c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	2200      	movs	r2, #0
 8010412:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	68ba      	ldr	r2, [r7, #8]
 8010418:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	891a      	ldrh	r2, [r3, #8]
 801041e:	7dfb      	ldrb	r3, [r7, #23]
 8010420:	b29b      	uxth	r3, r3
 8010422:	429a      	cmp	r2, r3
 8010424:	d205      	bcs.n	8010432 <tcp_create_segment+0x86>
 8010426:	4b2b      	ldr	r3, [pc, #172]	; (80104d4 <tcp_create_segment+0x128>)
 8010428:	22b0      	movs	r2, #176	; 0xb0
 801042a:	492e      	ldr	r1, [pc, #184]	; (80104e4 <tcp_create_segment+0x138>)
 801042c:	482b      	ldr	r0, [pc, #172]	; (80104dc <tcp_create_segment+0x130>)
 801042e:	f001 fd63 	bl	8011ef8 <iprintf>
  seg->len = p->tot_len - optlen;
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	891a      	ldrh	r2, [r3, #8]
 8010436:	7dfb      	ldrb	r3, [r7, #23]
 8010438:	b29b      	uxth	r3, r3
 801043a:	1ad3      	subs	r3, r2, r3
 801043c:	b29a      	uxth	r2, r3
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010442:	2114      	movs	r1, #20
 8010444:	68b8      	ldr	r0, [r7, #8]
 8010446:	f7fb fdcb 	bl	800bfe0 <pbuf_add_header>
 801044a:	4603      	mov	r3, r0
 801044c:	2b00      	cmp	r3, #0
 801044e:	d004      	beq.n	801045a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010450:	6938      	ldr	r0, [r7, #16]
 8010452:	f7fd f8ce 	bl	800d5f2 <tcp_seg_free>
    return NULL;
 8010456:	2300      	movs	r3, #0
 8010458:	e037      	b.n	80104ca <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	685a      	ldr	r2, [r3, #4]
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	8ada      	ldrh	r2, [r3, #22]
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	68dc      	ldr	r4, [r3, #12]
 801046c:	4610      	mov	r0, r2
 801046e:	f7f7 ff6b 	bl	8008348 <lwip_htons>
 8010472:	4603      	mov	r3, r0
 8010474:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	8b1a      	ldrh	r2, [r3, #24]
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	68dc      	ldr	r4, [r3, #12]
 801047e:	4610      	mov	r0, r2
 8010480:	f7f7 ff62 	bl	8008348 <lwip_htons>
 8010484:	4603      	mov	r3, r0
 8010486:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	68dc      	ldr	r4, [r3, #12]
 801048c:	6838      	ldr	r0, [r7, #0]
 801048e:	f7f7 ff70 	bl	8008372 <lwip_htonl>
 8010492:	4603      	mov	r3, r0
 8010494:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010496:	7dfb      	ldrb	r3, [r7, #23]
 8010498:	089b      	lsrs	r3, r3, #2
 801049a:	b2db      	uxtb	r3, r3
 801049c:	b29b      	uxth	r3, r3
 801049e:	3305      	adds	r3, #5
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	031b      	lsls	r3, r3, #12
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	79fb      	ldrb	r3, [r7, #7]
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	4313      	orrs	r3, r2
 80104ac:	b29a      	uxth	r2, r3
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	68dc      	ldr	r4, [r3, #12]
 80104b2:	4610      	mov	r0, r2
 80104b4:	f7f7 ff48 	bl	8008348 <lwip_htons>
 80104b8:	4603      	mov	r3, r0
 80104ba:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	2200      	movs	r2, #0
 80104c2:	749a      	strb	r2, [r3, #18]
 80104c4:	2200      	movs	r2, #0
 80104c6:	74da      	strb	r2, [r3, #19]
  return seg;
 80104c8:	693b      	ldr	r3, [r7, #16]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	371c      	adds	r7, #28
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd90      	pop	{r4, r7, pc}
 80104d2:	bf00      	nop
 80104d4:	08014eb8 	.word	0x08014eb8
 80104d8:	08014f10 	.word	0x08014f10
 80104dc:	08014f30 	.word	0x08014f30
 80104e0:	08014f58 	.word	0x08014f58
 80104e4:	08014f7c 	.word	0x08014f7c

080104e8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80104e8:	b590      	push	{r4, r7, lr}
 80104ea:	b08b      	sub	sp, #44	; 0x2c
 80104ec:	af02      	add	r7, sp, #8
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	460b      	mov	r3, r1
 80104f2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80104f4:	2300      	movs	r3, #0
 80104f6:	61fb      	str	r3, [r7, #28]
 80104f8:	2300      	movs	r3, #0
 80104fa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80104fc:	2300      	movs	r3, #0
 80104fe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d106      	bne.n	8010514 <tcp_split_unsent_seg+0x2c>
 8010506:	4b95      	ldr	r3, [pc, #596]	; (801075c <tcp_split_unsent_seg+0x274>)
 8010508:	f240 324b 	movw	r2, #843	; 0x34b
 801050c:	4994      	ldr	r1, [pc, #592]	; (8010760 <tcp_split_unsent_seg+0x278>)
 801050e:	4895      	ldr	r0, [pc, #596]	; (8010764 <tcp_split_unsent_seg+0x27c>)
 8010510:	f001 fcf2 	bl	8011ef8 <iprintf>

  useg = pcb->unsent;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010518:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d102      	bne.n	8010526 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010520:	f04f 33ff 	mov.w	r3, #4294967295
 8010524:	e116      	b.n	8010754 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010526:	887b      	ldrh	r3, [r7, #2]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d109      	bne.n	8010540 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801052c:	4b8b      	ldr	r3, [pc, #556]	; (801075c <tcp_split_unsent_seg+0x274>)
 801052e:	f240 3253 	movw	r2, #851	; 0x353
 8010532:	498d      	ldr	r1, [pc, #564]	; (8010768 <tcp_split_unsent_seg+0x280>)
 8010534:	488b      	ldr	r0, [pc, #556]	; (8010764 <tcp_split_unsent_seg+0x27c>)
 8010536:	f001 fcdf 	bl	8011ef8 <iprintf>
    return ERR_VAL;
 801053a:	f06f 0305 	mvn.w	r3, #5
 801053e:	e109      	b.n	8010754 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	891b      	ldrh	r3, [r3, #8]
 8010544:	887a      	ldrh	r2, [r7, #2]
 8010546:	429a      	cmp	r2, r3
 8010548:	d301      	bcc.n	801054e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801054a:	2300      	movs	r3, #0
 801054c:	e102      	b.n	8010754 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010552:	887a      	ldrh	r2, [r7, #2]
 8010554:	429a      	cmp	r2, r3
 8010556:	d906      	bls.n	8010566 <tcp_split_unsent_seg+0x7e>
 8010558:	4b80      	ldr	r3, [pc, #512]	; (801075c <tcp_split_unsent_seg+0x274>)
 801055a:	f240 325b 	movw	r2, #859	; 0x35b
 801055e:	4983      	ldr	r1, [pc, #524]	; (801076c <tcp_split_unsent_seg+0x284>)
 8010560:	4880      	ldr	r0, [pc, #512]	; (8010764 <tcp_split_unsent_seg+0x27c>)
 8010562:	f001 fcc9 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	891b      	ldrh	r3, [r3, #8]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d106      	bne.n	801057c <tcp_split_unsent_seg+0x94>
 801056e:	4b7b      	ldr	r3, [pc, #492]	; (801075c <tcp_split_unsent_seg+0x274>)
 8010570:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010574:	497e      	ldr	r1, [pc, #504]	; (8010770 <tcp_split_unsent_seg+0x288>)
 8010576:	487b      	ldr	r0, [pc, #492]	; (8010764 <tcp_split_unsent_seg+0x27c>)
 8010578:	f001 fcbe 	bl	8011ef8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	7a9b      	ldrb	r3, [r3, #10]
 8010580:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010582:	7bfb      	ldrb	r3, [r7, #15]
 8010584:	009b      	lsls	r3, r3, #2
 8010586:	b2db      	uxtb	r3, r3
 8010588:	f003 0304 	and.w	r3, r3, #4
 801058c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	891a      	ldrh	r2, [r3, #8]
 8010592:	887b      	ldrh	r3, [r7, #2]
 8010594:	1ad3      	subs	r3, r2, r3
 8010596:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010598:	7bbb      	ldrb	r3, [r7, #14]
 801059a:	b29a      	uxth	r2, r3
 801059c:	89bb      	ldrh	r3, [r7, #12]
 801059e:	4413      	add	r3, r2
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80105a6:	4619      	mov	r1, r3
 80105a8:	2036      	movs	r0, #54	; 0x36
 80105aa:	f7fb facb 	bl	800bb44 <pbuf_alloc>
 80105ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	f000 80b7 	beq.w	8010726 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	891a      	ldrh	r2, [r3, #8]
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	891b      	ldrh	r3, [r3, #8]
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	887b      	ldrh	r3, [r7, #2]
 80105c8:	4413      	add	r3, r2
 80105ca:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	6858      	ldr	r0, [r3, #4]
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	685a      	ldr	r2, [r3, #4]
 80105d4:	7bbb      	ldrb	r3, [r7, #14]
 80105d6:	18d1      	adds	r1, r2, r3
 80105d8:	897b      	ldrh	r3, [r7, #10]
 80105da:	89ba      	ldrh	r2, [r7, #12]
 80105dc:	f7fb ff80 	bl	800c4e0 <pbuf_copy_partial>
 80105e0:	4603      	mov	r3, r0
 80105e2:	461a      	mov	r2, r3
 80105e4:	89bb      	ldrh	r3, [r7, #12]
 80105e6:	4293      	cmp	r3, r2
 80105e8:	f040 809f 	bne.w	801072a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	899b      	ldrh	r3, [r3, #12]
 80105f2:	b29b      	uxth	r3, r3
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7f7 fea7 	bl	8008348 <lwip_htons>
 80105fa:	4603      	mov	r3, r0
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010602:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010604:	2300      	movs	r3, #0
 8010606:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010608:	7efb      	ldrb	r3, [r7, #27]
 801060a:	f003 0308 	and.w	r3, r3, #8
 801060e:	2b00      	cmp	r3, #0
 8010610:	d007      	beq.n	8010622 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010612:	7efb      	ldrb	r3, [r7, #27]
 8010614:	f023 0308 	bic.w	r3, r3, #8
 8010618:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801061a:	7ebb      	ldrb	r3, [r7, #26]
 801061c:	f043 0308 	orr.w	r3, r3, #8
 8010620:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010622:	7efb      	ldrb	r3, [r7, #27]
 8010624:	f003 0301 	and.w	r3, r3, #1
 8010628:	2b00      	cmp	r3, #0
 801062a:	d007      	beq.n	801063c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801062c:	7efb      	ldrb	r3, [r7, #27]
 801062e:	f023 0301 	bic.w	r3, r3, #1
 8010632:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010634:	7ebb      	ldrb	r3, [r7, #26]
 8010636:	f043 0301 	orr.w	r3, r3, #1
 801063a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	4618      	mov	r0, r3
 8010644:	f7f7 fe95 	bl	8008372 <lwip_htonl>
 8010648:	4602      	mov	r2, r0
 801064a:	887b      	ldrh	r3, [r7, #2]
 801064c:	18d1      	adds	r1, r2, r3
 801064e:	7eba      	ldrb	r2, [r7, #26]
 8010650:	7bfb      	ldrb	r3, [r7, #15]
 8010652:	9300      	str	r3, [sp, #0]
 8010654:	460b      	mov	r3, r1
 8010656:	6939      	ldr	r1, [r7, #16]
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7ff fea7 	bl	80103ac <tcp_create_segment>
 801065e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010660:	69fb      	ldr	r3, [r7, #28]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d063      	beq.n	801072e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	685b      	ldr	r3, [r3, #4]
 801066a:	4618      	mov	r0, r3
 801066c:	f7fb fdd6 	bl	800c21c <pbuf_clen>
 8010670:	4603      	mov	r3, r0
 8010672:	461a      	mov	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801067a:	1a9b      	subs	r3, r3, r2
 801067c:	b29a      	uxth	r2, r3
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	6858      	ldr	r0, [r3, #4]
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	685b      	ldr	r3, [r3, #4]
 801068c:	891a      	ldrh	r2, [r3, #8]
 801068e:	89bb      	ldrh	r3, [r7, #12]
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	b29b      	uxth	r3, r3
 8010694:	4619      	mov	r1, r3
 8010696:	f7fb fbb3 	bl	800be00 <pbuf_realloc>
  useg->len -= remainder;
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	891a      	ldrh	r2, [r3, #8]
 801069e:	89bb      	ldrh	r3, [r7, #12]
 80106a0:	1ad3      	subs	r3, r2, r3
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	68db      	ldr	r3, [r3, #12]
 80106ac:	899b      	ldrh	r3, [r3, #12]
 80106ae:	b29c      	uxth	r4, r3
 80106b0:	7efb      	ldrb	r3, [r7, #27]
 80106b2:	b29b      	uxth	r3, r3
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7f7 fe47 	bl	8008348 <lwip_htons>
 80106ba:	4603      	mov	r3, r0
 80106bc:	461a      	mov	r2, r3
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	68db      	ldr	r3, [r3, #12]
 80106c2:	4322      	orrs	r2, r4
 80106c4:	b292      	uxth	r2, r2
 80106c6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7fb fda5 	bl	800c21c <pbuf_clen>
 80106d2:	4603      	mov	r3, r0
 80106d4:	461a      	mov	r2, r3
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106dc:	4413      	add	r3, r2
 80106de:	b29a      	uxth	r2, r3
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7fb fd96 	bl	800c21c <pbuf_clen>
 80106f0:	4603      	mov	r3, r0
 80106f2:	461a      	mov	r2, r3
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106fa:	4413      	add	r3, r2
 80106fc:	b29a      	uxth	r2, r3
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	69fa      	ldr	r2, [r7, #28]
 8010710:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d103      	bne.n	8010722 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2200      	movs	r2, #0
 801071e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010722:	2300      	movs	r3, #0
 8010724:	e016      	b.n	8010754 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010726:	bf00      	nop
 8010728:	e002      	b.n	8010730 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801072a:	bf00      	nop
 801072c:	e000      	b.n	8010730 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801072e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d006      	beq.n	8010744 <tcp_split_unsent_seg+0x25c>
 8010736:	4b09      	ldr	r3, [pc, #36]	; (801075c <tcp_split_unsent_seg+0x274>)
 8010738:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801073c:	490d      	ldr	r1, [pc, #52]	; (8010774 <tcp_split_unsent_seg+0x28c>)
 801073e:	4809      	ldr	r0, [pc, #36]	; (8010764 <tcp_split_unsent_seg+0x27c>)
 8010740:	f001 fbda 	bl	8011ef8 <iprintf>
  if (p != NULL) {
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d002      	beq.n	8010750 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801074a:	6938      	ldr	r0, [r7, #16]
 801074c:	f7fb fcde 	bl	800c10c <pbuf_free>
  }

  return ERR_MEM;
 8010750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010754:	4618      	mov	r0, r3
 8010756:	3724      	adds	r7, #36	; 0x24
 8010758:	46bd      	mov	sp, r7
 801075a:	bd90      	pop	{r4, r7, pc}
 801075c:	08014eb8 	.word	0x08014eb8
 8010760:	08015270 	.word	0x08015270
 8010764:	08014f30 	.word	0x08014f30
 8010768:	08015294 	.word	0x08015294
 801076c:	080152b8 	.word	0x080152b8
 8010770:	080152c8 	.word	0x080152c8
 8010774:	080152d8 	.word	0x080152d8

08010778 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010778:	b590      	push	{r4, r7, lr}
 801077a:	b085      	sub	sp, #20
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d106      	bne.n	8010794 <tcp_send_fin+0x1c>
 8010786:	4b21      	ldr	r3, [pc, #132]	; (801080c <tcp_send_fin+0x94>)
 8010788:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801078c:	4920      	ldr	r1, [pc, #128]	; (8010810 <tcp_send_fin+0x98>)
 801078e:	4821      	ldr	r0, [pc, #132]	; (8010814 <tcp_send_fin+0x9c>)
 8010790:	f001 fbb2 	bl	8011ef8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010798:	2b00      	cmp	r3, #0
 801079a:	d02e      	beq.n	80107fa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a0:	60fb      	str	r3, [r7, #12]
 80107a2:	e002      	b.n	80107aa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d1f8      	bne.n	80107a4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	899b      	ldrh	r3, [r3, #12]
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7f7 fdc4 	bl	8008348 <lwip_htons>
 80107c0:	4603      	mov	r3, r0
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	f003 0307 	and.w	r3, r3, #7
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d116      	bne.n	80107fa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	899b      	ldrh	r3, [r3, #12]
 80107d2:	b29c      	uxth	r4, r3
 80107d4:	2001      	movs	r0, #1
 80107d6:	f7f7 fdb7 	bl	8008348 <lwip_htons>
 80107da:	4603      	mov	r3, r0
 80107dc:	461a      	mov	r2, r3
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	4322      	orrs	r2, r4
 80107e4:	b292      	uxth	r2, r2
 80107e6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	8b5b      	ldrh	r3, [r3, #26]
 80107ec:	f043 0320 	orr.w	r3, r3, #32
 80107f0:	b29a      	uxth	r2, r3
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80107f6:	2300      	movs	r3, #0
 80107f8:	e004      	b.n	8010804 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80107fa:	2101      	movs	r1, #1
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f000 f80b 	bl	8010818 <tcp_enqueue_flags>
 8010802:	4603      	mov	r3, r0
}
 8010804:	4618      	mov	r0, r3
 8010806:	3714      	adds	r7, #20
 8010808:	46bd      	mov	sp, r7
 801080a:	bd90      	pop	{r4, r7, pc}
 801080c:	08014eb8 	.word	0x08014eb8
 8010810:	080152e4 	.word	0x080152e4
 8010814:	08014f30 	.word	0x08014f30

08010818 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b08a      	sub	sp, #40	; 0x28
 801081c:	af02      	add	r7, sp, #8
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	460b      	mov	r3, r1
 8010822:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010824:	2300      	movs	r3, #0
 8010826:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010828:	2300      	movs	r3, #0
 801082a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801082c:	78fb      	ldrb	r3, [r7, #3]
 801082e:	f003 0303 	and.w	r3, r3, #3
 8010832:	2b00      	cmp	r3, #0
 8010834:	d106      	bne.n	8010844 <tcp_enqueue_flags+0x2c>
 8010836:	4b67      	ldr	r3, [pc, #412]	; (80109d4 <tcp_enqueue_flags+0x1bc>)
 8010838:	f240 4211 	movw	r2, #1041	; 0x411
 801083c:	4966      	ldr	r1, [pc, #408]	; (80109d8 <tcp_enqueue_flags+0x1c0>)
 801083e:	4867      	ldr	r0, [pc, #412]	; (80109dc <tcp_enqueue_flags+0x1c4>)
 8010840:	f001 fb5a 	bl	8011ef8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d106      	bne.n	8010858 <tcp_enqueue_flags+0x40>
 801084a:	4b62      	ldr	r3, [pc, #392]	; (80109d4 <tcp_enqueue_flags+0x1bc>)
 801084c:	f240 4213 	movw	r2, #1043	; 0x413
 8010850:	4963      	ldr	r1, [pc, #396]	; (80109e0 <tcp_enqueue_flags+0x1c8>)
 8010852:	4862      	ldr	r0, [pc, #392]	; (80109dc <tcp_enqueue_flags+0x1c4>)
 8010854:	f001 fb50 	bl	8011ef8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010858:	78fb      	ldrb	r3, [r7, #3]
 801085a:	f003 0302 	and.w	r3, r3, #2
 801085e:	2b00      	cmp	r3, #0
 8010860:	d001      	beq.n	8010866 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010862:	2301      	movs	r3, #1
 8010864:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010866:	7ffb      	ldrb	r3, [r7, #31]
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	b2db      	uxtb	r3, r3
 801086c:	f003 0304 	and.w	r3, r3, #4
 8010870:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010872:	7dfb      	ldrb	r3, [r7, #23]
 8010874:	b29b      	uxth	r3, r3
 8010876:	f44f 7220 	mov.w	r2, #640	; 0x280
 801087a:	4619      	mov	r1, r3
 801087c:	2036      	movs	r0, #54	; 0x36
 801087e:	f7fb f961 	bl	800bb44 <pbuf_alloc>
 8010882:	6138      	str	r0, [r7, #16]
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d109      	bne.n	801089e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	8b5b      	ldrh	r3, [r3, #26]
 801088e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010892:	b29a      	uxth	r2, r3
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010898:	f04f 33ff 	mov.w	r3, #4294967295
 801089c:	e095      	b.n	80109ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	895a      	ldrh	r2, [r3, #10]
 80108a2:	7dfb      	ldrb	r3, [r7, #23]
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d206      	bcs.n	80108b8 <tcp_enqueue_flags+0xa0>
 80108aa:	4b4a      	ldr	r3, [pc, #296]	; (80109d4 <tcp_enqueue_flags+0x1bc>)
 80108ac:	f240 4239 	movw	r2, #1081	; 0x439
 80108b0:	494c      	ldr	r1, [pc, #304]	; (80109e4 <tcp_enqueue_flags+0x1cc>)
 80108b2:	484a      	ldr	r0, [pc, #296]	; (80109dc <tcp_enqueue_flags+0x1c4>)
 80108b4:	f001 fb20 	bl	8011ef8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80108bc:	78fa      	ldrb	r2, [r7, #3]
 80108be:	7ffb      	ldrb	r3, [r7, #31]
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	460b      	mov	r3, r1
 80108c4:	6939      	ldr	r1, [r7, #16]
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7ff fd70 	bl	80103ac <tcp_create_segment>
 80108cc:	60f8      	str	r0, [r7, #12]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d109      	bne.n	80108e8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	8b5b      	ldrh	r3, [r3, #26]
 80108d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108dc:	b29a      	uxth	r2, r3
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80108e2:	f04f 33ff 	mov.w	r3, #4294967295
 80108e6:	e070      	b.n	80109ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	f003 0303 	and.w	r3, r3, #3
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d006      	beq.n	8010902 <tcp_enqueue_flags+0xea>
 80108f4:	4b37      	ldr	r3, [pc, #220]	; (80109d4 <tcp_enqueue_flags+0x1bc>)
 80108f6:	f240 4242 	movw	r2, #1090	; 0x442
 80108fa:	493b      	ldr	r1, [pc, #236]	; (80109e8 <tcp_enqueue_flags+0x1d0>)
 80108fc:	4837      	ldr	r0, [pc, #220]	; (80109dc <tcp_enqueue_flags+0x1c4>)
 80108fe:	f001 fafb 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	891b      	ldrh	r3, [r3, #8]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d006      	beq.n	8010918 <tcp_enqueue_flags+0x100>
 801090a:	4b32      	ldr	r3, [pc, #200]	; (80109d4 <tcp_enqueue_flags+0x1bc>)
 801090c:	f240 4243 	movw	r2, #1091	; 0x443
 8010910:	4936      	ldr	r1, [pc, #216]	; (80109ec <tcp_enqueue_flags+0x1d4>)
 8010912:	4832      	ldr	r0, [pc, #200]	; (80109dc <tcp_enqueue_flags+0x1c4>)
 8010914:	f001 faf0 	bl	8011ef8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801091c:	2b00      	cmp	r3, #0
 801091e:	d103      	bne.n	8010928 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	68fa      	ldr	r2, [r7, #12]
 8010924:	66da      	str	r2, [r3, #108]	; 0x6c
 8010926:	e00d      	b.n	8010944 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801092c:	61bb      	str	r3, [r7, #24]
 801092e:	e002      	b.n	8010936 <tcp_enqueue_flags+0x11e>
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	61bb      	str	r3, [r7, #24]
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d1f8      	bne.n	8010930 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	68fa      	ldr	r2, [r7, #12]
 8010942:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2200      	movs	r2, #0
 8010948:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801094c:	78fb      	ldrb	r3, [r7, #3]
 801094e:	f003 0302 	and.w	r3, r3, #2
 8010952:	2b00      	cmp	r3, #0
 8010954:	d104      	bne.n	8010960 <tcp_enqueue_flags+0x148>
 8010956:	78fb      	ldrb	r3, [r7, #3]
 8010958:	f003 0301 	and.w	r3, r3, #1
 801095c:	2b00      	cmp	r3, #0
 801095e:	d004      	beq.n	801096a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010964:	1c5a      	adds	r2, r3, #1
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801096a:	78fb      	ldrb	r3, [r7, #3]
 801096c:	f003 0301 	and.w	r3, r3, #1
 8010970:	2b00      	cmp	r3, #0
 8010972:	d006      	beq.n	8010982 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	8b5b      	ldrh	r3, [r3, #26]
 8010978:	f043 0320 	orr.w	r3, r3, #32
 801097c:	b29a      	uxth	r2, r3
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	4618      	mov	r0, r3
 8010988:	f7fb fc48 	bl	800c21c <pbuf_clen>
 801098c:	4603      	mov	r3, r0
 801098e:	461a      	mov	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010996:	4413      	add	r3, r2
 8010998:	b29a      	uxth	r2, r3
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d00e      	beq.n	80109c8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d10a      	bne.n	80109c8 <tcp_enqueue_flags+0x1b0>
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d106      	bne.n	80109c8 <tcp_enqueue_flags+0x1b0>
 80109ba:	4b06      	ldr	r3, [pc, #24]	; (80109d4 <tcp_enqueue_flags+0x1bc>)
 80109bc:	f240 4265 	movw	r2, #1125	; 0x465
 80109c0:	490b      	ldr	r1, [pc, #44]	; (80109f0 <tcp_enqueue_flags+0x1d8>)
 80109c2:	4806      	ldr	r0, [pc, #24]	; (80109dc <tcp_enqueue_flags+0x1c4>)
 80109c4:	f001 fa98 	bl	8011ef8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80109c8:	2300      	movs	r3, #0
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3720      	adds	r7, #32
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	08014eb8 	.word	0x08014eb8
 80109d8:	08015300 	.word	0x08015300
 80109dc:	08014f30 	.word	0x08014f30
 80109e0:	08015358 	.word	0x08015358
 80109e4:	08015378 	.word	0x08015378
 80109e8:	080153b4 	.word	0x080153b4
 80109ec:	080153cc 	.word	0x080153cc
 80109f0:	080153f8 	.word	0x080153f8

080109f4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80109f4:	b5b0      	push	{r4, r5, r7, lr}
 80109f6:	b08a      	sub	sp, #40	; 0x28
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d106      	bne.n	8010a10 <tcp_output+0x1c>
 8010a02:	4b8a      	ldr	r3, [pc, #552]	; (8010c2c <tcp_output+0x238>)
 8010a04:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010a08:	4989      	ldr	r1, [pc, #548]	; (8010c30 <tcp_output+0x23c>)
 8010a0a:	488a      	ldr	r0, [pc, #552]	; (8010c34 <tcp_output+0x240>)
 8010a0c:	f001 fa74 	bl	8011ef8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	7d1b      	ldrb	r3, [r3, #20]
 8010a14:	2b01      	cmp	r3, #1
 8010a16:	d106      	bne.n	8010a26 <tcp_output+0x32>
 8010a18:	4b84      	ldr	r3, [pc, #528]	; (8010c2c <tcp_output+0x238>)
 8010a1a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010a1e:	4986      	ldr	r1, [pc, #536]	; (8010c38 <tcp_output+0x244>)
 8010a20:	4884      	ldr	r0, [pc, #528]	; (8010c34 <tcp_output+0x240>)
 8010a22:	f001 fa69 	bl	8011ef8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010a26:	4b85      	ldr	r3, [pc, #532]	; (8010c3c <tcp_output+0x248>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	687a      	ldr	r2, [r7, #4]
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d101      	bne.n	8010a34 <tcp_output+0x40>
    return ERR_OK;
 8010a30:	2300      	movs	r3, #0
 8010a32:	e1ce      	b.n	8010dd2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a40:	4293      	cmp	r3, r2
 8010a42:	bf28      	it	cs
 8010a44:	4613      	movcs	r3, r2
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d10b      	bne.n	8010a6e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	8b5b      	ldrh	r3, [r3, #26]
 8010a5a:	f003 0302 	and.w	r3, r3, #2
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	f000 81aa 	beq.w	8010db8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f000 fdcb 	bl	8011600 <tcp_send_empty_ack>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	e1b1      	b.n	8010dd2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010a6e:	6879      	ldr	r1, [r7, #4]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	3304      	adds	r3, #4
 8010a74:	461a      	mov	r2, r3
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f7ff fc7c 	bl	8010374 <tcp_route>
 8010a7c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d102      	bne.n	8010a8a <tcp_output+0x96>
    return ERR_RTE;
 8010a84:	f06f 0303 	mvn.w	r3, #3
 8010a88:	e1a3      	b.n	8010dd2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d003      	beq.n	8010a98 <tcp_output+0xa4>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d111      	bne.n	8010abc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d002      	beq.n	8010aa4 <tcp_output+0xb0>
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	3304      	adds	r3, #4
 8010aa2:	e000      	b.n	8010aa6 <tcp_output+0xb2>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d102      	bne.n	8010ab4 <tcp_output+0xc0>
      return ERR_RTE;
 8010aae:	f06f 0303 	mvn.w	r3, #3
 8010ab2:	e18e      	b.n	8010dd2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	685b      	ldr	r3, [r3, #4]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7f7 fc55 	bl	8008372 <lwip_htonl>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ace:	1ad3      	subs	r3, r2, r3
 8010ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ad2:	8912      	ldrh	r2, [r2, #8]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	69ba      	ldr	r2, [r7, #24]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d227      	bcs.n	8010b2c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	69bb      	ldr	r3, [r7, #24]
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	d114      	bne.n	8010b14 <tcp_output+0x120>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d110      	bne.n	8010b14 <tcp_output+0x120>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d10b      	bne.n	8010b14 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2200      	movs	r2, #0
 8010b00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2201      	movs	r2, #1
 8010b08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2200      	movs	r2, #0
 8010b10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	8b5b      	ldrh	r3, [r3, #26]
 8010b18:	f003 0302 	and.w	r3, r3, #2
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f000 814d 	beq.w	8010dbc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 fd6c 	bl	8011600 <tcp_send_empty_ack>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	e152      	b.n	8010dd2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b38:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010b3a:	6a3b      	ldr	r3, [r7, #32]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	f000 811c 	beq.w	8010d7a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010b42:	e002      	b.n	8010b4a <tcp_output+0x156>
 8010b44:	6a3b      	ldr	r3, [r7, #32]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	623b      	str	r3, [r7, #32]
 8010b4a:	6a3b      	ldr	r3, [r7, #32]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d1f8      	bne.n	8010b44 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010b52:	e112      	b.n	8010d7a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	899b      	ldrh	r3, [r3, #12]
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7f7 fbf3 	bl	8008348 <lwip_htons>
 8010b62:	4603      	mov	r3, r0
 8010b64:	b2db      	uxtb	r3, r3
 8010b66:	f003 0304 	and.w	r3, r3, #4
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d006      	beq.n	8010b7c <tcp_output+0x188>
 8010b6e:	4b2f      	ldr	r3, [pc, #188]	; (8010c2c <tcp_output+0x238>)
 8010b70:	f240 5236 	movw	r2, #1334	; 0x536
 8010b74:	4932      	ldr	r1, [pc, #200]	; (8010c40 <tcp_output+0x24c>)
 8010b76:	482f      	ldr	r0, [pc, #188]	; (8010c34 <tcp_output+0x240>)
 8010b78:	f001 f9be 	bl	8011ef8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d01f      	beq.n	8010bc4 <tcp_output+0x1d0>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	8b5b      	ldrh	r3, [r3, #26]
 8010b88:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d119      	bne.n	8010bc4 <tcp_output+0x1d0>
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d00b      	beq.n	8010bb0 <tcp_output+0x1bc>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d110      	bne.n	8010bc4 <tcp_output+0x1d0>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ba6:	891a      	ldrh	r2, [r3, #8]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d209      	bcs.n	8010bc4 <tcp_output+0x1d0>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d004      	beq.n	8010bc4 <tcp_output+0x1d0>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bc0:	2b08      	cmp	r3, #8
 8010bc2:	d901      	bls.n	8010bc8 <tcp_output+0x1d4>
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e000      	b.n	8010bca <tcp_output+0x1d6>
 8010bc8:	2300      	movs	r3, #0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d106      	bne.n	8010bdc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	8b5b      	ldrh	r3, [r3, #26]
 8010bd2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	f000 80e4 	beq.w	8010da4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	7d1b      	ldrb	r3, [r3, #20]
 8010be0:	2b02      	cmp	r3, #2
 8010be2:	d00d      	beq.n	8010c00 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	899b      	ldrh	r3, [r3, #12]
 8010bea:	b29c      	uxth	r4, r3
 8010bec:	2010      	movs	r0, #16
 8010bee:	f7f7 fbab 	bl	8008348 <lwip_htons>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	461a      	mov	r2, r3
 8010bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf8:	68db      	ldr	r3, [r3, #12]
 8010bfa:	4322      	orrs	r2, r4
 8010bfc:	b292      	uxth	r2, r2
 8010bfe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010c00:	697a      	ldr	r2, [r7, #20]
 8010c02:	6879      	ldr	r1, [r7, #4]
 8010c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c06:	f000 f909 	bl	8010e1c <tcp_output_segment>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d016      	beq.n	8010c44 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	8b5b      	ldrh	r3, [r3, #26]
 8010c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c1e:	b29a      	uxth	r2, r3
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	835a      	strh	r2, [r3, #26]
      return err;
 8010c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c28:	e0d3      	b.n	8010dd2 <tcp_output+0x3de>
 8010c2a:	bf00      	nop
 8010c2c:	08014eb8 	.word	0x08014eb8
 8010c30:	08015420 	.word	0x08015420
 8010c34:	08014f30 	.word	0x08014f30
 8010c38:	08015438 	.word	0x08015438
 8010c3c:	240081a0 	.word	0x240081a0
 8010c40:	08015460 	.word	0x08015460
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c46:	681a      	ldr	r2, [r3, #0]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	7d1b      	ldrb	r3, [r3, #20]
 8010c50:	2b02      	cmp	r3, #2
 8010c52:	d006      	beq.n	8010c62 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	8b5b      	ldrh	r3, [r3, #26]
 8010c58:	f023 0303 	bic.w	r3, r3, #3
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7f7 fb82 	bl	8008372 <lwip_htonl>
 8010c6e:	4604      	mov	r4, r0
 8010c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c72:	891b      	ldrh	r3, [r3, #8]
 8010c74:	461d      	mov	r5, r3
 8010c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	899b      	ldrh	r3, [r3, #12]
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7f7 fb62 	bl	8008348 <lwip_htons>
 8010c84:	4603      	mov	r3, r0
 8010c86:	b2db      	uxtb	r3, r3
 8010c88:	f003 0303 	and.w	r3, r3, #3
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d001      	beq.n	8010c94 <tcp_output+0x2a0>
 8010c90:	2301      	movs	r3, #1
 8010c92:	e000      	b.n	8010c96 <tcp_output+0x2a2>
 8010c94:	2300      	movs	r3, #0
 8010c96:	442b      	add	r3, r5
 8010c98:	4423      	add	r3, r4
 8010c9a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	1ad3      	subs	r3, r2, r3
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	da02      	bge.n	8010cae <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	68ba      	ldr	r2, [r7, #8]
 8010cac:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb0:	891b      	ldrh	r3, [r3, #8]
 8010cb2:	461c      	mov	r4, r3
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	899b      	ldrh	r3, [r3, #12]
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7f7 fb43 	bl	8008348 <lwip_htons>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	f003 0303 	and.w	r3, r3, #3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d001      	beq.n	8010cd2 <tcp_output+0x2de>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e000      	b.n	8010cd4 <tcp_output+0x2e0>
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	4423      	add	r3, r4
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d049      	beq.n	8010d6e <tcp_output+0x37a>
      seg->next = NULL;
 8010cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cdc:	2200      	movs	r2, #0
 8010cde:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d105      	bne.n	8010cf4 <tcp_output+0x300>
        pcb->unacked = seg;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cec:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf0:	623b      	str	r3, [r7, #32]
 8010cf2:	e03f      	b.n	8010d74 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7f7 fb39 	bl	8008372 <lwip_htonl>
 8010d00:	4604      	mov	r4, r0
 8010d02:	6a3b      	ldr	r3, [r7, #32]
 8010d04:	68db      	ldr	r3, [r3, #12]
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7f7 fb32 	bl	8008372 <lwip_htonl>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	1ae3      	subs	r3, r4, r3
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	da24      	bge.n	8010d60 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	3370      	adds	r3, #112	; 0x70
 8010d1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010d1c:	e002      	b.n	8010d24 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010d1e:	69fb      	ldr	r3, [r7, #28]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010d24:	69fb      	ldr	r3, [r7, #28]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d011      	beq.n	8010d50 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010d2c:	69fb      	ldr	r3, [r7, #28]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7f7 fb1c 	bl	8008372 <lwip_htonl>
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7f7 fb15 	bl	8008372 <lwip_htonl>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	dbe6      	blt.n	8010d1e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010d50:	69fb      	ldr	r3, [r7, #28]
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d56:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d5c:	601a      	str	r2, [r3, #0]
 8010d5e:	e009      	b.n	8010d74 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010d60:	6a3b      	ldr	r3, [r7, #32]
 8010d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d64:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010d66:	6a3b      	ldr	r3, [r7, #32]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	623b      	str	r3, [r7, #32]
 8010d6c:	e002      	b.n	8010d74 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d70:	f7fc fc3f 	bl	800d5f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d78:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d012      	beq.n	8010da6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7f7 faf3 	bl	8008372 <lwip_htonl>
 8010d8c:	4602      	mov	r2, r0
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d92:	1ad3      	subs	r3, r2, r3
 8010d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d96:	8912      	ldrh	r2, [r2, #8]
 8010d98:	4413      	add	r3, r2
  while (seg != NULL &&
 8010d9a:	69ba      	ldr	r2, [r7, #24]
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	f4bf aed9 	bcs.w	8010b54 <tcp_output+0x160>
 8010da2:	e000      	b.n	8010da6 <tcp_output+0x3b2>
      break;
 8010da4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d108      	bne.n	8010dc0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2200      	movs	r2, #0
 8010db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010db6:	e004      	b.n	8010dc2 <tcp_output+0x3ce>
    goto output_done;
 8010db8:	bf00      	nop
 8010dba:	e002      	b.n	8010dc2 <tcp_output+0x3ce>
    goto output_done;
 8010dbc:	bf00      	nop
 8010dbe:	e000      	b.n	8010dc2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010dc0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	8b5b      	ldrh	r3, [r3, #26]
 8010dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010dd0:	2300      	movs	r3, #0
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3728      	adds	r7, #40	; 0x28
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8010dda:	bf00      	nop

08010ddc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d106      	bne.n	8010df8 <tcp_output_segment_busy+0x1c>
 8010dea:	4b09      	ldr	r3, [pc, #36]	; (8010e10 <tcp_output_segment_busy+0x34>)
 8010dec:	f240 529a 	movw	r2, #1434	; 0x59a
 8010df0:	4908      	ldr	r1, [pc, #32]	; (8010e14 <tcp_output_segment_busy+0x38>)
 8010df2:	4809      	ldr	r0, [pc, #36]	; (8010e18 <tcp_output_segment_busy+0x3c>)
 8010df4:	f001 f880 	bl	8011ef8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	7b9b      	ldrb	r3, [r3, #14]
 8010dfe:	2b01      	cmp	r3, #1
 8010e00:	d001      	beq.n	8010e06 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010e02:	2301      	movs	r3, #1
 8010e04:	e000      	b.n	8010e08 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010e06:	2300      	movs	r3, #0
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	08014eb8 	.word	0x08014eb8
 8010e14:	08015478 	.word	0x08015478
 8010e18:	08014f30 	.word	0x08014f30

08010e1c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010e1c:	b5b0      	push	{r4, r5, r7, lr}
 8010e1e:	b08c      	sub	sp, #48	; 0x30
 8010e20:	af04      	add	r7, sp, #16
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d106      	bne.n	8010e3c <tcp_output_segment+0x20>
 8010e2e:	4b63      	ldr	r3, [pc, #396]	; (8010fbc <tcp_output_segment+0x1a0>)
 8010e30:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010e34:	4962      	ldr	r1, [pc, #392]	; (8010fc0 <tcp_output_segment+0x1a4>)
 8010e36:	4863      	ldr	r0, [pc, #396]	; (8010fc4 <tcp_output_segment+0x1a8>)
 8010e38:	f001 f85e 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d106      	bne.n	8010e50 <tcp_output_segment+0x34>
 8010e42:	4b5e      	ldr	r3, [pc, #376]	; (8010fbc <tcp_output_segment+0x1a0>)
 8010e44:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010e48:	495f      	ldr	r1, [pc, #380]	; (8010fc8 <tcp_output_segment+0x1ac>)
 8010e4a:	485e      	ldr	r0, [pc, #376]	; (8010fc4 <tcp_output_segment+0x1a8>)
 8010e4c:	f001 f854 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d106      	bne.n	8010e64 <tcp_output_segment+0x48>
 8010e56:	4b59      	ldr	r3, [pc, #356]	; (8010fbc <tcp_output_segment+0x1a0>)
 8010e58:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010e5c:	495b      	ldr	r1, [pc, #364]	; (8010fcc <tcp_output_segment+0x1b0>)
 8010e5e:	4859      	ldr	r0, [pc, #356]	; (8010fc4 <tcp_output_segment+0x1a8>)
 8010e60:	f001 f84a 	bl	8011ef8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	f7ff ffb9 	bl	8010ddc <tcp_output_segment_busy>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d001      	beq.n	8010e74 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010e70:	2300      	movs	r3, #0
 8010e72:	e09f      	b.n	8010fb4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	68dc      	ldr	r4, [r3, #12]
 8010e7c:	4610      	mov	r0, r2
 8010e7e:	f7f7 fa78 	bl	8008372 <lwip_htonl>
 8010e82:	4603      	mov	r3, r0
 8010e84:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	68dc      	ldr	r4, [r3, #12]
 8010e8e:	4610      	mov	r0, r2
 8010e90:	f7f7 fa5a 	bl	8008348 <lwip_htons>
 8010e94:	4603      	mov	r3, r0
 8010e96:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e9c:	68ba      	ldr	r2, [r7, #8]
 8010e9e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010ea0:	441a      	add	r2, r3
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	3314      	adds	r3, #20
 8010eac:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	7a9b      	ldrb	r3, [r3, #10]
 8010eb2:	f003 0301 	and.w	r3, r3, #1
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d015      	beq.n	8010ee6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	3304      	adds	r3, #4
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	6879      	ldr	r1, [r7, #4]
 8010ec2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010ec6:	f7fc fe8b 	bl	800dbe0 <tcp_eff_send_mss_netif>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010ece:	8b7b      	ldrh	r3, [r7, #26]
 8010ed0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7f7 fa4c 	bl	8008372 <lwip_htonl>
 8010eda:	4602      	mov	r2, r0
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	3304      	adds	r3, #4
 8010ee4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	da02      	bge.n	8010ef6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d10c      	bne.n	8010f18 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010efe:	4b34      	ldr	r3, [pc, #208]	; (8010fd0 <tcp_output_segment+0x1b4>)
 8010f00:	681a      	ldr	r2, [r3, #0]
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7f7 fa30 	bl	8008372 <lwip_htonl>
 8010f12:	4602      	mov	r2, r0
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	68da      	ldr	r2, [r3, #12]
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	1ad3      	subs	r3, r2, r3
 8010f24:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	685b      	ldr	r3, [r3, #4]
 8010f2a:	8959      	ldrh	r1, [r3, #10]
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	8b3a      	ldrh	r2, [r7, #24]
 8010f32:	1a8a      	subs	r2, r1, r2
 8010f34:	b292      	uxth	r2, r2
 8010f36:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	8919      	ldrh	r1, [r3, #8]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	8b3a      	ldrh	r2, [r7, #24]
 8010f44:	1a8a      	subs	r2, r1, r2
 8010f46:	b292      	uxth	r2, r2
 8010f48:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	68fa      	ldr	r2, [r7, #12]
 8010f50:	68d2      	ldr	r2, [r2, #12]
 8010f52:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	741a      	strb	r2, [r3, #16]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	f103 0214 	add.w	r2, r3, #20
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	7a9b      	ldrb	r3, [r3, #10]
 8010f6c:	009b      	lsls	r3, r3, #2
 8010f6e:	f003 0304 	and.w	r3, r3, #4
 8010f72:	4413      	add	r3, r2
 8010f74:	69fa      	ldr	r2, [r7, #28]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d006      	beq.n	8010f88 <tcp_output_segment+0x16c>
 8010f7a:	4b10      	ldr	r3, [pc, #64]	; (8010fbc <tcp_output_segment+0x1a0>)
 8010f7c:	f240 621c 	movw	r2, #1564	; 0x61c
 8010f80:	4914      	ldr	r1, [pc, #80]	; (8010fd4 <tcp_output_segment+0x1b8>)
 8010f82:	4810      	ldr	r0, [pc, #64]	; (8010fc4 <tcp_output_segment+0x1a8>)
 8010f84:	f000 ffb8 	bl	8011ef8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	6858      	ldr	r0, [r3, #4]
 8010f8c:	68b9      	ldr	r1, [r7, #8]
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	1d1c      	adds	r4, r3, #4
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	7add      	ldrb	r5, [r3, #11]
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	7a9b      	ldrb	r3, [r3, #10]
 8010f9a:	687a      	ldr	r2, [r7, #4]
 8010f9c:	9202      	str	r2, [sp, #8]
 8010f9e:	2206      	movs	r2, #6
 8010fa0:	9201      	str	r2, [sp, #4]
 8010fa2:	9300      	str	r3, [sp, #0]
 8010fa4:	462b      	mov	r3, r5
 8010fa6:	4622      	mov	r2, r4
 8010fa8:	f7f8 fe62 	bl	8009c70 <ip4_output_if>
 8010fac:	4603      	mov	r3, r0
 8010fae:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3720      	adds	r7, #32
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bdb0      	pop	{r4, r5, r7, pc}
 8010fbc:	08014eb8 	.word	0x08014eb8
 8010fc0:	080154a0 	.word	0x080154a0
 8010fc4:	08014f30 	.word	0x08014f30
 8010fc8:	080154c0 	.word	0x080154c0
 8010fcc:	080154e0 	.word	0x080154e0
 8010fd0:	24008154 	.word	0x24008154
 8010fd4:	08015504 	.word	0x08015504

08010fd8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010fd8:	b5b0      	push	{r4, r5, r7, lr}
 8010fda:	b084      	sub	sp, #16
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d106      	bne.n	8010ff4 <tcp_rexmit_rto_prepare+0x1c>
 8010fe6:	4b31      	ldr	r3, [pc, #196]	; (80110ac <tcp_rexmit_rto_prepare+0xd4>)
 8010fe8:	f240 6263 	movw	r2, #1635	; 0x663
 8010fec:	4930      	ldr	r1, [pc, #192]	; (80110b0 <tcp_rexmit_rto_prepare+0xd8>)
 8010fee:	4831      	ldr	r0, [pc, #196]	; (80110b4 <tcp_rexmit_rto_prepare+0xdc>)
 8010ff0:	f000 ff82 	bl	8011ef8 <iprintf>

  if (pcb->unacked == NULL) {
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d102      	bne.n	8011002 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010ffc:	f06f 0305 	mvn.w	r3, #5
 8011000:	e050      	b.n	80110a4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011006:	60fb      	str	r3, [r7, #12]
 8011008:	e00b      	b.n	8011022 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801100a:	68f8      	ldr	r0, [r7, #12]
 801100c:	f7ff fee6 	bl	8010ddc <tcp_output_segment_busy>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	d002      	beq.n	801101c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011016:	f06f 0305 	mvn.w	r3, #5
 801101a:	e043      	b.n	80110a4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	60fb      	str	r3, [r7, #12]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d1ef      	bne.n	801100a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801102a:	68f8      	ldr	r0, [r7, #12]
 801102c:	f7ff fed6 	bl	8010ddc <tcp_output_segment_busy>
 8011030:	4603      	mov	r3, r0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d002      	beq.n	801103c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011036:	f06f 0305 	mvn.w	r3, #5
 801103a:	e033      	b.n	80110a4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2200      	movs	r2, #0
 8011050:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	8b5b      	ldrh	r3, [r3, #26]
 8011056:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801105a:	b29a      	uxth	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	68db      	ldr	r3, [r3, #12]
 8011064:	685b      	ldr	r3, [r3, #4]
 8011066:	4618      	mov	r0, r3
 8011068:	f7f7 f983 	bl	8008372 <lwip_htonl>
 801106c:	4604      	mov	r4, r0
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	891b      	ldrh	r3, [r3, #8]
 8011072:	461d      	mov	r5, r3
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	899b      	ldrh	r3, [r3, #12]
 801107a:	b29b      	uxth	r3, r3
 801107c:	4618      	mov	r0, r3
 801107e:	f7f7 f963 	bl	8008348 <lwip_htons>
 8011082:	4603      	mov	r3, r0
 8011084:	b2db      	uxtb	r3, r3
 8011086:	f003 0303 	and.w	r3, r3, #3
 801108a:	2b00      	cmp	r3, #0
 801108c:	d001      	beq.n	8011092 <tcp_rexmit_rto_prepare+0xba>
 801108e:	2301      	movs	r3, #1
 8011090:	e000      	b.n	8011094 <tcp_rexmit_rto_prepare+0xbc>
 8011092:	2300      	movs	r3, #0
 8011094:	442b      	add	r3, r5
 8011096:	18e2      	adds	r2, r4, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2200      	movs	r2, #0
 80110a0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80110a2:	2300      	movs	r3, #0
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3710      	adds	r7, #16
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bdb0      	pop	{r4, r5, r7, pc}
 80110ac:	08014eb8 	.word	0x08014eb8
 80110b0:	08015518 	.word	0x08015518
 80110b4:	08014f30 	.word	0x08014f30

080110b8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d106      	bne.n	80110d4 <tcp_rexmit_rto_commit+0x1c>
 80110c6:	4b0d      	ldr	r3, [pc, #52]	; (80110fc <tcp_rexmit_rto_commit+0x44>)
 80110c8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80110cc:	490c      	ldr	r1, [pc, #48]	; (8011100 <tcp_rexmit_rto_commit+0x48>)
 80110ce:	480d      	ldr	r0, [pc, #52]	; (8011104 <tcp_rexmit_rto_commit+0x4c>)
 80110d0:	f000 ff12 	bl	8011ef8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80110da:	2bff      	cmp	r3, #255	; 0xff
 80110dc:	d007      	beq.n	80110ee <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80110e4:	3301      	adds	r3, #1
 80110e6:	b2da      	uxtb	r2, r3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f7ff fc80 	bl	80109f4 <tcp_output>
}
 80110f4:	bf00      	nop
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	08014eb8 	.word	0x08014eb8
 8011100:	0801553c 	.word	0x0801553c
 8011104:	08014f30 	.word	0x08014f30

08011108 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d106      	bne.n	8011124 <tcp_rexmit_rto+0x1c>
 8011116:	4b0a      	ldr	r3, [pc, #40]	; (8011140 <tcp_rexmit_rto+0x38>)
 8011118:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801111c:	4909      	ldr	r1, [pc, #36]	; (8011144 <tcp_rexmit_rto+0x3c>)
 801111e:	480a      	ldr	r0, [pc, #40]	; (8011148 <tcp_rexmit_rto+0x40>)
 8011120:	f000 feea 	bl	8011ef8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f7ff ff57 	bl	8010fd8 <tcp_rexmit_rto_prepare>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	d102      	bne.n	8011136 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f7ff ffc1 	bl	80110b8 <tcp_rexmit_rto_commit>
  }
}
 8011136:	bf00      	nop
 8011138:	3708      	adds	r7, #8
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
 801113e:	bf00      	nop
 8011140:	08014eb8 	.word	0x08014eb8
 8011144:	08015560 	.word	0x08015560
 8011148:	08014f30 	.word	0x08014f30

0801114c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801114c:	b590      	push	{r4, r7, lr}
 801114e:	b085      	sub	sp, #20
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d106      	bne.n	8011168 <tcp_rexmit+0x1c>
 801115a:	4b2f      	ldr	r3, [pc, #188]	; (8011218 <tcp_rexmit+0xcc>)
 801115c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011160:	492e      	ldr	r1, [pc, #184]	; (801121c <tcp_rexmit+0xd0>)
 8011162:	482f      	ldr	r0, [pc, #188]	; (8011220 <tcp_rexmit+0xd4>)
 8011164:	f000 fec8 	bl	8011ef8 <iprintf>

  if (pcb->unacked == NULL) {
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801116c:	2b00      	cmp	r3, #0
 801116e:	d102      	bne.n	8011176 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011170:	f06f 0305 	mvn.w	r3, #5
 8011174:	e04c      	b.n	8011210 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801117a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801117c:	68b8      	ldr	r0, [r7, #8]
 801117e:	f7ff fe2d 	bl	8010ddc <tcp_output_segment_busy>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d002      	beq.n	801118e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011188:	f06f 0305 	mvn.w	r3, #5
 801118c:	e040      	b.n	8011210 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	681a      	ldr	r2, [r3, #0]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	336c      	adds	r3, #108	; 0x6c
 801119a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801119c:	e002      	b.n	80111a4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d011      	beq.n	80111d0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7f7 f8dc 	bl	8008372 <lwip_htonl>
 80111ba:	4604      	mov	r4, r0
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7f7 f8d5 	bl	8008372 <lwip_htonl>
 80111c8:	4603      	mov	r3, r0
 80111ca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	dbe6      	blt.n	801119e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	68ba      	ldr	r2, [r7, #8]
 80111dc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d103      	bne.n	80111ee <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2200      	movs	r2, #0
 80111ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80111f4:	2bff      	cmp	r3, #255	; 0xff
 80111f6:	d007      	beq.n	8011208 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80111fe:	3301      	adds	r3, #1
 8011200:	b2da      	uxtb	r2, r3
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2200      	movs	r2, #0
 801120c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801120e:	2300      	movs	r3, #0
}
 8011210:	4618      	mov	r0, r3
 8011212:	3714      	adds	r7, #20
 8011214:	46bd      	mov	sp, r7
 8011216:	bd90      	pop	{r4, r7, pc}
 8011218:	08014eb8 	.word	0x08014eb8
 801121c:	0801557c 	.word	0x0801557c
 8011220:	08014f30 	.word	0x08014f30

08011224 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d106      	bne.n	8011240 <tcp_rexmit_fast+0x1c>
 8011232:	4b2a      	ldr	r3, [pc, #168]	; (80112dc <tcp_rexmit_fast+0xb8>)
 8011234:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011238:	4929      	ldr	r1, [pc, #164]	; (80112e0 <tcp_rexmit_fast+0xbc>)
 801123a:	482a      	ldr	r0, [pc, #168]	; (80112e4 <tcp_rexmit_fast+0xc0>)
 801123c:	f000 fe5c 	bl	8011ef8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011244:	2b00      	cmp	r3, #0
 8011246:	d045      	beq.n	80112d4 <tcp_rexmit_fast+0xb0>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	8b5b      	ldrh	r3, [r3, #26]
 801124c:	f003 0304 	and.w	r3, r3, #4
 8011250:	2b00      	cmp	r3, #0
 8011252:	d13f      	bne.n	80112d4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff ff79 	bl	801114c <tcp_rexmit>
 801125a:	4603      	mov	r3, r0
 801125c:	2b00      	cmp	r3, #0
 801125e:	d139      	bne.n	80112d4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801126c:	4293      	cmp	r3, r2
 801126e:	bf28      	it	cs
 8011270:	4613      	movcs	r3, r2
 8011272:	b29b      	uxth	r3, r3
 8011274:	2b00      	cmp	r3, #0
 8011276:	da00      	bge.n	801127a <tcp_rexmit_fast+0x56>
 8011278:	3301      	adds	r3, #1
 801127a:	105b      	asrs	r3, r3, #1
 801127c:	b29a      	uxth	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801128a:	461a      	mov	r2, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011290:	005b      	lsls	r3, r3, #1
 8011292:	429a      	cmp	r2, r3
 8011294:	d206      	bcs.n	80112a4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801129a:	005b      	lsls	r3, r3, #1
 801129c:	b29a      	uxth	r2, r3
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112ae:	4619      	mov	r1, r3
 80112b0:	0049      	lsls	r1, r1, #1
 80112b2:	440b      	add	r3, r1
 80112b4:	b29b      	uxth	r3, r3
 80112b6:	4413      	add	r3, r2
 80112b8:	b29a      	uxth	r2, r3
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	8b5b      	ldrh	r3, [r3, #26]
 80112c4:	f043 0304 	orr.w	r3, r3, #4
 80112c8:	b29a      	uxth	r2, r3
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2200      	movs	r2, #0
 80112d2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80112d4:	bf00      	nop
 80112d6:	3708      	adds	r7, #8
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	08014eb8 	.word	0x08014eb8
 80112e0:	08015594 	.word	0x08015594
 80112e4:	08014f30 	.word	0x08014f30

080112e8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b086      	sub	sp, #24
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	60f8      	str	r0, [r7, #12]
 80112f0:	607b      	str	r3, [r7, #4]
 80112f2:	460b      	mov	r3, r1
 80112f4:	817b      	strh	r3, [r7, #10]
 80112f6:	4613      	mov	r3, r2
 80112f8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80112fa:	897a      	ldrh	r2, [r7, #10]
 80112fc:	893b      	ldrh	r3, [r7, #8]
 80112fe:	4413      	add	r3, r2
 8011300:	b29b      	uxth	r3, r3
 8011302:	3314      	adds	r3, #20
 8011304:	b29b      	uxth	r3, r3
 8011306:	f44f 7220 	mov.w	r2, #640	; 0x280
 801130a:	4619      	mov	r1, r3
 801130c:	2022      	movs	r0, #34	; 0x22
 801130e:	f7fa fc19 	bl	800bb44 <pbuf_alloc>
 8011312:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d04d      	beq.n	80113b6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801131a:	897b      	ldrh	r3, [r7, #10]
 801131c:	3313      	adds	r3, #19
 801131e:	697a      	ldr	r2, [r7, #20]
 8011320:	8952      	ldrh	r2, [r2, #10]
 8011322:	4293      	cmp	r3, r2
 8011324:	db06      	blt.n	8011334 <tcp_output_alloc_header_common+0x4c>
 8011326:	4b26      	ldr	r3, [pc, #152]	; (80113c0 <tcp_output_alloc_header_common+0xd8>)
 8011328:	f240 7223 	movw	r2, #1827	; 0x723
 801132c:	4925      	ldr	r1, [pc, #148]	; (80113c4 <tcp_output_alloc_header_common+0xdc>)
 801132e:	4826      	ldr	r0, [pc, #152]	; (80113c8 <tcp_output_alloc_header_common+0xe0>)
 8011330:	f000 fde2 	bl	8011ef8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801133a:	8c3b      	ldrh	r3, [r7, #32]
 801133c:	4618      	mov	r0, r3
 801133e:	f7f7 f803 	bl	8008348 <lwip_htons>
 8011342:	4603      	mov	r3, r0
 8011344:	461a      	mov	r2, r3
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801134a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801134c:	4618      	mov	r0, r3
 801134e:	f7f6 fffb 	bl	8008348 <lwip_htons>
 8011352:	4603      	mov	r3, r0
 8011354:	461a      	mov	r2, r3
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011360:	68f8      	ldr	r0, [r7, #12]
 8011362:	f7f7 f806 	bl	8008372 <lwip_htonl>
 8011366:	4602      	mov	r2, r0
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801136c:	897b      	ldrh	r3, [r7, #10]
 801136e:	089b      	lsrs	r3, r3, #2
 8011370:	b29b      	uxth	r3, r3
 8011372:	3305      	adds	r3, #5
 8011374:	b29b      	uxth	r3, r3
 8011376:	031b      	lsls	r3, r3, #12
 8011378:	b29a      	uxth	r2, r3
 801137a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801137e:	b29b      	uxth	r3, r3
 8011380:	4313      	orrs	r3, r2
 8011382:	b29b      	uxth	r3, r3
 8011384:	4618      	mov	r0, r3
 8011386:	f7f6 ffdf 	bl	8008348 <lwip_htons>
 801138a:	4603      	mov	r3, r0
 801138c:	461a      	mov	r2, r3
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011392:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011394:	4618      	mov	r0, r3
 8011396:	f7f6 ffd7 	bl	8008348 <lwip_htons>
 801139a:	4603      	mov	r3, r0
 801139c:	461a      	mov	r2, r3
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	2200      	movs	r2, #0
 80113a6:	741a      	strb	r2, [r3, #16]
 80113a8:	2200      	movs	r2, #0
 80113aa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	2200      	movs	r2, #0
 80113b0:	749a      	strb	r2, [r3, #18]
 80113b2:	2200      	movs	r2, #0
 80113b4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80113b6:	697b      	ldr	r3, [r7, #20]
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3718      	adds	r7, #24
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	08014eb8 	.word	0x08014eb8
 80113c4:	080155b4 	.word	0x080155b4
 80113c8:	08014f30 	.word	0x08014f30

080113cc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80113cc:	b5b0      	push	{r4, r5, r7, lr}
 80113ce:	b08a      	sub	sp, #40	; 0x28
 80113d0:	af04      	add	r7, sp, #16
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	607b      	str	r3, [r7, #4]
 80113d6:	460b      	mov	r3, r1
 80113d8:	817b      	strh	r3, [r7, #10]
 80113da:	4613      	mov	r3, r2
 80113dc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d106      	bne.n	80113f2 <tcp_output_alloc_header+0x26>
 80113e4:	4b15      	ldr	r3, [pc, #84]	; (801143c <tcp_output_alloc_header+0x70>)
 80113e6:	f240 7242 	movw	r2, #1858	; 0x742
 80113ea:	4915      	ldr	r1, [pc, #84]	; (8011440 <tcp_output_alloc_header+0x74>)
 80113ec:	4815      	ldr	r0, [pc, #84]	; (8011444 <tcp_output_alloc_header+0x78>)
 80113ee:	f000 fd83 	bl	8011ef8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	8adb      	ldrh	r3, [r3, #22]
 80113fa:	68fa      	ldr	r2, [r7, #12]
 80113fc:	8b12      	ldrh	r2, [r2, #24]
 80113fe:	68f9      	ldr	r1, [r7, #12]
 8011400:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011402:	893d      	ldrh	r5, [r7, #8]
 8011404:	897c      	ldrh	r4, [r7, #10]
 8011406:	9103      	str	r1, [sp, #12]
 8011408:	2110      	movs	r1, #16
 801140a:	9102      	str	r1, [sp, #8]
 801140c:	9201      	str	r2, [sp, #4]
 801140e:	9300      	str	r3, [sp, #0]
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	462a      	mov	r2, r5
 8011414:	4621      	mov	r1, r4
 8011416:	f7ff ff67 	bl	80112e8 <tcp_output_alloc_header_common>
 801141a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d006      	beq.n	8011430 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011426:	68fa      	ldr	r2, [r7, #12]
 8011428:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801142a:	441a      	add	r2, r3
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011430:	697b      	ldr	r3, [r7, #20]
}
 8011432:	4618      	mov	r0, r3
 8011434:	3718      	adds	r7, #24
 8011436:	46bd      	mov	sp, r7
 8011438:	bdb0      	pop	{r4, r5, r7, pc}
 801143a:	bf00      	nop
 801143c:	08014eb8 	.word	0x08014eb8
 8011440:	080155e4 	.word	0x080155e4
 8011444:	08014f30 	.word	0x08014f30

08011448 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b088      	sub	sp, #32
 801144c:	af00      	add	r7, sp, #0
 801144e:	60f8      	str	r0, [r7, #12]
 8011450:	60b9      	str	r1, [r7, #8]
 8011452:	4611      	mov	r1, r2
 8011454:	461a      	mov	r2, r3
 8011456:	460b      	mov	r3, r1
 8011458:	71fb      	strb	r3, [r7, #7]
 801145a:	4613      	mov	r3, r2
 801145c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801145e:	2300      	movs	r3, #0
 8011460:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d106      	bne.n	8011476 <tcp_output_fill_options+0x2e>
 8011468:	4b13      	ldr	r3, [pc, #76]	; (80114b8 <tcp_output_fill_options+0x70>)
 801146a:	f240 7256 	movw	r2, #1878	; 0x756
 801146e:	4913      	ldr	r1, [pc, #76]	; (80114bc <tcp_output_fill_options+0x74>)
 8011470:	4813      	ldr	r0, [pc, #76]	; (80114c0 <tcp_output_fill_options+0x78>)
 8011472:	f000 fd41 	bl	8011ef8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801147c:	69bb      	ldr	r3, [r7, #24]
 801147e:	3314      	adds	r3, #20
 8011480:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	f103 0214 	add.w	r2, r3, #20
 8011488:	8bfb      	ldrh	r3, [r7, #30]
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	4619      	mov	r1, r3
 801148e:	79fb      	ldrb	r3, [r7, #7]
 8011490:	009b      	lsls	r3, r3, #2
 8011492:	f003 0304 	and.w	r3, r3, #4
 8011496:	440b      	add	r3, r1
 8011498:	4413      	add	r3, r2
 801149a:	697a      	ldr	r2, [r7, #20]
 801149c:	429a      	cmp	r2, r3
 801149e:	d006      	beq.n	80114ae <tcp_output_fill_options+0x66>
 80114a0:	4b05      	ldr	r3, [pc, #20]	; (80114b8 <tcp_output_fill_options+0x70>)
 80114a2:	f240 7275 	movw	r2, #1909	; 0x775
 80114a6:	4907      	ldr	r1, [pc, #28]	; (80114c4 <tcp_output_fill_options+0x7c>)
 80114a8:	4805      	ldr	r0, [pc, #20]	; (80114c0 <tcp_output_fill_options+0x78>)
 80114aa:	f000 fd25 	bl	8011ef8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80114ae:	bf00      	nop
 80114b0:	3720      	adds	r7, #32
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	08014eb8 	.word	0x08014eb8
 80114bc:	0801560c 	.word	0x0801560c
 80114c0:	08014f30 	.word	0x08014f30
 80114c4:	08015504 	.word	0x08015504

080114c8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b08a      	sub	sp, #40	; 0x28
 80114cc:	af04      	add	r7, sp, #16
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	607a      	str	r2, [r7, #4]
 80114d4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d106      	bne.n	80114ea <tcp_output_control_segment+0x22>
 80114dc:	4b1c      	ldr	r3, [pc, #112]	; (8011550 <tcp_output_control_segment+0x88>)
 80114de:	f240 7287 	movw	r2, #1927	; 0x787
 80114e2:	491c      	ldr	r1, [pc, #112]	; (8011554 <tcp_output_control_segment+0x8c>)
 80114e4:	481c      	ldr	r0, [pc, #112]	; (8011558 <tcp_output_control_segment+0x90>)
 80114e6:	f000 fd07 	bl	8011ef8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80114ea:	683a      	ldr	r2, [r7, #0]
 80114ec:	6879      	ldr	r1, [r7, #4]
 80114ee:	68f8      	ldr	r0, [r7, #12]
 80114f0:	f7fe ff40 	bl	8010374 <tcp_route>
 80114f4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d102      	bne.n	8011502 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80114fc:	23fc      	movs	r3, #252	; 0xfc
 80114fe:	75fb      	strb	r3, [r7, #23]
 8011500:	e01c      	b.n	801153c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d006      	beq.n	8011516 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	7adb      	ldrb	r3, [r3, #11]
 801150c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	7a9b      	ldrb	r3, [r3, #10]
 8011512:	757b      	strb	r3, [r7, #21]
 8011514:	e003      	b.n	801151e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011516:	23ff      	movs	r3, #255	; 0xff
 8011518:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801151a:	2300      	movs	r3, #0
 801151c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801151e:	7dba      	ldrb	r2, [r7, #22]
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	9302      	str	r3, [sp, #8]
 8011524:	2306      	movs	r3, #6
 8011526:	9301      	str	r3, [sp, #4]
 8011528:	7d7b      	ldrb	r3, [r7, #21]
 801152a:	9300      	str	r3, [sp, #0]
 801152c:	4613      	mov	r3, r2
 801152e:	683a      	ldr	r2, [r7, #0]
 8011530:	6879      	ldr	r1, [r7, #4]
 8011532:	68b8      	ldr	r0, [r7, #8]
 8011534:	f7f8 fb9c 	bl	8009c70 <ip4_output_if>
 8011538:	4603      	mov	r3, r0
 801153a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801153c:	68b8      	ldr	r0, [r7, #8]
 801153e:	f7fa fde5 	bl	800c10c <pbuf_free>
  return err;
 8011542:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011546:	4618      	mov	r0, r3
 8011548:	3718      	adds	r7, #24
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	08014eb8 	.word	0x08014eb8
 8011554:	08015634 	.word	0x08015634
 8011558:	08014f30 	.word	0x08014f30

0801155c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801155c:	b590      	push	{r4, r7, lr}
 801155e:	b08b      	sub	sp, #44	; 0x2c
 8011560:	af04      	add	r7, sp, #16
 8011562:	60f8      	str	r0, [r7, #12]
 8011564:	60b9      	str	r1, [r7, #8]
 8011566:	607a      	str	r2, [r7, #4]
 8011568:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d106      	bne.n	801157e <tcp_rst+0x22>
 8011570:	4b1f      	ldr	r3, [pc, #124]	; (80115f0 <tcp_rst+0x94>)
 8011572:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011576:	491f      	ldr	r1, [pc, #124]	; (80115f4 <tcp_rst+0x98>)
 8011578:	481f      	ldr	r0, [pc, #124]	; (80115f8 <tcp_rst+0x9c>)
 801157a:	f000 fcbd 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011580:	2b00      	cmp	r3, #0
 8011582:	d106      	bne.n	8011592 <tcp_rst+0x36>
 8011584:	4b1a      	ldr	r3, [pc, #104]	; (80115f0 <tcp_rst+0x94>)
 8011586:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801158a:	491c      	ldr	r1, [pc, #112]	; (80115fc <tcp_rst+0xa0>)
 801158c:	481a      	ldr	r0, [pc, #104]	; (80115f8 <tcp_rst+0x9c>)
 801158e:	f000 fcb3 	bl	8011ef8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011592:	2300      	movs	r3, #0
 8011594:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011596:	f246 0308 	movw	r3, #24584	; 0x6008
 801159a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801159c:	7dfb      	ldrb	r3, [r7, #23]
 801159e:	b29c      	uxth	r4, r3
 80115a0:	68b8      	ldr	r0, [r7, #8]
 80115a2:	f7f6 fee6 	bl	8008372 <lwip_htonl>
 80115a6:	4602      	mov	r2, r0
 80115a8:	8abb      	ldrh	r3, [r7, #20]
 80115aa:	9303      	str	r3, [sp, #12]
 80115ac:	2314      	movs	r3, #20
 80115ae:	9302      	str	r3, [sp, #8]
 80115b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80115b2:	9301      	str	r3, [sp, #4]
 80115b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80115b6:	9300      	str	r3, [sp, #0]
 80115b8:	4613      	mov	r3, r2
 80115ba:	2200      	movs	r2, #0
 80115bc:	4621      	mov	r1, r4
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f7ff fe92 	bl	80112e8 <tcp_output_alloc_header_common>
 80115c4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d00c      	beq.n	80115e6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80115cc:	7dfb      	ldrb	r3, [r7, #23]
 80115ce:	2200      	movs	r2, #0
 80115d0:	6939      	ldr	r1, [r7, #16]
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f7ff ff38 	bl	8011448 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80115d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115da:	683a      	ldr	r2, [r7, #0]
 80115dc:	6939      	ldr	r1, [r7, #16]
 80115de:	68f8      	ldr	r0, [r7, #12]
 80115e0:	f7ff ff72 	bl	80114c8 <tcp_output_control_segment>
 80115e4:	e000      	b.n	80115e8 <tcp_rst+0x8c>
    return;
 80115e6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80115e8:	371c      	adds	r7, #28
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd90      	pop	{r4, r7, pc}
 80115ee:	bf00      	nop
 80115f0:	08014eb8 	.word	0x08014eb8
 80115f4:	08015660 	.word	0x08015660
 80115f8:	08014f30 	.word	0x08014f30
 80115fc:	0801567c 	.word	0x0801567c

08011600 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011600:	b590      	push	{r4, r7, lr}
 8011602:	b087      	sub	sp, #28
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011608:	2300      	movs	r3, #0
 801160a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801160c:	2300      	movs	r3, #0
 801160e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d106      	bne.n	8011624 <tcp_send_empty_ack+0x24>
 8011616:	4b28      	ldr	r3, [pc, #160]	; (80116b8 <tcp_send_empty_ack+0xb8>)
 8011618:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801161c:	4927      	ldr	r1, [pc, #156]	; (80116bc <tcp_send_empty_ack+0xbc>)
 801161e:	4828      	ldr	r0, [pc, #160]	; (80116c0 <tcp_send_empty_ack+0xc0>)
 8011620:	f000 fc6a 	bl	8011ef8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011624:	7dfb      	ldrb	r3, [r7, #23]
 8011626:	009b      	lsls	r3, r3, #2
 8011628:	b2db      	uxtb	r3, r3
 801162a:	f003 0304 	and.w	r3, r3, #4
 801162e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011630:	7d7b      	ldrb	r3, [r7, #21]
 8011632:	b29c      	uxth	r4, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011638:	4618      	mov	r0, r3
 801163a:	f7f6 fe9a 	bl	8008372 <lwip_htonl>
 801163e:	4603      	mov	r3, r0
 8011640:	2200      	movs	r2, #0
 8011642:	4621      	mov	r1, r4
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f7ff fec1 	bl	80113cc <tcp_output_alloc_header>
 801164a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d109      	bne.n	8011666 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	8b5b      	ldrh	r3, [r3, #26]
 8011656:	f043 0303 	orr.w	r3, r3, #3
 801165a:	b29a      	uxth	r2, r3
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011660:	f06f 0301 	mvn.w	r3, #1
 8011664:	e023      	b.n	80116ae <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011666:	7dbb      	ldrb	r3, [r7, #22]
 8011668:	7dfa      	ldrb	r2, [r7, #23]
 801166a:	6939      	ldr	r1, [r7, #16]
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f7ff feeb 	bl	8011448 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	3304      	adds	r3, #4
 8011678:	6939      	ldr	r1, [r7, #16]
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f7ff ff24 	bl	80114c8 <tcp_output_control_segment>
 8011680:	4603      	mov	r3, r0
 8011682:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d007      	beq.n	801169c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	8b5b      	ldrh	r3, [r3, #26]
 8011690:	f043 0303 	orr.w	r3, r3, #3
 8011694:	b29a      	uxth	r2, r3
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	835a      	strh	r2, [r3, #26]
 801169a:	e006      	b.n	80116aa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	8b5b      	ldrh	r3, [r3, #26]
 80116a0:	f023 0303 	bic.w	r3, r3, #3
 80116a4:	b29a      	uxth	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80116aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	371c      	adds	r7, #28
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd90      	pop	{r4, r7, pc}
 80116b6:	bf00      	nop
 80116b8:	08014eb8 	.word	0x08014eb8
 80116bc:	08015698 	.word	0x08015698
 80116c0:	08014f30 	.word	0x08014f30

080116c4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80116c4:	b590      	push	{r4, r7, lr}
 80116c6:	b087      	sub	sp, #28
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80116cc:	2300      	movs	r3, #0
 80116ce:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d106      	bne.n	80116e4 <tcp_keepalive+0x20>
 80116d6:	4b18      	ldr	r3, [pc, #96]	; (8011738 <tcp_keepalive+0x74>)
 80116d8:	f640 0224 	movw	r2, #2084	; 0x824
 80116dc:	4917      	ldr	r1, [pc, #92]	; (801173c <tcp_keepalive+0x78>)
 80116de:	4818      	ldr	r0, [pc, #96]	; (8011740 <tcp_keepalive+0x7c>)
 80116e0:	f000 fc0a 	bl	8011ef8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80116e4:	7dfb      	ldrb	r3, [r7, #23]
 80116e6:	b29c      	uxth	r4, r3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116ec:	3b01      	subs	r3, #1
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7f6 fe3f 	bl	8008372 <lwip_htonl>
 80116f4:	4603      	mov	r3, r0
 80116f6:	2200      	movs	r2, #0
 80116f8:	4621      	mov	r1, r4
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f7ff fe66 	bl	80113cc <tcp_output_alloc_header>
 8011700:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d102      	bne.n	801170e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011708:	f04f 33ff 	mov.w	r3, #4294967295
 801170c:	e010      	b.n	8011730 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801170e:	7dfb      	ldrb	r3, [r7, #23]
 8011710:	2200      	movs	r2, #0
 8011712:	6939      	ldr	r1, [r7, #16]
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7ff fe97 	bl	8011448 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801171a:	687a      	ldr	r2, [r7, #4]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	3304      	adds	r3, #4
 8011720:	6939      	ldr	r1, [r7, #16]
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f7ff fed0 	bl	80114c8 <tcp_output_control_segment>
 8011728:	4603      	mov	r3, r0
 801172a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801172c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011730:	4618      	mov	r0, r3
 8011732:	371c      	adds	r7, #28
 8011734:	46bd      	mov	sp, r7
 8011736:	bd90      	pop	{r4, r7, pc}
 8011738:	08014eb8 	.word	0x08014eb8
 801173c:	080156b8 	.word	0x080156b8
 8011740:	08014f30 	.word	0x08014f30

08011744 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011744:	b590      	push	{r4, r7, lr}
 8011746:	b08b      	sub	sp, #44	; 0x2c
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801174c:	2300      	movs	r3, #0
 801174e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d106      	bne.n	8011766 <tcp_zero_window_probe+0x22>
 8011758:	4b4c      	ldr	r3, [pc, #304]	; (801188c <tcp_zero_window_probe+0x148>)
 801175a:	f640 024f 	movw	r2, #2127	; 0x84f
 801175e:	494c      	ldr	r1, [pc, #304]	; (8011890 <tcp_zero_window_probe+0x14c>)
 8011760:	484c      	ldr	r0, [pc, #304]	; (8011894 <tcp_zero_window_probe+0x150>)
 8011762:	f000 fbc9 	bl	8011ef8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801176a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801176c:	6a3b      	ldr	r3, [r7, #32]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d101      	bne.n	8011776 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011772:	2300      	movs	r3, #0
 8011774:	e086      	b.n	8011884 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801177c:	2bff      	cmp	r3, #255	; 0xff
 801177e:	d007      	beq.n	8011790 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011786:	3301      	adds	r3, #1
 8011788:	b2da      	uxtb	r2, r3
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011790:	6a3b      	ldr	r3, [r7, #32]
 8011792:	68db      	ldr	r3, [r3, #12]
 8011794:	899b      	ldrh	r3, [r3, #12]
 8011796:	b29b      	uxth	r3, r3
 8011798:	4618      	mov	r0, r3
 801179a:	f7f6 fdd5 	bl	8008348 <lwip_htons>
 801179e:	4603      	mov	r3, r0
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	f003 0301 	and.w	r3, r3, #1
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d005      	beq.n	80117b6 <tcp_zero_window_probe+0x72>
 80117aa:	6a3b      	ldr	r3, [r7, #32]
 80117ac:	891b      	ldrh	r3, [r3, #8]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d101      	bne.n	80117b6 <tcp_zero_window_probe+0x72>
 80117b2:	2301      	movs	r3, #1
 80117b4:	e000      	b.n	80117b8 <tcp_zero_window_probe+0x74>
 80117b6:	2300      	movs	r3, #0
 80117b8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80117ba:	7ffb      	ldrb	r3, [r7, #31]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	bf0c      	ite	eq
 80117c0:	2301      	moveq	r3, #1
 80117c2:	2300      	movne	r3, #0
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80117c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117cc:	b299      	uxth	r1, r3
 80117ce:	6a3b      	ldr	r3, [r7, #32]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	8bba      	ldrh	r2, [r7, #28]
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7ff fdf8 	bl	80113cc <tcp_output_alloc_header>
 80117dc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80117de:	69bb      	ldr	r3, [r7, #24]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d102      	bne.n	80117ea <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80117e4:	f04f 33ff 	mov.w	r3, #4294967295
 80117e8:	e04c      	b.n	8011884 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80117ea:	69bb      	ldr	r3, [r7, #24]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80117f0:	7ffb      	ldrb	r3, [r7, #31]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d011      	beq.n	801181a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	899b      	ldrh	r3, [r3, #12]
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	b21b      	sxth	r3, r3
 80117fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011802:	b21c      	sxth	r4, r3
 8011804:	2011      	movs	r0, #17
 8011806:	f7f6 fd9f 	bl	8008348 <lwip_htons>
 801180a:	4603      	mov	r3, r0
 801180c:	b21b      	sxth	r3, r3
 801180e:	4323      	orrs	r3, r4
 8011810:	b21b      	sxth	r3, r3
 8011812:	b29a      	uxth	r2, r3
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	819a      	strh	r2, [r3, #12]
 8011818:	e010      	b.n	801183c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801181a:	69bb      	ldr	r3, [r7, #24]
 801181c:	685b      	ldr	r3, [r3, #4]
 801181e:	3314      	adds	r3, #20
 8011820:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011822:	6a3b      	ldr	r3, [r7, #32]
 8011824:	6858      	ldr	r0, [r3, #4]
 8011826:	6a3b      	ldr	r3, [r7, #32]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	891a      	ldrh	r2, [r3, #8]
 801182c:	6a3b      	ldr	r3, [r7, #32]
 801182e:	891b      	ldrh	r3, [r3, #8]
 8011830:	1ad3      	subs	r3, r2, r3
 8011832:	b29b      	uxth	r3, r3
 8011834:	2201      	movs	r2, #1
 8011836:	6939      	ldr	r1, [r7, #16]
 8011838:	f7fa fe52 	bl	800c4e0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801183c:	6a3b      	ldr	r3, [r7, #32]
 801183e:	68db      	ldr	r3, [r3, #12]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	4618      	mov	r0, r3
 8011844:	f7f6 fd95 	bl	8008372 <lwip_htonl>
 8011848:	4603      	mov	r3, r0
 801184a:	3301      	adds	r3, #1
 801184c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	1ad3      	subs	r3, r2, r3
 8011856:	2b00      	cmp	r3, #0
 8011858:	da02      	bge.n	8011860 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	68fa      	ldr	r2, [r7, #12]
 801185e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011864:	2200      	movs	r2, #0
 8011866:	69b9      	ldr	r1, [r7, #24]
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f7ff fded 	bl	8011448 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	3304      	adds	r3, #4
 8011874:	69b9      	ldr	r1, [r7, #24]
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7ff fe26 	bl	80114c8 <tcp_output_control_segment>
 801187c:	4603      	mov	r3, r0
 801187e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011880:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011884:	4618      	mov	r0, r3
 8011886:	372c      	adds	r7, #44	; 0x2c
 8011888:	46bd      	mov	sp, r7
 801188a:	bd90      	pop	{r4, r7, pc}
 801188c:	08014eb8 	.word	0x08014eb8
 8011890:	080156d4 	.word	0x080156d4
 8011894:	08014f30 	.word	0x08014f30

08011898 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80118a0:	f7fa ff0c 	bl	800c6bc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80118a4:	4b0a      	ldr	r3, [pc, #40]	; (80118d0 <tcpip_tcp_timer+0x38>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d103      	bne.n	80118b4 <tcpip_tcp_timer+0x1c>
 80118ac:	4b09      	ldr	r3, [pc, #36]	; (80118d4 <tcpip_tcp_timer+0x3c>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d005      	beq.n	80118c0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80118b4:	2200      	movs	r2, #0
 80118b6:	4908      	ldr	r1, [pc, #32]	; (80118d8 <tcpip_tcp_timer+0x40>)
 80118b8:	20fa      	movs	r0, #250	; 0xfa
 80118ba:	f000 f8f3 	bl	8011aa4 <sys_timeout>
 80118be:	e003      	b.n	80118c8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80118c0:	4b06      	ldr	r3, [pc, #24]	; (80118dc <tcpip_tcp_timer+0x44>)
 80118c2:	2200      	movs	r2, #0
 80118c4:	601a      	str	r2, [r3, #0]
  }
}
 80118c6:	bf00      	nop
 80118c8:	bf00      	nop
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	24008160 	.word	0x24008160
 80118d4:	24008164 	.word	0x24008164
 80118d8:	08011899 	.word	0x08011899
 80118dc:	240081ac 	.word	0x240081ac

080118e0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80118e4:	4b0a      	ldr	r3, [pc, #40]	; (8011910 <tcp_timer_needed+0x30>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d10f      	bne.n	801190c <tcp_timer_needed+0x2c>
 80118ec:	4b09      	ldr	r3, [pc, #36]	; (8011914 <tcp_timer_needed+0x34>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d103      	bne.n	80118fc <tcp_timer_needed+0x1c>
 80118f4:	4b08      	ldr	r3, [pc, #32]	; (8011918 <tcp_timer_needed+0x38>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d007      	beq.n	801190c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80118fc:	4b04      	ldr	r3, [pc, #16]	; (8011910 <tcp_timer_needed+0x30>)
 80118fe:	2201      	movs	r2, #1
 8011900:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011902:	2200      	movs	r2, #0
 8011904:	4905      	ldr	r1, [pc, #20]	; (801191c <tcp_timer_needed+0x3c>)
 8011906:	20fa      	movs	r0, #250	; 0xfa
 8011908:	f000 f8cc 	bl	8011aa4 <sys_timeout>
  }
}
 801190c:	bf00      	nop
 801190e:	bd80      	pop	{r7, pc}
 8011910:	240081ac 	.word	0x240081ac
 8011914:	24008160 	.word	0x24008160
 8011918:	24008164 	.word	0x24008164
 801191c:	08011899 	.word	0x08011899

08011920 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b086      	sub	sp, #24
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801192c:	2006      	movs	r0, #6
 801192e:	f7f9 fd27 	bl	800b380 <memp_malloc>
 8011932:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d109      	bne.n	801194e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d151      	bne.n	80119e4 <sys_timeout_abs+0xc4>
 8011940:	4b2a      	ldr	r3, [pc, #168]	; (80119ec <sys_timeout_abs+0xcc>)
 8011942:	22be      	movs	r2, #190	; 0xbe
 8011944:	492a      	ldr	r1, [pc, #168]	; (80119f0 <sys_timeout_abs+0xd0>)
 8011946:	482b      	ldr	r0, [pc, #172]	; (80119f4 <sys_timeout_abs+0xd4>)
 8011948:	f000 fad6 	bl	8011ef8 <iprintf>
    return;
 801194c:	e04a      	b.n	80119e4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	2200      	movs	r2, #0
 8011952:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	68ba      	ldr	r2, [r7, #8]
 8011958:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011960:	693b      	ldr	r3, [r7, #16]
 8011962:	68fa      	ldr	r2, [r7, #12]
 8011964:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011966:	4b24      	ldr	r3, [pc, #144]	; (80119f8 <sys_timeout_abs+0xd8>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d103      	bne.n	8011976 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801196e:	4a22      	ldr	r2, [pc, #136]	; (80119f8 <sys_timeout_abs+0xd8>)
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	6013      	str	r3, [r2, #0]
    return;
 8011974:	e037      	b.n	80119e6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	685a      	ldr	r2, [r3, #4]
 801197a:	4b1f      	ldr	r3, [pc, #124]	; (80119f8 <sys_timeout_abs+0xd8>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	1ad3      	subs	r3, r2, r3
 8011982:	0fdb      	lsrs	r3, r3, #31
 8011984:	f003 0301 	and.w	r3, r3, #1
 8011988:	b2db      	uxtb	r3, r3
 801198a:	2b00      	cmp	r3, #0
 801198c:	d007      	beq.n	801199e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801198e:	4b1a      	ldr	r3, [pc, #104]	; (80119f8 <sys_timeout_abs+0xd8>)
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011996:	4a18      	ldr	r2, [pc, #96]	; (80119f8 <sys_timeout_abs+0xd8>)
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	6013      	str	r3, [r2, #0]
 801199c:	e023      	b.n	80119e6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801199e:	4b16      	ldr	r3, [pc, #88]	; (80119f8 <sys_timeout_abs+0xd8>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	617b      	str	r3, [r7, #20]
 80119a4:	e01a      	b.n	80119dc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00b      	beq.n	80119c6 <sys_timeout_abs+0xa6>
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	685a      	ldr	r2, [r3, #4]
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	1ad3      	subs	r3, r2, r3
 80119ba:	0fdb      	lsrs	r3, r3, #31
 80119bc:	f003 0301 	and.w	r3, r3, #1
 80119c0:	b2db      	uxtb	r3, r3
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d007      	beq.n	80119d6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	681a      	ldr	r2, [r3, #0]
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	693a      	ldr	r2, [r7, #16]
 80119d2:	601a      	str	r2, [r3, #0]
        break;
 80119d4:	e007      	b.n	80119e6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	617b      	str	r3, [r7, #20]
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d1e1      	bne.n	80119a6 <sys_timeout_abs+0x86>
 80119e2:	e000      	b.n	80119e6 <sys_timeout_abs+0xc6>
    return;
 80119e4:	bf00      	nop
      }
    }
  }
}
 80119e6:	3718      	adds	r7, #24
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}
 80119ec:	080156f8 	.word	0x080156f8
 80119f0:	08015750 	.word	0x08015750
 80119f4:	08015790 	.word	0x08015790
 80119f8:	240081a4 	.word	0x240081a4

080119fc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b086      	sub	sp, #24
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	4798      	blx	r3

  now = sys_now();
 8011a0e:	f7f6 fabb 	bl	8007f88 <sys_now>
 8011a12:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	4b0f      	ldr	r3, [pc, #60]	; (8011a58 <lwip_cyclic_timer+0x5c>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011a20:	68fa      	ldr	r2, [r7, #12]
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	1ad3      	subs	r3, r2, r3
 8011a26:	0fdb      	lsrs	r3, r3, #31
 8011a28:	f003 0301 	and.w	r3, r3, #1
 8011a2c:	b2db      	uxtb	r3, r3
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d009      	beq.n	8011a46 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	681a      	ldr	r2, [r3, #0]
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	4413      	add	r3, r2
 8011a3a:	687a      	ldr	r2, [r7, #4]
 8011a3c:	4907      	ldr	r1, [pc, #28]	; (8011a5c <lwip_cyclic_timer+0x60>)
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7ff ff6e 	bl	8011920 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011a44:	e004      	b.n	8011a50 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011a46:	687a      	ldr	r2, [r7, #4]
 8011a48:	4904      	ldr	r1, [pc, #16]	; (8011a5c <lwip_cyclic_timer+0x60>)
 8011a4a:	68f8      	ldr	r0, [r7, #12]
 8011a4c:	f7ff ff68 	bl	8011920 <sys_timeout_abs>
}
 8011a50:	bf00      	nop
 8011a52:	3718      	adds	r7, #24
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}
 8011a58:	240081a8 	.word	0x240081a8
 8011a5c:	080119fd 	.word	0x080119fd

08011a60 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b082      	sub	sp, #8
 8011a64:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011a66:	2301      	movs	r3, #1
 8011a68:	607b      	str	r3, [r7, #4]
 8011a6a:	e00e      	b.n	8011a8a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011a6c:	4a0b      	ldr	r2, [pc, #44]	; (8011a9c <sys_timeouts_init+0x3c>)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	00db      	lsls	r3, r3, #3
 8011a78:	4a08      	ldr	r2, [pc, #32]	; (8011a9c <sys_timeouts_init+0x3c>)
 8011a7a:	4413      	add	r3, r2
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	4908      	ldr	r1, [pc, #32]	; (8011aa0 <sys_timeouts_init+0x40>)
 8011a80:	f000 f810 	bl	8011aa4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	3301      	adds	r3, #1
 8011a88:	607b      	str	r3, [r7, #4]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2b02      	cmp	r3, #2
 8011a8e:	d9ed      	bls.n	8011a6c <sys_timeouts_init+0xc>
  }
}
 8011a90:	bf00      	nop
 8011a92:	bf00      	nop
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	08015c9c 	.word	0x08015c9c
 8011aa0:	080119fd 	.word	0x080119fd

08011aa4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b086      	sub	sp, #24
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	60f8      	str	r0, [r7, #12]
 8011aac:	60b9      	str	r1, [r7, #8]
 8011aae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011ab6:	d306      	bcc.n	8011ac6 <sys_timeout+0x22>
 8011ab8:	4b0a      	ldr	r3, [pc, #40]	; (8011ae4 <sys_timeout+0x40>)
 8011aba:	f240 1229 	movw	r2, #297	; 0x129
 8011abe:	490a      	ldr	r1, [pc, #40]	; (8011ae8 <sys_timeout+0x44>)
 8011ac0:	480a      	ldr	r0, [pc, #40]	; (8011aec <sys_timeout+0x48>)
 8011ac2:	f000 fa19 	bl	8011ef8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011ac6:	f7f6 fa5f 	bl	8007f88 <sys_now>
 8011aca:	4602      	mov	r2, r0
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	4413      	add	r3, r2
 8011ad0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	68b9      	ldr	r1, [r7, #8]
 8011ad6:	6978      	ldr	r0, [r7, #20]
 8011ad8:	f7ff ff22 	bl	8011920 <sys_timeout_abs>
#endif
}
 8011adc:	bf00      	nop
 8011ade:	3718      	adds	r7, #24
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	080156f8 	.word	0x080156f8
 8011ae8:	080157b8 	.word	0x080157b8
 8011aec:	08015790 	.word	0x08015790

08011af0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011af4:	f000 fa18 	bl	8011f28 <rand>
 8011af8:	4603      	mov	r3, r0
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	4b01      	ldr	r3, [pc, #4]	; (8011b10 <udp_init+0x20>)
 8011b0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011b0c:	bf00      	nop
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	2400002c 	.word	0x2400002c

08011b14 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	4613      	mov	r3, r2
 8011b20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d105      	bne.n	8011b34 <udp_input_local_match+0x20>
 8011b28:	4b27      	ldr	r3, [pc, #156]	; (8011bc8 <udp_input_local_match+0xb4>)
 8011b2a:	2287      	movs	r2, #135	; 0x87
 8011b2c:	4927      	ldr	r1, [pc, #156]	; (8011bcc <udp_input_local_match+0xb8>)
 8011b2e:	4828      	ldr	r0, [pc, #160]	; (8011bd0 <udp_input_local_match+0xbc>)
 8011b30:	f000 f9e2 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d105      	bne.n	8011b46 <udp_input_local_match+0x32>
 8011b3a:	4b23      	ldr	r3, [pc, #140]	; (8011bc8 <udp_input_local_match+0xb4>)
 8011b3c:	2288      	movs	r2, #136	; 0x88
 8011b3e:	4925      	ldr	r1, [pc, #148]	; (8011bd4 <udp_input_local_match+0xc0>)
 8011b40:	4823      	ldr	r0, [pc, #140]	; (8011bd0 <udp_input_local_match+0xbc>)
 8011b42:	f000 f9d9 	bl	8011ef8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	7a1b      	ldrb	r3, [r3, #8]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d00b      	beq.n	8011b66 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	7a1a      	ldrb	r2, [r3, #8]
 8011b52:	4b21      	ldr	r3, [pc, #132]	; (8011bd8 <udp_input_local_match+0xc4>)
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d001      	beq.n	8011b66 <udp_input_local_match+0x52>
    return 0;
 8011b62:	2300      	movs	r3, #0
 8011b64:	e02b      	b.n	8011bbe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011b66:	79fb      	ldrb	r3, [r7, #7]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d018      	beq.n	8011b9e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d013      	beq.n	8011b9a <udp_input_local_match+0x86>
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d00f      	beq.n	8011b9a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011b7a:	4b17      	ldr	r3, [pc, #92]	; (8011bd8 <udp_input_local_match+0xc4>)
 8011b7c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b82:	d00a      	beq.n	8011b9a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	681a      	ldr	r2, [r3, #0]
 8011b88:	4b13      	ldr	r3, [pc, #76]	; (8011bd8 <udp_input_local_match+0xc4>)
 8011b8a:	695b      	ldr	r3, [r3, #20]
 8011b8c:	405a      	eors	r2, r3
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	3308      	adds	r3, #8
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d110      	bne.n	8011bbc <udp_input_local_match+0xa8>
          return 1;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	e00f      	b.n	8011bbe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d009      	beq.n	8011bb8 <udp_input_local_match+0xa4>
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d005      	beq.n	8011bb8 <udp_input_local_match+0xa4>
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	681a      	ldr	r2, [r3, #0]
 8011bb0:	4b09      	ldr	r3, [pc, #36]	; (8011bd8 <udp_input_local_match+0xc4>)
 8011bb2:	695b      	ldr	r3, [r3, #20]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d101      	bne.n	8011bbc <udp_input_local_match+0xa8>
        return 1;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e000      	b.n	8011bbe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011bbc:	2300      	movs	r3, #0
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3710      	adds	r7, #16
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	08015804 	.word	0x08015804
 8011bcc:	08015858 	.word	0x08015858
 8011bd0:	0801587c 	.word	0x0801587c
 8011bd4:	080158a4 	.word	0x080158a4
 8011bd8:	2400522c 	.word	0x2400522c

08011bdc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011bdc:	b590      	push	{r4, r7, lr}
 8011bde:	b08d      	sub	sp, #52	; 0x34
 8011be0:	af02      	add	r7, sp, #8
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011be6:	2300      	movs	r3, #0
 8011be8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d105      	bne.n	8011bfc <udp_input+0x20>
 8011bf0:	4b7c      	ldr	r3, [pc, #496]	; (8011de4 <udp_input+0x208>)
 8011bf2:	22cf      	movs	r2, #207	; 0xcf
 8011bf4:	497c      	ldr	r1, [pc, #496]	; (8011de8 <udp_input+0x20c>)
 8011bf6:	487d      	ldr	r0, [pc, #500]	; (8011dec <udp_input+0x210>)
 8011bf8:	f000 f97e 	bl	8011ef8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d105      	bne.n	8011c0e <udp_input+0x32>
 8011c02:	4b78      	ldr	r3, [pc, #480]	; (8011de4 <udp_input+0x208>)
 8011c04:	22d0      	movs	r2, #208	; 0xd0
 8011c06:	497a      	ldr	r1, [pc, #488]	; (8011df0 <udp_input+0x214>)
 8011c08:	4878      	ldr	r0, [pc, #480]	; (8011dec <udp_input+0x210>)
 8011c0a:	f000 f975 	bl	8011ef8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	895b      	ldrh	r3, [r3, #10]
 8011c12:	2b07      	cmp	r3, #7
 8011c14:	d803      	bhi.n	8011c1e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f7fa fa78 	bl	800c10c <pbuf_free>
    goto end;
 8011c1c:	e0de      	b.n	8011ddc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011c24:	4b73      	ldr	r3, [pc, #460]	; (8011df4 <udp_input+0x218>)
 8011c26:	695b      	ldr	r3, [r3, #20]
 8011c28:	4a72      	ldr	r2, [pc, #456]	; (8011df4 <udp_input+0x218>)
 8011c2a:	6812      	ldr	r2, [r2, #0]
 8011c2c:	4611      	mov	r1, r2
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7f8 f8f6 	bl	8009e20 <ip4_addr_isbroadcast_u32>
 8011c34:	4603      	mov	r3, r0
 8011c36:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	881b      	ldrh	r3, [r3, #0]
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7f6 fb82 	bl	8008348 <lwip_htons>
 8011c44:	4603      	mov	r3, r0
 8011c46:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	885b      	ldrh	r3, [r3, #2]
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7f6 fb7a 	bl	8008348 <lwip_htons>
 8011c54:	4603      	mov	r3, r0
 8011c56:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011c60:	2300      	movs	r3, #0
 8011c62:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c64:	4b64      	ldr	r3, [pc, #400]	; (8011df8 <udp_input+0x21c>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	627b      	str	r3, [r7, #36]	; 0x24
 8011c6a:	e054      	b.n	8011d16 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6e:	8a5b      	ldrh	r3, [r3, #18]
 8011c70:	89fa      	ldrh	r2, [r7, #14]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d14a      	bne.n	8011d0c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011c76:	7cfb      	ldrb	r3, [r7, #19]
 8011c78:	461a      	mov	r2, r3
 8011c7a:	6839      	ldr	r1, [r7, #0]
 8011c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c7e:	f7ff ff49 	bl	8011b14 <udp_input_local_match>
 8011c82:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d041      	beq.n	8011d0c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8a:	7c1b      	ldrb	r3, [r3, #16]
 8011c8c:	f003 0304 	and.w	r3, r3, #4
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d11d      	bne.n	8011cd0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011c94:	69fb      	ldr	r3, [r7, #28]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d102      	bne.n	8011ca0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9c:	61fb      	str	r3, [r7, #28]
 8011c9e:	e017      	b.n	8011cd0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011ca0:	7cfb      	ldrb	r3, [r7, #19]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d014      	beq.n	8011cd0 <udp_input+0xf4>
 8011ca6:	4b53      	ldr	r3, [pc, #332]	; (8011df4 <udp_input+0x218>)
 8011ca8:	695b      	ldr	r3, [r3, #20]
 8011caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cae:	d10f      	bne.n	8011cd0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	3304      	adds	r3, #4
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d008      	beq.n	8011cd0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc0:	681a      	ldr	r2, [r3, #0]
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	3304      	adds	r3, #4
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d101      	bne.n	8011cd0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd2:	8a9b      	ldrh	r3, [r3, #20]
 8011cd4:	8a3a      	ldrh	r2, [r7, #16]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d118      	bne.n	8011d0c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cdc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d005      	beq.n	8011cee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce4:	685a      	ldr	r2, [r3, #4]
 8011ce6:	4b43      	ldr	r3, [pc, #268]	; (8011df4 <udp_input+0x218>)
 8011ce8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d10e      	bne.n	8011d0c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011cee:	6a3b      	ldr	r3, [r7, #32]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d014      	beq.n	8011d1e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf6:	68da      	ldr	r2, [r3, #12]
 8011cf8:	6a3b      	ldr	r3, [r7, #32]
 8011cfa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011cfc:	4b3e      	ldr	r3, [pc, #248]	; (8011df8 <udp_input+0x21c>)
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d02:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011d04:	4a3c      	ldr	r2, [pc, #240]	; (8011df8 <udp_input+0x21c>)
 8011d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d08:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011d0a:	e008      	b.n	8011d1e <udp_input+0x142>
      }
    }

    prev = pcb;
 8011d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d12:	68db      	ldr	r3, [r3, #12]
 8011d14:	627b      	str	r3, [r7, #36]	; 0x24
 8011d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d1a7      	bne.n	8011c6c <udp_input+0x90>
 8011d1c:	e000      	b.n	8011d20 <udp_input+0x144>
        break;
 8011d1e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d101      	bne.n	8011d2a <udp_input+0x14e>
    pcb = uncon_pcb;
 8011d26:	69fb      	ldr	r3, [r7, #28]
 8011d28:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d002      	beq.n	8011d36 <udp_input+0x15a>
    for_us = 1;
 8011d30:	2301      	movs	r3, #1
 8011d32:	76fb      	strb	r3, [r7, #27]
 8011d34:	e00a      	b.n	8011d4c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	3304      	adds	r3, #4
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	4b2d      	ldr	r3, [pc, #180]	; (8011df4 <udp_input+0x218>)
 8011d3e:	695b      	ldr	r3, [r3, #20]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	bf0c      	ite	eq
 8011d44:	2301      	moveq	r3, #1
 8011d46:	2300      	movne	r3, #0
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011d4c:	7efb      	ldrb	r3, [r7, #27]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d041      	beq.n	8011dd6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011d52:	2108      	movs	r1, #8
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f7fa f953 	bl	800c000 <pbuf_remove_header>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d00a      	beq.n	8011d76 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011d60:	4b20      	ldr	r3, [pc, #128]	; (8011de4 <udp_input+0x208>)
 8011d62:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011d66:	4925      	ldr	r1, [pc, #148]	; (8011dfc <udp_input+0x220>)
 8011d68:	4820      	ldr	r0, [pc, #128]	; (8011dec <udp_input+0x210>)
 8011d6a:	f000 f8c5 	bl	8011ef8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f7fa f9cc 	bl	800c10c <pbuf_free>
      goto end;
 8011d74:	e032      	b.n	8011ddc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d012      	beq.n	8011da2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7e:	699b      	ldr	r3, [r3, #24]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d00a      	beq.n	8011d9a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d86:	699c      	ldr	r4, [r3, #24]
 8011d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8a:	69d8      	ldr	r0, [r3, #28]
 8011d8c:	8a3b      	ldrh	r3, [r7, #16]
 8011d8e:	9300      	str	r3, [sp, #0]
 8011d90:	4b1b      	ldr	r3, [pc, #108]	; (8011e00 <udp_input+0x224>)
 8011d92:	687a      	ldr	r2, [r7, #4]
 8011d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011d98:	e021      	b.n	8011dde <udp_input+0x202>
        pbuf_free(p);
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f7fa f9b6 	bl	800c10c <pbuf_free>
        goto end;
 8011da0:	e01c      	b.n	8011ddc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011da2:	7cfb      	ldrb	r3, [r7, #19]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d112      	bne.n	8011dce <udp_input+0x1f2>
 8011da8:	4b12      	ldr	r3, [pc, #72]	; (8011df4 <udp_input+0x218>)
 8011daa:	695b      	ldr	r3, [r3, #20]
 8011dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011db0:	2be0      	cmp	r3, #224	; 0xe0
 8011db2:	d00c      	beq.n	8011dce <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011db4:	4b0f      	ldr	r3, [pc, #60]	; (8011df4 <udp_input+0x218>)
 8011db6:	899b      	ldrh	r3, [r3, #12]
 8011db8:	3308      	adds	r3, #8
 8011dba:	b29b      	uxth	r3, r3
 8011dbc:	b21b      	sxth	r3, r3
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f7fa f990 	bl	800c0e6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011dc6:	2103      	movs	r1, #3
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7f7 fc2d 	bl	8009628 <icmp_dest_unreach>
      pbuf_free(p);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f7fa f99c 	bl	800c10c <pbuf_free>
  return;
 8011dd4:	e003      	b.n	8011dde <udp_input+0x202>
    pbuf_free(p);
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f7fa f998 	bl	800c10c <pbuf_free>
  return;
 8011ddc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011dde:	372c      	adds	r7, #44	; 0x2c
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd90      	pop	{r4, r7, pc}
 8011de4:	08015804 	.word	0x08015804
 8011de8:	080158cc 	.word	0x080158cc
 8011dec:	0801587c 	.word	0x0801587c
 8011df0:	080158e4 	.word	0x080158e4
 8011df4:	2400522c 	.word	0x2400522c
 8011df8:	240081b0 	.word	0x240081b0
 8011dfc:	08015900 	.word	0x08015900
 8011e00:	2400523c 	.word	0x2400523c

08011e04 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011e04:	b480      	push	{r7}
 8011e06:	b085      	sub	sp, #20
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d01e      	beq.n	8011e52 <udp_netif_ip_addr_changed+0x4e>
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d01a      	beq.n	8011e52 <udp_netif_ip_addr_changed+0x4e>
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d017      	beq.n	8011e52 <udp_netif_ip_addr_changed+0x4e>
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d013      	beq.n	8011e52 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e2a:	4b0d      	ldr	r3, [pc, #52]	; (8011e60 <udp_netif_ip_addr_changed+0x5c>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	60fb      	str	r3, [r7, #12]
 8011e30:	e00c      	b.n	8011e4c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d103      	bne.n	8011e46 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	68db      	ldr	r3, [r3, #12]
 8011e4a:	60fb      	str	r3, [r7, #12]
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d1ef      	bne.n	8011e32 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011e52:	bf00      	nop
 8011e54:	3714      	adds	r7, #20
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop
 8011e60:	240081b0 	.word	0x240081b0

08011e64 <__libc_init_array>:
 8011e64:	b570      	push	{r4, r5, r6, lr}
 8011e66:	4d0d      	ldr	r5, [pc, #52]	; (8011e9c <__libc_init_array+0x38>)
 8011e68:	4c0d      	ldr	r4, [pc, #52]	; (8011ea0 <__libc_init_array+0x3c>)
 8011e6a:	1b64      	subs	r4, r4, r5
 8011e6c:	10a4      	asrs	r4, r4, #2
 8011e6e:	2600      	movs	r6, #0
 8011e70:	42a6      	cmp	r6, r4
 8011e72:	d109      	bne.n	8011e88 <__libc_init_array+0x24>
 8011e74:	4d0b      	ldr	r5, [pc, #44]	; (8011ea4 <__libc_init_array+0x40>)
 8011e76:	4c0c      	ldr	r4, [pc, #48]	; (8011ea8 <__libc_init_array+0x44>)
 8011e78:	f001 f88e 	bl	8012f98 <_init>
 8011e7c:	1b64      	subs	r4, r4, r5
 8011e7e:	10a4      	asrs	r4, r4, #2
 8011e80:	2600      	movs	r6, #0
 8011e82:	42a6      	cmp	r6, r4
 8011e84:	d105      	bne.n	8011e92 <__libc_init_array+0x2e>
 8011e86:	bd70      	pop	{r4, r5, r6, pc}
 8011e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e8c:	4798      	blx	r3
 8011e8e:	3601      	adds	r6, #1
 8011e90:	e7ee      	b.n	8011e70 <__libc_init_array+0xc>
 8011e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e96:	4798      	blx	r3
 8011e98:	3601      	adds	r6, #1
 8011e9a:	e7f2      	b.n	8011e82 <__libc_init_array+0x1e>
 8011e9c:	08015e04 	.word	0x08015e04
 8011ea0:	08015e04 	.word	0x08015e04
 8011ea4:	08015e04 	.word	0x08015e04
 8011ea8:	08015e08 	.word	0x08015e08

08011eac <memcmp>:
 8011eac:	b510      	push	{r4, lr}
 8011eae:	3901      	subs	r1, #1
 8011eb0:	4402      	add	r2, r0
 8011eb2:	4290      	cmp	r0, r2
 8011eb4:	d101      	bne.n	8011eba <memcmp+0xe>
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	e005      	b.n	8011ec6 <memcmp+0x1a>
 8011eba:	7803      	ldrb	r3, [r0, #0]
 8011ebc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011ec0:	42a3      	cmp	r3, r4
 8011ec2:	d001      	beq.n	8011ec8 <memcmp+0x1c>
 8011ec4:	1b18      	subs	r0, r3, r4
 8011ec6:	bd10      	pop	{r4, pc}
 8011ec8:	3001      	adds	r0, #1
 8011eca:	e7f2      	b.n	8011eb2 <memcmp+0x6>

08011ecc <memcpy>:
 8011ecc:	440a      	add	r2, r1
 8011ece:	4291      	cmp	r1, r2
 8011ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ed4:	d100      	bne.n	8011ed8 <memcpy+0xc>
 8011ed6:	4770      	bx	lr
 8011ed8:	b510      	push	{r4, lr}
 8011eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ee2:	4291      	cmp	r1, r2
 8011ee4:	d1f9      	bne.n	8011eda <memcpy+0xe>
 8011ee6:	bd10      	pop	{r4, pc}

08011ee8 <memset>:
 8011ee8:	4402      	add	r2, r0
 8011eea:	4603      	mov	r3, r0
 8011eec:	4293      	cmp	r3, r2
 8011eee:	d100      	bne.n	8011ef2 <memset+0xa>
 8011ef0:	4770      	bx	lr
 8011ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8011ef6:	e7f9      	b.n	8011eec <memset+0x4>

08011ef8 <iprintf>:
 8011ef8:	b40f      	push	{r0, r1, r2, r3}
 8011efa:	4b0a      	ldr	r3, [pc, #40]	; (8011f24 <iprintf+0x2c>)
 8011efc:	b513      	push	{r0, r1, r4, lr}
 8011efe:	681c      	ldr	r4, [r3, #0]
 8011f00:	b124      	cbz	r4, 8011f0c <iprintf+0x14>
 8011f02:	69a3      	ldr	r3, [r4, #24]
 8011f04:	b913      	cbnz	r3, 8011f0c <iprintf+0x14>
 8011f06:	4620      	mov	r0, r4
 8011f08:	f000 f8c2 	bl	8012090 <__sinit>
 8011f0c:	ab05      	add	r3, sp, #20
 8011f0e:	9a04      	ldr	r2, [sp, #16]
 8011f10:	68a1      	ldr	r1, [r4, #8]
 8011f12:	9301      	str	r3, [sp, #4]
 8011f14:	4620      	mov	r0, r4
 8011f16:	f000 fa7f 	bl	8012418 <_vfiprintf_r>
 8011f1a:	b002      	add	sp, #8
 8011f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f20:	b004      	add	sp, #16
 8011f22:	4770      	bx	lr
 8011f24:	24000030 	.word	0x24000030

08011f28 <rand>:
 8011f28:	4b16      	ldr	r3, [pc, #88]	; (8011f84 <rand+0x5c>)
 8011f2a:	b510      	push	{r4, lr}
 8011f2c:	681c      	ldr	r4, [r3, #0]
 8011f2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011f30:	b9b3      	cbnz	r3, 8011f60 <rand+0x38>
 8011f32:	2018      	movs	r0, #24
 8011f34:	f000 f95e 	bl	80121f4 <malloc>
 8011f38:	63a0      	str	r0, [r4, #56]	; 0x38
 8011f3a:	b928      	cbnz	r0, 8011f48 <rand+0x20>
 8011f3c:	4602      	mov	r2, r0
 8011f3e:	4b12      	ldr	r3, [pc, #72]	; (8011f88 <rand+0x60>)
 8011f40:	4812      	ldr	r0, [pc, #72]	; (8011f8c <rand+0x64>)
 8011f42:	214e      	movs	r1, #78	; 0x4e
 8011f44:	f000 f82e 	bl	8011fa4 <__assert_func>
 8011f48:	4a11      	ldr	r2, [pc, #68]	; (8011f90 <rand+0x68>)
 8011f4a:	4b12      	ldr	r3, [pc, #72]	; (8011f94 <rand+0x6c>)
 8011f4c:	e9c0 2300 	strd	r2, r3, [r0]
 8011f50:	4b11      	ldr	r3, [pc, #68]	; (8011f98 <rand+0x70>)
 8011f52:	6083      	str	r3, [r0, #8]
 8011f54:	230b      	movs	r3, #11
 8011f56:	8183      	strh	r3, [r0, #12]
 8011f58:	2201      	movs	r2, #1
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011f60:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8011f62:	4a0e      	ldr	r2, [pc, #56]	; (8011f9c <rand+0x74>)
 8011f64:	6920      	ldr	r0, [r4, #16]
 8011f66:	6963      	ldr	r3, [r4, #20]
 8011f68:	490d      	ldr	r1, [pc, #52]	; (8011fa0 <rand+0x78>)
 8011f6a:	4342      	muls	r2, r0
 8011f6c:	fb01 2203 	mla	r2, r1, r3, r2
 8011f70:	fba0 0101 	umull	r0, r1, r0, r1
 8011f74:	1c43      	adds	r3, r0, #1
 8011f76:	eb42 0001 	adc.w	r0, r2, r1
 8011f7a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8011f7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011f82:	bd10      	pop	{r4, pc}
 8011f84:	24000030 	.word	0x24000030
 8011f88:	08015cb8 	.word	0x08015cb8
 8011f8c:	08015ccf 	.word	0x08015ccf
 8011f90:	abcd330e 	.word	0xabcd330e
 8011f94:	e66d1234 	.word	0xe66d1234
 8011f98:	0005deec 	.word	0x0005deec
 8011f9c:	5851f42d 	.word	0x5851f42d
 8011fa0:	4c957f2d 	.word	0x4c957f2d

08011fa4 <__assert_func>:
 8011fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fa6:	4614      	mov	r4, r2
 8011fa8:	461a      	mov	r2, r3
 8011faa:	4b09      	ldr	r3, [pc, #36]	; (8011fd0 <__assert_func+0x2c>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4605      	mov	r5, r0
 8011fb0:	68d8      	ldr	r0, [r3, #12]
 8011fb2:	b14c      	cbz	r4, 8011fc8 <__assert_func+0x24>
 8011fb4:	4b07      	ldr	r3, [pc, #28]	; (8011fd4 <__assert_func+0x30>)
 8011fb6:	9100      	str	r1, [sp, #0]
 8011fb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fbc:	4906      	ldr	r1, [pc, #24]	; (8011fd8 <__assert_func+0x34>)
 8011fbe:	462b      	mov	r3, r5
 8011fc0:	f000 f8e4 	bl	801218c <fiprintf>
 8011fc4:	f000 fe12 	bl	8012bec <abort>
 8011fc8:	4b04      	ldr	r3, [pc, #16]	; (8011fdc <__assert_func+0x38>)
 8011fca:	461c      	mov	r4, r3
 8011fcc:	e7f3      	b.n	8011fb6 <__assert_func+0x12>
 8011fce:	bf00      	nop
 8011fd0:	24000030 	.word	0x24000030
 8011fd4:	08015d2a 	.word	0x08015d2a
 8011fd8:	08015d37 	.word	0x08015d37
 8011fdc:	08015d65 	.word	0x08015d65

08011fe0 <std>:
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	b510      	push	{r4, lr}
 8011fe4:	4604      	mov	r4, r0
 8011fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8011fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011fee:	6083      	str	r3, [r0, #8]
 8011ff0:	8181      	strh	r1, [r0, #12]
 8011ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8011ff4:	81c2      	strh	r2, [r0, #14]
 8011ff6:	6183      	str	r3, [r0, #24]
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	2208      	movs	r2, #8
 8011ffc:	305c      	adds	r0, #92	; 0x5c
 8011ffe:	f7ff ff73 	bl	8011ee8 <memset>
 8012002:	4b05      	ldr	r3, [pc, #20]	; (8012018 <std+0x38>)
 8012004:	6263      	str	r3, [r4, #36]	; 0x24
 8012006:	4b05      	ldr	r3, [pc, #20]	; (801201c <std+0x3c>)
 8012008:	62a3      	str	r3, [r4, #40]	; 0x28
 801200a:	4b05      	ldr	r3, [pc, #20]	; (8012020 <std+0x40>)
 801200c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801200e:	4b05      	ldr	r3, [pc, #20]	; (8012024 <std+0x44>)
 8012010:	6224      	str	r4, [r4, #32]
 8012012:	6323      	str	r3, [r4, #48]	; 0x30
 8012014:	bd10      	pop	{r4, pc}
 8012016:	bf00      	nop
 8012018:	080129c1 	.word	0x080129c1
 801201c:	080129e3 	.word	0x080129e3
 8012020:	08012a1b 	.word	0x08012a1b
 8012024:	08012a3f 	.word	0x08012a3f

08012028 <_cleanup_r>:
 8012028:	4901      	ldr	r1, [pc, #4]	; (8012030 <_cleanup_r+0x8>)
 801202a:	f000 b8c1 	b.w	80121b0 <_fwalk_reent>
 801202e:	bf00      	nop
 8012030:	08012d29 	.word	0x08012d29

08012034 <__sfmoreglue>:
 8012034:	b570      	push	{r4, r5, r6, lr}
 8012036:	2268      	movs	r2, #104	; 0x68
 8012038:	1e4d      	subs	r5, r1, #1
 801203a:	4355      	muls	r5, r2
 801203c:	460e      	mov	r6, r1
 801203e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012042:	f000 f94b 	bl	80122dc <_malloc_r>
 8012046:	4604      	mov	r4, r0
 8012048:	b140      	cbz	r0, 801205c <__sfmoreglue+0x28>
 801204a:	2100      	movs	r1, #0
 801204c:	e9c0 1600 	strd	r1, r6, [r0]
 8012050:	300c      	adds	r0, #12
 8012052:	60a0      	str	r0, [r4, #8]
 8012054:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012058:	f7ff ff46 	bl	8011ee8 <memset>
 801205c:	4620      	mov	r0, r4
 801205e:	bd70      	pop	{r4, r5, r6, pc}

08012060 <__sfp_lock_acquire>:
 8012060:	4801      	ldr	r0, [pc, #4]	; (8012068 <__sfp_lock_acquire+0x8>)
 8012062:	f000 b8c5 	b.w	80121f0 <__retarget_lock_acquire_recursive>
 8012066:	bf00      	nop
 8012068:	240081b9 	.word	0x240081b9

0801206c <__sfp_lock_release>:
 801206c:	4801      	ldr	r0, [pc, #4]	; (8012074 <__sfp_lock_release+0x8>)
 801206e:	f000 b8c0 	b.w	80121f2 <__retarget_lock_release_recursive>
 8012072:	bf00      	nop
 8012074:	240081b9 	.word	0x240081b9

08012078 <__sinit_lock_acquire>:
 8012078:	4801      	ldr	r0, [pc, #4]	; (8012080 <__sinit_lock_acquire+0x8>)
 801207a:	f000 b8b9 	b.w	80121f0 <__retarget_lock_acquire_recursive>
 801207e:	bf00      	nop
 8012080:	240081ba 	.word	0x240081ba

08012084 <__sinit_lock_release>:
 8012084:	4801      	ldr	r0, [pc, #4]	; (801208c <__sinit_lock_release+0x8>)
 8012086:	f000 b8b4 	b.w	80121f2 <__retarget_lock_release_recursive>
 801208a:	bf00      	nop
 801208c:	240081ba 	.word	0x240081ba

08012090 <__sinit>:
 8012090:	b510      	push	{r4, lr}
 8012092:	4604      	mov	r4, r0
 8012094:	f7ff fff0 	bl	8012078 <__sinit_lock_acquire>
 8012098:	69a3      	ldr	r3, [r4, #24]
 801209a:	b11b      	cbz	r3, 80120a4 <__sinit+0x14>
 801209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120a0:	f7ff bff0 	b.w	8012084 <__sinit_lock_release>
 80120a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80120a8:	6523      	str	r3, [r4, #80]	; 0x50
 80120aa:	4b13      	ldr	r3, [pc, #76]	; (80120f8 <__sinit+0x68>)
 80120ac:	4a13      	ldr	r2, [pc, #76]	; (80120fc <__sinit+0x6c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80120b2:	42a3      	cmp	r3, r4
 80120b4:	bf04      	itt	eq
 80120b6:	2301      	moveq	r3, #1
 80120b8:	61a3      	streq	r3, [r4, #24]
 80120ba:	4620      	mov	r0, r4
 80120bc:	f000 f820 	bl	8012100 <__sfp>
 80120c0:	6060      	str	r0, [r4, #4]
 80120c2:	4620      	mov	r0, r4
 80120c4:	f000 f81c 	bl	8012100 <__sfp>
 80120c8:	60a0      	str	r0, [r4, #8]
 80120ca:	4620      	mov	r0, r4
 80120cc:	f000 f818 	bl	8012100 <__sfp>
 80120d0:	2200      	movs	r2, #0
 80120d2:	60e0      	str	r0, [r4, #12]
 80120d4:	2104      	movs	r1, #4
 80120d6:	6860      	ldr	r0, [r4, #4]
 80120d8:	f7ff ff82 	bl	8011fe0 <std>
 80120dc:	68a0      	ldr	r0, [r4, #8]
 80120de:	2201      	movs	r2, #1
 80120e0:	2109      	movs	r1, #9
 80120e2:	f7ff ff7d 	bl	8011fe0 <std>
 80120e6:	68e0      	ldr	r0, [r4, #12]
 80120e8:	2202      	movs	r2, #2
 80120ea:	2112      	movs	r1, #18
 80120ec:	f7ff ff78 	bl	8011fe0 <std>
 80120f0:	2301      	movs	r3, #1
 80120f2:	61a3      	str	r3, [r4, #24]
 80120f4:	e7d2      	b.n	801209c <__sinit+0xc>
 80120f6:	bf00      	nop
 80120f8:	08015cb4 	.word	0x08015cb4
 80120fc:	08012029 	.word	0x08012029

08012100 <__sfp>:
 8012100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012102:	4607      	mov	r7, r0
 8012104:	f7ff ffac 	bl	8012060 <__sfp_lock_acquire>
 8012108:	4b1e      	ldr	r3, [pc, #120]	; (8012184 <__sfp+0x84>)
 801210a:	681e      	ldr	r6, [r3, #0]
 801210c:	69b3      	ldr	r3, [r6, #24]
 801210e:	b913      	cbnz	r3, 8012116 <__sfp+0x16>
 8012110:	4630      	mov	r0, r6
 8012112:	f7ff ffbd 	bl	8012090 <__sinit>
 8012116:	3648      	adds	r6, #72	; 0x48
 8012118:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801211c:	3b01      	subs	r3, #1
 801211e:	d503      	bpl.n	8012128 <__sfp+0x28>
 8012120:	6833      	ldr	r3, [r6, #0]
 8012122:	b30b      	cbz	r3, 8012168 <__sfp+0x68>
 8012124:	6836      	ldr	r6, [r6, #0]
 8012126:	e7f7      	b.n	8012118 <__sfp+0x18>
 8012128:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801212c:	b9d5      	cbnz	r5, 8012164 <__sfp+0x64>
 801212e:	4b16      	ldr	r3, [pc, #88]	; (8012188 <__sfp+0x88>)
 8012130:	60e3      	str	r3, [r4, #12]
 8012132:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012136:	6665      	str	r5, [r4, #100]	; 0x64
 8012138:	f000 f859 	bl	80121ee <__retarget_lock_init_recursive>
 801213c:	f7ff ff96 	bl	801206c <__sfp_lock_release>
 8012140:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012144:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012148:	6025      	str	r5, [r4, #0]
 801214a:	61a5      	str	r5, [r4, #24]
 801214c:	2208      	movs	r2, #8
 801214e:	4629      	mov	r1, r5
 8012150:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012154:	f7ff fec8 	bl	8011ee8 <memset>
 8012158:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801215c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012160:	4620      	mov	r0, r4
 8012162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012164:	3468      	adds	r4, #104	; 0x68
 8012166:	e7d9      	b.n	801211c <__sfp+0x1c>
 8012168:	2104      	movs	r1, #4
 801216a:	4638      	mov	r0, r7
 801216c:	f7ff ff62 	bl	8012034 <__sfmoreglue>
 8012170:	4604      	mov	r4, r0
 8012172:	6030      	str	r0, [r6, #0]
 8012174:	2800      	cmp	r0, #0
 8012176:	d1d5      	bne.n	8012124 <__sfp+0x24>
 8012178:	f7ff ff78 	bl	801206c <__sfp_lock_release>
 801217c:	230c      	movs	r3, #12
 801217e:	603b      	str	r3, [r7, #0]
 8012180:	e7ee      	b.n	8012160 <__sfp+0x60>
 8012182:	bf00      	nop
 8012184:	08015cb4 	.word	0x08015cb4
 8012188:	ffff0001 	.word	0xffff0001

0801218c <fiprintf>:
 801218c:	b40e      	push	{r1, r2, r3}
 801218e:	b503      	push	{r0, r1, lr}
 8012190:	4601      	mov	r1, r0
 8012192:	ab03      	add	r3, sp, #12
 8012194:	4805      	ldr	r0, [pc, #20]	; (80121ac <fiprintf+0x20>)
 8012196:	f853 2b04 	ldr.w	r2, [r3], #4
 801219a:	6800      	ldr	r0, [r0, #0]
 801219c:	9301      	str	r3, [sp, #4]
 801219e:	f000 f93b 	bl	8012418 <_vfiprintf_r>
 80121a2:	b002      	add	sp, #8
 80121a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80121a8:	b003      	add	sp, #12
 80121aa:	4770      	bx	lr
 80121ac:	24000030 	.word	0x24000030

080121b0 <_fwalk_reent>:
 80121b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121b4:	4606      	mov	r6, r0
 80121b6:	4688      	mov	r8, r1
 80121b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80121bc:	2700      	movs	r7, #0
 80121be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121c2:	f1b9 0901 	subs.w	r9, r9, #1
 80121c6:	d505      	bpl.n	80121d4 <_fwalk_reent+0x24>
 80121c8:	6824      	ldr	r4, [r4, #0]
 80121ca:	2c00      	cmp	r4, #0
 80121cc:	d1f7      	bne.n	80121be <_fwalk_reent+0xe>
 80121ce:	4638      	mov	r0, r7
 80121d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121d4:	89ab      	ldrh	r3, [r5, #12]
 80121d6:	2b01      	cmp	r3, #1
 80121d8:	d907      	bls.n	80121ea <_fwalk_reent+0x3a>
 80121da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121de:	3301      	adds	r3, #1
 80121e0:	d003      	beq.n	80121ea <_fwalk_reent+0x3a>
 80121e2:	4629      	mov	r1, r5
 80121e4:	4630      	mov	r0, r6
 80121e6:	47c0      	blx	r8
 80121e8:	4307      	orrs	r7, r0
 80121ea:	3568      	adds	r5, #104	; 0x68
 80121ec:	e7e9      	b.n	80121c2 <_fwalk_reent+0x12>

080121ee <__retarget_lock_init_recursive>:
 80121ee:	4770      	bx	lr

080121f0 <__retarget_lock_acquire_recursive>:
 80121f0:	4770      	bx	lr

080121f2 <__retarget_lock_release_recursive>:
 80121f2:	4770      	bx	lr

080121f4 <malloc>:
 80121f4:	4b02      	ldr	r3, [pc, #8]	; (8012200 <malloc+0xc>)
 80121f6:	4601      	mov	r1, r0
 80121f8:	6818      	ldr	r0, [r3, #0]
 80121fa:	f000 b86f 	b.w	80122dc <_malloc_r>
 80121fe:	bf00      	nop
 8012200:	24000030 	.word	0x24000030

08012204 <_free_r>:
 8012204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012206:	2900      	cmp	r1, #0
 8012208:	d044      	beq.n	8012294 <_free_r+0x90>
 801220a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801220e:	9001      	str	r0, [sp, #4]
 8012210:	2b00      	cmp	r3, #0
 8012212:	f1a1 0404 	sub.w	r4, r1, #4
 8012216:	bfb8      	it	lt
 8012218:	18e4      	addlt	r4, r4, r3
 801221a:	f000 fe39 	bl	8012e90 <__malloc_lock>
 801221e:	4a1e      	ldr	r2, [pc, #120]	; (8012298 <_free_r+0x94>)
 8012220:	9801      	ldr	r0, [sp, #4]
 8012222:	6813      	ldr	r3, [r2, #0]
 8012224:	b933      	cbnz	r3, 8012234 <_free_r+0x30>
 8012226:	6063      	str	r3, [r4, #4]
 8012228:	6014      	str	r4, [r2, #0]
 801222a:	b003      	add	sp, #12
 801222c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012230:	f000 be34 	b.w	8012e9c <__malloc_unlock>
 8012234:	42a3      	cmp	r3, r4
 8012236:	d908      	bls.n	801224a <_free_r+0x46>
 8012238:	6825      	ldr	r5, [r4, #0]
 801223a:	1961      	adds	r1, r4, r5
 801223c:	428b      	cmp	r3, r1
 801223e:	bf01      	itttt	eq
 8012240:	6819      	ldreq	r1, [r3, #0]
 8012242:	685b      	ldreq	r3, [r3, #4]
 8012244:	1949      	addeq	r1, r1, r5
 8012246:	6021      	streq	r1, [r4, #0]
 8012248:	e7ed      	b.n	8012226 <_free_r+0x22>
 801224a:	461a      	mov	r2, r3
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	b10b      	cbz	r3, 8012254 <_free_r+0x50>
 8012250:	42a3      	cmp	r3, r4
 8012252:	d9fa      	bls.n	801224a <_free_r+0x46>
 8012254:	6811      	ldr	r1, [r2, #0]
 8012256:	1855      	adds	r5, r2, r1
 8012258:	42a5      	cmp	r5, r4
 801225a:	d10b      	bne.n	8012274 <_free_r+0x70>
 801225c:	6824      	ldr	r4, [r4, #0]
 801225e:	4421      	add	r1, r4
 8012260:	1854      	adds	r4, r2, r1
 8012262:	42a3      	cmp	r3, r4
 8012264:	6011      	str	r1, [r2, #0]
 8012266:	d1e0      	bne.n	801222a <_free_r+0x26>
 8012268:	681c      	ldr	r4, [r3, #0]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	6053      	str	r3, [r2, #4]
 801226e:	4421      	add	r1, r4
 8012270:	6011      	str	r1, [r2, #0]
 8012272:	e7da      	b.n	801222a <_free_r+0x26>
 8012274:	d902      	bls.n	801227c <_free_r+0x78>
 8012276:	230c      	movs	r3, #12
 8012278:	6003      	str	r3, [r0, #0]
 801227a:	e7d6      	b.n	801222a <_free_r+0x26>
 801227c:	6825      	ldr	r5, [r4, #0]
 801227e:	1961      	adds	r1, r4, r5
 8012280:	428b      	cmp	r3, r1
 8012282:	bf04      	itt	eq
 8012284:	6819      	ldreq	r1, [r3, #0]
 8012286:	685b      	ldreq	r3, [r3, #4]
 8012288:	6063      	str	r3, [r4, #4]
 801228a:	bf04      	itt	eq
 801228c:	1949      	addeq	r1, r1, r5
 801228e:	6021      	streq	r1, [r4, #0]
 8012290:	6054      	str	r4, [r2, #4]
 8012292:	e7ca      	b.n	801222a <_free_r+0x26>
 8012294:	b003      	add	sp, #12
 8012296:	bd30      	pop	{r4, r5, pc}
 8012298:	240081bc 	.word	0x240081bc

0801229c <sbrk_aligned>:
 801229c:	b570      	push	{r4, r5, r6, lr}
 801229e:	4e0e      	ldr	r6, [pc, #56]	; (80122d8 <sbrk_aligned+0x3c>)
 80122a0:	460c      	mov	r4, r1
 80122a2:	6831      	ldr	r1, [r6, #0]
 80122a4:	4605      	mov	r5, r0
 80122a6:	b911      	cbnz	r1, 80122ae <sbrk_aligned+0x12>
 80122a8:	f000 fb7a 	bl	80129a0 <_sbrk_r>
 80122ac:	6030      	str	r0, [r6, #0]
 80122ae:	4621      	mov	r1, r4
 80122b0:	4628      	mov	r0, r5
 80122b2:	f000 fb75 	bl	80129a0 <_sbrk_r>
 80122b6:	1c43      	adds	r3, r0, #1
 80122b8:	d00a      	beq.n	80122d0 <sbrk_aligned+0x34>
 80122ba:	1cc4      	adds	r4, r0, #3
 80122bc:	f024 0403 	bic.w	r4, r4, #3
 80122c0:	42a0      	cmp	r0, r4
 80122c2:	d007      	beq.n	80122d4 <sbrk_aligned+0x38>
 80122c4:	1a21      	subs	r1, r4, r0
 80122c6:	4628      	mov	r0, r5
 80122c8:	f000 fb6a 	bl	80129a0 <_sbrk_r>
 80122cc:	3001      	adds	r0, #1
 80122ce:	d101      	bne.n	80122d4 <sbrk_aligned+0x38>
 80122d0:	f04f 34ff 	mov.w	r4, #4294967295
 80122d4:	4620      	mov	r0, r4
 80122d6:	bd70      	pop	{r4, r5, r6, pc}
 80122d8:	240081c0 	.word	0x240081c0

080122dc <_malloc_r>:
 80122dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e0:	1ccd      	adds	r5, r1, #3
 80122e2:	f025 0503 	bic.w	r5, r5, #3
 80122e6:	3508      	adds	r5, #8
 80122e8:	2d0c      	cmp	r5, #12
 80122ea:	bf38      	it	cc
 80122ec:	250c      	movcc	r5, #12
 80122ee:	2d00      	cmp	r5, #0
 80122f0:	4607      	mov	r7, r0
 80122f2:	db01      	blt.n	80122f8 <_malloc_r+0x1c>
 80122f4:	42a9      	cmp	r1, r5
 80122f6:	d905      	bls.n	8012304 <_malloc_r+0x28>
 80122f8:	230c      	movs	r3, #12
 80122fa:	603b      	str	r3, [r7, #0]
 80122fc:	2600      	movs	r6, #0
 80122fe:	4630      	mov	r0, r6
 8012300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012304:	4e2e      	ldr	r6, [pc, #184]	; (80123c0 <_malloc_r+0xe4>)
 8012306:	f000 fdc3 	bl	8012e90 <__malloc_lock>
 801230a:	6833      	ldr	r3, [r6, #0]
 801230c:	461c      	mov	r4, r3
 801230e:	bb34      	cbnz	r4, 801235e <_malloc_r+0x82>
 8012310:	4629      	mov	r1, r5
 8012312:	4638      	mov	r0, r7
 8012314:	f7ff ffc2 	bl	801229c <sbrk_aligned>
 8012318:	1c43      	adds	r3, r0, #1
 801231a:	4604      	mov	r4, r0
 801231c:	d14d      	bne.n	80123ba <_malloc_r+0xde>
 801231e:	6834      	ldr	r4, [r6, #0]
 8012320:	4626      	mov	r6, r4
 8012322:	2e00      	cmp	r6, #0
 8012324:	d140      	bne.n	80123a8 <_malloc_r+0xcc>
 8012326:	6823      	ldr	r3, [r4, #0]
 8012328:	4631      	mov	r1, r6
 801232a:	4638      	mov	r0, r7
 801232c:	eb04 0803 	add.w	r8, r4, r3
 8012330:	f000 fb36 	bl	80129a0 <_sbrk_r>
 8012334:	4580      	cmp	r8, r0
 8012336:	d13a      	bne.n	80123ae <_malloc_r+0xd2>
 8012338:	6821      	ldr	r1, [r4, #0]
 801233a:	3503      	adds	r5, #3
 801233c:	1a6d      	subs	r5, r5, r1
 801233e:	f025 0503 	bic.w	r5, r5, #3
 8012342:	3508      	adds	r5, #8
 8012344:	2d0c      	cmp	r5, #12
 8012346:	bf38      	it	cc
 8012348:	250c      	movcc	r5, #12
 801234a:	4629      	mov	r1, r5
 801234c:	4638      	mov	r0, r7
 801234e:	f7ff ffa5 	bl	801229c <sbrk_aligned>
 8012352:	3001      	adds	r0, #1
 8012354:	d02b      	beq.n	80123ae <_malloc_r+0xd2>
 8012356:	6823      	ldr	r3, [r4, #0]
 8012358:	442b      	add	r3, r5
 801235a:	6023      	str	r3, [r4, #0]
 801235c:	e00e      	b.n	801237c <_malloc_r+0xa0>
 801235e:	6822      	ldr	r2, [r4, #0]
 8012360:	1b52      	subs	r2, r2, r5
 8012362:	d41e      	bmi.n	80123a2 <_malloc_r+0xc6>
 8012364:	2a0b      	cmp	r2, #11
 8012366:	d916      	bls.n	8012396 <_malloc_r+0xba>
 8012368:	1961      	adds	r1, r4, r5
 801236a:	42a3      	cmp	r3, r4
 801236c:	6025      	str	r5, [r4, #0]
 801236e:	bf18      	it	ne
 8012370:	6059      	strne	r1, [r3, #4]
 8012372:	6863      	ldr	r3, [r4, #4]
 8012374:	bf08      	it	eq
 8012376:	6031      	streq	r1, [r6, #0]
 8012378:	5162      	str	r2, [r4, r5]
 801237a:	604b      	str	r3, [r1, #4]
 801237c:	4638      	mov	r0, r7
 801237e:	f104 060b 	add.w	r6, r4, #11
 8012382:	f000 fd8b 	bl	8012e9c <__malloc_unlock>
 8012386:	f026 0607 	bic.w	r6, r6, #7
 801238a:	1d23      	adds	r3, r4, #4
 801238c:	1af2      	subs	r2, r6, r3
 801238e:	d0b6      	beq.n	80122fe <_malloc_r+0x22>
 8012390:	1b9b      	subs	r3, r3, r6
 8012392:	50a3      	str	r3, [r4, r2]
 8012394:	e7b3      	b.n	80122fe <_malloc_r+0x22>
 8012396:	6862      	ldr	r2, [r4, #4]
 8012398:	42a3      	cmp	r3, r4
 801239a:	bf0c      	ite	eq
 801239c:	6032      	streq	r2, [r6, #0]
 801239e:	605a      	strne	r2, [r3, #4]
 80123a0:	e7ec      	b.n	801237c <_malloc_r+0xa0>
 80123a2:	4623      	mov	r3, r4
 80123a4:	6864      	ldr	r4, [r4, #4]
 80123a6:	e7b2      	b.n	801230e <_malloc_r+0x32>
 80123a8:	4634      	mov	r4, r6
 80123aa:	6876      	ldr	r6, [r6, #4]
 80123ac:	e7b9      	b.n	8012322 <_malloc_r+0x46>
 80123ae:	230c      	movs	r3, #12
 80123b0:	603b      	str	r3, [r7, #0]
 80123b2:	4638      	mov	r0, r7
 80123b4:	f000 fd72 	bl	8012e9c <__malloc_unlock>
 80123b8:	e7a1      	b.n	80122fe <_malloc_r+0x22>
 80123ba:	6025      	str	r5, [r4, #0]
 80123bc:	e7de      	b.n	801237c <_malloc_r+0xa0>
 80123be:	bf00      	nop
 80123c0:	240081bc 	.word	0x240081bc

080123c4 <__sfputc_r>:
 80123c4:	6893      	ldr	r3, [r2, #8]
 80123c6:	3b01      	subs	r3, #1
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	b410      	push	{r4}
 80123cc:	6093      	str	r3, [r2, #8]
 80123ce:	da08      	bge.n	80123e2 <__sfputc_r+0x1e>
 80123d0:	6994      	ldr	r4, [r2, #24]
 80123d2:	42a3      	cmp	r3, r4
 80123d4:	db01      	blt.n	80123da <__sfputc_r+0x16>
 80123d6:	290a      	cmp	r1, #10
 80123d8:	d103      	bne.n	80123e2 <__sfputc_r+0x1e>
 80123da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123de:	f000 bb33 	b.w	8012a48 <__swbuf_r>
 80123e2:	6813      	ldr	r3, [r2, #0]
 80123e4:	1c58      	adds	r0, r3, #1
 80123e6:	6010      	str	r0, [r2, #0]
 80123e8:	7019      	strb	r1, [r3, #0]
 80123ea:	4608      	mov	r0, r1
 80123ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123f0:	4770      	bx	lr

080123f2 <__sfputs_r>:
 80123f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123f4:	4606      	mov	r6, r0
 80123f6:	460f      	mov	r7, r1
 80123f8:	4614      	mov	r4, r2
 80123fa:	18d5      	adds	r5, r2, r3
 80123fc:	42ac      	cmp	r4, r5
 80123fe:	d101      	bne.n	8012404 <__sfputs_r+0x12>
 8012400:	2000      	movs	r0, #0
 8012402:	e007      	b.n	8012414 <__sfputs_r+0x22>
 8012404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012408:	463a      	mov	r2, r7
 801240a:	4630      	mov	r0, r6
 801240c:	f7ff ffda 	bl	80123c4 <__sfputc_r>
 8012410:	1c43      	adds	r3, r0, #1
 8012412:	d1f3      	bne.n	80123fc <__sfputs_r+0xa>
 8012414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012418 <_vfiprintf_r>:
 8012418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801241c:	460d      	mov	r5, r1
 801241e:	b09d      	sub	sp, #116	; 0x74
 8012420:	4614      	mov	r4, r2
 8012422:	4698      	mov	r8, r3
 8012424:	4606      	mov	r6, r0
 8012426:	b118      	cbz	r0, 8012430 <_vfiprintf_r+0x18>
 8012428:	6983      	ldr	r3, [r0, #24]
 801242a:	b90b      	cbnz	r3, 8012430 <_vfiprintf_r+0x18>
 801242c:	f7ff fe30 	bl	8012090 <__sinit>
 8012430:	4b89      	ldr	r3, [pc, #548]	; (8012658 <_vfiprintf_r+0x240>)
 8012432:	429d      	cmp	r5, r3
 8012434:	d11b      	bne.n	801246e <_vfiprintf_r+0x56>
 8012436:	6875      	ldr	r5, [r6, #4]
 8012438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801243a:	07d9      	lsls	r1, r3, #31
 801243c:	d405      	bmi.n	801244a <_vfiprintf_r+0x32>
 801243e:	89ab      	ldrh	r3, [r5, #12]
 8012440:	059a      	lsls	r2, r3, #22
 8012442:	d402      	bmi.n	801244a <_vfiprintf_r+0x32>
 8012444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012446:	f7ff fed3 	bl	80121f0 <__retarget_lock_acquire_recursive>
 801244a:	89ab      	ldrh	r3, [r5, #12]
 801244c:	071b      	lsls	r3, r3, #28
 801244e:	d501      	bpl.n	8012454 <_vfiprintf_r+0x3c>
 8012450:	692b      	ldr	r3, [r5, #16]
 8012452:	b9eb      	cbnz	r3, 8012490 <_vfiprintf_r+0x78>
 8012454:	4629      	mov	r1, r5
 8012456:	4630      	mov	r0, r6
 8012458:	f000 fb5a 	bl	8012b10 <__swsetup_r>
 801245c:	b1c0      	cbz	r0, 8012490 <_vfiprintf_r+0x78>
 801245e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012460:	07dc      	lsls	r4, r3, #31
 8012462:	d50e      	bpl.n	8012482 <_vfiprintf_r+0x6a>
 8012464:	f04f 30ff 	mov.w	r0, #4294967295
 8012468:	b01d      	add	sp, #116	; 0x74
 801246a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801246e:	4b7b      	ldr	r3, [pc, #492]	; (801265c <_vfiprintf_r+0x244>)
 8012470:	429d      	cmp	r5, r3
 8012472:	d101      	bne.n	8012478 <_vfiprintf_r+0x60>
 8012474:	68b5      	ldr	r5, [r6, #8]
 8012476:	e7df      	b.n	8012438 <_vfiprintf_r+0x20>
 8012478:	4b79      	ldr	r3, [pc, #484]	; (8012660 <_vfiprintf_r+0x248>)
 801247a:	429d      	cmp	r5, r3
 801247c:	bf08      	it	eq
 801247e:	68f5      	ldreq	r5, [r6, #12]
 8012480:	e7da      	b.n	8012438 <_vfiprintf_r+0x20>
 8012482:	89ab      	ldrh	r3, [r5, #12]
 8012484:	0598      	lsls	r0, r3, #22
 8012486:	d4ed      	bmi.n	8012464 <_vfiprintf_r+0x4c>
 8012488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801248a:	f7ff feb2 	bl	80121f2 <__retarget_lock_release_recursive>
 801248e:	e7e9      	b.n	8012464 <_vfiprintf_r+0x4c>
 8012490:	2300      	movs	r3, #0
 8012492:	9309      	str	r3, [sp, #36]	; 0x24
 8012494:	2320      	movs	r3, #32
 8012496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801249a:	f8cd 800c 	str.w	r8, [sp, #12]
 801249e:	2330      	movs	r3, #48	; 0x30
 80124a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012664 <_vfiprintf_r+0x24c>
 80124a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80124a8:	f04f 0901 	mov.w	r9, #1
 80124ac:	4623      	mov	r3, r4
 80124ae:	469a      	mov	sl, r3
 80124b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124b4:	b10a      	cbz	r2, 80124ba <_vfiprintf_r+0xa2>
 80124b6:	2a25      	cmp	r2, #37	; 0x25
 80124b8:	d1f9      	bne.n	80124ae <_vfiprintf_r+0x96>
 80124ba:	ebba 0b04 	subs.w	fp, sl, r4
 80124be:	d00b      	beq.n	80124d8 <_vfiprintf_r+0xc0>
 80124c0:	465b      	mov	r3, fp
 80124c2:	4622      	mov	r2, r4
 80124c4:	4629      	mov	r1, r5
 80124c6:	4630      	mov	r0, r6
 80124c8:	f7ff ff93 	bl	80123f2 <__sfputs_r>
 80124cc:	3001      	adds	r0, #1
 80124ce:	f000 80aa 	beq.w	8012626 <_vfiprintf_r+0x20e>
 80124d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124d4:	445a      	add	r2, fp
 80124d6:	9209      	str	r2, [sp, #36]	; 0x24
 80124d8:	f89a 3000 	ldrb.w	r3, [sl]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f000 80a2 	beq.w	8012626 <_vfiprintf_r+0x20e>
 80124e2:	2300      	movs	r3, #0
 80124e4:	f04f 32ff 	mov.w	r2, #4294967295
 80124e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124ec:	f10a 0a01 	add.w	sl, sl, #1
 80124f0:	9304      	str	r3, [sp, #16]
 80124f2:	9307      	str	r3, [sp, #28]
 80124f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80124f8:	931a      	str	r3, [sp, #104]	; 0x68
 80124fa:	4654      	mov	r4, sl
 80124fc:	2205      	movs	r2, #5
 80124fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012502:	4858      	ldr	r0, [pc, #352]	; (8012664 <_vfiprintf_r+0x24c>)
 8012504:	f7ed feec 	bl	80002e0 <memchr>
 8012508:	9a04      	ldr	r2, [sp, #16]
 801250a:	b9d8      	cbnz	r0, 8012544 <_vfiprintf_r+0x12c>
 801250c:	06d1      	lsls	r1, r2, #27
 801250e:	bf44      	itt	mi
 8012510:	2320      	movmi	r3, #32
 8012512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012516:	0713      	lsls	r3, r2, #28
 8012518:	bf44      	itt	mi
 801251a:	232b      	movmi	r3, #43	; 0x2b
 801251c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012520:	f89a 3000 	ldrb.w	r3, [sl]
 8012524:	2b2a      	cmp	r3, #42	; 0x2a
 8012526:	d015      	beq.n	8012554 <_vfiprintf_r+0x13c>
 8012528:	9a07      	ldr	r2, [sp, #28]
 801252a:	4654      	mov	r4, sl
 801252c:	2000      	movs	r0, #0
 801252e:	f04f 0c0a 	mov.w	ip, #10
 8012532:	4621      	mov	r1, r4
 8012534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012538:	3b30      	subs	r3, #48	; 0x30
 801253a:	2b09      	cmp	r3, #9
 801253c:	d94e      	bls.n	80125dc <_vfiprintf_r+0x1c4>
 801253e:	b1b0      	cbz	r0, 801256e <_vfiprintf_r+0x156>
 8012540:	9207      	str	r2, [sp, #28]
 8012542:	e014      	b.n	801256e <_vfiprintf_r+0x156>
 8012544:	eba0 0308 	sub.w	r3, r0, r8
 8012548:	fa09 f303 	lsl.w	r3, r9, r3
 801254c:	4313      	orrs	r3, r2
 801254e:	9304      	str	r3, [sp, #16]
 8012550:	46a2      	mov	sl, r4
 8012552:	e7d2      	b.n	80124fa <_vfiprintf_r+0xe2>
 8012554:	9b03      	ldr	r3, [sp, #12]
 8012556:	1d19      	adds	r1, r3, #4
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	9103      	str	r1, [sp, #12]
 801255c:	2b00      	cmp	r3, #0
 801255e:	bfbb      	ittet	lt
 8012560:	425b      	neglt	r3, r3
 8012562:	f042 0202 	orrlt.w	r2, r2, #2
 8012566:	9307      	strge	r3, [sp, #28]
 8012568:	9307      	strlt	r3, [sp, #28]
 801256a:	bfb8      	it	lt
 801256c:	9204      	strlt	r2, [sp, #16]
 801256e:	7823      	ldrb	r3, [r4, #0]
 8012570:	2b2e      	cmp	r3, #46	; 0x2e
 8012572:	d10c      	bne.n	801258e <_vfiprintf_r+0x176>
 8012574:	7863      	ldrb	r3, [r4, #1]
 8012576:	2b2a      	cmp	r3, #42	; 0x2a
 8012578:	d135      	bne.n	80125e6 <_vfiprintf_r+0x1ce>
 801257a:	9b03      	ldr	r3, [sp, #12]
 801257c:	1d1a      	adds	r2, r3, #4
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	9203      	str	r2, [sp, #12]
 8012582:	2b00      	cmp	r3, #0
 8012584:	bfb8      	it	lt
 8012586:	f04f 33ff 	movlt.w	r3, #4294967295
 801258a:	3402      	adds	r4, #2
 801258c:	9305      	str	r3, [sp, #20]
 801258e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012674 <_vfiprintf_r+0x25c>
 8012592:	7821      	ldrb	r1, [r4, #0]
 8012594:	2203      	movs	r2, #3
 8012596:	4650      	mov	r0, sl
 8012598:	f7ed fea2 	bl	80002e0 <memchr>
 801259c:	b140      	cbz	r0, 80125b0 <_vfiprintf_r+0x198>
 801259e:	2340      	movs	r3, #64	; 0x40
 80125a0:	eba0 000a 	sub.w	r0, r0, sl
 80125a4:	fa03 f000 	lsl.w	r0, r3, r0
 80125a8:	9b04      	ldr	r3, [sp, #16]
 80125aa:	4303      	orrs	r3, r0
 80125ac:	3401      	adds	r4, #1
 80125ae:	9304      	str	r3, [sp, #16]
 80125b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125b4:	482c      	ldr	r0, [pc, #176]	; (8012668 <_vfiprintf_r+0x250>)
 80125b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80125ba:	2206      	movs	r2, #6
 80125bc:	f7ed fe90 	bl	80002e0 <memchr>
 80125c0:	2800      	cmp	r0, #0
 80125c2:	d03f      	beq.n	8012644 <_vfiprintf_r+0x22c>
 80125c4:	4b29      	ldr	r3, [pc, #164]	; (801266c <_vfiprintf_r+0x254>)
 80125c6:	bb1b      	cbnz	r3, 8012610 <_vfiprintf_r+0x1f8>
 80125c8:	9b03      	ldr	r3, [sp, #12]
 80125ca:	3307      	adds	r3, #7
 80125cc:	f023 0307 	bic.w	r3, r3, #7
 80125d0:	3308      	adds	r3, #8
 80125d2:	9303      	str	r3, [sp, #12]
 80125d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125d6:	443b      	add	r3, r7
 80125d8:	9309      	str	r3, [sp, #36]	; 0x24
 80125da:	e767      	b.n	80124ac <_vfiprintf_r+0x94>
 80125dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80125e0:	460c      	mov	r4, r1
 80125e2:	2001      	movs	r0, #1
 80125e4:	e7a5      	b.n	8012532 <_vfiprintf_r+0x11a>
 80125e6:	2300      	movs	r3, #0
 80125e8:	3401      	adds	r4, #1
 80125ea:	9305      	str	r3, [sp, #20]
 80125ec:	4619      	mov	r1, r3
 80125ee:	f04f 0c0a 	mov.w	ip, #10
 80125f2:	4620      	mov	r0, r4
 80125f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125f8:	3a30      	subs	r2, #48	; 0x30
 80125fa:	2a09      	cmp	r2, #9
 80125fc:	d903      	bls.n	8012606 <_vfiprintf_r+0x1ee>
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d0c5      	beq.n	801258e <_vfiprintf_r+0x176>
 8012602:	9105      	str	r1, [sp, #20]
 8012604:	e7c3      	b.n	801258e <_vfiprintf_r+0x176>
 8012606:	fb0c 2101 	mla	r1, ip, r1, r2
 801260a:	4604      	mov	r4, r0
 801260c:	2301      	movs	r3, #1
 801260e:	e7f0      	b.n	80125f2 <_vfiprintf_r+0x1da>
 8012610:	ab03      	add	r3, sp, #12
 8012612:	9300      	str	r3, [sp, #0]
 8012614:	462a      	mov	r2, r5
 8012616:	4b16      	ldr	r3, [pc, #88]	; (8012670 <_vfiprintf_r+0x258>)
 8012618:	a904      	add	r1, sp, #16
 801261a:	4630      	mov	r0, r6
 801261c:	f3af 8000 	nop.w
 8012620:	4607      	mov	r7, r0
 8012622:	1c78      	adds	r0, r7, #1
 8012624:	d1d6      	bne.n	80125d4 <_vfiprintf_r+0x1bc>
 8012626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012628:	07d9      	lsls	r1, r3, #31
 801262a:	d405      	bmi.n	8012638 <_vfiprintf_r+0x220>
 801262c:	89ab      	ldrh	r3, [r5, #12]
 801262e:	059a      	lsls	r2, r3, #22
 8012630:	d402      	bmi.n	8012638 <_vfiprintf_r+0x220>
 8012632:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012634:	f7ff fddd 	bl	80121f2 <__retarget_lock_release_recursive>
 8012638:	89ab      	ldrh	r3, [r5, #12]
 801263a:	065b      	lsls	r3, r3, #25
 801263c:	f53f af12 	bmi.w	8012464 <_vfiprintf_r+0x4c>
 8012640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012642:	e711      	b.n	8012468 <_vfiprintf_r+0x50>
 8012644:	ab03      	add	r3, sp, #12
 8012646:	9300      	str	r3, [sp, #0]
 8012648:	462a      	mov	r2, r5
 801264a:	4b09      	ldr	r3, [pc, #36]	; (8012670 <_vfiprintf_r+0x258>)
 801264c:	a904      	add	r1, sp, #16
 801264e:	4630      	mov	r0, r6
 8012650:	f000 f880 	bl	8012754 <_printf_i>
 8012654:	e7e4      	b.n	8012620 <_vfiprintf_r+0x208>
 8012656:	bf00      	nop
 8012658:	08015d88 	.word	0x08015d88
 801265c:	08015da8 	.word	0x08015da8
 8012660:	08015d68 	.word	0x08015d68
 8012664:	08015dc8 	.word	0x08015dc8
 8012668:	08015dd2 	.word	0x08015dd2
 801266c:	00000000 	.word	0x00000000
 8012670:	080123f3 	.word	0x080123f3
 8012674:	08015dce 	.word	0x08015dce

08012678 <_printf_common>:
 8012678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801267c:	4616      	mov	r6, r2
 801267e:	4699      	mov	r9, r3
 8012680:	688a      	ldr	r2, [r1, #8]
 8012682:	690b      	ldr	r3, [r1, #16]
 8012684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012688:	4293      	cmp	r3, r2
 801268a:	bfb8      	it	lt
 801268c:	4613      	movlt	r3, r2
 801268e:	6033      	str	r3, [r6, #0]
 8012690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012694:	4607      	mov	r7, r0
 8012696:	460c      	mov	r4, r1
 8012698:	b10a      	cbz	r2, 801269e <_printf_common+0x26>
 801269a:	3301      	adds	r3, #1
 801269c:	6033      	str	r3, [r6, #0]
 801269e:	6823      	ldr	r3, [r4, #0]
 80126a0:	0699      	lsls	r1, r3, #26
 80126a2:	bf42      	ittt	mi
 80126a4:	6833      	ldrmi	r3, [r6, #0]
 80126a6:	3302      	addmi	r3, #2
 80126a8:	6033      	strmi	r3, [r6, #0]
 80126aa:	6825      	ldr	r5, [r4, #0]
 80126ac:	f015 0506 	ands.w	r5, r5, #6
 80126b0:	d106      	bne.n	80126c0 <_printf_common+0x48>
 80126b2:	f104 0a19 	add.w	sl, r4, #25
 80126b6:	68e3      	ldr	r3, [r4, #12]
 80126b8:	6832      	ldr	r2, [r6, #0]
 80126ba:	1a9b      	subs	r3, r3, r2
 80126bc:	42ab      	cmp	r3, r5
 80126be:	dc26      	bgt.n	801270e <_printf_common+0x96>
 80126c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80126c4:	1e13      	subs	r3, r2, #0
 80126c6:	6822      	ldr	r2, [r4, #0]
 80126c8:	bf18      	it	ne
 80126ca:	2301      	movne	r3, #1
 80126cc:	0692      	lsls	r2, r2, #26
 80126ce:	d42b      	bmi.n	8012728 <_printf_common+0xb0>
 80126d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80126d4:	4649      	mov	r1, r9
 80126d6:	4638      	mov	r0, r7
 80126d8:	47c0      	blx	r8
 80126da:	3001      	adds	r0, #1
 80126dc:	d01e      	beq.n	801271c <_printf_common+0xa4>
 80126de:	6823      	ldr	r3, [r4, #0]
 80126e0:	68e5      	ldr	r5, [r4, #12]
 80126e2:	6832      	ldr	r2, [r6, #0]
 80126e4:	f003 0306 	and.w	r3, r3, #6
 80126e8:	2b04      	cmp	r3, #4
 80126ea:	bf08      	it	eq
 80126ec:	1aad      	subeq	r5, r5, r2
 80126ee:	68a3      	ldr	r3, [r4, #8]
 80126f0:	6922      	ldr	r2, [r4, #16]
 80126f2:	bf0c      	ite	eq
 80126f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80126f8:	2500      	movne	r5, #0
 80126fa:	4293      	cmp	r3, r2
 80126fc:	bfc4      	itt	gt
 80126fe:	1a9b      	subgt	r3, r3, r2
 8012700:	18ed      	addgt	r5, r5, r3
 8012702:	2600      	movs	r6, #0
 8012704:	341a      	adds	r4, #26
 8012706:	42b5      	cmp	r5, r6
 8012708:	d11a      	bne.n	8012740 <_printf_common+0xc8>
 801270a:	2000      	movs	r0, #0
 801270c:	e008      	b.n	8012720 <_printf_common+0xa8>
 801270e:	2301      	movs	r3, #1
 8012710:	4652      	mov	r2, sl
 8012712:	4649      	mov	r1, r9
 8012714:	4638      	mov	r0, r7
 8012716:	47c0      	blx	r8
 8012718:	3001      	adds	r0, #1
 801271a:	d103      	bne.n	8012724 <_printf_common+0xac>
 801271c:	f04f 30ff 	mov.w	r0, #4294967295
 8012720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012724:	3501      	adds	r5, #1
 8012726:	e7c6      	b.n	80126b6 <_printf_common+0x3e>
 8012728:	18e1      	adds	r1, r4, r3
 801272a:	1c5a      	adds	r2, r3, #1
 801272c:	2030      	movs	r0, #48	; 0x30
 801272e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012732:	4422      	add	r2, r4
 8012734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801273c:	3302      	adds	r3, #2
 801273e:	e7c7      	b.n	80126d0 <_printf_common+0x58>
 8012740:	2301      	movs	r3, #1
 8012742:	4622      	mov	r2, r4
 8012744:	4649      	mov	r1, r9
 8012746:	4638      	mov	r0, r7
 8012748:	47c0      	blx	r8
 801274a:	3001      	adds	r0, #1
 801274c:	d0e6      	beq.n	801271c <_printf_common+0xa4>
 801274e:	3601      	adds	r6, #1
 8012750:	e7d9      	b.n	8012706 <_printf_common+0x8e>
	...

08012754 <_printf_i>:
 8012754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012758:	7e0f      	ldrb	r7, [r1, #24]
 801275a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801275c:	2f78      	cmp	r7, #120	; 0x78
 801275e:	4691      	mov	r9, r2
 8012760:	4680      	mov	r8, r0
 8012762:	460c      	mov	r4, r1
 8012764:	469a      	mov	sl, r3
 8012766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801276a:	d807      	bhi.n	801277c <_printf_i+0x28>
 801276c:	2f62      	cmp	r7, #98	; 0x62
 801276e:	d80a      	bhi.n	8012786 <_printf_i+0x32>
 8012770:	2f00      	cmp	r7, #0
 8012772:	f000 80d8 	beq.w	8012926 <_printf_i+0x1d2>
 8012776:	2f58      	cmp	r7, #88	; 0x58
 8012778:	f000 80a3 	beq.w	80128c2 <_printf_i+0x16e>
 801277c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012784:	e03a      	b.n	80127fc <_printf_i+0xa8>
 8012786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801278a:	2b15      	cmp	r3, #21
 801278c:	d8f6      	bhi.n	801277c <_printf_i+0x28>
 801278e:	a101      	add	r1, pc, #4	; (adr r1, 8012794 <_printf_i+0x40>)
 8012790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012794:	080127ed 	.word	0x080127ed
 8012798:	08012801 	.word	0x08012801
 801279c:	0801277d 	.word	0x0801277d
 80127a0:	0801277d 	.word	0x0801277d
 80127a4:	0801277d 	.word	0x0801277d
 80127a8:	0801277d 	.word	0x0801277d
 80127ac:	08012801 	.word	0x08012801
 80127b0:	0801277d 	.word	0x0801277d
 80127b4:	0801277d 	.word	0x0801277d
 80127b8:	0801277d 	.word	0x0801277d
 80127bc:	0801277d 	.word	0x0801277d
 80127c0:	0801290d 	.word	0x0801290d
 80127c4:	08012831 	.word	0x08012831
 80127c8:	080128ef 	.word	0x080128ef
 80127cc:	0801277d 	.word	0x0801277d
 80127d0:	0801277d 	.word	0x0801277d
 80127d4:	0801292f 	.word	0x0801292f
 80127d8:	0801277d 	.word	0x0801277d
 80127dc:	08012831 	.word	0x08012831
 80127e0:	0801277d 	.word	0x0801277d
 80127e4:	0801277d 	.word	0x0801277d
 80127e8:	080128f7 	.word	0x080128f7
 80127ec:	682b      	ldr	r3, [r5, #0]
 80127ee:	1d1a      	adds	r2, r3, #4
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	602a      	str	r2, [r5, #0]
 80127f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80127f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80127fc:	2301      	movs	r3, #1
 80127fe:	e0a3      	b.n	8012948 <_printf_i+0x1f4>
 8012800:	6820      	ldr	r0, [r4, #0]
 8012802:	6829      	ldr	r1, [r5, #0]
 8012804:	0606      	lsls	r6, r0, #24
 8012806:	f101 0304 	add.w	r3, r1, #4
 801280a:	d50a      	bpl.n	8012822 <_printf_i+0xce>
 801280c:	680e      	ldr	r6, [r1, #0]
 801280e:	602b      	str	r3, [r5, #0]
 8012810:	2e00      	cmp	r6, #0
 8012812:	da03      	bge.n	801281c <_printf_i+0xc8>
 8012814:	232d      	movs	r3, #45	; 0x2d
 8012816:	4276      	negs	r6, r6
 8012818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801281c:	485e      	ldr	r0, [pc, #376]	; (8012998 <_printf_i+0x244>)
 801281e:	230a      	movs	r3, #10
 8012820:	e019      	b.n	8012856 <_printf_i+0x102>
 8012822:	680e      	ldr	r6, [r1, #0]
 8012824:	602b      	str	r3, [r5, #0]
 8012826:	f010 0f40 	tst.w	r0, #64	; 0x40
 801282a:	bf18      	it	ne
 801282c:	b236      	sxthne	r6, r6
 801282e:	e7ef      	b.n	8012810 <_printf_i+0xbc>
 8012830:	682b      	ldr	r3, [r5, #0]
 8012832:	6820      	ldr	r0, [r4, #0]
 8012834:	1d19      	adds	r1, r3, #4
 8012836:	6029      	str	r1, [r5, #0]
 8012838:	0601      	lsls	r1, r0, #24
 801283a:	d501      	bpl.n	8012840 <_printf_i+0xec>
 801283c:	681e      	ldr	r6, [r3, #0]
 801283e:	e002      	b.n	8012846 <_printf_i+0xf2>
 8012840:	0646      	lsls	r6, r0, #25
 8012842:	d5fb      	bpl.n	801283c <_printf_i+0xe8>
 8012844:	881e      	ldrh	r6, [r3, #0]
 8012846:	4854      	ldr	r0, [pc, #336]	; (8012998 <_printf_i+0x244>)
 8012848:	2f6f      	cmp	r7, #111	; 0x6f
 801284a:	bf0c      	ite	eq
 801284c:	2308      	moveq	r3, #8
 801284e:	230a      	movne	r3, #10
 8012850:	2100      	movs	r1, #0
 8012852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012856:	6865      	ldr	r5, [r4, #4]
 8012858:	60a5      	str	r5, [r4, #8]
 801285a:	2d00      	cmp	r5, #0
 801285c:	bfa2      	ittt	ge
 801285e:	6821      	ldrge	r1, [r4, #0]
 8012860:	f021 0104 	bicge.w	r1, r1, #4
 8012864:	6021      	strge	r1, [r4, #0]
 8012866:	b90e      	cbnz	r6, 801286c <_printf_i+0x118>
 8012868:	2d00      	cmp	r5, #0
 801286a:	d04d      	beq.n	8012908 <_printf_i+0x1b4>
 801286c:	4615      	mov	r5, r2
 801286e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012872:	fb03 6711 	mls	r7, r3, r1, r6
 8012876:	5dc7      	ldrb	r7, [r0, r7]
 8012878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801287c:	4637      	mov	r7, r6
 801287e:	42bb      	cmp	r3, r7
 8012880:	460e      	mov	r6, r1
 8012882:	d9f4      	bls.n	801286e <_printf_i+0x11a>
 8012884:	2b08      	cmp	r3, #8
 8012886:	d10b      	bne.n	80128a0 <_printf_i+0x14c>
 8012888:	6823      	ldr	r3, [r4, #0]
 801288a:	07de      	lsls	r6, r3, #31
 801288c:	d508      	bpl.n	80128a0 <_printf_i+0x14c>
 801288e:	6923      	ldr	r3, [r4, #16]
 8012890:	6861      	ldr	r1, [r4, #4]
 8012892:	4299      	cmp	r1, r3
 8012894:	bfde      	ittt	le
 8012896:	2330      	movle	r3, #48	; 0x30
 8012898:	f805 3c01 	strble.w	r3, [r5, #-1]
 801289c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80128a0:	1b52      	subs	r2, r2, r5
 80128a2:	6122      	str	r2, [r4, #16]
 80128a4:	f8cd a000 	str.w	sl, [sp]
 80128a8:	464b      	mov	r3, r9
 80128aa:	aa03      	add	r2, sp, #12
 80128ac:	4621      	mov	r1, r4
 80128ae:	4640      	mov	r0, r8
 80128b0:	f7ff fee2 	bl	8012678 <_printf_common>
 80128b4:	3001      	adds	r0, #1
 80128b6:	d14c      	bne.n	8012952 <_printf_i+0x1fe>
 80128b8:	f04f 30ff 	mov.w	r0, #4294967295
 80128bc:	b004      	add	sp, #16
 80128be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128c2:	4835      	ldr	r0, [pc, #212]	; (8012998 <_printf_i+0x244>)
 80128c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80128c8:	6829      	ldr	r1, [r5, #0]
 80128ca:	6823      	ldr	r3, [r4, #0]
 80128cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80128d0:	6029      	str	r1, [r5, #0]
 80128d2:	061d      	lsls	r5, r3, #24
 80128d4:	d514      	bpl.n	8012900 <_printf_i+0x1ac>
 80128d6:	07df      	lsls	r7, r3, #31
 80128d8:	bf44      	itt	mi
 80128da:	f043 0320 	orrmi.w	r3, r3, #32
 80128de:	6023      	strmi	r3, [r4, #0]
 80128e0:	b91e      	cbnz	r6, 80128ea <_printf_i+0x196>
 80128e2:	6823      	ldr	r3, [r4, #0]
 80128e4:	f023 0320 	bic.w	r3, r3, #32
 80128e8:	6023      	str	r3, [r4, #0]
 80128ea:	2310      	movs	r3, #16
 80128ec:	e7b0      	b.n	8012850 <_printf_i+0xfc>
 80128ee:	6823      	ldr	r3, [r4, #0]
 80128f0:	f043 0320 	orr.w	r3, r3, #32
 80128f4:	6023      	str	r3, [r4, #0]
 80128f6:	2378      	movs	r3, #120	; 0x78
 80128f8:	4828      	ldr	r0, [pc, #160]	; (801299c <_printf_i+0x248>)
 80128fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80128fe:	e7e3      	b.n	80128c8 <_printf_i+0x174>
 8012900:	0659      	lsls	r1, r3, #25
 8012902:	bf48      	it	mi
 8012904:	b2b6      	uxthmi	r6, r6
 8012906:	e7e6      	b.n	80128d6 <_printf_i+0x182>
 8012908:	4615      	mov	r5, r2
 801290a:	e7bb      	b.n	8012884 <_printf_i+0x130>
 801290c:	682b      	ldr	r3, [r5, #0]
 801290e:	6826      	ldr	r6, [r4, #0]
 8012910:	6961      	ldr	r1, [r4, #20]
 8012912:	1d18      	adds	r0, r3, #4
 8012914:	6028      	str	r0, [r5, #0]
 8012916:	0635      	lsls	r5, r6, #24
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	d501      	bpl.n	8012920 <_printf_i+0x1cc>
 801291c:	6019      	str	r1, [r3, #0]
 801291e:	e002      	b.n	8012926 <_printf_i+0x1d2>
 8012920:	0670      	lsls	r0, r6, #25
 8012922:	d5fb      	bpl.n	801291c <_printf_i+0x1c8>
 8012924:	8019      	strh	r1, [r3, #0]
 8012926:	2300      	movs	r3, #0
 8012928:	6123      	str	r3, [r4, #16]
 801292a:	4615      	mov	r5, r2
 801292c:	e7ba      	b.n	80128a4 <_printf_i+0x150>
 801292e:	682b      	ldr	r3, [r5, #0]
 8012930:	1d1a      	adds	r2, r3, #4
 8012932:	602a      	str	r2, [r5, #0]
 8012934:	681d      	ldr	r5, [r3, #0]
 8012936:	6862      	ldr	r2, [r4, #4]
 8012938:	2100      	movs	r1, #0
 801293a:	4628      	mov	r0, r5
 801293c:	f7ed fcd0 	bl	80002e0 <memchr>
 8012940:	b108      	cbz	r0, 8012946 <_printf_i+0x1f2>
 8012942:	1b40      	subs	r0, r0, r5
 8012944:	6060      	str	r0, [r4, #4]
 8012946:	6863      	ldr	r3, [r4, #4]
 8012948:	6123      	str	r3, [r4, #16]
 801294a:	2300      	movs	r3, #0
 801294c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012950:	e7a8      	b.n	80128a4 <_printf_i+0x150>
 8012952:	6923      	ldr	r3, [r4, #16]
 8012954:	462a      	mov	r2, r5
 8012956:	4649      	mov	r1, r9
 8012958:	4640      	mov	r0, r8
 801295a:	47d0      	blx	sl
 801295c:	3001      	adds	r0, #1
 801295e:	d0ab      	beq.n	80128b8 <_printf_i+0x164>
 8012960:	6823      	ldr	r3, [r4, #0]
 8012962:	079b      	lsls	r3, r3, #30
 8012964:	d413      	bmi.n	801298e <_printf_i+0x23a>
 8012966:	68e0      	ldr	r0, [r4, #12]
 8012968:	9b03      	ldr	r3, [sp, #12]
 801296a:	4298      	cmp	r0, r3
 801296c:	bfb8      	it	lt
 801296e:	4618      	movlt	r0, r3
 8012970:	e7a4      	b.n	80128bc <_printf_i+0x168>
 8012972:	2301      	movs	r3, #1
 8012974:	4632      	mov	r2, r6
 8012976:	4649      	mov	r1, r9
 8012978:	4640      	mov	r0, r8
 801297a:	47d0      	blx	sl
 801297c:	3001      	adds	r0, #1
 801297e:	d09b      	beq.n	80128b8 <_printf_i+0x164>
 8012980:	3501      	adds	r5, #1
 8012982:	68e3      	ldr	r3, [r4, #12]
 8012984:	9903      	ldr	r1, [sp, #12]
 8012986:	1a5b      	subs	r3, r3, r1
 8012988:	42ab      	cmp	r3, r5
 801298a:	dcf2      	bgt.n	8012972 <_printf_i+0x21e>
 801298c:	e7eb      	b.n	8012966 <_printf_i+0x212>
 801298e:	2500      	movs	r5, #0
 8012990:	f104 0619 	add.w	r6, r4, #25
 8012994:	e7f5      	b.n	8012982 <_printf_i+0x22e>
 8012996:	bf00      	nop
 8012998:	08015dd9 	.word	0x08015dd9
 801299c:	08015dea 	.word	0x08015dea

080129a0 <_sbrk_r>:
 80129a0:	b538      	push	{r3, r4, r5, lr}
 80129a2:	4d06      	ldr	r5, [pc, #24]	; (80129bc <_sbrk_r+0x1c>)
 80129a4:	2300      	movs	r3, #0
 80129a6:	4604      	mov	r4, r0
 80129a8:	4608      	mov	r0, r1
 80129aa:	602b      	str	r3, [r5, #0]
 80129ac:	f7ee fc04 	bl	80011b8 <_sbrk>
 80129b0:	1c43      	adds	r3, r0, #1
 80129b2:	d102      	bne.n	80129ba <_sbrk_r+0x1a>
 80129b4:	682b      	ldr	r3, [r5, #0]
 80129b6:	b103      	cbz	r3, 80129ba <_sbrk_r+0x1a>
 80129b8:	6023      	str	r3, [r4, #0]
 80129ba:	bd38      	pop	{r3, r4, r5, pc}
 80129bc:	240081b4 	.word	0x240081b4

080129c0 <__sread>:
 80129c0:	b510      	push	{r4, lr}
 80129c2:	460c      	mov	r4, r1
 80129c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129c8:	f000 fa6e 	bl	8012ea8 <_read_r>
 80129cc:	2800      	cmp	r0, #0
 80129ce:	bfab      	itete	ge
 80129d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80129d2:	89a3      	ldrhlt	r3, [r4, #12]
 80129d4:	181b      	addge	r3, r3, r0
 80129d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80129da:	bfac      	ite	ge
 80129dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80129de:	81a3      	strhlt	r3, [r4, #12]
 80129e0:	bd10      	pop	{r4, pc}

080129e2 <__swrite>:
 80129e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e6:	461f      	mov	r7, r3
 80129e8:	898b      	ldrh	r3, [r1, #12]
 80129ea:	05db      	lsls	r3, r3, #23
 80129ec:	4605      	mov	r5, r0
 80129ee:	460c      	mov	r4, r1
 80129f0:	4616      	mov	r6, r2
 80129f2:	d505      	bpl.n	8012a00 <__swrite+0x1e>
 80129f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129f8:	2302      	movs	r3, #2
 80129fa:	2200      	movs	r2, #0
 80129fc:	f000 f9d0 	bl	8012da0 <_lseek_r>
 8012a00:	89a3      	ldrh	r3, [r4, #12]
 8012a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a0a:	81a3      	strh	r3, [r4, #12]
 8012a0c:	4632      	mov	r2, r6
 8012a0e:	463b      	mov	r3, r7
 8012a10:	4628      	mov	r0, r5
 8012a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a16:	f000 b869 	b.w	8012aec <_write_r>

08012a1a <__sseek>:
 8012a1a:	b510      	push	{r4, lr}
 8012a1c:	460c      	mov	r4, r1
 8012a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a22:	f000 f9bd 	bl	8012da0 <_lseek_r>
 8012a26:	1c43      	adds	r3, r0, #1
 8012a28:	89a3      	ldrh	r3, [r4, #12]
 8012a2a:	bf15      	itete	ne
 8012a2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a36:	81a3      	strheq	r3, [r4, #12]
 8012a38:	bf18      	it	ne
 8012a3a:	81a3      	strhne	r3, [r4, #12]
 8012a3c:	bd10      	pop	{r4, pc}

08012a3e <__sclose>:
 8012a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a42:	f000 b8db 	b.w	8012bfc <_close_r>
	...

08012a48 <__swbuf_r>:
 8012a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4a:	460e      	mov	r6, r1
 8012a4c:	4614      	mov	r4, r2
 8012a4e:	4605      	mov	r5, r0
 8012a50:	b118      	cbz	r0, 8012a5a <__swbuf_r+0x12>
 8012a52:	6983      	ldr	r3, [r0, #24]
 8012a54:	b90b      	cbnz	r3, 8012a5a <__swbuf_r+0x12>
 8012a56:	f7ff fb1b 	bl	8012090 <__sinit>
 8012a5a:	4b21      	ldr	r3, [pc, #132]	; (8012ae0 <__swbuf_r+0x98>)
 8012a5c:	429c      	cmp	r4, r3
 8012a5e:	d12b      	bne.n	8012ab8 <__swbuf_r+0x70>
 8012a60:	686c      	ldr	r4, [r5, #4]
 8012a62:	69a3      	ldr	r3, [r4, #24]
 8012a64:	60a3      	str	r3, [r4, #8]
 8012a66:	89a3      	ldrh	r3, [r4, #12]
 8012a68:	071a      	lsls	r2, r3, #28
 8012a6a:	d52f      	bpl.n	8012acc <__swbuf_r+0x84>
 8012a6c:	6923      	ldr	r3, [r4, #16]
 8012a6e:	b36b      	cbz	r3, 8012acc <__swbuf_r+0x84>
 8012a70:	6923      	ldr	r3, [r4, #16]
 8012a72:	6820      	ldr	r0, [r4, #0]
 8012a74:	1ac0      	subs	r0, r0, r3
 8012a76:	6963      	ldr	r3, [r4, #20]
 8012a78:	b2f6      	uxtb	r6, r6
 8012a7a:	4283      	cmp	r3, r0
 8012a7c:	4637      	mov	r7, r6
 8012a7e:	dc04      	bgt.n	8012a8a <__swbuf_r+0x42>
 8012a80:	4621      	mov	r1, r4
 8012a82:	4628      	mov	r0, r5
 8012a84:	f000 f950 	bl	8012d28 <_fflush_r>
 8012a88:	bb30      	cbnz	r0, 8012ad8 <__swbuf_r+0x90>
 8012a8a:	68a3      	ldr	r3, [r4, #8]
 8012a8c:	3b01      	subs	r3, #1
 8012a8e:	60a3      	str	r3, [r4, #8]
 8012a90:	6823      	ldr	r3, [r4, #0]
 8012a92:	1c5a      	adds	r2, r3, #1
 8012a94:	6022      	str	r2, [r4, #0]
 8012a96:	701e      	strb	r6, [r3, #0]
 8012a98:	6963      	ldr	r3, [r4, #20]
 8012a9a:	3001      	adds	r0, #1
 8012a9c:	4283      	cmp	r3, r0
 8012a9e:	d004      	beq.n	8012aaa <__swbuf_r+0x62>
 8012aa0:	89a3      	ldrh	r3, [r4, #12]
 8012aa2:	07db      	lsls	r3, r3, #31
 8012aa4:	d506      	bpl.n	8012ab4 <__swbuf_r+0x6c>
 8012aa6:	2e0a      	cmp	r6, #10
 8012aa8:	d104      	bne.n	8012ab4 <__swbuf_r+0x6c>
 8012aaa:	4621      	mov	r1, r4
 8012aac:	4628      	mov	r0, r5
 8012aae:	f000 f93b 	bl	8012d28 <_fflush_r>
 8012ab2:	b988      	cbnz	r0, 8012ad8 <__swbuf_r+0x90>
 8012ab4:	4638      	mov	r0, r7
 8012ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ab8:	4b0a      	ldr	r3, [pc, #40]	; (8012ae4 <__swbuf_r+0x9c>)
 8012aba:	429c      	cmp	r4, r3
 8012abc:	d101      	bne.n	8012ac2 <__swbuf_r+0x7a>
 8012abe:	68ac      	ldr	r4, [r5, #8]
 8012ac0:	e7cf      	b.n	8012a62 <__swbuf_r+0x1a>
 8012ac2:	4b09      	ldr	r3, [pc, #36]	; (8012ae8 <__swbuf_r+0xa0>)
 8012ac4:	429c      	cmp	r4, r3
 8012ac6:	bf08      	it	eq
 8012ac8:	68ec      	ldreq	r4, [r5, #12]
 8012aca:	e7ca      	b.n	8012a62 <__swbuf_r+0x1a>
 8012acc:	4621      	mov	r1, r4
 8012ace:	4628      	mov	r0, r5
 8012ad0:	f000 f81e 	bl	8012b10 <__swsetup_r>
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	d0cb      	beq.n	8012a70 <__swbuf_r+0x28>
 8012ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8012adc:	e7ea      	b.n	8012ab4 <__swbuf_r+0x6c>
 8012ade:	bf00      	nop
 8012ae0:	08015d88 	.word	0x08015d88
 8012ae4:	08015da8 	.word	0x08015da8
 8012ae8:	08015d68 	.word	0x08015d68

08012aec <_write_r>:
 8012aec:	b538      	push	{r3, r4, r5, lr}
 8012aee:	4d07      	ldr	r5, [pc, #28]	; (8012b0c <_write_r+0x20>)
 8012af0:	4604      	mov	r4, r0
 8012af2:	4608      	mov	r0, r1
 8012af4:	4611      	mov	r1, r2
 8012af6:	2200      	movs	r2, #0
 8012af8:	602a      	str	r2, [r5, #0]
 8012afa:	461a      	mov	r2, r3
 8012afc:	f7ee f94a 	bl	8000d94 <_write>
 8012b00:	1c43      	adds	r3, r0, #1
 8012b02:	d102      	bne.n	8012b0a <_write_r+0x1e>
 8012b04:	682b      	ldr	r3, [r5, #0]
 8012b06:	b103      	cbz	r3, 8012b0a <_write_r+0x1e>
 8012b08:	6023      	str	r3, [r4, #0]
 8012b0a:	bd38      	pop	{r3, r4, r5, pc}
 8012b0c:	240081b4 	.word	0x240081b4

08012b10 <__swsetup_r>:
 8012b10:	4b32      	ldr	r3, [pc, #200]	; (8012bdc <__swsetup_r+0xcc>)
 8012b12:	b570      	push	{r4, r5, r6, lr}
 8012b14:	681d      	ldr	r5, [r3, #0]
 8012b16:	4606      	mov	r6, r0
 8012b18:	460c      	mov	r4, r1
 8012b1a:	b125      	cbz	r5, 8012b26 <__swsetup_r+0x16>
 8012b1c:	69ab      	ldr	r3, [r5, #24]
 8012b1e:	b913      	cbnz	r3, 8012b26 <__swsetup_r+0x16>
 8012b20:	4628      	mov	r0, r5
 8012b22:	f7ff fab5 	bl	8012090 <__sinit>
 8012b26:	4b2e      	ldr	r3, [pc, #184]	; (8012be0 <__swsetup_r+0xd0>)
 8012b28:	429c      	cmp	r4, r3
 8012b2a:	d10f      	bne.n	8012b4c <__swsetup_r+0x3c>
 8012b2c:	686c      	ldr	r4, [r5, #4]
 8012b2e:	89a3      	ldrh	r3, [r4, #12]
 8012b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b34:	0719      	lsls	r1, r3, #28
 8012b36:	d42c      	bmi.n	8012b92 <__swsetup_r+0x82>
 8012b38:	06dd      	lsls	r5, r3, #27
 8012b3a:	d411      	bmi.n	8012b60 <__swsetup_r+0x50>
 8012b3c:	2309      	movs	r3, #9
 8012b3e:	6033      	str	r3, [r6, #0]
 8012b40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b44:	81a3      	strh	r3, [r4, #12]
 8012b46:	f04f 30ff 	mov.w	r0, #4294967295
 8012b4a:	e03e      	b.n	8012bca <__swsetup_r+0xba>
 8012b4c:	4b25      	ldr	r3, [pc, #148]	; (8012be4 <__swsetup_r+0xd4>)
 8012b4e:	429c      	cmp	r4, r3
 8012b50:	d101      	bne.n	8012b56 <__swsetup_r+0x46>
 8012b52:	68ac      	ldr	r4, [r5, #8]
 8012b54:	e7eb      	b.n	8012b2e <__swsetup_r+0x1e>
 8012b56:	4b24      	ldr	r3, [pc, #144]	; (8012be8 <__swsetup_r+0xd8>)
 8012b58:	429c      	cmp	r4, r3
 8012b5a:	bf08      	it	eq
 8012b5c:	68ec      	ldreq	r4, [r5, #12]
 8012b5e:	e7e6      	b.n	8012b2e <__swsetup_r+0x1e>
 8012b60:	0758      	lsls	r0, r3, #29
 8012b62:	d512      	bpl.n	8012b8a <__swsetup_r+0x7a>
 8012b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b66:	b141      	cbz	r1, 8012b7a <__swsetup_r+0x6a>
 8012b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b6c:	4299      	cmp	r1, r3
 8012b6e:	d002      	beq.n	8012b76 <__swsetup_r+0x66>
 8012b70:	4630      	mov	r0, r6
 8012b72:	f7ff fb47 	bl	8012204 <_free_r>
 8012b76:	2300      	movs	r3, #0
 8012b78:	6363      	str	r3, [r4, #52]	; 0x34
 8012b7a:	89a3      	ldrh	r3, [r4, #12]
 8012b7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b80:	81a3      	strh	r3, [r4, #12]
 8012b82:	2300      	movs	r3, #0
 8012b84:	6063      	str	r3, [r4, #4]
 8012b86:	6923      	ldr	r3, [r4, #16]
 8012b88:	6023      	str	r3, [r4, #0]
 8012b8a:	89a3      	ldrh	r3, [r4, #12]
 8012b8c:	f043 0308 	orr.w	r3, r3, #8
 8012b90:	81a3      	strh	r3, [r4, #12]
 8012b92:	6923      	ldr	r3, [r4, #16]
 8012b94:	b94b      	cbnz	r3, 8012baa <__swsetup_r+0x9a>
 8012b96:	89a3      	ldrh	r3, [r4, #12]
 8012b98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ba0:	d003      	beq.n	8012baa <__swsetup_r+0x9a>
 8012ba2:	4621      	mov	r1, r4
 8012ba4:	4630      	mov	r0, r6
 8012ba6:	f000 f933 	bl	8012e10 <__smakebuf_r>
 8012baa:	89a0      	ldrh	r0, [r4, #12]
 8012bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012bb0:	f010 0301 	ands.w	r3, r0, #1
 8012bb4:	d00a      	beq.n	8012bcc <__swsetup_r+0xbc>
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	60a3      	str	r3, [r4, #8]
 8012bba:	6963      	ldr	r3, [r4, #20]
 8012bbc:	425b      	negs	r3, r3
 8012bbe:	61a3      	str	r3, [r4, #24]
 8012bc0:	6923      	ldr	r3, [r4, #16]
 8012bc2:	b943      	cbnz	r3, 8012bd6 <__swsetup_r+0xc6>
 8012bc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012bc8:	d1ba      	bne.n	8012b40 <__swsetup_r+0x30>
 8012bca:	bd70      	pop	{r4, r5, r6, pc}
 8012bcc:	0781      	lsls	r1, r0, #30
 8012bce:	bf58      	it	pl
 8012bd0:	6963      	ldrpl	r3, [r4, #20]
 8012bd2:	60a3      	str	r3, [r4, #8]
 8012bd4:	e7f4      	b.n	8012bc0 <__swsetup_r+0xb0>
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	e7f7      	b.n	8012bca <__swsetup_r+0xba>
 8012bda:	bf00      	nop
 8012bdc:	24000030 	.word	0x24000030
 8012be0:	08015d88 	.word	0x08015d88
 8012be4:	08015da8 	.word	0x08015da8
 8012be8:	08015d68 	.word	0x08015d68

08012bec <abort>:
 8012bec:	b508      	push	{r3, lr}
 8012bee:	2006      	movs	r0, #6
 8012bf0:	f000 f994 	bl	8012f1c <raise>
 8012bf4:	2001      	movs	r0, #1
 8012bf6:	f7ee fa83 	bl	8001100 <_exit>
	...

08012bfc <_close_r>:
 8012bfc:	b538      	push	{r3, r4, r5, lr}
 8012bfe:	4d06      	ldr	r5, [pc, #24]	; (8012c18 <_close_r+0x1c>)
 8012c00:	2300      	movs	r3, #0
 8012c02:	4604      	mov	r4, r0
 8012c04:	4608      	mov	r0, r1
 8012c06:	602b      	str	r3, [r5, #0]
 8012c08:	f7ee faa1 	bl	800114e <_close>
 8012c0c:	1c43      	adds	r3, r0, #1
 8012c0e:	d102      	bne.n	8012c16 <_close_r+0x1a>
 8012c10:	682b      	ldr	r3, [r5, #0]
 8012c12:	b103      	cbz	r3, 8012c16 <_close_r+0x1a>
 8012c14:	6023      	str	r3, [r4, #0]
 8012c16:	bd38      	pop	{r3, r4, r5, pc}
 8012c18:	240081b4 	.word	0x240081b4

08012c1c <__sflush_r>:
 8012c1c:	898a      	ldrh	r2, [r1, #12]
 8012c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c22:	4605      	mov	r5, r0
 8012c24:	0710      	lsls	r0, r2, #28
 8012c26:	460c      	mov	r4, r1
 8012c28:	d458      	bmi.n	8012cdc <__sflush_r+0xc0>
 8012c2a:	684b      	ldr	r3, [r1, #4]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	dc05      	bgt.n	8012c3c <__sflush_r+0x20>
 8012c30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	dc02      	bgt.n	8012c3c <__sflush_r+0x20>
 8012c36:	2000      	movs	r0, #0
 8012c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c3e:	2e00      	cmp	r6, #0
 8012c40:	d0f9      	beq.n	8012c36 <__sflush_r+0x1a>
 8012c42:	2300      	movs	r3, #0
 8012c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012c48:	682f      	ldr	r7, [r5, #0]
 8012c4a:	602b      	str	r3, [r5, #0]
 8012c4c:	d032      	beq.n	8012cb4 <__sflush_r+0x98>
 8012c4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c50:	89a3      	ldrh	r3, [r4, #12]
 8012c52:	075a      	lsls	r2, r3, #29
 8012c54:	d505      	bpl.n	8012c62 <__sflush_r+0x46>
 8012c56:	6863      	ldr	r3, [r4, #4]
 8012c58:	1ac0      	subs	r0, r0, r3
 8012c5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c5c:	b10b      	cbz	r3, 8012c62 <__sflush_r+0x46>
 8012c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c60:	1ac0      	subs	r0, r0, r3
 8012c62:	2300      	movs	r3, #0
 8012c64:	4602      	mov	r2, r0
 8012c66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c68:	6a21      	ldr	r1, [r4, #32]
 8012c6a:	4628      	mov	r0, r5
 8012c6c:	47b0      	blx	r6
 8012c6e:	1c43      	adds	r3, r0, #1
 8012c70:	89a3      	ldrh	r3, [r4, #12]
 8012c72:	d106      	bne.n	8012c82 <__sflush_r+0x66>
 8012c74:	6829      	ldr	r1, [r5, #0]
 8012c76:	291d      	cmp	r1, #29
 8012c78:	d82c      	bhi.n	8012cd4 <__sflush_r+0xb8>
 8012c7a:	4a2a      	ldr	r2, [pc, #168]	; (8012d24 <__sflush_r+0x108>)
 8012c7c:	40ca      	lsrs	r2, r1
 8012c7e:	07d6      	lsls	r6, r2, #31
 8012c80:	d528      	bpl.n	8012cd4 <__sflush_r+0xb8>
 8012c82:	2200      	movs	r2, #0
 8012c84:	6062      	str	r2, [r4, #4]
 8012c86:	04d9      	lsls	r1, r3, #19
 8012c88:	6922      	ldr	r2, [r4, #16]
 8012c8a:	6022      	str	r2, [r4, #0]
 8012c8c:	d504      	bpl.n	8012c98 <__sflush_r+0x7c>
 8012c8e:	1c42      	adds	r2, r0, #1
 8012c90:	d101      	bne.n	8012c96 <__sflush_r+0x7a>
 8012c92:	682b      	ldr	r3, [r5, #0]
 8012c94:	b903      	cbnz	r3, 8012c98 <__sflush_r+0x7c>
 8012c96:	6560      	str	r0, [r4, #84]	; 0x54
 8012c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c9a:	602f      	str	r7, [r5, #0]
 8012c9c:	2900      	cmp	r1, #0
 8012c9e:	d0ca      	beq.n	8012c36 <__sflush_r+0x1a>
 8012ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ca4:	4299      	cmp	r1, r3
 8012ca6:	d002      	beq.n	8012cae <__sflush_r+0x92>
 8012ca8:	4628      	mov	r0, r5
 8012caa:	f7ff faab 	bl	8012204 <_free_r>
 8012cae:	2000      	movs	r0, #0
 8012cb0:	6360      	str	r0, [r4, #52]	; 0x34
 8012cb2:	e7c1      	b.n	8012c38 <__sflush_r+0x1c>
 8012cb4:	6a21      	ldr	r1, [r4, #32]
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	4628      	mov	r0, r5
 8012cba:	47b0      	blx	r6
 8012cbc:	1c41      	adds	r1, r0, #1
 8012cbe:	d1c7      	bne.n	8012c50 <__sflush_r+0x34>
 8012cc0:	682b      	ldr	r3, [r5, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d0c4      	beq.n	8012c50 <__sflush_r+0x34>
 8012cc6:	2b1d      	cmp	r3, #29
 8012cc8:	d001      	beq.n	8012cce <__sflush_r+0xb2>
 8012cca:	2b16      	cmp	r3, #22
 8012ccc:	d101      	bne.n	8012cd2 <__sflush_r+0xb6>
 8012cce:	602f      	str	r7, [r5, #0]
 8012cd0:	e7b1      	b.n	8012c36 <__sflush_r+0x1a>
 8012cd2:	89a3      	ldrh	r3, [r4, #12]
 8012cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cd8:	81a3      	strh	r3, [r4, #12]
 8012cda:	e7ad      	b.n	8012c38 <__sflush_r+0x1c>
 8012cdc:	690f      	ldr	r7, [r1, #16]
 8012cde:	2f00      	cmp	r7, #0
 8012ce0:	d0a9      	beq.n	8012c36 <__sflush_r+0x1a>
 8012ce2:	0793      	lsls	r3, r2, #30
 8012ce4:	680e      	ldr	r6, [r1, #0]
 8012ce6:	bf08      	it	eq
 8012ce8:	694b      	ldreq	r3, [r1, #20]
 8012cea:	600f      	str	r7, [r1, #0]
 8012cec:	bf18      	it	ne
 8012cee:	2300      	movne	r3, #0
 8012cf0:	eba6 0807 	sub.w	r8, r6, r7
 8012cf4:	608b      	str	r3, [r1, #8]
 8012cf6:	f1b8 0f00 	cmp.w	r8, #0
 8012cfa:	dd9c      	ble.n	8012c36 <__sflush_r+0x1a>
 8012cfc:	6a21      	ldr	r1, [r4, #32]
 8012cfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012d00:	4643      	mov	r3, r8
 8012d02:	463a      	mov	r2, r7
 8012d04:	4628      	mov	r0, r5
 8012d06:	47b0      	blx	r6
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	dc06      	bgt.n	8012d1a <__sflush_r+0xfe>
 8012d0c:	89a3      	ldrh	r3, [r4, #12]
 8012d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d12:	81a3      	strh	r3, [r4, #12]
 8012d14:	f04f 30ff 	mov.w	r0, #4294967295
 8012d18:	e78e      	b.n	8012c38 <__sflush_r+0x1c>
 8012d1a:	4407      	add	r7, r0
 8012d1c:	eba8 0800 	sub.w	r8, r8, r0
 8012d20:	e7e9      	b.n	8012cf6 <__sflush_r+0xda>
 8012d22:	bf00      	nop
 8012d24:	20400001 	.word	0x20400001

08012d28 <_fflush_r>:
 8012d28:	b538      	push	{r3, r4, r5, lr}
 8012d2a:	690b      	ldr	r3, [r1, #16]
 8012d2c:	4605      	mov	r5, r0
 8012d2e:	460c      	mov	r4, r1
 8012d30:	b913      	cbnz	r3, 8012d38 <_fflush_r+0x10>
 8012d32:	2500      	movs	r5, #0
 8012d34:	4628      	mov	r0, r5
 8012d36:	bd38      	pop	{r3, r4, r5, pc}
 8012d38:	b118      	cbz	r0, 8012d42 <_fflush_r+0x1a>
 8012d3a:	6983      	ldr	r3, [r0, #24]
 8012d3c:	b90b      	cbnz	r3, 8012d42 <_fflush_r+0x1a>
 8012d3e:	f7ff f9a7 	bl	8012090 <__sinit>
 8012d42:	4b14      	ldr	r3, [pc, #80]	; (8012d94 <_fflush_r+0x6c>)
 8012d44:	429c      	cmp	r4, r3
 8012d46:	d11b      	bne.n	8012d80 <_fflush_r+0x58>
 8012d48:	686c      	ldr	r4, [r5, #4]
 8012d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d0ef      	beq.n	8012d32 <_fflush_r+0xa>
 8012d52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d54:	07d0      	lsls	r0, r2, #31
 8012d56:	d404      	bmi.n	8012d62 <_fflush_r+0x3a>
 8012d58:	0599      	lsls	r1, r3, #22
 8012d5a:	d402      	bmi.n	8012d62 <_fflush_r+0x3a>
 8012d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d5e:	f7ff fa47 	bl	80121f0 <__retarget_lock_acquire_recursive>
 8012d62:	4628      	mov	r0, r5
 8012d64:	4621      	mov	r1, r4
 8012d66:	f7ff ff59 	bl	8012c1c <__sflush_r>
 8012d6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d6c:	07da      	lsls	r2, r3, #31
 8012d6e:	4605      	mov	r5, r0
 8012d70:	d4e0      	bmi.n	8012d34 <_fflush_r+0xc>
 8012d72:	89a3      	ldrh	r3, [r4, #12]
 8012d74:	059b      	lsls	r3, r3, #22
 8012d76:	d4dd      	bmi.n	8012d34 <_fflush_r+0xc>
 8012d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d7a:	f7ff fa3a 	bl	80121f2 <__retarget_lock_release_recursive>
 8012d7e:	e7d9      	b.n	8012d34 <_fflush_r+0xc>
 8012d80:	4b05      	ldr	r3, [pc, #20]	; (8012d98 <_fflush_r+0x70>)
 8012d82:	429c      	cmp	r4, r3
 8012d84:	d101      	bne.n	8012d8a <_fflush_r+0x62>
 8012d86:	68ac      	ldr	r4, [r5, #8]
 8012d88:	e7df      	b.n	8012d4a <_fflush_r+0x22>
 8012d8a:	4b04      	ldr	r3, [pc, #16]	; (8012d9c <_fflush_r+0x74>)
 8012d8c:	429c      	cmp	r4, r3
 8012d8e:	bf08      	it	eq
 8012d90:	68ec      	ldreq	r4, [r5, #12]
 8012d92:	e7da      	b.n	8012d4a <_fflush_r+0x22>
 8012d94:	08015d88 	.word	0x08015d88
 8012d98:	08015da8 	.word	0x08015da8
 8012d9c:	08015d68 	.word	0x08015d68

08012da0 <_lseek_r>:
 8012da0:	b538      	push	{r3, r4, r5, lr}
 8012da2:	4d07      	ldr	r5, [pc, #28]	; (8012dc0 <_lseek_r+0x20>)
 8012da4:	4604      	mov	r4, r0
 8012da6:	4608      	mov	r0, r1
 8012da8:	4611      	mov	r1, r2
 8012daa:	2200      	movs	r2, #0
 8012dac:	602a      	str	r2, [r5, #0]
 8012dae:	461a      	mov	r2, r3
 8012db0:	f7ee f9f4 	bl	800119c <_lseek>
 8012db4:	1c43      	adds	r3, r0, #1
 8012db6:	d102      	bne.n	8012dbe <_lseek_r+0x1e>
 8012db8:	682b      	ldr	r3, [r5, #0]
 8012dba:	b103      	cbz	r3, 8012dbe <_lseek_r+0x1e>
 8012dbc:	6023      	str	r3, [r4, #0]
 8012dbe:	bd38      	pop	{r3, r4, r5, pc}
 8012dc0:	240081b4 	.word	0x240081b4

08012dc4 <__swhatbuf_r>:
 8012dc4:	b570      	push	{r4, r5, r6, lr}
 8012dc6:	460e      	mov	r6, r1
 8012dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dcc:	2900      	cmp	r1, #0
 8012dce:	b096      	sub	sp, #88	; 0x58
 8012dd0:	4614      	mov	r4, r2
 8012dd2:	461d      	mov	r5, r3
 8012dd4:	da08      	bge.n	8012de8 <__swhatbuf_r+0x24>
 8012dd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	602a      	str	r2, [r5, #0]
 8012dde:	061a      	lsls	r2, r3, #24
 8012de0:	d410      	bmi.n	8012e04 <__swhatbuf_r+0x40>
 8012de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012de6:	e00e      	b.n	8012e06 <__swhatbuf_r+0x42>
 8012de8:	466a      	mov	r2, sp
 8012dea:	f000 f8b3 	bl	8012f54 <_fstat_r>
 8012dee:	2800      	cmp	r0, #0
 8012df0:	dbf1      	blt.n	8012dd6 <__swhatbuf_r+0x12>
 8012df2:	9a01      	ldr	r2, [sp, #4]
 8012df4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012df8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012dfc:	425a      	negs	r2, r3
 8012dfe:	415a      	adcs	r2, r3
 8012e00:	602a      	str	r2, [r5, #0]
 8012e02:	e7ee      	b.n	8012de2 <__swhatbuf_r+0x1e>
 8012e04:	2340      	movs	r3, #64	; 0x40
 8012e06:	2000      	movs	r0, #0
 8012e08:	6023      	str	r3, [r4, #0]
 8012e0a:	b016      	add	sp, #88	; 0x58
 8012e0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012e10 <__smakebuf_r>:
 8012e10:	898b      	ldrh	r3, [r1, #12]
 8012e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012e14:	079d      	lsls	r5, r3, #30
 8012e16:	4606      	mov	r6, r0
 8012e18:	460c      	mov	r4, r1
 8012e1a:	d507      	bpl.n	8012e2c <__smakebuf_r+0x1c>
 8012e1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e20:	6023      	str	r3, [r4, #0]
 8012e22:	6123      	str	r3, [r4, #16]
 8012e24:	2301      	movs	r3, #1
 8012e26:	6163      	str	r3, [r4, #20]
 8012e28:	b002      	add	sp, #8
 8012e2a:	bd70      	pop	{r4, r5, r6, pc}
 8012e2c:	ab01      	add	r3, sp, #4
 8012e2e:	466a      	mov	r2, sp
 8012e30:	f7ff ffc8 	bl	8012dc4 <__swhatbuf_r>
 8012e34:	9900      	ldr	r1, [sp, #0]
 8012e36:	4605      	mov	r5, r0
 8012e38:	4630      	mov	r0, r6
 8012e3a:	f7ff fa4f 	bl	80122dc <_malloc_r>
 8012e3e:	b948      	cbnz	r0, 8012e54 <__smakebuf_r+0x44>
 8012e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e44:	059a      	lsls	r2, r3, #22
 8012e46:	d4ef      	bmi.n	8012e28 <__smakebuf_r+0x18>
 8012e48:	f023 0303 	bic.w	r3, r3, #3
 8012e4c:	f043 0302 	orr.w	r3, r3, #2
 8012e50:	81a3      	strh	r3, [r4, #12]
 8012e52:	e7e3      	b.n	8012e1c <__smakebuf_r+0xc>
 8012e54:	4b0d      	ldr	r3, [pc, #52]	; (8012e8c <__smakebuf_r+0x7c>)
 8012e56:	62b3      	str	r3, [r6, #40]	; 0x28
 8012e58:	89a3      	ldrh	r3, [r4, #12]
 8012e5a:	6020      	str	r0, [r4, #0]
 8012e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e60:	81a3      	strh	r3, [r4, #12]
 8012e62:	9b00      	ldr	r3, [sp, #0]
 8012e64:	6163      	str	r3, [r4, #20]
 8012e66:	9b01      	ldr	r3, [sp, #4]
 8012e68:	6120      	str	r0, [r4, #16]
 8012e6a:	b15b      	cbz	r3, 8012e84 <__smakebuf_r+0x74>
 8012e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e70:	4630      	mov	r0, r6
 8012e72:	f000 f881 	bl	8012f78 <_isatty_r>
 8012e76:	b128      	cbz	r0, 8012e84 <__smakebuf_r+0x74>
 8012e78:	89a3      	ldrh	r3, [r4, #12]
 8012e7a:	f023 0303 	bic.w	r3, r3, #3
 8012e7e:	f043 0301 	orr.w	r3, r3, #1
 8012e82:	81a3      	strh	r3, [r4, #12]
 8012e84:	89a0      	ldrh	r0, [r4, #12]
 8012e86:	4305      	orrs	r5, r0
 8012e88:	81a5      	strh	r5, [r4, #12]
 8012e8a:	e7cd      	b.n	8012e28 <__smakebuf_r+0x18>
 8012e8c:	08012029 	.word	0x08012029

08012e90 <__malloc_lock>:
 8012e90:	4801      	ldr	r0, [pc, #4]	; (8012e98 <__malloc_lock+0x8>)
 8012e92:	f7ff b9ad 	b.w	80121f0 <__retarget_lock_acquire_recursive>
 8012e96:	bf00      	nop
 8012e98:	240081b8 	.word	0x240081b8

08012e9c <__malloc_unlock>:
 8012e9c:	4801      	ldr	r0, [pc, #4]	; (8012ea4 <__malloc_unlock+0x8>)
 8012e9e:	f7ff b9a8 	b.w	80121f2 <__retarget_lock_release_recursive>
 8012ea2:	bf00      	nop
 8012ea4:	240081b8 	.word	0x240081b8

08012ea8 <_read_r>:
 8012ea8:	b538      	push	{r3, r4, r5, lr}
 8012eaa:	4d07      	ldr	r5, [pc, #28]	; (8012ec8 <_read_r+0x20>)
 8012eac:	4604      	mov	r4, r0
 8012eae:	4608      	mov	r0, r1
 8012eb0:	4611      	mov	r1, r2
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	602a      	str	r2, [r5, #0]
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	f7ee f92c 	bl	8001114 <_read>
 8012ebc:	1c43      	adds	r3, r0, #1
 8012ebe:	d102      	bne.n	8012ec6 <_read_r+0x1e>
 8012ec0:	682b      	ldr	r3, [r5, #0]
 8012ec2:	b103      	cbz	r3, 8012ec6 <_read_r+0x1e>
 8012ec4:	6023      	str	r3, [r4, #0]
 8012ec6:	bd38      	pop	{r3, r4, r5, pc}
 8012ec8:	240081b4 	.word	0x240081b4

08012ecc <_raise_r>:
 8012ecc:	291f      	cmp	r1, #31
 8012ece:	b538      	push	{r3, r4, r5, lr}
 8012ed0:	4604      	mov	r4, r0
 8012ed2:	460d      	mov	r5, r1
 8012ed4:	d904      	bls.n	8012ee0 <_raise_r+0x14>
 8012ed6:	2316      	movs	r3, #22
 8012ed8:	6003      	str	r3, [r0, #0]
 8012eda:	f04f 30ff 	mov.w	r0, #4294967295
 8012ede:	bd38      	pop	{r3, r4, r5, pc}
 8012ee0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012ee2:	b112      	cbz	r2, 8012eea <_raise_r+0x1e>
 8012ee4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ee8:	b94b      	cbnz	r3, 8012efe <_raise_r+0x32>
 8012eea:	4620      	mov	r0, r4
 8012eec:	f000 f830 	bl	8012f50 <_getpid_r>
 8012ef0:	462a      	mov	r2, r5
 8012ef2:	4601      	mov	r1, r0
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012efa:	f000 b817 	b.w	8012f2c <_kill_r>
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d00a      	beq.n	8012f18 <_raise_r+0x4c>
 8012f02:	1c59      	adds	r1, r3, #1
 8012f04:	d103      	bne.n	8012f0e <_raise_r+0x42>
 8012f06:	2316      	movs	r3, #22
 8012f08:	6003      	str	r3, [r0, #0]
 8012f0a:	2001      	movs	r0, #1
 8012f0c:	e7e7      	b.n	8012ede <_raise_r+0x12>
 8012f0e:	2400      	movs	r4, #0
 8012f10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012f14:	4628      	mov	r0, r5
 8012f16:	4798      	blx	r3
 8012f18:	2000      	movs	r0, #0
 8012f1a:	e7e0      	b.n	8012ede <_raise_r+0x12>

08012f1c <raise>:
 8012f1c:	4b02      	ldr	r3, [pc, #8]	; (8012f28 <raise+0xc>)
 8012f1e:	4601      	mov	r1, r0
 8012f20:	6818      	ldr	r0, [r3, #0]
 8012f22:	f7ff bfd3 	b.w	8012ecc <_raise_r>
 8012f26:	bf00      	nop
 8012f28:	24000030 	.word	0x24000030

08012f2c <_kill_r>:
 8012f2c:	b538      	push	{r3, r4, r5, lr}
 8012f2e:	4d07      	ldr	r5, [pc, #28]	; (8012f4c <_kill_r+0x20>)
 8012f30:	2300      	movs	r3, #0
 8012f32:	4604      	mov	r4, r0
 8012f34:	4608      	mov	r0, r1
 8012f36:	4611      	mov	r1, r2
 8012f38:	602b      	str	r3, [r5, #0]
 8012f3a:	f7ee f8cf 	bl	80010dc <_kill>
 8012f3e:	1c43      	adds	r3, r0, #1
 8012f40:	d102      	bne.n	8012f48 <_kill_r+0x1c>
 8012f42:	682b      	ldr	r3, [r5, #0]
 8012f44:	b103      	cbz	r3, 8012f48 <_kill_r+0x1c>
 8012f46:	6023      	str	r3, [r4, #0]
 8012f48:	bd38      	pop	{r3, r4, r5, pc}
 8012f4a:	bf00      	nop
 8012f4c:	240081b4 	.word	0x240081b4

08012f50 <_getpid_r>:
 8012f50:	f7ee b8bc 	b.w	80010cc <_getpid>

08012f54 <_fstat_r>:
 8012f54:	b538      	push	{r3, r4, r5, lr}
 8012f56:	4d07      	ldr	r5, [pc, #28]	; (8012f74 <_fstat_r+0x20>)
 8012f58:	2300      	movs	r3, #0
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	4608      	mov	r0, r1
 8012f5e:	4611      	mov	r1, r2
 8012f60:	602b      	str	r3, [r5, #0]
 8012f62:	f7ee f900 	bl	8001166 <_fstat>
 8012f66:	1c43      	adds	r3, r0, #1
 8012f68:	d102      	bne.n	8012f70 <_fstat_r+0x1c>
 8012f6a:	682b      	ldr	r3, [r5, #0]
 8012f6c:	b103      	cbz	r3, 8012f70 <_fstat_r+0x1c>
 8012f6e:	6023      	str	r3, [r4, #0]
 8012f70:	bd38      	pop	{r3, r4, r5, pc}
 8012f72:	bf00      	nop
 8012f74:	240081b4 	.word	0x240081b4

08012f78 <_isatty_r>:
 8012f78:	b538      	push	{r3, r4, r5, lr}
 8012f7a:	4d06      	ldr	r5, [pc, #24]	; (8012f94 <_isatty_r+0x1c>)
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	4604      	mov	r4, r0
 8012f80:	4608      	mov	r0, r1
 8012f82:	602b      	str	r3, [r5, #0]
 8012f84:	f7ee f8ff 	bl	8001186 <_isatty>
 8012f88:	1c43      	adds	r3, r0, #1
 8012f8a:	d102      	bne.n	8012f92 <_isatty_r+0x1a>
 8012f8c:	682b      	ldr	r3, [r5, #0]
 8012f8e:	b103      	cbz	r3, 8012f92 <_isatty_r+0x1a>
 8012f90:	6023      	str	r3, [r4, #0]
 8012f92:	bd38      	pop	{r3, r4, r5, pc}
 8012f94:	240081b4 	.word	0x240081b4

08012f98 <_init>:
 8012f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f9a:	bf00      	nop
 8012f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f9e:	bc08      	pop	{r3}
 8012fa0:	469e      	mov	lr, r3
 8012fa2:	4770      	bx	lr

08012fa4 <_fini>:
 8012fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fa6:	bf00      	nop
 8012fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012faa:	bc08      	pop	{r3}
 8012fac:	469e      	mov	lr, r3
 8012fae:	4770      	bx	lr
