
LWIPPING_ST_TO_PC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .lwip_sec     00000200  30040000  08000000  00020000  2**2
                  ALLOC
  1 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00013bc0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002f50  08013e60  08013e60  00023e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08016db0  08016db0  0003007c  2**0
                  CONTENTS
  5 .ARM          00000008  08016db0  08016db0  00026db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08016db8  08016db8  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08016db8  08016db8  00026db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08016dbc  08016dbc  00026dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000007c  24000000  08016dc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00008174  2400007c  08016e3c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  240081f0  08016e3c  000381f0  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030aba  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000067f3  00000000  00000000  00060b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002110  00000000  00000000  00067358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002028  00000000  00000000  00069468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004819d  00000000  00000000  0006b490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035e63  00000000  00000000  000b362d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019d5f6  00000000  00000000  000e9490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00286a86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009484  00000000  00000000  00286ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013e48 	.word	0x08013e48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	08013e48 	.word	0x08013e48

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d013      	beq.n	80007f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00b      	beq.n	80007f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007d8:	e000      	b.n	80007dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80007da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f9      	beq.n	80007da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <send_icmp_ping>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void send_icmp_ping(struct netif *netif)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b092      	sub	sp, #72	; 0x48
 8000804:	af02      	add	r7, sp, #8
 8000806:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr;

  ip_addr_t src_ip, dest_ip;

  // Set the source and destination IP addresses
  IP4_ADDR(&src_ip, 192, 168, 0, 123);
 8000808:	4b59      	ldr	r3, [pc, #356]	; (8000970 <send_icmp_ping+0x170>)
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  IP4_ADDR(&dest_ip, 192, 168, 0, 156);
 800080c:	4b59      	ldr	r3, [pc, #356]	; (8000974 <send_icmp_ping+0x174>)
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  // Get the network interface for the desired IP address

  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr), PBUF_RAM);
 8000810:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000814:	2108      	movs	r1, #8
 8000816:	2022      	movs	r0, #34	; 0x22
 8000818:	f00c f8a2 	bl	800c960 <pbuf_alloc>
 800081c:	63f8      	str	r0, [r7, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN,
 800081e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000822:	211c      	movs	r1, #28
 8000824:	2022      	movs	r0, #34	; 0x22
 8000826:	f00c f89b 	bl	800c960 <pbuf_alloc>
 800082a:	63b8      	str	r0, [r7, #56]	; 0x38
                   PBUF_RAM);

  iphdr = (struct ip_hdr *)p->payload;
 800082c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	637b      	str	r3, [r7, #52]	; 0x34
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8000832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	633b      	str	r3, [r7, #48]	; 0x30

  // configure the icmp header fields
  icmphdr->type = 8;
 8000838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800083a:	2208      	movs	r2, #8
 800083c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = 0;
 800083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000840:	2200      	movs	r2, #0
 8000842:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0x5555;
 8000844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000846:	2200      	movs	r2, #0
 8000848:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 800084c:	711a      	strb	r2, [r3, #4]
 800084e:	2200      	movs	r2, #0
 8000850:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8000854:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 1;
 8000856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000858:	2200      	movs	r2, #0
 800085a:	f042 0201 	orr.w	r2, r2, #1
 800085e:	719a      	strb	r2, [r3, #6]
 8000860:	2200      	movs	r2, #0
 8000862:	71da      	strb	r2, [r3, #7]
  icmphdr->chksum = 0;
 8000864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000866:	2200      	movs	r2, #0
 8000868:	709a      	strb	r2, [r3, #2]
 800086a:	2200      	movs	r2, #0
 800086c:	70da      	strb	r2, [r3, #3]
  icmphdr->chksum = inet_chksum(icmphdr, sizeof(struct icmp_echo_hdr));
 800086e:	2108      	movs	r1, #8
 8000870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000872:	f009 fee0 	bl	800a636 <inet_chksum>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800087c:	805a      	strh	r2, [r3, #2]

  // configure the ip header fields
  iphdr->_ttl = 255;
 800087e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000880:	22ff      	movs	r2, #255	; 0xff
 8000882:	721a      	strb	r2, [r3, #8]
  iphdr->src.addr = src_ip.addr;
 8000884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000888:	60da      	str	r2, [r3, #12]
  iphdr->dest.addr = dest_ip.addr;
 800088a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800088c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800088e:	611a      	str	r2, [r3, #16]
  iphdr->_tos = 0;
 8000890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000892:	2200      	movs	r2, #0
 8000894:	705a      	strb	r2, [r3, #1]
  iphdr->_offset = 0;
 8000896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000898:	2200      	movs	r2, #0
 800089a:	719a      	strb	r2, [r3, #6]
 800089c:	2200      	movs	r2, #0
 800089e:	71da      	strb	r2, [r3, #7]
  iphdr->_proto = 1;
 80008a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a2:	2201      	movs	r2, #1
 80008a4:	725a      	strb	r2, [r3, #9]
  iphdr->_v_hl = 0x45;
 80008a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a8:	2245      	movs	r2, #69	; 0x45
 80008aa:	701a      	strb	r2, [r3, #0]
  iphdr->_id = 0xABCD;
 80008ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ae:	2200      	movs	r2, #0
 80008b0:	f062 0232 	orn	r2, r2, #50	; 0x32
 80008b4:	711a      	strb	r2, [r3, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	f062 0254 	orn	r2, r2, #84	; 0x54
 80008bc:	715a      	strb	r2, [r3, #5]
  iphdr->_len = htons(46);
 80008be:	202e      	movs	r0, #46	; 0x2e
 80008c0:	f008 fc12 	bl	80090e8 <lwip_htons>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ca:	805a      	strh	r2, [r3, #2]
  iphdr->_chksum = 0;
 80008cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ce:	2200      	movs	r2, #0
 80008d0:	729a      	strb	r2, [r3, #10]
 80008d2:	2200      	movs	r2, #0
 80008d4:	72da      	strb	r2, [r3, #11]
  iphdr->_chksum = inet_chksum(iphdr, IP_HLEN);
 80008d6:	2114      	movs	r1, #20
 80008d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80008da:	f009 feac 	bl	800a636 <inet_chksum>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e4:	815a      	strh	r2, [r3, #10]


  SMEMCPY((u8_t *)p->payload + (IP_HLEN), (u8_t *)q->payload,
 80008e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f103 0014 	add.w	r0, r3, #20
 80008ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2208      	movs	r2, #8
 80008f4:	4619      	mov	r1, r3
 80008f6:	f012 fa41 	bl	8012d7c <memcpy>
		  sizeof(struct icmp_echo_hdr));

  etharp_request(netif, &dest_ip);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f009 fba1 	bl	800a048 <etharp_request>

  struct eth_addr mac_src;
  struct eth_addr mac_dst;  // Destination MAC address
  //uint8_t mac_dst_addr[6] = {0x00, 0x80, 0xE1, 0x00, 0x00, 0x01};
  //uint8_t mac_dst_addr[6] = {0x9C, 0x7B, 0xEF, 0xC3, 0x8D, 0xF3};
  uint8_t mac_dst_addr[6] = {0x06, 0x06, 0x06, 0x06, 0x06, 0x05};
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <send_icmp_ping+0x178>)
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000910:	6018      	str	r0, [r3, #0]
 8000912:	3304      	adds	r3, #4
 8000914:	8019      	strh	r1, [r3, #0]
  memcpy(mac_src.addr, netif->hwaddr, 6);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	6810      	ldr	r0, [r2, #0]
 8000922:	6018      	str	r0, [r3, #0]
 8000924:	8892      	ldrh	r2, [r2, #4]
 8000926:	809a      	strh	r2, [r3, #4]
  memcpy(mac_dst.addr, mac_dst_addr, 6);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	f107 020c 	add.w	r2, r7, #12
 8000930:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000934:	6018      	str	r0, [r3, #0]
 8000936:	3304      	adds	r3, #4
 8000938:	8019      	strh	r1, [r3, #0]
  u16_t eth_type = ETHTYPE_IP;  // Ethernet type for IP packets
 800093a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800093e:	85fb      	strh	r3, [r7, #46]	; 0x2e

 if(ethernet_output(netif, p, &mac_src, &mac_dst, eth_type) != ERR_OK){
 8000940:	f107 0114 	add.w	r1, r7, #20
 8000944:	f107 021c 	add.w	r2, r7, #28
 8000948:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	460b      	mov	r3, r1
 800094e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f009 fc19 	bl	800a188 <ethernet_output>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d005      	beq.n	8000968 <send_icmp_ping+0x168>
	 pbuf_free(q);
 800095c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800095e:	f00c fae3 	bl	800cf28 <pbuf_free>
	 pbuf_free(p);
 8000962:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000964:	f00c fae0 	bl	800cf28 <pbuf_free>
	 return;
 }
}
 8000968:	3740      	adds	r7, #64	; 0x40
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	7b00a8c0 	.word	0x7b00a8c0
 8000974:	9c00a8c0 	.word	0x9c00a8c0
 8000978:	08013e60 	.word	0x08013e60

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  //int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000982:	f000 fab1 	bl	8000ee8 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000986:	4b69      	ldr	r3, [pc, #420]	; (8000b2c <main+0x1b0>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098e:	2b00      	cmp	r3, #0
 8000990:	d11b      	bne.n	80009ca <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000992:	f3bf 8f4f 	dsb	sy
}
 8000996:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000998:	f3bf 8f6f 	isb	sy
}
 800099c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800099e:	4b63      	ldr	r3, [pc, #396]	; (8000b2c <main+0x1b0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009a6:	f3bf 8f4f 	dsb	sy
}
 80009aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009ac:	f3bf 8f6f 	isb	sy
}
 80009b0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009b2:	4b5e      	ldr	r3, [pc, #376]	; (8000b2c <main+0x1b0>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a5d      	ldr	r2, [pc, #372]	; (8000b2c <main+0x1b0>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009be:	f3bf 8f4f 	dsb	sy
}
 80009c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009c4:	f3bf 8f6f 	isb	sy
}
 80009c8:	e000      	b.n	80009cc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009ca:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009cc:	4b57      	ldr	r3, [pc, #348]	; (8000b2c <main+0x1b0>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d138      	bne.n	8000a4a <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009d8:	4b54      	ldr	r3, [pc, #336]	; (8000b2c <main+0x1b0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009e0:	f3bf 8f4f 	dsb	sy
}
 80009e4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80009e6:	4b51      	ldr	r3, [pc, #324]	; (8000b2c <main+0x1b0>)
 80009e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009ec:	613b      	str	r3, [r7, #16]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	0b5b      	lsrs	r3, r3, #13
 80009f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009f6:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a00:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	015a      	lsls	r2, r3, #5
 8000a06:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a0a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a10:	4946      	ldr	r1, [pc, #280]	; (8000b2c <main+0x1b0>)
 8000a12:	4313      	orrs	r3, r2
 8000a14:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1ef      	bne.n	8000a02 <main+0x86>
    } while(sets-- != 0U);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	1e5a      	subs	r2, r3, #1
 8000a26:	60fa      	str	r2, [r7, #12]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1e5      	bne.n	80009f8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a2c:	f3bf 8f4f 	dsb	sy
}
 8000a30:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a32:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <main+0x1b0>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a3d      	ldr	r2, [pc, #244]	; (8000b2c <main+0x1b0>)
 8000a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a3e:	f3bf 8f4f 	dsb	sy
}
 8000a42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a44:	f3bf 8f6f 	isb	sy
}
 8000a48:	e000      	b.n	8000a4c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a4a:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f000 fd0c 	bl	8001468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f874 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f000 f9c6 	bl	8000de4 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a58:	f000 f992 	bl	8000d80 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000a5c:	f007 fd22 	bl	80084a4 <MX_LWIP_Init>
  MX_USART3_UART_Init();
 8000a60:	f000 f942 	bl	8000ce8 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8000a64:	f000 f8e6 	bl	8000c34 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4831      	ldr	r0, [pc, #196]	; (8000b30 <main+0x1b4>)
 8000a6c:	f005 faf4 	bl	8006058 <HAL_TIM_PWM_Start>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <main+0x1b0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a78:	f3bf 8f4f 	dsb	sy
}
 8000a7c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <main+0x1b0>)
 8000a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a84:	61fb      	str	r3, [r7, #28]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	0b5b      	lsrs	r3, r3, #13
 8000a8a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a8e:	61bb      	str	r3, [r7, #24]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a98:	617b      	str	r3, [r7, #20]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	015a      	lsls	r2, r3, #5
 8000a9e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000aa2:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000aa8:	4920      	ldr	r1, [pc, #128]	; (8000b2c <main+0x1b0>)
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	1e5a      	subs	r2, r3, #1
 8000ab4:	617a      	str	r2, [r7, #20]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1ef      	bne.n	8000a9a <main+0x11e>
    } while(sets-- != 0U);
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	1e5a      	subs	r2, r3, #1
 8000abe:	61ba      	str	r2, [r7, #24]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1e5      	bne.n	8000a90 <main+0x114>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac4:	f3bf 8f4f 	dsb	sy
}
 8000ac8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aca:	f3bf 8f6f 	isb	sy
}
 8000ace:	bf00      	nop
}
 8000ad0:	bf00      	nop
  SCB_CleanInvalidateDCache();
  ip_addr_t src_ip, dest_ip;
  struct netif *netif;
  struct pbuf *r = NULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24

  // Set the source and destination IP addresses
  IP4_ADDR(&src_ip, 192, 168, 0, 123);
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <main+0x1b8>)
 8000ad8:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&dest_ip, 192, 168, 0, 156);
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <main+0x1bc>)
 8000adc:	603b      	str	r3, [r7, #0]
  netif = ip4_route_src(&src_ip, &dest_ip);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f009 fe1d 	bl	800a720 <ip4_route>
 8000ae6:	6238      	str	r0, [r7, #32]
  r = pbuf_alloc(PBUF_RAW_TX, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8000ae8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000aec:	211c      	movs	r1, #28
 8000aee:	2000      	movs	r0, #0
 8000af0:	f00b ff36 	bl	800c960 <pbuf_alloc>
 8000af4:	6278      	str	r0, [r7, #36]	; 0x24
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //MX_LWIP_Process();
	  //send_icmp_ping();
	  netif = ip4_route_src(&src_ip, &dest_ip);
 8000af6:	463b      	mov	r3, r7
 8000af8:	4618      	mov	r0, r3
 8000afa:	f009 fe11 	bl	800a720 <ip4_route>
 8000afe:	6238      	str	r0, [r7, #32]
	  etharp_request(netif, &dest_ip);
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	6a38      	ldr	r0, [r7, #32]
 8000b06:	f009 fa9f 	bl	800a048 <etharp_request>
	  HAL_Delay(2000);
 8000b0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b0e:	f000 fd3d 	bl	800158c <HAL_Delay>
	  //ethernet_input(r, netif);
	  MX_LWIP_Process();
 8000b12:	f007 fe13 	bl	800873c <MX_LWIP_Process>
	  send_icmp_ping(netif);
 8000b16:	6a38      	ldr	r0, [r7, #32]
 8000b18:	f7ff fe72 	bl	8000800 <send_icmp_ping>
	  HAL_Delay(2000);
 8000b1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b20:	f000 fd34 	bl	800158c <HAL_Delay>
	  MX_LWIP_Process();
 8000b24:	f007 fe0a 	bl	800873c <MX_LWIP_Process>
	  netif = ip4_route_src(&src_ip, &dest_ip);
 8000b28:	e7e5      	b.n	8000af6 <main+0x17a>
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	24000098 	.word	0x24000098
 8000b34:	7b00a8c0 	.word	0x7b00a8c0
 8000b38:	9c00a8c0 	.word	0x9c00a8c0

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	; 0x70
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	224c      	movs	r2, #76	; 0x4c
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f012 f924 	bl	8012d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2220      	movs	r2, #32
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f012 f91e 	bl	8012d98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b5c:	2004      	movs	r0, #4
 8000b5e:	f002 fba7 	bl	80032b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <SystemClock_Config+0xf0>)
 8000b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6a:	4a30      	ldr	r2, [pc, #192]	; (8000c2c <SystemClock_Config+0xf0>)
 8000b6c:	f023 0301 	bic.w	r3, r3, #1
 8000b70:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b72:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <SystemClock_Config+0xf0>)
 8000b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <SystemClock_Config+0xf4>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b84:	4a2a      	ldr	r2, [pc, #168]	; (8000c30 <SystemClock_Config+0xf4>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <SystemClock_Config+0xf4>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b98:	bf00      	nop
 8000b9a:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <SystemClock_Config+0xf4>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba6:	d1f8      	bne.n	8000b9a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000bbe:	2319      	movs	r3, #25
 8000bc0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bce:	230c      	movs	r3, #12
 8000bd0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 fbd0 	bl	8003384 <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000bea:	f000 f9bd 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	233f      	movs	r3, #63	; 0x3f
 8000bf0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c02:	2340      	movs	r3, #64	; 0x40
 8000c04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c0c:	2340      	movs	r3, #64	; 0x40
 8000c0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2102      	movs	r1, #2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f003 f80f 	bl	8003c38 <HAL_RCC_ClockConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000c20:	f000 f9a2 	bl	8000f68 <Error_Handler>
  }
}
 8000c24:	bf00      	nop
 8000c26:	3770      	adds	r7, #112	; 0x70
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	58000400 	.word	0x58000400
 8000c30:	58024800 	.word	0x58024800

08000c34 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000c58:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_TIM12_Init+0xac>)
 8000c5a:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <MX_TIM12_Init+0xb0>)
 8000c5c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1-1;
 8000c5e:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <MX_TIM12_Init+0xac>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <MX_TIM12_Init+0xac>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2-1;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_TIM12_Init+0xac>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <MX_TIM12_Init+0xac>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_TIM12_Init+0xac>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000c7c:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <MX_TIM12_Init+0xac>)
 8000c7e:	f005 f993 	bl	8005fa8 <HAL_TIM_PWM_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM12_Init+0x58>
  {
    Error_Handler();
 8000c88:	f000 f96e 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <MX_TIM12_Init+0xac>)
 8000c9c:	f005 ff94 	bl	8006bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000ca6:	f000 f95f 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000caa:	2360      	movs	r3, #96	; 0x60
 8000cac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <MX_TIM12_Init+0xac>)
 8000cc2:	f005 fad7 	bl	8006274 <HAL_TIM_PWM_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM12_Init+0x9c>
  {
    Error_Handler();
 8000ccc:	f000 f94c 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <MX_TIM12_Init+0xac>)
 8000cd2:	f000 f98b 	bl	8000fec <HAL_TIM_MspPostInit>

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24000098 	.word	0x24000098
 8000ce4:	40001800 	.word	0x40001800

08000ce8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <MX_USART3_UART_Init+0x94>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d30:	4811      	ldr	r0, [pc, #68]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d32:	f005 ffd7 	bl	8006ce4 <HAL_UART_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d3c:	f000 f914 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d40:	2100      	movs	r1, #0
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d44:	f006 ffd9 	bl	8007cfa <HAL_UARTEx_SetTxFifoThreshold>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d4e:	f000 f90b 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d56:	f007 f80e 	bl	8007d76 <HAL_UARTEx_SetRxFifoThreshold>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d60:	f000 f902 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d66:	f006 ff8f 	bl	8007c88 <HAL_UARTEx_DisableFifoMode>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f000 f8fa 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	240000e4 	.word	0x240000e4
 8000d7c:	40004800 	.word	0x40004800

08000d80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d88:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d8c:	2209      	movs	r2, #9
 8000d8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc8:	f002 f92a 	bl	8003020 <HAL_PCD_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000dd2:	f000 f8c9 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	24000178 	.word	0x24000178
 8000de0:	40080000 	.word	0x40080000

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	4a2e      	ldr	r2, [pc, #184]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	4a27      	ldr	r2, [pc, #156]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	4a18      	ldr	r2, [pc, #96]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	4a10      	ldr	r2, [pc, #64]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e9e:	bf00      	nop
 8000ea0:	371c      	adds	r7, #28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	58024400 	.word	0x58024400

08000eb0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	int var;
	for (var = 0; var < len; ++var) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e009      	b.n	8000ed6 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	60ba      	str	r2, [r7, #8]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fc70 	bl	80007b0 <ITM_SendChar>
	for (var = 0; var < len; ++var) {
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dbf1      	blt.n	8000ec2 <_write+0x12>
	}
	return len;
 8000ede:	687b      	ldr	r3, [r7, #4]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000efa:	f000 fc6f 	bl	80017dc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000efe:	2301      	movs	r3, #1
 8000f00:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MPU_Config+0x78>)
 8000f08:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f16:	2303      	movs	r3, #3
 8000f18:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f26:	2301      	movs	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fc8d 	bl	800184c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MPU_Config+0x7c>)
 8000f38:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000f3a:	230d      	movs	r3, #13
 8000f3c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f42:	2301      	movs	r3, #1
 8000f44:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fc7d 	bl	800184c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f52:	2004      	movs	r0, #4
 8000f54:	f000 fc5a 	bl	800180c <HAL_MPU_Enable>

}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	30040000 	.word	0x30040000
 8000f64:	30044000 	.word	0x30044000

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <Error_Handler+0x8>
	...

08000f74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_MspInit+0x30>)
 8000f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f80:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x30>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x30>)
 8000f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	58024400 	.word	0x58024400

08000fa8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10e      	bne.n	8000fd8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x40>)
 8000fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc0:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x40>)
 8000fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x40>)
 8000fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40001800 	.word	0x40001800
 8000fe8:	58024400 	.word	0x58024400

08000fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a13      	ldr	r2, [pc, #76]	; (8001058 <HAL_TIM_MspPostInit+0x6c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d11f      	bne.n	800104e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_TIM_MspPostInit+0x70>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a11      	ldr	r2, [pc, #68]	; (800105c <HAL_TIM_MspPostInit+0x70>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <HAL_TIM_MspPostInit+0x70>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800102c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001030:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800103e:	2302      	movs	r3, #2
 8001040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_TIM_MspPostInit+0x74>)
 800104a:	f001 fe39 	bl	8002cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800104e:	bf00      	nop
 8001050:	3720      	adds	r7, #32
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40001800 	.word	0x40001800
 800105c:	58024400 	.word	0x58024400
 8001060:	58020400 	.word	0x58020400

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0ba      	sub	sp, #232	; 0xe8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	22c0      	movs	r2, #192	; 0xc0
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f011 fe87 	bl	8012d98 <memset>
  if(huart->Instance==USART3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a27      	ldr	r2, [pc, #156]	; (800112c <HAL_UART_MspInit+0xc8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d146      	bne.n	8001122 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001094:	f04f 0202 	mov.w	r2, #2
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 f950 	bl	8004350 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010b6:	f7ff ff57 	bl	8000f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001110:	2307      	movs	r3, #7
 8001112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001116:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_UART_MspInit+0xd0>)
 800111e:	f001 fdcf 	bl	8002cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	37e8      	adds	r7, #232	; 0xe8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40004800 	.word	0x40004800
 8001130:	58024400 	.word	0x58024400
 8001134:	58020c00 	.word	0x58020c00

08001138 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ba      	sub	sp, #232	; 0xe8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	22c0      	movs	r2, #192	; 0xc0
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f011 fe1d 	bl	8012d98 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a38      	ldr	r2, [pc, #224]	; (8001244 <HAL_PCD_MspInit+0x10c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d169      	bne.n	800123c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001168:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001178:	2312      	movs	r3, #18
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001180:	2303      	movs	r3, #3
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001188:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800118c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800118e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001194:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 f8d5 	bl	8004350 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80011ac:	f7ff fedc 	bl	8000f68 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80011b0:	f002 f8d8 	bl	8003364 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_PCD_MspInit+0x110>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	4a23      	ldr	r2, [pc, #140]	; (8001248 <HAL_PCD_MspInit+0x110>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_PCD_MspInit+0x110>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011d2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80011d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011ec:	230a      	movs	r3, #10
 80011ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4814      	ldr	r0, [pc, #80]	; (800124c <HAL_PCD_MspInit+0x114>)
 80011fa:	f001 fd61 	bl	8002cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <HAL_PCD_MspInit+0x114>)
 800121a:	f001 fd51 	bl	8002cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_PCD_MspInit+0x110>)
 8001220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001224:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_PCD_MspInit+0x110>)
 8001226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800122a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_PCD_MspInit+0x110>)
 8001230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800123c:	bf00      	nop
 800123e:	37e8      	adds	r7, #232	; 0xe8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40080000 	.word	0x40080000
 8001248:	58024400 	.word	0x58024400
 800124c:	58020000 	.word	0x58020000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f956 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <ETH_IRQHandler+0x10>)
 80012aa:	f000 fddd 	bl	8001e68 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2400506c 	.word	0x2400506c

080012b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return 1;
 80012bc:	2301      	movs	r3, #1
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_kill>:

int _kill(int pid, int sig)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <_kill+0x20>)
 80012d4:	2216      	movs	r2, #22
 80012d6:	601a      	str	r2, [r3, #0]
  return -1;
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	240081e0 	.word	0x240081e0

080012ec <_exit>:

void _exit (int status)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ffe5 	bl	80012c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012fe:	e7fe      	b.n	80012fe <_exit+0x12>

08001300 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e00a      	b.n	8001328 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001312:	f3af 8000 	nop.w
 8001316:	4601      	mov	r1, r0
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	60ba      	str	r2, [r7, #8]
 800131e:	b2ca      	uxtb	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbf0      	blt.n	8001312 <_read+0x12>
  }

  return len;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_close>:
  }
  return len;
}

int _close(int file)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001362:	605a      	str	r2, [r3, #4]
  return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_isatty>:

int _isatty(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d205      	bcs.n	80013e0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <_sbrk+0x6c>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a06      	ldr	r2, [pc, #24]	; (8001408 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	24080000 	.word	0x24080000
 8001404:	00000400 	.word	0x00000400
 8001408:	24000684 	.word	0x24000684
 800140c:	240081f0 	.word	0x240081f0
 8001410:	240081e0 	.word	0x240081e0

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800144c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001418:	f7ff f934 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	; (8001454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	; (8001460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001442:	f011 fc67 	bl	8012d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff fa99 	bl	800097c <main>
  bx  lr
 800144a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001450:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001454:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001458:	08016dc0 	.word	0x08016dc0
  ldr r2, =_sbss
 800145c:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001460:	240081f0 	.word	0x240081f0

08001464 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC3_IRQHandler>
	...

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f000 f982 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001474:	f002 fd96 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8001478:	4602      	mov	r2, r0
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_Init+0x68>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	4913      	ldr	r1, [pc, #76]	; (80014d4 <HAL_Init+0x6c>)
 8001486:	5ccb      	ldrb	r3, [r1, r3]
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
 8001490:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_Init+0x68>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_Init+0x6c>)
 800149c:	5cd3      	ldrb	r3, [r2, r3]
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	fa22 f303 	lsr.w	r3, r2, r3
 80014a8:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <HAL_Init+0x70>)
 80014aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <HAL_Init+0x74>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f814 	bl	80014e0 <HAL_InitTick>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e002      	b.n	80014c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014c2:	f7ff fd57 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58024400 	.word	0x58024400
 80014d4:	08016b38 	.word	0x08016b38
 80014d8:	24000004 	.word	0x24000004
 80014dc:	24000000 	.word	0x24000000

080014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_InitTick+0x60>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e021      	b.n	8001538 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_InitTick+0x64>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_InitTick+0x60>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f959 	bl	80017c2 <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f000 f931 	bl	800178e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_InitTick+0x68>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2400000c 	.word	0x2400000c
 8001544:	24000000 	.word	0x24000000
 8001548:	24000008 	.word	0x24000008

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x20>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x24>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_IncTick+0x24>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2400000c 	.word	0x2400000c
 8001570:	24000688 	.word	0x24000688

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	24000688 	.word	0x24000688

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff ffee 	bl	8001574 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_Delay+0x44>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffde 	bl	8001574 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2400000c 	.word	0x2400000c

080015d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetREVID+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0c1b      	lsrs	r3, r3, #16
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	5c001000 	.word	0x5c001000

080015ec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015fc:	4904      	ldr	r1, [pc, #16]	; (8001610 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	58000400 	.word	0x58000400

08001614 <__NVIC_SetPriorityGrouping>:
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <__NVIC_SetPriorityGrouping+0x40>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	4313      	orrs	r3, r2
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <__NVIC_SetPriorityGrouping+0x40>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	05fa0000 	.word	0x05fa0000

0800165c <__NVIC_GetPriorityGrouping>:
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_SetPriority>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <SysTick_Config>:
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001744:	d301      	bcc.n	800174a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2301      	movs	r3, #1
 8001748:	e00f      	b.n	800176a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <SysTick_Config+0x40>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001752:	210f      	movs	r1, #15
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f7ff ff8e 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <SysTick_Config+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <SysTick_Config+0x40>)
 8001764:	2207      	movs	r2, #7
 8001766:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	e000e010 	.word	0xe000e010

08001778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff47 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5e 	bl	800165c <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff90 	bl	80016cc <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5f 	bl	8001678 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb2 	bl	8001734 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017e0:	f3bf 8f5f 	dmb	sy
}
 80017e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <HAL_MPU_Disable+0x28>)
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_MPU_Disable+0x28>)
 80017ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_MPU_Disable+0x2c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	e000ed90 	.word	0xe000ed90

0800180c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001814:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_MPU_Enable+0x38>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_MPU_Enable+0x3c>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_MPU_Enable+0x3c>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800182a:	f3bf 8f4f 	dsb	sy
}
 800182e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001830:	f3bf 8f6f 	isb	sy
}
 8001834:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed90 	.word	0xe000ed90
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	785a      	ldrb	r2, [r3, #1]
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <HAL_MPU_ConfigRegion+0x84>)
 800185a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d029      	beq.n	80018b8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001864:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <HAL_MPU_ConfigRegion+0x84>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7b1b      	ldrb	r3, [r3, #12]
 8001870:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7adb      	ldrb	r3, [r3, #11]
 8001876:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001878:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7a9b      	ldrb	r3, [r3, #10]
 800187e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001880:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7b5b      	ldrb	r3, [r3, #13]
 8001886:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001888:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7b9b      	ldrb	r3, [r3, #14]
 800188e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001890:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7bdb      	ldrb	r3, [r3, #15]
 8001896:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001898:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7a5b      	ldrb	r3, [r3, #9]
 800189e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7a1b      	ldrb	r3, [r3, #8]
 80018a6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018a8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	7812      	ldrb	r2, [r2, #0]
 80018ae:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018b2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018b4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80018b6:	e005      	b.n	80018c4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_MPU_ConfigRegion+0x84>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <HAL_MPU_ConfigRegion+0x84>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed90 	.word	0xe000ed90

080018d4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <HAL_GetCurrentCPUID+0x24>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	2b07      	cmp	r3, #7
 80018e4:	d101      	bne.n	80018ea <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e000      	b.n	80018ec <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80018ea:	2301      	movs	r3, #1
  }
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0cf      	b.n	8001aae <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001914:	2b00      	cmp	r3, #0
 8001916:	d106      	bne.n	8001926 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2223      	movs	r2, #35	; 0x23
 800191c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f8d1 	bl	8001ac8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <HAL_ETH_Init+0x1bc>)
 8001928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800192c:	4a62      	ldr	r2, [pc, #392]	; (8001ab8 <HAL_ETH_Init+0x1bc>)
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001936:	4b60      	ldr	r3, [pc, #384]	; (8001ab8 <HAL_ETH_Init+0x1bc>)
 8001938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7a1b      	ldrb	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d103      	bne.n	8001954 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff fe4d 	bl	80015ec <HAL_SYSCFG_ETHInterfaceSelect>
 8001952:	e003      	b.n	800195c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001954:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001958:	f7ff fe48 	bl	80015ec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800195c:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_ETH_Init+0x1c0>)
 800195e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001976:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001978:	f7ff fdfc 	bl	8001574 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800197e:	e011      	b.n	80019a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001980:	f7ff fdf8 	bl	8001574 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800198e:	d909      	bls.n	80019a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2204      	movs	r2, #4
 8001994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	22e0      	movs	r2, #224	; 0xe0
 800199c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e084      	b.n	8001aae <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1e4      	bne.n	8001980 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fbb6 	bl	8002128 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80019bc:	f002 fc6c 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a3f      	ldr	r2, [pc, #252]	; (8001ac0 <HAL_ETH_Init+0x1c4>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	0c9a      	lsrs	r2, r3, #18
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3a01      	subs	r2, #1
 80019d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 fda1 	bl	800251c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80019e6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019f6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	22e0      	movs	r2, #224	; 0xe0
 8001a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e049      	b.n	8001aae <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a22:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_ETH_Init+0x1c8>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6952      	ldr	r2, [r2, #20]
 8001a2e:	0051      	lsls	r1, r2, #1
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	430b      	orrs	r3, r1
 8001a36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a3a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fe09 	bl	8002656 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fe4f 	bl	80026e8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	3305      	adds	r3, #5
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	021a      	lsls	r2, r3, #8
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	061a      	lsls	r2, r3, #24
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	3302      	adds	r3, #2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	041b      	lsls	r3, r3, #16
 8001a7c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	3301      	adds	r3, #1
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a88:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a96:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a98:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	58024400 	.word	0x58024400
 8001abc:	58000400 	.word	0x58000400
 8001ac0:	431bde83 	.word	0x431bde83
 8001ac4:	ffff8001 	.word	0xffff8001

08001ac8 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af4:	f043 0201 	orr.w	r2, r3, #1
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07f      	b.n	8001c02 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b08:	2b23      	cmp	r3, #35	; 0x23
 8001b0a:	d179      	bne.n	8001c00 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 fe47 	bl	80027a4 <ETH_Prepare_Tx_Descriptors>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d009      	beq.n	8001b30 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	f043 0202 	orr.w	r2, r3, #2
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e068      	b.n	8001c02 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b30:	f3bf 8f4f 	dsb	sy
}
 8001b34:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3206      	adds	r2, #6
 8001b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b42:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d904      	bls.n	8001b60 <HAL_ETH_Transmit+0x84>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	1f1a      	subs	r2, r3, #4
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3106      	adds	r1, #6
 8001b6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b74:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8001b78:	f7ff fcfc 	bl	8001574 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001b7e:	e039      	b.n	8001bf4 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b88:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d012      	beq.n	8001bba <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9a:	f043 0208 	orr.w	r2, r3, #8
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bac:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e023      	b.n	8001c02 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d018      	beq.n	8001bf4 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bc2:	f7ff fcd7 	bl	8001574 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d302      	bcc.n	8001bd8 <HAL_ETH_Transmit+0xfc>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10d      	bne.n	8001bf4 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	f043 0204 	orr.w	r2, r3, #4
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001bee:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e006      	b.n	8001c02 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	dbc1      	blt.n	8001b80 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
  }
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b088      	sub	sp, #32
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0a5      	b.n	8001d82 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c3c:	2b23      	cmp	r3, #35	; 0x23
 8001c3e:	d001      	beq.n	8001c44 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e09e      	b.n	8001d82 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	3212      	adds	r2, #18
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c5a:	f1c3 0304 	rsb	r3, r3, #4
 8001c5e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c60:	e067      	b.n	8001d32 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d103      	bne.n	8001c92 <HAL_ETH_ReadData+0x88>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03d      	beq.n	8001d0e <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00d      	beq.n	8001cd8 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ce8:	461a      	mov	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f006 ff0f 	bl	8008b10 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	441a      	add	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3301      	adds	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d902      	bls.n	8001d20 <HAL_ETH_ReadData+0x116>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b04      	subs	r3, #4
 8001d1e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	3212      	adds	r2, #18
 8001d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db06      	blt.n	8001d48 <HAL_ETH_ReadData+0x13e>
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d202      	bcs.n	8001d48 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d08c      	beq.n	8001c62 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	441a      	add	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f814 	bl	8001d8a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d108      	bne.n	8001d80 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e000      	b.n	8001d82 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b088      	sub	sp, #32
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001d96:	2301      	movs	r3, #1
 8001d98:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d9e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	3212      	adds	r2, #18
 8001da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001daa:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001db0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001db2:	e03b      	b.n	8001e2c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d112      	bne.n	8001de2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f006 fe75 	bl	8008ab0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	74fb      	strb	r3, [r7, #19]
 8001dd0:	e007      	b.n	8001de2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001de2:	7cfb      	ldrb	r3, [r7, #19]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d021      	beq.n	8001e2c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001de8:	f3bf 8f5f 	dmb	sy
}
 8001dec:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	e003      	b.n	8001e08 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001e06:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d902      	bls.n	8001e1a <ETH_UpdateDescriptor+0x90>
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3b04      	subs	r3, #4
 8001e18:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	3212      	adds	r2, #18
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <ETH_UpdateDescriptor+0xae>
 8001e32:	7cfb      	ldrb	r3, [r7, #19]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1bd      	bne.n	8001db4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d00d      	beq.n	8001e5e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e80:	2b40      	cmp	r3, #64	; 0x40
 8001e82:	d115      	bne.n	8001eb0 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b40      	cmp	r3, #64	; 0x40
 8001e96:	d10b      	bne.n	8001eb0 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f248 0340 	movw	r3, #32832	; 0x8040
 8001ea6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f90a 	bl	80020c4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d115      	bne.n	8001ef0 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f248 0301 	movw	r3, #32769	; 0x8001
 8001ee6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8e0 	bl	80020b0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f04:	d153      	bne.n	8001fae <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f0e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f1a:	d148      	bne.n	8001fae <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	f043 0208 	orr.w	r2, r3, #8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f34:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f40:	d11e      	bne.n	8001f80 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001f4e:	f241 1302 	movw	r3, #4354	; 0x1102
 8001f52:	4013      	ands	r3, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f62:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f72:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	22e0      	movs	r2, #224	; 0xe0
 8001f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001f7e:	e013      	b.n	8001fa8 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f88:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001f8c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001fa4:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f895 	bl	80020d8 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001fb6:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d104      	bne.n	8001fcc <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d019      	beq.n	8002000 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	f043 0210 	orr.w	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	22e0      	movs	r2, #224	; 0xe0
 8001fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f870 	bl	80020d8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b10      	cmp	r3, #16
 800200e:	d10f      	bne.n	8002030 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002018:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f862 	bl	80020ec <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b20      	cmp	r3, #32
 800203e:	d10f      	bne.n	8002060 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002048:	f003 020f 	and.w	r2, r3, #15
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f854 	bl	8002100 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002060:	f7ff fc38 	bl	80018d4 <HAL_GetCurrentCPUID>
 8002064:	4603      	mov	r3, r0
 8002066:	2b03      	cmp	r3, #3
 8002068:	d10d      	bne.n	8002086 <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_ETH_IRQHandler+0x240>)
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d014      	beq.n	80020a0 <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_ETH_IRQHandler+0x240>)
 8002078:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f848 	bl	8002114 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8002084:	e00c      	b.n	80020a0 <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_ETH_IRQHandler+0x244>)
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d006      	beq.n	80020a0 <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_ETH_IRQHandler+0x244>)
 8002094:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f83a 	bl	8002114 <HAL_ETH_WakeUpCallback>
}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	58000080 	.word	0x58000080
 80020ac:	580000c0 	.word	0x580000c0

080020b0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002138:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002140:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002142:	f002 f8a9 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 8002146:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d908      	bls.n	8002162 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d804      	bhi.n	8002162 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e027      	b.n	80021b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d908      	bls.n	800217c <HAL_ETH_SetMDIOClockRange+0x54>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d204      	bcs.n	800217c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e01a      	b.n	80021b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4a13      	ldr	r2, [pc, #76]	; (80021cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d303      	bcc.n	800218c <HAL_ETH_SetMDIOClockRange+0x64>
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d911      	bls.n	80021b0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d908      	bls.n	80021a6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d804      	bhi.n	80021a6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e005      	b.n	80021b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	e000      	b.n	80021b2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80021b0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	01312cff 	.word	0x01312cff
 80021c8:	02160ebf 	.word	0x02160ebf
 80021cc:	03938700 	.word	0x03938700
 80021d0:	05f5e0ff 	.word	0x05f5e0ff
 80021d4:	08f0d17f 	.word	0x08f0d17f

080021d8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80021ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	791b      	ldrb	r3, [r3, #4]
 80021f0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80021f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	7b1b      	ldrb	r3, [r3, #12]
 80021f8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80021fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	7b5b      	ldrb	r3, [r3, #13]
 8002200:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002202:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	7b9b      	ldrb	r3, [r3, #14]
 8002208:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800220a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	7bdb      	ldrb	r3, [r3, #15]
 8002210:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002212:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	7c12      	ldrb	r2, [r2, #16]
 8002218:	2a00      	cmp	r2, #0
 800221a:	d102      	bne.n	8002222 <ETH_SetMACConfig+0x4a>
 800221c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002220:	e000      	b.n	8002224 <ETH_SetMACConfig+0x4c>
 8002222:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002224:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	7c52      	ldrb	r2, [r2, #17]
 800222a:	2a00      	cmp	r2, #0
 800222c:	d102      	bne.n	8002234 <ETH_SetMACConfig+0x5c>
 800222e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002232:	e000      	b.n	8002236 <ETH_SetMACConfig+0x5e>
 8002234:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002236:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	7c9b      	ldrb	r3, [r3, #18]
 800223c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800223e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002244:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800224a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	7f1b      	ldrb	r3, [r3, #28]
 8002250:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002252:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	7f5b      	ldrb	r3, [r3, #29]
 8002258:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800225a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	7f92      	ldrb	r2, [r2, #30]
 8002260:	2a00      	cmp	r2, #0
 8002262:	d102      	bne.n	800226a <ETH_SetMACConfig+0x92>
 8002264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002268:	e000      	b.n	800226c <ETH_SetMACConfig+0x94>
 800226a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800226c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	7fdb      	ldrb	r3, [r3, #31]
 8002272:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002274:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	f892 2020 	ldrb.w	r2, [r2, #32]
 800227c:	2a00      	cmp	r2, #0
 800227e:	d102      	bne.n	8002286 <ETH_SetMACConfig+0xae>
 8002280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002284:	e000      	b.n	8002288 <ETH_SetMACConfig+0xb0>
 8002286:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002288:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800228e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002296:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002298:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b56      	ldr	r3, [pc, #344]	; (8002404 <ETH_SetMACConfig+0x22c>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	68f9      	ldr	r1, [r7, #12]
 80022b2:	430b      	orrs	r3, r1
 80022b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80022ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022d6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80022d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80022e0:	2a00      	cmp	r2, #0
 80022e2:	d102      	bne.n	80022ea <ETH_SetMACConfig+0x112>
 80022e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022e8:	e000      	b.n	80022ec <ETH_SetMACConfig+0x114>
 80022ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80022ec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4b42      	ldr	r3, [pc, #264]	; (8002408 <ETH_SetMACConfig+0x230>)
 80022fe:	4013      	ands	r3, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	68f9      	ldr	r1, [r7, #12]
 8002306:	430b      	orrs	r3, r1
 8002308:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002310:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4b3a      	ldr	r3, [pc, #232]	; (800240c <ETH_SetMACConfig+0x234>)
 8002322:	4013      	ands	r3, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	68f9      	ldr	r1, [r7, #12]
 800232a:	430b      	orrs	r3, r1
 800232c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002334:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800233a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002342:	2a00      	cmp	r2, #0
 8002344:	d101      	bne.n	800234a <ETH_SetMACConfig+0x172>
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	e000      	b.n	800234c <ETH_SetMACConfig+0x174>
 800234a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800234c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002352:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800235e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	68f9      	ldr	r1, [r7, #12]
 800236a:	430b      	orrs	r3, r1
 800236c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002374:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800237c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f023 0103 	bic.w	r1, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	430a      	orrs	r2, r1
 8002396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80023a2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80023be:	2a00      	cmp	r2, #0
 80023c0:	d101      	bne.n	80023c6 <ETH_SetMACConfig+0x1ee>
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	e000      	b.n	80023c8 <ETH_SetMACConfig+0x1f0>
 80023c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80023c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80023d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80023da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023e8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	00048083 	.word	0x00048083
 8002408:	c0f88000 	.word	0xc0f88000
 800240c:	fffffef0 	.word	0xfffffef0

08002410 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b38      	ldr	r3, [pc, #224]	; (8002508 <ETH_SetDMAConfig+0xf8>)
 8002426:	4013      	ands	r3, r2
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	6811      	ldr	r1, [r2, #0]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	430b      	orrs	r3, r1
 8002432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002436:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	791b      	ldrb	r3, [r3, #4]
 800243c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002442:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	7b1b      	ldrb	r3, [r3, #12]
 8002448:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4b2c      	ldr	r3, [pc, #176]	; (800250c <ETH_SetDMAConfig+0xfc>)
 800245a:	4013      	ands	r3, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	430b      	orrs	r3, r1
 8002464:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002468:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	7b5b      	ldrb	r3, [r3, #13]
 800246e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002480:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <ETH_SetDMAConfig+0x100>)
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	68f9      	ldr	r1, [r7, #12]
 800248e:	430b      	orrs	r3, r1
 8002490:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002494:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	7d1b      	ldrb	r3, [r3, #20]
 80024a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80024a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	7f5b      	ldrb	r3, [r3, #29]
 80024a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <ETH_SetDMAConfig+0x104>)
 80024bc:	4013      	ands	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	68f9      	ldr	r1, [r7, #12]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	7f1b      	ldrb	r3, [r3, #28]
 80024d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <ETH_SetDMAConfig+0x108>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	68f9      	ldr	r1, [r7, #12]
 80024f2:	430b      	orrs	r3, r1
 80024f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024f8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	ffff87fd 	.word	0xffff87fd
 800250c:	ffff2ffe 	.word	0xffff2ffe
 8002510:	fffec000 	.word	0xfffec000
 8002514:	ffc0efef 	.word	0xffc0efef
 8002518:	7fc0ffff 	.word	0x7fc0ffff

0800251c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b0a4      	sub	sp, #144	; 0x90
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002524:	2301      	movs	r3, #1
 8002526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800252a:	2300      	movs	r3, #0
 800252c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002540:	2301      	movs	r3, #1
 8002542:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002564:	2300      	movs	r3, #0
 8002566:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002574:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002578:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002580:	2300      	movs	r3, #0
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002584:	2301      	movs	r3, #1
 8002586:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002596:	2300      	movs	r3, #0
 8002598:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800259a:	2300      	movs	r3, #0
 800259c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800259e:	2300      	movs	r3, #0
 80025a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80025b4:	2320      	movs	r3, #32
 80025b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80025c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80025cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025d0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80025d8:	2302      	movs	r3, #2
 80025da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80025f6:	2300      	movs	r3, #0
 80025f8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fde6 	bl	80021d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800260c:	2301      	movs	r3, #1
 800260e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002610:	2301      	movs	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002626:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800262a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002630:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002634:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800263c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	4619      	mov	r1, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff fee1 	bl	8002410 <ETH_SetDMAConfig>
}
 800264e:	bf00      	nop
 8002650:	3790      	adds	r7, #144	; 0x90
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e01d      	b.n	80026a0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68d9      	ldr	r1, [r3, #12]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	440b      	add	r3, r1
 8002674:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2200      	movs	r2, #0
 8002680:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	3206      	adds	r2, #6
 8002696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3301      	adds	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d9de      	bls.n	8002664 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b4:	461a      	mov	r2, r3
 80026b6:	2303      	movs	r3, #3
 80026b8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e023      	b.n	800273e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6919      	ldr	r1, [r3, #16]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2200      	movs	r2, #0
 8002712:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2200      	movs	r2, #0
 800272a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	3212      	adds	r2, #18
 8002734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3301      	adds	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d9d8      	bls.n	80026f6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800276a:	461a      	mov	r2, r3
 800276c:	2303      	movs	r3, #3
 800276e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800277e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002792:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b08d      	sub	sp, #52	; 0x34
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3318      	adds	r3, #24
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ce:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027e6:	d007      	beq.n	80027f8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	3304      	adds	r3, #4
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80027f8:	2302      	movs	r3, #2
 80027fa:	e259      	b.n	8002cb0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d044      	beq.n	8002892 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	4b75      	ldr	r3, [pc, #468]	; (80029e4 <ETH_Prepare_Tx_Descriptors+0x240>)
 800280e:	4013      	ands	r3, r2
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002814:	431a      	orrs	r2, r3
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002834:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d027      	beq.n	8002892 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	b29a      	uxth	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	431a      	orrs	r2, r3
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	431a      	orrs	r2, r3
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002880:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002890:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00e      	beq.n	80028bc <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	4b51      	ldr	r3, [pc, #324]	; (80029e8 <ETH_Prepare_Tx_Descriptors+0x244>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	6992      	ldr	r2, [r2, #24]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d036      	beq.n	8002942 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80028e0:	f3bf 8f5f 	dmb	sy
}
 80028e4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	3301      	adds	r3, #1
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d902      	bls.n	8002904 <ETH_Prepare_Tx_Descriptors+0x160>
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	3b04      	subs	r3, #4
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	3301      	adds	r3, #1
 8002912:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800291c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002920:	d10f      	bne.n	8002942 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 800292c:	f3bf 8f5f 	dmb	sy
}
 8002930:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800293e:	2302      	movs	r3, #2
 8002940:	e1b6      	b.n	8002cb0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	3301      	adds	r3, #1
 8002946:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002958:	4013      	ands	r3, r2
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	6852      	ldr	r2, [r2, #4]
 800295e:	431a      	orrs	r2, r3
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d012      	beq.n	8002992 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <ETH_Prepare_Tx_Descriptors+0x248>)
 8002982:	4013      	ands	r3, r2
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	6852      	ldr	r2, [r2, #4]
 8002988:	0412      	lsls	r2, r2, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	e008      	b.n	80029a4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <ETH_Prepare_Tx_Descriptors+0x248>)
 800299e:	4013      	ands	r3, r2
 80029a0:	6a3a      	ldr	r2, [r7, #32]
 80029a2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d021      	beq.n	80029f4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	04db      	lsls	r3, r3, #19
 80029be:	431a      	orrs	r2, r3
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	69d2      	ldr	r2, [r2, #28]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	e02e      	b.n	8002a42 <ETH_Prepare_Tx_Descriptors+0x29e>
 80029e4:	ffff0000 	.word	0xffff0000
 80029e8:	ffffc000 	.word	0xffffc000
 80029ec:	c000ffff 	.word	0xc000ffff
 80029f0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	4b7b      	ldr	r3, [pc, #492]	; (8002be8 <ETH_Prepare_Tx_Descriptors+0x444>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	6852      	ldr	r2, [r2, #4]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a78:	f3bf 8f5f 	dmb	sy
}
 8002a7c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80da 	beq.w	8002c4c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002aaa:	e0cf      	b.n	8002c4c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	3301      	adds	r3, #1
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d902      	bls.n	8002aca <ETH_Prepare_Tx_Descriptors+0x326>
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	3b04      	subs	r3, #4
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad2:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aec:	d007      	beq.n	8002afe <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	3304      	adds	r3, #4
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d029      	beq.n	8002b52 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0a:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b10:	e019      	b.n	8002b46 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002b12:	f3bf 8f5f 	dmb	sy
}
 8002b16:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	3301      	adds	r3, #1
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d902      	bls.n	8002b36 <ETH_Prepare_Tx_Descriptors+0x392>
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	3b04      	subs	r3, #4
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3e:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	3301      	adds	r3, #1
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d3e1      	bcc.n	8002b12 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e0ae      	b.n	8002cb0 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	3301      	adds	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <ETH_Prepare_Tx_Descriptors+0x448>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	6852      	ldr	r2, [r2, #4]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	6852      	ldr	r2, [r2, #4]
 8002b9e:	0412      	lsls	r2, r2, #16
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	e008      	b.n	8002bba <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	2200      	movs	r2, #0
 8002bac:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	6a3a      	ldr	r2, [r7, #32]
 8002bb8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d018      	beq.n	8002bf8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	69d2      	ldr	r2, [r2, #28]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	e020      	b.n	8002c28 <ETH_Prepare_Tx_Descriptors+0x484>
 8002be6:	bf00      	nop
 8002be8:	ffff8000 	.word	0xffff8000
 8002bec:	ffffc000 	.word	0xffffc000
 8002bf0:	c000ffff 	.word	0xc000ffff
 8002bf4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	; (8002cbc <ETH_Prepare_Tx_Descriptors+0x518>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	6852      	ldr	r2, [r2, #4]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c2e:	f3bf 8f5f 	dmb	sy
}
 8002c32:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f47f af2b 	bne.w	8002aac <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d006      	beq.n	8002c6a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	e005      	b.n	8002c76 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c86:	6979      	ldr	r1, [r7, #20]
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c96:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c98:	b672      	cpsid	i
}
 8002c9a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002caa:	b662      	cpsie	i
}
 8002cac:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3734      	adds	r7, #52	; 0x34
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	ffff8000 	.word	0xffff8000

08002cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002cce:	4b89      	ldr	r3, [pc, #548]	; (8002ef4 <HAL_GPIO_Init+0x234>)
 8002cd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cd2:	e194      	b.n	8002ffe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8186 	beq.w	8002ff8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d005      	beq.n	8002d04 <HAL_GPIO_Init+0x44>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d130      	bne.n	8002d66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	f003 0201 	and.w	r2, r3, #1
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d017      	beq.n	8002da2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d123      	bne.n	8002df6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	08da      	lsrs	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3208      	adds	r2, #8
 8002db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	08da      	lsrs	r2, r3, #3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3208      	adds	r2, #8
 8002df0:	69b9      	ldr	r1, [r7, #24]
 8002df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	2203      	movs	r2, #3
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0203 	and.w	r2, r3, #3
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80e0 	beq.w	8002ff8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e38:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <HAL_GPIO_Init+0x238>)
 8002e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e3e:	4a2e      	ldr	r2, [pc, #184]	; (8002ef8 <HAL_GPIO_Init+0x238>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_GPIO_Init+0x238>)
 8002e4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e56:	4a29      	ldr	r2, [pc, #164]	; (8002efc <HAL_GPIO_Init+0x23c>)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a20      	ldr	r2, [pc, #128]	; (8002f00 <HAL_GPIO_Init+0x240>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d052      	beq.n	8002f28 <HAL_GPIO_Init+0x268>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a1f      	ldr	r2, [pc, #124]	; (8002f04 <HAL_GPIO_Init+0x244>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d031      	beq.n	8002eee <HAL_GPIO_Init+0x22e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <HAL_GPIO_Init+0x248>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d02b      	beq.n	8002eea <HAL_GPIO_Init+0x22a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <HAL_GPIO_Init+0x24c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d025      	beq.n	8002ee6 <HAL_GPIO_Init+0x226>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <HAL_GPIO_Init+0x250>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01f      	beq.n	8002ee2 <HAL_GPIO_Init+0x222>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <HAL_GPIO_Init+0x254>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d019      	beq.n	8002ede <HAL_GPIO_Init+0x21e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a1a      	ldr	r2, [pc, #104]	; (8002f18 <HAL_GPIO_Init+0x258>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_GPIO_Init+0x21a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_GPIO_Init+0x25c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00d      	beq.n	8002ed6 <HAL_GPIO_Init+0x216>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a18      	ldr	r2, [pc, #96]	; (8002f20 <HAL_GPIO_Init+0x260>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d007      	beq.n	8002ed2 <HAL_GPIO_Init+0x212>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <HAL_GPIO_Init+0x264>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d101      	bne.n	8002ece <HAL_GPIO_Init+0x20e>
 8002eca:	2309      	movs	r3, #9
 8002ecc:	e02d      	b.n	8002f2a <HAL_GPIO_Init+0x26a>
 8002ece:	230a      	movs	r3, #10
 8002ed0:	e02b      	b.n	8002f2a <HAL_GPIO_Init+0x26a>
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	e029      	b.n	8002f2a <HAL_GPIO_Init+0x26a>
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	e027      	b.n	8002f2a <HAL_GPIO_Init+0x26a>
 8002eda:	2306      	movs	r3, #6
 8002edc:	e025      	b.n	8002f2a <HAL_GPIO_Init+0x26a>
 8002ede:	2305      	movs	r3, #5
 8002ee0:	e023      	b.n	8002f2a <HAL_GPIO_Init+0x26a>
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	e021      	b.n	8002f2a <HAL_GPIO_Init+0x26a>
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e01f      	b.n	8002f2a <HAL_GPIO_Init+0x26a>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e01d      	b.n	8002f2a <HAL_GPIO_Init+0x26a>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e01b      	b.n	8002f2a <HAL_GPIO_Init+0x26a>
 8002ef2:	bf00      	nop
 8002ef4:	58000080 	.word	0x58000080
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	58000400 	.word	0x58000400
 8002f00:	58020000 	.word	0x58020000
 8002f04:	58020400 	.word	0x58020400
 8002f08:	58020800 	.word	0x58020800
 8002f0c:	58020c00 	.word	0x58020c00
 8002f10:	58021000 	.word	0x58021000
 8002f14:	58021400 	.word	0x58021400
 8002f18:	58021800 	.word	0x58021800
 8002f1c:	58021c00 	.word	0x58021c00
 8002f20:	58022000 	.word	0x58022000
 8002f24:	58022400 	.word	0x58022400
 8002f28:	2300      	movs	r3, #0
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	f002 0203 	and.w	r2, r2, #3
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	4093      	lsls	r3, r2
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f3a:	4938      	ldr	r1, [pc, #224]	; (800301c <HAL_GPIO_Init+0x35c>)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	3302      	adds	r3, #2
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	f47f ae63 	bne.w	8002cd4 <HAL_GPIO_Init+0x14>
  }
}
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	3724      	adds	r7, #36	; 0x24
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	58000400 	.word	0x58000400

08003020 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003022:	b08f      	sub	sp, #60	; 0x3c
 8003024:	af0a      	add	r7, sp, #40	; 0x28
 8003026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e116      	b.n	8003260 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d106      	bne.n	8003052 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fe f873 	bl	8001138 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2203      	movs	r2, #3
 8003056:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f004 ff7b 	bl	8007f6c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	687e      	ldr	r6, [r7, #4]
 800307e:	466d      	mov	r5, sp
 8003080:	f106 0410 	add.w	r4, r6, #16
 8003084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800308c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003090:	e885 0003 	stmia.w	r5, {r0, r1}
 8003094:	1d33      	adds	r3, r6, #4
 8003096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003098:	6838      	ldr	r0, [r7, #0]
 800309a:	f004 fef9 	bl	8007e90 <USB_CoreInit>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0d7      	b.n	8003260 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2100      	movs	r1, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f004 ff69 	bl	8007f8e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030bc:	2300      	movs	r3, #0
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	e04a      	b.n	8003158 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	333d      	adds	r3, #61	; 0x3d
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030d6:	7bfa      	ldrb	r2, [r7, #15]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	333c      	adds	r3, #60	; 0x3c
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	b298      	uxth	r0, r3
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	3356      	adds	r3, #86	; 0x56
 80030fe:	4602      	mov	r2, r0
 8003100:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	3340      	adds	r3, #64	; 0x40
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3344      	adds	r3, #68	; 0x44
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3348      	adds	r3, #72	; 0x48
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	334c      	adds	r3, #76	; 0x4c
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	3301      	adds	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	d3af      	bcc.n	80030c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	e044      	b.n	80031f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	3301      	adds	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d3b5      	bcc.n	8003168 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	687e      	ldr	r6, [r7, #4]
 8003204:	466d      	mov	r5, sp
 8003206:	f106 0410 	add.w	r4, r6, #16
 800320a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800320c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800320e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003212:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003216:	e885 0003 	stmia.w	r5, {r0, r1}
 800321a:	1d33      	adds	r3, r6, #4
 800321c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800321e:	6838      	ldr	r0, [r7, #0]
 8003220:	f004 ff02 	bl	8008028 <USB_DevInit>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e014      	b.n	8003260 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2b01      	cmp	r3, #1
 800324c:	d102      	bne.n	8003254 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f80a 	bl	8003268 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f005 f8c0 	bl	80083de <USB_DevDisconnect>

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003268 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_PCDEx_ActivateLPM+0x44>)
 8003298:	4313      	orrs	r3, r2
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	10000003 	.word	0x10000003

080032b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80032b8:	4b29      	ldr	r3, [pc, #164]	; (8003360 <HAL_PWREx_ConfigSupply+0xb0>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d00a      	beq.n	80032da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <HAL_PWREx_ConfigSupply+0xb0>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d001      	beq.n	80032d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e040      	b.n	8003358 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e03e      	b.n	8003358 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032da:	4b21      	ldr	r3, [pc, #132]	; (8003360 <HAL_PWREx_ConfigSupply+0xb0>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80032e2:	491f      	ldr	r1, [pc, #124]	; (8003360 <HAL_PWREx_ConfigSupply+0xb0>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032ea:	f7fe f943 	bl	8001574 <HAL_GetTick>
 80032ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032f0:	e009      	b.n	8003306 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032f2:	f7fe f93f 	bl	8001574 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003300:	d901      	bls.n	8003306 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e028      	b.n	8003358 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_PWREx_ConfigSupply+0xb0>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800330e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003312:	d1ee      	bne.n	80032f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b1e      	cmp	r3, #30
 8003318:	d008      	beq.n	800332c <HAL_PWREx_ConfigSupply+0x7c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b2e      	cmp	r3, #46	; 0x2e
 800331e:	d005      	beq.n	800332c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b1d      	cmp	r3, #29
 8003324:	d002      	beq.n	800332c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b2d      	cmp	r3, #45	; 0x2d
 800332a:	d114      	bne.n	8003356 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800332c:	f7fe f922 	bl	8001574 <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003332:	e009      	b.n	8003348 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003334:	f7fe f91e 	bl	8001574 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003342:	d901      	bls.n	8003348 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e007      	b.n	8003358 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_PWREx_ConfigSupply+0xb0>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d1ee      	bne.n	8003334 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	58024800 	.word	0x58024800

08003364 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800336e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	58024800 	.word	0x58024800

08003384 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08c      	sub	sp, #48	; 0x30
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f000 bc48 	b.w	8003c28 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8088 	beq.w	80034b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a6:	4b99      	ldr	r3, [pc, #612]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033b0:	4b96      	ldr	r3, [pc, #600]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d007      	beq.n	80033cc <HAL_RCC_OscConfig+0x48>
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	2b18      	cmp	r3, #24
 80033c0:	d111      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62>
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	4b8f      	ldr	r3, [pc, #572]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d06d      	beq.n	80034b4 <HAL_RCC_OscConfig+0x130>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d169      	bne.n	80034b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f000 bc21 	b.w	8003c28 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ee:	d106      	bne.n	80033fe <HAL_RCC_OscConfig+0x7a>
 80033f0:	4b86      	ldr	r3, [pc, #536]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a85      	ldr	r2, [pc, #532]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80033f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	e02e      	b.n	800345c <HAL_RCC_OscConfig+0xd8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x9c>
 8003406:	4b81      	ldr	r3, [pc, #516]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a80      	ldr	r2, [pc, #512]	; (800360c <HAL_RCC_OscConfig+0x288>)
 800340c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b7e      	ldr	r3, [pc, #504]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a7d      	ldr	r2, [pc, #500]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e01d      	b.n	800345c <HAL_RCC_OscConfig+0xd8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0xc0>
 800342a:	4b78      	ldr	r3, [pc, #480]	; (800360c <HAL_RCC_OscConfig+0x288>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a77      	ldr	r2, [pc, #476]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b75      	ldr	r3, [pc, #468]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a74      	ldr	r2, [pc, #464]	; (800360c <HAL_RCC_OscConfig+0x288>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0xd8>
 8003444:	4b71      	ldr	r3, [pc, #452]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a70      	ldr	r2, [pc, #448]	; (800360c <HAL_RCC_OscConfig+0x288>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b6e      	ldr	r3, [pc, #440]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a6d      	ldr	r2, [pc, #436]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe f886 	bl	8001574 <HAL_GetTick>
 8003468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800346c:	f7fe f882 	bl	8001574 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e3d4      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800347e:	4b63      	ldr	r3, [pc, #396]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0xe8>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe f872 	bl	8001574 <HAL_GetTick>
 8003490:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe f86e 	bl	8001574 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e3c0      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034a6:	4b59      	ldr	r3, [pc, #356]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x110>
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80ca 	beq.w	8003658 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034c4:	4b51      	ldr	r3, [pc, #324]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034ce:	4b4f      	ldr	r3, [pc, #316]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_RCC_OscConfig+0x166>
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	2b18      	cmp	r3, #24
 80034de:	d156      	bne.n	800358e <HAL_RCC_OscConfig+0x20a>
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d151      	bne.n	800358e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ea:	4b48      	ldr	r3, [pc, #288]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x17e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e392      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003502:	4b42      	ldr	r3, [pc, #264]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 0219 	bic.w	r2, r3, #25
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	493f      	ldr	r1, [pc, #252]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe f82e 	bl	8001574 <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351c:	f7fe f82a 	bl	8001574 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e37c      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800352e:	4b37      	ldr	r3, [pc, #220]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353a:	f7fe f84b 	bl	80015d4 <HAL_GetREVID>
 800353e:	4603      	mov	r3, r0
 8003540:	f241 0203 	movw	r2, #4099	; 0x1003
 8003544:	4293      	cmp	r3, r2
 8003546:	d817      	bhi.n	8003578 <HAL_RCC_OscConfig+0x1f4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d108      	bne.n	8003562 <HAL_RCC_OscConfig+0x1de>
 8003550:	4b2e      	ldr	r3, [pc, #184]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003558:	4a2c      	ldr	r2, [pc, #176]	; (800360c <HAL_RCC_OscConfig+0x288>)
 800355a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003560:	e07a      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003562:	4b2a      	ldr	r3, [pc, #168]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	031b      	lsls	r3, r3, #12
 8003570:	4926      	ldr	r1, [pc, #152]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003576:	e06f      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003578:	4b24      	ldr	r3, [pc, #144]	; (800360c <HAL_RCC_OscConfig+0x288>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	4921      	ldr	r1, [pc, #132]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800358c:	e064      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d047      	beq.n	8003626 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003596:	4b1d      	ldr	r3, [pc, #116]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 0219 	bic.w	r2, r3, #25
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	491a      	ldr	r1, [pc, #104]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fd ffe4 	bl	8001574 <HAL_GetTick>
 80035ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b0:	f7fd ffe0 	bl	8001574 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e332      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	f7fe f801 	bl	80015d4 <HAL_GetREVID>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80035d8:	4293      	cmp	r3, r2
 80035da:	d819      	bhi.n	8003610 <HAL_RCC_OscConfig+0x28c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d108      	bne.n	80035f6 <HAL_RCC_OscConfig+0x272>
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80035ec:	4a07      	ldr	r2, [pc, #28]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80035ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f2:	6053      	str	r3, [r2, #4]
 80035f4:	e030      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RCC_OscConfig+0x288>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	031b      	lsls	r3, r3, #12
 8003604:	4901      	ldr	r1, [pc, #4]	; (800360c <HAL_RCC_OscConfig+0x288>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
 800360a:	e025      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
 800360c:	58024400 	.word	0x58024400
 8003610:	4b9a      	ldr	r3, [pc, #616]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	4997      	ldr	r1, [pc, #604]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
 8003624:	e018      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003626:	4b95      	ldr	r3, [pc, #596]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a94      	ldr	r2, [pc, #592]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fd ff9f 	bl	8001574 <HAL_GetTick>
 8003636:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363a:	f7fd ff9b 	bl	8001574 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e2ed      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800364c:	4b8b      	ldr	r3, [pc, #556]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80a9 	beq.w	80037b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003666:	4b85      	ldr	r3, [pc, #532]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800366e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003670:	4b82      	ldr	r3, [pc, #520]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d007      	beq.n	800368c <HAL_RCC_OscConfig+0x308>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b18      	cmp	r3, #24
 8003680:	d13a      	bne.n	80036f8 <HAL_RCC_OscConfig+0x374>
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d135      	bne.n	80036f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800368c:	4b7b      	ldr	r3, [pc, #492]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_OscConfig+0x320>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e2c1      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036a4:	f7fd ff96 	bl	80015d4 <HAL_GetREVID>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d817      	bhi.n	80036e2 <HAL_RCC_OscConfig+0x35e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d108      	bne.n	80036cc <HAL_RCC_OscConfig+0x348>
 80036ba:	4b70      	ldr	r3, [pc, #448]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80036c2:	4a6e      	ldr	r2, [pc, #440]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036ca:	e075      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036cc:	4b6b      	ldr	r3, [pc, #428]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	069b      	lsls	r3, r3, #26
 80036da:	4968      	ldr	r1, [pc, #416]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036e0:	e06a      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036e2:	4b66      	ldr	r3, [pc, #408]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	4962      	ldr	r1, [pc, #392]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036f6:	e05f      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d042      	beq.n	8003786 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003700:	4b5e      	ldr	r3, [pc, #376]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a5d      	ldr	r2, [pc, #372]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fd ff32 	bl	8001574 <HAL_GetTick>
 8003710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003714:	f7fd ff2e 	bl	8001574 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e280      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003726:	4b55      	ldr	r3, [pc, #340]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003732:	f7fd ff4f 	bl	80015d4 <HAL_GetREVID>
 8003736:	4603      	mov	r3, r0
 8003738:	f241 0203 	movw	r2, #4099	; 0x1003
 800373c:	4293      	cmp	r3, r2
 800373e:	d817      	bhi.n	8003770 <HAL_RCC_OscConfig+0x3ec>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	2b20      	cmp	r3, #32
 8003746:	d108      	bne.n	800375a <HAL_RCC_OscConfig+0x3d6>
 8003748:	4b4c      	ldr	r3, [pc, #304]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003750:	4a4a      	ldr	r2, [pc, #296]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003756:	6053      	str	r3, [r2, #4]
 8003758:	e02e      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
 800375a:	4b48      	ldr	r3, [pc, #288]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	069b      	lsls	r3, r3, #26
 8003768:	4944      	ldr	r1, [pc, #272]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
 800376e:	e023      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
 8003770:	4b42      	ldr	r3, [pc, #264]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	493f      	ldr	r1, [pc, #252]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	60cb      	str	r3, [r1, #12]
 8003784:	e018      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003786:	4b3d      	ldr	r3, [pc, #244]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3c      	ldr	r2, [pc, #240]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 800378c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fd feef 	bl	8001574 <HAL_GetTick>
 8003796:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800379a:	f7fd feeb 	bl	8001574 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e23d      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037ac:	4b33      	ldr	r3, [pc, #204]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f0      	bne.n	800379a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d036      	beq.n	8003832 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d019      	beq.n	8003800 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037cc:	4b2b      	ldr	r3, [pc, #172]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d0:	4a2a      	ldr	r2, [pc, #168]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fd fecc 	bl	8001574 <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fd fec8 	bl	8001574 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e21a      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037f2:	4b22      	ldr	r3, [pc, #136]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x45c>
 80037fe:	e018      	b.n	8003832 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003800:	4b1e      	ldr	r3, [pc, #120]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003804:	4a1d      	ldr	r2, [pc, #116]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fd feb2 	bl	8001574 <HAL_GetTick>
 8003810:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003814:	f7fd feae 	bl	8001574 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e200      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d039      	beq.n	80038b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d01c      	beq.n	8003880 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a0c      	ldr	r2, [pc, #48]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 800384c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003850:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003852:	f7fd fe8f 	bl	8001574 <HAL_GetTick>
 8003856:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800385a:	f7fd fe8b 	bl	8001574 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1dd      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x4d6>
 8003878:	e01b      	b.n	80038b2 <HAL_RCC_OscConfig+0x52e>
 800387a:	bf00      	nop
 800387c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003880:	4b9b      	ldr	r3, [pc, #620]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a9a      	ldr	r2, [pc, #616]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800388a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800388c:	f7fd fe72 	bl	8001574 <HAL_GetTick>
 8003890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003894:	f7fd fe6e 	bl	8001574 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1c0      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038a6:	4b92      	ldr	r3, [pc, #584]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8081 	beq.w	80039c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038c0:	4b8c      	ldr	r3, [pc, #560]	; (8003af4 <HAL_RCC_OscConfig+0x770>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a8b      	ldr	r2, [pc, #556]	; (8003af4 <HAL_RCC_OscConfig+0x770>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038cc:	f7fd fe52 	bl	8001574 <HAL_GetTick>
 80038d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d4:	f7fd fe4e 	bl	8001574 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e1a0      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038e6:	4b83      	ldr	r3, [pc, #524]	; (8003af4 <HAL_RCC_OscConfig+0x770>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d106      	bne.n	8003908 <HAL_RCC_OscConfig+0x584>
 80038fa:	4b7d      	ldr	r3, [pc, #500]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	4a7c      	ldr	r2, [pc, #496]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6713      	str	r3, [r2, #112]	; 0x70
 8003906:	e02d      	b.n	8003964 <HAL_RCC_OscConfig+0x5e0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10c      	bne.n	800392a <HAL_RCC_OscConfig+0x5a6>
 8003910:	4b77      	ldr	r3, [pc, #476]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a76      	ldr	r2, [pc, #472]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
 800391c:	4b74      	ldr	r3, [pc, #464]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	4a73      	ldr	r2, [pc, #460]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003922:	f023 0304 	bic.w	r3, r3, #4
 8003926:	6713      	str	r3, [r2, #112]	; 0x70
 8003928:	e01c      	b.n	8003964 <HAL_RCC_OscConfig+0x5e0>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b05      	cmp	r3, #5
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x5c8>
 8003932:	4b6f      	ldr	r3, [pc, #444]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	4a6e      	ldr	r2, [pc, #440]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	6713      	str	r3, [r2, #112]	; 0x70
 800393e:	4b6c      	ldr	r3, [pc, #432]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a6b      	ldr	r2, [pc, #428]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0x5e0>
 800394c:	4b68      	ldr	r3, [pc, #416]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	4a67      	ldr	r2, [pc, #412]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	6713      	str	r3, [r2, #112]	; 0x70
 8003958:	4b65      	ldr	r3, [pc, #404]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	4a64      	ldr	r2, [pc, #400]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 800395e:	f023 0304 	bic.w	r3, r3, #4
 8003962:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fd fe02 	bl	8001574 <HAL_GetTick>
 8003970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003972:	e00a      	b.n	800398a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7fd fdfe 	bl	8001574 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e14e      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800398a:	4b59      	ldr	r3, [pc, #356]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ee      	beq.n	8003974 <HAL_RCC_OscConfig+0x5f0>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fd fdec 	bl	8001574 <HAL_GetTick>
 800399c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a0:	f7fd fde8 	bl	8001574 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e138      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039b6:	4b4e      	ldr	r3, [pc, #312]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ee      	bne.n	80039a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 812d 	beq.w	8003c26 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039cc:	4b48      	ldr	r3, [pc, #288]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039d4:	2b18      	cmp	r3, #24
 80039d6:	f000 80bd 	beq.w	8003b54 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	2b02      	cmp	r3, #2
 80039e0:	f040 809e 	bne.w	8003b20 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e4:	4b42      	ldr	r3, [pc, #264]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a41      	ldr	r2, [pc, #260]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80039ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fd fdc0 	bl	8001574 <HAL_GetTick>
 80039f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fd fdbc 	bl	8001574 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e10e      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a0a:	4b39      	ldr	r3, [pc, #228]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a1a:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <HAL_RCC_OscConfig+0x774>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a26:	0112      	lsls	r2, r2, #4
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	4931      	ldr	r1, [pc, #196]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	628b      	str	r3, [r1, #40]	; 0x28
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	3b01      	subs	r3, #1
 8003a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	025b      	lsls	r3, r3, #9
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a60:	4923      	ldr	r1, [pc, #140]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003a66:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	4a21      	ldr	r2, [pc, #132]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a72:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_RCC_OscConfig+0x778>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a7e:	00d2      	lsls	r2, r2, #3
 8003a80:	491b      	ldr	r1, [pc, #108]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a86:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	f023 020c 	bic.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	4917      	ldr	r1, [pc, #92]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	f023 0202 	bic.w	r2, r3, #2
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	4912      	ldr	r1, [pc, #72]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	4a10      	ldr	r2, [pc, #64]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	4a0d      	ldr	r2, [pc, #52]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003acc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae6:	f7fd fd45 	bl	8001574 <HAL_GetTick>
 8003aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aec:	e011      	b.n	8003b12 <HAL_RCC_OscConfig+0x78e>
 8003aee:	bf00      	nop
 8003af0:	58024400 	.word	0x58024400
 8003af4:	58024800 	.word	0x58024800
 8003af8:	fffffc0c 	.word	0xfffffc0c
 8003afc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fd fd38 	bl	8001574 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e08a      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b12:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x77c>
 8003b1e:	e082      	b.n	8003c26 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b20:	4b43      	ldr	r3, [pc, #268]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a42      	ldr	r2, [pc, #264]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fd22 	bl	8001574 <HAL_GetTick>
 8003b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fd fd1e 	bl	8001574 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e070      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b46:	4b3a      	ldr	r3, [pc, #232]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x7b0>
 8003b52:	e068      	b.n	8003c26 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b54:	4b36      	ldr	r3, [pc, #216]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b5a:	4b35      	ldr	r3, [pc, #212]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d031      	beq.n	8003bcc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f003 0203 	and.w	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d12a      	bne.n	8003bcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d122      	bne.n	8003bcc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d11a      	bne.n	8003bcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	0a5b      	lsrs	r3, r3, #9
 8003b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d111      	bne.n	8003bcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d108      	bne.n	8003bcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	0e1b      	lsrs	r3, r3, #24
 8003bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e02b      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003bd0:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd4:	08db      	lsrs	r3, r3, #3
 8003bd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bda:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d01f      	beq.n	8003c26 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003be6:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bf2:	f7fd fcbf 	bl	8001574 <HAL_GetTick>
 8003bf6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003bf8:	bf00      	nop
 8003bfa:	f7fd fcbb 	bl	8001574 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d0f9      	beq.n	8003bfa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <HAL_RCC_OscConfig+0x8b0>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c12:	00d2      	lsls	r2, r2, #3
 8003c14:	4906      	ldr	r1, [pc, #24]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3730      	adds	r7, #48	; 0x30
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	58024400 	.word	0x58024400
 8003c34:	ffff0007 	.word	0xffff0007

08003c38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e19c      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b8a      	ldr	r3, [pc, #552]	; (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d910      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b87      	ldr	r3, [pc, #540]	; (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 020f 	bic.w	r2, r3, #15
 8003c62:	4985      	ldr	r1, [pc, #532]	; (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b83      	ldr	r3, [pc, #524]	; (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e184      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d010      	beq.n	8003caa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	4b7b      	ldr	r3, [pc, #492]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d908      	bls.n	8003caa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c98:	4b78      	ldr	r3, [pc, #480]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	4975      	ldr	r1, [pc, #468]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d010      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	4b70      	ldr	r3, [pc, #448]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d908      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cc6:	4b6d      	ldr	r3, [pc, #436]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	496a      	ldr	r1, [pc, #424]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d010      	beq.n	8003d06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	4b64      	ldr	r3, [pc, #400]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d908      	bls.n	8003d06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003cf4:	4b61      	ldr	r3, [pc, #388]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	495e      	ldr	r1, [pc, #376]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d010      	beq.n	8003d34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d908      	bls.n	8003d34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d22:	4b56      	ldr	r3, [pc, #344]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4953      	ldr	r1, [pc, #332]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d010      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	4b4d      	ldr	r3, [pc, #308]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d908      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d50:	4b4a      	ldr	r3, [pc, #296]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f023 020f 	bic.w	r2, r3, #15
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4947      	ldr	r1, [pc, #284]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d055      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d6e:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4940      	ldr	r1, [pc, #256]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d88:	4b3c      	ldr	r3, [pc, #240]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d121      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0f6      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003da0:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d115      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0ea      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003db8:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0de      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dc8:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0d6      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dd8:	4b28      	ldr	r3, [pc, #160]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f023 0207 	bic.w	r2, r3, #7
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4925      	ldr	r1, [pc, #148]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dea:	f7fd fbc3 	bl	8001574 <HAL_GetTick>
 8003dee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df2:	f7fd fbbf 	bl	8001574 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e0be      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e08:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d1eb      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d010      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d208      	bcs.n	8003e48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f023 020f 	bic.w	r2, r3, #15
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	490e      	ldr	r1, [pc, #56]	; (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d214      	bcs.n	8003e80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 020f 	bic.w	r2, r3, #15
 8003e5e:	4906      	ldr	r1, [pc, #24]	; (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e086      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
 8003e78:	52002000 	.word	0x52002000
 8003e7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d208      	bcs.n	8003eae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e9c:	4b3c      	ldr	r3, [pc, #240]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	4939      	ldr	r1, [pc, #228]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d010      	beq.n	8003edc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d208      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eca:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	492e      	ldr	r1, [pc, #184]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d208      	bcs.n	8003f0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4922      	ldr	r1, [pc, #136]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d010      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d208      	bcs.n	8003f38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f26:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4917      	ldr	r1, [pc, #92]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f38:	f000 f834 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	4912      	ldr	r1, [pc, #72]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f56:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	4a0d      	ldr	r2, [pc, #52]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f60:	5cd3      	ldrb	r3, [r2, r3]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6c:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <HAL_RCC_ClockConfig+0x360>)
 8003f6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f70:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <HAL_RCC_ClockConfig+0x364>)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_RCC_ClockConfig+0x368>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd fab0 	bl	80014e0 <HAL_InitTick>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	58024400 	.word	0x58024400
 8003f94:	08016b38 	.word	0x08016b38
 8003f98:	24000004 	.word	0x24000004
 8003f9c:	24000000 	.word	0x24000000
 8003fa0:	24000008 	.word	0x24000008

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	; 0x24
 8003fa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003faa:	4bb3      	ldr	r3, [pc, #716]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fb2:	2b18      	cmp	r3, #24
 8003fb4:	f200 8155 	bhi.w	8004262 <HAL_RCC_GetSysClockFreq+0x2be>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08004025 	.word	0x08004025
 8003fc4:	08004263 	.word	0x08004263
 8003fc8:	08004263 	.word	0x08004263
 8003fcc:	08004263 	.word	0x08004263
 8003fd0:	08004263 	.word	0x08004263
 8003fd4:	08004263 	.word	0x08004263
 8003fd8:	08004263 	.word	0x08004263
 8003fdc:	08004263 	.word	0x08004263
 8003fe0:	0800404b 	.word	0x0800404b
 8003fe4:	08004263 	.word	0x08004263
 8003fe8:	08004263 	.word	0x08004263
 8003fec:	08004263 	.word	0x08004263
 8003ff0:	08004263 	.word	0x08004263
 8003ff4:	08004263 	.word	0x08004263
 8003ff8:	08004263 	.word	0x08004263
 8003ffc:	08004263 	.word	0x08004263
 8004000:	08004051 	.word	0x08004051
 8004004:	08004263 	.word	0x08004263
 8004008:	08004263 	.word	0x08004263
 800400c:	08004263 	.word	0x08004263
 8004010:	08004263 	.word	0x08004263
 8004014:	08004263 	.word	0x08004263
 8004018:	08004263 	.word	0x08004263
 800401c:	08004263 	.word	0x08004263
 8004020:	08004057 	.word	0x08004057
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004024:	4b94      	ldr	r3, [pc, #592]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d009      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004030:	4b91      	ldr	r3, [pc, #580]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	08db      	lsrs	r3, r3, #3
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	4a90      	ldr	r2, [pc, #576]	; (800427c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
 8004040:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004042:	e111      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004044:	4b8d      	ldr	r3, [pc, #564]	; (800427c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004046:	61bb      	str	r3, [r7, #24]
      break;
 8004048:	e10e      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800404a:	4b8d      	ldr	r3, [pc, #564]	; (8004280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800404c:	61bb      	str	r3, [r7, #24]
      break;
 800404e:	e10b      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004050:	4b8c      	ldr	r3, [pc, #560]	; (8004284 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004052:	61bb      	str	r3, [r7, #24]
      break;
 8004054:	e108      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004056:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004060:	4b85      	ldr	r3, [pc, #532]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800406a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800406c:	4b82      	ldr	r3, [pc, #520]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004076:	4b80      	ldr	r3, [pc, #512]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407a:	08db      	lsrs	r3, r3, #3
 800407c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80e1 	beq.w	800425c <HAL_RCC_GetSysClockFreq+0x2b8>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b02      	cmp	r3, #2
 800409e:	f000 8083 	beq.w	80041a8 <HAL_RCC_GetSysClockFreq+0x204>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	f200 80a1 	bhi.w	80041ec <HAL_RCC_GetSysClockFreq+0x248>
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x114>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d056      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x1c0>
 80040b6:	e099      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040b8:	4b6f      	ldr	r3, [pc, #444]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02d      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040c4:	4b6c      	ldr	r3, [pc, #432]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	08db      	lsrs	r3, r3, #3
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	4a6b      	ldr	r2, [pc, #428]	; (800427c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
 80040d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	ee07 3a90 	vmov	s15, r3
 80040dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ee:	4b62      	ldr	r3, [pc, #392]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004102:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800410a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800411e:	e087      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800428c <HAL_RCC_GetSysClockFreq+0x2e8>
 800412e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004132:	4b51      	ldr	r3, [pc, #324]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004142:	ed97 6a02 	vldr	s12, [r7, #8]
 8004146:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800414a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800415a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004162:	e065      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004290 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004176:	4b40      	ldr	r3, [pc, #256]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004186:	ed97 6a02 	vldr	s12, [r7, #8]
 800418a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800418e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800419a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041a6:	e043      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004294 <HAL_RCC_GetSysClockFreq+0x2f0>
 80041b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ba:	4b2f      	ldr	r3, [pc, #188]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80041ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041ea:	e021      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004290 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fe:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004212:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800422e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	0a5b      	lsrs	r3, r3, #9
 8004236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800423a:	3301      	adds	r3, #1
 800423c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004248:	edd7 6a07 	vldr	s13, [r7, #28]
 800424c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004254:	ee17 3a90 	vmov	r3, s15
 8004258:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800425a:	e005      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	61bb      	str	r3, [r7, #24]
      break;
 8004260:	e002      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004264:	61bb      	str	r3, [r7, #24]
      break;
 8004266:	bf00      	nop
  }

  return sysclockfreq;
 8004268:	69bb      	ldr	r3, [r7, #24]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
 800427c:	03d09000 	.word	0x03d09000
 8004280:	003d0900 	.word	0x003d0900
 8004284:	007a1200 	.word	0x007a1200
 8004288:	46000000 	.word	0x46000000
 800428c:	4c742400 	.word	0x4c742400
 8004290:	4a742400 	.word	0x4a742400
 8004294:	4af42400 	.word	0x4af42400

08004298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800429e:	f7ff fe81 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	490f      	ldr	r1, [pc, #60]	; (80042ec <HAL_RCC_GetHCLKFreq+0x54>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_GetHCLKFreq+0x54>)
 80042c6:	5cd3      	ldrb	r3, [r2, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80042d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042d6:	4a07      	ldr	r2, [pc, #28]	; (80042f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	58024400 	.word	0x58024400
 80042ec:	08016b38 	.word	0x08016b38
 80042f0:	24000004 	.word	0x24000004
 80042f4:	24000000 	.word	0x24000000

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80042fc:	f7ff ffcc 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4904      	ldr	r1, [pc, #16]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	58024400 	.word	0x58024400
 8004320:	08016b38 	.word	0x08016b38

08004324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004328:	f7ff ffb6 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCC_GetPCLK2Freq+0x28>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	58024400 	.word	0x58024400
 800434c:	08016b38 	.word	0x08016b38

08004350 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004354:	b0ca      	sub	sp, #296	; 0x128
 8004356:	af00      	add	r7, sp, #0
 8004358:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800435c:	2300      	movs	r3, #0
 800435e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004362:	2300      	movs	r3, #0
 8004364:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004374:	2500      	movs	r5, #0
 8004376:	ea54 0305 	orrs.w	r3, r4, r5
 800437a:	d049      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004382:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004386:	d02f      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004388:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800438c:	d828      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800438e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004392:	d01a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004394:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004398:	d822      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800439e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a2:	d007      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043a4:	e01c      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a6:	4bb8      	ldr	r3, [pc, #736]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	4ab7      	ldr	r2, [pc, #732]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043b2:	e01a      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b8:	3308      	adds	r3, #8
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 fc8f 	bl	8005ce0 <RCCEx_PLL2_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043c8:	e00f      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ce:	3328      	adds	r3, #40	; 0x28
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 fd36 	bl	8005e44 <RCCEx_PLL3_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043de:	e004      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043e6:	e000      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80043e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043f2:	4ba5      	ldr	r3, [pc, #660]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004400:	4aa1      	ldr	r2, [pc, #644]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004402:	430b      	orrs	r3, r1
 8004404:	6513      	str	r3, [r2, #80]	; 0x50
 8004406:	e003      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800440c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800441c:	f04f 0900 	mov.w	r9, #0
 8004420:	ea58 0309 	orrs.w	r3, r8, r9
 8004424:	d047      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	2b04      	cmp	r3, #4
 800442e:	d82a      	bhi.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004430:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	0800444d 	.word	0x0800444d
 800443c:	0800445b 	.word	0x0800445b
 8004440:	08004471 	.word	0x08004471
 8004444:	0800448f 	.word	0x0800448f
 8004448:	0800448f 	.word	0x0800448f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444c:	4b8e      	ldr	r3, [pc, #568]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	4a8d      	ldr	r2, [pc, #564]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004458:	e01a      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445e:	3308      	adds	r3, #8
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f001 fc3c 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800446e:	e00f      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004474:	3328      	adds	r3, #40	; 0x28
 8004476:	2100      	movs	r1, #0
 8004478:	4618      	mov	r0, r3
 800447a:	f001 fce3 	bl	8005e44 <RCCEx_PLL3_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004484:	e004      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800448c:	e000      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800448e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004498:	4b7b      	ldr	r3, [pc, #492]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	f023 0107 	bic.w	r1, r3, #7
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	4a78      	ldr	r2, [pc, #480]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6513      	str	r3, [r2, #80]	; 0x50
 80044ac:	e003      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80044c2:	f04f 0b00 	mov.w	fp, #0
 80044c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80044ca:	d04c      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d6:	d030      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80044d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044dc:	d829      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044de:	2bc0      	cmp	r3, #192	; 0xc0
 80044e0:	d02d      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80044e2:	2bc0      	cmp	r3, #192	; 0xc0
 80044e4:	d825      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d018      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d821      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80044f2:	2b40      	cmp	r3, #64	; 0x40
 80044f4:	d007      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80044f6:	e01c      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f8:	4b63      	ldr	r3, [pc, #396]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	4a62      	ldr	r2, [pc, #392]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004504:	e01c      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450a:	3308      	adds	r3, #8
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f001 fbe6 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800451a:	e011      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004520:	3328      	adds	r3, #40	; 0x28
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f001 fc8d 	bl	8005e44 <RCCEx_PLL3_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004530:	e006      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004538:	e002      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800453e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004540:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004548:	4b4f      	ldr	r3, [pc, #316]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004556:	4a4c      	ldr	r2, [pc, #304]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004558:	430b      	orrs	r3, r1
 800455a:	6513      	str	r3, [r2, #80]	; 0x50
 800455c:	e003      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004562:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004572:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004576:	2300      	movs	r3, #0
 8004578:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800457c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004580:	460b      	mov	r3, r1
 8004582:	4313      	orrs	r3, r2
 8004584:	d053      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800458e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004592:	d035      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004598:	d82e      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800459a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800459e:	d031      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80045a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045a4:	d828      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80045a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045aa:	d01a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80045ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b0:	d822      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80045b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045ba:	d007      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80045bc:	e01c      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045be:	4b32      	ldr	r3, [pc, #200]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	4a31      	ldr	r2, [pc, #196]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045ca:	e01c      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d0:	3308      	adds	r3, #8
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fb83 	bl	8005ce0 <RCCEx_PLL2_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80045e0:	e011      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e6:	3328      	adds	r3, #40	; 0x28
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 fc2a 	bl	8005e44 <RCCEx_PLL3_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045f6:	e006      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045fe:	e002      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004600:	bf00      	nop
 8004602:	e000      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800460e:	4b1e      	ldr	r3, [pc, #120]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800461e:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004620:	430b      	orrs	r3, r1
 8004622:	6593      	str	r3, [r2, #88]	; 0x58
 8004624:	e003      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800462a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800463a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004644:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004648:	460b      	mov	r3, r1
 800464a:	4313      	orrs	r3, r2
 800464c:	d056      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800465a:	d038      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800465c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004660:	d831      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004662:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004666:	d034      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004668:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800466c:	d82b      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800466e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004672:	d01d      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004678:	d825      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d006      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800467e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004684:	e01f      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468c:	4ba2      	ldr	r3, [pc, #648]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	4aa1      	ldr	r2, [pc, #644]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004698:	e01c      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469e:	3308      	adds	r3, #8
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fb1c 	bl	8005ce0 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80046ae:	e011      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	3328      	adds	r3, #40	; 0x28
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 fbc3 	bl	8005e44 <RCCEx_PLL3_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046c4:	e006      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046cc:	e002      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80046d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80046dc:	4b8e      	ldr	r3, [pc, #568]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80046e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046ec:	4a8a      	ldr	r2, [pc, #552]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046ee:	430b      	orrs	r3, r1
 80046f0:	6593      	str	r3, [r2, #88]	; 0x58
 80046f2:	e003      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004708:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004712:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004716:	460b      	mov	r3, r1
 8004718:	4313      	orrs	r3, r2
 800471a:	d03a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800471c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004722:	2b30      	cmp	r3, #48	; 0x30
 8004724:	d01f      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004726:	2b30      	cmp	r3, #48	; 0x30
 8004728:	d819      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800472a:	2b20      	cmp	r3, #32
 800472c:	d00c      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800472e:	2b20      	cmp	r3, #32
 8004730:	d815      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d019      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004736:	2b10      	cmp	r3, #16
 8004738:	d111      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473a:	4b77      	ldr	r3, [pc, #476]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	4a76      	ldr	r2, [pc, #472]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004746:	e011      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474c:	3308      	adds	r3, #8
 800474e:	2102      	movs	r1, #2
 8004750:	4618      	mov	r0, r3
 8004752:	f001 fac5 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004764:	e002      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800476a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004774:	4b68      	ldr	r3, [pc, #416]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004778:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004782:	4a65      	ldr	r2, [pc, #404]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004784:	430b      	orrs	r3, r1
 8004786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004788:	e003      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800478e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800479e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80047a2:	2300      	movs	r3, #0
 80047a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80047a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d051      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047bc:	d035      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80047be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047c2:	d82e      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047c8:	d031      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80047ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047ce:	d828      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d4:	d01a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80047d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047da:	d822      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e4:	d007      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80047e6:	e01c      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e8:	4b4b      	ldr	r3, [pc, #300]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	4a4a      	ldr	r2, [pc, #296]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047f4:	e01c      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fa:	3308      	adds	r3, #8
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 fa6e 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004804:	4603      	mov	r3, r0
 8004806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800480a:	e011      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004810:	3328      	adds	r3, #40	; 0x28
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f001 fb15 	bl	8005e44 <RCCEx_PLL3_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004820:	e006      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004828:	e002      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800482a:	bf00      	nop
 800482c:	e000      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800482e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004830:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004838:	4b37      	ldr	r3, [pc, #220]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800483a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004846:	4a34      	ldr	r2, [pc, #208]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004848:	430b      	orrs	r3, r1
 800484a:	6513      	str	r3, [r2, #80]	; 0x50
 800484c:	e003      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004852:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004866:	2300      	movs	r3, #0
 8004868:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800486c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004870:	460b      	mov	r3, r1
 8004872:	4313      	orrs	r3, r2
 8004874:	d056      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800487c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004880:	d033      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004882:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004886:	d82c      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800488c:	d02f      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800488e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004892:	d826      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004894:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004898:	d02b      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800489a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800489e:	d820      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80048a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a4:	d012      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80048a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048aa:	d81a      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d022      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80048b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b4:	d115      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ba:	3308      	adds	r3, #8
 80048bc:	2101      	movs	r1, #1
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 fa0e 	bl	8005ce0 <RCCEx_PLL2_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048ca:	e015      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d0:	3328      	adds	r3, #40	; 0x28
 80048d2:	2101      	movs	r1, #1
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 fab5 	bl	8005e44 <RCCEx_PLL3_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048e0:	e00a      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048e8:	e006      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048ea:	bf00      	nop
 80048ec:	e004      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048ee:	bf00      	nop
 80048f0:	e002      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048f2:	bf00      	nop
 80048f4:	e000      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10d      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004904:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800490c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800490e:	4a02      	ldr	r2, [pc, #8]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004910:	430b      	orrs	r3, r1
 8004912:	6513      	str	r3, [r2, #80]	; 0x50
 8004914:	e006      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004916:	bf00      	nop
 8004918:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004934:	2300      	movs	r3, #0
 8004936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800493a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800493e:	460b      	mov	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	d055      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800494c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004950:	d033      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004956:	d82c      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495c:	d02f      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004962:	d826      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004964:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004968:	d02b      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800496a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800496e:	d820      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004974:	d012      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800497a:	d81a      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d022      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004980:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004984:	d115      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498a:	3308      	adds	r3, #8
 800498c:	2101      	movs	r1, #1
 800498e:	4618      	mov	r0, r3
 8004990:	f001 f9a6 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800499a:	e015      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800499c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a0:	3328      	adds	r3, #40	; 0x28
 80049a2:	2101      	movs	r1, #1
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 fa4d 	bl	8005e44 <RCCEx_PLL3_Config>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80049b0:	e00a      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049b8:	e006      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049ba:	bf00      	nop
 80049bc:	e004      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049be:	bf00      	nop
 80049c0:	e002      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10b      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80049d0:	4ba3      	ldr	r3, [pc, #652]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049e0:	4a9f      	ldr	r2, [pc, #636]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049e2:	430b      	orrs	r3, r1
 80049e4:	6593      	str	r3, [r2, #88]	; 0x58
 80049e6:	e003      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80049fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	d037      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a1a:	d00e      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a20:	d816      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d018      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a2a:	d111      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2c:	4b8c      	ldr	r3, [pc, #560]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	4a8b      	ldr	r2, [pc, #556]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a38:	e00f      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	3308      	adds	r3, #8
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 f94c 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a4e:	e004      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a56:	e000      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a62:	4b7f      	ldr	r3, [pc, #508]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a66:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a7b      	ldr	r2, [pc, #492]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a72:	430b      	orrs	r3, r1
 8004a74:	6513      	str	r3, [r2, #80]	; 0x50
 8004a76:	e003      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	d039      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d81c      	bhi.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004aed 	.word	0x08004aed
 8004ab4:	08004ac1 	.word	0x08004ac1
 8004ab8:	08004acf 	.word	0x08004acf
 8004abc:	08004aed 	.word	0x08004aed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac0:	4b67      	ldr	r3, [pc, #412]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	4a66      	ldr	r2, [pc, #408]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004acc:	e00f      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 f902 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ae2:	e004      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004aea:	e000      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004af6:	4b5a      	ldr	r3, [pc, #360]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afa:	f023 0103 	bic.w	r1, r3, #3
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b04:	4a56      	ldr	r2, [pc, #344]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004b20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b24:	2300      	movs	r3, #0
 8004b26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f000 809f 	beq.w	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b36:	4b4b      	ldr	r3, [pc, #300]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a4a      	ldr	r2, [pc, #296]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b42:	f7fc fd17 	bl	8001574 <HAL_GetTick>
 8004b46:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b4a:	e00b      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4c:	f7fc fd12 	bl	8001574 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b64      	cmp	r3, #100	; 0x64
 8004b5a:	d903      	bls.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b62:	e005      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b64:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ed      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004b70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d179      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b78:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b84:	4053      	eors	r3, r2
 8004b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d015      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b8e:	4b34      	ldr	r3, [pc, #208]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b9a:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	4a30      	ldr	r2, [pc, #192]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba6:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	4a2d      	ldr	r2, [pc, #180]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004bb2:	4a2b      	ldr	r2, [pc, #172]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	d118      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fc fcd4 	bl	8001574 <HAL_GetTick>
 8004bcc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bd0:	e00d      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7fc fccf 	bl	8001574 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bdc:	1ad2      	subs	r2, r2, r3
 8004bde:	f241 3388 	movw	r3, #5000	; 0x1388
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d903      	bls.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004bec:	e005      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bee:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0eb      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d129      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c12:	d10e      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004c14:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c24:	091a      	lsrs	r2, r3, #4
 8004c26:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	4a0d      	ldr	r2, [pc, #52]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	6113      	str	r3, [r2, #16]
 8004c30:	e005      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c3c:	6113      	str	r3, [r2, #16]
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c40:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6713      	str	r3, [r2, #112]	; 0x70
 8004c54:	e00e      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004c5e:	e009      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004c60:	58024400 	.word	0x58024400
 8004c64:	58024800 	.word	0x58024800
 8004c68:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	f002 0301 	and.w	r3, r2, #1
 8004c80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c84:	2300      	movs	r3, #0
 8004c86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f000 8089 	beq.w	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9c:	2b28      	cmp	r3, #40	; 0x28
 8004c9e:	d86b      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004d81 	.word	0x08004d81
 8004cac:	08004d79 	.word	0x08004d79
 8004cb0:	08004d79 	.word	0x08004d79
 8004cb4:	08004d79 	.word	0x08004d79
 8004cb8:	08004d79 	.word	0x08004d79
 8004cbc:	08004d79 	.word	0x08004d79
 8004cc0:	08004d79 	.word	0x08004d79
 8004cc4:	08004d79 	.word	0x08004d79
 8004cc8:	08004d4d 	.word	0x08004d4d
 8004ccc:	08004d79 	.word	0x08004d79
 8004cd0:	08004d79 	.word	0x08004d79
 8004cd4:	08004d79 	.word	0x08004d79
 8004cd8:	08004d79 	.word	0x08004d79
 8004cdc:	08004d79 	.word	0x08004d79
 8004ce0:	08004d79 	.word	0x08004d79
 8004ce4:	08004d79 	.word	0x08004d79
 8004ce8:	08004d63 	.word	0x08004d63
 8004cec:	08004d79 	.word	0x08004d79
 8004cf0:	08004d79 	.word	0x08004d79
 8004cf4:	08004d79 	.word	0x08004d79
 8004cf8:	08004d79 	.word	0x08004d79
 8004cfc:	08004d79 	.word	0x08004d79
 8004d00:	08004d79 	.word	0x08004d79
 8004d04:	08004d79 	.word	0x08004d79
 8004d08:	08004d81 	.word	0x08004d81
 8004d0c:	08004d79 	.word	0x08004d79
 8004d10:	08004d79 	.word	0x08004d79
 8004d14:	08004d79 	.word	0x08004d79
 8004d18:	08004d79 	.word	0x08004d79
 8004d1c:	08004d79 	.word	0x08004d79
 8004d20:	08004d79 	.word	0x08004d79
 8004d24:	08004d79 	.word	0x08004d79
 8004d28:	08004d81 	.word	0x08004d81
 8004d2c:	08004d79 	.word	0x08004d79
 8004d30:	08004d79 	.word	0x08004d79
 8004d34:	08004d79 	.word	0x08004d79
 8004d38:	08004d79 	.word	0x08004d79
 8004d3c:	08004d79 	.word	0x08004d79
 8004d40:	08004d79 	.word	0x08004d79
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004d81 	.word	0x08004d81
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d50:	3308      	adds	r3, #8
 8004d52:	2101      	movs	r1, #1
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 ffc3 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d60:	e00f      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d66:	3328      	adds	r3, #40	; 0x28
 8004d68:	2101      	movs	r1, #1
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 f86a 	bl	8005e44 <RCCEx_PLL3_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d76:	e004      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10a      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d8a:	4bbf      	ldr	r3, [pc, #764]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d98:	4abb      	ldr	r2, [pc, #748]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	6553      	str	r3, [r2, #84]	; 0x54
 8004d9e:	e003      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004da4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f002 0302 	and.w	r3, r2, #2
 8004db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004db8:	2300      	movs	r3, #0
 8004dba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004dbe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	d041      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dce:	2b05      	cmp	r3, #5
 8004dd0:	d824      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004dd2:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004e25 	.word	0x08004e25
 8004ddc:	08004df1 	.word	0x08004df1
 8004de0:	08004e07 	.word	0x08004e07
 8004de4:	08004e25 	.word	0x08004e25
 8004de8:	08004e25 	.word	0x08004e25
 8004dec:	08004e25 	.word	0x08004e25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df4:	3308      	adds	r3, #8
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 ff71 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e04:	e00f      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e0a:	3328      	adds	r3, #40	; 0x28
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 f818 	bl	8005e44 <RCCEx_PLL3_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e1a:	e004      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e22:	e000      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e2e:	4b96      	ldr	r3, [pc, #600]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	f023 0107 	bic.w	r1, r3, #7
 8004e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e3c:	4a92      	ldr	r2, [pc, #584]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	6553      	str	r3, [r2, #84]	; 0x54
 8004e42:	e003      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f002 0304 	and.w	r3, r2, #4
 8004e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d044      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e74:	2b05      	cmp	r3, #5
 8004e76:	d825      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004e78:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004ecd 	.word	0x08004ecd
 8004e84:	08004e99 	.word	0x08004e99
 8004e88:	08004eaf 	.word	0x08004eaf
 8004e8c:	08004ecd 	.word	0x08004ecd
 8004e90:	08004ecd 	.word	0x08004ecd
 8004e94:	08004ecd 	.word	0x08004ecd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 ff1d 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004eac:	e00f      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb2:	3328      	adds	r3, #40	; 0x28
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 ffc4 	bl	8005e44 <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ec2:	e004      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004eca:	e000      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ed6:	4b6c      	ldr	r3, [pc, #432]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eda:	f023 0107 	bic.w	r1, r3, #7
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee6:	4a68      	ldr	r2, [pc, #416]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6593      	str	r3, [r2, #88]	; 0x58
 8004eec:	e003      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f002 0320 	and.w	r3, r2, #32
 8004f02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f06:	2300      	movs	r3, #0
 8004f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f10:	460b      	mov	r3, r1
 8004f12:	4313      	orrs	r3, r2
 8004f14:	d055      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f22:	d033      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f28:	d82c      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2e:	d02f      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f34:	d826      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f3a:	d02b      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004f3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f40:	d820      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f46:	d012      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f4c:	d81a      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d022      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f56:	d115      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 febd 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f6c:	e015      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f72:	3328      	adds	r3, #40	; 0x28
 8004f74:	2102      	movs	r1, #2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 ff64 	bl	8005e44 <RCCEx_PLL3_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f82:	e00a      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f8a:	e006      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f8c:	bf00      	nop
 8004f8e:	e004      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f90:	bf00      	nop
 8004f92:	e002      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f94:	bf00      	nop
 8004f96:	e000      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fa2:	4b39      	ldr	r3, [pc, #228]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	4a35      	ldr	r2, [pc, #212]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6553      	str	r3, [r2, #84]	; 0x54
 8004fb8:	e003      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fd8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	d058      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fee:	d033      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004ff0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ff4:	d82c      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffa:	d02f      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005000:	d826      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005006:	d02b      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005008:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800500c:	d820      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800500e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005012:	d012      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005018:	d81a      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d022      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800501e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005022:	d115      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005028:	3308      	adds	r3, #8
 800502a:	2100      	movs	r1, #0
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fe57 	bl	8005ce0 <RCCEx_PLL2_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005038:	e015      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800503e:	3328      	adds	r3, #40	; 0x28
 8005040:	2102      	movs	r1, #2
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fefe 	bl	8005e44 <RCCEx_PLL3_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800504e:	e00a      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005056:	e006      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005058:	bf00      	nop
 800505a:	e004      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800505c:	bf00      	nop
 800505e:	e002      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005060:	bf00      	nop
 8005062:	e000      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10e      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800507e:	4a02      	ldr	r2, [pc, #8]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005080:	430b      	orrs	r3, r1
 8005082:	6593      	str	r3, [r2, #88]	; 0x58
 8005084:	e006      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005086:	bf00      	nop
 8005088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005090:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80050a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050a4:	2300      	movs	r3, #0
 80050a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80050ae:	460b      	mov	r3, r1
 80050b0:	4313      	orrs	r3, r2
 80050b2:	d055      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050c0:	d033      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80050c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050c6:	d82c      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050cc:	d02f      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80050ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d2:	d826      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050d8:	d02b      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80050da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050de:	d820      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e4:	d012      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80050e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ea:	d81a      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d022      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80050f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f4:	d115      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fa:	3308      	adds	r3, #8
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fdee 	bl	8005ce0 <RCCEx_PLL2_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800510a:	e015      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005110:	3328      	adds	r3, #40	; 0x28
 8005112:	2102      	movs	r1, #2
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fe95 	bl	8005e44 <RCCEx_PLL3_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005120:	e00a      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005128:	e006      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800512a:	bf00      	nop
 800512c:	e004      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800512e:	bf00      	nop
 8005130:	e002      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10b      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005140:	4ba1      	ldr	r3, [pc, #644]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800514c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005150:	4a9d      	ldr	r2, [pc, #628]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005152:	430b      	orrs	r3, r1
 8005154:	6593      	str	r3, [r2, #88]	; 0x58
 8005156:	e003      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800515c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f002 0308 	and.w	r3, r2, #8
 800516c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005176:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800517a:	460b      	mov	r3, r1
 800517c:	4313      	orrs	r3, r2
 800517e:	d01e      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518c:	d10c      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005192:	3328      	adds	r3, #40	; 0x28
 8005194:	2102      	movs	r1, #2
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fe54 	bl	8005e44 <RCCEx_PLL3_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80051a8:	4b87      	ldr	r3, [pc, #540]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b8:	4a83      	ldr	r2, [pc, #524]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051ba:	430b      	orrs	r3, r1
 80051bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f002 0310 	and.w	r3, r2, #16
 80051ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051ce:	2300      	movs	r3, #0
 80051d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80051d8:	460b      	mov	r3, r1
 80051da:	4313      	orrs	r3, r2
 80051dc:	d01e      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ea:	d10c      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f0:	3328      	adds	r3, #40	; 0x28
 80051f2:	2102      	movs	r1, #2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fe25 	bl	8005e44 <RCCEx_PLL3_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005206:	4b70      	ldr	r3, [pc, #448]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800520e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005216:	4a6c      	ldr	r2, [pc, #432]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005218:	430b      	orrs	r3, r1
 800521a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800522c:	2300      	movs	r3, #0
 800522e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005232:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	d03e      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800523c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005248:	d022      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800524a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800524e:	d81b      	bhi.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005258:	d00b      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800525a:	e015      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800525c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005260:	3308      	adds	r3, #8
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fd3b 	bl	8005ce0 <RCCEx_PLL2_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005270:	e00f      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005276:	3328      	adds	r3, #40	; 0x28
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fde2 	bl	8005e44 <RCCEx_PLL3_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005286:	e004      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800528e:	e000      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800529a:	4b4b      	ldr	r3, [pc, #300]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800529c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052aa:	4a47      	ldr	r2, [pc, #284]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052ac:	430b      	orrs	r3, r1
 80052ae:	6593      	str	r3, [r2, #88]	; 0x58
 80052b0:	e003      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80052c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80052c8:	2300      	movs	r3, #0
 80052ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80052d0:	460b      	mov	r3, r1
 80052d2:	4313      	orrs	r3, r2
 80052d4:	d03b      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052e2:	d01f      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80052e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052e8:	d818      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80052ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ee:	d003      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80052f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052f4:	d007      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80052f6:	e011      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f8:	4b33      	ldr	r3, [pc, #204]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	4a32      	ldr	r2, [pc, #200]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005304:	e00f      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800530a:	3328      	adds	r3, #40	; 0x28
 800530c:	2101      	movs	r1, #1
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fd98 	bl	8005e44 <RCCEx_PLL3_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800531a:	e004      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005322:	e000      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800532e:	4b26      	ldr	r3, [pc, #152]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005332:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533e:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005340:	430b      	orrs	r3, r1
 8005342:	6553      	str	r3, [r2, #84]	; 0x54
 8005344:	e003      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800534a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800534e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800535a:	673b      	str	r3, [r7, #112]	; 0x70
 800535c:	2300      	movs	r3, #0
 800535e:	677b      	str	r3, [r7, #116]	; 0x74
 8005360:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005364:	460b      	mov	r3, r1
 8005366:	4313      	orrs	r3, r2
 8005368:	d034      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800536e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005378:	d007      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800537a:	e011      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537c:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	4a11      	ldr	r2, [pc, #68]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005388:	e00e      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800538e:	3308      	adds	r3, #8
 8005390:	2102      	movs	r1, #2
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fca4 	bl	8005ce0 <RCCEx_PLL2_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800539e:	e003      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10d      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053be:	4a02      	ldr	r2, [pc, #8]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053c0:	430b      	orrs	r3, r1
 80053c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053c4:	e006      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80053c6:	bf00      	nop
 80053c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80053e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e2:	2300      	movs	r3, #0
 80053e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80053ea:	460b      	mov	r3, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	d00c      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f4:	3328      	adds	r3, #40	; 0x28
 80053f6:	2102      	movs	r1, #2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fd23 	bl	8005e44 <RCCEx_PLL3_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800540a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005416:	663b      	str	r3, [r7, #96]	; 0x60
 8005418:	2300      	movs	r3, #0
 800541a:	667b      	str	r3, [r7, #100]	; 0x64
 800541c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005420:	460b      	mov	r3, r1
 8005422:	4313      	orrs	r3, r2
 8005424:	d038      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005432:	d018      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005438:	d811      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800543a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543e:	d014      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005444:	d80b      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d011      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800544a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544e:	d106      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005450:	4bc3      	ldr	r3, [pc, #780]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	4ac2      	ldr	r2, [pc, #776]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800545a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800545c:	e008      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005464:	e004      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005466:	bf00      	nop
 8005468:	e002      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800546a:	bf00      	nop
 800546c:	e000      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800546e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005478:	4bb9      	ldr	r3, [pc, #740]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005488:	4ab5      	ldr	r2, [pc, #724]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800548a:	430b      	orrs	r3, r1
 800548c:	6553      	str	r3, [r2, #84]	; 0x54
 800548e:	e003      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005494:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80054a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80054a6:	2300      	movs	r3, #0
 80054a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80054ae:	460b      	mov	r3, r1
 80054b0:	4313      	orrs	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054b4:	4baa      	ldr	r3, [pc, #680]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c2:	4aa7      	ldr	r2, [pc, #668]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80054c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80054d4:	653b      	str	r3, [r7, #80]	; 0x50
 80054d6:	2300      	movs	r3, #0
 80054d8:	657b      	str	r3, [r7, #84]	; 0x54
 80054da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80054e4:	4b9e      	ldr	r3, [pc, #632]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80054f4:	4a9a      	ldr	r2, [pc, #616]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054f6:	430b      	orrs	r3, r1
 80054f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005506:	64bb      	str	r3, [r7, #72]	; 0x48
 8005508:	2300      	movs	r3, #0
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005510:	460b      	mov	r3, r1
 8005512:	4313      	orrs	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005516:	4b92      	ldr	r3, [pc, #584]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005524:	4a8e      	ldr	r2, [pc, #568]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005526:	430b      	orrs	r3, r1
 8005528:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005536:	643b      	str	r3, [r7, #64]	; 0x40
 8005538:	2300      	movs	r3, #0
 800553a:	647b      	str	r3, [r7, #68]	; 0x44
 800553c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005540:	460b      	mov	r3, r1
 8005542:	4313      	orrs	r3, r2
 8005544:	d00e      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005546:	4b86      	ldr	r3, [pc, #536]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	4a85      	ldr	r2, [pc, #532]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800554c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005550:	6113      	str	r3, [r2, #16]
 8005552:	4b83      	ldr	r3, [pc, #524]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005554:	6919      	ldr	r1, [r3, #16]
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800555e:	4a80      	ldr	r2, [pc, #512]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005560:	430b      	orrs	r3, r1
 8005562:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005570:	63bb      	str	r3, [r7, #56]	; 0x38
 8005572:	2300      	movs	r3, #0
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005576:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800557a:	460b      	mov	r3, r1
 800557c:	4313      	orrs	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005580:	4b77      	ldr	r3, [pc, #476]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005584:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	4a74      	ldr	r2, [pc, #464]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005590:	430b      	orrs	r3, r1
 8005592:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80055a0:	633b      	str	r3, [r7, #48]	; 0x30
 80055a2:	2300      	movs	r3, #0
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
 80055a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80055aa:	460b      	mov	r3, r1
 80055ac:	4313      	orrs	r3, r2
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055b0:	4b6b      	ldr	r3, [pc, #428]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c0:	4a67      	ldr	r2, [pc, #412]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055c2:	430b      	orrs	r3, r1
 80055c4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	2100      	movs	r1, #0
 80055d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80055dc:	460b      	mov	r3, r1
 80055de:	4313      	orrs	r3, r2
 80055e0:	d011      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e6:	3308      	adds	r3, #8
 80055e8:	2100      	movs	r1, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fb78 	bl	8005ce0 <RCCEx_PLL2_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80055f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	2100      	movs	r1, #0
 8005610:	6239      	str	r1, [r7, #32]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
 8005618:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800561c:	460b      	mov	r3, r1
 800561e:	4313      	orrs	r3, r2
 8005620:	d011      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005626:	3308      	adds	r3, #8
 8005628:	2101      	movs	r1, #1
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fb58 	bl	8005ce0 <RCCEx_PLL2_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	2100      	movs	r1, #0
 8005650:	61b9      	str	r1, [r7, #24]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800565c:	460b      	mov	r3, r1
 800565e:	4313      	orrs	r3, r2
 8005660:	d011      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005666:	3308      	adds	r3, #8
 8005668:	2102      	movs	r1, #2
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fb38 	bl	8005ce0 <RCCEx_PLL2_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	2100      	movs	r1, #0
 8005690:	6139      	str	r1, [r7, #16]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800569c:	460b      	mov	r3, r1
 800569e:	4313      	orrs	r3, r2
 80056a0:	d011      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a6:	3328      	adds	r3, #40	; 0x28
 80056a8:	2100      	movs	r1, #0
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fbca 	bl	8005e44 <RCCEx_PLL3_Config>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80056b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	2100      	movs	r1, #0
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056dc:	460b      	mov	r3, r1
 80056de:	4313      	orrs	r3, r2
 80056e0:	d011      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e6:	3328      	adds	r3, #40	; 0x28
 80056e8:	2101      	movs	r1, #1
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fbaa 	bl	8005e44 <RCCEx_PLL3_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80056f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005702:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	2100      	movs	r1, #0
 8005710:	6039      	str	r1, [r7, #0]
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	e9d7 1200 	ldrd	r1, r2, [r7]
 800571c:	460b      	mov	r3, r1
 800571e:	4313      	orrs	r3, r2
 8005720:	d011      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005726:	3328      	adds	r3, #40	; 0x28
 8005728:	2102      	movs	r1, #2
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fb8a 	bl	8005e44 <RCCEx_PLL3_Config>
 8005730:	4603      	mov	r3, r0
 8005732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005746:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	e000      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
}
 8005754:	4618      	mov	r0, r3
 8005756:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800575a:	46bd      	mov	sp, r7
 800575c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005760:	58024400 	.word	0x58024400

08005764 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005768:	f7fe fd96 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 800576c:	4602      	mov	r2, r0
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	4904      	ldr	r1, [pc, #16]	; (800578c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800577a:	5ccb      	ldrb	r3, [r1, r3]
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd80      	pop	{r7, pc}
 8005788:	58024400 	.word	0x58024400
 800578c:	08016b38 	.word	0x08016b38

08005790 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005790:	b480      	push	{r7}
 8005792:	b089      	sub	sp, #36	; 0x24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005798:	4ba1      	ldr	r3, [pc, #644]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80057a2:	4b9f      	ldr	r3, [pc, #636]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	0b1b      	lsrs	r3, r3, #12
 80057a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80057ae:	4b9c      	ldr	r3, [pc, #624]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	091b      	lsrs	r3, r3, #4
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80057ba:	4b99      	ldr	r3, [pc, #612]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	08db      	lsrs	r3, r3, #3
 80057c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8111 	beq.w	8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	f000 8083 	beq.w	80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	f200 80a1 	bhi.w	8005930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d056      	beq.n	80058a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80057fa:	e099      	b.n	8005930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057fc:	4b88      	ldr	r3, [pc, #544]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b00      	cmp	r3, #0
 8005806:	d02d      	beq.n	8005864 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005808:	4b85      	ldr	r3, [pc, #532]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	08db      	lsrs	r3, r3, #3
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	4a84      	ldr	r2, [pc, #528]	; (8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	ee07 3a90 	vmov	s15, r3
 8005820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005832:	4b7b      	ldr	r3, [pc, #492]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	ed97 6a03 	vldr	s12, [r7, #12]
 8005846:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800584a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005862:	e087      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b6a      	ldr	r3, [pc, #424]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a03 	vldr	s12, [r7, #12]
 800588a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058a6:	e065      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ea:	e043      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b48      	ldr	r3, [pc, #288]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005912:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800592e:	e021      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800593e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005942:	4b37      	ldr	r3, [pc, #220]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005952:	ed97 6a03 	vldr	s12, [r7, #12]
 8005956:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800595a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005972:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005974:	4b2a      	ldr	r3, [pc, #168]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	0a5b      	lsrs	r3, r3, #9
 800597a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800598a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800598e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599a:	ee17 2a90 	vmov	r2, s15
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80059a2:	4b1f      	ldr	r3, [pc, #124]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	0c1b      	lsrs	r3, r3, #16
 80059a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80059c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059c8:	ee17 2a90 	vmov	r2, s15
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80059d0:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	0e1b      	lsrs	r3, r3, #24
 80059d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80059ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f6:	ee17 2a90 	vmov	r2, s15
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80059fe:	e008      	b.n	8005a12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	609a      	str	r2, [r3, #8]
}
 8005a12:	bf00      	nop
 8005a14:	3724      	adds	r7, #36	; 0x24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
 8005a24:	03d09000 	.word	0x03d09000
 8005a28:	46000000 	.word	0x46000000
 8005a2c:	4c742400 	.word	0x4c742400
 8005a30:	4a742400 	.word	0x4a742400
 8005a34:	4af42400 	.word	0x4af42400

08005a38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b089      	sub	sp, #36	; 0x24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a40:	4ba1      	ldr	r3, [pc, #644]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005a4a:	4b9f      	ldr	r3, [pc, #636]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	0d1b      	lsrs	r3, r3, #20
 8005a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005a56:	4b9c      	ldr	r3, [pc, #624]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005a62:	4b99      	ldr	r3, [pc, #612]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	08db      	lsrs	r3, r3, #3
 8005a68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 8111 	beq.w	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	f000 8083 	beq.w	8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	f200 80a1 	bhi.w	8005bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d056      	beq.n	8005b50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005aa2:	e099      	b.n	8005bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aa4:	4b88      	ldr	r3, [pc, #544]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d02d      	beq.n	8005b0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ab0:	4b85      	ldr	r3, [pc, #532]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	08db      	lsrs	r3, r3, #3
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	4a84      	ldr	r2, [pc, #528]	; (8005ccc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	ee07 3a90 	vmov	s15, r3
 8005ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ada:	4b7b      	ldr	r3, [pc, #492]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b0a:	e087      	b.n	8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1e:	4b6a      	ldr	r3, [pc, #424]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b4e:	e065      	b.n	8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b59      	ldr	r3, [pc, #356]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b92:	e043      	b.n	8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba6:	4b48      	ldr	r3, [pc, #288]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bd6:	e021      	b.n	8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bea:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c1c:	4b2a      	ldr	r3, [pc, #168]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	0a5b      	lsrs	r3, r3, #9
 8005c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c42:	ee17 2a90 	vmov	r2, s15
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005c4a:	4b1f      	ldr	r3, [pc, #124]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c54:	ee07 3a90 	vmov	s15, r3
 8005c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c70:	ee17 2a90 	vmov	r2, s15
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c78:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	0e1b      	lsrs	r3, r3, #24
 8005c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c9e:	ee17 2a90 	vmov	r2, s15
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005ca6:	e008      	b.n	8005cba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	609a      	str	r2, [r3, #8]
}
 8005cba:	bf00      	nop
 8005cbc:	3724      	adds	r7, #36	; 0x24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	58024400 	.word	0x58024400
 8005ccc:	03d09000 	.word	0x03d09000
 8005cd0:	46000000 	.word	0x46000000
 8005cd4:	4c742400 	.word	0x4c742400
 8005cd8:	4a742400 	.word	0x4a742400
 8005cdc:	4af42400 	.word	0x4af42400

08005ce0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cee:	4b53      	ldr	r3, [pc, #332]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d101      	bne.n	8005cfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e099      	b.n	8005e32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005cfe:	4b4f      	ldr	r3, [pc, #316]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a4e      	ldr	r2, [pc, #312]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d0a:	f7fb fc33 	bl	8001574 <HAL_GetTick>
 8005d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d10:	e008      	b.n	8005d24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d12:	f7fb fc2f 	bl	8001574 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e086      	b.n	8005e32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d24:	4b45      	ldr	r3, [pc, #276]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f0      	bne.n	8005d12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005d30:	4b42      	ldr	r3, [pc, #264]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	031b      	lsls	r3, r3, #12
 8005d3e:	493f      	ldr	r1, [pc, #252]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	628b      	str	r3, [r1, #40]	; 0x28
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	025b      	lsls	r3, r3, #9
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	041b      	lsls	r3, r3, #16
 8005d62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d74:	4931      	ldr	r1, [pc, #196]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005d7a:	4b30      	ldr	r3, [pc, #192]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	492d      	ldr	r1, [pc, #180]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d8c:	4b2b      	ldr	r3, [pc, #172]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	f023 0220 	bic.w	r2, r3, #32
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	4928      	ldr	r1, [pc, #160]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d9e:	4b27      	ldr	r3, [pc, #156]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005da4:	f023 0310 	bic.w	r3, r3, #16
 8005da8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005daa:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dae:	4b24      	ldr	r3, [pc, #144]	; (8005e40 <RCCEx_PLL2_Config+0x160>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	69d2      	ldr	r2, [r2, #28]
 8005db6:	00d2      	lsls	r2, r2, #3
 8005db8:	4920      	ldr	r1, [pc, #128]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005dbe:	4b1f      	ldr	r3, [pc, #124]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc2:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dc4:	f043 0310 	orr.w	r3, r3, #16
 8005dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005dd0:	4b1a      	ldr	r3, [pc, #104]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ddc:	e00f      	b.n	8005dfe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d106      	bne.n	8005df2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005de4:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	4a14      	ldr	r2, [pc, #80]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005df0:	e005      	b.n	8005dfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005df2:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	4a11      	ldr	r2, [pc, #68]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005e04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0a:	f7fb fbb3 	bl	8001574 <HAL_GetTick>
 8005e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e10:	e008      	b.n	8005e24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e12:	f7fb fbaf 	bl	8001574 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e006      	b.n	8005e32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	58024400 	.word	0x58024400
 8005e40:	ffff0007 	.word	0xffff0007

08005e44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e52:	4b53      	ldr	r3, [pc, #332]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d101      	bne.n	8005e62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e099      	b.n	8005f96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005e62:	4b4f      	ldr	r3, [pc, #316]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a4e      	ldr	r2, [pc, #312]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6e:	f7fb fb81 	bl	8001574 <HAL_GetTick>
 8005e72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e74:	e008      	b.n	8005e88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e76:	f7fb fb7d 	bl	8001574 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e086      	b.n	8005f96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e88:	4b45      	ldr	r3, [pc, #276]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f0      	bne.n	8005e76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e94:	4b42      	ldr	r3, [pc, #264]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	051b      	lsls	r3, r3, #20
 8005ea2:	493f      	ldr	r1, [pc, #252]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	628b      	str	r3, [r1, #40]	; 0x28
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	025b      	lsls	r3, r3, #9
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	061b      	lsls	r3, r3, #24
 8005ed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ed8:	4931      	ldr	r1, [pc, #196]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ede:	4b30      	ldr	r3, [pc, #192]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	492d      	ldr	r1, [pc, #180]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ef0:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	4928      	ldr	r1, [pc, #160]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005f02:	4b27      	ldr	r3, [pc, #156]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	4a26      	ldr	r2, [pc, #152]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f0e:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <RCCEx_PLL3_Config+0x160>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	69d2      	ldr	r2, [r2, #28]
 8005f1a:	00d2      	lsls	r2, r2, #3
 8005f1c:	4920      	ldr	r1, [pc, #128]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005f22:	4b1f      	ldr	r3, [pc, #124]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d106      	bne.n	8005f42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005f34:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	4a19      	ldr	r2, [pc, #100]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f40:	e00f      	b.n	8005f62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d106      	bne.n	8005f56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005f48:	4b15      	ldr	r3, [pc, #84]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f54:	e005      	b.n	8005f62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005f56:	4b12      	ldr	r3, [pc, #72]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	4a11      	ldr	r2, [pc, #68]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005f62:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a0e      	ldr	r2, [pc, #56]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f6e:	f7fb fb01 	bl	8001574 <HAL_GetTick>
 8005f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f74:	e008      	b.n	8005f88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f76:	f7fb fafd 	bl	8001574 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e006      	b.n	8005f96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0f0      	beq.n	8005f76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	ffff0007 	.word	0xffff0007

08005fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e049      	b.n	800604e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fa ffea 	bl	8000fa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f000 fa58 	bl	800649c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d109      	bne.n	800607c <HAL_TIM_PWM_Start+0x24>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	bf14      	ite	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2300      	moveq	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	e03c      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b04      	cmp	r3, #4
 8006080:	d109      	bne.n	8006096 <HAL_TIM_PWM_Start+0x3e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b01      	cmp	r3, #1
 800608c:	bf14      	ite	ne
 800608e:	2301      	movne	r3, #1
 8006090:	2300      	moveq	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	e02f      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b08      	cmp	r3, #8
 800609a:	d109      	bne.n	80060b0 <HAL_TIM_PWM_Start+0x58>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	bf14      	ite	ne
 80060a8:	2301      	movne	r3, #1
 80060aa:	2300      	moveq	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	e022      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b0c      	cmp	r3, #12
 80060b4:	d109      	bne.n	80060ca <HAL_TIM_PWM_Start+0x72>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b01      	cmp	r3, #1
 80060c0:	bf14      	ite	ne
 80060c2:	2301      	movne	r3, #1
 80060c4:	2300      	moveq	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	e015      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d109      	bne.n	80060e4 <HAL_TIM_PWM_Start+0x8c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	bf14      	ite	ne
 80060dc:	2301      	movne	r3, #1
 80060de:	2300      	moveq	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	e008      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e0a1      	b.n	8006242 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <HAL_TIM_PWM_Start+0xb6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800610c:	e023      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b04      	cmp	r3, #4
 8006112:	d104      	bne.n	800611e <HAL_TIM_PWM_Start+0xc6>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800611c:	e01b      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b08      	cmp	r3, #8
 8006122:	d104      	bne.n	800612e <HAL_TIM_PWM_Start+0xd6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800612c:	e013      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b0c      	cmp	r3, #12
 8006132:	d104      	bne.n	800613e <HAL_TIM_PWM_Start+0xe6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800613c:	e00b      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b10      	cmp	r3, #16
 8006142:	d104      	bne.n	800614e <HAL_TIM_PWM_Start+0xf6>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800614c:	e003      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2202      	movs	r2, #2
 8006152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2201      	movs	r2, #1
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fd0c 	bl	8006b7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a38      	ldr	r2, [pc, #224]	; (800624c <HAL_TIM_PWM_Start+0x1f4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <HAL_TIM_PWM_Start+0x13e>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a37      	ldr	r2, [pc, #220]	; (8006250 <HAL_TIM_PWM_Start+0x1f8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00e      	beq.n	8006196 <HAL_TIM_PWM_Start+0x13e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a35      	ldr	r2, [pc, #212]	; (8006254 <HAL_TIM_PWM_Start+0x1fc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d009      	beq.n	8006196 <HAL_TIM_PWM_Start+0x13e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a34      	ldr	r2, [pc, #208]	; (8006258 <HAL_TIM_PWM_Start+0x200>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d004      	beq.n	8006196 <HAL_TIM_PWM_Start+0x13e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a32      	ldr	r2, [pc, #200]	; (800625c <HAL_TIM_PWM_Start+0x204>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d101      	bne.n	800619a <HAL_TIM_PWM_Start+0x142>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <HAL_TIM_PWM_Start+0x144>
 800619a:	2300      	movs	r3, #0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a25      	ldr	r2, [pc, #148]	; (800624c <HAL_TIM_PWM_Start+0x1f4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d022      	beq.n	8006200 <HAL_TIM_PWM_Start+0x1a8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c2:	d01d      	beq.n	8006200 <HAL_TIM_PWM_Start+0x1a8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a25      	ldr	r2, [pc, #148]	; (8006260 <HAL_TIM_PWM_Start+0x208>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d018      	beq.n	8006200 <HAL_TIM_PWM_Start+0x1a8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a24      	ldr	r2, [pc, #144]	; (8006264 <HAL_TIM_PWM_Start+0x20c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d013      	beq.n	8006200 <HAL_TIM_PWM_Start+0x1a8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a22      	ldr	r2, [pc, #136]	; (8006268 <HAL_TIM_PWM_Start+0x210>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00e      	beq.n	8006200 <HAL_TIM_PWM_Start+0x1a8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1a      	ldr	r2, [pc, #104]	; (8006250 <HAL_TIM_PWM_Start+0x1f8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d009      	beq.n	8006200 <HAL_TIM_PWM_Start+0x1a8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1e      	ldr	r2, [pc, #120]	; (800626c <HAL_TIM_PWM_Start+0x214>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d004      	beq.n	8006200 <HAL_TIM_PWM_Start+0x1a8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a16      	ldr	r2, [pc, #88]	; (8006254 <HAL_TIM_PWM_Start+0x1fc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d115      	bne.n	800622c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	4b1a      	ldr	r3, [pc, #104]	; (8006270 <HAL_TIM_PWM_Start+0x218>)
 8006208:	4013      	ands	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b06      	cmp	r3, #6
 8006210:	d015      	beq.n	800623e <HAL_TIM_PWM_Start+0x1e6>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006218:	d011      	beq.n	800623e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 0201 	orr.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622a:	e008      	b.n	800623e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	e000      	b.n	8006240 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40010000 	.word	0x40010000
 8006250:	40010400 	.word	0x40010400
 8006254:	40014000 	.word	0x40014000
 8006258:	40014400 	.word	0x40014400
 800625c:	40014800 	.word	0x40014800
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800
 8006268:	40000c00 	.word	0x40000c00
 800626c:	40001800 	.word	0x40001800
 8006270:	00010007 	.word	0x00010007

08006274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800628e:	2302      	movs	r3, #2
 8006290:	e0ff      	b.n	8006492 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b14      	cmp	r3, #20
 800629e:	f200 80f0 	bhi.w	8006482 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062fd 	.word	0x080062fd
 80062ac:	08006483 	.word	0x08006483
 80062b0:	08006483 	.word	0x08006483
 80062b4:	08006483 	.word	0x08006483
 80062b8:	0800633d 	.word	0x0800633d
 80062bc:	08006483 	.word	0x08006483
 80062c0:	08006483 	.word	0x08006483
 80062c4:	08006483 	.word	0x08006483
 80062c8:	0800637f 	.word	0x0800637f
 80062cc:	08006483 	.word	0x08006483
 80062d0:	08006483 	.word	0x08006483
 80062d4:	08006483 	.word	0x08006483
 80062d8:	080063bf 	.word	0x080063bf
 80062dc:	08006483 	.word	0x08006483
 80062e0:	08006483 	.word	0x08006483
 80062e4:	08006483 	.word	0x08006483
 80062e8:	08006401 	.word	0x08006401
 80062ec:	08006483 	.word	0x08006483
 80062f0:	08006483 	.word	0x08006483
 80062f4:	08006483 	.word	0x08006483
 80062f8:	08006441 	.word	0x08006441
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	4618      	mov	r0, r3
 8006304:	f000 f964 	bl	80065d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0208 	orr.w	r2, r2, #8
 8006316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0204 	bic.w	r2, r2, #4
 8006326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6999      	ldr	r1, [r3, #24]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	619a      	str	r2, [r3, #24]
      break;
 800633a:	e0a5      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	4618      	mov	r0, r3
 8006344:	f000 f9d4 	bl	80066f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6999      	ldr	r1, [r3, #24]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	021a      	lsls	r2, r3, #8
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	619a      	str	r2, [r3, #24]
      break;
 800637c:	e084      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fa3d 	bl	8006804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0208 	orr.w	r2, r2, #8
 8006398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0204 	bic.w	r2, r2, #4
 80063a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69d9      	ldr	r1, [r3, #28]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	61da      	str	r2, [r3, #28]
      break;
 80063bc:	e064      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 faa5 	bl	8006914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69da      	ldr	r2, [r3, #28]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69d9      	ldr	r1, [r3, #28]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	021a      	lsls	r2, r3, #8
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	61da      	str	r2, [r3, #28]
      break;
 80063fe:	e043      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 faee 	bl	80069e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0208 	orr.w	r2, r2, #8
 800641a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0204 	bic.w	r2, r2, #4
 800642a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	691a      	ldr	r2, [r3, #16]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800643e:	e023      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68b9      	ldr	r1, [r7, #8]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fb32 	bl	8006ab0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800645a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800646a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	021a      	lsls	r2, r3, #8
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006480:	e002      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	75fb      	strb	r3, [r7, #23]
      break;
 8006486:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006490:	7dfb      	ldrb	r3, [r7, #23]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop

0800649c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a40      	ldr	r2, [pc, #256]	; (80065b0 <TIM_Base_SetConfig+0x114>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d013      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ba:	d00f      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a3d      	ldr	r2, [pc, #244]	; (80065b4 <TIM_Base_SetConfig+0x118>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00b      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a3c      	ldr	r2, [pc, #240]	; (80065b8 <TIM_Base_SetConfig+0x11c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d007      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a3b      	ldr	r2, [pc, #236]	; (80065bc <TIM_Base_SetConfig+0x120>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_Base_SetConfig+0x40>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a3a      	ldr	r2, [pc, #232]	; (80065c0 <TIM_Base_SetConfig+0x124>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d108      	bne.n	80064ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2f      	ldr	r2, [pc, #188]	; (80065b0 <TIM_Base_SetConfig+0x114>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d01f      	beq.n	8006536 <TIM_Base_SetConfig+0x9a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fc:	d01b      	beq.n	8006536 <TIM_Base_SetConfig+0x9a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2c      	ldr	r2, [pc, #176]	; (80065b4 <TIM_Base_SetConfig+0x118>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d017      	beq.n	8006536 <TIM_Base_SetConfig+0x9a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2b      	ldr	r2, [pc, #172]	; (80065b8 <TIM_Base_SetConfig+0x11c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <TIM_Base_SetConfig+0x9a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a2a      	ldr	r2, [pc, #168]	; (80065bc <TIM_Base_SetConfig+0x120>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00f      	beq.n	8006536 <TIM_Base_SetConfig+0x9a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a29      	ldr	r2, [pc, #164]	; (80065c0 <TIM_Base_SetConfig+0x124>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00b      	beq.n	8006536 <TIM_Base_SetConfig+0x9a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a28      	ldr	r2, [pc, #160]	; (80065c4 <TIM_Base_SetConfig+0x128>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d007      	beq.n	8006536 <TIM_Base_SetConfig+0x9a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a27      	ldr	r2, [pc, #156]	; (80065c8 <TIM_Base_SetConfig+0x12c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d003      	beq.n	8006536 <TIM_Base_SetConfig+0x9a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a26      	ldr	r2, [pc, #152]	; (80065cc <TIM_Base_SetConfig+0x130>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d108      	bne.n	8006548 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a10      	ldr	r2, [pc, #64]	; (80065b0 <TIM_Base_SetConfig+0x114>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00f      	beq.n	8006594 <TIM_Base_SetConfig+0xf8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a12      	ldr	r2, [pc, #72]	; (80065c0 <TIM_Base_SetConfig+0x124>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00b      	beq.n	8006594 <TIM_Base_SetConfig+0xf8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a11      	ldr	r2, [pc, #68]	; (80065c4 <TIM_Base_SetConfig+0x128>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d007      	beq.n	8006594 <TIM_Base_SetConfig+0xf8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a10      	ldr	r2, [pc, #64]	; (80065c8 <TIM_Base_SetConfig+0x12c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d003      	beq.n	8006594 <TIM_Base_SetConfig+0xf8>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a0f      	ldr	r2, [pc, #60]	; (80065cc <TIM_Base_SetConfig+0x130>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d103      	bne.n	800659c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	615a      	str	r2, [r3, #20]
}
 80065a2:	bf00      	nop
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40010000 	.word	0x40010000
 80065b4:	40000400 	.word	0x40000400
 80065b8:	40000800 	.word	0x40000800
 80065bc:	40000c00 	.word	0x40000c00
 80065c0:	40010400 	.word	0x40010400
 80065c4:	40014000 	.word	0x40014000
 80065c8:	40014400 	.word	0x40014400
 80065cc:	40014800 	.word	0x40014800

080065d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4b37      	ldr	r3, [pc, #220]	; (80066d8 <TIM_OC1_SetConfig+0x108>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0303 	bic.w	r3, r3, #3
 8006606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f023 0302 	bic.w	r3, r3, #2
 8006618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a2d      	ldr	r2, [pc, #180]	; (80066dc <TIM_OC1_SetConfig+0x10c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00f      	beq.n	800664c <TIM_OC1_SetConfig+0x7c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a2c      	ldr	r2, [pc, #176]	; (80066e0 <TIM_OC1_SetConfig+0x110>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00b      	beq.n	800664c <TIM_OC1_SetConfig+0x7c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a2b      	ldr	r2, [pc, #172]	; (80066e4 <TIM_OC1_SetConfig+0x114>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d007      	beq.n	800664c <TIM_OC1_SetConfig+0x7c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <TIM_OC1_SetConfig+0x118>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_OC1_SetConfig+0x7c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a29      	ldr	r2, [pc, #164]	; (80066ec <TIM_OC1_SetConfig+0x11c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d10c      	bne.n	8006666 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f023 0308 	bic.w	r3, r3, #8
 8006652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f023 0304 	bic.w	r3, r3, #4
 8006664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1c      	ldr	r2, [pc, #112]	; (80066dc <TIM_OC1_SetConfig+0x10c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_OC1_SetConfig+0xbe>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <TIM_OC1_SetConfig+0x110>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_OC1_SetConfig+0xbe>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a1a      	ldr	r2, [pc, #104]	; (80066e4 <TIM_OC1_SetConfig+0x114>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_OC1_SetConfig+0xbe>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a19      	ldr	r2, [pc, #100]	; (80066e8 <TIM_OC1_SetConfig+0x118>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_OC1_SetConfig+0xbe>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a18      	ldr	r2, [pc, #96]	; (80066ec <TIM_OC1_SetConfig+0x11c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d111      	bne.n	80066b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800669c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	621a      	str	r2, [r3, #32]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	fffeff8f 	.word	0xfffeff8f
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40010400 	.word	0x40010400
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400
 80066ec:	40014800 	.word	0x40014800

080066f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0210 	bic.w	r2, r3, #16
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4b34      	ldr	r3, [pc, #208]	; (80067ec <TIM_OC2_SetConfig+0xfc>)
 800671c:	4013      	ands	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 0320 	bic.w	r3, r3, #32
 800673a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a29      	ldr	r2, [pc, #164]	; (80067f0 <TIM_OC2_SetConfig+0x100>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_OC2_SetConfig+0x68>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a28      	ldr	r2, [pc, #160]	; (80067f4 <TIM_OC2_SetConfig+0x104>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d10d      	bne.n	8006774 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800675e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a1e      	ldr	r2, [pc, #120]	; (80067f0 <TIM_OC2_SetConfig+0x100>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00f      	beq.n	800679c <TIM_OC2_SetConfig+0xac>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <TIM_OC2_SetConfig+0x104>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00b      	beq.n	800679c <TIM_OC2_SetConfig+0xac>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <TIM_OC2_SetConfig+0x108>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d007      	beq.n	800679c <TIM_OC2_SetConfig+0xac>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a1b      	ldr	r2, [pc, #108]	; (80067fc <TIM_OC2_SetConfig+0x10c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_OC2_SetConfig+0xac>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a1a      	ldr	r2, [pc, #104]	; (8006800 <TIM_OC2_SetConfig+0x110>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d113      	bne.n	80067c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	621a      	str	r2, [r3, #32]
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	feff8fff 	.word	0xfeff8fff
 80067f0:	40010000 	.word	0x40010000
 80067f4:	40010400 	.word	0x40010400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800

08006804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4b33      	ldr	r3, [pc, #204]	; (80068fc <TIM_OC3_SetConfig+0xf8>)
 8006830:	4013      	ands	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800684c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a28      	ldr	r2, [pc, #160]	; (8006900 <TIM_OC3_SetConfig+0xfc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <TIM_OC3_SetConfig+0x66>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a27      	ldr	r2, [pc, #156]	; (8006904 <TIM_OC3_SetConfig+0x100>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d10d      	bne.n	8006886 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1d      	ldr	r2, [pc, #116]	; (8006900 <TIM_OC3_SetConfig+0xfc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00f      	beq.n	80068ae <TIM_OC3_SetConfig+0xaa>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1c      	ldr	r2, [pc, #112]	; (8006904 <TIM_OC3_SetConfig+0x100>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00b      	beq.n	80068ae <TIM_OC3_SetConfig+0xaa>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a1b      	ldr	r2, [pc, #108]	; (8006908 <TIM_OC3_SetConfig+0x104>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d007      	beq.n	80068ae <TIM_OC3_SetConfig+0xaa>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a1a      	ldr	r2, [pc, #104]	; (800690c <TIM_OC3_SetConfig+0x108>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d003      	beq.n	80068ae <TIM_OC3_SetConfig+0xaa>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a19      	ldr	r2, [pc, #100]	; (8006910 <TIM_OC3_SetConfig+0x10c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d113      	bne.n	80068d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	621a      	str	r2, [r3, #32]
}
 80068f0:	bf00      	nop
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	fffeff8f 	.word	0xfffeff8f
 8006900:	40010000 	.word	0x40010000
 8006904:	40010400 	.word	0x40010400
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400
 8006910:	40014800 	.word	0x40014800

08006914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4b24      	ldr	r3, [pc, #144]	; (80069d0 <TIM_OC4_SetConfig+0xbc>)
 8006940:	4013      	ands	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	021b      	lsls	r3, r3, #8
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800695e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	031b      	lsls	r3, r3, #12
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a19      	ldr	r2, [pc, #100]	; (80069d4 <TIM_OC4_SetConfig+0xc0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00f      	beq.n	8006994 <TIM_OC4_SetConfig+0x80>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <TIM_OC4_SetConfig+0xc4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00b      	beq.n	8006994 <TIM_OC4_SetConfig+0x80>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a17      	ldr	r2, [pc, #92]	; (80069dc <TIM_OC4_SetConfig+0xc8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d007      	beq.n	8006994 <TIM_OC4_SetConfig+0x80>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <TIM_OC4_SetConfig+0xcc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_OC4_SetConfig+0x80>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <TIM_OC4_SetConfig+0xd0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d109      	bne.n	80069a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	019b      	lsls	r3, r3, #6
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	feff8fff 	.word	0xfeff8fff
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800

080069e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4b21      	ldr	r3, [pc, #132]	; (8006a98 <TIM_OC5_SetConfig+0xb0>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	041b      	lsls	r3, r3, #16
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a18      	ldr	r2, [pc, #96]	; (8006a9c <TIM_OC5_SetConfig+0xb4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00f      	beq.n	8006a5e <TIM_OC5_SetConfig+0x76>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a17      	ldr	r2, [pc, #92]	; (8006aa0 <TIM_OC5_SetConfig+0xb8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00b      	beq.n	8006a5e <TIM_OC5_SetConfig+0x76>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a16      	ldr	r2, [pc, #88]	; (8006aa4 <TIM_OC5_SetConfig+0xbc>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <TIM_OC5_SetConfig+0x76>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a15      	ldr	r2, [pc, #84]	; (8006aa8 <TIM_OC5_SetConfig+0xc0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d003      	beq.n	8006a5e <TIM_OC5_SetConfig+0x76>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a14      	ldr	r2, [pc, #80]	; (8006aac <TIM_OC5_SetConfig+0xc4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d109      	bne.n	8006a72 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	021b      	lsls	r3, r3, #8
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	621a      	str	r2, [r3, #32]
}
 8006a8c:	bf00      	nop
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	fffeff8f 	.word	0xfffeff8f
 8006a9c:	40010000 	.word	0x40010000
 8006aa0:	40010400 	.word	0x40010400
 8006aa4:	40014000 	.word	0x40014000
 8006aa8:	40014400 	.word	0x40014400
 8006aac:	40014800 	.word	0x40014800

08006ab0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4b22      	ldr	r3, [pc, #136]	; (8006b64 <TIM_OC6_SetConfig+0xb4>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	051b      	lsls	r3, r3, #20
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a19      	ldr	r2, [pc, #100]	; (8006b68 <TIM_OC6_SetConfig+0xb8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00f      	beq.n	8006b28 <TIM_OC6_SetConfig+0x78>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a18      	ldr	r2, [pc, #96]	; (8006b6c <TIM_OC6_SetConfig+0xbc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00b      	beq.n	8006b28 <TIM_OC6_SetConfig+0x78>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a17      	ldr	r2, [pc, #92]	; (8006b70 <TIM_OC6_SetConfig+0xc0>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d007      	beq.n	8006b28 <TIM_OC6_SetConfig+0x78>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a16      	ldr	r2, [pc, #88]	; (8006b74 <TIM_OC6_SetConfig+0xc4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d003      	beq.n	8006b28 <TIM_OC6_SetConfig+0x78>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <TIM_OC6_SetConfig+0xc8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d109      	bne.n	8006b3c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	029b      	lsls	r3, r3, #10
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	feff8fff 	.word	0xfeff8fff
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800

08006b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	2201      	movs	r2, #1
 8006b90:	fa02 f303 	lsl.w	r3, r2, r3
 8006b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1a      	ldr	r2, [r3, #32]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a1a      	ldr	r2, [r3, #32]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
	...

08006bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e06d      	b.n	8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a30      	ldr	r2, [pc, #192]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a2f      	ldr	r2, [pc, #188]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d108      	bne.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a20      	ldr	r2, [pc, #128]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d022      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c52:	d01d      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1d      	ldr	r2, [pc, #116]	; (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d018      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1c      	ldr	r2, [pc, #112]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1a      	ldr	r2, [pc, #104]	; (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00e      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a16      	ldr	r2, [pc, #88]	; (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a15      	ldr	r2, [pc, #84]	; (8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10c      	bne.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	40010000 	.word	0x40010000
 8006ccc:	40010400 	.word	0x40010400
 8006cd0:	40000400 	.word	0x40000400
 8006cd4:	40000800 	.word	0x40000800
 8006cd8:	40000c00 	.word	0x40000c00
 8006cdc:	40001800 	.word	0x40001800
 8006ce0:	40014000 	.word	0x40014000

08006ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e042      	b.n	8006d7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7fa f9ab 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2224      	movs	r2, #36	; 0x24
 8006d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f82c 	bl	8006d84 <UART_SetConfig>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e022      	b.n	8006d7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fd88 	bl	8007854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fe0f 	bl	8007998 <UART_CheckIdleState>
 8006d7a:	4603      	mov	r3, r0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d88:	b092      	sub	sp, #72	; 0x48
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4bbe      	ldr	r3, [pc, #760]	; (80070ac <UART_SetConfig+0x328>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4ab3      	ldr	r2, [pc, #716]	; (80070b0 <UART_SetConfig+0x32c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dec:	4313      	orrs	r3, r2
 8006dee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	4baf      	ldr	r3, [pc, #700]	; (80070b4 <UART_SetConfig+0x330>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	6812      	ldr	r2, [r2, #0]
 8006dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e00:	430b      	orrs	r3, r1
 8006e02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	f023 010f 	bic.w	r1, r3, #15
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4aa6      	ldr	r2, [pc, #664]	; (80070b8 <UART_SetConfig+0x334>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d177      	bne.n	8006f14 <UART_SetConfig+0x190>
 8006e24:	4ba5      	ldr	r3, [pc, #660]	; (80070bc <UART_SetConfig+0x338>)
 8006e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e2c:	2b28      	cmp	r3, #40	; 0x28
 8006e2e:	d86d      	bhi.n	8006f0c <UART_SetConfig+0x188>
 8006e30:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <UART_SetConfig+0xb4>)
 8006e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e36:	bf00      	nop
 8006e38:	08006edd 	.word	0x08006edd
 8006e3c:	08006f0d 	.word	0x08006f0d
 8006e40:	08006f0d 	.word	0x08006f0d
 8006e44:	08006f0d 	.word	0x08006f0d
 8006e48:	08006f0d 	.word	0x08006f0d
 8006e4c:	08006f0d 	.word	0x08006f0d
 8006e50:	08006f0d 	.word	0x08006f0d
 8006e54:	08006f0d 	.word	0x08006f0d
 8006e58:	08006ee5 	.word	0x08006ee5
 8006e5c:	08006f0d 	.word	0x08006f0d
 8006e60:	08006f0d 	.word	0x08006f0d
 8006e64:	08006f0d 	.word	0x08006f0d
 8006e68:	08006f0d 	.word	0x08006f0d
 8006e6c:	08006f0d 	.word	0x08006f0d
 8006e70:	08006f0d 	.word	0x08006f0d
 8006e74:	08006f0d 	.word	0x08006f0d
 8006e78:	08006eed 	.word	0x08006eed
 8006e7c:	08006f0d 	.word	0x08006f0d
 8006e80:	08006f0d 	.word	0x08006f0d
 8006e84:	08006f0d 	.word	0x08006f0d
 8006e88:	08006f0d 	.word	0x08006f0d
 8006e8c:	08006f0d 	.word	0x08006f0d
 8006e90:	08006f0d 	.word	0x08006f0d
 8006e94:	08006f0d 	.word	0x08006f0d
 8006e98:	08006ef5 	.word	0x08006ef5
 8006e9c:	08006f0d 	.word	0x08006f0d
 8006ea0:	08006f0d 	.word	0x08006f0d
 8006ea4:	08006f0d 	.word	0x08006f0d
 8006ea8:	08006f0d 	.word	0x08006f0d
 8006eac:	08006f0d 	.word	0x08006f0d
 8006eb0:	08006f0d 	.word	0x08006f0d
 8006eb4:	08006f0d 	.word	0x08006f0d
 8006eb8:	08006efd 	.word	0x08006efd
 8006ebc:	08006f0d 	.word	0x08006f0d
 8006ec0:	08006f0d 	.word	0x08006f0d
 8006ec4:	08006f0d 	.word	0x08006f0d
 8006ec8:	08006f0d 	.word	0x08006f0d
 8006ecc:	08006f0d 	.word	0x08006f0d
 8006ed0:	08006f0d 	.word	0x08006f0d
 8006ed4:	08006f0d 	.word	0x08006f0d
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee2:	e222      	b.n	800732a <UART_SetConfig+0x5a6>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eea:	e21e      	b.n	800732a <UART_SetConfig+0x5a6>
 8006eec:	2308      	movs	r3, #8
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef2:	e21a      	b.n	800732a <UART_SetConfig+0x5a6>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efa:	e216      	b.n	800732a <UART_SetConfig+0x5a6>
 8006efc:	2320      	movs	r3, #32
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f02:	e212      	b.n	800732a <UART_SetConfig+0x5a6>
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0a:	e20e      	b.n	800732a <UART_SetConfig+0x5a6>
 8006f0c:	2380      	movs	r3, #128	; 0x80
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f12:	e20a      	b.n	800732a <UART_SetConfig+0x5a6>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a69      	ldr	r2, [pc, #420]	; (80070c0 <UART_SetConfig+0x33c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d130      	bne.n	8006f80 <UART_SetConfig+0x1fc>
 8006f1e:	4b67      	ldr	r3, [pc, #412]	; (80070bc <UART_SetConfig+0x338>)
 8006f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d826      	bhi.n	8006f78 <UART_SetConfig+0x1f4>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0x1ac>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f49 	.word	0x08006f49
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4e:	e1ec      	b.n	800732a <UART_SetConfig+0x5a6>
 8006f50:	2304      	movs	r3, #4
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f56:	e1e8      	b.n	800732a <UART_SetConfig+0x5a6>
 8006f58:	2308      	movs	r3, #8
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5e:	e1e4      	b.n	800732a <UART_SetConfig+0x5a6>
 8006f60:	2310      	movs	r3, #16
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f66:	e1e0      	b.n	800732a <UART_SetConfig+0x5a6>
 8006f68:	2320      	movs	r3, #32
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6e:	e1dc      	b.n	800732a <UART_SetConfig+0x5a6>
 8006f70:	2340      	movs	r3, #64	; 0x40
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f76:	e1d8      	b.n	800732a <UART_SetConfig+0x5a6>
 8006f78:	2380      	movs	r3, #128	; 0x80
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7e:	e1d4      	b.n	800732a <UART_SetConfig+0x5a6>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a4f      	ldr	r2, [pc, #316]	; (80070c4 <UART_SetConfig+0x340>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d130      	bne.n	8006fec <UART_SetConfig+0x268>
 8006f8a:	4b4c      	ldr	r3, [pc, #304]	; (80070bc <UART_SetConfig+0x338>)
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	2b05      	cmp	r3, #5
 8006f94:	d826      	bhi.n	8006fe4 <UART_SetConfig+0x260>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <UART_SetConfig+0x218>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fb5 	.word	0x08006fb5
 8006fa0:	08006fbd 	.word	0x08006fbd
 8006fa4:	08006fc5 	.word	0x08006fc5
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fd5 	.word	0x08006fd5
 8006fb0:	08006fdd 	.word	0x08006fdd
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fba:	e1b6      	b.n	800732a <UART_SetConfig+0x5a6>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc2:	e1b2      	b.n	800732a <UART_SetConfig+0x5a6>
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fca:	e1ae      	b.n	800732a <UART_SetConfig+0x5a6>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd2:	e1aa      	b.n	800732a <UART_SetConfig+0x5a6>
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fda:	e1a6      	b.n	800732a <UART_SetConfig+0x5a6>
 8006fdc:	2340      	movs	r3, #64	; 0x40
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe2:	e1a2      	b.n	800732a <UART_SetConfig+0x5a6>
 8006fe4:	2380      	movs	r3, #128	; 0x80
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fea:	e19e      	b.n	800732a <UART_SetConfig+0x5a6>
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a35      	ldr	r2, [pc, #212]	; (80070c8 <UART_SetConfig+0x344>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d130      	bne.n	8007058 <UART_SetConfig+0x2d4>
 8006ff6:	4b31      	ldr	r3, [pc, #196]	; (80070bc <UART_SetConfig+0x338>)
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	2b05      	cmp	r3, #5
 8007000:	d826      	bhi.n	8007050 <UART_SetConfig+0x2cc>
 8007002:	a201      	add	r2, pc, #4	; (adr r2, 8007008 <UART_SetConfig+0x284>)
 8007004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007008:	08007021 	.word	0x08007021
 800700c:	08007029 	.word	0x08007029
 8007010:	08007031 	.word	0x08007031
 8007014:	08007039 	.word	0x08007039
 8007018:	08007041 	.word	0x08007041
 800701c:	08007049 	.word	0x08007049
 8007020:	2300      	movs	r3, #0
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007026:	e180      	b.n	800732a <UART_SetConfig+0x5a6>
 8007028:	2304      	movs	r3, #4
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702e:	e17c      	b.n	800732a <UART_SetConfig+0x5a6>
 8007030:	2308      	movs	r3, #8
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007036:	e178      	b.n	800732a <UART_SetConfig+0x5a6>
 8007038:	2310      	movs	r3, #16
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703e:	e174      	b.n	800732a <UART_SetConfig+0x5a6>
 8007040:	2320      	movs	r3, #32
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007046:	e170      	b.n	800732a <UART_SetConfig+0x5a6>
 8007048:	2340      	movs	r3, #64	; 0x40
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704e:	e16c      	b.n	800732a <UART_SetConfig+0x5a6>
 8007050:	2380      	movs	r3, #128	; 0x80
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007056:	e168      	b.n	800732a <UART_SetConfig+0x5a6>
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1b      	ldr	r2, [pc, #108]	; (80070cc <UART_SetConfig+0x348>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d142      	bne.n	80070e8 <UART_SetConfig+0x364>
 8007062:	4b16      	ldr	r3, [pc, #88]	; (80070bc <UART_SetConfig+0x338>)
 8007064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	2b05      	cmp	r3, #5
 800706c:	d838      	bhi.n	80070e0 <UART_SetConfig+0x35c>
 800706e:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <UART_SetConfig+0x2f0>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	0800708d 	.word	0x0800708d
 8007078:	08007095 	.word	0x08007095
 800707c:	0800709d 	.word	0x0800709d
 8007080:	080070a5 	.word	0x080070a5
 8007084:	080070d1 	.word	0x080070d1
 8007088:	080070d9 	.word	0x080070d9
 800708c:	2300      	movs	r3, #0
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007092:	e14a      	b.n	800732a <UART_SetConfig+0x5a6>
 8007094:	2304      	movs	r3, #4
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709a:	e146      	b.n	800732a <UART_SetConfig+0x5a6>
 800709c:	2308      	movs	r3, #8
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a2:	e142      	b.n	800732a <UART_SetConfig+0x5a6>
 80070a4:	2310      	movs	r3, #16
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070aa:	e13e      	b.n	800732a <UART_SetConfig+0x5a6>
 80070ac:	cfff69f3 	.word	0xcfff69f3
 80070b0:	58000c00 	.word	0x58000c00
 80070b4:	11fff4ff 	.word	0x11fff4ff
 80070b8:	40011000 	.word	0x40011000
 80070bc:	58024400 	.word	0x58024400
 80070c0:	40004400 	.word	0x40004400
 80070c4:	40004800 	.word	0x40004800
 80070c8:	40004c00 	.word	0x40004c00
 80070cc:	40005000 	.word	0x40005000
 80070d0:	2320      	movs	r3, #32
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d6:	e128      	b.n	800732a <UART_SetConfig+0x5a6>
 80070d8:	2340      	movs	r3, #64	; 0x40
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070de:	e124      	b.n	800732a <UART_SetConfig+0x5a6>
 80070e0:	2380      	movs	r3, #128	; 0x80
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e6:	e120      	b.n	800732a <UART_SetConfig+0x5a6>
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4acb      	ldr	r2, [pc, #812]	; (800741c <UART_SetConfig+0x698>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d176      	bne.n	80071e0 <UART_SetConfig+0x45c>
 80070f2:	4bcb      	ldr	r3, [pc, #812]	; (8007420 <UART_SetConfig+0x69c>)
 80070f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070fa:	2b28      	cmp	r3, #40	; 0x28
 80070fc:	d86c      	bhi.n	80071d8 <UART_SetConfig+0x454>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <UART_SetConfig+0x380>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	080071a9 	.word	0x080071a9
 8007108:	080071d9 	.word	0x080071d9
 800710c:	080071d9 	.word	0x080071d9
 8007110:	080071d9 	.word	0x080071d9
 8007114:	080071d9 	.word	0x080071d9
 8007118:	080071d9 	.word	0x080071d9
 800711c:	080071d9 	.word	0x080071d9
 8007120:	080071d9 	.word	0x080071d9
 8007124:	080071b1 	.word	0x080071b1
 8007128:	080071d9 	.word	0x080071d9
 800712c:	080071d9 	.word	0x080071d9
 8007130:	080071d9 	.word	0x080071d9
 8007134:	080071d9 	.word	0x080071d9
 8007138:	080071d9 	.word	0x080071d9
 800713c:	080071d9 	.word	0x080071d9
 8007140:	080071d9 	.word	0x080071d9
 8007144:	080071b9 	.word	0x080071b9
 8007148:	080071d9 	.word	0x080071d9
 800714c:	080071d9 	.word	0x080071d9
 8007150:	080071d9 	.word	0x080071d9
 8007154:	080071d9 	.word	0x080071d9
 8007158:	080071d9 	.word	0x080071d9
 800715c:	080071d9 	.word	0x080071d9
 8007160:	080071d9 	.word	0x080071d9
 8007164:	080071c1 	.word	0x080071c1
 8007168:	080071d9 	.word	0x080071d9
 800716c:	080071d9 	.word	0x080071d9
 8007170:	080071d9 	.word	0x080071d9
 8007174:	080071d9 	.word	0x080071d9
 8007178:	080071d9 	.word	0x080071d9
 800717c:	080071d9 	.word	0x080071d9
 8007180:	080071d9 	.word	0x080071d9
 8007184:	080071c9 	.word	0x080071c9
 8007188:	080071d9 	.word	0x080071d9
 800718c:	080071d9 	.word	0x080071d9
 8007190:	080071d9 	.word	0x080071d9
 8007194:	080071d9 	.word	0x080071d9
 8007198:	080071d9 	.word	0x080071d9
 800719c:	080071d9 	.word	0x080071d9
 80071a0:	080071d9 	.word	0x080071d9
 80071a4:	080071d1 	.word	0x080071d1
 80071a8:	2301      	movs	r3, #1
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ae:	e0bc      	b.n	800732a <UART_SetConfig+0x5a6>
 80071b0:	2304      	movs	r3, #4
 80071b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b6:	e0b8      	b.n	800732a <UART_SetConfig+0x5a6>
 80071b8:	2308      	movs	r3, #8
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071be:	e0b4      	b.n	800732a <UART_SetConfig+0x5a6>
 80071c0:	2310      	movs	r3, #16
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c6:	e0b0      	b.n	800732a <UART_SetConfig+0x5a6>
 80071c8:	2320      	movs	r3, #32
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ce:	e0ac      	b.n	800732a <UART_SetConfig+0x5a6>
 80071d0:	2340      	movs	r3, #64	; 0x40
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d6:	e0a8      	b.n	800732a <UART_SetConfig+0x5a6>
 80071d8:	2380      	movs	r3, #128	; 0x80
 80071da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071de:	e0a4      	b.n	800732a <UART_SetConfig+0x5a6>
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a8f      	ldr	r2, [pc, #572]	; (8007424 <UART_SetConfig+0x6a0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d130      	bne.n	800724c <UART_SetConfig+0x4c8>
 80071ea:	4b8d      	ldr	r3, [pc, #564]	; (8007420 <UART_SetConfig+0x69c>)
 80071ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	2b05      	cmp	r3, #5
 80071f4:	d826      	bhi.n	8007244 <UART_SetConfig+0x4c0>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <UART_SetConfig+0x478>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	08007215 	.word	0x08007215
 8007200:	0800721d 	.word	0x0800721d
 8007204:	08007225 	.word	0x08007225
 8007208:	0800722d 	.word	0x0800722d
 800720c:	08007235 	.word	0x08007235
 8007210:	0800723d 	.word	0x0800723d
 8007214:	2300      	movs	r3, #0
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721a:	e086      	b.n	800732a <UART_SetConfig+0x5a6>
 800721c:	2304      	movs	r3, #4
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007222:	e082      	b.n	800732a <UART_SetConfig+0x5a6>
 8007224:	2308      	movs	r3, #8
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722a:	e07e      	b.n	800732a <UART_SetConfig+0x5a6>
 800722c:	2310      	movs	r3, #16
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007232:	e07a      	b.n	800732a <UART_SetConfig+0x5a6>
 8007234:	2320      	movs	r3, #32
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723a:	e076      	b.n	800732a <UART_SetConfig+0x5a6>
 800723c:	2340      	movs	r3, #64	; 0x40
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007242:	e072      	b.n	800732a <UART_SetConfig+0x5a6>
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724a:	e06e      	b.n	800732a <UART_SetConfig+0x5a6>
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a75      	ldr	r2, [pc, #468]	; (8007428 <UART_SetConfig+0x6a4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d130      	bne.n	80072b8 <UART_SetConfig+0x534>
 8007256:	4b72      	ldr	r3, [pc, #456]	; (8007420 <UART_SetConfig+0x69c>)
 8007258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	2b05      	cmp	r3, #5
 8007260:	d826      	bhi.n	80072b0 <UART_SetConfig+0x52c>
 8007262:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <UART_SetConfig+0x4e4>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	08007281 	.word	0x08007281
 800726c:	08007289 	.word	0x08007289
 8007270:	08007291 	.word	0x08007291
 8007274:	08007299 	.word	0x08007299
 8007278:	080072a1 	.word	0x080072a1
 800727c:	080072a9 	.word	0x080072a9
 8007280:	2300      	movs	r3, #0
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007286:	e050      	b.n	800732a <UART_SetConfig+0x5a6>
 8007288:	2304      	movs	r3, #4
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728e:	e04c      	b.n	800732a <UART_SetConfig+0x5a6>
 8007290:	2308      	movs	r3, #8
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007296:	e048      	b.n	800732a <UART_SetConfig+0x5a6>
 8007298:	2310      	movs	r3, #16
 800729a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729e:	e044      	b.n	800732a <UART_SetConfig+0x5a6>
 80072a0:	2320      	movs	r3, #32
 80072a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a6:	e040      	b.n	800732a <UART_SetConfig+0x5a6>
 80072a8:	2340      	movs	r3, #64	; 0x40
 80072aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ae:	e03c      	b.n	800732a <UART_SetConfig+0x5a6>
 80072b0:	2380      	movs	r3, #128	; 0x80
 80072b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b6:	e038      	b.n	800732a <UART_SetConfig+0x5a6>
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a5b      	ldr	r2, [pc, #364]	; (800742c <UART_SetConfig+0x6a8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d130      	bne.n	8007324 <UART_SetConfig+0x5a0>
 80072c2:	4b57      	ldr	r3, [pc, #348]	; (8007420 <UART_SetConfig+0x69c>)
 80072c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	2b05      	cmp	r3, #5
 80072cc:	d826      	bhi.n	800731c <UART_SetConfig+0x598>
 80072ce:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <UART_SetConfig+0x550>)
 80072d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d4:	080072ed 	.word	0x080072ed
 80072d8:	080072f5 	.word	0x080072f5
 80072dc:	080072fd 	.word	0x080072fd
 80072e0:	08007305 	.word	0x08007305
 80072e4:	0800730d 	.word	0x0800730d
 80072e8:	08007315 	.word	0x08007315
 80072ec:	2302      	movs	r3, #2
 80072ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f2:	e01a      	b.n	800732a <UART_SetConfig+0x5a6>
 80072f4:	2304      	movs	r3, #4
 80072f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fa:	e016      	b.n	800732a <UART_SetConfig+0x5a6>
 80072fc:	2308      	movs	r3, #8
 80072fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007302:	e012      	b.n	800732a <UART_SetConfig+0x5a6>
 8007304:	2310      	movs	r3, #16
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730a:	e00e      	b.n	800732a <UART_SetConfig+0x5a6>
 800730c:	2320      	movs	r3, #32
 800730e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007312:	e00a      	b.n	800732a <UART_SetConfig+0x5a6>
 8007314:	2340      	movs	r3, #64	; 0x40
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731a:	e006      	b.n	800732a <UART_SetConfig+0x5a6>
 800731c:	2380      	movs	r3, #128	; 0x80
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007322:	e002      	b.n	800732a <UART_SetConfig+0x5a6>
 8007324:	2380      	movs	r3, #128	; 0x80
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a3f      	ldr	r2, [pc, #252]	; (800742c <UART_SetConfig+0x6a8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	f040 80f8 	bne.w	8007526 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007336:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800733a:	2b20      	cmp	r3, #32
 800733c:	dc46      	bgt.n	80073cc <UART_SetConfig+0x648>
 800733e:	2b02      	cmp	r3, #2
 8007340:	f2c0 8082 	blt.w	8007448 <UART_SetConfig+0x6c4>
 8007344:	3b02      	subs	r3, #2
 8007346:	2b1e      	cmp	r3, #30
 8007348:	d87e      	bhi.n	8007448 <UART_SetConfig+0x6c4>
 800734a:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <UART_SetConfig+0x5cc>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	080073d3 	.word	0x080073d3
 8007354:	08007449 	.word	0x08007449
 8007358:	080073db 	.word	0x080073db
 800735c:	08007449 	.word	0x08007449
 8007360:	08007449 	.word	0x08007449
 8007364:	08007449 	.word	0x08007449
 8007368:	080073eb 	.word	0x080073eb
 800736c:	08007449 	.word	0x08007449
 8007370:	08007449 	.word	0x08007449
 8007374:	08007449 	.word	0x08007449
 8007378:	08007449 	.word	0x08007449
 800737c:	08007449 	.word	0x08007449
 8007380:	08007449 	.word	0x08007449
 8007384:	08007449 	.word	0x08007449
 8007388:	080073fb 	.word	0x080073fb
 800738c:	08007449 	.word	0x08007449
 8007390:	08007449 	.word	0x08007449
 8007394:	08007449 	.word	0x08007449
 8007398:	08007449 	.word	0x08007449
 800739c:	08007449 	.word	0x08007449
 80073a0:	08007449 	.word	0x08007449
 80073a4:	08007449 	.word	0x08007449
 80073a8:	08007449 	.word	0x08007449
 80073ac:	08007449 	.word	0x08007449
 80073b0:	08007449 	.word	0x08007449
 80073b4:	08007449 	.word	0x08007449
 80073b8:	08007449 	.word	0x08007449
 80073bc:	08007449 	.word	0x08007449
 80073c0:	08007449 	.word	0x08007449
 80073c4:	08007449 	.word	0x08007449
 80073c8:	0800743b 	.word	0x0800743b
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	d037      	beq.n	8007440 <UART_SetConfig+0x6bc>
 80073d0:	e03a      	b.n	8007448 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80073d2:	f7fe f9c7 	bl	8005764 <HAL_RCCEx_GetD3PCLK1Freq>
 80073d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073d8:	e03c      	b.n	8007454 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe f9d6 	bl	8005790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073e8:	e034      	b.n	8007454 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ea:	f107 0318 	add.w	r3, r7, #24
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fb22 	bl	8005a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073f8:	e02c      	b.n	8007454 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073fa:	4b09      	ldr	r3, [pc, #36]	; (8007420 <UART_SetConfig+0x69c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007406:	4b06      	ldr	r3, [pc, #24]	; (8007420 <UART_SetConfig+0x69c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	08db      	lsrs	r3, r3, #3
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	4a07      	ldr	r2, [pc, #28]	; (8007430 <UART_SetConfig+0x6ac>)
 8007412:	fa22 f303 	lsr.w	r3, r2, r3
 8007416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007418:	e01c      	b.n	8007454 <UART_SetConfig+0x6d0>
 800741a:	bf00      	nop
 800741c:	40011400 	.word	0x40011400
 8007420:	58024400 	.word	0x58024400
 8007424:	40007800 	.word	0x40007800
 8007428:	40007c00 	.word	0x40007c00
 800742c:	58000c00 	.word	0x58000c00
 8007430:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007434:	4b9d      	ldr	r3, [pc, #628]	; (80076ac <UART_SetConfig+0x928>)
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007438:	e00c      	b.n	8007454 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800743a:	4b9d      	ldr	r3, [pc, #628]	; (80076b0 <UART_SetConfig+0x92c>)
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800743e:	e009      	b.n	8007454 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007446:	e005      	b.n	8007454 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007452:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 81de 	beq.w	8007818 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	4a94      	ldr	r2, [pc, #592]	; (80076b4 <UART_SetConfig+0x930>)
 8007462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007466:	461a      	mov	r2, r3
 8007468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746a:	fbb3 f3f2 	udiv	r3, r3, r2
 800746e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	4613      	mov	r3, r2
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	4413      	add	r3, r2
 800747a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800747c:	429a      	cmp	r2, r3
 800747e:	d305      	bcc.n	800748c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007488:	429a      	cmp	r2, r3
 800748a:	d903      	bls.n	8007494 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007492:	e1c1      	b.n	8007818 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007496:	2200      	movs	r2, #0
 8007498:	60bb      	str	r3, [r7, #8]
 800749a:	60fa      	str	r2, [r7, #12]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	4a84      	ldr	r2, [pc, #528]	; (80076b4 <UART_SetConfig+0x930>)
 80074a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2200      	movs	r2, #0
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	607a      	str	r2, [r7, #4]
 80074ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074b6:	f7f8 ff63 	bl	8000380 <__aeabi_uldivmod>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4610      	mov	r0, r2
 80074c0:	4619      	mov	r1, r3
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	020b      	lsls	r3, r1, #8
 80074cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074d0:	0202      	lsls	r2, r0, #8
 80074d2:	6979      	ldr	r1, [r7, #20]
 80074d4:	6849      	ldr	r1, [r1, #4]
 80074d6:	0849      	lsrs	r1, r1, #1
 80074d8:	2000      	movs	r0, #0
 80074da:	460c      	mov	r4, r1
 80074dc:	4605      	mov	r5, r0
 80074de:	eb12 0804 	adds.w	r8, r2, r4
 80074e2:	eb43 0905 	adc.w	r9, r3, r5
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	469a      	mov	sl, r3
 80074ee:	4693      	mov	fp, r2
 80074f0:	4652      	mov	r2, sl
 80074f2:	465b      	mov	r3, fp
 80074f4:	4640      	mov	r0, r8
 80074f6:	4649      	mov	r1, r9
 80074f8:	f7f8 ff42 	bl	8000380 <__aeabi_uldivmod>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4613      	mov	r3, r2
 8007502:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800750a:	d308      	bcc.n	800751e <UART_SetConfig+0x79a>
 800750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007512:	d204      	bcs.n	800751e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800751a:	60da      	str	r2, [r3, #12]
 800751c:	e17c      	b.n	8007818 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007524:	e178      	b.n	8007818 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800752e:	f040 80c5 	bne.w	80076bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007532:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007536:	2b20      	cmp	r3, #32
 8007538:	dc48      	bgt.n	80075cc <UART_SetConfig+0x848>
 800753a:	2b00      	cmp	r3, #0
 800753c:	db7b      	blt.n	8007636 <UART_SetConfig+0x8b2>
 800753e:	2b20      	cmp	r3, #32
 8007540:	d879      	bhi.n	8007636 <UART_SetConfig+0x8b2>
 8007542:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <UART_SetConfig+0x7c4>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	080075d3 	.word	0x080075d3
 800754c:	080075db 	.word	0x080075db
 8007550:	08007637 	.word	0x08007637
 8007554:	08007637 	.word	0x08007637
 8007558:	080075e3 	.word	0x080075e3
 800755c:	08007637 	.word	0x08007637
 8007560:	08007637 	.word	0x08007637
 8007564:	08007637 	.word	0x08007637
 8007568:	080075f3 	.word	0x080075f3
 800756c:	08007637 	.word	0x08007637
 8007570:	08007637 	.word	0x08007637
 8007574:	08007637 	.word	0x08007637
 8007578:	08007637 	.word	0x08007637
 800757c:	08007637 	.word	0x08007637
 8007580:	08007637 	.word	0x08007637
 8007584:	08007637 	.word	0x08007637
 8007588:	08007603 	.word	0x08007603
 800758c:	08007637 	.word	0x08007637
 8007590:	08007637 	.word	0x08007637
 8007594:	08007637 	.word	0x08007637
 8007598:	08007637 	.word	0x08007637
 800759c:	08007637 	.word	0x08007637
 80075a0:	08007637 	.word	0x08007637
 80075a4:	08007637 	.word	0x08007637
 80075a8:	08007637 	.word	0x08007637
 80075ac:	08007637 	.word	0x08007637
 80075b0:	08007637 	.word	0x08007637
 80075b4:	08007637 	.word	0x08007637
 80075b8:	08007637 	.word	0x08007637
 80075bc:	08007637 	.word	0x08007637
 80075c0:	08007637 	.word	0x08007637
 80075c4:	08007637 	.word	0x08007637
 80075c8:	08007629 	.word	0x08007629
 80075cc:	2b40      	cmp	r3, #64	; 0x40
 80075ce:	d02e      	beq.n	800762e <UART_SetConfig+0x8aa>
 80075d0:	e031      	b.n	8007636 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075d2:	f7fc fe91 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 80075d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075d8:	e033      	b.n	8007642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075da:	f7fc fea3 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 80075de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075e0:	e02f      	b.n	8007642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe f8d2 	bl	8005790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075f0:	e027      	b.n	8007642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075f2:	f107 0318 	add.w	r3, r7, #24
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fa1e 	bl	8005a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007600:	e01f      	b.n	8007642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007602:	4b2d      	ldr	r3, [pc, #180]	; (80076b8 <UART_SetConfig+0x934>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800760e:	4b2a      	ldr	r3, [pc, #168]	; (80076b8 <UART_SetConfig+0x934>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	08db      	lsrs	r3, r3, #3
 8007614:	f003 0303 	and.w	r3, r3, #3
 8007618:	4a24      	ldr	r2, [pc, #144]	; (80076ac <UART_SetConfig+0x928>)
 800761a:	fa22 f303 	lsr.w	r3, r2, r3
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007620:	e00f      	b.n	8007642 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007622:	4b22      	ldr	r3, [pc, #136]	; (80076ac <UART_SetConfig+0x928>)
 8007624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007626:	e00c      	b.n	8007642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007628:	4b21      	ldr	r3, [pc, #132]	; (80076b0 <UART_SetConfig+0x92c>)
 800762a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800762c:	e009      	b.n	8007642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800762e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007634:	e005      	b.n	8007642 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007640:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 80e7 	beq.w	8007818 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	4a19      	ldr	r2, [pc, #100]	; (80076b4 <UART_SetConfig+0x930>)
 8007650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007654:	461a      	mov	r2, r3
 8007656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007658:	fbb3 f3f2 	udiv	r3, r3, r2
 800765c:	005a      	lsls	r2, r3, #1
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	085b      	lsrs	r3, r3, #1
 8007664:	441a      	add	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	fbb2 f3f3 	udiv	r3, r2, r3
 800766e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007672:	2b0f      	cmp	r3, #15
 8007674:	d916      	bls.n	80076a4 <UART_SetConfig+0x920>
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767c:	d212      	bcs.n	80076a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	b29b      	uxth	r3, r3
 8007682:	f023 030f 	bic.w	r3, r3, #15
 8007686:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	085b      	lsrs	r3, r3, #1
 800768c:	b29b      	uxth	r3, r3
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	b29a      	uxth	r2, r3
 8007694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007696:	4313      	orrs	r3, r2
 8007698:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80076a0:	60da      	str	r2, [r3, #12]
 80076a2:	e0b9      	b.n	8007818 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076aa:	e0b5      	b.n	8007818 <UART_SetConfig+0xa94>
 80076ac:	03d09000 	.word	0x03d09000
 80076b0:	003d0900 	.word	0x003d0900
 80076b4:	08016b48 	.word	0x08016b48
 80076b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80076bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	dc49      	bgt.n	8007758 <UART_SetConfig+0x9d4>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	db7c      	blt.n	80077c2 <UART_SetConfig+0xa3e>
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d87a      	bhi.n	80077c2 <UART_SetConfig+0xa3e>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <UART_SetConfig+0x950>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	0800775f 	.word	0x0800775f
 80076d8:	08007767 	.word	0x08007767
 80076dc:	080077c3 	.word	0x080077c3
 80076e0:	080077c3 	.word	0x080077c3
 80076e4:	0800776f 	.word	0x0800776f
 80076e8:	080077c3 	.word	0x080077c3
 80076ec:	080077c3 	.word	0x080077c3
 80076f0:	080077c3 	.word	0x080077c3
 80076f4:	0800777f 	.word	0x0800777f
 80076f8:	080077c3 	.word	0x080077c3
 80076fc:	080077c3 	.word	0x080077c3
 8007700:	080077c3 	.word	0x080077c3
 8007704:	080077c3 	.word	0x080077c3
 8007708:	080077c3 	.word	0x080077c3
 800770c:	080077c3 	.word	0x080077c3
 8007710:	080077c3 	.word	0x080077c3
 8007714:	0800778f 	.word	0x0800778f
 8007718:	080077c3 	.word	0x080077c3
 800771c:	080077c3 	.word	0x080077c3
 8007720:	080077c3 	.word	0x080077c3
 8007724:	080077c3 	.word	0x080077c3
 8007728:	080077c3 	.word	0x080077c3
 800772c:	080077c3 	.word	0x080077c3
 8007730:	080077c3 	.word	0x080077c3
 8007734:	080077c3 	.word	0x080077c3
 8007738:	080077c3 	.word	0x080077c3
 800773c:	080077c3 	.word	0x080077c3
 8007740:	080077c3 	.word	0x080077c3
 8007744:	080077c3 	.word	0x080077c3
 8007748:	080077c3 	.word	0x080077c3
 800774c:	080077c3 	.word	0x080077c3
 8007750:	080077c3 	.word	0x080077c3
 8007754:	080077b5 	.word	0x080077b5
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d02e      	beq.n	80077ba <UART_SetConfig+0xa36>
 800775c:	e031      	b.n	80077c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800775e:	f7fc fdcb 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8007762:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007764:	e033      	b.n	80077ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007766:	f7fc fddd 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 800776a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800776c:	e02f      	b.n	80077ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800776e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe f80c 	bl	8005790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800777c:	e027      	b.n	80077ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800777e:	f107 0318 	add.w	r3, r7, #24
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe f958 	bl	8005a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800778c:	e01f      	b.n	80077ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800778e:	4b2d      	ldr	r3, [pc, #180]	; (8007844 <UART_SetConfig+0xac0>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800779a:	4b2a      	ldr	r3, [pc, #168]	; (8007844 <UART_SetConfig+0xac0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	08db      	lsrs	r3, r3, #3
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	4a28      	ldr	r2, [pc, #160]	; (8007848 <UART_SetConfig+0xac4>)
 80077a6:	fa22 f303 	lsr.w	r3, r2, r3
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077ac:	e00f      	b.n	80077ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80077ae:	4b26      	ldr	r3, [pc, #152]	; (8007848 <UART_SetConfig+0xac4>)
 80077b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077b2:	e00c      	b.n	80077ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077b4:	4b25      	ldr	r3, [pc, #148]	; (800784c <UART_SetConfig+0xac8>)
 80077b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077b8:	e009      	b.n	80077ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077c0:	e005      	b.n	80077ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80077cc:	bf00      	nop
    }

    if (pclk != 0U)
 80077ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d021      	beq.n	8007818 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	4a1d      	ldr	r2, [pc, #116]	; (8007850 <UART_SetConfig+0xacc>)
 80077da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077de:	461a      	mov	r2, r3
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	441a      	add	r2, r3
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fa:	2b0f      	cmp	r3, #15
 80077fc:	d909      	bls.n	8007812 <UART_SetConfig+0xa8e>
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007804:	d205      	bcs.n	8007812 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	b29a      	uxth	r2, r3
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60da      	str	r2, [r3, #12]
 8007810:	e002      	b.n	8007818 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2201      	movs	r2, #1
 800781c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2201      	movs	r2, #1
 8007824:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2200      	movs	r2, #0
 800782c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2200      	movs	r2, #0
 8007832:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007834:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007838:	4618      	mov	r0, r3
 800783a:	3748      	adds	r7, #72	; 0x48
 800783c:	46bd      	mov	sp, r7
 800783e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007842:	bf00      	nop
 8007844:	58024400 	.word	0x58024400
 8007848:	03d09000 	.word	0x03d09000
 800784c:	003d0900 	.word	0x003d0900
 8007850:	08016b48 	.word	0x08016b48

08007854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00a      	beq.n	800787e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c6:	f003 0308 	and.w	r3, r3, #8
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	f003 0310 	and.w	r3, r3, #16
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790a:	f003 0320 	and.w	r3, r3, #32
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01a      	beq.n	800796a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007952:	d10a      	bne.n	800796a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	605a      	str	r2, [r3, #4]
  }
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b098      	sub	sp, #96	; 0x60
 800799c:	af02      	add	r7, sp, #8
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079a8:	f7f9 fde4 	bl	8001574 <HAL_GetTick>
 80079ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0308 	and.w	r3, r3, #8
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d12f      	bne.n	8007a1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079c4:	2200      	movs	r2, #0
 80079c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f88e 	bl	8007aec <UART_WaitOnFlagUntilTimeout>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d022      	beq.n	8007a1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ea:	653b      	str	r3, [r7, #80]	; 0x50
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f4:	647b      	str	r3, [r7, #68]	; 0x44
 80079f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e6      	bne.n	80079d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e063      	b.n	8007ae4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d149      	bne.n	8007abe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a32:	2200      	movs	r2, #0
 8007a34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f857 	bl	8007aec <UART_WaitOnFlagUntilTimeout>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d03c      	beq.n	8007abe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	623b      	str	r3, [r7, #32]
   return(result);
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a62:	633b      	str	r3, [r7, #48]	; 0x30
 8007a64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e6      	bne.n	8007a44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a96:	61fa      	str	r2, [r7, #28]
 8007a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	69b9      	ldr	r1, [r7, #24]
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e5      	bne.n	8007a76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e012      	b.n	8007ae4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3758      	adds	r7, #88	; 0x58
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	603b      	str	r3, [r7, #0]
 8007af8:	4613      	mov	r3, r2
 8007afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afc:	e049      	b.n	8007b92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b04:	d045      	beq.n	8007b92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b06:	f7f9 fd35 	bl	8001574 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d302      	bcc.n	8007b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e048      	b.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0304 	and.w	r3, r3, #4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d031      	beq.n	8007b92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	f003 0308 	and.w	r3, r3, #8
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d110      	bne.n	8007b5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2208      	movs	r2, #8
 8007b42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 f839 	bl	8007bbc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2208      	movs	r2, #8
 8007b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e029      	b.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b6c:	d111      	bne.n	8007b92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f81f 	bl	8007bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e00f      	b.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69da      	ldr	r2, [r3, #28]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	bf0c      	ite	eq
 8007ba2:	2301      	moveq	r3, #1
 8007ba4:	2300      	movne	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	461a      	mov	r2, r3
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d0a6      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b095      	sub	sp, #84	; 0x54
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be2:	643b      	str	r3, [r7, #64]	; 0x40
 8007be4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e6      	bne.n	8007bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	4b1e      	ldr	r3, [pc, #120]	; (8007c84 <UART_EndRxTransfer+0xc8>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3308      	adds	r3, #8
 8007c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e5      	bne.n	8007bf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d118      	bne.n	8007c64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f023 0310 	bic.w	r3, r3, #16
 8007c46:	647b      	str	r3, [r7, #68]	; 0x44
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c50:	61bb      	str	r3, [r7, #24]
 8007c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6979      	ldr	r1, [r7, #20]
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e6      	bne.n	8007c32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c78:	bf00      	nop
 8007c7a:	3754      	adds	r7, #84	; 0x54
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	effffffe 	.word	0xeffffffe

08007c88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_UARTEx_DisableFifoMode+0x16>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e027      	b.n	8007cee <HAL_UARTEx_DisableFifoMode+0x66>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2224      	movs	r2, #36	; 0x24
 8007caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0201 	bic.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ccc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e02d      	b.n	8007d6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2224      	movs	r2, #36	; 0x24
 8007d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0201 	bic.w	r2, r2, #1
 8007d38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f850 	bl	8007df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d101      	bne.n	8007d8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e02d      	b.n	8007dea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2224      	movs	r2, #36	; 0x24
 8007d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0201 	bic.w	r2, r2, #1
 8007db4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f812 	bl	8007df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d108      	bne.n	8007e16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e14:	e031      	b.n	8007e7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e16:	2310      	movs	r3, #16
 8007e18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e1a:	2310      	movs	r3, #16
 8007e1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	0e5b      	lsrs	r3, r3, #25
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	0f5b      	lsrs	r3, r3, #29
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	7b3a      	ldrb	r2, [r7, #12]
 8007e42:	4911      	ldr	r1, [pc, #68]	; (8007e88 <UARTEx_SetNbDataToProcess+0x94>)
 8007e44:	5c8a      	ldrb	r2, [r1, r2]
 8007e46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e4a:	7b3a      	ldrb	r2, [r7, #12]
 8007e4c:	490f      	ldr	r1, [pc, #60]	; (8007e8c <UARTEx_SetNbDataToProcess+0x98>)
 8007e4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e50:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	7b7a      	ldrb	r2, [r7, #13]
 8007e60:	4909      	ldr	r1, [pc, #36]	; (8007e88 <UARTEx_SetNbDataToProcess+0x94>)
 8007e62:	5c8a      	ldrb	r2, [r1, r2]
 8007e64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e68:	7b7a      	ldrb	r2, [r7, #13]
 8007e6a:	4908      	ldr	r1, [pc, #32]	; (8007e8c <UARTEx_SetNbDataToProcess+0x98>)
 8007e6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e7a:	bf00      	nop
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	08016b60 	.word	0x08016b60
 8007e8c:	08016b68 	.word	0x08016b68

08007e90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e90:	b084      	sub	sp, #16
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	f107 001c 	add.w	r0, r7, #28
 8007e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d120      	bne.n	8007eea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	4b2a      	ldr	r3, [pc, #168]	; (8007f64 <USB_CoreInit+0xd4>)
 8007eba:	4013      	ands	r3, r2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d105      	bne.n	8007ede <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 faac 	bl	800843c <USB_CoreReset>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73fb      	strb	r3, [r7, #15]
 8007ee8:	e01a      	b.n	8007f20 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 faa0 	bl	800843c <USB_CoreReset>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	639a      	str	r2, [r3, #56]	; 0x38
 8007f12:	e005      	b.n	8007f20 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d116      	bne.n	8007f54 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f34:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <USB_CoreInit+0xd8>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f043 0206 	orr.w	r2, r3, #6
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f043 0220 	orr.w	r2, r3, #32
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f60:	b004      	add	sp, #16
 8007f62:	4770      	bx	lr
 8007f64:	ffbdffbf 	.word	0xffbdffbf
 8007f68:	03ee0000 	.word	0x03ee0000

08007f6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f023 0201 	bic.w	r2, r3, #1
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d115      	bne.n	8007fdc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	f7f9 fae5 	bl	800158c <HAL_Delay>
      ms++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fa29 	bl	8008420 <USB_GetMode>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d01e      	beq.n	8008012 <USB_SetCurrentMode+0x84>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b31      	cmp	r3, #49	; 0x31
 8007fd8:	d9f0      	bls.n	8007fbc <USB_SetCurrentMode+0x2e>
 8007fda:	e01a      	b.n	8008012 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d115      	bne.n	800800e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fee:	2001      	movs	r0, #1
 8007ff0:	f7f9 facc 	bl	800158c <HAL_Delay>
      ms++;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fa10 	bl	8008420 <USB_GetMode>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d005      	beq.n	8008012 <USB_SetCurrentMode+0x84>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b31      	cmp	r3, #49	; 0x31
 800800a:	d9f0      	bls.n	8007fee <USB_SetCurrentMode+0x60>
 800800c:	e001      	b.n	8008012 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e005      	b.n	800801e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2b32      	cmp	r3, #50	; 0x32
 8008016:	d101      	bne.n	800801c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e000      	b.n	800801e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008028:	b084      	sub	sp, #16
 800802a:	b580      	push	{r7, lr}
 800802c:	b086      	sub	sp, #24
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008042:	2300      	movs	r3, #0
 8008044:	613b      	str	r3, [r7, #16]
 8008046:	e009      	b.n	800805c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	3340      	adds	r3, #64	; 0x40
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	2200      	movs	r2, #0
 8008054:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	3301      	adds	r3, #1
 800805a:	613b      	str	r3, [r7, #16]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b0e      	cmp	r3, #14
 8008060:	d9f2      	bls.n	8008048 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008064:	2b00      	cmp	r3, #0
 8008066:	d11c      	bne.n	80080a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008076:	f043 0302 	orr.w	r3, r3, #2
 800807a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	e005      	b.n	80080ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080b4:	461a      	mov	r2, r3
 80080b6:	2300      	movs	r3, #0
 80080b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c0:	4619      	mov	r1, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c8:	461a      	mov	r2, r3
 80080ca:	680b      	ldr	r3, [r1, #0]
 80080cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d10c      	bne.n	80080ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d104      	bne.n	80080e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080da:	2100      	movs	r1, #0
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f965 	bl	80083ac <USB_SetDevSpeed>
 80080e2:	e008      	b.n	80080f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080e4:	2101      	movs	r1, #1
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f960 	bl	80083ac <USB_SetDevSpeed>
 80080ec:	e003      	b.n	80080f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080ee:	2103      	movs	r1, #3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f95b 	bl	80083ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080f6:	2110      	movs	r1, #16
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f8f3 	bl	80082e4 <USB_FlushTxFifo>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f91f 	bl	800834c <USB_FlushRxFifo>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811e:	461a      	mov	r2, r3
 8008120:	2300      	movs	r3, #0
 8008122:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800812a:	461a      	mov	r2, r3
 800812c:	2300      	movs	r3, #0
 800812e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008136:	461a      	mov	r2, r3
 8008138:	2300      	movs	r3, #0
 800813a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800813c:	2300      	movs	r3, #0
 800813e:	613b      	str	r3, [r7, #16]
 8008140:	e043      	b.n	80081ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4413      	add	r3, r2
 800814a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008158:	d118      	bne.n	800818c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10a      	bne.n	8008176 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816c:	461a      	mov	r2, r3
 800816e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008172:	6013      	str	r3, [r2, #0]
 8008174:	e013      	b.n	800819e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008182:	461a      	mov	r2, r3
 8008184:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	e008      	b.n	800819e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008198:	461a      	mov	r2, r3
 800819a:	2300      	movs	r3, #0
 800819c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081aa:	461a      	mov	r2, r3
 80081ac:	2300      	movs	r3, #0
 80081ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081bc:	461a      	mov	r2, r3
 80081be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	3301      	adds	r3, #1
 80081c8:	613b      	str	r3, [r7, #16]
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d3b7      	bcc.n	8008142 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081d2:	2300      	movs	r3, #0
 80081d4:	613b      	str	r3, [r7, #16]
 80081d6:	e043      	b.n	8008260 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081ee:	d118      	bne.n	8008222 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008202:	461a      	mov	r2, r3
 8008204:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	e013      	b.n	8008234 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008218:	461a      	mov	r2, r3
 800821a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	e008      	b.n	8008234 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822e:	461a      	mov	r2, r3
 8008230:	2300      	movs	r3, #0
 8008232:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008240:	461a      	mov	r2, r3
 8008242:	2300      	movs	r3, #0
 8008244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008252:	461a      	mov	r2, r3
 8008254:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008258:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	3301      	adds	r3, #1
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	429a      	cmp	r2, r3
 8008266:	d3b7      	bcc.n	80081d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800827a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008288:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d105      	bne.n	800829c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	f043 0210 	orr.w	r2, r3, #16
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699a      	ldr	r2, [r3, #24]
 80082a0:	4b0e      	ldr	r3, [pc, #56]	; (80082dc <USB_DevInit+0x2b4>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d005      	beq.n	80082ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	f043 0208 	orr.w	r2, r3, #8
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d105      	bne.n	80082cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	699a      	ldr	r2, [r3, #24]
 80082c4:	4b06      	ldr	r3, [pc, #24]	; (80082e0 <USB_DevInit+0x2b8>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082d8:	b004      	add	sp, #16
 80082da:	4770      	bx	lr
 80082dc:	803c3800 	.word	0x803c3800
 80082e0:	40000004 	.word	0x40000004

080082e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3301      	adds	r3, #1
 80082f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4a13      	ldr	r2, [pc, #76]	; (8008348 <USB_FlushTxFifo+0x64>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d901      	bls.n	8008304 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e01b      	b.n	800833c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	daf2      	bge.n	80082f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	019b      	lsls	r3, r3, #6
 8008314:	f043 0220 	orr.w	r2, r3, #32
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3301      	adds	r3, #1
 8008320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4a08      	ldr	r2, [pc, #32]	; (8008348 <USB_FlushTxFifo+0x64>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d901      	bls.n	800832e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e006      	b.n	800833c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b20      	cmp	r3, #32
 8008338:	d0f0      	beq.n	800831c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	00030d40 	.word	0x00030d40

0800834c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3301      	adds	r3, #1
 800835c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	4a11      	ldr	r2, [pc, #68]	; (80083a8 <USB_FlushRxFifo+0x5c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d901      	bls.n	800836a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e018      	b.n	800839c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	daf2      	bge.n	8008358 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2210      	movs	r2, #16
 800837a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3301      	adds	r3, #1
 8008380:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4a08      	ldr	r2, [pc, #32]	; (80083a8 <USB_FlushRxFifo+0x5c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d901      	bls.n	800838e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e006      	b.n	800839c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b10      	cmp	r3, #16
 8008398:	d0f0      	beq.n	800837c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	00030d40 	.word	0x00030d40

080083ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083cc:	4313      	orrs	r3, r2
 80083ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083f8:	f023 0303 	bic.w	r3, r3, #3
 80083fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800840c:	f043 0302 	orr.w	r3, r3, #2
 8008410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	f003 0301 	and.w	r3, r3, #1
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4a13      	ldr	r2, [pc, #76]	; (80084a0 <USB_CoreReset+0x64>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d901      	bls.n	800845a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e01b      	b.n	8008492 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	daf2      	bge.n	8008448 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f043 0201 	orr.w	r2, r3, #1
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3301      	adds	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4a09      	ldr	r2, [pc, #36]	; (80084a0 <USB_CoreReset+0x64>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d901      	bls.n	8008484 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e006      	b.n	8008492 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b01      	cmp	r3, #1
 800848e:	d0f0      	beq.n	8008472 <USB_CoreReset+0x36>

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	00030d40 	.word	0x00030d40

080084a4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80084aa:	4b8d      	ldr	r3, [pc, #564]	; (80086e0 <MX_LWIP_Init+0x23c>)
 80084ac:	22c0      	movs	r2, #192	; 0xc0
 80084ae:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80084b0:	4b8b      	ldr	r3, [pc, #556]	; (80086e0 <MX_LWIP_Init+0x23c>)
 80084b2:	22a8      	movs	r2, #168	; 0xa8
 80084b4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80084b6:	4b8a      	ldr	r3, [pc, #552]	; (80086e0 <MX_LWIP_Init+0x23c>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 80084bc:	4b88      	ldr	r3, [pc, #544]	; (80086e0 <MX_LWIP_Init+0x23c>)
 80084be:	227b      	movs	r2, #123	; 0x7b
 80084c0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80084c2:	4b88      	ldr	r3, [pc, #544]	; (80086e4 <MX_LWIP_Init+0x240>)
 80084c4:	22ff      	movs	r2, #255	; 0xff
 80084c6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80084c8:	4b86      	ldr	r3, [pc, #536]	; (80086e4 <MX_LWIP_Init+0x240>)
 80084ca:	22ff      	movs	r2, #255	; 0xff
 80084cc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80084ce:	4b85      	ldr	r3, [pc, #532]	; (80086e4 <MX_LWIP_Init+0x240>)
 80084d0:	22ff      	movs	r2, #255	; 0xff
 80084d2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80084d4:	4b83      	ldr	r3, [pc, #524]	; (80086e4 <MX_LWIP_Init+0x240>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80084da:	4b83      	ldr	r3, [pc, #524]	; (80086e8 <MX_LWIP_Init+0x244>)
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80084e0:	4b81      	ldr	r3, [pc, #516]	; (80086e8 <MX_LWIP_Init+0x244>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80084e6:	4b80      	ldr	r3, [pc, #512]	; (80086e8 <MX_LWIP_Init+0x244>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80084ec:	4b7e      	ldr	r3, [pc, #504]	; (80086e8 <MX_LWIP_Init+0x244>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80084f2:	f002 f8ff 	bl	800a6f4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80084f6:	4b7a      	ldr	r3, [pc, #488]	; (80086e0 <MX_LWIP_Init+0x23c>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	061a      	lsls	r2, r3, #24
 80084fc:	4b78      	ldr	r3, [pc, #480]	; (80086e0 <MX_LWIP_Init+0x23c>)
 80084fe:	785b      	ldrb	r3, [r3, #1]
 8008500:	041b      	lsls	r3, r3, #16
 8008502:	431a      	orrs	r2, r3
 8008504:	4b76      	ldr	r3, [pc, #472]	; (80086e0 <MX_LWIP_Init+0x23c>)
 8008506:	789b      	ldrb	r3, [r3, #2]
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	4313      	orrs	r3, r2
 800850c:	4a74      	ldr	r2, [pc, #464]	; (80086e0 <MX_LWIP_Init+0x23c>)
 800850e:	78d2      	ldrb	r2, [r2, #3]
 8008510:	4313      	orrs	r3, r2
 8008512:	061a      	lsls	r2, r3, #24
 8008514:	4b72      	ldr	r3, [pc, #456]	; (80086e0 <MX_LWIP_Init+0x23c>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	0619      	lsls	r1, r3, #24
 800851a:	4b71      	ldr	r3, [pc, #452]	; (80086e0 <MX_LWIP_Init+0x23c>)
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	041b      	lsls	r3, r3, #16
 8008520:	4319      	orrs	r1, r3
 8008522:	4b6f      	ldr	r3, [pc, #444]	; (80086e0 <MX_LWIP_Init+0x23c>)
 8008524:	789b      	ldrb	r3, [r3, #2]
 8008526:	021b      	lsls	r3, r3, #8
 8008528:	430b      	orrs	r3, r1
 800852a:	496d      	ldr	r1, [pc, #436]	; (80086e0 <MX_LWIP_Init+0x23c>)
 800852c:	78c9      	ldrb	r1, [r1, #3]
 800852e:	430b      	orrs	r3, r1
 8008530:	021b      	lsls	r3, r3, #8
 8008532:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008536:	431a      	orrs	r2, r3
 8008538:	4b69      	ldr	r3, [pc, #420]	; (80086e0 <MX_LWIP_Init+0x23c>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	0619      	lsls	r1, r3, #24
 800853e:	4b68      	ldr	r3, [pc, #416]	; (80086e0 <MX_LWIP_Init+0x23c>)
 8008540:	785b      	ldrb	r3, [r3, #1]
 8008542:	041b      	lsls	r3, r3, #16
 8008544:	4319      	orrs	r1, r3
 8008546:	4b66      	ldr	r3, [pc, #408]	; (80086e0 <MX_LWIP_Init+0x23c>)
 8008548:	789b      	ldrb	r3, [r3, #2]
 800854a:	021b      	lsls	r3, r3, #8
 800854c:	430b      	orrs	r3, r1
 800854e:	4964      	ldr	r1, [pc, #400]	; (80086e0 <MX_LWIP_Init+0x23c>)
 8008550:	78c9      	ldrb	r1, [r1, #3]
 8008552:	430b      	orrs	r3, r1
 8008554:	0a1b      	lsrs	r3, r3, #8
 8008556:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800855a:	431a      	orrs	r2, r3
 800855c:	4b60      	ldr	r3, [pc, #384]	; (80086e0 <MX_LWIP_Init+0x23c>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	0619      	lsls	r1, r3, #24
 8008562:	4b5f      	ldr	r3, [pc, #380]	; (80086e0 <MX_LWIP_Init+0x23c>)
 8008564:	785b      	ldrb	r3, [r3, #1]
 8008566:	041b      	lsls	r3, r3, #16
 8008568:	4319      	orrs	r1, r3
 800856a:	4b5d      	ldr	r3, [pc, #372]	; (80086e0 <MX_LWIP_Init+0x23c>)
 800856c:	789b      	ldrb	r3, [r3, #2]
 800856e:	021b      	lsls	r3, r3, #8
 8008570:	430b      	orrs	r3, r1
 8008572:	495b      	ldr	r1, [pc, #364]	; (80086e0 <MX_LWIP_Init+0x23c>)
 8008574:	78c9      	ldrb	r1, [r1, #3]
 8008576:	430b      	orrs	r3, r1
 8008578:	0e1b      	lsrs	r3, r3, #24
 800857a:	4313      	orrs	r3, r2
 800857c:	4a5b      	ldr	r2, [pc, #364]	; (80086ec <MX_LWIP_Init+0x248>)
 800857e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008580:	4b58      	ldr	r3, [pc, #352]	; (80086e4 <MX_LWIP_Init+0x240>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	061a      	lsls	r2, r3, #24
 8008586:	4b57      	ldr	r3, [pc, #348]	; (80086e4 <MX_LWIP_Init+0x240>)
 8008588:	785b      	ldrb	r3, [r3, #1]
 800858a:	041b      	lsls	r3, r3, #16
 800858c:	431a      	orrs	r2, r3
 800858e:	4b55      	ldr	r3, [pc, #340]	; (80086e4 <MX_LWIP_Init+0x240>)
 8008590:	789b      	ldrb	r3, [r3, #2]
 8008592:	021b      	lsls	r3, r3, #8
 8008594:	4313      	orrs	r3, r2
 8008596:	4a53      	ldr	r2, [pc, #332]	; (80086e4 <MX_LWIP_Init+0x240>)
 8008598:	78d2      	ldrb	r2, [r2, #3]
 800859a:	4313      	orrs	r3, r2
 800859c:	061a      	lsls	r2, r3, #24
 800859e:	4b51      	ldr	r3, [pc, #324]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	0619      	lsls	r1, r3, #24
 80085a4:	4b4f      	ldr	r3, [pc, #316]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	041b      	lsls	r3, r3, #16
 80085aa:	4319      	orrs	r1, r3
 80085ac:	4b4d      	ldr	r3, [pc, #308]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085ae:	789b      	ldrb	r3, [r3, #2]
 80085b0:	021b      	lsls	r3, r3, #8
 80085b2:	430b      	orrs	r3, r1
 80085b4:	494b      	ldr	r1, [pc, #300]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085b6:	78c9      	ldrb	r1, [r1, #3]
 80085b8:	430b      	orrs	r3, r1
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085c0:	431a      	orrs	r2, r3
 80085c2:	4b48      	ldr	r3, [pc, #288]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	0619      	lsls	r1, r3, #24
 80085c8:	4b46      	ldr	r3, [pc, #280]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	4319      	orrs	r1, r3
 80085d0:	4b44      	ldr	r3, [pc, #272]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085d2:	789b      	ldrb	r3, [r3, #2]
 80085d4:	021b      	lsls	r3, r3, #8
 80085d6:	430b      	orrs	r3, r1
 80085d8:	4942      	ldr	r1, [pc, #264]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085da:	78c9      	ldrb	r1, [r1, #3]
 80085dc:	430b      	orrs	r3, r1
 80085de:	0a1b      	lsrs	r3, r3, #8
 80085e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80085e4:	431a      	orrs	r2, r3
 80085e6:	4b3f      	ldr	r3, [pc, #252]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	0619      	lsls	r1, r3, #24
 80085ec:	4b3d      	ldr	r3, [pc, #244]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	041b      	lsls	r3, r3, #16
 80085f2:	4319      	orrs	r1, r3
 80085f4:	4b3b      	ldr	r3, [pc, #236]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085f6:	789b      	ldrb	r3, [r3, #2]
 80085f8:	021b      	lsls	r3, r3, #8
 80085fa:	430b      	orrs	r3, r1
 80085fc:	4939      	ldr	r1, [pc, #228]	; (80086e4 <MX_LWIP_Init+0x240>)
 80085fe:	78c9      	ldrb	r1, [r1, #3]
 8008600:	430b      	orrs	r3, r1
 8008602:	0e1b      	lsrs	r3, r3, #24
 8008604:	4313      	orrs	r3, r2
 8008606:	4a3a      	ldr	r2, [pc, #232]	; (80086f0 <MX_LWIP_Init+0x24c>)
 8008608:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800860a:	4b37      	ldr	r3, [pc, #220]	; (80086e8 <MX_LWIP_Init+0x244>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	061a      	lsls	r2, r3, #24
 8008610:	4b35      	ldr	r3, [pc, #212]	; (80086e8 <MX_LWIP_Init+0x244>)
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	041b      	lsls	r3, r3, #16
 8008616:	431a      	orrs	r2, r3
 8008618:	4b33      	ldr	r3, [pc, #204]	; (80086e8 <MX_LWIP_Init+0x244>)
 800861a:	789b      	ldrb	r3, [r3, #2]
 800861c:	021b      	lsls	r3, r3, #8
 800861e:	4313      	orrs	r3, r2
 8008620:	4a31      	ldr	r2, [pc, #196]	; (80086e8 <MX_LWIP_Init+0x244>)
 8008622:	78d2      	ldrb	r2, [r2, #3]
 8008624:	4313      	orrs	r3, r2
 8008626:	061a      	lsls	r2, r3, #24
 8008628:	4b2f      	ldr	r3, [pc, #188]	; (80086e8 <MX_LWIP_Init+0x244>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	0619      	lsls	r1, r3, #24
 800862e:	4b2e      	ldr	r3, [pc, #184]	; (80086e8 <MX_LWIP_Init+0x244>)
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	041b      	lsls	r3, r3, #16
 8008634:	4319      	orrs	r1, r3
 8008636:	4b2c      	ldr	r3, [pc, #176]	; (80086e8 <MX_LWIP_Init+0x244>)
 8008638:	789b      	ldrb	r3, [r3, #2]
 800863a:	021b      	lsls	r3, r3, #8
 800863c:	430b      	orrs	r3, r1
 800863e:	492a      	ldr	r1, [pc, #168]	; (80086e8 <MX_LWIP_Init+0x244>)
 8008640:	78c9      	ldrb	r1, [r1, #3]
 8008642:	430b      	orrs	r3, r1
 8008644:	021b      	lsls	r3, r3, #8
 8008646:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800864a:	431a      	orrs	r2, r3
 800864c:	4b26      	ldr	r3, [pc, #152]	; (80086e8 <MX_LWIP_Init+0x244>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	0619      	lsls	r1, r3, #24
 8008652:	4b25      	ldr	r3, [pc, #148]	; (80086e8 <MX_LWIP_Init+0x244>)
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	4319      	orrs	r1, r3
 800865a:	4b23      	ldr	r3, [pc, #140]	; (80086e8 <MX_LWIP_Init+0x244>)
 800865c:	789b      	ldrb	r3, [r3, #2]
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	430b      	orrs	r3, r1
 8008662:	4921      	ldr	r1, [pc, #132]	; (80086e8 <MX_LWIP_Init+0x244>)
 8008664:	78c9      	ldrb	r1, [r1, #3]
 8008666:	430b      	orrs	r3, r1
 8008668:	0a1b      	lsrs	r3, r3, #8
 800866a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800866e:	431a      	orrs	r2, r3
 8008670:	4b1d      	ldr	r3, [pc, #116]	; (80086e8 <MX_LWIP_Init+0x244>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	0619      	lsls	r1, r3, #24
 8008676:	4b1c      	ldr	r3, [pc, #112]	; (80086e8 <MX_LWIP_Init+0x244>)
 8008678:	785b      	ldrb	r3, [r3, #1]
 800867a:	041b      	lsls	r3, r3, #16
 800867c:	4319      	orrs	r1, r3
 800867e:	4b1a      	ldr	r3, [pc, #104]	; (80086e8 <MX_LWIP_Init+0x244>)
 8008680:	789b      	ldrb	r3, [r3, #2]
 8008682:	021b      	lsls	r3, r3, #8
 8008684:	430b      	orrs	r3, r1
 8008686:	4918      	ldr	r1, [pc, #96]	; (80086e8 <MX_LWIP_Init+0x244>)
 8008688:	78c9      	ldrb	r1, [r1, #3]
 800868a:	430b      	orrs	r3, r1
 800868c:	0e1b      	lsrs	r3, r3, #24
 800868e:	4313      	orrs	r3, r2
 8008690:	4a18      	ldr	r2, [pc, #96]	; (80086f4 <MX_LWIP_Init+0x250>)
 8008692:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008694:	4b18      	ldr	r3, [pc, #96]	; (80086f8 <MX_LWIP_Init+0x254>)
 8008696:	9302      	str	r3, [sp, #8]
 8008698:	4b18      	ldr	r3, [pc, #96]	; (80086fc <MX_LWIP_Init+0x258>)
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	2300      	movs	r3, #0
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	4b14      	ldr	r3, [pc, #80]	; (80086f4 <MX_LWIP_Init+0x250>)
 80086a2:	4a13      	ldr	r2, [pc, #76]	; (80086f0 <MX_LWIP_Init+0x24c>)
 80086a4:	4911      	ldr	r1, [pc, #68]	; (80086ec <MX_LWIP_Init+0x248>)
 80086a6:	4816      	ldr	r0, [pc, #88]	; (8008700 <MX_LWIP_Init+0x25c>)
 80086a8:	f003 fe56 	bl	800c358 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80086ac:	4814      	ldr	r0, [pc, #80]	; (8008700 <MX_LWIP_Init+0x25c>)
 80086ae:	f004 f80d 	bl	800c6cc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80086b2:	4b13      	ldr	r3, [pc, #76]	; (8008700 <MX_LWIP_Init+0x25c>)
 80086b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80086b8:	089b      	lsrs	r3, r3, #2
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d003      	beq.n	80086cc <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80086c4:	480e      	ldr	r0, [pc, #56]	; (8008700 <MX_LWIP_Init+0x25c>)
 80086c6:	f004 f811 	bl	800c6ec <netif_set_up>
 80086ca:	e002      	b.n	80086d2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80086cc:	480c      	ldr	r0, [pc, #48]	; (8008700 <MX_LWIP_Init+0x25c>)
 80086ce:	f004 f879 	bl	800c7c4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80086d2:	490c      	ldr	r1, [pc, #48]	; (8008704 <MX_LWIP_Init+0x260>)
 80086d4:	480a      	ldr	r0, [pc, #40]	; (8008700 <MX_LWIP_Init+0x25c>)
 80086d6:	f004 f8a7 	bl	800c828 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80086da:	bf00      	nop
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	240006d4 	.word	0x240006d4
 80086e4:	240006d8 	.word	0x240006d8
 80086e8:	240006dc 	.word	0x240006dc
 80086ec:	240006c8 	.word	0x240006c8
 80086f0:	240006cc 	.word	0x240006cc
 80086f4:	240006d0 	.word	0x240006d0
 80086f8:	0800a06d 	.word	0x0800a06d
 80086fc:	080089fd 	.word	0x080089fd
 8008700:	24000690 	.word	0x24000690
 8008704:	08008759 	.word	0x08008759

08008708 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8008710:	f7f8 ff30 	bl	8001574 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	4b08      	ldr	r3, [pc, #32]	; (8008738 <Ethernet_Link_Periodic_Handle+0x30>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b63      	cmp	r3, #99	; 0x63
 800871e:	d907      	bls.n	8008730 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8008720:	f7f8 ff28 	bl	8001574 <HAL_GetTick>
 8008724:	4603      	mov	r3, r0
 8008726:	4a04      	ldr	r2, [pc, #16]	; (8008738 <Ethernet_Link_Periodic_Handle+0x30>)
 8008728:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f9b5 	bl	8008a9a <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	2400068c 	.word	0x2400068c

0800873c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8008740:	4804      	ldr	r0, [pc, #16]	; (8008754 <MX_LWIP_Process+0x18>)
 8008742:	f000 f93b 	bl	80089bc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8008746:	f00a f8e9 	bl	801291c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800874a:	4802      	ldr	r0, [pc, #8]	; (8008754 <MX_LWIP_Process+0x18>)
 800874c:	f7ff ffdc 	bl	8008708 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8008750:	bf00      	nop
 8008752:	bd80      	pop	{r7, pc}
 8008754:	24000690 	.word	0x24000690

08008758 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008778:	4b3c      	ldr	r3, [pc, #240]	; (800886c <low_level_init+0x100>)
 800877a:	4a3d      	ldr	r2, [pc, #244]	; (8008870 <low_level_init+0x104>)
 800877c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800877e:	2300      	movs	r3, #0
 8008780:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008782:	2380      	movs	r3, #128	; 0x80
 8008784:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008786:	23e1      	movs	r3, #225	; 0xe1
 8008788:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800878a:	2300      	movs	r3, #0
 800878c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800878e:	2300      	movs	r3, #0
 8008790:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008792:	2300      	movs	r3, #0
 8008794:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008796:	4a35      	ldr	r2, [pc, #212]	; (800886c <low_level_init+0x100>)
 8008798:	f107 0308 	add.w	r3, r7, #8
 800879c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800879e:	4b33      	ldr	r3, [pc, #204]	; (800886c <low_level_init+0x100>)
 80087a0:	2201      	movs	r2, #1
 80087a2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80087a4:	4b31      	ldr	r3, [pc, #196]	; (800886c <low_level_init+0x100>)
 80087a6:	4a33      	ldr	r2, [pc, #204]	; (8008874 <low_level_init+0x108>)
 80087a8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80087aa:	4b30      	ldr	r3, [pc, #192]	; (800886c <low_level_init+0x100>)
 80087ac:	4a32      	ldr	r2, [pc, #200]	; (8008878 <low_level_init+0x10c>)
 80087ae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80087b0:	4b2e      	ldr	r3, [pc, #184]	; (800886c <low_level_init+0x100>)
 80087b2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80087b6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80087b8:	482c      	ldr	r0, [pc, #176]	; (800886c <low_level_init+0x100>)
 80087ba:	f7f9 f89f 	bl	80018fc <HAL_ETH_Init>
 80087be:	4603      	mov	r3, r0
 80087c0:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80087c2:	2238      	movs	r2, #56	; 0x38
 80087c4:	2100      	movs	r1, #0
 80087c6:	482d      	ldr	r0, [pc, #180]	; (800887c <low_level_init+0x110>)
 80087c8:	f00a fae6 	bl	8012d98 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80087cc:	4b2b      	ldr	r3, [pc, #172]	; (800887c <low_level_init+0x110>)
 80087ce:	2221      	movs	r2, #33	; 0x21
 80087d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80087d2:	4b2a      	ldr	r3, [pc, #168]	; (800887c <low_level_init+0x110>)
 80087d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80087d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80087da:	4b28      	ldr	r3, [pc, #160]	; (800887c <low_level_init+0x110>)
 80087dc:	2200      	movs	r2, #0
 80087de:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80087e0:	4827      	ldr	r0, [pc, #156]	; (8008880 <low_level_init+0x114>)
 80087e2:	f003 fc81 	bl	800c0e8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2206      	movs	r2, #6
 80087ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80087ee:	4b1f      	ldr	r3, [pc, #124]	; (800886c <low_level_init+0x100>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	781a      	ldrb	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80087fa:	4b1c      	ldr	r3, [pc, #112]	; (800886c <low_level_init+0x100>)
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	785a      	ldrb	r2, [r3, #1]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008806:	4b19      	ldr	r3, [pc, #100]	; (800886c <low_level_init+0x100>)
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	789a      	ldrb	r2, [r3, #2]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008812:	4b16      	ldr	r3, [pc, #88]	; (800886c <low_level_init+0x100>)
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	78da      	ldrb	r2, [r3, #3]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <low_level_init+0x100>)
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	791a      	ldrb	r2, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800882a:	4b10      	ldr	r3, [pc, #64]	; (800886c <low_level_init+0x100>)
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	795a      	ldrb	r2, [r3, #5]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800883c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008844:	f043 030a 	orr.w	r3, r3, #10
 8008848:	b2da      	uxtb	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d103      	bne.n	800885e <low_level_init+0xf2>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f91f 	bl	8008a9a <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800885c:	e001      	b.n	8008862 <low_level_init+0xf6>
    Error_Handler();
 800885e:	f7f8 fb83 	bl	8000f68 <Error_Handler>
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	2400506c 	.word	0x2400506c
 8008870:	40028000 	.word	0x40028000
 8008874:	30040060 	.word	0x30040060
 8008878:	30040000 	.word	0x30040000
 800887c:	2400511c 	.word	0x2400511c
 8008880:	08016b70 	.word	0x08016b70

08008884 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b092      	sub	sp, #72	; 0x48
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800889c:	f107 030c 	add.w	r3, r7, #12
 80088a0:	2230      	movs	r2, #48	; 0x30
 80088a2:	2100      	movs	r1, #0
 80088a4:	4618      	mov	r0, r3
 80088a6:	f00a fa77 	bl	8012d98 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80088aa:	f107 030c 	add.w	r3, r7, #12
 80088ae:	2230      	movs	r2, #48	; 0x30
 80088b0:	2100      	movs	r1, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f00a fa70 	bl	8012d98 <memset>

  for(q = p; q != NULL; q = q->next)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	643b      	str	r3, [r7, #64]	; 0x40
 80088bc:	e045      	b.n	800894a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80088be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d902      	bls.n	80088ca <low_level_output+0x46>
      return ERR_IF;
 80088c4:	f06f 030b 	mvn.w	r3, #11
 80088c8:	e055      	b.n	8008976 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80088ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088cc:	6859      	ldr	r1, [r3, #4]
 80088ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088d0:	4613      	mov	r3, r2
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	3348      	adds	r3, #72	; 0x48
 80088da:	443b      	add	r3, r7
 80088dc:	3b3c      	subs	r3, #60	; 0x3c
 80088de:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80088e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e2:	895b      	ldrh	r3, [r3, #10]
 80088e4:	4619      	mov	r1, r3
 80088e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088e8:	4613      	mov	r3, r2
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	3348      	adds	r3, #72	; 0x48
 80088f2:	443b      	add	r3, r7
 80088f4:	3b38      	subs	r3, #56	; 0x38
 80088f6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80088f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d011      	beq.n	8008922 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80088fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008900:	1e5a      	subs	r2, r3, #1
 8008902:	f107 000c 	add.w	r0, r7, #12
 8008906:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008908:	460b      	mov	r3, r1
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	440b      	add	r3, r1
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	18c1      	adds	r1, r0, r3
 8008912:	4613      	mov	r3, r2
 8008914:	005b      	lsls	r3, r3, #1
 8008916:	4413      	add	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	3348      	adds	r3, #72	; 0x48
 800891c:	443b      	add	r3, r7
 800891e:	3b34      	subs	r3, #52	; 0x34
 8008920:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d109      	bne.n	800893e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800892a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800892c:	4613      	mov	r3, r2
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	3348      	adds	r3, #72	; 0x48
 8008936:	443b      	add	r3, r7
 8008938:	3b34      	subs	r3, #52	; 0x34
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800893e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008940:	3301      	adds	r3, #1
 8008942:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	643b      	str	r3, [r7, #64]	; 0x40
 800894a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1b6      	bne.n	80088be <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	891b      	ldrh	r3, [r3, #8]
 8008954:	461a      	mov	r2, r3
 8008956:	4b0a      	ldr	r3, [pc, #40]	; (8008980 <low_level_output+0xfc>)
 8008958:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800895a:	4a09      	ldr	r2, [pc, #36]	; (8008980 <low_level_output+0xfc>)
 800895c:	f107 030c 	add.w	r3, r7, #12
 8008960:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008962:	4a07      	ldr	r2, [pc, #28]	; (8008980 <low_level_output+0xfc>)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008968:	2214      	movs	r2, #20
 800896a:	4905      	ldr	r1, [pc, #20]	; (8008980 <low_level_output+0xfc>)
 800896c:	4805      	ldr	r0, [pc, #20]	; (8008984 <low_level_output+0x100>)
 800896e:	f7f9 f8b5 	bl	8001adc <HAL_ETH_Transmit>

  return errval;
 8008972:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008976:	4618      	mov	r0, r3
 8008978:	3748      	adds	r7, #72	; 0x48
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	2400511c 	.word	0x2400511c
 8008984:	2400506c 	.word	0x2400506c

08008988 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008994:	4b07      	ldr	r3, [pc, #28]	; (80089b4 <low_level_input+0x2c>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d105      	bne.n	80089a8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800899c:	f107 030c 	add.w	r3, r7, #12
 80089a0:	4619      	mov	r1, r3
 80089a2:	4805      	ldr	r0, [pc, #20]	; (80089b8 <low_level_input+0x30>)
 80089a4:	f7f9 f931 	bl	8001c0a <HAL_ETH_ReadData>
  }

  return p;
 80089a8:	68fb      	ldr	r3, [r7, #12]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	24005068 	.word	0x24005068
 80089b8:	2400506c 	.word	0x2400506c

080089bc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff ffdd 	bl	8008988 <low_level_input>
 80089ce:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	4798      	blx	r3
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f004 fa9e 	bl	800cf28 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1ea      	bne.n	80089c8 <ethernetif_input+0xc>
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d106      	bne.n	8008a18 <ethernetif_init+0x1c>
 8008a0a:	4b0e      	ldr	r3, [pc, #56]	; (8008a44 <ethernetif_init+0x48>)
 8008a0c:	f240 126f 	movw	r2, #367	; 0x16f
 8008a10:	490d      	ldr	r1, [pc, #52]	; (8008a48 <ethernetif_init+0x4c>)
 8008a12:	480e      	ldr	r0, [pc, #56]	; (8008a4c <ethernetif_init+0x50>)
 8008a14:	f00a f9c8 	bl	8012da8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2273      	movs	r2, #115	; 0x73
 8008a1c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2274      	movs	r2, #116	; 0x74
 8008a24:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a09      	ldr	r2, [pc, #36]	; (8008a50 <ethernetif_init+0x54>)
 8008a2c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <ethernetif_init+0x58>)
 8008a32:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff fe99 	bl	800876c <low_level_init>

  return ERR_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	08013e68 	.word	0x08013e68
 8008a48:	08013e84 	.word	0x08013e84
 8008a4c:	08013e94 	.word	0x08013e94
 8008a50:	08009a31 	.word	0x08009a31
 8008a54:	08008885 	.word	0x08008885

08008a58 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008a64:	68f9      	ldr	r1, [r7, #12]
 8008a66:	4807      	ldr	r0, [pc, #28]	; (8008a84 <pbuf_free_custom+0x2c>)
 8008a68:	f003 fc20 	bl	800c2ac <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008a6c:	4b06      	ldr	r3, [pc, #24]	; (8008a88 <pbuf_free_custom+0x30>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d102      	bne.n	8008a7a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008a74:	4b04      	ldr	r3, [pc, #16]	; (8008a88 <pbuf_free_custom+0x30>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	701a      	strb	r2, [r3, #0]
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	08016b70 	.word	0x08016b70
 8008a88:	24005068 	.word	0x24005068

08008a8c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008a90:	f7f8 fd70 	bl	8001574 <HAL_GetTick>
 8008a94:	4603      	mov	r3, r0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]

}
 8008aa2:	bf00      	nop
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
	...

08008ab0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008ab8:	4812      	ldr	r0, [pc, #72]	; (8008b04 <HAL_ETH_RxAllocateCallback+0x54>)
 8008aba:	f003 fb89 	bl	800c1d0 <memp_malloc_pool>
 8008abe:	60f8      	str	r0, [r7, #12]
  if (p)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d014      	beq.n	8008af0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f103 0220 	add.w	r2, r3, #32
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4a0d      	ldr	r2, [pc, #52]	; (8008b08 <HAL_ETH_RxAllocateCallback+0x58>)
 8008ad4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008ade:	9201      	str	r2, [sp, #4]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2241      	movs	r2, #65	; 0x41
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	2000      	movs	r0, #0
 8008aea:	f004 f863 	bl	800cbb4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008aee:	e005      	b.n	8008afc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008af0:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <HAL_ETH_RxAllocateCallback+0x5c>)
 8008af2:	2201      	movs	r2, #1
 8008af4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]
}
 8008afc:	bf00      	nop
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	08016b70 	.word	0x08016b70
 8008b08:	08008a59 	.word	0x08008a59
 8008b0c:	24005068 	.word	0x24005068

08008b10 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b08d      	sub	sp, #52	; 0x34
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
 8008b1c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3b20      	subs	r3, #32
 8008b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b38:	2200      	movs	r2, #0
 8008b3a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	887a      	ldrh	r2, [r7, #2]
 8008b40:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	e003      	b.n	8008b5a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b58:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b5e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b66:	e009      	b.n	8008b7c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6a:	891a      	ldrh	r2, [r3, #8]
 8008b6c:	887b      	ldrh	r3, [r7, #2]
 8008b6e:	4413      	add	r3, r2
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1f2      	bne.n	8008b68 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008b82:	887b      	ldrh	r3, [r7, #2]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	623a      	str	r2, [r7, #32]
 8008b88:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dd1d      	ble.n	8008bcc <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	f003 021f 	and.w	r2, r3, #31
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	4413      	add	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008ba0:	f3bf 8f4f 	dsb	sy
}
 8008ba4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008ba6:	4a0d      	ldr	r2, [pc, #52]	; (8008bdc <HAL_ETH_RxLinkCallback+0xcc>)
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	3320      	adds	r3, #32
 8008bb2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	3b20      	subs	r3, #32
 8008bb8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dcf2      	bgt.n	8008ba6 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8008bc0:	f3bf 8f4f 	dsb	sy
}
 8008bc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008bc6:	f3bf 8f6f 	isb	sy
}
 8008bca:	bf00      	nop
}
 8008bcc:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008bce:	bf00      	nop
 8008bd0:	3734      	adds	r7, #52	; 0x34
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	e000ed00 	.word	0xe000ed00

08008be0 <autoip_restart>:
 *
 * @param netif The netif under AutoIP control
 */
static void
autoip_restart(struct netif *netif)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  struct autoip *autoip = netif_autoip_data(netif);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	60fb      	str	r3, [r7, #12]
  autoip->tried_llipaddr++;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	7a5b      	ldrb	r3, [r3, #9]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	725a      	strb	r2, [r3, #9]
  autoip_start(netif);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f8b4 	bl	8008d68 <autoip_start>
}
 8008c00:	bf00      	nop
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <autoip_handle_arp_conflict>:
/**
 * Handle a IP address conflict after an ARP conflict detection
 */
static void
autoip_handle_arp_conflict(struct netif *netif)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  struct autoip *autoip = netif_autoip_data(netif);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	60fb      	str	r3, [r7, #12]
     b) allows to keep an already configured address when having only one
        conflict in 10 seconds
     We use option b) since it helps to improve the chance that one of the two
     conflicting hosts may be able to retain its address. */

  if (autoip->lastconflict > 0) {
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	7a1b      	ldrb	r3, [r3, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <autoip_handle_arp_conflict+0x1e>
    /* retreat, there was a conflicting ARP in the last DEFEND_INTERVAL seconds */
    LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("autoip_handle_arp_conflict(): we are defending, but in DEFEND_INTERVAL, retreating\n"));

    /* Active TCP sessions are aborted when removing the ip addresss */
    autoip_restart(netif);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff ffde 	bl	8008be0 <autoip_restart>
    LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("autoip_handle_arp_conflict(): we are defend, send ARP Announce\n"));
    autoip_arp_announce(netif);
    autoip->lastconflict = DEFEND_INTERVAL * AUTOIP_TICKS_PER_SECOND;
  }
}
 8008c24:	e005      	b.n	8008c32 <autoip_handle_arp_conflict+0x2a>
    autoip_arp_announce(netif);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f875 	bl	8008d16 <autoip_arp_announce>
    autoip->lastconflict = DEFEND_INTERVAL * AUTOIP_TICKS_PER_SECOND;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2264      	movs	r2, #100	; 0x64
 8008c30:	721a      	strb	r2, [r3, #8]
}
 8008c32:	bf00      	nop
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <autoip_create_addr>:
 * @param netif network interface on which create the IP-Address
 * @param ipaddr ip address to initialize
 */
static void
autoip_create_addr(struct netif *netif, ip4_addr_t *ipaddr)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  struct autoip *autoip = netif_autoip_data(netif);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	60bb      	str	r3, [r7, #8]

  /* Here we create an IP-Address out of range 169.254.1.0 to 169.254.254.255
   * compliant to RFC 3927 Section 2.1
   * We have 254 * 256 possibilities */

  u32_t addr = lwip_ntohl(LWIP_AUTOIP_CREATE_SEED_ADDR(netif));
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008c52:	461a      	mov	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008c5a:	021b      	lsls	r3, r3, #8
 8008c5c:	431a      	orrs	r2, r3
 8008c5e:	4b1e      	ldr	r3, [pc, #120]	; (8008cd8 <autoip_create_addr+0x9c>)
 8008c60:	4413      	add	r3, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fa55 	bl	8009112 <lwip_htonl>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 fa51 	bl	8009112 <lwip_htonl>
 8008c70:	60f8      	str	r0, [r7, #12]
  addr += autoip->tried_llipaddr;
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	7a5b      	ldrb	r3, [r3, #9]
 8008c76:	461a      	mov	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]
  addr = AUTOIP_NET | (addr & 0xffff);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	4b16      	ldr	r3, [pc, #88]	; (8008cdc <autoip_create_addr+0xa0>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
  /* Now, 169.254.0.0 <= addr <= 169.254.255.255 */

  if (addr < AUTOIP_RANGE_START) {
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4a15      	ldr	r2, [pc, #84]	; (8008ce0 <autoip_create_addr+0xa4>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d803      	bhi.n	8008c98 <autoip_create_addr+0x5c>
    addr += AUTOIP_RANGE_END - AUTOIP_RANGE_START + 1;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 8008c96:	60fb      	str	r3, [r7, #12]
  }
  if (addr > AUTOIP_RANGE_END) {
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4a12      	ldr	r2, [pc, #72]	; (8008ce4 <autoip_create_addr+0xa8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d903      	bls.n	8008ca8 <autoip_create_addr+0x6c>
    addr -= AUTOIP_RANGE_END - AUTOIP_RANGE_START + 1;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f5a3 437e 	sub.w	r3, r3, #65024	; 0xfe00
 8008ca6:	60fb      	str	r3, [r7, #12]
  }
  LWIP_ASSERT("AUTOIP address not in range", (addr >= AUTOIP_RANGE_START) &&
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4a0d      	ldr	r2, [pc, #52]	; (8008ce0 <autoip_create_addr+0xa4>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d903      	bls.n	8008cb8 <autoip_create_addr+0x7c>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a0c      	ldr	r2, [pc, #48]	; (8008ce4 <autoip_create_addr+0xa8>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d905      	bls.n	8008cc4 <autoip_create_addr+0x88>
 8008cb8:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <autoip_create_addr+0xac>)
 8008cba:	22bc      	movs	r2, #188	; 0xbc
 8008cbc:	490b      	ldr	r1, [pc, #44]	; (8008cec <autoip_create_addr+0xb0>)
 8008cbe:	480c      	ldr	r0, [pc, #48]	; (8008cf0 <autoip_create_addr+0xb4>)
 8008cc0:	f00a f872 	bl	8012da8 <iprintf>
              (addr <= AUTOIP_RANGE_END));
  ip4_addr_set_u32(ipaddr, lwip_htonl(addr));
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 fa24 	bl	8009112 <lwip_htonl>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("autoip_create_addr(): tried_llipaddr=%"U16_F", %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
               (u16_t)(autoip->tried_llipaddr), ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr),
               ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr)));
}
 8008cd0:	bf00      	nop
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	a9fe0100 	.word	0xa9fe0100
 8008cdc:	a9fe0000 	.word	0xa9fe0000
 8008ce0:	a9fe00ff 	.word	0xa9fe00ff
 8008ce4:	a9fefeff 	.word	0xa9fefeff
 8008ce8:	08013ebc 	.word	0x08013ebc
 8008cec:	08013f88 	.word	0x08013f88
 8008cf0:	08013f28 	.word	0x08013f28

08008cf4 <autoip_arp_probe>:
 *
 * @param netif network interface used to send the probe
 */
static err_t
autoip_arp_probe(struct netif *netif)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  struct autoip *autoip = netif_autoip_data(netif);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	60fb      	str	r3, [r7, #12]
  /* this works because netif->ip_addr is ANY */
  return etharp_request(netif, &autoip->llipaddr);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 f99e 	bl	800a048 <etharp_request>
 8008d0c:	4603      	mov	r3, r0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <autoip_arp_announce>:
 *
 * @param netif network interface used to send the announce
 */
static err_t
autoip_arp_announce(struct netif *netif)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  return etharp_gratuitous(netif);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	3304      	adds	r3, #4
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 f98f 	bl	800a048 <etharp_request>
 8008d2a:	4603      	mov	r3, r0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <autoip_bind>:
 *
 * @param netif network interface to configure with current LL IP-Address
 */
static err_t
autoip_bind(struct netif *netif)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  struct autoip *autoip = netif_autoip_data(netif);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	617b      	str	r3, [r7, #20]
              ("autoip_bind(netif=%p) %c%c%"U16_F" %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
               (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num,
               ip4_addr1_16(&autoip->llipaddr), ip4_addr2_16(&autoip->llipaddr),
               ip4_addr3_16(&autoip->llipaddr), ip4_addr4_16(&autoip->llipaddr)));

  IP4_ADDR(&sn_mask, 255, 255, 0, 0);
 8008d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d46:	613b      	str	r3, [r7, #16]
  IP4_ADDR(&gw_addr, 0, 0, 0, 0);
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]

  netif_set_addr(netif, &autoip->llipaddr, &sn_mask, &gw_addr);
 8008d4c:	6979      	ldr	r1, [r7, #20]
 8008d4e:	f107 030c 	add.w	r3, r7, #12
 8008d52:	f107 0210 	add.w	r2, r7, #16
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f003 fc6e 	bl	800c638 <netif_set_addr>
  /* interface is used by routing now that an address is set */

  return ERR_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <autoip_start>:
 *
 * @param netif network interface on which start the AutoIP client
 */
err_t
autoip_start(struct netif *netif)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  struct autoip *autoip = netif_autoip_data(netif);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	72fb      	strb	r3, [r7, #11]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d109      	bne.n	8008d9c <autoip_start+0x34>
 8008d88:	4b1f      	ldr	r3, [pc, #124]	; (8008e08 <autoip_start+0xa0>)
 8008d8a:	f240 1205 	movw	r2, #261	; 0x105
 8008d8e:	491f      	ldr	r1, [pc, #124]	; (8008e0c <autoip_start+0xa4>)
 8008d90:	481f      	ldr	r0, [pc, #124]	; (8008e10 <autoip_start+0xa8>)
 8008d92:	f00a f809 	bl	8012da8 <iprintf>
 8008d96:	f06f 030f 	mvn.w	r3, #15
 8008d9a:	e030      	b.n	8008dfe <autoip_start+0x96>

  /* Set IP-Address, Netmask and Gateway to 0 to make sure that
   * ARP Packets are formed correctly
   */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8008d9c:	4b1d      	ldr	r3, [pc, #116]	; (8008e14 <autoip_start+0xac>)
 8008d9e:	4a1d      	ldr	r2, [pc, #116]	; (8008e14 <autoip_start+0xac>)
 8008da0:	491c      	ldr	r1, [pc, #112]	; (8008e14 <autoip_start+0xac>)
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f003 fc48 	bl	800c638 <netif_set_addr>

  LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("autoip_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0],
               netif->name[1], (u16_t)netif->num));
  if (autoip == NULL) {
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10e      	bne.n	8008dcc <autoip_start+0x64>
    /* no AutoIP client attached yet? */
    LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE,
                ("autoip_start(): starting new AUTOIP client\n"));
    autoip = (struct autoip *)mem_calloc(1, sizeof(struct autoip));
 8008dae:	210c      	movs	r1, #12
 8008db0:	2001      	movs	r0, #1
 8008db2:	f003 f971 	bl	800c098 <mem_calloc>
 8008db6:	60f8      	str	r0, [r7, #12]
    if (autoip == NULL) {
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d102      	bne.n	8008dc4 <autoip_start+0x5c>
      LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE,
                  ("autoip_start(): could not allocate autoip\n"));
      return ERR_MEM;
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc2:	e01c      	b.n	8008dfe <autoip_start+0x96>
    }
    /* store this AutoIP client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_AUTOIP, autoip);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	625a      	str	r2, [r3, #36]	; 0x24
 8008dca:	e00e      	b.n	8008dea <autoip_start+0x82>
    LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE, ("autoip_start(): allocated autoip"));
  } else {
    autoip->state = AUTOIP_STATE_OFF;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	711a      	strb	r2, [r3, #4]
    autoip->ttw = 0;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	80da      	strh	r2, [r3, #6]
    autoip->sent_num = 0;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	715a      	strb	r2, [r3, #5]
    ip4_addr_set_zero(&autoip->llipaddr);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]
    autoip->lastconflict = 0;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	721a      	strb	r2, [r3, #8]
  }

  autoip_create_addr(netif, &(autoip->llipaddr));
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff ff24 	bl	8008c3c <autoip_create_addr>
  autoip_start_probing(netif);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f80f 	bl	8008e18 <autoip_start_probing>

  return result;
 8008dfa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	08013ebc 	.word	0x08013ebc
 8008e0c:	08013fa4 	.word	0x08013fa4
 8008e10:	08013f28 	.word	0x08013f28
 8008e14:	08016b8c 	.word	0x08016b8c

08008e18 <autoip_start_probing>:

static void
autoip_start_probing(struct netif *netif)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  struct autoip *autoip = netif_autoip_data(netif);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	60fb      	str	r3, [r7, #12]

  autoip->state = AUTOIP_STATE_PROBING;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	711a      	strb	r2, [r3, #4]
  autoip->sent_num = 0;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	715a      	strb	r2, [r3, #5]

  /* time to wait to first probe, this is randomly
   * chosen out of 0 to PROBE_WAIT seconds.
   * compliant to RFC 3927 Section 2.2.1
   */
  autoip->ttw = (u16_t)(LWIP_AUTOIP_RAND(netif) % (PROBE_WAIT * AUTOIP_TICKS_PER_SECOND));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e38:	061a      	lsls	r2, r3, #24
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e40:	041b      	lsls	r3, r3, #16
 8008e42:	431a      	orrs	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e4a:	021b      	lsls	r3, r3, #8
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8008e54:	4313      	orrs	r3, r2
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e5a:	2a00      	cmp	r2, #0
 8008e5c:	d003      	beq.n	8008e66 <autoip_start_probing+0x4e>
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e62:	7a52      	ldrb	r2, [r2, #9]
 8008e64:	e000      	b.n	8008e68 <autoip_start_probing+0x50>
 8008e66:	2200      	movs	r2, #0
 8008e68:	18d1      	adds	r1, r2, r3
 8008e6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <autoip_start_probing+0x88>)
 8008e6c:	fba3 2301 	umull	r2, r3, r3, r1
 8008e70:	08da      	lsrs	r2, r3, #3
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	1aca      	subs	r2, r1, r3
 8008e7c:	b292      	uxth	r2, r2
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	80da      	strh	r2, [r3, #6]
  /*
   * if we tried more then MAX_CONFLICTS we must limit our rate for
   * acquiring and probing address
   * compliant to RFC 3927 Section 2.2.1
   */
  if (autoip->tried_llipaddr > MAX_CONFLICTS) {
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	7a5b      	ldrb	r3, [r3, #9]
 8008e86:	2b0a      	cmp	r3, #10
 8008e88:	d903      	bls.n	8008e92 <autoip_start_probing+0x7a>
    autoip->ttw = RATE_LIMIT_INTERVAL * AUTOIP_TICKS_PER_SECOND;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008e90:	80da      	strh	r2, [r3, #6]
  }
}
 8008e92:	bf00      	nop
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	cccccccd 	.word	0xcccccccd

08008ea4 <autoip_tmr>:
/**
 * Has to be called in loop every AUTOIP_TMR_INTERVAL milliseconds
 */
void
autoip_tmr(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8008eaa:	4b53      	ldr	r3, [pc, #332]	; (8008ff8 <autoip_tmr+0x154>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	607b      	str	r3, [r7, #4]
 8008eb0:	e098      	b.n	8008fe4 <autoip_tmr+0x140>
    struct autoip *autoip = netif_autoip_data(netif);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	603b      	str	r3, [r7, #0]
    /* only act on AutoIP configured interfaces */
    if (autoip != NULL) {
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 808a 	beq.w	8008fd4 <autoip_tmr+0x130>
      if (autoip->lastconflict > 0) {
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	7a1b      	ldrb	r3, [r3, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d005      	beq.n	8008ed4 <autoip_tmr+0x30>
        autoip->lastconflict--;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	7a1b      	ldrb	r3, [r3, #8]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	721a      	strb	r2, [r3, #8]

      LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE,
                  ("autoip_tmr() AutoIP-State: %"U16_F", ttw=%"U16_F"\n",
                   (u16_t)(autoip->state), autoip->ttw));

      if (autoip->ttw > 0) {
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	88db      	ldrh	r3, [r3, #6]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d005      	beq.n	8008ee8 <autoip_tmr+0x44>
        autoip->ttw--;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	88db      	ldrh	r3, [r3, #6]
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	80da      	strh	r2, [r3, #6]
      }

      switch (autoip->state) {
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	791b      	ldrb	r3, [r3, #4]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d002      	beq.n	8008ef6 <autoip_tmr+0x52>
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d051      	beq.n	8008f98 <autoip_tmr+0xf4>
          }
          break;

        default:
          /* nothing to do in other states */
          break;
 8008ef4:	e073      	b.n	8008fde <autoip_tmr+0x13a>
          if (autoip->ttw == 0) {
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	88db      	ldrh	r3, [r3, #6]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d16c      	bne.n	8008fd8 <autoip_tmr+0x134>
            if (autoip->sent_num >= PROBE_NUM) {
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	795b      	ldrb	r3, [r3, #5]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d90c      	bls.n	8008f20 <autoip_tmr+0x7c>
              autoip->state = AUTOIP_STATE_ANNOUNCING;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	711a      	strb	r2, [r3, #4]
              autoip_bind(netif);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff ff11 	bl	8008d34 <autoip_bind>
              autoip->sent_num = 1;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2201      	movs	r2, #1
 8008f16:	715a      	strb	r2, [r3, #5]
              autoip->ttw = ANNOUNCE_WAIT * AUTOIP_TICKS_PER_SECOND;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2214      	movs	r2, #20
 8008f1c:	80da      	strh	r2, [r3, #6]
          break;
 8008f1e:	e05b      	b.n	8008fd8 <autoip_tmr+0x134>
              autoip_arp_probe(netif);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff fee7 	bl	8008cf4 <autoip_arp_probe>
              autoip->sent_num++;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	795b      	ldrb	r3, [r3, #5]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	715a      	strb	r2, [r3, #5]
              if (autoip->sent_num == PROBE_NUM) {
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	795b      	ldrb	r3, [r3, #5]
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d103      	bne.n	8008f42 <autoip_tmr+0x9e>
                autoip->ttw = ANNOUNCE_WAIT * AUTOIP_TICKS_PER_SECOND;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2214      	movs	r2, #20
 8008f3e:	80da      	strh	r2, [r3, #6]
          break;
 8008f40:	e04a      	b.n	8008fd8 <autoip_tmr+0x134>
                autoip->ttw = (u16_t)((LWIP_AUTOIP_RAND(netif) %
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f48:	061a      	lsls	r2, r3, #24
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f50:	041b      	lsls	r3, r3, #16
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f5a:	021b      	lsls	r3, r3, #8
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8008f64:	4313      	orrs	r3, r2
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f6a:	2a00      	cmp	r2, #0
 8008f6c:	d003      	beq.n	8008f76 <autoip_tmr+0xd2>
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f72:	7a52      	ldrb	r2, [r2, #9]
 8008f74:	e000      	b.n	8008f78 <autoip_tmr+0xd4>
 8008f76:	2200      	movs	r2, #0
 8008f78:	18d1      	adds	r1, r2, r3
 8008f7a:	4b20      	ldr	r3, [pc, #128]	; (8008ffc <autoip_tmr+0x158>)
 8008f7c:	fba3 2301 	umull	r2, r3, r3, r1
 8008f80:	08da      	lsrs	r2, r3, #3
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	1aca      	subs	r2, r1, r3
 8008f8c:	b293      	uxth	r3, r2
 8008f8e:	330a      	adds	r3, #10
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	80da      	strh	r2, [r3, #6]
          break;
 8008f96:	e01f      	b.n	8008fd8 <autoip_tmr+0x134>
          if (autoip->ttw == 0) {
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	88db      	ldrh	r3, [r3, #6]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d11d      	bne.n	8008fdc <autoip_tmr+0x138>
            autoip_arp_announce(netif);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7ff feb8 	bl	8008d16 <autoip_arp_announce>
            autoip->ttw = ANNOUNCE_INTERVAL * AUTOIP_TICKS_PER_SECOND;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2214      	movs	r2, #20
 8008faa:	80da      	strh	r2, [r3, #6]
            autoip->sent_num++;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	795b      	ldrb	r3, [r3, #5]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	715a      	strb	r2, [r3, #5]
            if (autoip->sent_num >= ANNOUNCE_NUM) {
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	795b      	ldrb	r3, [r3, #5]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d90d      	bls.n	8008fdc <autoip_tmr+0x138>
              autoip->state = AUTOIP_STATE_BOUND;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	2203      	movs	r2, #3
 8008fc4:	711a      	strb	r2, [r3, #4]
              autoip->sent_num = 0;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	715a      	strb	r2, [r3, #5]
              autoip->ttw = 0;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	80da      	strh	r2, [r3, #6]
          break;
 8008fd2:	e003      	b.n	8008fdc <autoip_tmr+0x138>
      }
    }
 8008fd4:	bf00      	nop
 8008fd6:	e002      	b.n	8008fde <autoip_tmr+0x13a>
          break;
 8008fd8:	bf00      	nop
 8008fda:	e000      	b.n	8008fde <autoip_tmr+0x13a>
          break;
 8008fdc:	bf00      	nop
  NETIF_FOREACH(netif) {
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	607b      	str	r3, [r7, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f47f af63 	bne.w	8008eb2 <autoip_tmr+0xe>
  }
}
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	24008174 	.word	0x24008174
 8008ffc:	cccccccd 	.word	0xcccccccd

08009000 <autoip_arp_reply>:
 * @param netif network interface to use for autoip processing
 * @param hdr Incoming ARP packet
 */
void
autoip_arp_reply(struct netif *netif, struct etharp_hdr *hdr)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  struct autoip *autoip = netif_autoip_data(netif);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	61fb      	str	r3, [r7, #28]

  LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE, ("autoip_arp_reply()\n"));
  if ((autoip != NULL) && (autoip->state != AUTOIP_STATE_OFF)) {
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d049      	beq.n	80090aa <autoip_arp_reply+0xaa>
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d045      	beq.n	80090aa <autoip_arp_reply+0xaa>
     * when probing  ip.dst == llipaddr && hw.src != netif->hwaddr
     * we have a conflict and must solve it
     */
    ip4_addr_t sipaddr, dipaddr;
    struct eth_addr netifaddr;
    SMEMCPY(netifaddr.addr, netif->hwaddr, ETH_HWADDR_LEN);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009024:	f107 030c 	add.w	r3, r7, #12
 8009028:	6810      	ldr	r0, [r2, #0]
 800902a:	6018      	str	r0, [r3, #0]
 800902c:	8892      	ldrh	r2, [r2, #4]
 800902e:	809a      	strh	r2, [r3, #4]

    /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
     * structure packing (not using structure copy which breaks strict-aliasing rules).
     */
    IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	330e      	adds	r3, #14
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	61bb      	str	r3, [r7, #24]
    IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	3318      	adds	r3, #24
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	617b      	str	r3, [r7, #20]

    if (autoip->state == AUTOIP_STATE_PROBING) {
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	791b      	ldrb	r3, [r3, #4]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d11c      	bne.n	8009082 <autoip_arp_reply+0x82>
       * from beginning to after ANNOUNCE_WAIT
       * seconds we have a conflict if
       * ip.src == llipaddr OR
       * ip.dst == llipaddr && hw.src != own hwaddr
       */
      if ((ip4_addr_cmp(&sipaddr, &autoip->llipaddr)) ||
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	d013      	beq.n	800907a <autoip_arp_reply+0x7a>
          (ip4_addr_isany_val(sipaddr) &&
 8009052:	69bb      	ldr	r3, [r7, #24]
      if ((ip4_addr_cmp(&sipaddr, &autoip->llipaddr)) ||
 8009054:	2b00      	cmp	r3, #0
 8009056:	d128      	bne.n	80090aa <autoip_arp_reply+0xaa>
           ip4_addr_cmp(&dipaddr, &autoip->llipaddr) &&
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	681b      	ldr	r3, [r3, #0]
          (ip4_addr_isany_val(sipaddr) &&
 800905e:	429a      	cmp	r2, r3
 8009060:	d123      	bne.n	80090aa <autoip_arp_reply+0xaa>
           !eth_addr_cmp(&netifaddr, &hdr->shwaddr))) {
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	f103 0108 	add.w	r1, r3, #8
 8009068:	f107 030c 	add.w	r3, r7, #12
 800906c:	2206      	movs	r2, #6
 800906e:	4618      	mov	r0, r3
 8009070:	f009 fe74 	bl	8012d5c <memcmp>
 8009074:	4603      	mov	r3, r0
           ip4_addr_cmp(&dipaddr, &autoip->llipaddr) &&
 8009076:	2b00      	cmp	r3, #0
 8009078:	d017      	beq.n	80090aa <autoip_arp_reply+0xaa>
        LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                    ("autoip_arp_reply(): Probe Conflict detected\n"));
        autoip_restart(netif);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff fdb0 	bl	8008be0 <autoip_restart>
                    ("autoip_arp_reply(): Conflicting ARP-Packet detected\n"));
        autoip_handle_arp_conflict(netif);
      }
    }
  }
}
 8009080:	e013      	b.n	80090aa <autoip_arp_reply+0xaa>
      if (ip4_addr_cmp(&sipaddr, &autoip->llipaddr) &&
 8009082:	69ba      	ldr	r2, [r7, #24]
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	429a      	cmp	r2, r3
 800908a:	d10e      	bne.n	80090aa <autoip_arp_reply+0xaa>
          !eth_addr_cmp(&netifaddr, &hdr->shwaddr)) {
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	f103 0108 	add.w	r1, r3, #8
 8009092:	f107 030c 	add.w	r3, r7, #12
 8009096:	2206      	movs	r2, #6
 8009098:	4618      	mov	r0, r3
 800909a:	f009 fe5f 	bl	8012d5c <memcmp>
 800909e:	4603      	mov	r3, r0
      if (ip4_addr_cmp(&sipaddr, &autoip->llipaddr) &&
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <autoip_arp_reply+0xaa>
        autoip_handle_arp_conflict(netif);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff fdaf 	bl	8008c08 <autoip_handle_arp_conflict>
}
 80090aa:	bf00      	nop
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <autoip_accept_packet>:
  return 0;
}

u8_t
autoip_accept_packet(struct netif *netif, const ip4_addr_t *addr)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
  struct autoip *autoip = netif_autoip_data(netif);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	60fb      	str	r3, [r7, #12]
  return (autoip != NULL) && ip4_addr_cmp(addr, &(autoip->llipaddr));
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d007      	beq.n	80090d8 <autoip_accept_packet+0x26>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d101      	bne.n	80090d8 <autoip_accept_packet+0x26>
 80090d4:	2301      	movs	r3, #1
 80090d6:	e000      	b.n	80090da <autoip_accept_packet+0x28>
 80090d8:	2300      	movs	r3, #0
 80090da:	b2db      	uxtb	r3, r3
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	021b      	lsls	r3, r3, #8
 80090f6:	b21a      	sxth	r2, r3
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	0a1b      	lsrs	r3, r3, #8
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	b21b      	sxth	r3, r3
 8009100:	4313      	orrs	r3, r2
 8009102:	b21b      	sxth	r3, r3
 8009104:	b29b      	uxth	r3, r3
}
 8009106:	4618      	mov	r0, r3
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009112:	b480      	push	{r7}
 8009114:	b083      	sub	sp, #12
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	061a      	lsls	r2, r3, #24
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	021b      	lsls	r3, r3, #8
 8009122:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009126:	431a      	orrs	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	0a1b      	lsrs	r3, r3, #8
 800912c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009130:	431a      	orrs	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	0e1b      	lsrs	r3, r3, #24
 8009136:	4313      	orrs	r3, r2
}
 8009138:	4618      	mov	r0, r3
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800914c:	4915      	ldr	r1, [pc, #84]	; (80091a4 <etharp_free_entry+0x60>)
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	4613      	mov	r3, r2
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	4413      	add	r3, r2
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	440b      	add	r3, r1
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d013      	beq.n	8009188 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009160:	4910      	ldr	r1, [pc, #64]	; (80091a4 <etharp_free_entry+0x60>)
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4613      	mov	r3, r2
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	4413      	add	r3, r2
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	440b      	add	r3, r1
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4618      	mov	r0, r3
 8009172:	f003 fed9 	bl	800cf28 <pbuf_free>
    arp_table[i].q = NULL;
 8009176:	490b      	ldr	r1, [pc, #44]	; (80091a4 <etharp_free_entry+0x60>)
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	4613      	mov	r3, r2
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	4413      	add	r3, r2
 8009180:	00db      	lsls	r3, r3, #3
 8009182:	440b      	add	r3, r1
 8009184:	2200      	movs	r2, #0
 8009186:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009188:	4906      	ldr	r1, [pc, #24]	; (80091a4 <etharp_free_entry+0x60>)
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	4613      	mov	r3, r2
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	4413      	add	r3, r2
 8009192:	00db      	lsls	r3, r3, #3
 8009194:	440b      	add	r3, r1
 8009196:	3314      	adds	r3, #20
 8009198:	2200      	movs	r2, #0
 800919a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	24005154 	.word	0x24005154

080091a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80091ae:	2300      	movs	r3, #0
 80091b0:	607b      	str	r3, [r7, #4]
 80091b2:	e09a      	b.n	80092ea <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 80091b4:	4951      	ldr	r1, [pc, #324]	; (80092fc <etharp_tmr+0x154>)
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	4613      	mov	r3, r2
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	4413      	add	r3, r2
 80091be:	00db      	lsls	r3, r3, #3
 80091c0:	440b      	add	r3, r1
 80091c2:	3314      	adds	r3, #20
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 808a 	beq.w	80092e4 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	2b05      	cmp	r3, #5
 80091d4:	f000 8086 	beq.w	80092e4 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80091d8:	4948      	ldr	r1, [pc, #288]	; (80092fc <etharp_tmr+0x154>)
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	4613      	mov	r3, r2
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	4413      	add	r3, r2
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	440b      	add	r3, r1
 80091e6:	3312      	adds	r3, #18
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	3301      	adds	r3, #1
 80091ec:	b298      	uxth	r0, r3
 80091ee:	4943      	ldr	r1, [pc, #268]	; (80092fc <etharp_tmr+0x154>)
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	4613      	mov	r3, r2
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	4413      	add	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	440b      	add	r3, r1
 80091fc:	3312      	adds	r3, #18
 80091fe:	4602      	mov	r2, r0
 8009200:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009202:	493e      	ldr	r1, [pc, #248]	; (80092fc <etharp_tmr+0x154>)
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	4413      	add	r3, r2
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	440b      	add	r3, r1
 8009210:	3312      	adds	r3, #18
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009218:	d215      	bcs.n	8009246 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800921a:	4938      	ldr	r1, [pc, #224]	; (80092fc <etharp_tmr+0x154>)
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	4413      	add	r3, r2
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	440b      	add	r3, r1
 8009228:	3314      	adds	r3, #20
 800922a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800922c:	2b01      	cmp	r3, #1
 800922e:	d10e      	bne.n	800924e <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8009230:	4932      	ldr	r1, [pc, #200]	; (80092fc <etharp_tmr+0x154>)
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	4613      	mov	r3, r2
 8009236:	005b      	lsls	r3, r3, #1
 8009238:	4413      	add	r3, r2
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	440b      	add	r3, r1
 800923e:	3312      	adds	r3, #18
 8009240:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009242:	2b04      	cmp	r3, #4
 8009244:	d903      	bls.n	800924e <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7ff ff7c 	bl	8009144 <etharp_free_entry>
 800924c:	e04a      	b.n	80092e4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800924e:	492b      	ldr	r1, [pc, #172]	; (80092fc <etharp_tmr+0x154>)
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	4613      	mov	r3, r2
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	4413      	add	r3, r2
 8009258:	00db      	lsls	r3, r3, #3
 800925a:	440b      	add	r3, r1
 800925c:	3314      	adds	r3, #20
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b03      	cmp	r3, #3
 8009262:	d10a      	bne.n	800927a <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009264:	4925      	ldr	r1, [pc, #148]	; (80092fc <etharp_tmr+0x154>)
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	4613      	mov	r3, r2
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	4413      	add	r3, r2
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	440b      	add	r3, r1
 8009272:	3314      	adds	r3, #20
 8009274:	2204      	movs	r2, #4
 8009276:	701a      	strb	r2, [r3, #0]
 8009278:	e034      	b.n	80092e4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800927a:	4920      	ldr	r1, [pc, #128]	; (80092fc <etharp_tmr+0x154>)
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	4613      	mov	r3, r2
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	4413      	add	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	440b      	add	r3, r1
 8009288:	3314      	adds	r3, #20
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	2b04      	cmp	r3, #4
 800928e:	d10a      	bne.n	80092a6 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009290:	491a      	ldr	r1, [pc, #104]	; (80092fc <etharp_tmr+0x154>)
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	4613      	mov	r3, r2
 8009296:	005b      	lsls	r3, r3, #1
 8009298:	4413      	add	r3, r2
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	440b      	add	r3, r1
 800929e:	3314      	adds	r3, #20
 80092a0:	2202      	movs	r2, #2
 80092a2:	701a      	strb	r2, [r3, #0]
 80092a4:	e01e      	b.n	80092e4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80092a6:	4915      	ldr	r1, [pc, #84]	; (80092fc <etharp_tmr+0x154>)
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	4613      	mov	r3, r2
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	4413      	add	r3, r2
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	440b      	add	r3, r1
 80092b4:	3314      	adds	r3, #20
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d113      	bne.n	80092e4 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80092bc:	490f      	ldr	r1, [pc, #60]	; (80092fc <etharp_tmr+0x154>)
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	4613      	mov	r3, r2
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	4413      	add	r3, r2
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	440b      	add	r3, r1
 80092ca:	3308      	adds	r3, #8
 80092cc:	6818      	ldr	r0, [r3, #0]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	4613      	mov	r3, r2
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	4413      	add	r3, r2
 80092d6:	00db      	lsls	r3, r3, #3
 80092d8:	4a08      	ldr	r2, [pc, #32]	; (80092fc <etharp_tmr+0x154>)
 80092da:	4413      	add	r3, r2
 80092dc:	3304      	adds	r3, #4
 80092de:	4619      	mov	r1, r3
 80092e0:	f000 feb2 	bl	800a048 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3301      	adds	r3, #1
 80092e8:	607b      	str	r3, [r7, #4]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b09      	cmp	r3, #9
 80092ee:	f77f af61 	ble.w	80091b4 <etharp_tmr+0xc>
      }
    }
  }
}
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	24005154 	.word	0x24005154

08009300 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08a      	sub	sp, #40	; 0x28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	460b      	mov	r3, r1
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800930e:	230a      	movs	r3, #10
 8009310:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009312:	230a      	movs	r3, #10
 8009314:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8009316:	230a      	movs	r3, #10
 8009318:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800931e:	230a      	movs	r3, #10
 8009320:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8009322:	2300      	movs	r3, #0
 8009324:	83bb      	strh	r3, [r7, #28]
 8009326:	2300      	movs	r3, #0
 8009328:	837b      	strh	r3, [r7, #26]
 800932a:	2300      	movs	r3, #0
 800932c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800932e:	2300      	movs	r3, #0
 8009330:	843b      	strh	r3, [r7, #32]
 8009332:	e0b1      	b.n	8009498 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8009334:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009338:	49a7      	ldr	r1, [pc, #668]	; (80095d8 <etharp_find_entry+0x2d8>)
 800933a:	4613      	mov	r3, r2
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	4413      	add	r3, r2
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	440b      	add	r3, r1
 8009344:	3314      	adds	r3, #20
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800934a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800934e:	2b0a      	cmp	r3, #10
 8009350:	d105      	bne.n	800935e <etharp_find_entry+0x5e>
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8009358:	8c3b      	ldrh	r3, [r7, #32]
 800935a:	847b      	strh	r3, [r7, #34]	; 0x22
 800935c:	e098      	b.n	8009490 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 8095 	beq.w	8009490 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d009      	beq.n	8009380 <etharp_find_entry+0x80>
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d806      	bhi.n	8009380 <etharp_find_entry+0x80>
 8009372:	4b9a      	ldr	r3, [pc, #616]	; (80095dc <etharp_find_entry+0x2dc>)
 8009374:	f240 1223 	movw	r2, #291	; 0x123
 8009378:	4999      	ldr	r1, [pc, #612]	; (80095e0 <etharp_find_entry+0x2e0>)
 800937a:	489a      	ldr	r0, [pc, #616]	; (80095e4 <etharp_find_entry+0x2e4>)
 800937c:	f009 fd14 	bl	8012da8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d020      	beq.n	80093c8 <etharp_find_entry+0xc8>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6819      	ldr	r1, [r3, #0]
 800938a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800938e:	4892      	ldr	r0, [pc, #584]	; (80095d8 <etharp_find_entry+0x2d8>)
 8009390:	4613      	mov	r3, r2
 8009392:	005b      	lsls	r3, r3, #1
 8009394:	4413      	add	r3, r2
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	4403      	add	r3, r0
 800939a:	3304      	adds	r3, #4
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4299      	cmp	r1, r3
 80093a0:	d112      	bne.n	80093c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00c      	beq.n	80093c2 <etharp_find_entry+0xc2>
 80093a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80093ac:	498a      	ldr	r1, [pc, #552]	; (80095d8 <etharp_find_entry+0x2d8>)
 80093ae:	4613      	mov	r3, r2
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	4413      	add	r3, r2
 80093b4:	00db      	lsls	r3, r3, #3
 80093b6:	440b      	add	r3, r1
 80093b8:	3308      	adds	r3, #8
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d102      	bne.n	80093c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80093c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80093c6:	e103      	b.n	80095d0 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d140      	bne.n	8009450 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80093ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80093d2:	4981      	ldr	r1, [pc, #516]	; (80095d8 <etharp_find_entry+0x2d8>)
 80093d4:	4613      	mov	r3, r2
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	4413      	add	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	440b      	add	r3, r1
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d01a      	beq.n	800941a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80093e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80093e8:	497b      	ldr	r1, [pc, #492]	; (80095d8 <etharp_find_entry+0x2d8>)
 80093ea:	4613      	mov	r3, r2
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	4413      	add	r3, r2
 80093f0:	00db      	lsls	r3, r3, #3
 80093f2:	440b      	add	r3, r1
 80093f4:	3312      	adds	r3, #18
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	8bba      	ldrh	r2, [r7, #28]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d848      	bhi.n	8009490 <etharp_find_entry+0x190>
            old_queue = i;
 80093fe:	8c3b      	ldrh	r3, [r7, #32]
 8009400:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8009402:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009406:	4974      	ldr	r1, [pc, #464]	; (80095d8 <etharp_find_entry+0x2d8>)
 8009408:	4613      	mov	r3, r2
 800940a:	005b      	lsls	r3, r3, #1
 800940c:	4413      	add	r3, r2
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	440b      	add	r3, r1
 8009412:	3312      	adds	r3, #18
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	83bb      	strh	r3, [r7, #28]
 8009418:	e03a      	b.n	8009490 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800941a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800941e:	496e      	ldr	r1, [pc, #440]	; (80095d8 <etharp_find_entry+0x2d8>)
 8009420:	4613      	mov	r3, r2
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	4413      	add	r3, r2
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	440b      	add	r3, r1
 800942a:	3312      	adds	r3, #18
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	8b7a      	ldrh	r2, [r7, #26]
 8009430:	429a      	cmp	r2, r3
 8009432:	d82d      	bhi.n	8009490 <etharp_find_entry+0x190>
            old_pending = i;
 8009434:	8c3b      	ldrh	r3, [r7, #32]
 8009436:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8009438:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800943c:	4966      	ldr	r1, [pc, #408]	; (80095d8 <etharp_find_entry+0x2d8>)
 800943e:	4613      	mov	r3, r2
 8009440:	005b      	lsls	r3, r3, #1
 8009442:	4413      	add	r3, r2
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	440b      	add	r3, r1
 8009448:	3312      	adds	r3, #18
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	837b      	strh	r3, [r7, #26]
 800944e:	e01f      	b.n	8009490 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d91c      	bls.n	8009490 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8009456:	7dfb      	ldrb	r3, [r7, #23]
 8009458:	2b04      	cmp	r3, #4
 800945a:	d819      	bhi.n	8009490 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800945c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009460:	495d      	ldr	r1, [pc, #372]	; (80095d8 <etharp_find_entry+0x2d8>)
 8009462:	4613      	mov	r3, r2
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	4413      	add	r3, r2
 8009468:	00db      	lsls	r3, r3, #3
 800946a:	440b      	add	r3, r1
 800946c:	3312      	adds	r3, #18
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	8b3a      	ldrh	r2, [r7, #24]
 8009472:	429a      	cmp	r2, r3
 8009474:	d80c      	bhi.n	8009490 <etharp_find_entry+0x190>
            old_stable = i;
 8009476:	8c3b      	ldrh	r3, [r7, #32]
 8009478:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800947a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800947e:	4956      	ldr	r1, [pc, #344]	; (80095d8 <etharp_find_entry+0x2d8>)
 8009480:	4613      	mov	r3, r2
 8009482:	005b      	lsls	r3, r3, #1
 8009484:	4413      	add	r3, r2
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	440b      	add	r3, r1
 800948a:	3312      	adds	r3, #18
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009490:	8c3b      	ldrh	r3, [r7, #32]
 8009492:	3301      	adds	r3, #1
 8009494:	b29b      	uxth	r3, r3
 8009496:	843b      	strh	r3, [r7, #32]
 8009498:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800949c:	2b09      	cmp	r3, #9
 800949e:	f77f af49 	ble.w	8009334 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	f003 0302 	and.w	r3, r3, #2
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d108      	bne.n	80094be <etharp_find_entry+0x1be>
 80094ac:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80094b0:	2b0a      	cmp	r3, #10
 80094b2:	d107      	bne.n	80094c4 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80094b4:	7afb      	ldrb	r3, [r7, #11]
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d102      	bne.n	80094c4 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80094be:	f04f 33ff 	mov.w	r3, #4294967295
 80094c2:	e085      	b.n	80095d0 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80094c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80094c8:	2b09      	cmp	r3, #9
 80094ca:	dc02      	bgt.n	80094d2 <etharp_find_entry+0x1d2>
    i = empty;
 80094cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094ce:	843b      	strh	r3, [r7, #32]
 80094d0:	e039      	b.n	8009546 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80094d2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80094d6:	2b09      	cmp	r3, #9
 80094d8:	dc14      	bgt.n	8009504 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 80094da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094dc:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80094de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80094e2:	493d      	ldr	r1, [pc, #244]	; (80095d8 <etharp_find_entry+0x2d8>)
 80094e4:	4613      	mov	r3, r2
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	4413      	add	r3, r2
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	440b      	add	r3, r1
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d018      	beq.n	8009526 <etharp_find_entry+0x226>
 80094f4:	4b39      	ldr	r3, [pc, #228]	; (80095dc <etharp_find_entry+0x2dc>)
 80094f6:	f240 126d 	movw	r2, #365	; 0x16d
 80094fa:	493b      	ldr	r1, [pc, #236]	; (80095e8 <etharp_find_entry+0x2e8>)
 80094fc:	4839      	ldr	r0, [pc, #228]	; (80095e4 <etharp_find_entry+0x2e4>)
 80094fe:	f009 fc53 	bl	8012da8 <iprintf>
 8009502:	e010      	b.n	8009526 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8009504:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009508:	2b09      	cmp	r3, #9
 800950a:	dc02      	bgt.n	8009512 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 800950c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800950e:	843b      	strh	r3, [r7, #32]
 8009510:	e009      	b.n	8009526 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8009512:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009516:	2b09      	cmp	r3, #9
 8009518:	dc02      	bgt.n	8009520 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800951a:	8bfb      	ldrh	r3, [r7, #30]
 800951c:	843b      	strh	r3, [r7, #32]
 800951e:	e002      	b.n	8009526 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8009520:	f04f 33ff 	mov.w	r3, #4294967295
 8009524:	e054      	b.n	80095d0 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009526:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800952a:	2b09      	cmp	r3, #9
 800952c:	dd06      	ble.n	800953c <etharp_find_entry+0x23c>
 800952e:	4b2b      	ldr	r3, [pc, #172]	; (80095dc <etharp_find_entry+0x2dc>)
 8009530:	f240 127f 	movw	r2, #383	; 0x17f
 8009534:	492d      	ldr	r1, [pc, #180]	; (80095ec <etharp_find_entry+0x2ec>)
 8009536:	482b      	ldr	r0, [pc, #172]	; (80095e4 <etharp_find_entry+0x2e4>)
 8009538:	f009 fc36 	bl	8012da8 <iprintf>
    etharp_free_entry(i);
 800953c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009540:	4618      	mov	r0, r3
 8009542:	f7ff fdff 	bl	8009144 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009546:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800954a:	2b09      	cmp	r3, #9
 800954c:	dd06      	ble.n	800955c <etharp_find_entry+0x25c>
 800954e:	4b23      	ldr	r3, [pc, #140]	; (80095dc <etharp_find_entry+0x2dc>)
 8009550:	f240 1283 	movw	r2, #387	; 0x183
 8009554:	4925      	ldr	r1, [pc, #148]	; (80095ec <etharp_find_entry+0x2ec>)
 8009556:	4823      	ldr	r0, [pc, #140]	; (80095e4 <etharp_find_entry+0x2e4>)
 8009558:	f009 fc26 	bl	8012da8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800955c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009560:	491d      	ldr	r1, [pc, #116]	; (80095d8 <etharp_find_entry+0x2d8>)
 8009562:	4613      	mov	r3, r2
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	4413      	add	r3, r2
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	440b      	add	r3, r1
 800956c:	3314      	adds	r3, #20
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d006      	beq.n	8009582 <etharp_find_entry+0x282>
 8009574:	4b19      	ldr	r3, [pc, #100]	; (80095dc <etharp_find_entry+0x2dc>)
 8009576:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800957a:	491d      	ldr	r1, [pc, #116]	; (80095f0 <etharp_find_entry+0x2f0>)
 800957c:	4819      	ldr	r0, [pc, #100]	; (80095e4 <etharp_find_entry+0x2e4>)
 800957e:	f009 fc13 	bl	8012da8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00b      	beq.n	80095a0 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009588:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6819      	ldr	r1, [r3, #0]
 8009590:	4811      	ldr	r0, [pc, #68]	; (80095d8 <etharp_find_entry+0x2d8>)
 8009592:	4613      	mov	r3, r2
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	4413      	add	r3, r2
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	4403      	add	r3, r0
 800959c:	3304      	adds	r3, #4
 800959e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80095a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80095a4:	490c      	ldr	r1, [pc, #48]	; (80095d8 <etharp_find_entry+0x2d8>)
 80095a6:	4613      	mov	r3, r2
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	4413      	add	r3, r2
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	440b      	add	r3, r1
 80095b0:	3312      	adds	r3, #18
 80095b2:	2200      	movs	r2, #0
 80095b4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80095b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80095ba:	4907      	ldr	r1, [pc, #28]	; (80095d8 <etharp_find_entry+0x2d8>)
 80095bc:	4613      	mov	r3, r2
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	4413      	add	r3, r2
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	440b      	add	r3, r1
 80095c6:	3308      	adds	r3, #8
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80095cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3728      	adds	r7, #40	; 0x28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	24005154 	.word	0x24005154
 80095dc:	08013fc8 	.word	0x08013fc8
 80095e0:	08014024 	.word	0x08014024
 80095e4:	08014064 	.word	0x08014064
 80095e8:	0801408c 	.word	0x0801408c
 80095ec:	080140a4 	.word	0x080140a4
 80095f0:	080140b8 	.word	0x080140b8

080095f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af02      	add	r7, sp, #8
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009608:	2b06      	cmp	r3, #6
 800960a:	d006      	beq.n	800961a <etharp_update_arp_entry+0x26>
 800960c:	4b58      	ldr	r3, [pc, #352]	; (8009770 <etharp_update_arp_entry+0x17c>)
 800960e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8009612:	4958      	ldr	r1, [pc, #352]	; (8009774 <etharp_update_arp_entry+0x180>)
 8009614:	4858      	ldr	r0, [pc, #352]	; (8009778 <etharp_update_arp_entry+0x184>)
 8009616:	f009 fbc7 	bl	8012da8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d012      	beq.n	8009646 <etharp_update_arp_entry+0x52>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00e      	beq.n	8009646 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68f9      	ldr	r1, [r7, #12]
 800962e:	4618      	mov	r0, r3
 8009630:	f001 fb18 	bl	800ac64 <ip4_addr_isbroadcast_u32>
 8009634:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8009636:	2b00      	cmp	r3, #0
 8009638:	d105      	bne.n	8009646 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009642:	2be0      	cmp	r3, #224	; 0xe0
 8009644:	d102      	bne.n	800964c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009646:	f06f 030f 	mvn.w	r3, #15
 800964a:	e08c      	b.n	8009766 <etharp_update_arp_entry+0x172>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800964c:	78fb      	ldrb	r3, [r7, #3]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4619      	mov	r1, r3
 8009652:	68b8      	ldr	r0, [r7, #8]
 8009654:	f7ff fe54 	bl	8009300 <etharp_find_entry>
 8009658:	4603      	mov	r3, r0
 800965a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800965c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009660:	2b00      	cmp	r3, #0
 8009662:	da02      	bge.n	800966a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8009664:	8afb      	ldrh	r3, [r7, #22]
 8009666:	b25b      	sxtb	r3, r3
 8009668:	e07d      	b.n	8009766 <etharp_update_arp_entry+0x172>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 800966a:	78fb      	ldrb	r3, [r7, #3]
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00b      	beq.n	800968c <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8009674:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009678:	4940      	ldr	r1, [pc, #256]	; (800977c <etharp_update_arp_entry+0x188>)
 800967a:	4613      	mov	r3, r2
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	4413      	add	r3, r2
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	440b      	add	r3, r1
 8009684:	3314      	adds	r3, #20
 8009686:	2205      	movs	r2, #5
 8009688:	701a      	strb	r2, [r3, #0]
 800968a:	e019      	b.n	80096c0 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 800968c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009690:	493a      	ldr	r1, [pc, #232]	; (800977c <etharp_update_arp_entry+0x188>)
 8009692:	4613      	mov	r3, r2
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	4413      	add	r3, r2
 8009698:	00db      	lsls	r3, r3, #3
 800969a:	440b      	add	r3, r1
 800969c:	3314      	adds	r3, #20
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b05      	cmp	r3, #5
 80096a2:	d102      	bne.n	80096aa <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 80096a4:	f06f 0305 	mvn.w	r3, #5
 80096a8:	e05d      	b.n	8009766 <etharp_update_arp_entry+0x172>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80096aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80096ae:	4933      	ldr	r1, [pc, #204]	; (800977c <etharp_update_arp_entry+0x188>)
 80096b0:	4613      	mov	r3, r2
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	4413      	add	r3, r2
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	440b      	add	r3, r1
 80096ba:	3314      	adds	r3, #20
 80096bc:	2202      	movs	r2, #2
 80096be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80096c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80096c4:	492d      	ldr	r1, [pc, #180]	; (800977c <etharp_update_arp_entry+0x188>)
 80096c6:	4613      	mov	r3, r2
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	4413      	add	r3, r2
 80096cc:	00db      	lsls	r3, r3, #3
 80096ce:	440b      	add	r3, r1
 80096d0:	3308      	adds	r3, #8
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80096d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80096da:	4613      	mov	r3, r2
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	4413      	add	r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	3308      	adds	r3, #8
 80096e4:	4a25      	ldr	r2, [pc, #148]	; (800977c <etharp_update_arp_entry+0x188>)
 80096e6:	4413      	add	r3, r2
 80096e8:	3304      	adds	r3, #4
 80096ea:	2206      	movs	r2, #6
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f009 fb44 	bl	8012d7c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80096f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80096f8:	4920      	ldr	r1, [pc, #128]	; (800977c <etharp_update_arp_entry+0x188>)
 80096fa:	4613      	mov	r3, r2
 80096fc:	005b      	lsls	r3, r3, #1
 80096fe:	4413      	add	r3, r2
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	440b      	add	r3, r1
 8009704:	3312      	adds	r3, #18
 8009706:	2200      	movs	r2, #0
 8009708:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800970a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800970e:	491b      	ldr	r1, [pc, #108]	; (800977c <etharp_update_arp_entry+0x188>)
 8009710:	4613      	mov	r3, r2
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	4413      	add	r3, r2
 8009716:	00db      	lsls	r3, r3, #3
 8009718:	440b      	add	r3, r1
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d021      	beq.n	8009764 <etharp_update_arp_entry+0x170>
    struct pbuf *p = arp_table[i].q;
 8009720:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009724:	4915      	ldr	r1, [pc, #84]	; (800977c <etharp_update_arp_entry+0x188>)
 8009726:	4613      	mov	r3, r2
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	4413      	add	r3, r2
 800972c:	00db      	lsls	r3, r3, #3
 800972e:	440b      	add	r3, r1
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8009734:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009738:	4910      	ldr	r1, [pc, #64]	; (800977c <etharp_update_arp_entry+0x188>)
 800973a:	4613      	mov	r3, r2
 800973c:	005b      	lsls	r3, r3, #1
 800973e:	4413      	add	r3, r2
 8009740:	00db      	lsls	r3, r3, #3
 8009742:	440b      	add	r3, r1
 8009744:	2200      	movs	r2, #0
 8009746:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800974e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6939      	ldr	r1, [r7, #16]
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 fd15 	bl	800a188 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800975e:	6938      	ldr	r0, [r7, #16]
 8009760:	f003 fbe2 	bl	800cf28 <pbuf_free>
  }
  return ERR_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	08013fc8 	.word	0x08013fc8
 8009774:	080140e4 	.word	0x080140e4
 8009778:	08014064 	.word	0x08014064
 800977c:	24005154 	.word	0x24005154

08009780 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009788:	2300      	movs	r3, #0
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	e01e      	b.n	80097cc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800978e:	4913      	ldr	r1, [pc, #76]	; (80097dc <etharp_cleanup_netif+0x5c>)
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4613      	mov	r3, r2
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	4413      	add	r3, r2
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	440b      	add	r3, r1
 800979c:	3314      	adds	r3, #20
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80097a2:	7afb      	ldrb	r3, [r7, #11]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00e      	beq.n	80097c6 <etharp_cleanup_netif+0x46>
 80097a8:	490c      	ldr	r1, [pc, #48]	; (80097dc <etharp_cleanup_netif+0x5c>)
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	4613      	mov	r3, r2
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	4413      	add	r3, r2
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	440b      	add	r3, r1
 80097b6:	3308      	adds	r3, #8
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d102      	bne.n	80097c6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f7ff fcbf 	bl	8009144 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3301      	adds	r3, #1
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b09      	cmp	r3, #9
 80097d0:	dddd      	ble.n	800978e <etharp_cleanup_netif+0xe>
    }
  }
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	24005154 	.word	0x24005154

080097e0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80097e0:	b5b0      	push	{r4, r5, r7, lr}
 80097e2:	b08a      	sub	sp, #40	; 0x28
 80097e4:	af04      	add	r7, sp, #16
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d107      	bne.n	8009800 <etharp_input+0x20>
 80097f0:	4b3f      	ldr	r3, [pc, #252]	; (80098f0 <etharp_input+0x110>)
 80097f2:	f240 228a 	movw	r2, #650	; 0x28a
 80097f6:	493f      	ldr	r1, [pc, #252]	; (80098f4 <etharp_input+0x114>)
 80097f8:	483f      	ldr	r0, [pc, #252]	; (80098f8 <etharp_input+0x118>)
 80097fa:	f009 fad5 	bl	8012da8 <iprintf>
 80097fe:	e073      	b.n	80098e8 <etharp_input+0x108>

  hdr = (struct etharp_hdr *)p->payload;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	b29b      	uxth	r3, r3
 800980c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009810:	d10c      	bne.n	800982c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8009816:	2b06      	cmp	r3, #6
 8009818:	d108      	bne.n	800982c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800981e:	2b04      	cmp	r3, #4
 8009820:	d104      	bne.n	800982c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	885b      	ldrh	r3, [r3, #2]
 8009826:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009828:	2b08      	cmp	r3, #8
 800982a:	d003      	beq.n	8009834 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f003 fb7b 	bl	800cf28 <pbuf_free>
    return;
 8009832:	e059      	b.n	80098e8 <etharp_input+0x108>

#if LWIP_AUTOIP
  /* We have to check if a host already has configured our random
   * created link local address and continuously check if there is
   * a host with this IP-address so we can detect collisions */
  autoip_arp_reply(netif, hdr);
 8009834:	6939      	ldr	r1, [r7, #16]
 8009836:	6838      	ldr	r0, [r7, #0]
 8009838:	f7ff fbe2 	bl	8009000 <autoip_arp_reply>
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	330e      	adds	r3, #14
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	3318      	adds	r3, #24
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	3304      	adds	r3, #4
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d102      	bne.n	800985c <etharp_input+0x7c>
    for_us = 0;
 8009856:	2300      	movs	r3, #0
 8009858:	75fb      	strb	r3, [r7, #23]
 800985a:	e009      	b.n	8009870 <etharp_input+0x90>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	3304      	adds	r3, #4
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	429a      	cmp	r2, r3
 8009866:	bf0c      	ite	eq
 8009868:	2301      	moveq	r3, #1
 800986a:	2300      	movne	r3, #0
 800986c:	b2db      	uxtb	r3, r3
 800986e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f103 0208 	add.w	r2, r3, #8
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <etharp_input+0xa0>
 800987c:	2301      	movs	r3, #1
 800987e:	e000      	b.n	8009882 <etharp_input+0xa2>
 8009880:	2302      	movs	r3, #2
 8009882:	f107 010c 	add.w	r1, r7, #12
 8009886:	6838      	ldr	r0, [r7, #0]
 8009888:	f7ff feb4 	bl	80095f4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	88db      	ldrh	r3, [r3, #6]
 8009890:	b29b      	uxth	r3, r3
 8009892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009896:	d003      	beq.n	80098a0 <etharp_input+0xc0>
 8009898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800989c:	d01e      	beq.n	80098dc <etharp_input+0xfc>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800989e:	e020      	b.n	80098e2 <etharp_input+0x102>
      if (for_us) {
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d01c      	beq.n	80098e0 <etharp_input+0x100>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	3208      	adds	r2, #8
        etharp_raw(netif,
 80098c0:	2102      	movs	r1, #2
 80098c2:	9103      	str	r1, [sp, #12]
 80098c4:	f107 010c 	add.w	r1, r7, #12
 80098c8:	9102      	str	r1, [sp, #8]
 80098ca:	9201      	str	r2, [sp, #4]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	462b      	mov	r3, r5
 80098d0:	4622      	mov	r2, r4
 80098d2:	4601      	mov	r1, r0
 80098d4:	6838      	ldr	r0, [r7, #0]
 80098d6:	f000 faf5 	bl	8009ec4 <etharp_raw>
      break;
 80098da:	e001      	b.n	80098e0 <etharp_input+0x100>
      break;
 80098dc:	bf00      	nop
 80098de:	e000      	b.n	80098e2 <etharp_input+0x102>
      break;
 80098e0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f003 fb20 	bl	800cf28 <pbuf_free>
}
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bdb0      	pop	{r4, r5, r7, pc}
 80098ee:	bf00      	nop
 80098f0:	08013fc8 	.word	0x08013fc8
 80098f4:	0801413c 	.word	0x0801413c
 80098f8:	08014064 	.word	0x08014064

080098fc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af02      	add	r7, sp, #8
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800990a:	79fa      	ldrb	r2, [r7, #7]
 800990c:	4944      	ldr	r1, [pc, #272]	; (8009a20 <etharp_output_to_arp_index+0x124>)
 800990e:	4613      	mov	r3, r2
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	4413      	add	r3, r2
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	440b      	add	r3, r1
 8009918:	3314      	adds	r3, #20
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d806      	bhi.n	800992e <etharp_output_to_arp_index+0x32>
 8009920:	4b40      	ldr	r3, [pc, #256]	; (8009a24 <etharp_output_to_arp_index+0x128>)
 8009922:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009926:	4940      	ldr	r1, [pc, #256]	; (8009a28 <etharp_output_to_arp_index+0x12c>)
 8009928:	4840      	ldr	r0, [pc, #256]	; (8009a2c <etharp_output_to_arp_index+0x130>)
 800992a:	f009 fa3d 	bl	8012da8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800992e:	79fa      	ldrb	r2, [r7, #7]
 8009930:	493b      	ldr	r1, [pc, #236]	; (8009a20 <etharp_output_to_arp_index+0x124>)
 8009932:	4613      	mov	r3, r2
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	4413      	add	r3, r2
 8009938:	00db      	lsls	r3, r3, #3
 800993a:	440b      	add	r3, r1
 800993c:	3314      	adds	r3, #20
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	2b02      	cmp	r3, #2
 8009942:	d153      	bne.n	80099ec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8009944:	79fa      	ldrb	r2, [r7, #7]
 8009946:	4936      	ldr	r1, [pc, #216]	; (8009a20 <etharp_output_to_arp_index+0x124>)
 8009948:	4613      	mov	r3, r2
 800994a:	005b      	lsls	r3, r3, #1
 800994c:	4413      	add	r3, r2
 800994e:	00db      	lsls	r3, r3, #3
 8009950:	440b      	add	r3, r1
 8009952:	3312      	adds	r3, #18
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800995a:	d919      	bls.n	8009990 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800995c:	79fa      	ldrb	r2, [r7, #7]
 800995e:	4613      	mov	r3, r2
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	4413      	add	r3, r2
 8009964:	00db      	lsls	r3, r3, #3
 8009966:	4a2e      	ldr	r2, [pc, #184]	; (8009a20 <etharp_output_to_arp_index+0x124>)
 8009968:	4413      	add	r3, r2
 800996a:	3304      	adds	r3, #4
 800996c:	4619      	mov	r1, r3
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 fb6a 	bl	800a048 <etharp_request>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d138      	bne.n	80099ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800997a:	79fa      	ldrb	r2, [r7, #7]
 800997c:	4928      	ldr	r1, [pc, #160]	; (8009a20 <etharp_output_to_arp_index+0x124>)
 800997e:	4613      	mov	r3, r2
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	4413      	add	r3, r2
 8009984:	00db      	lsls	r3, r3, #3
 8009986:	440b      	add	r3, r1
 8009988:	3314      	adds	r3, #20
 800998a:	2203      	movs	r2, #3
 800998c:	701a      	strb	r2, [r3, #0]
 800998e:	e02d      	b.n	80099ec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8009990:	79fa      	ldrb	r2, [r7, #7]
 8009992:	4923      	ldr	r1, [pc, #140]	; (8009a20 <etharp_output_to_arp_index+0x124>)
 8009994:	4613      	mov	r3, r2
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	4413      	add	r3, r2
 800999a:	00db      	lsls	r3, r3, #3
 800999c:	440b      	add	r3, r1
 800999e:	3312      	adds	r3, #18
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80099a6:	d321      	bcc.n	80099ec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80099a8:	79fa      	ldrb	r2, [r7, #7]
 80099aa:	4613      	mov	r3, r2
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	4413      	add	r3, r2
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	4a1b      	ldr	r2, [pc, #108]	; (8009a20 <etharp_output_to_arp_index+0x124>)
 80099b4:	4413      	add	r3, r2
 80099b6:	1d19      	adds	r1, r3, #4
 80099b8:	79fa      	ldrb	r2, [r7, #7]
 80099ba:	4613      	mov	r3, r2
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4413      	add	r3, r2
 80099c0:	00db      	lsls	r3, r3, #3
 80099c2:	3308      	adds	r3, #8
 80099c4:	4a16      	ldr	r2, [pc, #88]	; (8009a20 <etharp_output_to_arp_index+0x124>)
 80099c6:	4413      	add	r3, r2
 80099c8:	3304      	adds	r3, #4
 80099ca:	461a      	mov	r2, r3
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 fb19 	bl	800a004 <etharp_request_dst>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d109      	bne.n	80099ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80099d8:	79fa      	ldrb	r2, [r7, #7]
 80099da:	4911      	ldr	r1, [pc, #68]	; (8009a20 <etharp_output_to_arp_index+0x124>)
 80099dc:	4613      	mov	r3, r2
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	4413      	add	r3, r2
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	440b      	add	r3, r1
 80099e6:	3314      	adds	r3, #20
 80099e8:	2203      	movs	r2, #3
 80099ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80099f2:	79fa      	ldrb	r2, [r7, #7]
 80099f4:	4613      	mov	r3, r2
 80099f6:	005b      	lsls	r3, r3, #1
 80099f8:	4413      	add	r3, r2
 80099fa:	00db      	lsls	r3, r3, #3
 80099fc:	3308      	adds	r3, #8
 80099fe:	4a08      	ldr	r2, [pc, #32]	; (8009a20 <etharp_output_to_arp_index+0x124>)
 8009a00:	4413      	add	r3, r2
 8009a02:	3304      	adds	r3, #4
 8009a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a08:	9200      	str	r2, [sp, #0]
 8009a0a:	460a      	mov	r2, r1
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fbba 	bl	800a188 <ethernet_output>
 8009a14:	4603      	mov	r3, r0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	24005154 	.word	0x24005154
 8009a24:	08013fc8 	.word	0x08013fc8
 8009a28:	0801415c 	.word	0x0801415c
 8009a2c:	08014064 	.word	0x08014064

08009a30 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08c      	sub	sp, #48	; 0x30
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	623b      	str	r3, [r7, #32]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d106      	bne.n	8009a54 <etharp_output+0x24>
 8009a46:	4b78      	ldr	r3, [pc, #480]	; (8009c28 <etharp_output+0x1f8>)
 8009a48:	f240 321e 	movw	r2, #798	; 0x31e
 8009a4c:	4977      	ldr	r1, [pc, #476]	; (8009c2c <etharp_output+0x1fc>)
 8009a4e:	4878      	ldr	r0, [pc, #480]	; (8009c30 <etharp_output+0x200>)
 8009a50:	f009 f9aa 	bl	8012da8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d106      	bne.n	8009a68 <etharp_output+0x38>
 8009a5a:	4b73      	ldr	r3, [pc, #460]	; (8009c28 <etharp_output+0x1f8>)
 8009a5c:	f240 321f 	movw	r2, #799	; 0x31f
 8009a60:	4974      	ldr	r1, [pc, #464]	; (8009c34 <etharp_output+0x204>)
 8009a62:	4873      	ldr	r0, [pc, #460]	; (8009c30 <etharp_output+0x200>)
 8009a64:	f009 f9a0 	bl	8012da8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d106      	bne.n	8009a7c <etharp_output+0x4c>
 8009a6e:	4b6e      	ldr	r3, [pc, #440]	; (8009c28 <etharp_output+0x1f8>)
 8009a70:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009a74:	4970      	ldr	r1, [pc, #448]	; (8009c38 <etharp_output+0x208>)
 8009a76:	486e      	ldr	r0, [pc, #440]	; (8009c30 <etharp_output+0x200>)
 8009a78:	f009 f996 	bl	8012da8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68f9      	ldr	r1, [r7, #12]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f001 f8ee 	bl	800ac64 <ip4_addr_isbroadcast_u32>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d002      	beq.n	8009a94 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8009a8e:	4b6b      	ldr	r3, [pc, #428]	; (8009c3c <etharp_output+0x20c>)
 8009a90:	627b      	str	r3, [r7, #36]	; 0x24
 8009a92:	e0b9      	b.n	8009c08 <etharp_output+0x1d8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a9c:	2be0      	cmp	r3, #224	; 0xe0
 8009a9e:	d118      	bne.n	8009ad2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8009aa8:	235e      	movs	r3, #94	; 0x5e
 8009aaa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3302      	adds	r3, #2
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3303      	adds	r3, #3
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8009aca:	f107 0310 	add.w	r3, r7, #16
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad0:	e09a      	b.n	8009c08 <etharp_output+0x1d8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	405a      	eors	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d01c      	beq.n	8009b24 <etharp_output+0xf4>
        !ip4_addr_islinklocal(ipaddr)) {
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009af0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d015      	beq.n	8009b24 <etharp_output+0xf4>
#if LWIP_AUTOIP
      struct ip_hdr *iphdr = LWIP_ALIGNMENT_CAST(struct ip_hdr *, q->payload);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	61bb      	str	r3, [r7, #24]
      /* According to RFC 3297, chapter 2.6.2 (Forwarding Rules), a packet with
         a link-local source address must always be "directly to its destination
         on the same physical link. The host MUST NOT send the packet to any
         router for forwarding". */
      if (!ip4_addr_islinklocal(&iphdr->src))
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d00b      	beq.n	8009b24 <etharp_output+0xf4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	330c      	adds	r3, #12
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <etharp_output+0xee>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	330c      	adds	r3, #12
 8009b1a:	623b      	str	r3, [r7, #32]
 8009b1c:	e002      	b.n	8009b24 <etharp_output+0xf4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8009b1e:	f06f 0303 	mvn.w	r3, #3
 8009b22:	e07d      	b.n	8009c20 <etharp_output+0x1f0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009b24:	4b46      	ldr	r3, [pc, #280]	; (8009c40 <etharp_output+0x210>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4a46      	ldr	r2, [pc, #280]	; (8009c44 <etharp_output+0x214>)
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	440b      	add	r3, r1
 8009b32:	00db      	lsls	r3, r3, #3
 8009b34:	4413      	add	r3, r2
 8009b36:	3314      	adds	r3, #20
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d925      	bls.n	8009b8a <etharp_output+0x15a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8009b3e:	4b40      	ldr	r3, [pc, #256]	; (8009c40 <etharp_output+0x210>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	4619      	mov	r1, r3
 8009b44:	4a3f      	ldr	r2, [pc, #252]	; (8009c44 <etharp_output+0x214>)
 8009b46:	460b      	mov	r3, r1
 8009b48:	005b      	lsls	r3, r3, #1
 8009b4a:	440b      	add	r3, r1
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	4413      	add	r3, r2
 8009b50:	3308      	adds	r3, #8
 8009b52:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d117      	bne.n	8009b8a <etharp_output+0x15a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	4b38      	ldr	r3, [pc, #224]	; (8009c40 <etharp_output+0x210>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	4618      	mov	r0, r3
 8009b64:	4937      	ldr	r1, [pc, #220]	; (8009c44 <etharp_output+0x214>)
 8009b66:	4603      	mov	r3, r0
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	4403      	add	r3, r0
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	440b      	add	r3, r1
 8009b70:	3304      	adds	r3, #4
 8009b72:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d108      	bne.n	8009b8a <etharp_output+0x15a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8009b78:	4b31      	ldr	r3, [pc, #196]	; (8009c40 <etharp_output+0x210>)
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f7ff febb 	bl	80098fc <etharp_output_to_arp_index>
 8009b86:	4603      	mov	r3, r0
 8009b88:	e04a      	b.n	8009c20 <etharp_output+0x1f0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	77fb      	strb	r3, [r7, #31]
 8009b8e:	e031      	b.n	8009bf4 <etharp_output+0x1c4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009b90:	7ffa      	ldrb	r2, [r7, #31]
 8009b92:	492c      	ldr	r1, [pc, #176]	; (8009c44 <etharp_output+0x214>)
 8009b94:	4613      	mov	r3, r2
 8009b96:	005b      	lsls	r3, r3, #1
 8009b98:	4413      	add	r3, r2
 8009b9a:	00db      	lsls	r3, r3, #3
 8009b9c:	440b      	add	r3, r1
 8009b9e:	3314      	adds	r3, #20
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d923      	bls.n	8009bee <etharp_output+0x1be>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8009ba6:	7ffa      	ldrb	r2, [r7, #31]
 8009ba8:	4926      	ldr	r1, [pc, #152]	; (8009c44 <etharp_output+0x214>)
 8009baa:	4613      	mov	r3, r2
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	4413      	add	r3, r2
 8009bb0:	00db      	lsls	r3, r3, #3
 8009bb2:	440b      	add	r3, r1
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d117      	bne.n	8009bee <etharp_output+0x1be>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	6819      	ldr	r1, [r3, #0]
 8009bc2:	7ffa      	ldrb	r2, [r7, #31]
 8009bc4:	481f      	ldr	r0, [pc, #124]	; (8009c44 <etharp_output+0x214>)
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	4413      	add	r3, r2
 8009bcc:	00db      	lsls	r3, r3, #3
 8009bce:	4403      	add	r3, r0
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8009bd4:	4299      	cmp	r1, r3
 8009bd6:	d10a      	bne.n	8009bee <etharp_output+0x1be>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8009bd8:	4a19      	ldr	r2, [pc, #100]	; (8009c40 <etharp_output+0x210>)
 8009bda:	7ffb      	ldrb	r3, [r7, #31]
 8009bdc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8009bde:	7ffb      	ldrb	r3, [r7, #31]
 8009be0:	461a      	mov	r2, r3
 8009be2:	68b9      	ldr	r1, [r7, #8]
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7ff fe89 	bl	80098fc <etharp_output_to_arp_index>
 8009bea:	4603      	mov	r3, r0
 8009bec:	e018      	b.n	8009c20 <etharp_output+0x1f0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009bee:	7ffb      	ldrb	r3, [r7, #31]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	77fb      	strb	r3, [r7, #31]
 8009bf4:	7ffb      	ldrb	r3, [r7, #31]
 8009bf6:	2b09      	cmp	r3, #9
 8009bf8:	d9ca      	bls.n	8009b90 <etharp_output+0x160>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	6a39      	ldr	r1, [r7, #32]
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 f822 	bl	8009c48 <etharp_query>
 8009c04:	4603      	mov	r3, r0
 8009c06:	e00b      	b.n	8009c20 <etharp_output+0x1f0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009c0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 fab5 	bl	800a188 <ethernet_output>
 8009c1e:	4603      	mov	r3, r0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3728      	adds	r7, #40	; 0x28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	08013fc8 	.word	0x08013fc8
 8009c2c:	0801413c 	.word	0x0801413c
 8009c30:	08014064 	.word	0x08014064
 8009c34:	0801418c 	.word	0x0801418c
 8009c38:	0801412c 	.word	0x0801412c
 8009c3c:	08016b7c 	.word	0x08016b7c
 8009c40:	24005244 	.word	0x24005244
 8009c44:	24005154 	.word	0x24005154

08009c48 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08c      	sub	sp, #48	; 0x30
 8009c4c:	af02      	add	r7, sp, #8
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	332a      	adds	r3, #42	; 0x2a
 8009c58:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8009c5a:	23ff      	movs	r3, #255	; 0xff
 8009c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68f9      	ldr	r1, [r7, #12]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 fffa 	bl	800ac64 <ip4_addr_isbroadcast_u32>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10c      	bne.n	8009c90 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009c7e:	2be0      	cmp	r3, #224	; 0xe0
 8009c80:	d006      	beq.n	8009c90 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d003      	beq.n	8009c90 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d102      	bne.n	8009c96 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009c90:	f06f 030f 	mvn.w	r3, #15
 8009c94:	e101      	b.n	8009e9a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	2101      	movs	r1, #1
 8009c9a:	68b8      	ldr	r0, [r7, #8]
 8009c9c:	f7ff fb30 	bl	8009300 <etharp_find_entry>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8009ca4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	da02      	bge.n	8009cb2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8009cac:	8a7b      	ldrh	r3, [r7, #18]
 8009cae:	b25b      	sxtb	r3, r3
 8009cb0:	e0f3      	b.n	8009e9a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8009cb2:	8a7b      	ldrh	r3, [r7, #18]
 8009cb4:	2b7e      	cmp	r3, #126	; 0x7e
 8009cb6:	d906      	bls.n	8009cc6 <etharp_query+0x7e>
 8009cb8:	4b7a      	ldr	r3, [pc, #488]	; (8009ea4 <etharp_query+0x25c>)
 8009cba:	f240 32c1 	movw	r2, #961	; 0x3c1
 8009cbe:	497a      	ldr	r1, [pc, #488]	; (8009ea8 <etharp_query+0x260>)
 8009cc0:	487a      	ldr	r0, [pc, #488]	; (8009eac <etharp_query+0x264>)
 8009cc2:	f009 f871 	bl	8012da8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8009cc6:	8a7b      	ldrh	r3, [r7, #18]
 8009cc8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009cca:	7c7a      	ldrb	r2, [r7, #17]
 8009ccc:	4978      	ldr	r1, [pc, #480]	; (8009eb0 <etharp_query+0x268>)
 8009cce:	4613      	mov	r3, r2
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	4413      	add	r3, r2
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	440b      	add	r3, r1
 8009cd8:	3314      	adds	r3, #20
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d115      	bne.n	8009d0c <etharp_query+0xc4>
    is_new_entry = 1;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009ce4:	7c7a      	ldrb	r2, [r7, #17]
 8009ce6:	4972      	ldr	r1, [pc, #456]	; (8009eb0 <etharp_query+0x268>)
 8009ce8:	4613      	mov	r3, r2
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	4413      	add	r3, r2
 8009cee:	00db      	lsls	r3, r3, #3
 8009cf0:	440b      	add	r3, r1
 8009cf2:	3314      	adds	r3, #20
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8009cf8:	7c7a      	ldrb	r2, [r7, #17]
 8009cfa:	496d      	ldr	r1, [pc, #436]	; (8009eb0 <etharp_query+0x268>)
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	005b      	lsls	r3, r3, #1
 8009d00:	4413      	add	r3, r2
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	440b      	add	r3, r1
 8009d06:	3308      	adds	r3, #8
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8009d0c:	7c7a      	ldrb	r2, [r7, #17]
 8009d0e:	4968      	ldr	r1, [pc, #416]	; (8009eb0 <etharp_query+0x268>)
 8009d10:	4613      	mov	r3, r2
 8009d12:	005b      	lsls	r3, r3, #1
 8009d14:	4413      	add	r3, r2
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	440b      	add	r3, r1
 8009d1a:	3314      	adds	r3, #20
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d011      	beq.n	8009d46 <etharp_query+0xfe>
 8009d22:	7c7a      	ldrb	r2, [r7, #17]
 8009d24:	4962      	ldr	r1, [pc, #392]	; (8009eb0 <etharp_query+0x268>)
 8009d26:	4613      	mov	r3, r2
 8009d28:	005b      	lsls	r3, r3, #1
 8009d2a:	4413      	add	r3, r2
 8009d2c:	00db      	lsls	r3, r3, #3
 8009d2e:	440b      	add	r3, r1
 8009d30:	3314      	adds	r3, #20
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d806      	bhi.n	8009d46 <etharp_query+0xfe>
 8009d38:	4b5a      	ldr	r3, [pc, #360]	; (8009ea4 <etharp_query+0x25c>)
 8009d3a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8009d3e:	495d      	ldr	r1, [pc, #372]	; (8009eb4 <etharp_query+0x26c>)
 8009d40:	485a      	ldr	r0, [pc, #360]	; (8009eac <etharp_query+0x264>)
 8009d42:	f009 f831 	bl	8012da8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d102      	bne.n	8009d52 <etharp_query+0x10a>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10c      	bne.n	8009d6c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8009d52:	68b9      	ldr	r1, [r7, #8]
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f977 	bl	800a048 <etharp_request>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d102      	bne.n	8009d6c <etharp_query+0x124>
      return result;
 8009d66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d6a:	e096      	b.n	8009e9a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d106      	bne.n	8009d80 <etharp_query+0x138>
 8009d72:	4b4c      	ldr	r3, [pc, #304]	; (8009ea4 <etharp_query+0x25c>)
 8009d74:	f240 32e1 	movw	r2, #993	; 0x3e1
 8009d78:	494f      	ldr	r1, [pc, #316]	; (8009eb8 <etharp_query+0x270>)
 8009d7a:	484c      	ldr	r0, [pc, #304]	; (8009eac <etharp_query+0x264>)
 8009d7c:	f009 f814 	bl	8012da8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8009d80:	7c7a      	ldrb	r2, [r7, #17]
 8009d82:	494b      	ldr	r1, [pc, #300]	; (8009eb0 <etharp_query+0x268>)
 8009d84:	4613      	mov	r3, r2
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	4413      	add	r3, r2
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	440b      	add	r3, r1
 8009d8e:	3314      	adds	r3, #20
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d917      	bls.n	8009dc6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8009d96:	4a49      	ldr	r2, [pc, #292]	; (8009ebc <etharp_query+0x274>)
 8009d98:	7c7b      	ldrb	r3, [r7, #17]
 8009d9a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009d9c:	7c7a      	ldrb	r2, [r7, #17]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	4413      	add	r3, r2
 8009da4:	00db      	lsls	r3, r3, #3
 8009da6:	3308      	adds	r3, #8
 8009da8:	4a41      	ldr	r2, [pc, #260]	; (8009eb0 <etharp_query+0x268>)
 8009daa:	4413      	add	r3, r2
 8009dac:	3304      	adds	r3, #4
 8009dae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009db2:	9200      	str	r2, [sp, #0]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 f9e5 	bl	800a188 <ethernet_output>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dc4:	e067      	b.n	8009e96 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009dc6:	7c7a      	ldrb	r2, [r7, #17]
 8009dc8:	4939      	ldr	r1, [pc, #228]	; (8009eb0 <etharp_query+0x268>)
 8009dca:	4613      	mov	r3, r2
 8009dcc:	005b      	lsls	r3, r3, #1
 8009dce:	4413      	add	r3, r2
 8009dd0:	00db      	lsls	r3, r3, #3
 8009dd2:	440b      	add	r3, r1
 8009dd4:	3314      	adds	r3, #20
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d15c      	bne.n	8009e96 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009de4:	e01c      	b.n	8009e20 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	895a      	ldrh	r2, [r3, #10]
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	891b      	ldrh	r3, [r3, #8]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d10a      	bne.n	8009e08 <etharp_query+0x1c0>
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d006      	beq.n	8009e08 <etharp_query+0x1c0>
 8009dfa:	4b2a      	ldr	r3, [pc, #168]	; (8009ea4 <etharp_query+0x25c>)
 8009dfc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8009e00:	492f      	ldr	r1, [pc, #188]	; (8009ec0 <etharp_query+0x278>)
 8009e02:	482a      	ldr	r0, [pc, #168]	; (8009eac <etharp_query+0x264>)
 8009e04:	f008 ffd0 	bl	8012da8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	7b1b      	ldrb	r3, [r3, #12]
 8009e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <etharp_query+0x1d2>
        copy_needed = 1;
 8009e14:	2301      	movs	r3, #1
 8009e16:	61bb      	str	r3, [r7, #24]
        break;
 8009e18:	e005      	b.n	8009e26 <etharp_query+0x1de>
      }
      p = p->next;
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1df      	bne.n	8009de6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d007      	beq.n	8009e3c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8009e32:	200e      	movs	r0, #14
 8009e34:	f003 fad4 	bl	800d3e0 <pbuf_clone>
 8009e38:	61f8      	str	r0, [r7, #28]
 8009e3a:	e004      	b.n	8009e46 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8009e40:	69f8      	ldr	r0, [r7, #28]
 8009e42:	f003 f911 	bl	800d068 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d021      	beq.n	8009e90 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8009e4c:	7c7a      	ldrb	r2, [r7, #17]
 8009e4e:	4918      	ldr	r1, [pc, #96]	; (8009eb0 <etharp_query+0x268>)
 8009e50:	4613      	mov	r3, r2
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	4413      	add	r3, r2
 8009e56:	00db      	lsls	r3, r3, #3
 8009e58:	440b      	add	r3, r1
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00a      	beq.n	8009e76 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8009e60:	7c7a      	ldrb	r2, [r7, #17]
 8009e62:	4913      	ldr	r1, [pc, #76]	; (8009eb0 <etharp_query+0x268>)
 8009e64:	4613      	mov	r3, r2
 8009e66:	005b      	lsls	r3, r3, #1
 8009e68:	4413      	add	r3, r2
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	440b      	add	r3, r1
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f003 f859 	bl	800cf28 <pbuf_free>
      }
      arp_table[i].q = p;
 8009e76:	7c7a      	ldrb	r2, [r7, #17]
 8009e78:	490d      	ldr	r1, [pc, #52]	; (8009eb0 <etharp_query+0x268>)
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	005b      	lsls	r3, r3, #1
 8009e7e:	4413      	add	r3, r2
 8009e80:	00db      	lsls	r3, r3, #3
 8009e82:	440b      	add	r3, r1
 8009e84:	69fa      	ldr	r2, [r7, #28]
 8009e86:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e8e:	e002      	b.n	8009e96 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8009e90:	23ff      	movs	r3, #255	; 0xff
 8009e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8009e96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3728      	adds	r7, #40	; 0x28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	08013fc8 	.word	0x08013fc8
 8009ea8:	08014198 	.word	0x08014198
 8009eac:	08014064 	.word	0x08014064
 8009eb0:	24005154 	.word	0x24005154
 8009eb4:	080141a8 	.word	0x080141a8
 8009eb8:	0801418c 	.word	0x0801418c
 8009ebc:	24005244 	.word	0x24005244
 8009ec0:	080141d0 	.word	0x080141d0

08009ec4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08a      	sub	sp, #40	; 0x28
 8009ec8:	af02      	add	r7, sp, #8
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d106      	bne.n	8009eea <etharp_raw+0x26>
 8009edc:	4b43      	ldr	r3, [pc, #268]	; (8009fec <etharp_raw+0x128>)
 8009ede:	f240 4257 	movw	r2, #1111	; 0x457
 8009ee2:	4943      	ldr	r1, [pc, #268]	; (8009ff0 <etharp_raw+0x12c>)
 8009ee4:	4843      	ldr	r0, [pc, #268]	; (8009ff4 <etharp_raw+0x130>)
 8009ee6:	f008 ff5f 	bl	8012da8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009eea:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009eee:	211c      	movs	r1, #28
 8009ef0:	200e      	movs	r0, #14
 8009ef2:	f002 fd35 	bl	800c960 <pbuf_alloc>
 8009ef6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d102      	bne.n	8009f04 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8009efe:	f04f 33ff 	mov.w	r3, #4294967295
 8009f02:	e06e      	b.n	8009fe2 <etharp_raw+0x11e>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	895b      	ldrh	r3, [r3, #10]
 8009f08:	2b1b      	cmp	r3, #27
 8009f0a:	d806      	bhi.n	8009f1a <etharp_raw+0x56>
 8009f0c:	4b37      	ldr	r3, [pc, #220]	; (8009fec <etharp_raw+0x128>)
 8009f0e:	f240 4262 	movw	r2, #1122	; 0x462
 8009f12:	4939      	ldr	r1, [pc, #228]	; (8009ff8 <etharp_raw+0x134>)
 8009f14:	4837      	ldr	r0, [pc, #220]	; (8009ff4 <etharp_raw+0x130>)
 8009f16:	f008 ff47 	bl	8012da8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009f20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff f8e0 	bl	80090e8 <lwip_htons>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f36:	2b06      	cmp	r3, #6
 8009f38:	d006      	beq.n	8009f48 <etharp_raw+0x84>
 8009f3a:	4b2c      	ldr	r3, [pc, #176]	; (8009fec <etharp_raw+0x128>)
 8009f3c:	f240 4269 	movw	r2, #1129	; 0x469
 8009f40:	492e      	ldr	r1, [pc, #184]	; (8009ffc <etharp_raw+0x138>)
 8009f42:	482c      	ldr	r0, [pc, #176]	; (8009ff4 <etharp_raw+0x130>)
 8009f44:	f008 ff30 	bl	8012da8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	2206      	movs	r2, #6
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f008 ff13 	bl	8012d7c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	3312      	adds	r3, #18
 8009f5a:	2206      	movs	r2, #6
 8009f5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f008 ff0c 	bl	8012d7c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	330e      	adds	r3, #14
 8009f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f6a:	6812      	ldr	r2, [r2, #0]
 8009f6c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	3318      	adds	r3, #24
 8009f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f74:	6812      	ldr	r2, [r2, #0]
 8009f76:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	701a      	strb	r2, [r3, #0]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f042 0201 	orr.w	r2, r2, #1
 8009f84:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f042 0208 	orr.w	r2, r2, #8
 8009f8e:	709a      	strb	r2, [r3, #2]
 8009f90:	2200      	movs	r2, #0
 8009f92:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	2206      	movs	r2, #6
 8009f98:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	2204      	movs	r2, #4
 8009f9e:	715a      	strb	r2, [r3, #5]
  /* send ARP query */
#if LWIP_AUTOIP
  /* If we are using Link-Local, all ARP packets that contain a Link-Local
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  if (ip4_addr_islinklocal(ipsrc_addr)) {
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d109      	bne.n	8009fc2 <etharp_raw+0xfe>
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
 8009fae:	f640 0306 	movw	r3, #2054	; 0x806
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	4b12      	ldr	r3, [pc, #72]	; (800a000 <etharp_raw+0x13c>)
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	69b9      	ldr	r1, [r7, #24]
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 f8e4 	bl	800a188 <ethernet_output>
 8009fc0:	e008      	b.n	8009fd4 <etharp_raw+0x110>
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009fc2:	f640 0306 	movw	r3, #2054	; 0x806
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	69b9      	ldr	r1, [r7, #24]
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 f8da 	bl	800a188 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009fd4:	69b8      	ldr	r0, [r7, #24]
 8009fd6:	f002 ffa7 	bl	800cf28 <pbuf_free>
  p = NULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009fde:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3720      	adds	r7, #32
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	08013fc8 	.word	0x08013fc8
 8009ff0:	0801413c 	.word	0x0801413c
 8009ff4:	08014064 	.word	0x08014064
 8009ff8:	080141ec 	.word	0x080141ec
 8009ffc:	08014220 	.word	0x08014220
 800a000:	08016b7c 	.word	0x08016b7c

0800a004 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af04      	add	r7, sp, #16
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a020:	2201      	movs	r2, #1
 800a022:	9203      	str	r2, [sp, #12]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	9202      	str	r2, [sp, #8]
 800a028:	4a06      	ldr	r2, [pc, #24]	; (800a044 <etharp_request_dst+0x40>)
 800a02a:	9201      	str	r2, [sp, #4]
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	4603      	mov	r3, r0
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f7ff ff46 	bl	8009ec4 <etharp_raw>
 800a038:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	08016b84 	.word	0x08016b84

0800a048 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800a052:	4a05      	ldr	r2, [pc, #20]	; (800a068 <etharp_request+0x20>)
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7ff ffd4 	bl	800a004 <etharp_request_dst>
 800a05c:	4603      	mov	r3, r0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	08016b7c 	.word	0x08016b7c

0800a06c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800a076:	230e      	movs	r3, #14
 800a078:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	895b      	ldrh	r3, [r3, #10]
 800a07e:	2b0e      	cmp	r3, #14
 800a080:	d96e      	bls.n	800a160 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	7bdb      	ldrb	r3, [r3, #15]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d106      	bne.n	800a098 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a090:	3301      	adds	r3, #1
 800a092:	b2da      	uxtb	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	7b1a      	ldrb	r2, [r3, #12]
 800a0a2:	7b5b      	ldrb	r3, [r3, #13]
 800a0a4:	021b      	lsls	r3, r3, #8
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d023      	beq.n	800a0fe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d10f      	bne.n	800a0de <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	785b      	ldrb	r3, [r3, #1]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d11b      	bne.n	800a0fe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a0ca:	2b5e      	cmp	r3, #94	; 0x5e
 800a0cc:	d117      	bne.n	800a0fe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	7b5b      	ldrb	r3, [r3, #13]
 800a0d2:	f043 0310 	orr.w	r3, r3, #16
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	735a      	strb	r2, [r3, #13]
 800a0dc:	e00f      	b.n	800a0fe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	2206      	movs	r2, #6
 800a0e2:	4928      	ldr	r1, [pc, #160]	; (800a184 <ethernet_input+0x118>)
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f008 fe39 	bl	8012d5c <memcmp>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d106      	bne.n	800a0fe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	7b5b      	ldrb	r3, [r3, #13]
 800a0f4:	f043 0308 	orr.w	r3, r3, #8
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800a0fe:	89fb      	ldrh	r3, [r7, #14]
 800a100:	2b08      	cmp	r3, #8
 800a102:	d003      	beq.n	800a10c <ethernet_input+0xa0>
 800a104:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800a108:	d014      	beq.n	800a134 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800a10a:	e032      	b.n	800a172 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a112:	f003 0308 	and.w	r3, r3, #8
 800a116:	2b00      	cmp	r3, #0
 800a118:	d024      	beq.n	800a164 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a11a:	8afb      	ldrh	r3, [r7, #22]
 800a11c:	4619      	mov	r1, r3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f002 fe7c 	bl	800ce1c <pbuf_remove_header>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d11e      	bne.n	800a168 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fb9d 	bl	800a86c <ip4_input>
      break;
 800a132:	e013      	b.n	800a15c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a13a:	f003 0308 	and.w	r3, r3, #8
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d014      	beq.n	800a16c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a142:	8afb      	ldrh	r3, [r7, #22]
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f002 fe68 	bl	800ce1c <pbuf_remove_header>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10e      	bne.n	800a170 <ethernet_input+0x104>
        etharp_input(p, netif);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7ff fb43 	bl	80097e0 <etharp_input>
      break;
 800a15a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	e00c      	b.n	800a17a <ethernet_input+0x10e>
    goto free_and_return;
 800a160:	bf00      	nop
 800a162:	e006      	b.n	800a172 <ethernet_input+0x106>
        goto free_and_return;
 800a164:	bf00      	nop
 800a166:	e004      	b.n	800a172 <ethernet_input+0x106>
        goto free_and_return;
 800a168:	bf00      	nop
 800a16a:	e002      	b.n	800a172 <ethernet_input+0x106>
        goto free_and_return;
 800a16c:	bf00      	nop
 800a16e:	e000      	b.n	800a172 <ethernet_input+0x106>
        goto free_and_return;
 800a170:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f002 fed8 	bl	800cf28 <pbuf_free>
  return ERR_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	08016b7c 	.word	0x08016b7c

0800a188 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800a196:	8c3b      	ldrh	r3, [r7, #32]
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe ffa5 	bl	80090e8 <lwip_htons>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800a1a2:	210e      	movs	r1, #14
 800a1a4:	68b8      	ldr	r0, [r7, #8]
 800a1a6:	f002 fe29 	bl	800cdfc <pbuf_add_header>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d125      	bne.n	800a1fc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	8afa      	ldrh	r2, [r7, #22]
 800a1ba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	2206      	movs	r2, #6
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f008 fdda 	bl	8012d7c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	3306      	adds	r3, #6
 800a1cc:	2206      	movs	r2, #6
 800a1ce:	6879      	ldr	r1, [r7, #4]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f008 fdd3 	bl	8012d7c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1dc:	2b06      	cmp	r3, #6
 800a1de:	d006      	beq.n	800a1ee <ethernet_output+0x66>
 800a1e0:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <ethernet_output+0x84>)
 800a1e2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800a1e6:	490a      	ldr	r1, [pc, #40]	; (800a210 <ethernet_output+0x88>)
 800a1e8:	480a      	ldr	r0, [pc, #40]	; (800a214 <ethernet_output+0x8c>)
 800a1ea:	f008 fddd 	bl	8012da8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	68b9      	ldr	r1, [r7, #8]
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	4798      	blx	r3
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	e002      	b.n	800a202 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800a1fc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800a1fe:	f06f 0301 	mvn.w	r3, #1
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	08014264 	.word	0x08014264
 800a210:	080142bc 	.word	0x080142bc
 800a214:	080142f0 	.word	0x080142f0

0800a218 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08e      	sub	sp, #56	; 0x38
 800a21c:	af04      	add	r7, sp, #16
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800a222:	4b86      	ldr	r3, [pc, #536]	; (800a43c <icmp_input+0x224>)
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	f003 030f 	and.w	r3, r3, #15
 800a230:	b2db      	uxtb	r3, r3
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	b2db      	uxtb	r3, r3
 800a236:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 800a238:	8bfb      	ldrh	r3, [r7, #30]
 800a23a:	2b13      	cmp	r3, #19
 800a23c:	f240 80ea 	bls.w	800a414 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	895b      	ldrh	r3, [r3, #10]
 800a244:	2b03      	cmp	r3, #3
 800a246:	f240 80e7 	bls.w	800a418 <icmp_input+0x200>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800a252:	7f7b      	ldrb	r3, [r7, #29]
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 80d6 	beq.w	800a406 <icmp_input+0x1ee>
 800a25a:	2b08      	cmp	r3, #8
 800a25c:	f040 80d6 	bne.w	800a40c <icmp_input+0x1f4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800a260:	4b77      	ldr	r3, [pc, #476]	; (800a440 <icmp_input+0x228>)
 800a262:	627b      	str	r3, [r7, #36]	; 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a264:	4b75      	ldr	r3, [pc, #468]	; (800a43c <icmp_input+0x224>)
 800a266:	695b      	ldr	r3, [r3, #20]
 800a268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a26c:	2be0      	cmp	r3, #224	; 0xe0
 800a26e:	d102      	bne.n	800a276 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	3304      	adds	r3, #4
 800a274:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800a276:	4b71      	ldr	r3, [pc, #452]	; (800a43c <icmp_input+0x224>)
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	4a70      	ldr	r2, [pc, #448]	; (800a43c <icmp_input+0x224>)
 800a27c:	6812      	ldr	r2, [r2, #0]
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f000 fcef 	bl	800ac64 <ip4_addr_isbroadcast_u32>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	3304      	adds	r3, #4
 800a290:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	891b      	ldrh	r3, [r3, #8]
 800a296:	2b07      	cmp	r3, #7
 800a298:	f240 80c0 	bls.w	800a41c <icmp_input+0x204>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f9dc 	bl	800a65a <inet_chksum_pbuf>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d003      	beq.n	800a2b0 <icmp_input+0x98>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f002 fe3d 	bl	800cf28 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800a2ae:	e0c1      	b.n	800a434 <icmp_input+0x21c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800a2b0:	8bfb      	ldrh	r3, [r7, #30]
 800a2b2:	330e      	adds	r3, #14
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f002 fda0 	bl	800cdfc <pbuf_add_header>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d04b      	beq.n	800a35a <icmp_input+0x142>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	891a      	ldrh	r2, [r3, #8]
 800a2c6:	8bfb      	ldrh	r3, [r7, #30]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	891b      	ldrh	r3, [r3, #8]
 800a2d0:	8b7a      	ldrh	r2, [r7, #26]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	f0c0 80a7 	bcc.w	800a426 <icmp_input+0x20e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800a2d8:	8b7b      	ldrh	r3, [r7, #26]
 800a2da:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a2de:	4619      	mov	r1, r3
 800a2e0:	200e      	movs	r0, #14
 800a2e2:	f002 fb3d 	bl	800c960 <pbuf_alloc>
 800a2e6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 809d 	beq.w	800a42a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	895b      	ldrh	r3, [r3, #10]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	8bfb      	ldrh	r3, [r7, #30]
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d203      	bcs.n	800a306 <icmp_input+0xee>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800a2fe:	6978      	ldr	r0, [r7, #20]
 800a300:	f002 fe12 	bl	800cf28 <pbuf_free>
          goto icmperr;
 800a304:	e092      	b.n	800a42c <icmp_input+0x214>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	8bfa      	ldrh	r2, [r7, #30]
 800a30c:	6a39      	ldr	r1, [r7, #32]
 800a30e:	4618      	mov	r0, r3
 800a310:	f008 fd34 	bl	8012d7c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800a314:	8bfb      	ldrh	r3, [r7, #30]
 800a316:	4619      	mov	r1, r3
 800a318:	6978      	ldr	r0, [r7, #20]
 800a31a:	f002 fd7f 	bl	800ce1c <pbuf_remove_header>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d009      	beq.n	800a338 <icmp_input+0x120>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800a324:	4b47      	ldr	r3, [pc, #284]	; (800a444 <icmp_input+0x22c>)
 800a326:	22b6      	movs	r2, #182	; 0xb6
 800a328:	4947      	ldr	r1, [pc, #284]	; (800a448 <icmp_input+0x230>)
 800a32a:	4848      	ldr	r0, [pc, #288]	; (800a44c <icmp_input+0x234>)
 800a32c:	f008 fd3c 	bl	8012da8 <iprintf>
          pbuf_free(r);
 800a330:	6978      	ldr	r0, [r7, #20]
 800a332:	f002 fdf9 	bl	800cf28 <pbuf_free>
          goto icmperr;
 800a336:	e079      	b.n	800a42c <icmp_input+0x214>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800a338:	6879      	ldr	r1, [r7, #4]
 800a33a:	6978      	ldr	r0, [r7, #20]
 800a33c:	f002 ff0c 	bl	800d158 <pbuf_copy>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d003      	beq.n	800a34e <icmp_input+0x136>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800a346:	6978      	ldr	r0, [r7, #20]
 800a348:	f002 fdee 	bl	800cf28 <pbuf_free>
          goto icmperr;
 800a34c:	e06e      	b.n	800a42c <icmp_input+0x214>
        }
        /* free the original p */
        pbuf_free(p);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f002 fdea 	bl	800cf28 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	607b      	str	r3, [r7, #4]
 800a358:	e00f      	b.n	800a37a <icmp_input+0x162>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800a35a:	8bfb      	ldrh	r3, [r7, #30]
 800a35c:	330e      	adds	r3, #14
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f002 fd5b 	bl	800ce1c <pbuf_remove_header>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d006      	beq.n	800a37a <icmp_input+0x162>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800a36c:	4b35      	ldr	r3, [pc, #212]	; (800a444 <icmp_input+0x22c>)
 800a36e:	22c7      	movs	r2, #199	; 0xc7
 800a370:	4937      	ldr	r1, [pc, #220]	; (800a450 <icmp_input+0x238>)
 800a372:	4836      	ldr	r0, [pc, #216]	; (800a44c <icmp_input+0x234>)
 800a374:	f008 fd18 	bl	8012da8 <iprintf>
          goto icmperr;
 800a378:	e058      	b.n	800a42c <icmp_input+0x214>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800a380:	8bfb      	ldrh	r3, [r7, #30]
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f002 fd39 	bl	800cdfc <pbuf_add_header>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d13c      	bne.n	800a40a <icmp_input+0x1f2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a39e:	4b27      	ldr	r3, [pc, #156]	; (800a43c <icmp_input+0x224>)
 800a3a0:	691a      	ldr	r2, [r3, #16]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	885b      	ldrh	r3, [r3, #2]
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d907      	bls.n	800a3ca <icmp_input+0x1b2>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	885b      	ldrh	r3, [r3, #2]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	3309      	adds	r3, #9
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	805a      	strh	r2, [r3, #2]
 800a3c8:	e006      	b.n	800a3d8 <icmp_input+0x1c0>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	885b      	ldrh	r3, [r3, #2]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	22ff      	movs	r2, #255	; 0xff
 800a3dc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	729a      	strb	r2, [r3, #10]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	9302      	str	r3, [sp, #8]
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	9301      	str	r3, [sp, #4]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	23ff      	movs	r3, #255	; 0xff
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fb5a 	bl	800aab4 <ip4_output_if>
 800a400:	4603      	mov	r3, r0
 800a402:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800a404:	e001      	b.n	800a40a <icmp_input+0x1f2>
      break;
 800a406:	bf00      	nop
 800a408:	e000      	b.n	800a40c <icmp_input+0x1f4>
      break;
 800a40a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f002 fd8b 	bl	800cf28 <pbuf_free>
  return;
 800a412:	e00f      	b.n	800a434 <icmp_input+0x21c>
    goto lenerr;
 800a414:	bf00      	nop
 800a416:	e002      	b.n	800a41e <icmp_input+0x206>
    goto lenerr;
 800a418:	bf00      	nop
 800a41a:	e000      	b.n	800a41e <icmp_input+0x206>
        goto lenerr;
 800a41c:	bf00      	nop
lenerr:
  pbuf_free(p);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f002 fd82 	bl	800cf28 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a424:	e006      	b.n	800a434 <icmp_input+0x21c>
          goto icmperr;
 800a426:	bf00      	nop
 800a428:	e000      	b.n	800a42c <icmp_input+0x214>
          goto icmperr;
 800a42a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f002 fd7b 	bl	800cf28 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a432:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800a434:	3728      	adds	r7, #40	; 0x28
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	24005248 	.word	0x24005248
 800a440:	2400525c 	.word	0x2400525c
 800a444:	08014318 	.word	0x08014318
 800a448:	08014370 	.word	0x08014370
 800a44c:	080143a8 	.word	0x080143a8
 800a450:	080143d0 	.word	0x080143d0

0800a454 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	461a      	mov	r2, r3
 800a464:	2103      	movs	r1, #3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f814 	bl	800a494 <icmp_send_response>
}
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	461a      	mov	r2, r3
 800a484:	210b      	movs	r1, #11
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f804 	bl	800a494 <icmp_send_response>
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08c      	sub	sp, #48	; 0x30
 800a498:	af04      	add	r7, sp, #16
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	70fb      	strb	r3, [r7, #3]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a4a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a4a8:	2124      	movs	r1, #36	; 0x24
 800a4aa:	2022      	movs	r0, #34	; 0x22
 800a4ac:	f002 fa58 	bl	800c960 <pbuf_alloc>
 800a4b0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d056      	beq.n	800a566 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	895b      	ldrh	r3, [r3, #10]
 800a4bc:	2b23      	cmp	r3, #35	; 0x23
 800a4be:	d806      	bhi.n	800a4ce <icmp_send_response+0x3a>
 800a4c0:	4b2b      	ldr	r3, [pc, #172]	; (800a570 <icmp_send_response+0xdc>)
 800a4c2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800a4c6:	492b      	ldr	r1, [pc, #172]	; (800a574 <icmp_send_response+0xe0>)
 800a4c8:	482b      	ldr	r0, [pc, #172]	; (800a578 <icmp_send_response+0xe4>)
 800a4ca:	f008 fc6d 	bl	8012da8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	78fa      	ldrb	r2, [r7, #3]
 800a4de:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	78ba      	ldrb	r2, [r7, #2]
 800a4e4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	711a      	strb	r2, [r3, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	719a      	strb	r2, [r3, #6]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f103 0008 	add.w	r0, r3, #8
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	221c      	movs	r2, #28
 800a508:	4619      	mov	r1, r3
 800a50a:	f008 fc37 	bl	8012d7c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a514:	f107 030c 	add.w	r3, r7, #12
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 f901 	bl	800a720 <ip4_route>
 800a51e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d01b      	beq.n	800a55e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2200      	movs	r2, #0
 800a52a:	709a      	strb	r2, [r3, #2]
 800a52c:	2200      	movs	r2, #0
 800a52e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	895b      	ldrh	r3, [r3, #10]
 800a534:	4619      	mov	r1, r3
 800a536:	6978      	ldr	r0, [r7, #20]
 800a538:	f000 f87d 	bl	800a636 <inet_chksum>
 800a53c:	4603      	mov	r3, r0
 800a53e:	461a      	mov	r2, r3
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a544:	f107 020c 	add.w	r2, r7, #12
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	9302      	str	r3, [sp, #8]
 800a54c:	2301      	movs	r3, #1
 800a54e:	9301      	str	r3, [sp, #4]
 800a550:	2300      	movs	r3, #0
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	23ff      	movs	r3, #255	; 0xff
 800a556:	2100      	movs	r1, #0
 800a558:	69f8      	ldr	r0, [r7, #28]
 800a55a:	f000 faab 	bl	800aab4 <ip4_output_if>
  }
  pbuf_free(q);
 800a55e:	69f8      	ldr	r0, [r7, #28]
 800a560:	f002 fce2 	bl	800cf28 <pbuf_free>
 800a564:	e000      	b.n	800a568 <icmp_send_response+0xd4>
    return;
 800a566:	bf00      	nop
}
 800a568:	3720      	adds	r7, #32
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	08014318 	.word	0x08014318
 800a574:	08014404 	.word	0x08014404
 800a578:	080143a8 	.word	0x080143a8

0800a57c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b089      	sub	sp, #36	; 0x24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00d      	beq.n	800a5bc <lwip_standard_chksum+0x40>
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	dd0a      	ble.n	800a5bc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800a5a6:	69fa      	ldr	r2, [r7, #28]
 800a5a8:	1c53      	adds	r3, r2, #1
 800a5aa:	61fb      	str	r3, [r7, #28]
 800a5ac:	f107 030e 	add.w	r3, r7, #14
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	7812      	ldrb	r2, [r2, #0]
 800a5b4:	701a      	strb	r2, [r3, #0]
    len--;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800a5c0:	e00a      	b.n	800a5d8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	1c9a      	adds	r2, r3, #2
 800a5c6:	61ba      	str	r2, [r7, #24]
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	3b02      	subs	r3, #2
 800a5d6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	dcf1      	bgt.n	800a5c2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	dd04      	ble.n	800a5ee <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800a5e4:	f107 030e 	add.w	r3, r7, #14
 800a5e8:	69ba      	ldr	r2, [r7, #24]
 800a5ea:	7812      	ldrb	r2, [r2, #0]
 800a5ec:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800a5ee:	89fb      	ldrh	r3, [r7, #14]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	0c1a      	lsrs	r2, r3, #16
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	4413      	add	r3, r2
 800a602:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	0c1a      	lsrs	r2, r3, #16
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	4413      	add	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d007      	beq.n	800a626 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	021b      	lsls	r3, r3, #8
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	0a1b      	lsrs	r3, r3, #8
 800a620:	b2db      	uxtb	r3, r3
 800a622:	4313      	orrs	r3, r2
 800a624:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	b29b      	uxth	r3, r3
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3724      	adds	r7, #36	; 0x24
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b082      	sub	sp, #8
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800a642:	887b      	ldrh	r3, [r7, #2]
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7ff ff98 	bl	800a57c <lwip_standard_chksum>
 800a64c:	4603      	mov	r3, r0
 800a64e:	43db      	mvns	r3, r3
 800a650:	b29b      	uxth	r3, r3
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b086      	sub	sp, #24
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	613b      	str	r3, [r7, #16]
 800a66e:	e02b      	b.n	800a6c8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	895b      	ldrh	r3, [r3, #10]
 800a678:	4619      	mov	r1, r3
 800a67a:	4610      	mov	r0, r2
 800a67c:	f7ff ff7e 	bl	800a57c <lwip_standard_chksum>
 800a680:	4603      	mov	r3, r0
 800a682:	461a      	mov	r2, r3
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	4413      	add	r3, r2
 800a688:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	0c1a      	lsrs	r2, r3, #16
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	b29b      	uxth	r3, r3
 800a692:	4413      	add	r3, r2
 800a694:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	895b      	ldrh	r3, [r3, #10]
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00e      	beq.n	800a6c2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	bf0c      	ite	eq
 800a6aa:	2301      	moveq	r3, #1
 800a6ac:	2300      	movne	r3, #0
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	021b      	lsls	r3, r3, #8
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	0a1b      	lsrs	r3, r3, #8
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	613b      	str	r3, [r7, #16]
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1d0      	bne.n	800a670 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d007      	beq.n	800a6e4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	021b      	lsls	r3, r3, #8
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	0a1b      	lsrs	r3, r3, #8
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	43db      	mvns	r3, r3
 800a6ea:	b29b      	uxth	r3, r3
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a6fe:	f001 f9f7 	bl	800baf0 <mem_init>
  memp_init();
 800a702:	f001 fd21 	bl	800c148 <memp_init>
  pbuf_init();
  netif_init();
 800a706:	f001 fe1f 	bl	800c348 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a70a:	f008 f949 	bl	80129a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a70e:	f002 fe99 	bl	800d444 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a712:	f008 f8bb 	bl	801288c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a716:	bf00      	nop
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800a728:	4b33      	ldr	r3, [pc, #204]	; (800a7f8 <ip4_route+0xd8>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	60fb      	str	r3, [r7, #12]
 800a72e:	e036      	b.n	800a79e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d02b      	beq.n	800a798 <ip4_route+0x78>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a746:	089b      	lsrs	r3, r3, #2
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d022      	beq.n	800a798 <ip4_route+0x78>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3304      	adds	r3, #4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01d      	beq.n	800a798 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3304      	adds	r3, #4
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	405a      	eors	r2, r3
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	3308      	adds	r3, #8
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4013      	ands	r3, r2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	e038      	b.n	800a7ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b00      	cmp	r3, #0
 800a784:	d108      	bne.n	800a798 <ip4_route+0x78>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	330c      	adds	r3, #12
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	429a      	cmp	r2, r3
 800a792:	d101      	bne.n	800a798 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	e028      	b.n	800a7ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	60fb      	str	r3, [r7, #12]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1c5      	bne.n	800a730 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a7a4:	4b15      	ldr	r3, [pc, #84]	; (800a7fc <ip4_route+0xdc>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d01a      	beq.n	800a7e2 <ip4_route+0xc2>
 800a7ac:	4b13      	ldr	r3, [pc, #76]	; (800a7fc <ip4_route+0xdc>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7b4:	f003 0301 	and.w	r3, r3, #1
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d012      	beq.n	800a7e2 <ip4_route+0xc2>
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <ip4_route+0xdc>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00a      	beq.n	800a7e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800a7cc:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <ip4_route+0xdc>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d004      	beq.n	800a7e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b7f      	cmp	r3, #127	; 0x7f
 800a7e0:	d101      	bne.n	800a7e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	e001      	b.n	800a7ea <ip4_route+0xca>
  }

  return netif_default;
 800a7e6:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <ip4_route+0xdc>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3714      	adds	r7, #20
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	24008174 	.word	0x24008174
 800a7fc:	24008178 	.word	0x24008178

0800a800 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b00      	cmp	r3, #0
 800a816:	d01f      	beq.n	800a858 <ip4_input_accept+0x58>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3304      	adds	r3, #4
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d01a      	beq.n	800a858 <ip4_input_accept+0x58>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a822:	4b10      	ldr	r3, [pc, #64]	; (800a864 <ip4_input_accept+0x64>)
 800a824:	695a      	ldr	r2, [r3, #20]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3304      	adds	r3, #4
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d008      	beq.n	800a842 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a830:	4b0c      	ldr	r3, [pc, #48]	; (800a864 <ip4_input_accept+0x64>)
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	4618      	mov	r0, r3
 800a838:	f000 fa14 	bl	800ac64 <ip4_addr_isbroadcast_u32>
 800a83c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800a842:	2301      	movs	r3, #1
 800a844:	e009      	b.n	800a85a <ip4_input_accept+0x5a>
    }
#if LWIP_AUTOIP
    /* connections to link-local addresses must persist after changing
        the netif's address (RFC3927 ch. 1.9) */
    if (autoip_accept_packet(netif, ip4_current_dest_addr())) {
 800a846:	4908      	ldr	r1, [pc, #32]	; (800a868 <ip4_input_accept+0x68>)
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7fe fc32 	bl	80090b2 <autoip_accept_packet>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <ip4_input_accept+0x58>
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: LLA packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800a854:	2301      	movs	r3, #1
 800a856:	e000      	b.n	800a85a <ip4_input_accept+0x5a>
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	24005248 	.word	0x24005248
 800a868:	2400525c 	.word	0x2400525c

0800a86c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	091b      	lsrs	r3, r3, #4
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b04      	cmp	r3, #4
 800a886:	d004      	beq.n	800a892 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f002 fb4d 	bl	800cf28 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	e107      	b.n	800aaa2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	f003 030f 	and.w	r3, r3, #15
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	885b      	ldrh	r3, [r3, #2]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7fe fc1d 	bl	80090e8 <lwip_htons>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	891b      	ldrh	r3, [r3, #8]
 800a8b6:	89ba      	ldrh	r2, [r7, #12]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d204      	bcs.n	800a8c6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800a8bc:	89bb      	ldrh	r3, [r7, #12]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f002 f9ab 	bl	800cc1c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	895b      	ldrh	r3, [r3, #10]
 800a8ca:	89fa      	ldrh	r2, [r7, #14]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d807      	bhi.n	800a8e0 <ip4_input+0x74>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	891b      	ldrh	r3, [r3, #8]
 800a8d4:	89ba      	ldrh	r2, [r7, #12]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d802      	bhi.n	800a8e0 <ip4_input+0x74>
 800a8da:	89fb      	ldrh	r3, [r7, #14]
 800a8dc:	2b13      	cmp	r3, #19
 800a8de:	d804      	bhi.n	800a8ea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f002 fb21 	bl	800cf28 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	e0db      	b.n	800aaa2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	4a6f      	ldr	r2, [pc, #444]	; (800aaac <ip4_input+0x240>)
 800a8f0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	4a6d      	ldr	r2, [pc, #436]	; (800aaac <ip4_input+0x240>)
 800a8f8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a8fa:	4b6c      	ldr	r3, [pc, #432]	; (800aaac <ip4_input+0x240>)
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a902:	2be0      	cmp	r3, #224	; 0xe0
 800a904:	d112      	bne.n	800a92c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	d007      	beq.n	800a926 <ip4_input+0xba>
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	3304      	adds	r3, #4
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <ip4_input+0xba>
      netif = inp;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	613b      	str	r3, [r7, #16]
 800a924:	e02a      	b.n	800a97c <ip4_input+0x110>
    } else {
      netif = NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	613b      	str	r3, [r7, #16]
 800a92a:	e027      	b.n	800a97c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800a92c:	6838      	ldr	r0, [r7, #0]
 800a92e:	f7ff ff67 	bl	800a800 <ip4_input_accept>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <ip4_input+0xd2>
      netif = inp;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	613b      	str	r3, [r7, #16]
 800a93c:	e01e      	b.n	800a97c <ip4_input+0x110>
    } else {
      netif = NULL;
 800a93e:	2300      	movs	r3, #0
 800a940:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800a942:	4b5a      	ldr	r3, [pc, #360]	; (800aaac <ip4_input+0x240>)
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b7f      	cmp	r3, #127	; 0x7f
 800a94a:	d017      	beq.n	800a97c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800a94c:	4b58      	ldr	r3, [pc, #352]	; (800aab0 <ip4_input+0x244>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	613b      	str	r3, [r7, #16]
 800a952:	e00e      	b.n	800a972 <ip4_input+0x106>
          if (netif == inp) {
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d006      	beq.n	800a96a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800a95c:	6938      	ldr	r0, [r7, #16]
 800a95e:	f7ff ff4f 	bl	800a800 <ip4_input_accept>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d108      	bne.n	800a97a <ip4_input+0x10e>
 800a968:	e000      	b.n	800a96c <ip4_input+0x100>
            continue;
 800a96a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	613b      	str	r3, [r7, #16]
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1ed      	bne.n	800a954 <ip4_input+0xe8>
 800a978:	e000      	b.n	800a97c <ip4_input+0x110>
            break;
 800a97a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a97c:	4b4b      	ldr	r3, [pc, #300]	; (800aaac <ip4_input+0x240>)
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	4618      	mov	r0, r3
 800a984:	f000 f96e 	bl	800ac64 <ip4_addr_isbroadcast_u32>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d105      	bne.n	800a99a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a98e:	4b47      	ldr	r3, [pc, #284]	; (800aaac <ip4_input+0x240>)
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a996:	2be0      	cmp	r3, #224	; 0xe0
 800a998:	d104      	bne.n	800a9a4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f002 fac4 	bl	800cf28 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	e07e      	b.n	800aaa2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d104      	bne.n	800a9b4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f002 fabc 	bl	800cf28 <pbuf_free>
    return ERR_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e076      	b.n	800aaa2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	88db      	ldrh	r3, [r3, #6]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00b      	beq.n	800a9de <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fc92 	bl	800b2f0 <ip4_reass>
 800a9cc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <ip4_input+0x16c>
      return ERR_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	e064      	b.n	800aaa2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800a9de:	4a33      	ldr	r2, [pc, #204]	; (800aaac <ip4_input+0x240>)
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800a9e4:	4a31      	ldr	r2, [pc, #196]	; (800aaac <ip4_input+0x240>)
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800a9ea:	4a30      	ldr	r2, [pc, #192]	; (800aaac <ip4_input+0x240>)
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	f003 030f 	and.w	r3, r3, #15
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	4b2a      	ldr	r3, [pc, #168]	; (800aaac <ip4_input+0x240>)
 800aa02:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800aa04:	89fb      	ldrh	r3, [r7, #14]
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f002 fa07 	bl	800ce1c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	7a5b      	ldrb	r3, [r3, #9]
 800aa12:	2b11      	cmp	r3, #17
 800aa14:	d006      	beq.n	800aa24 <ip4_input+0x1b8>
 800aa16:	2b11      	cmp	r3, #17
 800aa18:	dc13      	bgt.n	800aa42 <ip4_input+0x1d6>
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d00c      	beq.n	800aa38 <ip4_input+0x1cc>
 800aa1e:	2b06      	cmp	r3, #6
 800aa20:	d005      	beq.n	800aa2e <ip4_input+0x1c2>
 800aa22:	e00e      	b.n	800aa42 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f008 f830 	bl	8012a8c <udp_input>
        break;
 800aa2c:	e026      	b.n	800aa7c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f004 f8a9 	bl	800eb88 <tcp_input>
        break;
 800aa36:	e021      	b.n	800aa7c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff fbec 	bl	800a218 <icmp_input>
        break;
 800aa40:	e01c      	b.n	800aa7c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800aa42:	4b1a      	ldr	r3, [pc, #104]	; (800aaac <ip4_input+0x240>)
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	6939      	ldr	r1, [r7, #16]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 f90b 	bl	800ac64 <ip4_addr_isbroadcast_u32>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10f      	bne.n	800aa74 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800aa54:	4b15      	ldr	r3, [pc, #84]	; (800aaac <ip4_input+0x240>)
 800aa56:	695b      	ldr	r3, [r3, #20]
 800aa58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800aa5c:	2be0      	cmp	r3, #224	; 0xe0
 800aa5e:	d009      	beq.n	800aa74 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800aa60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f002 fa4b 	bl	800cf02 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800aa6c:	2102      	movs	r1, #2
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff fcf0 	bl	800a454 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f002 fa57 	bl	800cf28 <pbuf_free>
        break;
 800aa7a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800aa7c:	4b0b      	ldr	r3, [pc, #44]	; (800aaac <ip4_input+0x240>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800aa82:	4b0a      	ldr	r3, [pc, #40]	; (800aaac <ip4_input+0x240>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800aa88:	4b08      	ldr	r3, [pc, #32]	; (800aaac <ip4_input+0x240>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800aa8e:	4b07      	ldr	r3, [pc, #28]	; (800aaac <ip4_input+0x240>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800aa94:	4b05      	ldr	r3, [pc, #20]	; (800aaac <ip4_input+0x240>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800aa9a:	4b04      	ldr	r3, [pc, #16]	; (800aaac <ip4_input+0x240>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	24005248 	.word	0x24005248
 800aab0:	24008174 	.word	0x24008174

0800aab4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08a      	sub	sp, #40	; 0x28
 800aab8:	af04      	add	r7, sp, #16
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d009      	beq.n	800aae0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <ip4_output_if+0x26>
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d102      	bne.n	800aae0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	3304      	adds	r3, #4
 800aade:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800aae0:	78fa      	ldrb	r2, [r7, #3]
 800aae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae4:	9302      	str	r3, [sp, #8]
 800aae6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aaea:	9301      	str	r3, [sp, #4]
 800aaec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	6979      	ldr	r1, [r7, #20]
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 f805 	bl	800ab08 <ip4_output_if_src>
 800aafe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3718      	adds	r7, #24
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	7b9b      	ldrb	r3, [r3, #14]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d006      	beq.n	800ab2c <ip4_output_if_src+0x24>
 800ab1e:	4b4b      	ldr	r3, [pc, #300]	; (800ac4c <ip4_output_if_src+0x144>)
 800ab20:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ab24:	494a      	ldr	r1, [pc, #296]	; (800ac50 <ip4_output_if_src+0x148>)
 800ab26:	484b      	ldr	r0, [pc, #300]	; (800ac54 <ip4_output_if_src+0x14c>)
 800ab28:	f008 f93e 	bl	8012da8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d060      	beq.n	800abf4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ab32:	2314      	movs	r3, #20
 800ab34:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ab36:	2114      	movs	r1, #20
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f002 f95f 	bl	800cdfc <pbuf_add_header>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ab44:	f06f 0301 	mvn.w	r3, #1
 800ab48:	e07c      	b.n	800ac44 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	895b      	ldrh	r3, [r3, #10]
 800ab54:	2b13      	cmp	r3, #19
 800ab56:	d806      	bhi.n	800ab66 <ip4_output_if_src+0x5e>
 800ab58:	4b3c      	ldr	r3, [pc, #240]	; (800ac4c <ip4_output_if_src+0x144>)
 800ab5a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ab5e:	493e      	ldr	r1, [pc, #248]	; (800ac58 <ip4_output_if_src+0x150>)
 800ab60:	483c      	ldr	r0, [pc, #240]	; (800ac54 <ip4_output_if_src+0x14c>)
 800ab62:	f008 f921 	bl	8012da8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	78fa      	ldrb	r2, [r7, #3]
 800ab6a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ab72:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ab7c:	8b7b      	ldrh	r3, [r7, #26]
 800ab7e:	089b      	lsrs	r3, r3, #2
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ab94:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	891b      	ldrh	r3, [r3, #8]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe faa4 	bl	80090e8 <lwip_htons>
 800aba0:	4603      	mov	r3, r0
 800aba2:	461a      	mov	r2, r3
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	2200      	movs	r2, #0
 800abac:	719a      	strb	r2, [r3, #6]
 800abae:	2200      	movs	r2, #0
 800abb0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800abb2:	4b2a      	ldr	r3, [pc, #168]	; (800ac5c <ip4_output_if_src+0x154>)
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fe fa96 	bl	80090e8 <lwip_htons>
 800abbc:	4603      	mov	r3, r0
 800abbe:	461a      	mov	r2, r3
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800abc4:	4b25      	ldr	r3, [pc, #148]	; (800ac5c <ip4_output_if_src+0x154>)
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	3301      	adds	r3, #1
 800abca:	b29a      	uxth	r2, r3
 800abcc:	4b23      	ldr	r3, [pc, #140]	; (800ac5c <ip4_output_if_src+0x154>)
 800abce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d104      	bne.n	800abe0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800abd6:	4b22      	ldr	r3, [pc, #136]	; (800ac60 <ip4_output_if_src+0x158>)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	60da      	str	r2, [r3, #12]
 800abde:	e003      	b.n	800abe8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	2200      	movs	r2, #0
 800abec:	729a      	strb	r2, [r3, #10]
 800abee:	2200      	movs	r2, #0
 800abf0:	72da      	strb	r2, [r3, #11]
 800abf2:	e00f      	b.n	800ac14 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	895b      	ldrh	r3, [r3, #10]
 800abf8:	2b13      	cmp	r3, #19
 800abfa:	d802      	bhi.n	800ac02 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800abfc:	f06f 0301 	mvn.w	r3, #1
 800ac00:	e020      	b.n	800ac44 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ac0e:	f107 0314 	add.w	r3, r7, #20
 800ac12:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00c      	beq.n	800ac36 <ip4_output_if_src+0x12e>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	891a      	ldrh	r2, [r3, #8]
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d906      	bls.n	800ac36 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 fd53 	bl	800b6d8 <ip4_frag>
 800ac32:	4603      	mov	r3, r0
 800ac34:	e006      	b.n	800ac44 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	68f9      	ldr	r1, [r7, #12]
 800ac3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac40:	4798      	blx	r3
 800ac42:	4603      	mov	r3, r0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3720      	adds	r7, #32
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	08014430 	.word	0x08014430
 800ac50:	08014488 	.word	0x08014488
 800ac54:	08014494 	.word	0x08014494
 800ac58:	080144bc 	.word	0x080144bc
 800ac5c:	24005260 	.word	0x24005260
 800ac60:	08016b8c 	.word	0x08016b8c

0800ac64 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac78:	d002      	beq.n	800ac80 <ip4_addr_isbroadcast_u32+0x1c>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d101      	bne.n	800ac84 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e02a      	b.n	800acda <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac8a:	f003 0302 	and.w	r3, r3, #2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d101      	bne.n	800ac96 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	e021      	b.n	800acda <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	3304      	adds	r3, #4
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d101      	bne.n	800aca6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	e019      	b.n	800acda <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	3304      	adds	r3, #4
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	405a      	eors	r2, r3
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	3308      	adds	r3, #8
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4013      	ands	r3, r2
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10d      	bne.n	800acd8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	3308      	adds	r3, #8
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	43da      	mvns	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	3308      	adds	r3, #8
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d101      	bne.n	800acd8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e000      	b.n	800acda <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800acd8:	2300      	movs	r3, #0
  }
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
	...

0800ace8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800acee:	2300      	movs	r3, #0
 800acf0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800acf2:	4b12      	ldr	r3, [pc, #72]	; (800ad3c <ip_reass_tmr+0x54>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800acf8:	e018      	b.n	800ad2c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	7fdb      	ldrb	r3, [r3, #31]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00b      	beq.n	800ad1a <ip_reass_tmr+0x32>
      r->timer--;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	7fdb      	ldrb	r3, [r3, #31]
 800ad06:	3b01      	subs	r3, #1
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	e008      	b.n	800ad2c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ad24:	68b9      	ldr	r1, [r7, #8]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f80a 	bl	800ad40 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1e3      	bne.n	800acfa <ip_reass_tmr+0x12>
    }
  }
}
 800ad32:	bf00      	nop
 800ad34:	bf00      	nop
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	24005264 	.word	0x24005264

0800ad40 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b088      	sub	sp, #32
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d105      	bne.n	800ad62 <ip_reass_free_complete_datagram+0x22>
 800ad56:	4b45      	ldr	r3, [pc, #276]	; (800ae6c <ip_reass_free_complete_datagram+0x12c>)
 800ad58:	22ab      	movs	r2, #171	; 0xab
 800ad5a:	4945      	ldr	r1, [pc, #276]	; (800ae70 <ip_reass_free_complete_datagram+0x130>)
 800ad5c:	4845      	ldr	r0, [pc, #276]	; (800ae74 <ip_reass_free_complete_datagram+0x134>)
 800ad5e:	f008 f823 	bl	8012da8 <iprintf>
  if (prev != NULL) {
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00a      	beq.n	800ad7e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d005      	beq.n	800ad7e <ip_reass_free_complete_datagram+0x3e>
 800ad72:	4b3e      	ldr	r3, [pc, #248]	; (800ae6c <ip_reass_free_complete_datagram+0x12c>)
 800ad74:	22ad      	movs	r2, #173	; 0xad
 800ad76:	4940      	ldr	r1, [pc, #256]	; (800ae78 <ip_reass_free_complete_datagram+0x138>)
 800ad78:	483e      	ldr	r0, [pc, #248]	; (800ae74 <ip_reass_free_complete_datagram+0x134>)
 800ad7a:	f008 f815 	bl	8012da8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	889b      	ldrh	r3, [r3, #4]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d12a      	bne.n	800ade6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	6858      	ldr	r0, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3308      	adds	r3, #8
 800ada6:	2214      	movs	r2, #20
 800ada8:	4619      	mov	r1, r3
 800adaa:	f007 ffe7 	bl	8012d7c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800adae:	2101      	movs	r1, #1
 800adb0:	69b8      	ldr	r0, [r7, #24]
 800adb2:	f7ff fb5f 	bl	800a474 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800adb6:	69b8      	ldr	r0, [r7, #24]
 800adb8:	f002 f93e 	bl	800d038 <pbuf_clen>
 800adbc:	4603      	mov	r3, r0
 800adbe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800adc0:	8bfa      	ldrh	r2, [r7, #30]
 800adc2:	8a7b      	ldrh	r3, [r7, #18]
 800adc4:	4413      	add	r3, r2
 800adc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adca:	db05      	blt.n	800add8 <ip_reass_free_complete_datagram+0x98>
 800adcc:	4b27      	ldr	r3, [pc, #156]	; (800ae6c <ip_reass_free_complete_datagram+0x12c>)
 800adce:	22bc      	movs	r2, #188	; 0xbc
 800add0:	492a      	ldr	r1, [pc, #168]	; (800ae7c <ip_reass_free_complete_datagram+0x13c>)
 800add2:	4828      	ldr	r0, [pc, #160]	; (800ae74 <ip_reass_free_complete_datagram+0x134>)
 800add4:	f007 ffe8 	bl	8012da8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800add8:	8bfa      	ldrh	r2, [r7, #30]
 800adda:	8a7b      	ldrh	r3, [r7, #18]
 800addc:	4413      	add	r3, r2
 800adde:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ade0:	69b8      	ldr	r0, [r7, #24]
 800ade2:	f002 f8a1 	bl	800cf28 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800adec:	e01f      	b.n	800ae2e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f002 f91a 	bl	800d038 <pbuf_clen>
 800ae04:	4603      	mov	r3, r0
 800ae06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ae08:	8bfa      	ldrh	r2, [r7, #30]
 800ae0a:	8a7b      	ldrh	r3, [r7, #18]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae12:	db05      	blt.n	800ae20 <ip_reass_free_complete_datagram+0xe0>
 800ae14:	4b15      	ldr	r3, [pc, #84]	; (800ae6c <ip_reass_free_complete_datagram+0x12c>)
 800ae16:	22cc      	movs	r2, #204	; 0xcc
 800ae18:	4918      	ldr	r1, [pc, #96]	; (800ae7c <ip_reass_free_complete_datagram+0x13c>)
 800ae1a:	4816      	ldr	r0, [pc, #88]	; (800ae74 <ip_reass_free_complete_datagram+0x134>)
 800ae1c:	f007 ffc4 	bl	8012da8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ae20:	8bfa      	ldrh	r2, [r7, #30]
 800ae22:	8a7b      	ldrh	r3, [r7, #18]
 800ae24:	4413      	add	r3, r2
 800ae26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f002 f87d 	bl	800cf28 <pbuf_free>
  while (p != NULL) {
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1dc      	bne.n	800adee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f8c2 	bl	800afc0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ae3c:	4b10      	ldr	r3, [pc, #64]	; (800ae80 <ip_reass_free_complete_datagram+0x140>)
 800ae3e:	881b      	ldrh	r3, [r3, #0]
 800ae40:	8bfa      	ldrh	r2, [r7, #30]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d905      	bls.n	800ae52 <ip_reass_free_complete_datagram+0x112>
 800ae46:	4b09      	ldr	r3, [pc, #36]	; (800ae6c <ip_reass_free_complete_datagram+0x12c>)
 800ae48:	22d2      	movs	r2, #210	; 0xd2
 800ae4a:	490e      	ldr	r1, [pc, #56]	; (800ae84 <ip_reass_free_complete_datagram+0x144>)
 800ae4c:	4809      	ldr	r0, [pc, #36]	; (800ae74 <ip_reass_free_complete_datagram+0x134>)
 800ae4e:	f007 ffab 	bl	8012da8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ae52:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <ip_reass_free_complete_datagram+0x140>)
 800ae54:	881a      	ldrh	r2, [r3, #0]
 800ae56:	8bfb      	ldrh	r3, [r7, #30]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	4b08      	ldr	r3, [pc, #32]	; (800ae80 <ip_reass_free_complete_datagram+0x140>)
 800ae5e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ae60:	8bfb      	ldrh	r3, [r7, #30]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3720      	adds	r7, #32
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	080144ec 	.word	0x080144ec
 800ae70:	08014548 	.word	0x08014548
 800ae74:	08014554 	.word	0x08014554
 800ae78:	0801457c 	.word	0x0801457c
 800ae7c:	08014590 	.word	0x08014590
 800ae80:	24005268 	.word	0x24005268
 800ae84:	080145b0 	.word	0x080145b0

0800ae88 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08a      	sub	sp, #40	; 0x28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ae92:	2300      	movs	r3, #0
 800ae94:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ae96:	2300      	movs	r3, #0
 800ae98:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800aea6:	4b28      	ldr	r3, [pc, #160]	; (800af48 <ip_reass_remove_oldest_datagram+0xc0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800aeac:	e030      	b.n	800af10 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	695a      	ldr	r2, [r3, #20]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d10c      	bne.n	800aed4 <ip_reass_remove_oldest_datagram+0x4c>
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	699a      	ldr	r2, [r3, #24]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d106      	bne.n	800aed4 <ip_reass_remove_oldest_datagram+0x4c>
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	899a      	ldrh	r2, [r3, #12]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	889b      	ldrh	r3, [r3, #4]
 800aece:	b29b      	uxth	r3, r3
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d014      	beq.n	800aefe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	3301      	adds	r3, #1
 800aed8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d104      	bne.n	800aeea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	61bb      	str	r3, [r7, #24]
 800aee8:	e009      	b.n	800aefe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeec:	7fda      	ldrb	r2, [r3, #31]
 800aeee:	6a3b      	ldr	r3, [r7, #32]
 800aef0:	7fdb      	ldrb	r3, [r3, #31]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d803      	bhi.n	800aefe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800af0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1cb      	bne.n	800aeae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d008      	beq.n	800af2e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800af1c:	69b9      	ldr	r1, [r7, #24]
 800af1e:	6a38      	ldr	r0, [r7, #32]
 800af20:	f7ff ff0e 	bl	800ad40 <ip_reass_free_complete_datagram>
 800af24:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	4413      	add	r3, r2
 800af2c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	da02      	bge.n	800af3c <ip_reass_remove_oldest_datagram+0xb4>
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	dcac      	bgt.n	800ae96 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800af3c:	697b      	ldr	r3, [r7, #20]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3728      	adds	r7, #40	; 0x28
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	24005264 	.word	0x24005264

0800af4c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800af56:	2004      	movs	r0, #4
 800af58:	f001 f95c 	bl	800c214 <memp_malloc>
 800af5c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d110      	bne.n	800af86 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7ff ff8e 	bl	800ae88 <ip_reass_remove_oldest_datagram>
 800af6c:	4602      	mov	r2, r0
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	4293      	cmp	r3, r2
 800af72:	dc03      	bgt.n	800af7c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800af74:	2004      	movs	r0, #4
 800af76:	f001 f94d 	bl	800c214 <memp_malloc>
 800af7a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800af82:	2300      	movs	r3, #0
 800af84:	e016      	b.n	800afb4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800af86:	2220      	movs	r2, #32
 800af88:	2100      	movs	r1, #0
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f007 ff04 	bl	8012d98 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	220f      	movs	r2, #15
 800af94:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800af96:	4b09      	ldr	r3, [pc, #36]	; (800afbc <ip_reass_enqueue_new_datagram+0x70>)
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800af9e:	4a07      	ldr	r2, [pc, #28]	; (800afbc <ip_reass_enqueue_new_datagram+0x70>)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3308      	adds	r3, #8
 800afa8:	2214      	movs	r2, #20
 800afaa:	6879      	ldr	r1, [r7, #4]
 800afac:	4618      	mov	r0, r3
 800afae:	f007 fee5 	bl	8012d7c <memcpy>
  return ipr;
 800afb2:	68fb      	ldr	r3, [r7, #12]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	24005264 	.word	0x24005264

0800afc0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800afca:	4b10      	ldr	r3, [pc, #64]	; (800b00c <ip_reass_dequeue_datagram+0x4c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d104      	bne.n	800afde <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a0c      	ldr	r2, [pc, #48]	; (800b00c <ip_reass_dequeue_datagram+0x4c>)
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	e00d      	b.n	800affa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d106      	bne.n	800aff2 <ip_reass_dequeue_datagram+0x32>
 800afe4:	4b0a      	ldr	r3, [pc, #40]	; (800b010 <ip_reass_dequeue_datagram+0x50>)
 800afe6:	f240 1245 	movw	r2, #325	; 0x145
 800afea:	490a      	ldr	r1, [pc, #40]	; (800b014 <ip_reass_dequeue_datagram+0x54>)
 800afec:	480a      	ldr	r0, [pc, #40]	; (800b018 <ip_reass_dequeue_datagram+0x58>)
 800afee:	f007 fedb 	bl	8012da8 <iprintf>
    prev->next = ipr->next;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800affa:	6879      	ldr	r1, [r7, #4]
 800affc:	2004      	movs	r0, #4
 800affe:	f001 f979 	bl	800c2f4 <memp_free>
}
 800b002:	bf00      	nop
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	24005264 	.word	0x24005264
 800b010:	080144ec 	.word	0x080144ec
 800b014:	080145d4 	.word	0x080145d4
 800b018:	08014554 	.word	0x08014554

0800b01c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08c      	sub	sp, #48	; 0x30
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800b028:	2300      	movs	r3, #0
 800b02a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800b02c:	2301      	movs	r3, #1
 800b02e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	885b      	ldrh	r3, [r3, #2]
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fe f853 	bl	80090e8 <lwip_htons>
 800b042:	4603      	mov	r3, r0
 800b044:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	f003 030f 	and.w	r3, r3, #15
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800b054:	7e7b      	ldrb	r3, [r7, #25]
 800b056:	b29b      	uxth	r3, r3
 800b058:	8b7a      	ldrh	r2, [r7, #26]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d202      	bcs.n	800b064 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b05e:	f04f 33ff 	mov.w	r3, #4294967295
 800b062:	e135      	b.n	800b2d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800b064:	7e7b      	ldrb	r3, [r7, #25]
 800b066:	b29b      	uxth	r3, r3
 800b068:	8b7a      	ldrh	r2, [r7, #26]
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	88db      	ldrh	r3, [r3, #6]
 800b072:	b29b      	uxth	r3, r3
 800b074:	4618      	mov	r0, r3
 800b076:	f7fe f837 	bl	80090e8 <lwip_htons>
 800b07a:	4603      	mov	r3, r0
 800b07c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b080:	b29b      	uxth	r3, r3
 800b082:	00db      	lsls	r3, r3, #3
 800b084:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08e:	2200      	movs	r2, #0
 800b090:	701a      	strb	r2, [r3, #0]
 800b092:	2200      	movs	r2, #0
 800b094:	705a      	strb	r2, [r3, #1]
 800b096:	2200      	movs	r2, #0
 800b098:	709a      	strb	r2, [r3, #2]
 800b09a:	2200      	movs	r2, #0
 800b09c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800b09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a0:	8afa      	ldrh	r2, [r7, #22]
 800b0a2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800b0a4:	8afa      	ldrh	r2, [r7, #22]
 800b0a6:	8b7b      	ldrh	r3, [r7, #26]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800b0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b2:	88db      	ldrh	r3, [r3, #6]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	8afa      	ldrh	r2, [r7, #22]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d902      	bls.n	800b0c2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c0:	e106      	b.n	800b2d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c8:	e068      	b.n	800b19c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800b0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d2:	889b      	ldrh	r3, [r3, #4]
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	889b      	ldrh	r3, [r3, #4]
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d235      	bcs.n	800b14c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d020      	beq.n	800b12e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800b0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ee:	889b      	ldrh	r3, [r3, #4]
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f4:	88db      	ldrh	r3, [r3, #6]
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d307      	bcc.n	800b10c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800b0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fe:	88db      	ldrh	r3, [r3, #6]
 800b100:	b29a      	uxth	r2, r3
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	889b      	ldrh	r3, [r3, #4]
 800b106:	b29b      	uxth	r3, r3
 800b108:	429a      	cmp	r2, r3
 800b10a:	d902      	bls.n	800b112 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b10c:	f04f 33ff 	mov.w	r3, #4294967295
 800b110:	e0de      	b.n	800b2d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11a:	88db      	ldrh	r3, [r3, #6]
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b120:	889b      	ldrh	r3, [r3, #4]
 800b122:	b29b      	uxth	r3, r3
 800b124:	429a      	cmp	r2, r3
 800b126:	d03d      	beq.n	800b1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800b12c:	e03a      	b.n	800b1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800b12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b130:	88db      	ldrh	r3, [r3, #6]
 800b132:	b29a      	uxth	r2, r3
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	889b      	ldrh	r3, [r3, #4]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d902      	bls.n	800b144 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b13e:	f04f 33ff 	mov.w	r3, #4294967295
 800b142:	e0c5      	b.n	800b2d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	605a      	str	r2, [r3, #4]
      break;
 800b14a:	e02b      	b.n	800b1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800b14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14e:	889b      	ldrh	r3, [r3, #4]
 800b150:	b29a      	uxth	r2, r3
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	889b      	ldrh	r3, [r3, #4]
 800b156:	b29b      	uxth	r3, r3
 800b158:	429a      	cmp	r2, r3
 800b15a:	d102      	bne.n	800b162 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b15c:	f04f 33ff 	mov.w	r3, #4294967295
 800b160:	e0b6      	b.n	800b2d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800b162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b164:	889b      	ldrh	r3, [r3, #4]
 800b166:	b29a      	uxth	r2, r3
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	88db      	ldrh	r3, [r3, #6]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	429a      	cmp	r2, r3
 800b170:	d202      	bcs.n	800b178 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b172:	f04f 33ff 	mov.w	r3, #4294967295
 800b176:	e0ab      	b.n	800b2d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d009      	beq.n	800b192 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b180:	88db      	ldrh	r3, [r3, #6]
 800b182:	b29a      	uxth	r2, r3
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	889b      	ldrh	r3, [r3, #4]
 800b188:	b29b      	uxth	r3, r3
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d001      	beq.n	800b192 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d193      	bne.n	800b0ca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800b1a2:	e000      	b.n	800b1a6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800b1a4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d12d      	bne.n	800b208 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d01c      	beq.n	800b1ec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b4:	88db      	ldrh	r3, [r3, #6]
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ba:	889b      	ldrh	r3, [r3, #4]
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d906      	bls.n	800b1d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800b1c2:	4b45      	ldr	r3, [pc, #276]	; (800b2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b1c4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800b1c8:	4944      	ldr	r1, [pc, #272]	; (800b2dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800b1ca:	4845      	ldr	r0, [pc, #276]	; (800b2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b1cc:	f007 fdec 	bl	8012da8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	68ba      	ldr	r2, [r7, #8]
 800b1d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	88db      	ldrh	r3, [r3, #6]
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1de:	889b      	ldrh	r3, [r3, #4]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d010      	beq.n	800b208 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	623b      	str	r3, [r7, #32]
 800b1ea:	e00d      	b.n	800b208 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d006      	beq.n	800b202 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800b1f4:	4b38      	ldr	r3, [pc, #224]	; (800b2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b1f6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800b1fa:	493a      	ldr	r1, [pc, #232]	; (800b2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800b1fc:	4838      	ldr	r0, [pc, #224]	; (800b2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b1fe:	f007 fdd3 	bl	8012da8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d105      	bne.n	800b21a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	7f9b      	ldrb	r3, [r3, #30]
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b00      	cmp	r3, #0
 800b218:	d059      	beq.n	800b2ce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d04f      	beq.n	800b2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d006      	beq.n	800b236 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	889b      	ldrh	r3, [r3, #4]
 800b230:	b29b      	uxth	r3, r3
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	623b      	str	r3, [r7, #32]
 800b23a:	e041      	b.n	800b2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800b23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800b246:	e012      	b.n	800b26e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b250:	88db      	ldrh	r3, [r3, #6]
 800b252:	b29a      	uxth	r2, r3
 800b254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b256:	889b      	ldrh	r3, [r3, #4]
 800b258:	b29b      	uxth	r3, r3
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d002      	beq.n	800b264 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	623b      	str	r3, [r7, #32]
            break;
 800b262:	e007      	b.n	800b274 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800b268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1e9      	bne.n	800b248 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d022      	beq.n	800b2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800b282:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b284:	f240 12df 	movw	r2, #479	; 0x1df
 800b288:	4917      	ldr	r1, [pc, #92]	; (800b2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b28a:	4815      	ldr	r0, [pc, #84]	; (800b2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b28c:	f007 fd8c 	bl	8012da8 <iprintf>
          LWIP_ASSERT("sanity check",
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b298:	429a      	cmp	r2, r3
 800b29a:	d106      	bne.n	800b2aa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800b29c:	4b0e      	ldr	r3, [pc, #56]	; (800b2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b29e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b2a2:	4911      	ldr	r1, [pc, #68]	; (800b2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b2a4:	480e      	ldr	r0, [pc, #56]	; (800b2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b2a6:	f007 fd7f 	bl	8012da8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800b2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d006      	beq.n	800b2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800b2b2:	4b09      	ldr	r3, [pc, #36]	; (800b2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b2b4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800b2b8:	490c      	ldr	r1, [pc, #48]	; (800b2ec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800b2ba:	4809      	ldr	r0, [pc, #36]	; (800b2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b2bc:	f007 fd74 	bl	8012da8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800b2c0:	6a3b      	ldr	r3, [r7, #32]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	bf14      	ite	ne
 800b2c6:	2301      	movne	r3, #1
 800b2c8:	2300      	moveq	r3, #0
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	e000      	b.n	800b2d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3730      	adds	r7, #48	; 0x30
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	080144ec 	.word	0x080144ec
 800b2dc:	080145f0 	.word	0x080145f0
 800b2e0:	08014554 	.word	0x08014554
 800b2e4:	08014610 	.word	0x08014610
 800b2e8:	08014648 	.word	0x08014648
 800b2ec:	08014658 	.word	0x08014658

0800b2f0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b08e      	sub	sp, #56	; 0x38
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800b2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	f003 030f 	and.w	r3, r3, #15
 800b306:	b2db      	uxtb	r3, r3
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	2b14      	cmp	r3, #20
 800b30e:	f040 8171 	bne.w	800b5f4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800b312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b314:	88db      	ldrh	r3, [r3, #6]
 800b316:	b29b      	uxth	r3, r3
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fd fee5 	bl	80090e8 <lwip_htons>
 800b31e:	4603      	mov	r3, r0
 800b320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b324:	b29b      	uxth	r3, r3
 800b326:	00db      	lsls	r3, r3, #3
 800b328:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800b32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32c:	885b      	ldrh	r3, [r3, #2]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	4618      	mov	r0, r3
 800b332:	f7fd fed9 	bl	80090e8 <lwip_htons>
 800b336:	4603      	mov	r3, r0
 800b338:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	f003 030f 	and.w	r3, r3, #15
 800b342:	b2db      	uxtb	r3, r3
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800b34a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b34e:	b29b      	uxth	r3, r3
 800b350:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b352:	429a      	cmp	r2, r3
 800b354:	f0c0 8150 	bcc.w	800b5f8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800b358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f001 fe67 	bl	800d038 <pbuf_clen>
 800b36a:	4603      	mov	r3, r0
 800b36c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b36e:	4b8c      	ldr	r3, [pc, #560]	; (800b5a0 <ip4_reass+0x2b0>)
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	461a      	mov	r2, r3
 800b374:	8c3b      	ldrh	r3, [r7, #32]
 800b376:	4413      	add	r3, r2
 800b378:	2b0a      	cmp	r3, #10
 800b37a:	dd10      	ble.n	800b39e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b37c:	8c3b      	ldrh	r3, [r7, #32]
 800b37e:	4619      	mov	r1, r3
 800b380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b382:	f7ff fd81 	bl	800ae88 <ip_reass_remove_oldest_datagram>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f000 8137 	beq.w	800b5fc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800b38e:	4b84      	ldr	r3, [pc, #528]	; (800b5a0 <ip4_reass+0x2b0>)
 800b390:	881b      	ldrh	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	8c3b      	ldrh	r3, [r7, #32]
 800b396:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b398:	2b0a      	cmp	r3, #10
 800b39a:	f300 812f 	bgt.w	800b5fc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b39e:	4b81      	ldr	r3, [pc, #516]	; (800b5a4 <ip4_reass+0x2b4>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	633b      	str	r3, [r7, #48]	; 0x30
 800b3a4:	e015      	b.n	800b3d2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a8:	695a      	ldr	r2, [r3, #20]
 800b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d10c      	bne.n	800b3cc <ip4_reass+0xdc>
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	699a      	ldr	r2, [r3, #24]
 800b3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d106      	bne.n	800b3cc <ip4_reass+0xdc>
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	899a      	ldrh	r2, [r3, #12]
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	889b      	ldrh	r3, [r3, #4]
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d006      	beq.n	800b3da <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	633b      	str	r3, [r7, #48]	; 0x30
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1e6      	bne.n	800b3a6 <ip4_reass+0xb6>
 800b3d8:	e000      	b.n	800b3dc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800b3da:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d109      	bne.n	800b3f6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800b3e2:	8c3b      	ldrh	r3, [r7, #32]
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3e8:	f7ff fdb0 	bl	800af4c <ip_reass_enqueue_new_datagram>
 800b3ec:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d11c      	bne.n	800b42e <ip4_reass+0x13e>
      goto nullreturn;
 800b3f4:	e105      	b.n	800b602 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	88db      	ldrh	r3, [r3, #6]
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fd fe73 	bl	80090e8 <lwip_htons>
 800b402:	4603      	mov	r3, r0
 800b404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d110      	bne.n	800b42e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800b40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40e:	89db      	ldrh	r3, [r3, #14]
 800b410:	4618      	mov	r0, r3
 800b412:	f7fd fe69 	bl	80090e8 <lwip_htons>
 800b416:	4603      	mov	r3, r0
 800b418:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d006      	beq.n	800b42e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	3308      	adds	r3, #8
 800b424:	2214      	movs	r2, #20
 800b426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b428:	4618      	mov	r0, r3
 800b42a:	f007 fca7 	bl	8012d7c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b430:	88db      	ldrh	r3, [r3, #6]
 800b432:	b29b      	uxth	r3, r3
 800b434:	f003 0320 	and.w	r3, r3, #32
 800b438:	2b00      	cmp	r3, #0
 800b43a:	bf0c      	ite	eq
 800b43c:	2301      	moveq	r3, #1
 800b43e:	2300      	movne	r3, #0
 800b440:	b2db      	uxtb	r3, r3
 800b442:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00e      	beq.n	800b468 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800b44a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b44c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b44e:	4413      	add	r3, r2
 800b450:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800b452:	8b7a      	ldrh	r2, [r7, #26]
 800b454:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b456:	429a      	cmp	r2, r3
 800b458:	f0c0 80a0 	bcc.w	800b59c <ip4_reass+0x2ac>
 800b45c:	8b7b      	ldrh	r3, [r7, #26]
 800b45e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800b462:	4293      	cmp	r3, r2
 800b464:	f200 809a 	bhi.w	800b59c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800b468:	69fa      	ldr	r2, [r7, #28]
 800b46a:	6879      	ldr	r1, [r7, #4]
 800b46c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b46e:	f7ff fdd5 	bl	800b01c <ip_reass_chain_frag_into_datagram_and_validate>
 800b472:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b47a:	f000 809b 	beq.w	800b5b4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800b47e:	4b48      	ldr	r3, [pc, #288]	; (800b5a0 <ip4_reass+0x2b0>)
 800b480:	881a      	ldrh	r2, [r3, #0]
 800b482:	8c3b      	ldrh	r3, [r7, #32]
 800b484:	4413      	add	r3, r2
 800b486:	b29a      	uxth	r2, r3
 800b488:	4b45      	ldr	r3, [pc, #276]	; (800b5a0 <ip4_reass+0x2b0>)
 800b48a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00d      	beq.n	800b4ae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800b492:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b496:	4413      	add	r3, r2
 800b498:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800b49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49c:	8a7a      	ldrh	r2, [r7, #18]
 800b49e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	7f9b      	ldrb	r3, [r3, #30]
 800b4a4:	f043 0301 	orr.w	r3, r3, #1
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d171      	bne.n	800b598 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b6:	8b9b      	ldrh	r3, [r3, #28]
 800b4b8:	3314      	adds	r3, #20
 800b4ba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	3308      	adds	r3, #8
 800b4d2:	2214      	movs	r2, #20
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4d8:	f007 fc50 	bl	8012d7c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800b4dc:	8a3b      	ldrh	r3, [r7, #16]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fd fe02 	bl	80090e8 <lwip_htons>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800b4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	719a      	strb	r2, [r3, #6]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	729a      	strb	r2, [r3, #10]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800b506:	e00d      	b.n	800b524 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800b508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800b50e:	2114      	movs	r1, #20
 800b510:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b512:	f001 fc83 	bl	800ce1c <pbuf_remove_header>
      pbuf_cat(p, r);
 800b516:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f001 fdc7 	bl	800d0ac <pbuf_cat>
      r = iprh->next_pbuf;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800b524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1ee      	bne.n	800b508 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800b52a:	4b1e      	ldr	r3, [pc, #120]	; (800b5a4 <ip4_reass+0x2b4>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b530:	429a      	cmp	r2, r3
 800b532:	d102      	bne.n	800b53a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800b534:	2300      	movs	r3, #0
 800b536:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b538:	e010      	b.n	800b55c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b53a:	4b1a      	ldr	r3, [pc, #104]	; (800b5a4 <ip4_reass+0x2b4>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b540:	e007      	b.n	800b552 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b548:	429a      	cmp	r2, r3
 800b54a:	d006      	beq.n	800b55a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1f4      	bne.n	800b542 <ip4_reass+0x252>
 800b558:	e000      	b.n	800b55c <ip4_reass+0x26c>
          break;
 800b55a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800b55c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b55e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b560:	f7ff fd2e 	bl	800afc0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f001 fd67 	bl	800d038 <pbuf_clen>
 800b56a:	4603      	mov	r3, r0
 800b56c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800b56e:	4b0c      	ldr	r3, [pc, #48]	; (800b5a0 <ip4_reass+0x2b0>)
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	8c3a      	ldrh	r2, [r7, #32]
 800b574:	429a      	cmp	r2, r3
 800b576:	d906      	bls.n	800b586 <ip4_reass+0x296>
 800b578:	4b0b      	ldr	r3, [pc, #44]	; (800b5a8 <ip4_reass+0x2b8>)
 800b57a:	f240 229b 	movw	r2, #667	; 0x29b
 800b57e:	490b      	ldr	r1, [pc, #44]	; (800b5ac <ip4_reass+0x2bc>)
 800b580:	480b      	ldr	r0, [pc, #44]	; (800b5b0 <ip4_reass+0x2c0>)
 800b582:	f007 fc11 	bl	8012da8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800b586:	4b06      	ldr	r3, [pc, #24]	; (800b5a0 <ip4_reass+0x2b0>)
 800b588:	881a      	ldrh	r2, [r3, #0]
 800b58a:	8c3b      	ldrh	r3, [r7, #32]
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	b29a      	uxth	r2, r3
 800b590:	4b03      	ldr	r3, [pc, #12]	; (800b5a0 <ip4_reass+0x2b0>)
 800b592:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	e038      	b.n	800b60a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800b598:	2300      	movs	r3, #0
 800b59a:	e036      	b.n	800b60a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800b59c:	bf00      	nop
 800b59e:	e00a      	b.n	800b5b6 <ip4_reass+0x2c6>
 800b5a0:	24005268 	.word	0x24005268
 800b5a4:	24005264 	.word	0x24005264
 800b5a8:	080144ec 	.word	0x080144ec
 800b5ac:	0801467c 	.word	0x0801467c
 800b5b0:	08014554 	.word	0x08014554
    goto nullreturn_ipr;
 800b5b4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d106      	bne.n	800b5ca <ip4_reass+0x2da>
 800b5bc:	4b15      	ldr	r3, [pc, #84]	; (800b614 <ip4_reass+0x324>)
 800b5be:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800b5c2:	4915      	ldr	r1, [pc, #84]	; (800b618 <ip4_reass+0x328>)
 800b5c4:	4815      	ldr	r0, [pc, #84]	; (800b61c <ip4_reass+0x32c>)
 800b5c6:	f007 fbef 	bl	8012da8 <iprintf>
  if (ipr->p == NULL) {
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d116      	bne.n	800b600 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800b5d2:	4b13      	ldr	r3, [pc, #76]	; (800b620 <ip4_reass+0x330>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d006      	beq.n	800b5ea <ip4_reass+0x2fa>
 800b5dc:	4b0d      	ldr	r3, [pc, #52]	; (800b614 <ip4_reass+0x324>)
 800b5de:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b5e2:	4910      	ldr	r1, [pc, #64]	; (800b624 <ip4_reass+0x334>)
 800b5e4:	480d      	ldr	r0, [pc, #52]	; (800b61c <ip4_reass+0x32c>)
 800b5e6:	f007 fbdf 	bl	8012da8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5ee:	f7ff fce7 	bl	800afc0 <ip_reass_dequeue_datagram>
 800b5f2:	e006      	b.n	800b602 <ip4_reass+0x312>
    goto nullreturn;
 800b5f4:	bf00      	nop
 800b5f6:	e004      	b.n	800b602 <ip4_reass+0x312>
    goto nullreturn;
 800b5f8:	bf00      	nop
 800b5fa:	e002      	b.n	800b602 <ip4_reass+0x312>
      goto nullreturn;
 800b5fc:	bf00      	nop
 800b5fe:	e000      	b.n	800b602 <ip4_reass+0x312>
  }

nullreturn:
 800b600:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f001 fc90 	bl	800cf28 <pbuf_free>
  return NULL;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3738      	adds	r7, #56	; 0x38
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	080144ec 	.word	0x080144ec
 800b618:	08014698 	.word	0x08014698
 800b61c:	08014554 	.word	0x08014554
 800b620:	24005264 	.word	0x24005264
 800b624:	080146a4 	.word	0x080146a4

0800b628 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800b62c:	2005      	movs	r0, #5
 800b62e:	f000 fdf1 	bl	800c214 <memp_malloc>
 800b632:	4603      	mov	r3, r0
}
 800b634:	4618      	mov	r0, r3
 800b636:	bd80      	pop	{r7, pc}

0800b638 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d106      	bne.n	800b654 <ip_frag_free_pbuf_custom_ref+0x1c>
 800b646:	4b07      	ldr	r3, [pc, #28]	; (800b664 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800b648:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800b64c:	4906      	ldr	r1, [pc, #24]	; (800b668 <ip_frag_free_pbuf_custom_ref+0x30>)
 800b64e:	4807      	ldr	r0, [pc, #28]	; (800b66c <ip_frag_free_pbuf_custom_ref+0x34>)
 800b650:	f007 fbaa 	bl	8012da8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800b654:	6879      	ldr	r1, [r7, #4]
 800b656:	2005      	movs	r0, #5
 800b658:	f000 fe4c 	bl	800c2f4 <memp_free>
}
 800b65c:	bf00      	nop
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	080144ec 	.word	0x080144ec
 800b668:	080146c4 	.word	0x080146c4
 800b66c:	08014554 	.word	0x08014554

0800b670 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d106      	bne.n	800b690 <ipfrag_free_pbuf_custom+0x20>
 800b682:	4b11      	ldr	r3, [pc, #68]	; (800b6c8 <ipfrag_free_pbuf_custom+0x58>)
 800b684:	f240 22ce 	movw	r2, #718	; 0x2ce
 800b688:	4910      	ldr	r1, [pc, #64]	; (800b6cc <ipfrag_free_pbuf_custom+0x5c>)
 800b68a:	4811      	ldr	r0, [pc, #68]	; (800b6d0 <ipfrag_free_pbuf_custom+0x60>)
 800b68c:	f007 fb8c 	bl	8012da8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	429a      	cmp	r2, r3
 800b696:	d006      	beq.n	800b6a6 <ipfrag_free_pbuf_custom+0x36>
 800b698:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <ipfrag_free_pbuf_custom+0x58>)
 800b69a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800b69e:	490d      	ldr	r1, [pc, #52]	; (800b6d4 <ipfrag_free_pbuf_custom+0x64>)
 800b6a0:	480b      	ldr	r0, [pc, #44]	; (800b6d0 <ipfrag_free_pbuf_custom+0x60>)
 800b6a2:	f007 fb81 	bl	8012da8 <iprintf>
  if (pcr->original != NULL) {
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d004      	beq.n	800b6b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	695b      	ldr	r3, [r3, #20]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f001 fc38 	bl	800cf28 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f7ff ffbd 	bl	800b638 <ip_frag_free_pbuf_custom_ref>
}
 800b6be:	bf00      	nop
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	080144ec 	.word	0x080144ec
 800b6cc:	080146d0 	.word	0x080146d0
 800b6d0:	08014554 	.word	0x08014554
 800b6d4:	080146dc 	.word	0x080146dc

0800b6d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b094      	sub	sp, #80	; 0x50
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ee:	3b14      	subs	r3, #20
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	da00      	bge.n	800b6f6 <ip4_frag+0x1e>
 800b6f4:	3307      	adds	r3, #7
 800b6f6:	10db      	asrs	r3, r3, #3
 800b6f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800b6fa:	2314      	movs	r3, #20
 800b6fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800b704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b706:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	f003 030f 	and.w	r3, r3, #15
 800b710:	b2db      	uxtb	r3, r3
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b14      	cmp	r3, #20
 800b718:	d002      	beq.n	800b720 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800b71a:	f06f 0305 	mvn.w	r3, #5
 800b71e:	e110      	b.n	800b942 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	895b      	ldrh	r3, [r3, #10]
 800b724:	2b13      	cmp	r3, #19
 800b726:	d809      	bhi.n	800b73c <ip4_frag+0x64>
 800b728:	4b88      	ldr	r3, [pc, #544]	; (800b94c <ip4_frag+0x274>)
 800b72a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800b72e:	4988      	ldr	r1, [pc, #544]	; (800b950 <ip4_frag+0x278>)
 800b730:	4888      	ldr	r0, [pc, #544]	; (800b954 <ip4_frag+0x27c>)
 800b732:	f007 fb39 	bl	8012da8 <iprintf>
 800b736:	f06f 0305 	mvn.w	r3, #5
 800b73a:	e102      	b.n	800b942 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800b73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73e:	88db      	ldrh	r3, [r3, #6]
 800b740:	b29b      	uxth	r3, r3
 800b742:	4618      	mov	r0, r3
 800b744:	f7fd fcd0 	bl	80090e8 <lwip_htons>
 800b748:	4603      	mov	r3, r0
 800b74a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800b74c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b74e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b752:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800b756:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b75c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	891b      	ldrh	r3, [r3, #8]
 800b762:	3b14      	subs	r3, #20
 800b764:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800b768:	e0e1      	b.n	800b92e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800b76a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b76c:	00db      	lsls	r3, r3, #3
 800b76e:	b29b      	uxth	r3, r3
 800b770:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b774:	4293      	cmp	r3, r2
 800b776:	bf28      	it	cs
 800b778:	4613      	movcs	r3, r2
 800b77a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b77c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b780:	2114      	movs	r1, #20
 800b782:	200e      	movs	r0, #14
 800b784:	f001 f8ec 	bl	800c960 <pbuf_alloc>
 800b788:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f000 80d5 	beq.w	800b93c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b794:	895b      	ldrh	r3, [r3, #10]
 800b796:	2b13      	cmp	r3, #19
 800b798:	d806      	bhi.n	800b7a8 <ip4_frag+0xd0>
 800b79a:	4b6c      	ldr	r3, [pc, #432]	; (800b94c <ip4_frag+0x274>)
 800b79c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800b7a0:	496d      	ldr	r1, [pc, #436]	; (800b958 <ip4_frag+0x280>)
 800b7a2:	486c      	ldr	r0, [pc, #432]	; (800b954 <ip4_frag+0x27c>)
 800b7a4:	f007 fb00 	bl	8012da8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	2214      	movs	r2, #20
 800b7ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f007 fae3 	bl	8012d7c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800b7bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b7be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800b7c2:	e064      	b.n	800b88e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	895a      	ldrh	r2, [r3, #10]
 800b7c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	895b      	ldrh	r3, [r3, #10]
 800b7d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d906      	bls.n	800b7e6 <ip4_frag+0x10e>
 800b7d8:	4b5c      	ldr	r3, [pc, #368]	; (800b94c <ip4_frag+0x274>)
 800b7da:	f240 322d 	movw	r2, #813	; 0x32d
 800b7de:	495f      	ldr	r1, [pc, #380]	; (800b95c <ip4_frag+0x284>)
 800b7e0:	485c      	ldr	r0, [pc, #368]	; (800b954 <ip4_frag+0x27c>)
 800b7e2:	f007 fae1 	bl	8012da8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b7e6:	8bfa      	ldrh	r2, [r7, #30]
 800b7e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	bf28      	it	cs
 800b7f0:	4613      	movcs	r3, r2
 800b7f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800b7f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d105      	bne.n	800b80a <ip4_frag+0x132>
        poff = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	60fb      	str	r3, [r7, #12]
        continue;
 800b808:	e041      	b.n	800b88e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800b80a:	f7ff ff0d 	bl	800b628 <ip_frag_alloc_pbuf_custom_ref>
 800b80e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d103      	bne.n	800b81e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800b816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b818:	f001 fb86 	bl	800cf28 <pbuf_free>
        goto memerr;
 800b81c:	e08f      	b.n	800b93e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b81e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b824:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b826:	4413      	add	r3, r2
 800b828:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800b82c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800b830:	9201      	str	r2, [sp, #4]
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	4603      	mov	r3, r0
 800b836:	2241      	movs	r2, #65	; 0x41
 800b838:	2000      	movs	r0, #0
 800b83a:	f001 f9bb 	bl	800cbb4 <pbuf_alloced_custom>
 800b83e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d106      	bne.n	800b854 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800b846:	69b8      	ldr	r0, [r7, #24]
 800b848:	f7ff fef6 	bl	800b638 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800b84c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b84e:	f001 fb6b 	bl	800cf28 <pbuf_free>
        goto memerr;
 800b852:	e074      	b.n	800b93e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f001 fc07 	bl	800d068 <pbuf_ref>
      pcr->original = p;
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	4a3f      	ldr	r2, [pc, #252]	; (800b960 <ip4_frag+0x288>)
 800b864:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800b866:	6979      	ldr	r1, [r7, #20]
 800b868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b86a:	f001 fc1f 	bl	800d0ac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800b86e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800b872:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800b87c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b880:	2b00      	cmp	r3, #0
 800b882:	d004      	beq.n	800b88e <ip4_frag+0x1b6>
        poff = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800b88e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b892:	2b00      	cmp	r3, #0
 800b894:	d196      	bne.n	800b7c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800b896:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b898:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b89c:	4413      	add	r3, r2
 800b89e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8a4:	f1a3 0213 	sub.w	r2, r3, #19
 800b8a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	bfcc      	ite	gt
 800b8b0:	2301      	movgt	r3, #1
 800b8b2:	2300      	movle	r3, #0
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800b8b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b8bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <ip4_frag+0x1f6>
 800b8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800b8ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b8d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b8d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fd fc05 	bl	80090e8 <lwip_htons>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800b8e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b8e8:	3314      	adds	r3, #20
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fd fbfb 	bl	80090e8 <lwip_htons>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	729a      	strb	r2, [r3, #10]
 800b900:	2200      	movs	r2, #0
 800b902:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b90c:	68b8      	ldr	r0, [r7, #8]
 800b90e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800b910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b912:	f001 fb09 	bl	800cf28 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800b916:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b91a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800b922:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b926:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b928:	4413      	add	r3, r2
 800b92a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800b92e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b932:	2b00      	cmp	r3, #0
 800b934:	f47f af19 	bne.w	800b76a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800b938:	2300      	movs	r3, #0
 800b93a:	e002      	b.n	800b942 <ip4_frag+0x26a>
      goto memerr;
 800b93c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800b93e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b942:	4618      	mov	r0, r3
 800b944:	3748      	adds	r7, #72	; 0x48
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	080144ec 	.word	0x080144ec
 800b950:	080146e8 	.word	0x080146e8
 800b954:	08014554 	.word	0x08014554
 800b958:	08014704 	.word	0x08014704
 800b95c:	08014724 	.word	0x08014724
 800b960:	0800b671 	.word	0x0800b671

0800b964 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	4603      	mov	r3, r0
 800b96c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b96e:	4b05      	ldr	r3, [pc, #20]	; (800b984 <ptr_to_mem+0x20>)
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	88fb      	ldrh	r3, [r7, #6]
 800b974:	4413      	add	r3, r2
}
 800b976:	4618      	mov	r0, r3
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	2400526c 	.word	0x2400526c

0800b988 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b990:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <mem_to_ptr+0x20>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	b29b      	uxth	r3, r3
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	370c      	adds	r7, #12
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	2400526c 	.word	0x2400526c

0800b9ac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b9ac:	b590      	push	{r4, r7, lr}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b9b4:	4b45      	ldr	r3, [pc, #276]	; (800bacc <plug_holes+0x120>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d206      	bcs.n	800b9cc <plug_holes+0x20>
 800b9be:	4b44      	ldr	r3, [pc, #272]	; (800bad0 <plug_holes+0x124>)
 800b9c0:	f240 12df 	movw	r2, #479	; 0x1df
 800b9c4:	4943      	ldr	r1, [pc, #268]	; (800bad4 <plug_holes+0x128>)
 800b9c6:	4844      	ldr	r0, [pc, #272]	; (800bad8 <plug_holes+0x12c>)
 800b9c8:	f007 f9ee 	bl	8012da8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b9cc:	4b43      	ldr	r3, [pc, #268]	; (800badc <plug_holes+0x130>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d306      	bcc.n	800b9e4 <plug_holes+0x38>
 800b9d6:	4b3e      	ldr	r3, [pc, #248]	; (800bad0 <plug_holes+0x124>)
 800b9d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b9dc:	4940      	ldr	r1, [pc, #256]	; (800bae0 <plug_holes+0x134>)
 800b9de:	483e      	ldr	r0, [pc, #248]	; (800bad8 <plug_holes+0x12c>)
 800b9e0:	f007 f9e2 	bl	8012da8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	791b      	ldrb	r3, [r3, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d006      	beq.n	800b9fa <plug_holes+0x4e>
 800b9ec:	4b38      	ldr	r3, [pc, #224]	; (800bad0 <plug_holes+0x124>)
 800b9ee:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b9f2:	493c      	ldr	r1, [pc, #240]	; (800bae4 <plug_holes+0x138>)
 800b9f4:	4838      	ldr	r0, [pc, #224]	; (800bad8 <plug_holes+0x12c>)
 800b9f6:	f007 f9d7 	bl	8012da8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	881b      	ldrh	r3, [r3, #0]
 800b9fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba02:	d906      	bls.n	800ba12 <plug_holes+0x66>
 800ba04:	4b32      	ldr	r3, [pc, #200]	; (800bad0 <plug_holes+0x124>)
 800ba06:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ba0a:	4937      	ldr	r1, [pc, #220]	; (800bae8 <plug_holes+0x13c>)
 800ba0c:	4832      	ldr	r0, [pc, #200]	; (800bad8 <plug_holes+0x12c>)
 800ba0e:	f007 f9cb 	bl	8012da8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff ffa4 	bl	800b964 <ptr_to_mem>
 800ba1c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d024      	beq.n	800ba70 <plug_holes+0xc4>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	791b      	ldrb	r3, [r3, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d120      	bne.n	800ba70 <plug_holes+0xc4>
 800ba2e:	4b2b      	ldr	r3, [pc, #172]	; (800badc <plug_holes+0x130>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d01b      	beq.n	800ba70 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ba38:	4b2c      	ldr	r3, [pc, #176]	; (800baec <plug_holes+0x140>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d102      	bne.n	800ba48 <plug_holes+0x9c>
      lfree = mem;
 800ba42:	4a2a      	ldr	r2, [pc, #168]	; (800baec <plug_holes+0x140>)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	881a      	ldrh	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	881b      	ldrh	r3, [r3, #0]
 800ba54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba58:	d00a      	beq.n	800ba70 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7ff ff80 	bl	800b964 <ptr_to_mem>
 800ba64:	4604      	mov	r4, r0
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7ff ff8e 	bl	800b988 <mem_to_ptr>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	885b      	ldrh	r3, [r3, #2]
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7ff ff75 	bl	800b964 <ptr_to_mem>
 800ba7a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d01f      	beq.n	800bac4 <plug_holes+0x118>
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	791b      	ldrb	r3, [r3, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d11b      	bne.n	800bac4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ba8c:	4b17      	ldr	r3, [pc, #92]	; (800baec <plug_holes+0x140>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d102      	bne.n	800ba9c <plug_holes+0xf0>
      lfree = pmem;
 800ba96:	4a15      	ldr	r2, [pc, #84]	; (800baec <plug_holes+0x140>)
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	881a      	ldrh	r2, [r3, #0]
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800baac:	d00a      	beq.n	800bac4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	881b      	ldrh	r3, [r3, #0]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7ff ff56 	bl	800b964 <ptr_to_mem>
 800bab8:	4604      	mov	r4, r0
 800baba:	68b8      	ldr	r0, [r7, #8]
 800babc:	f7ff ff64 	bl	800b988 <mem_to_ptr>
 800bac0:	4603      	mov	r3, r0
 800bac2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bac4:	bf00      	nop
 800bac6:	3714      	adds	r7, #20
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd90      	pop	{r4, r7, pc}
 800bacc:	2400526c 	.word	0x2400526c
 800bad0:	08014734 	.word	0x08014734
 800bad4:	08014788 	.word	0x08014788
 800bad8:	080147a0 	.word	0x080147a0
 800badc:	24005270 	.word	0x24005270
 800bae0:	080147c8 	.word	0x080147c8
 800bae4:	080147e4 	.word	0x080147e4
 800bae8:	08014800 	.word	0x08014800
 800baec:	24005274 	.word	0x24005274

0800baf0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800baf6:	4b16      	ldr	r3, [pc, #88]	; (800bb50 <mem_init+0x60>)
 800baf8:	4a16      	ldr	r2, [pc, #88]	; (800bb54 <mem_init+0x64>)
 800bafa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bafc:	4b14      	ldr	r3, [pc, #80]	; (800bb50 <mem_init+0x60>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bb08:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bb16:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800bb1a:	f7ff ff23 	bl	800b964 <ptr_to_mem>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	4a0d      	ldr	r2, [pc, #52]	; (800bb58 <mem_init+0x68>)
 800bb22:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bb24:	4b0c      	ldr	r3, [pc, #48]	; (800bb58 <mem_init+0x68>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bb2c:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <mem_init+0x68>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bb34:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bb36:	4b08      	ldr	r3, [pc, #32]	; (800bb58 <mem_init+0x68>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bb3e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bb40:	4b03      	ldr	r3, [pc, #12]	; (800bb50 <mem_init+0x60>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a05      	ldr	r2, [pc, #20]	; (800bb5c <mem_init+0x6c>)
 800bb46:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800bb48:	bf00      	nop
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	2400526c 	.word	0x2400526c
 800bb54:	30044000 	.word	0x30044000
 800bb58:	24005270 	.word	0x24005270
 800bb5c:	24005274 	.word	0x24005274

0800bb60 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7ff ff0d 	bl	800b988 <mem_to_ptr>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	881b      	ldrh	r3, [r3, #0]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7ff fef4 	bl	800b964 <ptr_to_mem>
 800bb7c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	885b      	ldrh	r3, [r3, #2]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff feee 	bl	800b964 <ptr_to_mem>
 800bb88:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb92:	d818      	bhi.n	800bbc6 <mem_link_valid+0x66>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	885b      	ldrh	r3, [r3, #2]
 800bb98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb9c:	d813      	bhi.n	800bbc6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bba2:	8afa      	ldrh	r2, [r7, #22]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d004      	beq.n	800bbb2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	8afa      	ldrh	r2, [r7, #22]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d109      	bne.n	800bbc6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bbb2:	4b08      	ldr	r3, [pc, #32]	; (800bbd4 <mem_link_valid+0x74>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d006      	beq.n	800bbca <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	885b      	ldrh	r3, [r3, #2]
 800bbc0:	8afa      	ldrh	r2, [r7, #22]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d001      	beq.n	800bbca <mem_link_valid+0x6a>
    return 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	e000      	b.n	800bbcc <mem_link_valid+0x6c>
  }
  return 1;
 800bbca:	2301      	movs	r3, #1
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	24005270 	.word	0x24005270

0800bbd8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d04c      	beq.n	800bc80 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f003 0303 	and.w	r3, r3, #3
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d007      	beq.n	800bc00 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bbf0:	4b25      	ldr	r3, [pc, #148]	; (800bc88 <mem_free+0xb0>)
 800bbf2:	f240 2273 	movw	r2, #627	; 0x273
 800bbf6:	4925      	ldr	r1, [pc, #148]	; (800bc8c <mem_free+0xb4>)
 800bbf8:	4825      	ldr	r0, [pc, #148]	; (800bc90 <mem_free+0xb8>)
 800bbfa:	f007 f8d5 	bl	8012da8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bbfe:	e040      	b.n	800bc82 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	3b08      	subs	r3, #8
 800bc04:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bc06:	4b23      	ldr	r3, [pc, #140]	; (800bc94 <mem_free+0xbc>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d306      	bcc.n	800bc1e <mem_free+0x46>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f103 020c 	add.w	r2, r3, #12
 800bc16:	4b20      	ldr	r3, [pc, #128]	; (800bc98 <mem_free+0xc0>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d907      	bls.n	800bc2e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bc1e:	4b1a      	ldr	r3, [pc, #104]	; (800bc88 <mem_free+0xb0>)
 800bc20:	f240 227f 	movw	r2, #639	; 0x27f
 800bc24:	491d      	ldr	r1, [pc, #116]	; (800bc9c <mem_free+0xc4>)
 800bc26:	481a      	ldr	r0, [pc, #104]	; (800bc90 <mem_free+0xb8>)
 800bc28:	f007 f8be 	bl	8012da8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bc2c:	e029      	b.n	800bc82 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	791b      	ldrb	r3, [r3, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d107      	bne.n	800bc46 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bc36:	4b14      	ldr	r3, [pc, #80]	; (800bc88 <mem_free+0xb0>)
 800bc38:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bc3c:	4918      	ldr	r1, [pc, #96]	; (800bca0 <mem_free+0xc8>)
 800bc3e:	4814      	ldr	r0, [pc, #80]	; (800bc90 <mem_free+0xb8>)
 800bc40:	f007 f8b2 	bl	8012da8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bc44:	e01d      	b.n	800bc82 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f7ff ff8a 	bl	800bb60 <mem_link_valid>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d107      	bne.n	800bc62 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bc52:	4b0d      	ldr	r3, [pc, #52]	; (800bc88 <mem_free+0xb0>)
 800bc54:	f240 2295 	movw	r2, #661	; 0x295
 800bc58:	4912      	ldr	r1, [pc, #72]	; (800bca4 <mem_free+0xcc>)
 800bc5a:	480d      	ldr	r0, [pc, #52]	; (800bc90 <mem_free+0xb8>)
 800bc5c:	f007 f8a4 	bl	8012da8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bc60:	e00f      	b.n	800bc82 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bc68:	4b0f      	ldr	r3, [pc, #60]	; (800bca8 <mem_free+0xd0>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d202      	bcs.n	800bc78 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bc72:	4a0d      	ldr	r2, [pc, #52]	; (800bca8 <mem_free+0xd0>)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f7ff fe97 	bl	800b9ac <plug_holes>
 800bc7e:	e000      	b.n	800bc82 <mem_free+0xaa>
    return;
 800bc80:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	08014734 	.word	0x08014734
 800bc8c:	0801482c 	.word	0x0801482c
 800bc90:	080147a0 	.word	0x080147a0
 800bc94:	2400526c 	.word	0x2400526c
 800bc98:	24005270 	.word	0x24005270
 800bc9c:	08014850 	.word	0x08014850
 800bca0:	0801486c 	.word	0x0801486c
 800bca4:	08014894 	.word	0x08014894
 800bca8:	24005274 	.word	0x24005274

0800bcac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bcb8:	887b      	ldrh	r3, [r7, #2]
 800bcba:	3303      	adds	r3, #3
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	f023 0303 	bic.w	r3, r3, #3
 800bcc2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bcc4:	8bfb      	ldrh	r3, [r7, #30]
 800bcc6:	2b0b      	cmp	r3, #11
 800bcc8:	d801      	bhi.n	800bcce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bcca:	230c      	movs	r3, #12
 800bccc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bcce:	8bfb      	ldrh	r3, [r7, #30]
 800bcd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcd4:	d803      	bhi.n	800bcde <mem_trim+0x32>
 800bcd6:	8bfa      	ldrh	r2, [r7, #30]
 800bcd8:	887b      	ldrh	r3, [r7, #2]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d201      	bcs.n	800bce2 <mem_trim+0x36>
    return NULL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	e0cc      	b.n	800be7c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bce2:	4b68      	ldr	r3, [pc, #416]	; (800be84 <mem_trim+0x1d8>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d304      	bcc.n	800bcf6 <mem_trim+0x4a>
 800bcec:	4b66      	ldr	r3, [pc, #408]	; (800be88 <mem_trim+0x1dc>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d306      	bcc.n	800bd04 <mem_trim+0x58>
 800bcf6:	4b65      	ldr	r3, [pc, #404]	; (800be8c <mem_trim+0x1e0>)
 800bcf8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bcfc:	4964      	ldr	r1, [pc, #400]	; (800be90 <mem_trim+0x1e4>)
 800bcfe:	4865      	ldr	r0, [pc, #404]	; (800be94 <mem_trim+0x1e8>)
 800bd00:	f007 f852 	bl	8012da8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bd04:	4b5f      	ldr	r3, [pc, #380]	; (800be84 <mem_trim+0x1d8>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d304      	bcc.n	800bd18 <mem_trim+0x6c>
 800bd0e:	4b5e      	ldr	r3, [pc, #376]	; (800be88 <mem_trim+0x1dc>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d301      	bcc.n	800bd1c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	e0af      	b.n	800be7c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	3b08      	subs	r3, #8
 800bd20:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bd22:	69b8      	ldr	r0, [r7, #24]
 800bd24:	f7ff fe30 	bl	800b988 <mem_to_ptr>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	881a      	ldrh	r2, [r3, #0]
 800bd30:	8afb      	ldrh	r3, [r7, #22]
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	3b08      	subs	r3, #8
 800bd38:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bd3a:	8bfa      	ldrh	r2, [r7, #30]
 800bd3c:	8abb      	ldrh	r3, [r7, #20]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d906      	bls.n	800bd50 <mem_trim+0xa4>
 800bd42:	4b52      	ldr	r3, [pc, #328]	; (800be8c <mem_trim+0x1e0>)
 800bd44:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bd48:	4953      	ldr	r1, [pc, #332]	; (800be98 <mem_trim+0x1ec>)
 800bd4a:	4852      	ldr	r0, [pc, #328]	; (800be94 <mem_trim+0x1e8>)
 800bd4c:	f007 f82c 	bl	8012da8 <iprintf>
  if (newsize > size) {
 800bd50:	8bfa      	ldrh	r2, [r7, #30]
 800bd52:	8abb      	ldrh	r3, [r7, #20]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d901      	bls.n	800bd5c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	e08f      	b.n	800be7c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800bd5c:	8bfa      	ldrh	r2, [r7, #30]
 800bd5e:	8abb      	ldrh	r3, [r7, #20]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d101      	bne.n	800bd68 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	e089      	b.n	800be7c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7ff fdf9 	bl	800b964 <ptr_to_mem>
 800bd72:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	791b      	ldrb	r3, [r3, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d13f      	bne.n	800bdfc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd84:	d106      	bne.n	800bd94 <mem_trim+0xe8>
 800bd86:	4b41      	ldr	r3, [pc, #260]	; (800be8c <mem_trim+0x1e0>)
 800bd88:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bd8c:	4943      	ldr	r1, [pc, #268]	; (800be9c <mem_trim+0x1f0>)
 800bd8e:	4841      	ldr	r0, [pc, #260]	; (800be94 <mem_trim+0x1e8>)
 800bd90:	f007 f80a 	bl	8012da8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	881b      	ldrh	r3, [r3, #0]
 800bd98:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bd9a:	8afa      	ldrh	r2, [r7, #22]
 800bd9c:	8bfb      	ldrh	r3, [r7, #30]
 800bd9e:	4413      	add	r3, r2
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	3308      	adds	r3, #8
 800bda4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bda6:	4b3e      	ldr	r3, [pc, #248]	; (800bea0 <mem_trim+0x1f4>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d106      	bne.n	800bdbe <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800bdb0:	89fb      	ldrh	r3, [r7, #14]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff fdd6 	bl	800b964 <ptr_to_mem>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	4a39      	ldr	r2, [pc, #228]	; (800bea0 <mem_trim+0x1f4>)
 800bdbc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bdbe:	89fb      	ldrh	r3, [r7, #14]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff fdcf 	bl	800b964 <ptr_to_mem>
 800bdc6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	89ba      	ldrh	r2, [r7, #12]
 800bdd2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	8afa      	ldrh	r2, [r7, #22]
 800bdd8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	89fa      	ldrh	r2, [r7, #14]
 800bdde:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bde8:	d047      	beq.n	800be7a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff fdb8 	bl	800b964 <ptr_to_mem>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	89fb      	ldrh	r3, [r7, #14]
 800bdf8:	8053      	strh	r3, [r2, #2]
 800bdfa:	e03e      	b.n	800be7a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bdfc:	8bfb      	ldrh	r3, [r7, #30]
 800bdfe:	f103 0214 	add.w	r2, r3, #20
 800be02:	8abb      	ldrh	r3, [r7, #20]
 800be04:	429a      	cmp	r2, r3
 800be06:	d838      	bhi.n	800be7a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800be08:	8afa      	ldrh	r2, [r7, #22]
 800be0a:	8bfb      	ldrh	r3, [r7, #30]
 800be0c:	4413      	add	r3, r2
 800be0e:	b29b      	uxth	r3, r3
 800be10:	3308      	adds	r3, #8
 800be12:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be1c:	d106      	bne.n	800be2c <mem_trim+0x180>
 800be1e:	4b1b      	ldr	r3, [pc, #108]	; (800be8c <mem_trim+0x1e0>)
 800be20:	f240 3216 	movw	r2, #790	; 0x316
 800be24:	491d      	ldr	r1, [pc, #116]	; (800be9c <mem_trim+0x1f0>)
 800be26:	481b      	ldr	r0, [pc, #108]	; (800be94 <mem_trim+0x1e8>)
 800be28:	f006 ffbe 	bl	8012da8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800be2c:	89fb      	ldrh	r3, [r7, #14]
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff fd98 	bl	800b964 <ptr_to_mem>
 800be34:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800be36:	4b1a      	ldr	r3, [pc, #104]	; (800bea0 <mem_trim+0x1f4>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d202      	bcs.n	800be46 <mem_trim+0x19a>
      lfree = mem2;
 800be40:	4a17      	ldr	r2, [pc, #92]	; (800bea0 <mem_trim+0x1f4>)
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	2200      	movs	r2, #0
 800be4a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	881a      	ldrh	r2, [r3, #0]
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	8afa      	ldrh	r2, [r7, #22]
 800be58:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	89fa      	ldrh	r2, [r7, #14]
 800be5e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be68:	d007      	beq.n	800be7a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	4618      	mov	r0, r3
 800be70:	f7ff fd78 	bl	800b964 <ptr_to_mem>
 800be74:	4602      	mov	r2, r0
 800be76:	89fb      	ldrh	r3, [r7, #14]
 800be78:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800be7a:	687b      	ldr	r3, [r7, #4]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3720      	adds	r7, #32
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	2400526c 	.word	0x2400526c
 800be88:	24005270 	.word	0x24005270
 800be8c:	08014734 	.word	0x08014734
 800be90:	080148c8 	.word	0x080148c8
 800be94:	080147a0 	.word	0x080147a0
 800be98:	080148e0 	.word	0x080148e0
 800be9c:	08014900 	.word	0x08014900
 800bea0:	24005274 	.word	0x24005274

0800bea4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	4603      	mov	r3, r0
 800beac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800beae:	88fb      	ldrh	r3, [r7, #6]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d101      	bne.n	800beb8 <mem_malloc+0x14>
    return NULL;
 800beb4:	2300      	movs	r3, #0
 800beb6:	e0d9      	b.n	800c06c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800beb8:	88fb      	ldrh	r3, [r7, #6]
 800beba:	3303      	adds	r3, #3
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	f023 0303 	bic.w	r3, r3, #3
 800bec2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bec4:	8bbb      	ldrh	r3, [r7, #28]
 800bec6:	2b0b      	cmp	r3, #11
 800bec8:	d801      	bhi.n	800bece <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800beca:	230c      	movs	r3, #12
 800becc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bece:	8bbb      	ldrh	r3, [r7, #28]
 800bed0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bed4:	d803      	bhi.n	800bede <mem_malloc+0x3a>
 800bed6:	8bba      	ldrh	r2, [r7, #28]
 800bed8:	88fb      	ldrh	r3, [r7, #6]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d201      	bcs.n	800bee2 <mem_malloc+0x3e>
    return NULL;
 800bede:	2300      	movs	r3, #0
 800bee0:	e0c4      	b.n	800c06c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bee2:	4b64      	ldr	r3, [pc, #400]	; (800c074 <mem_malloc+0x1d0>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7ff fd4e 	bl	800b988 <mem_to_ptr>
 800beec:	4603      	mov	r3, r0
 800beee:	83fb      	strh	r3, [r7, #30]
 800bef0:	e0b4      	b.n	800c05c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bef2:	8bfb      	ldrh	r3, [r7, #30]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7ff fd35 	bl	800b964 <ptr_to_mem>
 800befa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	791b      	ldrb	r3, [r3, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f040 80a4 	bne.w	800c04e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	8bfb      	ldrh	r3, [r7, #30]
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	f1a3 0208 	sub.w	r2, r3, #8
 800bf14:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bf16:	429a      	cmp	r2, r3
 800bf18:	f0c0 8099 	bcc.w	800c04e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	461a      	mov	r2, r3
 800bf22:	8bfb      	ldrh	r3, [r7, #30]
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	f1a3 0208 	sub.w	r2, r3, #8
 800bf2a:	8bbb      	ldrh	r3, [r7, #28]
 800bf2c:	3314      	adds	r3, #20
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d333      	bcc.n	800bf9a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bf32:	8bfa      	ldrh	r2, [r7, #30]
 800bf34:	8bbb      	ldrh	r3, [r7, #28]
 800bf36:	4413      	add	r3, r2
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bf3e:	8a7b      	ldrh	r3, [r7, #18]
 800bf40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf44:	d106      	bne.n	800bf54 <mem_malloc+0xb0>
 800bf46:	4b4c      	ldr	r3, [pc, #304]	; (800c078 <mem_malloc+0x1d4>)
 800bf48:	f240 3287 	movw	r2, #903	; 0x387
 800bf4c:	494b      	ldr	r1, [pc, #300]	; (800c07c <mem_malloc+0x1d8>)
 800bf4e:	484c      	ldr	r0, [pc, #304]	; (800c080 <mem_malloc+0x1dc>)
 800bf50:	f006 ff2a 	bl	8012da8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bf54:	8a7b      	ldrh	r3, [r7, #18]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7ff fd04 	bl	800b964 <ptr_to_mem>
 800bf5c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	881a      	ldrh	r2, [r3, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	8bfa      	ldrh	r2, [r7, #30]
 800bf70:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	8a7a      	ldrh	r2, [r7, #18]
 800bf76:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf86:	d00b      	beq.n	800bfa0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7ff fce9 	bl	800b964 <ptr_to_mem>
 800bf92:	4602      	mov	r2, r0
 800bf94:	8a7b      	ldrh	r3, [r7, #18]
 800bf96:	8053      	strh	r3, [r2, #2]
 800bf98:	e002      	b.n	800bfa0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bfa0:	4b34      	ldr	r3, [pc, #208]	; (800c074 <mem_malloc+0x1d0>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d127      	bne.n	800bffa <mem_malloc+0x156>
          struct mem *cur = lfree;
 800bfaa:	4b32      	ldr	r3, [pc, #200]	; (800c074 <mem_malloc+0x1d0>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bfb0:	e005      	b.n	800bfbe <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	881b      	ldrh	r3, [r3, #0]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff fcd4 	bl	800b964 <ptr_to_mem>
 800bfbc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	791b      	ldrb	r3, [r3, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d004      	beq.n	800bfd0 <mem_malloc+0x12c>
 800bfc6:	4b2f      	ldr	r3, [pc, #188]	; (800c084 <mem_malloc+0x1e0>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	69ba      	ldr	r2, [r7, #24]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d1f0      	bne.n	800bfb2 <mem_malloc+0x10e>
          }
          lfree = cur;
 800bfd0:	4a28      	ldr	r2, [pc, #160]	; (800c074 <mem_malloc+0x1d0>)
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bfd6:	4b27      	ldr	r3, [pc, #156]	; (800c074 <mem_malloc+0x1d0>)
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	4b2a      	ldr	r3, [pc, #168]	; (800c084 <mem_malloc+0x1e0>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d00b      	beq.n	800bffa <mem_malloc+0x156>
 800bfe2:	4b24      	ldr	r3, [pc, #144]	; (800c074 <mem_malloc+0x1d0>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	791b      	ldrb	r3, [r3, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d006      	beq.n	800bffa <mem_malloc+0x156>
 800bfec:	4b22      	ldr	r3, [pc, #136]	; (800c078 <mem_malloc+0x1d4>)
 800bfee:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bff2:	4925      	ldr	r1, [pc, #148]	; (800c088 <mem_malloc+0x1e4>)
 800bff4:	4822      	ldr	r0, [pc, #136]	; (800c080 <mem_malloc+0x1dc>)
 800bff6:	f006 fed7 	bl	8012da8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bffa:	8bba      	ldrh	r2, [r7, #28]
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	4413      	add	r3, r2
 800c000:	3308      	adds	r3, #8
 800c002:	4a20      	ldr	r2, [pc, #128]	; (800c084 <mem_malloc+0x1e0>)
 800c004:	6812      	ldr	r2, [r2, #0]
 800c006:	4293      	cmp	r3, r2
 800c008:	d906      	bls.n	800c018 <mem_malloc+0x174>
 800c00a:	4b1b      	ldr	r3, [pc, #108]	; (800c078 <mem_malloc+0x1d4>)
 800c00c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c010:	491e      	ldr	r1, [pc, #120]	; (800c08c <mem_malloc+0x1e8>)
 800c012:	481b      	ldr	r0, [pc, #108]	; (800c080 <mem_malloc+0x1dc>)
 800c014:	f006 fec8 	bl	8012da8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	f003 0303 	and.w	r3, r3, #3
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d006      	beq.n	800c030 <mem_malloc+0x18c>
 800c022:	4b15      	ldr	r3, [pc, #84]	; (800c078 <mem_malloc+0x1d4>)
 800c024:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c028:	4919      	ldr	r1, [pc, #100]	; (800c090 <mem_malloc+0x1ec>)
 800c02a:	4815      	ldr	r0, [pc, #84]	; (800c080 <mem_malloc+0x1dc>)
 800c02c:	f006 febc 	bl	8012da8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	f003 0303 	and.w	r3, r3, #3
 800c036:	2b00      	cmp	r3, #0
 800c038:	d006      	beq.n	800c048 <mem_malloc+0x1a4>
 800c03a:	4b0f      	ldr	r3, [pc, #60]	; (800c078 <mem_malloc+0x1d4>)
 800c03c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c040:	4914      	ldr	r1, [pc, #80]	; (800c094 <mem_malloc+0x1f0>)
 800c042:	480f      	ldr	r0, [pc, #60]	; (800c080 <mem_malloc+0x1dc>)
 800c044:	f006 feb0 	bl	8012da8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	3308      	adds	r3, #8
 800c04c:	e00e      	b.n	800c06c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c04e:	8bfb      	ldrh	r3, [r7, #30]
 800c050:	4618      	mov	r0, r3
 800c052:	f7ff fc87 	bl	800b964 <ptr_to_mem>
 800c056:	4603      	mov	r3, r0
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c05c:	8bfa      	ldrh	r2, [r7, #30]
 800c05e:	8bbb      	ldrh	r3, [r7, #28]
 800c060:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c064:	429a      	cmp	r2, r3
 800c066:	f4ff af44 	bcc.w	800bef2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3720      	adds	r7, #32
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	24005274 	.word	0x24005274
 800c078:	08014734 	.word	0x08014734
 800c07c:	08014900 	.word	0x08014900
 800c080:	080147a0 	.word	0x080147a0
 800c084:	24005270 	.word	0x24005270
 800c088:	08014914 	.word	0x08014914
 800c08c:	08014930 	.word	0x08014930
 800c090:	08014960 	.word	0x08014960
 800c094:	08014990 	.word	0x08014990

0800c098 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	4603      	mov	r3, r0
 800c0a0:	460a      	mov	r2, r1
 800c0a2:	80fb      	strh	r3, [r7, #6]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800c0a8:	88fb      	ldrh	r3, [r7, #6]
 800c0aa:	88ba      	ldrh	r2, [r7, #4]
 800c0ac:	fb02 f303 	mul.w	r3, r2, r3
 800c0b0:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d001      	beq.n	800c0c2 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	e00e      	b.n	800c0e0 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7ff feec 	bl	800bea4 <mem_malloc>
 800c0cc:	60b8      	str	r0, [r7, #8]
  if (p) {
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d004      	beq.n	800c0de <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	68b8      	ldr	r0, [r7, #8]
 800c0da:	f006 fe5d 	bl	8012d98 <memset>
  }
  return p;
 800c0de:	68bb      	ldr	r3, [r7, #8]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	3303      	adds	r3, #3
 800c0fe:	f023 0303 	bic.w	r3, r3, #3
 800c102:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c104:	2300      	movs	r3, #0
 800c106:	60fb      	str	r3, [r7, #12]
 800c108:	e011      	b.n	800c12e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	461a      	mov	r2, r3
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	4413      	add	r3, r2
 800c126:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	3301      	adds	r3, #1
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	885b      	ldrh	r3, [r3, #2]
 800c132:	461a      	mov	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	4293      	cmp	r3, r2
 800c138:	dbe7      	blt.n	800c10a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c13a:	bf00      	nop
 800c13c:	bf00      	nop
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c14e:	2300      	movs	r3, #0
 800c150:	80fb      	strh	r3, [r7, #6]
 800c152:	e009      	b.n	800c168 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c154:	88fb      	ldrh	r3, [r7, #6]
 800c156:	4a08      	ldr	r2, [pc, #32]	; (800c178 <memp_init+0x30>)
 800c158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7ff ffc3 	bl	800c0e8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c162:	88fb      	ldrh	r3, [r7, #6]
 800c164:	3301      	adds	r3, #1
 800c166:	80fb      	strh	r3, [r7, #6]
 800c168:	88fb      	ldrh	r3, [r7, #6]
 800c16a:	2b08      	cmp	r3, #8
 800c16c:	d9f2      	bls.n	800c154 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c16e:	bf00      	nop
 800c170:	bf00      	nop
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	08016bfc 	.word	0x08016bfc

0800c17c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d012      	beq.n	800c1b8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	6812      	ldr	r2, [r2, #0]
 800c19a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f003 0303 	and.w	r3, r3, #3
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d006      	beq.n	800c1b4 <do_memp_malloc_pool+0x38>
 800c1a6:	4b07      	ldr	r3, [pc, #28]	; (800c1c4 <do_memp_malloc_pool+0x48>)
 800c1a8:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c1ac:	4906      	ldr	r1, [pc, #24]	; (800c1c8 <do_memp_malloc_pool+0x4c>)
 800c1ae:	4807      	ldr	r0, [pc, #28]	; (800c1cc <do_memp_malloc_pool+0x50>)
 800c1b0:	f006 fdfa 	bl	8012da8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	e000      	b.n	800c1ba <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	080149b4 	.word	0x080149b4
 800c1c8:	08014a08 	.word	0x08014a08
 800c1cc:	08014a2c 	.word	0x08014a2c

0800c1d0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d106      	bne.n	800c1ec <memp_malloc_pool+0x1c>
 800c1de:	4b0a      	ldr	r3, [pc, #40]	; (800c208 <memp_malloc_pool+0x38>)
 800c1e0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c1e4:	4909      	ldr	r1, [pc, #36]	; (800c20c <memp_malloc_pool+0x3c>)
 800c1e6:	480a      	ldr	r0, [pc, #40]	; (800c210 <memp_malloc_pool+0x40>)
 800c1e8:	f006 fdde 	bl	8012da8 <iprintf>
  if (desc == NULL) {
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <memp_malloc_pool+0x26>
    return NULL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e003      	b.n	800c1fe <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f7ff ffc0 	bl	800c17c <do_memp_malloc_pool>
 800c1fc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	080149b4 	.word	0x080149b4
 800c20c:	08014a54 	.word	0x08014a54
 800c210:	08014a2c 	.word	0x08014a2c

0800c214 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	4603      	mov	r3, r0
 800c21c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	2b08      	cmp	r3, #8
 800c222:	d908      	bls.n	800c236 <memp_malloc+0x22>
 800c224:	4b0a      	ldr	r3, [pc, #40]	; (800c250 <memp_malloc+0x3c>)
 800c226:	f240 1257 	movw	r2, #343	; 0x157
 800c22a:	490a      	ldr	r1, [pc, #40]	; (800c254 <memp_malloc+0x40>)
 800c22c:	480a      	ldr	r0, [pc, #40]	; (800c258 <memp_malloc+0x44>)
 800c22e:	f006 fdbb 	bl	8012da8 <iprintf>
 800c232:	2300      	movs	r3, #0
 800c234:	e008      	b.n	800c248 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c236:	79fb      	ldrb	r3, [r7, #7]
 800c238:	4a08      	ldr	r2, [pc, #32]	; (800c25c <memp_malloc+0x48>)
 800c23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c23e:	4618      	mov	r0, r3
 800c240:	f7ff ff9c 	bl	800c17c <do_memp_malloc_pool>
 800c244:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c246:	68fb      	ldr	r3, [r7, #12]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	080149b4 	.word	0x080149b4
 800c254:	08014a68 	.word	0x08014a68
 800c258:	08014a2c 	.word	0x08014a2c
 800c25c:	08016bfc 	.word	0x08016bfc

0800c260 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	f003 0303 	and.w	r3, r3, #3
 800c270:	2b00      	cmp	r3, #0
 800c272:	d006      	beq.n	800c282 <do_memp_free_pool+0x22>
 800c274:	4b0a      	ldr	r3, [pc, #40]	; (800c2a0 <do_memp_free_pool+0x40>)
 800c276:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c27a:	490a      	ldr	r1, [pc, #40]	; (800c2a4 <do_memp_free_pool+0x44>)
 800c27c:	480a      	ldr	r0, [pc, #40]	; (800c2a8 <do_memp_free_pool+0x48>)
 800c27e:	f006 fd93 	bl	8012da8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c298:	bf00      	nop
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	080149b4 	.word	0x080149b4
 800c2a4:	08014a88 	.word	0x08014a88
 800c2a8:	08014a2c 	.word	0x08014a2c

0800c2ac <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d106      	bne.n	800c2ca <memp_free_pool+0x1e>
 800c2bc:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <memp_free_pool+0x3c>)
 800c2be:	f240 1295 	movw	r2, #405	; 0x195
 800c2c2:	490a      	ldr	r1, [pc, #40]	; (800c2ec <memp_free_pool+0x40>)
 800c2c4:	480a      	ldr	r0, [pc, #40]	; (800c2f0 <memp_free_pool+0x44>)
 800c2c6:	f006 fd6f 	bl	8012da8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d007      	beq.n	800c2e0 <memp_free_pool+0x34>
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d004      	beq.n	800c2e0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c2d6:	6839      	ldr	r1, [r7, #0]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff ffc1 	bl	800c260 <do_memp_free_pool>
 800c2de:	e000      	b.n	800c2e2 <memp_free_pool+0x36>
    return;
 800c2e0:	bf00      	nop
}
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	080149b4 	.word	0x080149b4
 800c2ec:	08014a54 	.word	0x08014a54
 800c2f0:	08014a2c 	.word	0x08014a2c

0800c2f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	6039      	str	r1, [r7, #0]
 800c2fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c300:	79fb      	ldrb	r3, [r7, #7]
 800c302:	2b08      	cmp	r3, #8
 800c304:	d907      	bls.n	800c316 <memp_free+0x22>
 800c306:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <memp_free+0x44>)
 800c308:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c30c:	490b      	ldr	r1, [pc, #44]	; (800c33c <memp_free+0x48>)
 800c30e:	480c      	ldr	r0, [pc, #48]	; (800c340 <memp_free+0x4c>)
 800c310:	f006 fd4a 	bl	8012da8 <iprintf>
 800c314:	e00c      	b.n	800c330 <memp_free+0x3c>

  if (mem == NULL) {
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d008      	beq.n	800c32e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c31c:	79fb      	ldrb	r3, [r7, #7]
 800c31e:	4a09      	ldr	r2, [pc, #36]	; (800c344 <memp_free+0x50>)
 800c320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff ff9a 	bl	800c260 <do_memp_free_pool>
 800c32c:	e000      	b.n	800c330 <memp_free+0x3c>
    return;
 800c32e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	080149b4 	.word	0x080149b4
 800c33c:	08014aa8 	.word	0x08014aa8
 800c340:	08014a2c 	.word	0x08014a2c
 800c344:	08016bfc 	.word	0x08016bfc

0800c348 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c348:	b480      	push	{r7}
 800c34a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c34c:	bf00      	nop
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
	...

0800c358 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	607a      	str	r2, [r7, #4]
 800c364:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d108      	bne.n	800c37e <netif_add+0x26>
 800c36c:	4b5b      	ldr	r3, [pc, #364]	; (800c4dc <netif_add+0x184>)
 800c36e:	f240 1227 	movw	r2, #295	; 0x127
 800c372:	495b      	ldr	r1, [pc, #364]	; (800c4e0 <netif_add+0x188>)
 800c374:	485b      	ldr	r0, [pc, #364]	; (800c4e4 <netif_add+0x18c>)
 800c376:	f006 fd17 	bl	8012da8 <iprintf>
 800c37a:	2300      	movs	r3, #0
 800c37c:	e0a9      	b.n	800c4d2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c380:	2b00      	cmp	r3, #0
 800c382:	d108      	bne.n	800c396 <netif_add+0x3e>
 800c384:	4b55      	ldr	r3, [pc, #340]	; (800c4dc <netif_add+0x184>)
 800c386:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c38a:	4957      	ldr	r1, [pc, #348]	; (800c4e8 <netif_add+0x190>)
 800c38c:	4855      	ldr	r0, [pc, #340]	; (800c4e4 <netif_add+0x18c>)
 800c38e:	f006 fd0b 	bl	8012da8 <iprintf>
 800c392:	2300      	movs	r3, #0
 800c394:	e09d      	b.n	800c4d2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c39c:	4b53      	ldr	r3, [pc, #332]	; (800c4ec <netif_add+0x194>)
 800c39e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c3a6:	4b51      	ldr	r3, [pc, #324]	; (800c4ec <netif_add+0x194>)
 800c3a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c3b0:	4b4e      	ldr	r3, [pc, #312]	; (800c4ec <netif_add+0x194>)
 800c3b2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	4a49      	ldr	r2, [pc, #292]	; (800c4f0 <netif_add+0x198>)
 800c3ca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3324      	adds	r3, #36	; 0x24
 800c3de:	2204      	movs	r2, #4
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f006 fcd8 	bl	8012d98 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6a3a      	ldr	r2, [r7, #32]
 800c3f2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c3f4:	4b3f      	ldr	r3, [pc, #252]	; (800c4f4 <netif_add+0x19c>)
 800c3f6:	781a      	ldrb	r2, [r3, #0]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c402:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	68b9      	ldr	r1, [r7, #8]
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f000 f914 	bl	800c638 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	4798      	blx	r3
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <netif_add+0xc8>
    return NULL;
 800c41c:	2300      	movs	r3, #0
 800c41e:	e058      	b.n	800c4d2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c426:	2bff      	cmp	r3, #255	; 0xff
 800c428:	d103      	bne.n	800c432 <netif_add+0xda>
        netif->num = 0;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c436:	4b30      	ldr	r3, [pc, #192]	; (800c4f8 <netif_add+0x1a0>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	e02b      	b.n	800c496 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	429a      	cmp	r2, r3
 800c444:	d106      	bne.n	800c454 <netif_add+0xfc>
 800c446:	4b25      	ldr	r3, [pc, #148]	; (800c4dc <netif_add+0x184>)
 800c448:	f240 128b 	movw	r2, #395	; 0x18b
 800c44c:	492b      	ldr	r1, [pc, #172]	; (800c4fc <netif_add+0x1a4>)
 800c44e:	4825      	ldr	r0, [pc, #148]	; (800c4e4 <netif_add+0x18c>)
 800c450:	f006 fcaa 	bl	8012da8 <iprintf>
        num_netifs++;
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	3301      	adds	r3, #1
 800c458:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	2bff      	cmp	r3, #255	; 0xff
 800c45e:	dd06      	ble.n	800c46e <netif_add+0x116>
 800c460:	4b1e      	ldr	r3, [pc, #120]	; (800c4dc <netif_add+0x184>)
 800c462:	f240 128d 	movw	r2, #397	; 0x18d
 800c466:	4926      	ldr	r1, [pc, #152]	; (800c500 <netif_add+0x1a8>)
 800c468:	481e      	ldr	r0, [pc, #120]	; (800c4e4 <netif_add+0x18c>)
 800c46a:	f006 fc9d 	bl	8012da8 <iprintf>
        if (netif2->num == netif->num) {
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d108      	bne.n	800c490 <netif_add+0x138>
          netif->num++;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c484:	3301      	adds	r3, #1
 800c486:	b2da      	uxtb	r2, r3
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c48e:	e005      	b.n	800c49c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	617b      	str	r3, [r7, #20]
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1d0      	bne.n	800c43e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1be      	bne.n	800c420 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4a8:	2bfe      	cmp	r3, #254	; 0xfe
 800c4aa:	d103      	bne.n	800c4b4 <netif_add+0x15c>
    netif_num = 0;
 800c4ac:	4b11      	ldr	r3, [pc, #68]	; (800c4f4 <netif_add+0x19c>)
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	701a      	strb	r2, [r3, #0]
 800c4b2:	e006      	b.n	800c4c2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	4b0d      	ldr	r3, [pc, #52]	; (800c4f4 <netif_add+0x19c>)
 800c4c0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c4c2:	4b0d      	ldr	r3, [pc, #52]	; (800c4f8 <netif_add+0x1a0>)
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c4ca:	4a0b      	ldr	r2, [pc, #44]	; (800c4f8 <netif_add+0x1a0>)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3718      	adds	r7, #24
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	08014ac4 	.word	0x08014ac4
 800c4e0:	08014b78 	.word	0x08014b78
 800c4e4:	08014b34 	.word	0x08014b34
 800c4e8:	08014b94 	.word	0x08014b94
 800c4ec:	08016b8c 	.word	0x08016b8c
 800c4f0:	0800c84b 	.word	0x0800c84b
 800c4f4:	2400817c 	.word	0x2400817c
 800c4f8:	24008174 	.word	0x24008174
 800c4fc:	08014bb8 	.word	0x08014bb8
 800c500:	08014bcc 	.word	0x08014bcc

0800c504 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c50e:	6839      	ldr	r1, [r7, #0]
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f002 fae7 	bl	800eae4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c516:	6839      	ldr	r1, [r7, #0]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f006 fbcb 	bl	8012cb4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c51e:	bf00      	nop
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
	...

0800c528 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d106      	bne.n	800c548 <netif_do_set_ipaddr+0x20>
 800c53a:	4b1d      	ldr	r3, [pc, #116]	; (800c5b0 <netif_do_set_ipaddr+0x88>)
 800c53c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c540:	491c      	ldr	r1, [pc, #112]	; (800c5b4 <netif_do_set_ipaddr+0x8c>)
 800c542:	481d      	ldr	r0, [pc, #116]	; (800c5b8 <netif_do_set_ipaddr+0x90>)
 800c544:	f006 fc30 	bl	8012da8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d106      	bne.n	800c55c <netif_do_set_ipaddr+0x34>
 800c54e:	4b18      	ldr	r3, [pc, #96]	; (800c5b0 <netif_do_set_ipaddr+0x88>)
 800c550:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c554:	4917      	ldr	r1, [pc, #92]	; (800c5b4 <netif_do_set_ipaddr+0x8c>)
 800c556:	4818      	ldr	r0, [pc, #96]	; (800c5b8 <netif_do_set_ipaddr+0x90>)
 800c558:	f006 fc26 	bl	8012da8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3304      	adds	r3, #4
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	429a      	cmp	r2, r3
 800c568:	d01c      	beq.n	800c5a4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3304      	adds	r3, #4
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c57a:	f107 0314 	add.w	r3, r7, #20
 800c57e:	4619      	mov	r1, r3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7ff ffbf 	bl	800c504 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d002      	beq.n	800c592 <netif_do_set_ipaddr+0x6a>
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	e000      	b.n	800c594 <netif_do_set_ipaddr+0x6c>
 800c592:	2300      	movs	r3, #0
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c598:	2101      	movs	r1, #1
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f000 f8d2 	bl	800c744 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	e000      	b.n	800c5a6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	08014ac4 	.word	0x08014ac4
 800c5b4:	08014bfc 	.word	0x08014bfc
 800c5b8:	08014b34 	.word	0x08014b34

0800c5bc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	3308      	adds	r3, #8
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d00a      	beq.n	800c5ec <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <netif_do_set_netmask+0x26>
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	e000      	b.n	800c5e4 <netif_do_set_netmask+0x28>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e000      	b.n	800c5ee <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b085      	sub	sp, #20
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	60f8      	str	r0, [r7, #12]
 800c602:	60b9      	str	r1, [r7, #8]
 800c604:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	330c      	adds	r3, #12
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	429a      	cmp	r2, r3
 800c612:	d00a      	beq.n	800c62a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d002      	beq.n	800c620 <netif_do_set_gw+0x26>
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	e000      	b.n	800c622 <netif_do_set_gw+0x28>
 800c620:	2300      	movs	r3, #0
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c626:	2301      	movs	r3, #1
 800c628:	e000      	b.n	800c62c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b088      	sub	sp, #32
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
 800c644:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c646:	2300      	movs	r3, #0
 800c648:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d101      	bne.n	800c658 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c654:	4b1c      	ldr	r3, [pc, #112]	; (800c6c8 <netif_set_addr+0x90>)
 800c656:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c65e:	4b1a      	ldr	r3, [pc, #104]	; (800c6c8 <netif_set_addr+0x90>)
 800c660:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d101      	bne.n	800c66c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c668:	4b17      	ldr	r3, [pc, #92]	; (800c6c8 <netif_set_addr+0x90>)
 800c66a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d003      	beq.n	800c67a <netif_set_addr+0x42>
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <netif_set_addr+0x46>
 800c67a:	2301      	movs	r3, #1
 800c67c:	e000      	b.n	800c680 <netif_set_addr+0x48>
 800c67e:	2300      	movs	r3, #0
 800c680:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d006      	beq.n	800c696 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c688:	f107 0310 	add.w	r3, r7, #16
 800c68c:	461a      	mov	r2, r3
 800c68e:	68b9      	ldr	r1, [r7, #8]
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f7ff ff49 	bl	800c528 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c696:	69fa      	ldr	r2, [r7, #28]
 800c698:	6879      	ldr	r1, [r7, #4]
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f7ff ff8e 	bl	800c5bc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c6a0:	69ba      	ldr	r2, [r7, #24]
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7ff ffa8 	bl	800c5fa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d106      	bne.n	800c6be <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c6b0:	f107 0310 	add.w	r3, r7, #16
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	68b9      	ldr	r1, [r7, #8]
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f7ff ff35 	bl	800c528 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c6be:	bf00      	nop
 800c6c0:	3720      	adds	r7, #32
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	08016b8c 	.word	0x08016b8c

0800c6cc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c6d4:	4a04      	ldr	r2, [pc, #16]	; (800c6e8 <netif_set_default+0x1c>)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c6da:	bf00      	nop
 800c6dc:	370c      	adds	r7, #12
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	24008178 	.word	0x24008178

0800c6ec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d107      	bne.n	800c70a <netif_set_up+0x1e>
 800c6fa:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <netif_set_up+0x4c>)
 800c6fc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c700:	490e      	ldr	r1, [pc, #56]	; (800c73c <netif_set_up+0x50>)
 800c702:	480f      	ldr	r0, [pc, #60]	; (800c740 <netif_set_up+0x54>)
 800c704:	f006 fb50 	bl	8012da8 <iprintf>
 800c708:	e013      	b.n	800c732 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10c      	bne.n	800c732 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c71e:	f043 0301 	orr.w	r3, r3, #1
 800c722:	b2da      	uxtb	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c72a:	2103      	movs	r1, #3
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f809 	bl	800c744 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	08014ac4 	.word	0x08014ac4
 800c73c:	08014c6c 	.word	0x08014c6c
 800c740:	08014b34 	.word	0x08014b34

0800c744 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	460b      	mov	r3, r1
 800c74e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d106      	bne.n	800c764 <netif_issue_reports+0x20>
 800c756:	4b18      	ldr	r3, [pc, #96]	; (800c7b8 <netif_issue_reports+0x74>)
 800c758:	f240 326d 	movw	r2, #877	; 0x36d
 800c75c:	4917      	ldr	r1, [pc, #92]	; (800c7bc <netif_issue_reports+0x78>)
 800c75e:	4818      	ldr	r0, [pc, #96]	; (800c7c0 <netif_issue_reports+0x7c>)
 800c760:	f006 fb22 	bl	8012da8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c76a:	f003 0304 	and.w	r3, r3, #4
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d01e      	beq.n	800c7b0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c778:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d017      	beq.n	800c7b0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c780:	78fb      	ldrb	r3, [r7, #3]
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	2b00      	cmp	r3, #0
 800c788:	d013      	beq.n	800c7b2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	3304      	adds	r3, #4
 800c78e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00e      	beq.n	800c7b2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c79a:	f003 0308 	and.w	r3, r3, #8
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d007      	beq.n	800c7b2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7fd fc4d 	bl	800a048 <etharp_request>
 800c7ae:	e000      	b.n	800c7b2 <netif_issue_reports+0x6e>
    return;
 800c7b0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	08014ac4 	.word	0x08014ac4
 800c7bc:	08014c88 	.word	0x08014c88
 800c7c0:	08014b34 	.word	0x08014b34

0800c7c4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d107      	bne.n	800c7e2 <netif_set_down+0x1e>
 800c7d2:	4b12      	ldr	r3, [pc, #72]	; (800c81c <netif_set_down+0x58>)
 800c7d4:	f240 329b 	movw	r2, #923	; 0x39b
 800c7d8:	4911      	ldr	r1, [pc, #68]	; (800c820 <netif_set_down+0x5c>)
 800c7da:	4812      	ldr	r0, [pc, #72]	; (800c824 <netif_set_down+0x60>)
 800c7dc:	f006 fae4 	bl	8012da8 <iprintf>
 800c7e0:	e019      	b.n	800c816 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7e8:	f003 0301 	and.w	r3, r3, #1
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d012      	beq.n	800c816 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7f6:	f023 0301 	bic.w	r3, r3, #1
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c808:	f003 0308 	and.w	r3, r3, #8
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d002      	beq.n	800c816 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7fc ffb5 	bl	8009780 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	08014ac4 	.word	0x08014ac4
 800c820:	08014cac 	.word	0x08014cac
 800c824:	08014b34 	.word	0x08014b34

0800c828 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	61da      	str	r2, [r3, #28]
  }
}
 800c83e:	bf00      	nop
 800c840:	370c      	adds	r7, #12
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr

0800c84a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c84a:	b480      	push	{r7}
 800c84c:	b085      	sub	sp, #20
 800c84e:	af00      	add	r7, sp, #0
 800c850:	60f8      	str	r0, [r7, #12]
 800c852:	60b9      	str	r1, [r7, #8]
 800c854:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c856:	f06f 030b 	mvn.w	r3, #11
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
	...

0800c868 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	4603      	mov	r3, r0
 800c870:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c872:	79fb      	ldrb	r3, [r7, #7]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d013      	beq.n	800c8a0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c878:	4b0d      	ldr	r3, [pc, #52]	; (800c8b0 <netif_get_by_index+0x48>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	60fb      	str	r3, [r7, #12]
 800c87e:	e00c      	b.n	800c89a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c886:	3301      	adds	r3, #1
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	79fa      	ldrb	r2, [r7, #7]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d101      	bne.n	800c894 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	e006      	b.n	800c8a2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	60fb      	str	r3, [r7, #12]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1ef      	bne.n	800c880 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3714      	adds	r7, #20
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	24008174 	.word	0x24008174

0800c8b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c8ba:	4b0c      	ldr	r3, [pc, #48]	; (800c8ec <pbuf_free_ooseq+0x38>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c8c0:	4b0b      	ldr	r3, [pc, #44]	; (800c8f0 <pbuf_free_ooseq+0x3c>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	607b      	str	r3, [r7, #4]
 800c8c6:	e00a      	b.n	800c8de <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d003      	beq.n	800c8d8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f002 f945 	bl	800eb60 <tcp_free_ooseq>
      return;
 800c8d6:	e005      	b.n	800c8e4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	607b      	str	r3, [r7, #4]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1f1      	bne.n	800c8c8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	2400817d 	.word	0x2400817d
 800c8f0:	2400818c 	.word	0x2400818c

0800c8f4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800c8f8:	4b03      	ldr	r3, [pc, #12]	; (800c908 <pbuf_pool_is_empty+0x14>)
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c8fe:	bf00      	nop
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr
 800c908:	2400817d 	.word	0x2400817d

0800c90c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	4611      	mov	r1, r2
 800c918:	461a      	mov	r2, r3
 800c91a:	460b      	mov	r3, r1
 800c91c:	80fb      	strh	r3, [r7, #6]
 800c91e:	4613      	mov	r3, r2
 800c920:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	88fa      	ldrh	r2, [r7, #6]
 800c932:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	88ba      	ldrh	r2, [r7, #4]
 800c938:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c93a:	8b3b      	ldrh	r3, [r7, #24]
 800c93c:	b2da      	uxtb	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	7f3a      	ldrb	r2, [r7, #28]
 800c946:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2201      	movs	r2, #1
 800c94c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2200      	movs	r2, #0
 800c952:	73da      	strb	r2, [r3, #15]
}
 800c954:	bf00      	nop
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b08c      	sub	sp, #48	; 0x30
 800c964:	af02      	add	r7, sp, #8
 800c966:	4603      	mov	r3, r0
 800c968:	71fb      	strb	r3, [r7, #7]
 800c96a:	460b      	mov	r3, r1
 800c96c:	80bb      	strh	r3, [r7, #4]
 800c96e:	4613      	mov	r3, r2
 800c970:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c976:	887b      	ldrh	r3, [r7, #2]
 800c978:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c97c:	d07f      	beq.n	800ca7e <pbuf_alloc+0x11e>
 800c97e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c982:	f300 80c8 	bgt.w	800cb16 <pbuf_alloc+0x1b6>
 800c986:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c98a:	d010      	beq.n	800c9ae <pbuf_alloc+0x4e>
 800c98c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c990:	f300 80c1 	bgt.w	800cb16 <pbuf_alloc+0x1b6>
 800c994:	2b01      	cmp	r3, #1
 800c996:	d002      	beq.n	800c99e <pbuf_alloc+0x3e>
 800c998:	2b41      	cmp	r3, #65	; 0x41
 800c99a:	f040 80bc 	bne.w	800cb16 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c99e:	887a      	ldrh	r2, [r7, #2]
 800c9a0:	88bb      	ldrh	r3, [r7, #4]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	f000 f8d1 	bl	800cb4c <pbuf_alloc_reference>
 800c9aa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c9ac:	e0bd      	b.n	800cb2a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c9b6:	88bb      	ldrh	r3, [r7, #4]
 800c9b8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c9ba:	2008      	movs	r0, #8
 800c9bc:	f7ff fc2a 	bl	800c214 <memp_malloc>
 800c9c0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d109      	bne.n	800c9dc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c9c8:	f7ff ff94 	bl	800c8f4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d002      	beq.n	800c9d8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c9d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9d4:	f000 faa8 	bl	800cf28 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	e0a7      	b.n	800cb2c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c9dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9de:	3303      	adds	r3, #3
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	f023 0303 	bic.w	r3, r3, #3
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	8b7a      	ldrh	r2, [r7, #26]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	bf28      	it	cs
 800c9f4:	4613      	movcs	r3, r2
 800c9f6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c9f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9fa:	3310      	adds	r3, #16
 800c9fc:	693a      	ldr	r2, [r7, #16]
 800c9fe:	4413      	add	r3, r2
 800ca00:	3303      	adds	r3, #3
 800ca02:	f023 0303 	bic.w	r3, r3, #3
 800ca06:	4618      	mov	r0, r3
 800ca08:	89f9      	ldrh	r1, [r7, #14]
 800ca0a:	8b7a      	ldrh	r2, [r7, #26]
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9301      	str	r3, [sp, #4]
 800ca10:	887b      	ldrh	r3, [r7, #2]
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	460b      	mov	r3, r1
 800ca16:	4601      	mov	r1, r0
 800ca18:	6938      	ldr	r0, [r7, #16]
 800ca1a:	f7ff ff77 	bl	800c90c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	f003 0303 	and.w	r3, r3, #3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d006      	beq.n	800ca38 <pbuf_alloc+0xd8>
 800ca2a:	4b42      	ldr	r3, [pc, #264]	; (800cb34 <pbuf_alloc+0x1d4>)
 800ca2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca30:	4941      	ldr	r1, [pc, #260]	; (800cb38 <pbuf_alloc+0x1d8>)
 800ca32:	4842      	ldr	r0, [pc, #264]	; (800cb3c <pbuf_alloc+0x1dc>)
 800ca34:	f006 f9b8 	bl	8012da8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ca38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca3a:	3303      	adds	r3, #3
 800ca3c:	f023 0303 	bic.w	r3, r3, #3
 800ca40:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ca44:	d106      	bne.n	800ca54 <pbuf_alloc+0xf4>
 800ca46:	4b3b      	ldr	r3, [pc, #236]	; (800cb34 <pbuf_alloc+0x1d4>)
 800ca48:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ca4c:	493c      	ldr	r1, [pc, #240]	; (800cb40 <pbuf_alloc+0x1e0>)
 800ca4e:	483b      	ldr	r0, [pc, #236]	; (800cb3c <pbuf_alloc+0x1dc>)
 800ca50:	f006 f9aa 	bl	8012da8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ca54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d102      	bne.n	800ca60 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca5e:	e002      	b.n	800ca66 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	693a      	ldr	r2, [r7, #16]
 800ca64:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ca6a:	8b7a      	ldrh	r2, [r7, #26]
 800ca6c:	89fb      	ldrh	r3, [r7, #14]
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ca76:	8b7b      	ldrh	r3, [r7, #26]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d19e      	bne.n	800c9ba <pbuf_alloc+0x5a>
      break;
 800ca7c:	e055      	b.n	800cb2a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ca7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca80:	3303      	adds	r3, #3
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	f023 0303 	bic.w	r3, r3, #3
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	88bb      	ldrh	r3, [r7, #4]
 800ca8c:	3303      	adds	r3, #3
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	f023 0303 	bic.w	r3, r3, #3
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	4413      	add	r3, r2
 800ca98:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ca9a:	8b3b      	ldrh	r3, [r7, #24]
 800ca9c:	3310      	adds	r3, #16
 800ca9e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800caa0:	8b3a      	ldrh	r2, [r7, #24]
 800caa2:	88bb      	ldrh	r3, [r7, #4]
 800caa4:	3303      	adds	r3, #3
 800caa6:	f023 0303 	bic.w	r3, r3, #3
 800caaa:	429a      	cmp	r2, r3
 800caac:	d306      	bcc.n	800cabc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800caae:	8afa      	ldrh	r2, [r7, #22]
 800cab0:	88bb      	ldrh	r3, [r7, #4]
 800cab2:	3303      	adds	r3, #3
 800cab4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cab8:	429a      	cmp	r2, r3
 800caba:	d201      	bcs.n	800cac0 <pbuf_alloc+0x160>
        return NULL;
 800cabc:	2300      	movs	r3, #0
 800cabe:	e035      	b.n	800cb2c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cac0:	8afb      	ldrh	r3, [r7, #22]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7ff f9ee 	bl	800bea4 <mem_malloc>
 800cac8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800caca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d101      	bne.n	800cad4 <pbuf_alloc+0x174>
        return NULL;
 800cad0:	2300      	movs	r3, #0
 800cad2:	e02b      	b.n	800cb2c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cad4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cad6:	3310      	adds	r3, #16
 800cad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cada:	4413      	add	r3, r2
 800cadc:	3303      	adds	r3, #3
 800cade:	f023 0303 	bic.w	r3, r3, #3
 800cae2:	4618      	mov	r0, r3
 800cae4:	88b9      	ldrh	r1, [r7, #4]
 800cae6:	88ba      	ldrh	r2, [r7, #4]
 800cae8:	2300      	movs	r3, #0
 800caea:	9301      	str	r3, [sp, #4]
 800caec:	887b      	ldrh	r3, [r7, #2]
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	460b      	mov	r3, r1
 800caf2:	4601      	mov	r1, r0
 800caf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caf6:	f7ff ff09 	bl	800c90c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	f003 0303 	and.w	r3, r3, #3
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d010      	beq.n	800cb28 <pbuf_alloc+0x1c8>
 800cb06:	4b0b      	ldr	r3, [pc, #44]	; (800cb34 <pbuf_alloc+0x1d4>)
 800cb08:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cb0c:	490d      	ldr	r1, [pc, #52]	; (800cb44 <pbuf_alloc+0x1e4>)
 800cb0e:	480b      	ldr	r0, [pc, #44]	; (800cb3c <pbuf_alloc+0x1dc>)
 800cb10:	f006 f94a 	bl	8012da8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cb14:	e008      	b.n	800cb28 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cb16:	4b07      	ldr	r3, [pc, #28]	; (800cb34 <pbuf_alloc+0x1d4>)
 800cb18:	f240 1227 	movw	r2, #295	; 0x127
 800cb1c:	490a      	ldr	r1, [pc, #40]	; (800cb48 <pbuf_alloc+0x1e8>)
 800cb1e:	4807      	ldr	r0, [pc, #28]	; (800cb3c <pbuf_alloc+0x1dc>)
 800cb20:	f006 f942 	bl	8012da8 <iprintf>
      return NULL;
 800cb24:	2300      	movs	r3, #0
 800cb26:	e001      	b.n	800cb2c <pbuf_alloc+0x1cc>
      break;
 800cb28:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3728      	adds	r7, #40	; 0x28
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	08014d14 	.word	0x08014d14
 800cb38:	08014d68 	.word	0x08014d68
 800cb3c:	08014d98 	.word	0x08014d98
 800cb40:	08014dc0 	.word	0x08014dc0
 800cb44:	08014df4 	.word	0x08014df4
 800cb48:	08014e20 	.word	0x08014e20

0800cb4c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b086      	sub	sp, #24
 800cb50:	af02      	add	r7, sp, #8
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	460b      	mov	r3, r1
 800cb56:	807b      	strh	r3, [r7, #2]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cb5c:	883b      	ldrh	r3, [r7, #0]
 800cb5e:	2b41      	cmp	r3, #65	; 0x41
 800cb60:	d009      	beq.n	800cb76 <pbuf_alloc_reference+0x2a>
 800cb62:	883b      	ldrh	r3, [r7, #0]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d006      	beq.n	800cb76 <pbuf_alloc_reference+0x2a>
 800cb68:	4b0f      	ldr	r3, [pc, #60]	; (800cba8 <pbuf_alloc_reference+0x5c>)
 800cb6a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cb6e:	490f      	ldr	r1, [pc, #60]	; (800cbac <pbuf_alloc_reference+0x60>)
 800cb70:	480f      	ldr	r0, [pc, #60]	; (800cbb0 <pbuf_alloc_reference+0x64>)
 800cb72:	f006 f919 	bl	8012da8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cb76:	2007      	movs	r0, #7
 800cb78:	f7ff fb4c 	bl	800c214 <memp_malloc>
 800cb7c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cb84:	2300      	movs	r3, #0
 800cb86:	e00b      	b.n	800cba0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cb88:	8879      	ldrh	r1, [r7, #2]
 800cb8a:	887a      	ldrh	r2, [r7, #2]
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	9301      	str	r3, [sp, #4]
 800cb90:	883b      	ldrh	r3, [r7, #0]
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	460b      	mov	r3, r1
 800cb96:	6879      	ldr	r1, [r7, #4]
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f7ff feb7 	bl	800c90c <pbuf_init_alloced_pbuf>
  return p;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	08014d14 	.word	0x08014d14
 800cbac:	08014e3c 	.word	0x08014e3c
 800cbb0:	08014d98 	.word	0x08014d98

0800cbb4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b088      	sub	sp, #32
 800cbb8:	af02      	add	r7, sp, #8
 800cbba:	607b      	str	r3, [r7, #4]
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	73fb      	strb	r3, [r7, #15]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	81bb      	strh	r3, [r7, #12]
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cbcc:	8a7b      	ldrh	r3, [r7, #18]
 800cbce:	3303      	adds	r3, #3
 800cbd0:	f023 0203 	bic.w	r2, r3, #3
 800cbd4:	89bb      	ldrh	r3, [r7, #12]
 800cbd6:	441a      	add	r2, r3
 800cbd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d901      	bls.n	800cbe2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	e018      	b.n	800cc14 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cbe2:	6a3b      	ldr	r3, [r7, #32]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d007      	beq.n	800cbf8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cbe8:	8a7b      	ldrh	r3, [r7, #18]
 800cbea:	3303      	adds	r3, #3
 800cbec:	f023 0303 	bic.w	r3, r3, #3
 800cbf0:	6a3a      	ldr	r2, [r7, #32]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	617b      	str	r3, [r7, #20]
 800cbf6:	e001      	b.n	800cbfc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	89b9      	ldrh	r1, [r7, #12]
 800cc00:	89ba      	ldrh	r2, [r7, #12]
 800cc02:	2302      	movs	r3, #2
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	897b      	ldrh	r3, [r7, #10]
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	6979      	ldr	r1, [r7, #20]
 800cc0e:	f7ff fe7d 	bl	800c90c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cc12:	687b      	ldr	r3, [r7, #4]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	460b      	mov	r3, r1
 800cc26:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d106      	bne.n	800cc3c <pbuf_realloc+0x20>
 800cc2e:	4b3a      	ldr	r3, [pc, #232]	; (800cd18 <pbuf_realloc+0xfc>)
 800cc30:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cc34:	4939      	ldr	r1, [pc, #228]	; (800cd1c <pbuf_realloc+0x100>)
 800cc36:	483a      	ldr	r0, [pc, #232]	; (800cd20 <pbuf_realloc+0x104>)
 800cc38:	f006 f8b6 	bl	8012da8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	891b      	ldrh	r3, [r3, #8]
 800cc40:	887a      	ldrh	r2, [r7, #2]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d263      	bcs.n	800cd0e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	891a      	ldrh	r2, [r3, #8]
 800cc4a:	887b      	ldrh	r3, [r7, #2]
 800cc4c:	1ad3      	subs	r3, r2, r3
 800cc4e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cc50:	887b      	ldrh	r3, [r7, #2]
 800cc52:	817b      	strh	r3, [r7, #10]
  q = p;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cc58:	e018      	b.n	800cc8c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	895b      	ldrh	r3, [r3, #10]
 800cc5e:	897a      	ldrh	r2, [r7, #10]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	891a      	ldrh	r2, [r3, #8]
 800cc68:	893b      	ldrh	r3, [r7, #8]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d106      	bne.n	800cc8c <pbuf_realloc+0x70>
 800cc7e:	4b26      	ldr	r3, [pc, #152]	; (800cd18 <pbuf_realloc+0xfc>)
 800cc80:	f240 12af 	movw	r2, #431	; 0x1af
 800cc84:	4927      	ldr	r1, [pc, #156]	; (800cd24 <pbuf_realloc+0x108>)
 800cc86:	4826      	ldr	r0, [pc, #152]	; (800cd20 <pbuf_realloc+0x104>)
 800cc88:	f006 f88e 	bl	8012da8 <iprintf>
  while (rem_len > q->len) {
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	895b      	ldrh	r3, [r3, #10]
 800cc90:	897a      	ldrh	r2, [r7, #10]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d8e1      	bhi.n	800cc5a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	7b1b      	ldrb	r3, [r3, #12]
 800cc9a:	f003 030f 	and.w	r3, r3, #15
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d121      	bne.n	800cce6 <pbuf_realloc+0xca>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	895b      	ldrh	r3, [r3, #10]
 800cca6:	897a      	ldrh	r2, [r7, #10]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d01c      	beq.n	800cce6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	7b5b      	ldrb	r3, [r3, #13]
 800ccb0:	f003 0302 	and.w	r3, r3, #2
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d116      	bne.n	800cce6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	685a      	ldr	r2, [r3, #4]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	897b      	ldrh	r3, [r7, #10]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	4619      	mov	r1, r3
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f7fe ffee 	bl	800bcac <mem_trim>
 800ccd0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d106      	bne.n	800cce6 <pbuf_realloc+0xca>
 800ccd8:	4b0f      	ldr	r3, [pc, #60]	; (800cd18 <pbuf_realloc+0xfc>)
 800ccda:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ccde:	4912      	ldr	r1, [pc, #72]	; (800cd28 <pbuf_realloc+0x10c>)
 800cce0:	480f      	ldr	r0, [pc, #60]	; (800cd20 <pbuf_realloc+0x104>)
 800cce2:	f006 f861 	bl	8012da8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	897a      	ldrh	r2, [r7, #10]
 800ccea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	895a      	ldrh	r2, [r3, #10]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d004      	beq.n	800cd06 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f911 	bl	800cf28 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	e000      	b.n	800cd10 <pbuf_realloc+0xf4>
    return;
 800cd0e:	bf00      	nop

}
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	08014d14 	.word	0x08014d14
 800cd1c:	08014e50 	.word	0x08014e50
 800cd20:	08014d98 	.word	0x08014d98
 800cd24:	08014e68 	.word	0x08014e68
 800cd28:	08014e80 	.word	0x08014e80

0800cd2c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	4613      	mov	r3, r2
 800cd38:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d106      	bne.n	800cd4e <pbuf_add_header_impl+0x22>
 800cd40:	4b2b      	ldr	r3, [pc, #172]	; (800cdf0 <pbuf_add_header_impl+0xc4>)
 800cd42:	f240 12df 	movw	r2, #479	; 0x1df
 800cd46:	492b      	ldr	r1, [pc, #172]	; (800cdf4 <pbuf_add_header_impl+0xc8>)
 800cd48:	482b      	ldr	r0, [pc, #172]	; (800cdf8 <pbuf_add_header_impl+0xcc>)
 800cd4a:	f006 f82d 	bl	8012da8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d003      	beq.n	800cd5c <pbuf_add_header_impl+0x30>
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd5a:	d301      	bcc.n	800cd60 <pbuf_add_header_impl+0x34>
    return 1;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e043      	b.n	800cde8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <pbuf_add_header_impl+0x3e>
    return 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	e03e      	b.n	800cde8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	891a      	ldrh	r2, [r3, #8]
 800cd72:	8a7b      	ldrh	r3, [r7, #18]
 800cd74:	4413      	add	r3, r2
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	8a7a      	ldrh	r2, [r7, #18]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d901      	bls.n	800cd82 <pbuf_add_header_impl+0x56>
    return 1;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e032      	b.n	800cde8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	7b1b      	ldrb	r3, [r3, #12]
 800cd86:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cd88:	8a3b      	ldrh	r3, [r7, #16]
 800cd8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00c      	beq.n	800cdac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	685a      	ldr	r2, [r3, #4]
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	425b      	negs	r3, r3
 800cd9a:	4413      	add	r3, r2
 800cd9c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	3310      	adds	r3, #16
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d20d      	bcs.n	800cdc4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	e01d      	b.n	800cde8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cdac:	79fb      	ldrb	r3, [r7, #7]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d006      	beq.n	800cdc0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	685a      	ldr	r2, [r3, #4]
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	425b      	negs	r3, r3
 800cdba:	4413      	add	r3, r2
 800cdbc:	617b      	str	r3, [r7, #20]
 800cdbe:	e001      	b.n	800cdc4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e011      	b.n	800cde8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	895a      	ldrh	r2, [r3, #10]
 800cdce:	8a7b      	ldrh	r3, [r7, #18]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	891a      	ldrh	r2, [r3, #8]
 800cddc:	8a7b      	ldrh	r3, [r7, #18]
 800cdde:	4413      	add	r3, r2
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	811a      	strh	r2, [r3, #8]


  return 0;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	08014d14 	.word	0x08014d14
 800cdf4:	08014e9c 	.word	0x08014e9c
 800cdf8:	08014d98 	.word	0x08014d98

0800cdfc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ce06:	2200      	movs	r2, #0
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff ff8e 	bl	800cd2c <pbuf_add_header_impl>
 800ce10:	4603      	mov	r3, r0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
	...

0800ce1c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d106      	bne.n	800ce3a <pbuf_remove_header+0x1e>
 800ce2c:	4b20      	ldr	r3, [pc, #128]	; (800ceb0 <pbuf_remove_header+0x94>)
 800ce2e:	f240 224b 	movw	r2, #587	; 0x24b
 800ce32:	4920      	ldr	r1, [pc, #128]	; (800ceb4 <pbuf_remove_header+0x98>)
 800ce34:	4820      	ldr	r0, [pc, #128]	; (800ceb8 <pbuf_remove_header+0x9c>)
 800ce36:	f005 ffb7 	bl	8012da8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d003      	beq.n	800ce48 <pbuf_remove_header+0x2c>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce46:	d301      	bcc.n	800ce4c <pbuf_remove_header+0x30>
    return 1;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e02c      	b.n	800cea6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <pbuf_remove_header+0x3a>
    return 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	e027      	b.n	800cea6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	895b      	ldrh	r3, [r3, #10]
 800ce5e:	89fa      	ldrh	r2, [r7, #14]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d908      	bls.n	800ce76 <pbuf_remove_header+0x5a>
 800ce64:	4b12      	ldr	r3, [pc, #72]	; (800ceb0 <pbuf_remove_header+0x94>)
 800ce66:	f240 2255 	movw	r2, #597	; 0x255
 800ce6a:	4914      	ldr	r1, [pc, #80]	; (800cebc <pbuf_remove_header+0xa0>)
 800ce6c:	4812      	ldr	r0, [pc, #72]	; (800ceb8 <pbuf_remove_header+0x9c>)
 800ce6e:	f005 ff9b 	bl	8012da8 <iprintf>
 800ce72:	2301      	movs	r3, #1
 800ce74:	e017      	b.n	800cea6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	685a      	ldr	r2, [r3, #4]
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	441a      	add	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	895a      	ldrh	r2, [r3, #10]
 800ce8c:	89fb      	ldrh	r3, [r7, #14]
 800ce8e:	1ad3      	subs	r3, r2, r3
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	891a      	ldrh	r2, [r3, #8]
 800ce9a:	89fb      	ldrh	r3, [r7, #14]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	08014d14 	.word	0x08014d14
 800ceb4:	08014e9c 	.word	0x08014e9c
 800ceb8:	08014d98 	.word	0x08014d98
 800cebc:	08014ea8 	.word	0x08014ea8

0800cec0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	807b      	strh	r3, [r7, #2]
 800cecc:	4613      	mov	r3, r2
 800cece:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ced0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	da08      	bge.n	800ceea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ced8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cedc:	425b      	negs	r3, r3
 800cede:	4619      	mov	r1, r3
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff ff9b 	bl	800ce1c <pbuf_remove_header>
 800cee6:	4603      	mov	r3, r0
 800cee8:	e007      	b.n	800cefa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ceea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ceee:	787a      	ldrb	r2, [r7, #1]
 800cef0:	4619      	mov	r1, r3
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f7ff ff1a 	bl	800cd2c <pbuf_add_header_impl>
 800cef8:	4603      	mov	r3, r0
  }
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b082      	sub	sp, #8
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cf0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf12:	2201      	movs	r2, #1
 800cf14:	4619      	mov	r1, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f7ff ffd2 	bl	800cec0 <pbuf_header_impl>
 800cf1c:	4603      	mov	r3, r0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
	...

0800cf28 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10b      	bne.n	800cf4e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <pbuf_free+0x22>
 800cf3c:	4b38      	ldr	r3, [pc, #224]	; (800d020 <pbuf_free+0xf8>)
 800cf3e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cf42:	4938      	ldr	r1, [pc, #224]	; (800d024 <pbuf_free+0xfc>)
 800cf44:	4838      	ldr	r0, [pc, #224]	; (800d028 <pbuf_free+0x100>)
 800cf46:	f005 ff2f 	bl	8012da8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	e063      	b.n	800d016 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cf52:	e05c      	b.n	800d00e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	7b9b      	ldrb	r3, [r3, #14]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d106      	bne.n	800cf6a <pbuf_free+0x42>
 800cf5c:	4b30      	ldr	r3, [pc, #192]	; (800d020 <pbuf_free+0xf8>)
 800cf5e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cf62:	4932      	ldr	r1, [pc, #200]	; (800d02c <pbuf_free+0x104>)
 800cf64:	4830      	ldr	r0, [pc, #192]	; (800d028 <pbuf_free+0x100>)
 800cf66:	f005 ff1f 	bl	8012da8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	7b9b      	ldrb	r3, [r3, #14]
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	b2da      	uxtb	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	739a      	strb	r2, [r3, #14]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	7b9b      	ldrb	r3, [r3, #14]
 800cf7a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cf7c:	7dbb      	ldrb	r3, [r7, #22]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d143      	bne.n	800d00a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	7b1b      	ldrb	r3, [r3, #12]
 800cf8c:	f003 030f 	and.w	r3, r3, #15
 800cf90:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	7b5b      	ldrb	r3, [r3, #13]
 800cf96:	f003 0302 	and.w	r3, r3, #2
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d011      	beq.n	800cfc2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	691b      	ldr	r3, [r3, #16]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d106      	bne.n	800cfb8 <pbuf_free+0x90>
 800cfaa:	4b1d      	ldr	r3, [pc, #116]	; (800d020 <pbuf_free+0xf8>)
 800cfac:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cfb0:	491f      	ldr	r1, [pc, #124]	; (800d030 <pbuf_free+0x108>)
 800cfb2:	481d      	ldr	r0, [pc, #116]	; (800d028 <pbuf_free+0x100>)
 800cfb4:	f005 fef8 	bl	8012da8 <iprintf>
        pc->custom_free_function(p);
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	4798      	blx	r3
 800cfc0:	e01d      	b.n	800cffe <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d104      	bne.n	800cfd2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800cfc8:	6879      	ldr	r1, [r7, #4]
 800cfca:	2008      	movs	r0, #8
 800cfcc:	f7ff f992 	bl	800c2f4 <memp_free>
 800cfd0:	e015      	b.n	800cffe <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cfd2:	7bfb      	ldrb	r3, [r7, #15]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d104      	bne.n	800cfe2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800cfd8:	6879      	ldr	r1, [r7, #4]
 800cfda:	2007      	movs	r0, #7
 800cfdc:	f7ff f98a 	bl	800c2f4 <memp_free>
 800cfe0:	e00d      	b.n	800cffe <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cfe2:	7bfb      	ldrb	r3, [r7, #15]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d103      	bne.n	800cff0 <pbuf_free+0xc8>
          mem_free(p);
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f7fe fdf5 	bl	800bbd8 <mem_free>
 800cfee:	e006      	b.n	800cffe <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cff0:	4b0b      	ldr	r3, [pc, #44]	; (800d020 <pbuf_free+0xf8>)
 800cff2:	f240 320f 	movw	r2, #783	; 0x30f
 800cff6:	490f      	ldr	r1, [pc, #60]	; (800d034 <pbuf_free+0x10c>)
 800cff8:	480b      	ldr	r0, [pc, #44]	; (800d028 <pbuf_free+0x100>)
 800cffa:	f005 fed5 	bl	8012da8 <iprintf>
        }
      }
      count++;
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
 800d000:	3301      	adds	r3, #1
 800d002:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	607b      	str	r3, [r7, #4]
 800d008:	e001      	b.n	800d00e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d00a:	2300      	movs	r3, #0
 800d00c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d19f      	bne.n	800cf54 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d014:	7dfb      	ldrb	r3, [r7, #23]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3718      	adds	r7, #24
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	08014d14 	.word	0x08014d14
 800d024:	08014e9c 	.word	0x08014e9c
 800d028:	08014d98 	.word	0x08014d98
 800d02c:	08014ec8 	.word	0x08014ec8
 800d030:	08014ee0 	.word	0x08014ee0
 800d034:	08014f04 	.word	0x08014f04

0800d038 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d038:	b480      	push	{r7}
 800d03a:	b085      	sub	sp, #20
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d040:	2300      	movs	r3, #0
 800d042:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d044:	e005      	b.n	800d052 <pbuf_clen+0x1a>
    ++len;
 800d046:	89fb      	ldrh	r3, [r7, #14]
 800d048:	3301      	adds	r3, #1
 800d04a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1f6      	bne.n	800d046 <pbuf_clen+0xe>
  }
  return len;
 800d058:	89fb      	ldrh	r3, [r7, #14]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3714      	adds	r7, #20
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
	...

0800d068 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d010      	beq.n	800d098 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	7b9b      	ldrb	r3, [r3, #14]
 800d07a:	3301      	adds	r3, #1
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7b9b      	ldrb	r3, [r3, #14]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d106      	bne.n	800d098 <pbuf_ref+0x30>
 800d08a:	4b05      	ldr	r3, [pc, #20]	; (800d0a0 <pbuf_ref+0x38>)
 800d08c:	f240 3242 	movw	r2, #834	; 0x342
 800d090:	4904      	ldr	r1, [pc, #16]	; (800d0a4 <pbuf_ref+0x3c>)
 800d092:	4805      	ldr	r0, [pc, #20]	; (800d0a8 <pbuf_ref+0x40>)
 800d094:	f005 fe88 	bl	8012da8 <iprintf>
  }
}
 800d098:	bf00      	nop
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	08014d14 	.word	0x08014d14
 800d0a4:	08014f18 	.word	0x08014f18
 800d0a8:	08014d98 	.word	0x08014d98

0800d0ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <pbuf_cat+0x16>
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d107      	bne.n	800d0d2 <pbuf_cat+0x26>
 800d0c2:	4b20      	ldr	r3, [pc, #128]	; (800d144 <pbuf_cat+0x98>)
 800d0c4:	f240 3259 	movw	r2, #857	; 0x359
 800d0c8:	491f      	ldr	r1, [pc, #124]	; (800d148 <pbuf_cat+0x9c>)
 800d0ca:	4820      	ldr	r0, [pc, #128]	; (800d14c <pbuf_cat+0xa0>)
 800d0cc:	f005 fe6c 	bl	8012da8 <iprintf>
 800d0d0:	e034      	b.n	800d13c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	60fb      	str	r3, [r7, #12]
 800d0d6:	e00a      	b.n	800d0ee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	891a      	ldrh	r2, [r3, #8]
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	891b      	ldrh	r3, [r3, #8]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	60fb      	str	r3, [r7, #12]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1f0      	bne.n	800d0d8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	891a      	ldrh	r2, [r3, #8]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	895b      	ldrh	r3, [r3, #10]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d006      	beq.n	800d110 <pbuf_cat+0x64>
 800d102:	4b10      	ldr	r3, [pc, #64]	; (800d144 <pbuf_cat+0x98>)
 800d104:	f240 3262 	movw	r2, #866	; 0x362
 800d108:	4911      	ldr	r1, [pc, #68]	; (800d150 <pbuf_cat+0xa4>)
 800d10a:	4810      	ldr	r0, [pc, #64]	; (800d14c <pbuf_cat+0xa0>)
 800d10c:	f005 fe4c 	bl	8012da8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d006      	beq.n	800d126 <pbuf_cat+0x7a>
 800d118:	4b0a      	ldr	r3, [pc, #40]	; (800d144 <pbuf_cat+0x98>)
 800d11a:	f240 3263 	movw	r2, #867	; 0x363
 800d11e:	490d      	ldr	r1, [pc, #52]	; (800d154 <pbuf_cat+0xa8>)
 800d120:	480a      	ldr	r0, [pc, #40]	; (800d14c <pbuf_cat+0xa0>)
 800d122:	f005 fe41 	bl	8012da8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	891a      	ldrh	r2, [r3, #8]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	891b      	ldrh	r3, [r3, #8]
 800d12e:	4413      	add	r3, r2
 800d130:	b29a      	uxth	r2, r3
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	683a      	ldr	r2, [r7, #0]
 800d13a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	08014d14 	.word	0x08014d14
 800d148:	08014f2c 	.word	0x08014f2c
 800d14c:	08014d98 	.word	0x08014d98
 800d150:	08014f64 	.word	0x08014f64
 800d154:	08014f94 	.word	0x08014f94

0800d158 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b086      	sub	sp, #24
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d162:	2300      	movs	r3, #0
 800d164:	617b      	str	r3, [r7, #20]
 800d166:	2300      	movs	r3, #0
 800d168:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d008      	beq.n	800d182 <pbuf_copy+0x2a>
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d005      	beq.n	800d182 <pbuf_copy+0x2a>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	891a      	ldrh	r2, [r3, #8]
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	891b      	ldrh	r3, [r3, #8]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d209      	bcs.n	800d196 <pbuf_copy+0x3e>
 800d182:	4b57      	ldr	r3, [pc, #348]	; (800d2e0 <pbuf_copy+0x188>)
 800d184:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d188:	4956      	ldr	r1, [pc, #344]	; (800d2e4 <pbuf_copy+0x18c>)
 800d18a:	4857      	ldr	r0, [pc, #348]	; (800d2e8 <pbuf_copy+0x190>)
 800d18c:	f005 fe0c 	bl	8012da8 <iprintf>
 800d190:	f06f 030f 	mvn.w	r3, #15
 800d194:	e09f      	b.n	800d2d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	895b      	ldrh	r3, [r3, #10]
 800d19a:	461a      	mov	r2, r3
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	1ad2      	subs	r2, r2, r3
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	895b      	ldrh	r3, [r3, #10]
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	1acb      	subs	r3, r1, r3
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d306      	bcc.n	800d1bc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	895b      	ldrh	r3, [r3, #10]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	60fb      	str	r3, [r7, #12]
 800d1ba:	e005      	b.n	800d1c8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	895b      	ldrh	r3, [r3, #10]
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	685a      	ldr	r2, [r3, #4]
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	18d0      	adds	r0, r2, r3
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	f005 fdce 	bl	8012d7c <memcpy>
    offset_to += len;
 800d1e0:	697a      	ldr	r2, [r7, #20]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d1e8:	693a      	ldr	r2, [r7, #16]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	895b      	ldrh	r3, [r3, #10]
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d906      	bls.n	800d20a <pbuf_copy+0xb2>
 800d1fc:	4b38      	ldr	r3, [pc, #224]	; (800d2e0 <pbuf_copy+0x188>)
 800d1fe:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d202:	493a      	ldr	r1, [pc, #232]	; (800d2ec <pbuf_copy+0x194>)
 800d204:	4838      	ldr	r0, [pc, #224]	; (800d2e8 <pbuf_copy+0x190>)
 800d206:	f005 fdcf 	bl	8012da8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	895b      	ldrh	r3, [r3, #10]
 800d20e:	461a      	mov	r2, r3
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	4293      	cmp	r3, r2
 800d214:	d906      	bls.n	800d224 <pbuf_copy+0xcc>
 800d216:	4b32      	ldr	r3, [pc, #200]	; (800d2e0 <pbuf_copy+0x188>)
 800d218:	f240 32da 	movw	r2, #986	; 0x3da
 800d21c:	4934      	ldr	r1, [pc, #208]	; (800d2f0 <pbuf_copy+0x198>)
 800d21e:	4832      	ldr	r0, [pc, #200]	; (800d2e8 <pbuf_copy+0x190>)
 800d220:	f005 fdc2 	bl	8012da8 <iprintf>
    if (offset_from >= p_from->len) {
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	895b      	ldrh	r3, [r3, #10]
 800d228:	461a      	mov	r2, r3
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d304      	bcc.n	800d23a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d230:	2300      	movs	r3, #0
 800d232:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	895b      	ldrh	r3, [r3, #10]
 800d23e:	461a      	mov	r2, r3
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	4293      	cmp	r3, r2
 800d244:	d114      	bne.n	800d270 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10c      	bne.n	800d270 <pbuf_copy+0x118>
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d009      	beq.n	800d270 <pbuf_copy+0x118>
 800d25c:	4b20      	ldr	r3, [pc, #128]	; (800d2e0 <pbuf_copy+0x188>)
 800d25e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d262:	4924      	ldr	r1, [pc, #144]	; (800d2f4 <pbuf_copy+0x19c>)
 800d264:	4820      	ldr	r0, [pc, #128]	; (800d2e8 <pbuf_copy+0x190>)
 800d266:	f005 fd9f 	bl	8012da8 <iprintf>
 800d26a:	f06f 030f 	mvn.w	r3, #15
 800d26e:	e032      	b.n	800d2d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d013      	beq.n	800d29e <pbuf_copy+0x146>
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	895a      	ldrh	r2, [r3, #10]
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	891b      	ldrh	r3, [r3, #8]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d10d      	bne.n	800d29e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d009      	beq.n	800d29e <pbuf_copy+0x146>
 800d28a:	4b15      	ldr	r3, [pc, #84]	; (800d2e0 <pbuf_copy+0x188>)
 800d28c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d290:	4919      	ldr	r1, [pc, #100]	; (800d2f8 <pbuf_copy+0x1a0>)
 800d292:	4815      	ldr	r0, [pc, #84]	; (800d2e8 <pbuf_copy+0x190>)
 800d294:	f005 fd88 	bl	8012da8 <iprintf>
 800d298:	f06f 0305 	mvn.w	r3, #5
 800d29c:	e01b      	b.n	800d2d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d013      	beq.n	800d2cc <pbuf_copy+0x174>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	895a      	ldrh	r2, [r3, #10]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	891b      	ldrh	r3, [r3, #8]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d10d      	bne.n	800d2cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d009      	beq.n	800d2cc <pbuf_copy+0x174>
 800d2b8:	4b09      	ldr	r3, [pc, #36]	; (800d2e0 <pbuf_copy+0x188>)
 800d2ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d2be:	490e      	ldr	r1, [pc, #56]	; (800d2f8 <pbuf_copy+0x1a0>)
 800d2c0:	4809      	ldr	r0, [pc, #36]	; (800d2e8 <pbuf_copy+0x190>)
 800d2c2:	f005 fd71 	bl	8012da8 <iprintf>
 800d2c6:	f06f 0305 	mvn.w	r3, #5
 800d2ca:	e004      	b.n	800d2d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f47f af61 	bne.w	800d196 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3718      	adds	r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	08014d14 	.word	0x08014d14
 800d2e4:	08014fe0 	.word	0x08014fe0
 800d2e8:	08014d98 	.word	0x08014d98
 800d2ec:	08015010 	.word	0x08015010
 800d2f0:	08015028 	.word	0x08015028
 800d2f4:	08015044 	.word	0x08015044
 800d2f8:	08015054 	.word	0x08015054

0800d2fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b088      	sub	sp, #32
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	4611      	mov	r1, r2
 800d308:	461a      	mov	r2, r3
 800d30a:	460b      	mov	r3, r1
 800d30c:	80fb      	strh	r3, [r7, #6]
 800d30e:	4613      	mov	r3, r2
 800d310:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d316:	2300      	movs	r3, #0
 800d318:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d108      	bne.n	800d332 <pbuf_copy_partial+0x36>
 800d320:	4b2b      	ldr	r3, [pc, #172]	; (800d3d0 <pbuf_copy_partial+0xd4>)
 800d322:	f240 420a 	movw	r2, #1034	; 0x40a
 800d326:	492b      	ldr	r1, [pc, #172]	; (800d3d4 <pbuf_copy_partial+0xd8>)
 800d328:	482b      	ldr	r0, [pc, #172]	; (800d3d8 <pbuf_copy_partial+0xdc>)
 800d32a:	f005 fd3d 	bl	8012da8 <iprintf>
 800d32e:	2300      	movs	r3, #0
 800d330:	e04a      	b.n	800d3c8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d108      	bne.n	800d34a <pbuf_copy_partial+0x4e>
 800d338:	4b25      	ldr	r3, [pc, #148]	; (800d3d0 <pbuf_copy_partial+0xd4>)
 800d33a:	f240 420b 	movw	r2, #1035	; 0x40b
 800d33e:	4927      	ldr	r1, [pc, #156]	; (800d3dc <pbuf_copy_partial+0xe0>)
 800d340:	4825      	ldr	r0, [pc, #148]	; (800d3d8 <pbuf_copy_partial+0xdc>)
 800d342:	f005 fd31 	bl	8012da8 <iprintf>
 800d346:	2300      	movs	r3, #0
 800d348:	e03e      	b.n	800d3c8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	61fb      	str	r3, [r7, #28]
 800d34e:	e034      	b.n	800d3ba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d350:	88bb      	ldrh	r3, [r7, #4]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00a      	beq.n	800d36c <pbuf_copy_partial+0x70>
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	895b      	ldrh	r3, [r3, #10]
 800d35a:	88ba      	ldrh	r2, [r7, #4]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d305      	bcc.n	800d36c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	895b      	ldrh	r3, [r3, #10]
 800d364:	88ba      	ldrh	r2, [r7, #4]
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	80bb      	strh	r3, [r7, #4]
 800d36a:	e023      	b.n	800d3b4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	895a      	ldrh	r2, [r3, #10]
 800d370:	88bb      	ldrh	r3, [r7, #4]
 800d372:	1ad3      	subs	r3, r2, r3
 800d374:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d376:	8b3a      	ldrh	r2, [r7, #24]
 800d378:	88fb      	ldrh	r3, [r7, #6]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d901      	bls.n	800d382 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d37e:	88fb      	ldrh	r3, [r7, #6]
 800d380:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d382:	8b7b      	ldrh	r3, [r7, #26]
 800d384:	68ba      	ldr	r2, [r7, #8]
 800d386:	18d0      	adds	r0, r2, r3
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	685a      	ldr	r2, [r3, #4]
 800d38c:	88bb      	ldrh	r3, [r7, #4]
 800d38e:	4413      	add	r3, r2
 800d390:	8b3a      	ldrh	r2, [r7, #24]
 800d392:	4619      	mov	r1, r3
 800d394:	f005 fcf2 	bl	8012d7c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d398:	8afa      	ldrh	r2, [r7, #22]
 800d39a:	8b3b      	ldrh	r3, [r7, #24]
 800d39c:	4413      	add	r3, r2
 800d39e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d3a0:	8b7a      	ldrh	r2, [r7, #26]
 800d3a2:	8b3b      	ldrh	r3, [r7, #24]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d3a8:	88fa      	ldrh	r2, [r7, #6]
 800d3aa:	8b3b      	ldrh	r3, [r7, #24]
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	61fb      	str	r3, [r7, #28]
 800d3ba:	88fb      	ldrh	r3, [r7, #6]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <pbuf_copy_partial+0xca>
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d1c4      	bne.n	800d350 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d3c6:	8afb      	ldrh	r3, [r7, #22]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3720      	adds	r7, #32
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	08014d14 	.word	0x08014d14
 800d3d4:	08015080 	.word	0x08015080
 800d3d8:	08014d98 	.word	0x08014d98
 800d3dc:	080150a0 	.word	0x080150a0

0800d3e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	603a      	str	r2, [r7, #0]
 800d3ea:	71fb      	strb	r3, [r7, #7]
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	8919      	ldrh	r1, [r3, #8]
 800d3f4:	88ba      	ldrh	r2, [r7, #4]
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7ff fab1 	bl	800c960 <pbuf_alloc>
 800d3fe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d101      	bne.n	800d40a <pbuf_clone+0x2a>
    return NULL;
 800d406:	2300      	movs	r3, #0
 800d408:	e011      	b.n	800d42e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f7ff fea3 	bl	800d158 <pbuf_copy>
 800d412:	4603      	mov	r3, r0
 800d414:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d416:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d006      	beq.n	800d42c <pbuf_clone+0x4c>
 800d41e:	4b06      	ldr	r3, [pc, #24]	; (800d438 <pbuf_clone+0x58>)
 800d420:	f240 5224 	movw	r2, #1316	; 0x524
 800d424:	4905      	ldr	r1, [pc, #20]	; (800d43c <pbuf_clone+0x5c>)
 800d426:	4806      	ldr	r0, [pc, #24]	; (800d440 <pbuf_clone+0x60>)
 800d428:	f005 fcbe 	bl	8012da8 <iprintf>
  return q;
 800d42c:	68fb      	ldr	r3, [r7, #12]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	08014d14 	.word	0x08014d14
 800d43c:	080151ac 	.word	0x080151ac
 800d440:	08014d98 	.word	0x08014d98

0800d444 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d448:	f005 fcc6 	bl	8012dd8 <rand>
 800d44c:	4603      	mov	r3, r0
 800d44e:	b29b      	uxth	r3, r3
 800d450:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d454:	b29b      	uxth	r3, r3
 800d456:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	4b01      	ldr	r3, [pc, #4]	; (800d464 <tcp_init+0x20>)
 800d45e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d460:	bf00      	nop
 800d462:	bd80      	pop	{r7, pc}
 800d464:	2400000e 	.word	0x2400000e

0800d468 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	7d1b      	ldrb	r3, [r3, #20]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d105      	bne.n	800d484 <tcp_free+0x1c>
 800d478:	4b06      	ldr	r3, [pc, #24]	; (800d494 <tcp_free+0x2c>)
 800d47a:	22d4      	movs	r2, #212	; 0xd4
 800d47c:	4906      	ldr	r1, [pc, #24]	; (800d498 <tcp_free+0x30>)
 800d47e:	4807      	ldr	r0, [pc, #28]	; (800d49c <tcp_free+0x34>)
 800d480:	f005 fc92 	bl	8012da8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d484:	6879      	ldr	r1, [r7, #4]
 800d486:	2001      	movs	r0, #1
 800d488:	f7fe ff34 	bl	800c2f4 <memp_free>
}
 800d48c:	bf00      	nop
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	08015238 	.word	0x08015238
 800d498:	0801528c 	.word	0x0801528c
 800d49c:	080152a0 	.word	0x080152a0

0800d4a0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	7d1b      	ldrb	r3, [r3, #20]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d105      	bne.n	800d4bc <tcp_free_listen+0x1c>
 800d4b0:	4b06      	ldr	r3, [pc, #24]	; (800d4cc <tcp_free_listen+0x2c>)
 800d4b2:	22df      	movs	r2, #223	; 0xdf
 800d4b4:	4906      	ldr	r1, [pc, #24]	; (800d4d0 <tcp_free_listen+0x30>)
 800d4b6:	4807      	ldr	r0, [pc, #28]	; (800d4d4 <tcp_free_listen+0x34>)
 800d4b8:	f005 fc76 	bl	8012da8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d4bc:	6879      	ldr	r1, [r7, #4]
 800d4be:	2002      	movs	r0, #2
 800d4c0:	f7fe ff18 	bl	800c2f4 <memp_free>
}
 800d4c4:	bf00      	nop
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	08015238 	.word	0x08015238
 800d4d0:	080152c8 	.word	0x080152c8
 800d4d4:	080152a0 	.word	0x080152a0

0800d4d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d4dc:	f000 fea2 	bl	800e224 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d4e0:	4b07      	ldr	r3, [pc, #28]	; (800d500 <tcp_tmr+0x28>)
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	b2da      	uxtb	r2, r3
 800d4e8:	4b05      	ldr	r3, [pc, #20]	; (800d500 <tcp_tmr+0x28>)
 800d4ea:	701a      	strb	r2, [r3, #0]
 800d4ec:	4b04      	ldr	r3, [pc, #16]	; (800d500 <tcp_tmr+0x28>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	f003 0301 	and.w	r3, r3, #1
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d001      	beq.n	800d4fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d4f8:	f000 fb54 	bl	800dba4 <tcp_slowtmr>
  }
}
 800d4fc:	bf00      	nop
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	24008195 	.word	0x24008195

0800d504 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d105      	bne.n	800d520 <tcp_remove_listener+0x1c>
 800d514:	4b0d      	ldr	r3, [pc, #52]	; (800d54c <tcp_remove_listener+0x48>)
 800d516:	22ff      	movs	r2, #255	; 0xff
 800d518:	490d      	ldr	r1, [pc, #52]	; (800d550 <tcp_remove_listener+0x4c>)
 800d51a:	480e      	ldr	r0, [pc, #56]	; (800d554 <tcp_remove_listener+0x50>)
 800d51c:	f005 fc44 	bl	8012da8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	e00a      	b.n	800d53c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d102      	bne.n	800d536 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	60fb      	str	r3, [r7, #12]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1f1      	bne.n	800d526 <tcp_remove_listener+0x22>
    }
  }
}
 800d542:	bf00      	nop
 800d544:	bf00      	nop
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	08015238 	.word	0x08015238
 800d550:	080152e4 	.word	0x080152e4
 800d554:	080152a0 	.word	0x080152a0

0800d558 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d106      	bne.n	800d574 <tcp_listen_closed+0x1c>
 800d566:	4b14      	ldr	r3, [pc, #80]	; (800d5b8 <tcp_listen_closed+0x60>)
 800d568:	f240 1211 	movw	r2, #273	; 0x111
 800d56c:	4913      	ldr	r1, [pc, #76]	; (800d5bc <tcp_listen_closed+0x64>)
 800d56e:	4814      	ldr	r0, [pc, #80]	; (800d5c0 <tcp_listen_closed+0x68>)
 800d570:	f005 fc1a 	bl	8012da8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	7d1b      	ldrb	r3, [r3, #20]
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d006      	beq.n	800d58a <tcp_listen_closed+0x32>
 800d57c:	4b0e      	ldr	r3, [pc, #56]	; (800d5b8 <tcp_listen_closed+0x60>)
 800d57e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d582:	4910      	ldr	r1, [pc, #64]	; (800d5c4 <tcp_listen_closed+0x6c>)
 800d584:	480e      	ldr	r0, [pc, #56]	; (800d5c0 <tcp_listen_closed+0x68>)
 800d586:	f005 fc0f 	bl	8012da8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d58a:	2301      	movs	r3, #1
 800d58c:	60fb      	str	r3, [r7, #12]
 800d58e:	e00b      	b.n	800d5a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d590:	4a0d      	ldr	r2, [pc, #52]	; (800d5c8 <tcp_listen_closed+0x70>)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	6879      	ldr	r1, [r7, #4]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7ff ffb1 	bl	800d504 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	60fb      	str	r3, [r7, #12]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2b03      	cmp	r3, #3
 800d5ac:	d9f0      	bls.n	800d590 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d5ae:	bf00      	nop
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	08015238 	.word	0x08015238
 800d5bc:	0801530c 	.word	0x0801530c
 800d5c0:	080152a0 	.word	0x080152a0
 800d5c4:	08015318 	.word	0x08015318
 800d5c8:	08016c38 	.word	0x08016c38

0800d5cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d5cc:	b5b0      	push	{r4, r5, r7, lr}
 800d5ce:	b088      	sub	sp, #32
 800d5d0:	af04      	add	r7, sp, #16
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d106      	bne.n	800d5ec <tcp_close_shutdown+0x20>
 800d5de:	4b63      	ldr	r3, [pc, #396]	; (800d76c <tcp_close_shutdown+0x1a0>)
 800d5e0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d5e4:	4962      	ldr	r1, [pc, #392]	; (800d770 <tcp_close_shutdown+0x1a4>)
 800d5e6:	4863      	ldr	r0, [pc, #396]	; (800d774 <tcp_close_shutdown+0x1a8>)
 800d5e8:	f005 fbde 	bl	8012da8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d5ec:	78fb      	ldrb	r3, [r7, #3]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d066      	beq.n	800d6c0 <tcp_close_shutdown+0xf4>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	7d1b      	ldrb	r3, [r3, #20]
 800d5f6:	2b04      	cmp	r3, #4
 800d5f8:	d003      	beq.n	800d602 <tcp_close_shutdown+0x36>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	7d1b      	ldrb	r3, [r3, #20]
 800d5fe:	2b07      	cmp	r3, #7
 800d600:	d15e      	bne.n	800d6c0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d606:	2b00      	cmp	r3, #0
 800d608:	d104      	bne.n	800d614 <tcp_close_shutdown+0x48>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d60e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d612:	d055      	beq.n	800d6c0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	8b5b      	ldrh	r3, [r3, #26]
 800d618:	f003 0310 	and.w	r3, r3, #16
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d106      	bne.n	800d62e <tcp_close_shutdown+0x62>
 800d620:	4b52      	ldr	r3, [pc, #328]	; (800d76c <tcp_close_shutdown+0x1a0>)
 800d622:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d626:	4954      	ldr	r1, [pc, #336]	; (800d778 <tcp_close_shutdown+0x1ac>)
 800d628:	4852      	ldr	r0, [pc, #328]	; (800d774 <tcp_close_shutdown+0x1a8>)
 800d62a:	f005 fbbd 	bl	8012da8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d636:	687d      	ldr	r5, [r7, #4]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	3304      	adds	r3, #4
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	8ad2      	ldrh	r2, [r2, #22]
 800d640:	6879      	ldr	r1, [r7, #4]
 800d642:	8b09      	ldrh	r1, [r1, #24]
 800d644:	9102      	str	r1, [sp, #8]
 800d646:	9201      	str	r2, [sp, #4]
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	462b      	mov	r3, r5
 800d64c:	4622      	mov	r2, r4
 800d64e:	4601      	mov	r1, r0
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f004 fe99 	bl	8012388 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f001 f8c6 	bl	800e7e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d65c:	4b47      	ldr	r3, [pc, #284]	; (800d77c <tcp_close_shutdown+0x1b0>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	429a      	cmp	r2, r3
 800d664:	d105      	bne.n	800d672 <tcp_close_shutdown+0xa6>
 800d666:	4b45      	ldr	r3, [pc, #276]	; (800d77c <tcp_close_shutdown+0x1b0>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	4a43      	ldr	r2, [pc, #268]	; (800d77c <tcp_close_shutdown+0x1b0>)
 800d66e:	6013      	str	r3, [r2, #0]
 800d670:	e013      	b.n	800d69a <tcp_close_shutdown+0xce>
 800d672:	4b42      	ldr	r3, [pc, #264]	; (800d77c <tcp_close_shutdown+0x1b0>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	60fb      	str	r3, [r7, #12]
 800d678:	e00c      	b.n	800d694 <tcp_close_shutdown+0xc8>
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	429a      	cmp	r2, r3
 800d682:	d104      	bne.n	800d68e <tcp_close_shutdown+0xc2>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	68da      	ldr	r2, [r3, #12]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	60da      	str	r2, [r3, #12]
 800d68c:	e005      	b.n	800d69a <tcp_close_shutdown+0xce>
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1ef      	bne.n	800d67a <tcp_close_shutdown+0xae>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	60da      	str	r2, [r3, #12]
 800d6a0:	4b37      	ldr	r3, [pc, #220]	; (800d780 <tcp_close_shutdown+0x1b4>)
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d6a6:	4b37      	ldr	r3, [pc, #220]	; (800d784 <tcp_close_shutdown+0x1b8>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d102      	bne.n	800d6b6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d6b0:	f003 fd66 	bl	8011180 <tcp_trigger_input_pcb_close>
 800d6b4:	e002      	b.n	800d6bc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7ff fed6 	bl	800d468 <tcp_free>
      }
      return ERR_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	e050      	b.n	800d762 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	7d1b      	ldrb	r3, [r3, #20]
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d03b      	beq.n	800d740 <tcp_close_shutdown+0x174>
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	dc44      	bgt.n	800d756 <tcp_close_shutdown+0x18a>
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d002      	beq.n	800d6d6 <tcp_close_shutdown+0x10a>
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d02a      	beq.n	800d72a <tcp_close_shutdown+0x15e>
 800d6d4:	e03f      	b.n	800d756 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	8adb      	ldrh	r3, [r3, #22]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d021      	beq.n	800d722 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d6de:	4b2a      	ldr	r3, [pc, #168]	; (800d788 <tcp_close_shutdown+0x1bc>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d105      	bne.n	800d6f4 <tcp_close_shutdown+0x128>
 800d6e8:	4b27      	ldr	r3, [pc, #156]	; (800d788 <tcp_close_shutdown+0x1bc>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	4a26      	ldr	r2, [pc, #152]	; (800d788 <tcp_close_shutdown+0x1bc>)
 800d6f0:	6013      	str	r3, [r2, #0]
 800d6f2:	e013      	b.n	800d71c <tcp_close_shutdown+0x150>
 800d6f4:	4b24      	ldr	r3, [pc, #144]	; (800d788 <tcp_close_shutdown+0x1bc>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	60bb      	str	r3, [r7, #8]
 800d6fa:	e00c      	b.n	800d716 <tcp_close_shutdown+0x14a>
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	429a      	cmp	r2, r3
 800d704:	d104      	bne.n	800d710 <tcp_close_shutdown+0x144>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	68da      	ldr	r2, [r3, #12]
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	60da      	str	r2, [r3, #12]
 800d70e:	e005      	b.n	800d71c <tcp_close_shutdown+0x150>
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	60bb      	str	r3, [r7, #8]
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1ef      	bne.n	800d6fc <tcp_close_shutdown+0x130>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2200      	movs	r2, #0
 800d720:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7ff fea0 	bl	800d468 <tcp_free>
      break;
 800d728:	e01a      	b.n	800d760 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7ff ff14 	bl	800d558 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d730:	6879      	ldr	r1, [r7, #4]
 800d732:	4816      	ldr	r0, [pc, #88]	; (800d78c <tcp_close_shutdown+0x1c0>)
 800d734:	f001 f8a8 	bl	800e888 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7ff feb1 	bl	800d4a0 <tcp_free_listen>
      break;
 800d73e:	e00f      	b.n	800d760 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d740:	6879      	ldr	r1, [r7, #4]
 800d742:	480e      	ldr	r0, [pc, #56]	; (800d77c <tcp_close_shutdown+0x1b0>)
 800d744:	f001 f8a0 	bl	800e888 <tcp_pcb_remove>
 800d748:	4b0d      	ldr	r3, [pc, #52]	; (800d780 <tcp_close_shutdown+0x1b4>)
 800d74a:	2201      	movs	r2, #1
 800d74c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7ff fe8a 	bl	800d468 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d754:	e004      	b.n	800d760 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f81a 	bl	800d790 <tcp_close_shutdown_fin>
 800d75c:	4603      	mov	r3, r0
 800d75e:	e000      	b.n	800d762 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bdb0      	pop	{r4, r5, r7, pc}
 800d76a:	bf00      	nop
 800d76c:	08015238 	.word	0x08015238
 800d770:	08015330 	.word	0x08015330
 800d774:	080152a0 	.word	0x080152a0
 800d778:	08015350 	.word	0x08015350
 800d77c:	2400818c 	.word	0x2400818c
 800d780:	24008194 	.word	0x24008194
 800d784:	240081cc 	.word	0x240081cc
 800d788:	24008184 	.word	0x24008184
 800d78c:	24008188 	.word	0x24008188

0800d790 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d106      	bne.n	800d7ac <tcp_close_shutdown_fin+0x1c>
 800d79e:	4b2e      	ldr	r3, [pc, #184]	; (800d858 <tcp_close_shutdown_fin+0xc8>)
 800d7a0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d7a4:	492d      	ldr	r1, [pc, #180]	; (800d85c <tcp_close_shutdown_fin+0xcc>)
 800d7a6:	482e      	ldr	r0, [pc, #184]	; (800d860 <tcp_close_shutdown_fin+0xd0>)
 800d7a8:	f005 fafe 	bl	8012da8 <iprintf>

  switch (pcb->state) {
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	7d1b      	ldrb	r3, [r3, #20]
 800d7b0:	2b07      	cmp	r3, #7
 800d7b2:	d020      	beq.n	800d7f6 <tcp_close_shutdown_fin+0x66>
 800d7b4:	2b07      	cmp	r3, #7
 800d7b6:	dc2b      	bgt.n	800d810 <tcp_close_shutdown_fin+0x80>
 800d7b8:	2b03      	cmp	r3, #3
 800d7ba:	d002      	beq.n	800d7c2 <tcp_close_shutdown_fin+0x32>
 800d7bc:	2b04      	cmp	r3, #4
 800d7be:	d00d      	beq.n	800d7dc <tcp_close_shutdown_fin+0x4c>
 800d7c0:	e026      	b.n	800d810 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f003 feee 	bl	80115a4 <tcp_send_fin>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d7cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d11f      	bne.n	800d814 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2205      	movs	r2, #5
 800d7d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d7da:	e01b      	b.n	800d814 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f003 fee1 	bl	80115a4 <tcp_send_fin>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d7e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d114      	bne.n	800d818 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2205      	movs	r2, #5
 800d7f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d7f4:	e010      	b.n	800d818 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f003 fed4 	bl	80115a4 <tcp_send_fin>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d109      	bne.n	800d81c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2209      	movs	r2, #9
 800d80c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d80e:	e005      	b.n	800d81c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d810:	2300      	movs	r3, #0
 800d812:	e01c      	b.n	800d84e <tcp_close_shutdown_fin+0xbe>
      break;
 800d814:	bf00      	nop
 800d816:	e002      	b.n	800d81e <tcp_close_shutdown_fin+0x8e>
      break;
 800d818:	bf00      	nop
 800d81a:	e000      	b.n	800d81e <tcp_close_shutdown_fin+0x8e>
      break;
 800d81c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d81e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d103      	bne.n	800d82e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f003 fffa 	bl	8011820 <tcp_output>
 800d82c:	e00d      	b.n	800d84a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d82e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d836:	d108      	bne.n	800d84a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	8b5b      	ldrh	r3, [r3, #26]
 800d83c:	f043 0308 	orr.w	r3, r3, #8
 800d840:	b29a      	uxth	r2, r3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d846:	2300      	movs	r3, #0
 800d848:	e001      	b.n	800d84e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d84a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	08015238 	.word	0x08015238
 800d85c:	0801530c 	.word	0x0801530c
 800d860:	080152a0 	.word	0x080152a0

0800d864 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d109      	bne.n	800d886 <tcp_close+0x22>
 800d872:	4b0f      	ldr	r3, [pc, #60]	; (800d8b0 <tcp_close+0x4c>)
 800d874:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d878:	490e      	ldr	r1, [pc, #56]	; (800d8b4 <tcp_close+0x50>)
 800d87a:	480f      	ldr	r0, [pc, #60]	; (800d8b8 <tcp_close+0x54>)
 800d87c:	f005 fa94 	bl	8012da8 <iprintf>
 800d880:	f06f 030f 	mvn.w	r3, #15
 800d884:	e00f      	b.n	800d8a6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	7d1b      	ldrb	r3, [r3, #20]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d006      	beq.n	800d89c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	8b5b      	ldrh	r3, [r3, #26]
 800d892:	f043 0310 	orr.w	r3, r3, #16
 800d896:	b29a      	uxth	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d89c:	2101      	movs	r1, #1
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7ff fe94 	bl	800d5cc <tcp_close_shutdown>
 800d8a4:	4603      	mov	r3, r0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	08015238 	.word	0x08015238
 800d8b4:	0801536c 	.word	0x0801536c
 800d8b8:	080152a0 	.word	0x080152a0

0800d8bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b08e      	sub	sp, #56	; 0x38
 800d8c0:	af04      	add	r7, sp, #16
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d107      	bne.n	800d8dc <tcp_abandon+0x20>
 800d8cc:	4b52      	ldr	r3, [pc, #328]	; (800da18 <tcp_abandon+0x15c>)
 800d8ce:	f240 223d 	movw	r2, #573	; 0x23d
 800d8d2:	4952      	ldr	r1, [pc, #328]	; (800da1c <tcp_abandon+0x160>)
 800d8d4:	4852      	ldr	r0, [pc, #328]	; (800da20 <tcp_abandon+0x164>)
 800d8d6:	f005 fa67 	bl	8012da8 <iprintf>
 800d8da:	e099      	b.n	800da10 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	7d1b      	ldrb	r3, [r3, #20]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d106      	bne.n	800d8f2 <tcp_abandon+0x36>
 800d8e4:	4b4c      	ldr	r3, [pc, #304]	; (800da18 <tcp_abandon+0x15c>)
 800d8e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d8ea:	494e      	ldr	r1, [pc, #312]	; (800da24 <tcp_abandon+0x168>)
 800d8ec:	484c      	ldr	r0, [pc, #304]	; (800da20 <tcp_abandon+0x164>)
 800d8ee:	f005 fa5b 	bl	8012da8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	7d1b      	ldrb	r3, [r3, #20]
 800d8f6:	2b0a      	cmp	r3, #10
 800d8f8:	d107      	bne.n	800d90a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d8fa:	6879      	ldr	r1, [r7, #4]
 800d8fc:	484a      	ldr	r0, [pc, #296]	; (800da28 <tcp_abandon+0x16c>)
 800d8fe:	f000 ffc3 	bl	800e888 <tcp_pcb_remove>
    tcp_free(pcb);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff fdb0 	bl	800d468 <tcp_free>
 800d908:	e082      	b.n	800da10 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d916:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d924:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	691b      	ldr	r3, [r3, #16]
 800d92a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	7d1b      	ldrb	r3, [r3, #20]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d126      	bne.n	800d982 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	8adb      	ldrh	r3, [r3, #22]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d02e      	beq.n	800d99a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d93c:	4b3b      	ldr	r3, [pc, #236]	; (800da2c <tcp_abandon+0x170>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	429a      	cmp	r2, r3
 800d944:	d105      	bne.n	800d952 <tcp_abandon+0x96>
 800d946:	4b39      	ldr	r3, [pc, #228]	; (800da2c <tcp_abandon+0x170>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	4a37      	ldr	r2, [pc, #220]	; (800da2c <tcp_abandon+0x170>)
 800d94e:	6013      	str	r3, [r2, #0]
 800d950:	e013      	b.n	800d97a <tcp_abandon+0xbe>
 800d952:	4b36      	ldr	r3, [pc, #216]	; (800da2c <tcp_abandon+0x170>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	61fb      	str	r3, [r7, #28]
 800d958:	e00c      	b.n	800d974 <tcp_abandon+0xb8>
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	429a      	cmp	r2, r3
 800d962:	d104      	bne.n	800d96e <tcp_abandon+0xb2>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	68da      	ldr	r2, [r3, #12]
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	60da      	str	r2, [r3, #12]
 800d96c:	e005      	b.n	800d97a <tcp_abandon+0xbe>
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	61fb      	str	r3, [r7, #28]
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1ef      	bne.n	800d95a <tcp_abandon+0x9e>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	60da      	str	r2, [r3, #12]
 800d980:	e00b      	b.n	800d99a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	8adb      	ldrh	r3, [r3, #22]
 800d98a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d98c:	6879      	ldr	r1, [r7, #4]
 800d98e:	4828      	ldr	r0, [pc, #160]	; (800da30 <tcp_abandon+0x174>)
 800d990:	f000 ff7a 	bl	800e888 <tcp_pcb_remove>
 800d994:	4b27      	ldr	r3, [pc, #156]	; (800da34 <tcp_abandon+0x178>)
 800d996:	2201      	movs	r2, #1
 800d998:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d004      	beq.n	800d9ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f000 fd1c 	bl	800e3e4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d004      	beq.n	800d9be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f000 fd13 	bl	800e3e4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d004      	beq.n	800d9d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f000 fd0a 	bl	800e3e4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00e      	beq.n	800d9f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d9d6:	6879      	ldr	r1, [r7, #4]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	3304      	adds	r3, #4
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	8b12      	ldrh	r2, [r2, #24]
 800d9e0:	9202      	str	r2, [sp, #8]
 800d9e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d9e4:	9201      	str	r2, [sp, #4]
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	697a      	ldr	r2, [r7, #20]
 800d9ec:	69b9      	ldr	r1, [r7, #24]
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f004 fcca 	bl	8012388 <tcp_rst>
    }
    last_state = pcb->state;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	7d1b      	ldrb	r3, [r3, #20]
 800d9f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7ff fd34 	bl	800d468 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d004      	beq.n	800da10 <tcp_abandon+0x154>
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	f06f 010c 	mvn.w	r1, #12
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	4798      	blx	r3
  }
}
 800da10:	3728      	adds	r7, #40	; 0x28
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	08015238 	.word	0x08015238
 800da1c:	080153a0 	.word	0x080153a0
 800da20:	080152a0 	.word	0x080152a0
 800da24:	080153bc 	.word	0x080153bc
 800da28:	24008190 	.word	0x24008190
 800da2c:	24008184 	.word	0x24008184
 800da30:	2400818c 	.word	0x2400818c
 800da34:	24008194 	.word	0x24008194

0800da38 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800da40:	2101      	movs	r1, #1
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7ff ff3a 	bl	800d8bc <tcp_abandon>
}
 800da48:	bf00      	nop
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d106      	bne.n	800da6c <tcp_update_rcv_ann_wnd+0x1c>
 800da5e:	4b25      	ldr	r3, [pc, #148]	; (800daf4 <tcp_update_rcv_ann_wnd+0xa4>)
 800da60:	f240 32a6 	movw	r2, #934	; 0x3a6
 800da64:	4924      	ldr	r1, [pc, #144]	; (800daf8 <tcp_update_rcv_ann_wnd+0xa8>)
 800da66:	4825      	ldr	r0, [pc, #148]	; (800dafc <tcp_update_rcv_ann_wnd+0xac>)
 800da68:	f005 f99e 	bl	8012da8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800da74:	4413      	add	r3, r2
 800da76:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800da80:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800da84:	bf28      	it	cs
 800da86:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800da8a:	b292      	uxth	r2, r2
 800da8c:	4413      	add	r3, r2
 800da8e:	68fa      	ldr	r2, [r7, #12]
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	2b00      	cmp	r3, #0
 800da94:	db08      	blt.n	800daa8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	e020      	b.n	800daea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	dd03      	ble.n	800dabe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dabc:	e014      	b.n	800dae8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dad0:	d306      	bcc.n	800dae0 <tcp_update_rcv_ann_wnd+0x90>
 800dad2:	4b08      	ldr	r3, [pc, #32]	; (800daf4 <tcp_update_rcv_ann_wnd+0xa4>)
 800dad4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dad8:	4909      	ldr	r1, [pc, #36]	; (800db00 <tcp_update_rcv_ann_wnd+0xb0>)
 800dada:	4808      	ldr	r0, [pc, #32]	; (800dafc <tcp_update_rcv_ann_wnd+0xac>)
 800dadc:	f005 f964 	bl	8012da8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800dae8:	2300      	movs	r3, #0
  }
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	08015238 	.word	0x08015238
 800daf8:	080154b8 	.word	0x080154b8
 800dafc:	080152a0 	.word	0x080152a0
 800db00:	080154dc 	.word	0x080154dc

0800db04 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	460b      	mov	r3, r1
 800db0e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d107      	bne.n	800db26 <tcp_recved+0x22>
 800db16:	4b1f      	ldr	r3, [pc, #124]	; (800db94 <tcp_recved+0x90>)
 800db18:	f240 32cf 	movw	r2, #975	; 0x3cf
 800db1c:	491e      	ldr	r1, [pc, #120]	; (800db98 <tcp_recved+0x94>)
 800db1e:	481f      	ldr	r0, [pc, #124]	; (800db9c <tcp_recved+0x98>)
 800db20:	f005 f942 	bl	8012da8 <iprintf>
 800db24:	e032      	b.n	800db8c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	7d1b      	ldrb	r3, [r3, #20]
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d106      	bne.n	800db3c <tcp_recved+0x38>
 800db2e:	4b19      	ldr	r3, [pc, #100]	; (800db94 <tcp_recved+0x90>)
 800db30:	f240 32d2 	movw	r2, #978	; 0x3d2
 800db34:	491a      	ldr	r1, [pc, #104]	; (800dba0 <tcp_recved+0x9c>)
 800db36:	4819      	ldr	r0, [pc, #100]	; (800db9c <tcp_recved+0x98>)
 800db38:	f005 f936 	bl	8012da8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800db40:	887b      	ldrh	r3, [r7, #2]
 800db42:	4413      	add	r3, r2
 800db44:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800db46:	89fb      	ldrh	r3, [r7, #14]
 800db48:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db4c:	d804      	bhi.n	800db58 <tcp_recved+0x54>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db52:	89fa      	ldrh	r2, [r7, #14]
 800db54:	429a      	cmp	r2, r3
 800db56:	d204      	bcs.n	800db62 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800db5e:	851a      	strh	r2, [r3, #40]	; 0x28
 800db60:	e002      	b.n	800db68 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	89fa      	ldrh	r2, [r7, #14]
 800db66:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff ff71 	bl	800da50 <tcp_update_rcv_ann_wnd>
 800db6e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800db76:	d309      	bcc.n	800db8c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	8b5b      	ldrh	r3, [r3, #26]
 800db7c:	f043 0302 	orr.w	r3, r3, #2
 800db80:	b29a      	uxth	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f003 fe4a 	bl	8011820 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	08015238 	.word	0x08015238
 800db98:	080154f8 	.word	0x080154f8
 800db9c:	080152a0 	.word	0x080152a0
 800dba0:	08015510 	.word	0x08015510

0800dba4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dba4:	b5b0      	push	{r4, r5, r7, lr}
 800dba6:	b090      	sub	sp, #64	; 0x40
 800dba8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dbb0:	4b94      	ldr	r3, [pc, #592]	; (800de04 <tcp_slowtmr+0x260>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	4a93      	ldr	r2, [pc, #588]	; (800de04 <tcp_slowtmr+0x260>)
 800dbb8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dbba:	4b93      	ldr	r3, [pc, #588]	; (800de08 <tcp_slowtmr+0x264>)
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	b2da      	uxtb	r2, r3
 800dbc2:	4b91      	ldr	r3, [pc, #580]	; (800de08 <tcp_slowtmr+0x264>)
 800dbc4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800dbca:	4b90      	ldr	r3, [pc, #576]	; (800de0c <tcp_slowtmr+0x268>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800dbd0:	e29d      	b.n	800e10e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd4:	7d1b      	ldrb	r3, [r3, #20]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d106      	bne.n	800dbe8 <tcp_slowtmr+0x44>
 800dbda:	4b8d      	ldr	r3, [pc, #564]	; (800de10 <tcp_slowtmr+0x26c>)
 800dbdc:	f240 42be 	movw	r2, #1214	; 0x4be
 800dbe0:	498c      	ldr	r1, [pc, #560]	; (800de14 <tcp_slowtmr+0x270>)
 800dbe2:	488d      	ldr	r0, [pc, #564]	; (800de18 <tcp_slowtmr+0x274>)
 800dbe4:	f005 f8e0 	bl	8012da8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbea:	7d1b      	ldrb	r3, [r3, #20]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d106      	bne.n	800dbfe <tcp_slowtmr+0x5a>
 800dbf0:	4b87      	ldr	r3, [pc, #540]	; (800de10 <tcp_slowtmr+0x26c>)
 800dbf2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800dbf6:	4989      	ldr	r1, [pc, #548]	; (800de1c <tcp_slowtmr+0x278>)
 800dbf8:	4887      	ldr	r0, [pc, #540]	; (800de18 <tcp_slowtmr+0x274>)
 800dbfa:	f005 f8d5 	bl	8012da8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc00:	7d1b      	ldrb	r3, [r3, #20]
 800dc02:	2b0a      	cmp	r3, #10
 800dc04:	d106      	bne.n	800dc14 <tcp_slowtmr+0x70>
 800dc06:	4b82      	ldr	r3, [pc, #520]	; (800de10 <tcp_slowtmr+0x26c>)
 800dc08:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800dc0c:	4984      	ldr	r1, [pc, #528]	; (800de20 <tcp_slowtmr+0x27c>)
 800dc0e:	4882      	ldr	r0, [pc, #520]	; (800de18 <tcp_slowtmr+0x274>)
 800dc10:	f005 f8ca 	bl	8012da8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc16:	7f9a      	ldrb	r2, [r3, #30]
 800dc18:	4b7b      	ldr	r3, [pc, #492]	; (800de08 <tcp_slowtmr+0x264>)
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d105      	bne.n	800dc2c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800dc2a:	e270      	b.n	800e10e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800dc2c:	4b76      	ldr	r3, [pc, #472]	; (800de08 <tcp_slowtmr+0x264>)
 800dc2e:	781a      	ldrb	r2, [r3, #0]
 800dc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc32:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800dc34:	2300      	movs	r3, #0
 800dc36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc42:	7d1b      	ldrb	r3, [r3, #20]
 800dc44:	2b02      	cmp	r3, #2
 800dc46:	d10a      	bne.n	800dc5e <tcp_slowtmr+0xba>
 800dc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc4e:	2b05      	cmp	r3, #5
 800dc50:	d905      	bls.n	800dc5e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800dc52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc56:	3301      	adds	r3, #1
 800dc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc5c:	e11e      	b.n	800de9c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc64:	2b0b      	cmp	r3, #11
 800dc66:	d905      	bls.n	800dc74 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800dc68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc72:	e113      	b.n	800de9c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d075      	beq.n	800dd6a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d006      	beq.n	800dc94 <tcp_slowtmr+0xf0>
 800dc86:	4b62      	ldr	r3, [pc, #392]	; (800de10 <tcp_slowtmr+0x26c>)
 800dc88:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dc8c:	4965      	ldr	r1, [pc, #404]	; (800de24 <tcp_slowtmr+0x280>)
 800dc8e:	4862      	ldr	r0, [pc, #392]	; (800de18 <tcp_slowtmr+0x274>)
 800dc90:	f005 f88a 	bl	8012da8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d106      	bne.n	800dcaa <tcp_slowtmr+0x106>
 800dc9c:	4b5c      	ldr	r3, [pc, #368]	; (800de10 <tcp_slowtmr+0x26c>)
 800dc9e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dca2:	4961      	ldr	r1, [pc, #388]	; (800de28 <tcp_slowtmr+0x284>)
 800dca4:	485c      	ldr	r0, [pc, #368]	; (800de18 <tcp_slowtmr+0x274>)
 800dca6:	f005 f87f 	bl	8012da8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dcb0:	2b0b      	cmp	r3, #11
 800dcb2:	d905      	bls.n	800dcc0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800dcb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcb8:	3301      	adds	r3, #1
 800dcba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcbe:	e0ed      	b.n	800de9c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	4a58      	ldr	r2, [pc, #352]	; (800de2c <tcp_slowtmr+0x288>)
 800dcca:	5cd3      	ldrb	r3, [r2, r3]
 800dccc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dcd4:	7c7a      	ldrb	r2, [r7, #17]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d907      	bls.n	800dcea <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800dcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dce0:	3301      	adds	r3, #1
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dcf0:	7c7a      	ldrb	r2, [r7, #17]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	f200 80d2 	bhi.w	800de9c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800dcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d108      	bne.n	800dd18 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dd06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd08:	f004 fc32 	bl	8012570 <tcp_zero_window_probe>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d014      	beq.n	800dd3c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800dd12:	2300      	movs	r3, #0
 800dd14:	623b      	str	r3, [r7, #32]
 800dd16:	e011      	b.n	800dd3c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd22:	f003 faf7 	bl	8011314 <tcp_split_unsent_seg>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d107      	bne.n	800dd3c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800dd2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd2e:	f003 fd77 	bl	8011820 <tcp_output>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d101      	bne.n	800dd3c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	f000 80ac 	beq.w	800de9c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800dd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd46:	2200      	movs	r2, #0
 800dd48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dd52:	2b06      	cmp	r3, #6
 800dd54:	f200 80a2 	bhi.w	800de9c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800dd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dd5e:	3301      	adds	r3, #1
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800dd68:	e098      	b.n	800de9c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	db0f      	blt.n	800dd94 <tcp_slowtmr+0x1f0>
 800dd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dd7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d008      	beq.n	800dd94 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800dd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	b21a      	sxth	r2, r3
 800dd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd92:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800dd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd96:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800dd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dda0:	429a      	cmp	r2, r3
 800dda2:	db7b      	blt.n	800de9c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800dda4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dda6:	f004 f82d 	bl	8011e04 <tcp_rexmit_rto_prepare>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d007      	beq.n	800ddc0 <tcp_slowtmr+0x21c>
 800ddb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d171      	bne.n	800de9c <tcp_slowtmr+0x2f8>
 800ddb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d06d      	beq.n	800de9c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ddc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc2:	7d1b      	ldrb	r3, [r3, #20]
 800ddc4:	2b02      	cmp	r3, #2
 800ddc6:	d03a      	beq.n	800de3e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ddce:	2b0c      	cmp	r3, #12
 800ddd0:	bf28      	it	cs
 800ddd2:	230c      	movcs	r3, #12
 800ddd4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ddd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dddc:	10db      	asrs	r3, r3, #3
 800ddde:	b21b      	sxth	r3, r3
 800dde0:	461a      	mov	r2, r3
 800dde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dde8:	4413      	add	r3, r2
 800ddea:	7efa      	ldrb	r2, [r7, #27]
 800ddec:	4910      	ldr	r1, [pc, #64]	; (800de30 <tcp_slowtmr+0x28c>)
 800ddee:	5c8a      	ldrb	r2, [r1, r2]
 800ddf0:	4093      	lsls	r3, r2
 800ddf2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	dc1a      	bgt.n	800de34 <tcp_slowtmr+0x290>
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	b21a      	sxth	r2, r3
 800de02:	e019      	b.n	800de38 <tcp_slowtmr+0x294>
 800de04:	24008180 	.word	0x24008180
 800de08:	24008196 	.word	0x24008196
 800de0c:	2400818c 	.word	0x2400818c
 800de10:	08015238 	.word	0x08015238
 800de14:	080155a0 	.word	0x080155a0
 800de18:	080152a0 	.word	0x080152a0
 800de1c:	080155cc 	.word	0x080155cc
 800de20:	080155f8 	.word	0x080155f8
 800de24:	08015628 	.word	0x08015628
 800de28:	0801565c 	.word	0x0801565c
 800de2c:	08016c30 	.word	0x08016c30
 800de30:	08016c20 	.word	0x08016c20
 800de34:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800de38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800de3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de40:	2200      	movs	r2, #0
 800de42:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800de4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de50:	4293      	cmp	r3, r2
 800de52:	bf28      	it	cs
 800de54:	4613      	movcs	r3, r2
 800de56:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800de58:	8a7b      	ldrh	r3, [r7, #18]
 800de5a:	085b      	lsrs	r3, r3, #1
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800de64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800de6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de6e:	005b      	lsls	r3, r3, #1
 800de70:	b29b      	uxth	r3, r3
 800de72:	429a      	cmp	r2, r3
 800de74:	d206      	bcs.n	800de84 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800de76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de7a:	005b      	lsls	r3, r3, #1
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800de84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de86:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800de88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800de8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de90:	2200      	movs	r2, #0
 800de92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800de96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de98:	f004 f824 	bl	8011ee4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800de9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9e:	7d1b      	ldrb	r3, [r3, #20]
 800dea0:	2b06      	cmp	r3, #6
 800dea2:	d111      	bne.n	800dec8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800dea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea6:	8b5b      	ldrh	r3, [r3, #26]
 800dea8:	f003 0310 	and.w	r3, r3, #16
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00b      	beq.n	800dec8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800deb0:	4b9c      	ldr	r3, [pc, #624]	; (800e124 <tcp_slowtmr+0x580>)
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb6:	6a1b      	ldr	r3, [r3, #32]
 800deb8:	1ad3      	subs	r3, r2, r3
 800deba:	2b28      	cmp	r3, #40	; 0x28
 800debc:	d904      	bls.n	800dec8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800debe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dec2:	3301      	adds	r3, #1
 800dec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	7a5b      	ldrb	r3, [r3, #9]
 800decc:	f003 0308 	and.w	r3, r3, #8
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d04a      	beq.n	800df6a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ded4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ded8:	2b04      	cmp	r3, #4
 800deda:	d003      	beq.n	800dee4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800dedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dede:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dee0:	2b07      	cmp	r3, #7
 800dee2:	d142      	bne.n	800df6a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dee4:	4b8f      	ldr	r3, [pc, #572]	; (800e124 <tcp_slowtmr+0x580>)
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deea:	6a1b      	ldr	r3, [r3, #32]
 800deec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800deee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800def4:	4b8c      	ldr	r3, [pc, #560]	; (800e128 <tcp_slowtmr+0x584>)
 800def6:	440b      	add	r3, r1
 800def8:	498c      	ldr	r1, [pc, #560]	; (800e12c <tcp_slowtmr+0x588>)
 800defa:	fba1 1303 	umull	r1, r3, r1, r3
 800defe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df00:	429a      	cmp	r2, r3
 800df02:	d90a      	bls.n	800df1a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800df04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df08:	3301      	adds	r3, #1
 800df0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800df0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df12:	3301      	adds	r3, #1
 800df14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df18:	e027      	b.n	800df6a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df1a:	4b82      	ldr	r3, [pc, #520]	; (800e124 <tcp_slowtmr+0x580>)
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df20:	6a1b      	ldr	r3, [r3, #32]
 800df22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800df24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df26:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800df2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800df30:	4618      	mov	r0, r3
 800df32:	4b7f      	ldr	r3, [pc, #508]	; (800e130 <tcp_slowtmr+0x58c>)
 800df34:	fb00 f303 	mul.w	r3, r0, r3
 800df38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800df3a:	497c      	ldr	r1, [pc, #496]	; (800e12c <tcp_slowtmr+0x588>)
 800df3c:	fba1 1303 	umull	r1, r3, r1, r3
 800df40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df42:	429a      	cmp	r2, r3
 800df44:	d911      	bls.n	800df6a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800df46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df48:	f004 fad2 	bl	80124f0 <tcp_keepalive>
 800df4c:	4603      	mov	r3, r0
 800df4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800df52:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800df56:	2b00      	cmp	r3, #0
 800df58:	d107      	bne.n	800df6a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800df5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800df60:	3301      	adds	r3, #1
 800df62:	b2da      	uxtb	r2, r3
 800df64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df66:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800df6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d011      	beq.n	800df96 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800df72:	4b6c      	ldr	r3, [pc, #432]	; (800e124 <tcp_slowtmr+0x580>)
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df78:	6a1b      	ldr	r3, [r3, #32]
 800df7a:	1ad2      	subs	r2, r2, r3
 800df7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800df82:	4619      	mov	r1, r3
 800df84:	460b      	mov	r3, r1
 800df86:	005b      	lsls	r3, r3, #1
 800df88:	440b      	add	r3, r1
 800df8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d302      	bcc.n	800df96 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800df90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df92:	f000 fde5 	bl	800eb60 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800df96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df98:	7d1b      	ldrb	r3, [r3, #20]
 800df9a:	2b03      	cmp	r3, #3
 800df9c:	d10b      	bne.n	800dfb6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df9e:	4b61      	ldr	r3, [pc, #388]	; (800e124 <tcp_slowtmr+0x580>)
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa4:	6a1b      	ldr	r3, [r3, #32]
 800dfa6:	1ad3      	subs	r3, r2, r3
 800dfa8:	2b28      	cmp	r3, #40	; 0x28
 800dfaa:	d904      	bls.n	800dfb6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800dfac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800dfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb8:	7d1b      	ldrb	r3, [r3, #20]
 800dfba:	2b09      	cmp	r3, #9
 800dfbc:	d10b      	bne.n	800dfd6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dfbe:	4b59      	ldr	r3, [pc, #356]	; (800e124 <tcp_slowtmr+0x580>)
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc4:	6a1b      	ldr	r3, [r3, #32]
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	2bf0      	cmp	r3, #240	; 0xf0
 800dfca:	d904      	bls.n	800dfd6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800dfcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dfd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d060      	beq.n	800e0a0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800dfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfe4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800dfe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfe8:	f000 fbfe 	bl	800e7e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d010      	beq.n	800e014 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dff2:	4b50      	ldr	r3, [pc, #320]	; (800e134 <tcp_slowtmr+0x590>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d106      	bne.n	800e00a <tcp_slowtmr+0x466>
 800dffc:	4b4e      	ldr	r3, [pc, #312]	; (800e138 <tcp_slowtmr+0x594>)
 800dffe:	f240 526d 	movw	r2, #1389	; 0x56d
 800e002:	494e      	ldr	r1, [pc, #312]	; (800e13c <tcp_slowtmr+0x598>)
 800e004:	484e      	ldr	r0, [pc, #312]	; (800e140 <tcp_slowtmr+0x59c>)
 800e006:	f004 fecf 	bl	8012da8 <iprintf>
        prev->next = pcb->next;
 800e00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00c:	68da      	ldr	r2, [r3, #12]
 800e00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e010:	60da      	str	r2, [r3, #12]
 800e012:	e00f      	b.n	800e034 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e014:	4b47      	ldr	r3, [pc, #284]	; (800e134 <tcp_slowtmr+0x590>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d006      	beq.n	800e02c <tcp_slowtmr+0x488>
 800e01e:	4b46      	ldr	r3, [pc, #280]	; (800e138 <tcp_slowtmr+0x594>)
 800e020:	f240 5271 	movw	r2, #1393	; 0x571
 800e024:	4947      	ldr	r1, [pc, #284]	; (800e144 <tcp_slowtmr+0x5a0>)
 800e026:	4846      	ldr	r0, [pc, #280]	; (800e140 <tcp_slowtmr+0x59c>)
 800e028:	f004 febe 	bl	8012da8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	4a40      	ldr	r2, [pc, #256]	; (800e134 <tcp_slowtmr+0x590>)
 800e032:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e034:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d013      	beq.n	800e064 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e042:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e044:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e048:	3304      	adds	r3, #4
 800e04a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e04c:	8ad2      	ldrh	r2, [r2, #22]
 800e04e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e050:	8b09      	ldrh	r1, [r1, #24]
 800e052:	9102      	str	r1, [sp, #8]
 800e054:	9201      	str	r2, [sp, #4]
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	462b      	mov	r3, r5
 800e05a:	4622      	mov	r2, r4
 800e05c:	4601      	mov	r1, r0
 800e05e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e060:	f004 f992 	bl	8012388 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06c:	7d1b      	ldrb	r3, [r3, #20]
 800e06e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e072:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e07a:	6838      	ldr	r0, [r7, #0]
 800e07c:	f7ff f9f4 	bl	800d468 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e080:	4b31      	ldr	r3, [pc, #196]	; (800e148 <tcp_slowtmr+0x5a4>)
 800e082:	2200      	movs	r2, #0
 800e084:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d004      	beq.n	800e096 <tcp_slowtmr+0x4f2>
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f06f 010c 	mvn.w	r1, #12
 800e092:	68b8      	ldr	r0, [r7, #8]
 800e094:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e096:	4b2c      	ldr	r3, [pc, #176]	; (800e148 <tcp_slowtmr+0x5a4>)
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d037      	beq.n	800e10e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e09e:	e592      	b.n	800dbc6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ac:	7f1b      	ldrb	r3, [r3, #28]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	b2da      	uxtb	r2, r3
 800e0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b8:	7f1a      	ldrb	r2, [r3, #28]
 800e0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0bc:	7f5b      	ldrb	r3, [r3, #29]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d325      	bcc.n	800e10e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e0c8:	4b1f      	ldr	r3, [pc, #124]	; (800e148 <tcp_slowtmr+0x5a4>)
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00b      	beq.n	800e0f0 <tcp_slowtmr+0x54c>
 800e0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0e0:	6912      	ldr	r2, [r2, #16]
 800e0e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0e4:	4610      	mov	r0, r2
 800e0e6:	4798      	blx	r3
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e0ee:	e002      	b.n	800e0f6 <tcp_slowtmr+0x552>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e0f6:	4b14      	ldr	r3, [pc, #80]	; (800e148 <tcp_slowtmr+0x5a4>)
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d000      	beq.n	800e100 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e0fe:	e562      	b.n	800dbc6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e100:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e104:	2b00      	cmp	r3, #0
 800e106:	d102      	bne.n	800e10e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e10a:	f003 fb89 	bl	8011820 <tcp_output>
  while (pcb != NULL) {
 800e10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e110:	2b00      	cmp	r3, #0
 800e112:	f47f ad5e 	bne.w	800dbd2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e116:	2300      	movs	r3, #0
 800e118:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e11a:	4b0c      	ldr	r3, [pc, #48]	; (800e14c <tcp_slowtmr+0x5a8>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e120:	e069      	b.n	800e1f6 <tcp_slowtmr+0x652>
 800e122:	bf00      	nop
 800e124:	24008180 	.word	0x24008180
 800e128:	000a4cb8 	.word	0x000a4cb8
 800e12c:	10624dd3 	.word	0x10624dd3
 800e130:	000124f8 	.word	0x000124f8
 800e134:	2400818c 	.word	0x2400818c
 800e138:	08015238 	.word	0x08015238
 800e13c:	08015694 	.word	0x08015694
 800e140:	080152a0 	.word	0x080152a0
 800e144:	080156c0 	.word	0x080156c0
 800e148:	24008194 	.word	0x24008194
 800e14c:	24008190 	.word	0x24008190
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e152:	7d1b      	ldrb	r3, [r3, #20]
 800e154:	2b0a      	cmp	r3, #10
 800e156:	d006      	beq.n	800e166 <tcp_slowtmr+0x5c2>
 800e158:	4b2b      	ldr	r3, [pc, #172]	; (800e208 <tcp_slowtmr+0x664>)
 800e15a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e15e:	492b      	ldr	r1, [pc, #172]	; (800e20c <tcp_slowtmr+0x668>)
 800e160:	482b      	ldr	r0, [pc, #172]	; (800e210 <tcp_slowtmr+0x66c>)
 800e162:	f004 fe21 	bl	8012da8 <iprintf>
    pcb_remove = 0;
 800e166:	2300      	movs	r3, #0
 800e168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e16c:	4b29      	ldr	r3, [pc, #164]	; (800e214 <tcp_slowtmr+0x670>)
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e172:	6a1b      	ldr	r3, [r3, #32]
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	2bf0      	cmp	r3, #240	; 0xf0
 800e178:	d904      	bls.n	800e184 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e17a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e17e:	3301      	adds	r3, #1
 800e180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d02f      	beq.n	800e1ec <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e18c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e18e:	f000 fb2b 	bl	800e7e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e194:	2b00      	cmp	r3, #0
 800e196:	d010      	beq.n	800e1ba <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e198:	4b1f      	ldr	r3, [pc, #124]	; (800e218 <tcp_slowtmr+0x674>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d106      	bne.n	800e1b0 <tcp_slowtmr+0x60c>
 800e1a2:	4b19      	ldr	r3, [pc, #100]	; (800e208 <tcp_slowtmr+0x664>)
 800e1a4:	f240 52af 	movw	r2, #1455	; 0x5af
 800e1a8:	491c      	ldr	r1, [pc, #112]	; (800e21c <tcp_slowtmr+0x678>)
 800e1aa:	4819      	ldr	r0, [pc, #100]	; (800e210 <tcp_slowtmr+0x66c>)
 800e1ac:	f004 fdfc 	bl	8012da8 <iprintf>
        prev->next = pcb->next;
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	68da      	ldr	r2, [r3, #12]
 800e1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b6:	60da      	str	r2, [r3, #12]
 800e1b8:	e00f      	b.n	800e1da <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e1ba:	4b17      	ldr	r3, [pc, #92]	; (800e218 <tcp_slowtmr+0x674>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d006      	beq.n	800e1d2 <tcp_slowtmr+0x62e>
 800e1c4:	4b10      	ldr	r3, [pc, #64]	; (800e208 <tcp_slowtmr+0x664>)
 800e1c6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e1ca:	4915      	ldr	r1, [pc, #84]	; (800e220 <tcp_slowtmr+0x67c>)
 800e1cc:	4810      	ldr	r0, [pc, #64]	; (800e210 <tcp_slowtmr+0x66c>)
 800e1ce:	f004 fdeb 	bl	8012da8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	4a10      	ldr	r2, [pc, #64]	; (800e218 <tcp_slowtmr+0x674>)
 800e1d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e1e4:	69f8      	ldr	r0, [r7, #28]
 800e1e6:	f7ff f93f 	bl	800d468 <tcp_free>
 800e1ea:	e004      	b.n	800e1f6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d1a9      	bne.n	800e150 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e1fc:	bf00      	nop
 800e1fe:	bf00      	nop
 800e200:	3730      	adds	r7, #48	; 0x30
 800e202:	46bd      	mov	sp, r7
 800e204:	bdb0      	pop	{r4, r5, r7, pc}
 800e206:	bf00      	nop
 800e208:	08015238 	.word	0x08015238
 800e20c:	080156ec 	.word	0x080156ec
 800e210:	080152a0 	.word	0x080152a0
 800e214:	24008180 	.word	0x24008180
 800e218:	24008190 	.word	0x24008190
 800e21c:	0801571c 	.word	0x0801571c
 800e220:	08015744 	.word	0x08015744

0800e224 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e22a:	4b2d      	ldr	r3, [pc, #180]	; (800e2e0 <tcp_fasttmr+0xbc>)
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	3301      	adds	r3, #1
 800e230:	b2da      	uxtb	r2, r3
 800e232:	4b2b      	ldr	r3, [pc, #172]	; (800e2e0 <tcp_fasttmr+0xbc>)
 800e234:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e236:	4b2b      	ldr	r3, [pc, #172]	; (800e2e4 <tcp_fasttmr+0xc0>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e23c:	e048      	b.n	800e2d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	7f9a      	ldrb	r2, [r3, #30]
 800e242:	4b27      	ldr	r3, [pc, #156]	; (800e2e0 <tcp_fasttmr+0xbc>)
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	429a      	cmp	r2, r3
 800e248:	d03f      	beq.n	800e2ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e24a:	4b25      	ldr	r3, [pc, #148]	; (800e2e0 <tcp_fasttmr+0xbc>)
 800e24c:	781a      	ldrb	r2, [r3, #0]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	8b5b      	ldrh	r3, [r3, #26]
 800e256:	f003 0301 	and.w	r3, r3, #1
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d010      	beq.n	800e280 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	8b5b      	ldrh	r3, [r3, #26]
 800e262:	f043 0302 	orr.w	r3, r3, #2
 800e266:	b29a      	uxth	r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f003 fad7 	bl	8011820 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	8b5b      	ldrh	r3, [r3, #26]
 800e276:	f023 0303 	bic.w	r3, r3, #3
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	8b5b      	ldrh	r3, [r3, #26]
 800e284:	f003 0308 	and.w	r3, r3, #8
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d009      	beq.n	800e2a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	8b5b      	ldrh	r3, [r3, #26]
 800e290:	f023 0308 	bic.w	r3, r3, #8
 800e294:	b29a      	uxth	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff fa78 	bl	800d790 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00a      	beq.n	800e2c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e2ae:	4b0e      	ldr	r3, [pc, #56]	; (800e2e8 <tcp_fasttmr+0xc4>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 f819 	bl	800e2ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e2ba:	4b0b      	ldr	r3, [pc, #44]	; (800e2e8 <tcp_fasttmr+0xc4>)
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d000      	beq.n	800e2c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e2c2:	e7b8      	b.n	800e236 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	607b      	str	r3, [r7, #4]
 800e2c8:	e002      	b.n	800e2d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1b3      	bne.n	800e23e <tcp_fasttmr+0x1a>
    }
  }
}
 800e2d6:	bf00      	nop
 800e2d8:	bf00      	nop
 800e2da:	3708      	adds	r7, #8
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	24008196 	.word	0x24008196
 800e2e4:	2400818c 	.word	0x2400818c
 800e2e8:	24008194 	.word	0x24008194

0800e2ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e2ec:	b590      	push	{r4, r7, lr}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d109      	bne.n	800e30e <tcp_process_refused_data+0x22>
 800e2fa:	4b37      	ldr	r3, [pc, #220]	; (800e3d8 <tcp_process_refused_data+0xec>)
 800e2fc:	f240 6209 	movw	r2, #1545	; 0x609
 800e300:	4936      	ldr	r1, [pc, #216]	; (800e3dc <tcp_process_refused_data+0xf0>)
 800e302:	4837      	ldr	r0, [pc, #220]	; (800e3e0 <tcp_process_refused_data+0xf4>)
 800e304:	f004 fd50 	bl	8012da8 <iprintf>
 800e308:	f06f 030f 	mvn.w	r3, #15
 800e30c:	e060      	b.n	800e3d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e312:	7b5b      	ldrb	r3, [r3, #13]
 800e314:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e31a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00b      	beq.n	800e344 <tcp_process_refused_data+0x58>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6918      	ldr	r0, [r3, #16]
 800e336:	2300      	movs	r3, #0
 800e338:	68ba      	ldr	r2, [r7, #8]
 800e33a:	6879      	ldr	r1, [r7, #4]
 800e33c:	47a0      	blx	r4
 800e33e:	4603      	mov	r3, r0
 800e340:	73fb      	strb	r3, [r7, #15]
 800e342:	e007      	b.n	800e354 <tcp_process_refused_data+0x68>
 800e344:	2300      	movs	r3, #0
 800e346:	68ba      	ldr	r2, [r7, #8]
 800e348:	6879      	ldr	r1, [r7, #4]
 800e34a:	2000      	movs	r0, #0
 800e34c:	f000 f8a4 	bl	800e498 <tcp_recv_null>
 800e350:	4603      	mov	r3, r0
 800e352:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d12a      	bne.n	800e3b2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e35c:	7bbb      	ldrb	r3, [r7, #14]
 800e35e:	f003 0320 	and.w	r3, r3, #32
 800e362:	2b00      	cmp	r3, #0
 800e364:	d033      	beq.n	800e3ce <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e36a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e36e:	d005      	beq.n	800e37c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e374:	3301      	adds	r3, #1
 800e376:	b29a      	uxth	r2, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00b      	beq.n	800e39e <tcp_process_refused_data+0xb2>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6918      	ldr	r0, [r3, #16]
 800e390:	2300      	movs	r3, #0
 800e392:	2200      	movs	r2, #0
 800e394:	6879      	ldr	r1, [r7, #4]
 800e396:	47a0      	blx	r4
 800e398:	4603      	mov	r3, r0
 800e39a:	73fb      	strb	r3, [r7, #15]
 800e39c:	e001      	b.n	800e3a2 <tcp_process_refused_data+0xb6>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e3a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3a6:	f113 0f0d 	cmn.w	r3, #13
 800e3aa:	d110      	bne.n	800e3ce <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e3ac:	f06f 030c 	mvn.w	r3, #12
 800e3b0:	e00e      	b.n	800e3d0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e3b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3b6:	f113 0f0d 	cmn.w	r3, #13
 800e3ba:	d102      	bne.n	800e3c2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e3bc:	f06f 030c 	mvn.w	r3, #12
 800e3c0:	e006      	b.n	800e3d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e3c8:	f06f 0304 	mvn.w	r3, #4
 800e3cc:	e000      	b.n	800e3d0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3714      	adds	r7, #20
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd90      	pop	{r4, r7, pc}
 800e3d8:	08015238 	.word	0x08015238
 800e3dc:	0801576c 	.word	0x0801576c
 800e3e0:	080152a0 	.word	0x080152a0

0800e3e4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e3ec:	e007      	b.n	800e3fe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f80a 	bl	800e40e <tcp_seg_free>
    seg = next;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1f4      	bne.n	800e3ee <tcp_segs_free+0xa>
  }
}
 800e404:	bf00      	nop
 800e406:	bf00      	nop
 800e408:	3710      	adds	r7, #16
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}

0800e40e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e40e:	b580      	push	{r7, lr}
 800e410:	b082      	sub	sp, #8
 800e412:	af00      	add	r7, sp, #0
 800e414:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d00c      	beq.n	800e436 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d004      	beq.n	800e42e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fe fd7d 	bl	800cf28 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e42e:	6879      	ldr	r1, [r7, #4]
 800e430:	2003      	movs	r0, #3
 800e432:	f7fd ff5f 	bl	800c2f4 <memp_free>
  }
}
 800e436:	bf00      	nop
 800e438:	3708      	adds	r7, #8
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
	...

0800e440 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d106      	bne.n	800e45c <tcp_seg_copy+0x1c>
 800e44e:	4b0f      	ldr	r3, [pc, #60]	; (800e48c <tcp_seg_copy+0x4c>)
 800e450:	f240 6282 	movw	r2, #1666	; 0x682
 800e454:	490e      	ldr	r1, [pc, #56]	; (800e490 <tcp_seg_copy+0x50>)
 800e456:	480f      	ldr	r0, [pc, #60]	; (800e494 <tcp_seg_copy+0x54>)
 800e458:	f004 fca6 	bl	8012da8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e45c:	2003      	movs	r0, #3
 800e45e:	f7fd fed9 	bl	800c214 <memp_malloc>
 800e462:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <tcp_seg_copy+0x2e>
    return NULL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	e00a      	b.n	800e484 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e46e:	2210      	movs	r2, #16
 800e470:	6879      	ldr	r1, [r7, #4]
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f004 fc82 	bl	8012d7c <memcpy>
  pbuf_ref(cseg->p);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fe fdf3 	bl	800d068 <pbuf_ref>
  return cseg;
 800e482:	68fb      	ldr	r3, [r7, #12]
}
 800e484:	4618      	mov	r0, r3
 800e486:	3710      	adds	r7, #16
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	08015238 	.word	0x08015238
 800e490:	080157b0 	.word	0x080157b0
 800e494:	080152a0 	.word	0x080152a0

0800e498 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
 800e4a4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d109      	bne.n	800e4c0 <tcp_recv_null+0x28>
 800e4ac:	4b12      	ldr	r3, [pc, #72]	; (800e4f8 <tcp_recv_null+0x60>)
 800e4ae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e4b2:	4912      	ldr	r1, [pc, #72]	; (800e4fc <tcp_recv_null+0x64>)
 800e4b4:	4812      	ldr	r0, [pc, #72]	; (800e500 <tcp_recv_null+0x68>)
 800e4b6:	f004 fc77 	bl	8012da8 <iprintf>
 800e4ba:	f06f 030f 	mvn.w	r3, #15
 800e4be:	e016      	b.n	800e4ee <tcp_recv_null+0x56>

  if (p != NULL) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d009      	beq.n	800e4da <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	891b      	ldrh	r3, [r3, #8]
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	68b8      	ldr	r0, [r7, #8]
 800e4ce:	f7ff fb19 	bl	800db04 <tcp_recved>
    pbuf_free(p);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f7fe fd28 	bl	800cf28 <pbuf_free>
 800e4d8:	e008      	b.n	800e4ec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e4da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d104      	bne.n	800e4ec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e4e2:	68b8      	ldr	r0, [r7, #8]
 800e4e4:	f7ff f9be 	bl	800d864 <tcp_close>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	e000      	b.n	800e4ee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	08015238 	.word	0x08015238
 800e4fc:	080157cc 	.word	0x080157cc
 800e500:	080152a0 	.word	0x080152a0

0800e504 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b086      	sub	sp, #24
 800e508:	af00      	add	r7, sp, #0
 800e50a:	4603      	mov	r3, r0
 800e50c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e50e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e512:	2b00      	cmp	r3, #0
 800e514:	db01      	blt.n	800e51a <tcp_kill_prio+0x16>
 800e516:	79fb      	ldrb	r3, [r7, #7]
 800e518:	e000      	b.n	800e51c <tcp_kill_prio+0x18>
 800e51a:	237f      	movs	r3, #127	; 0x7f
 800e51c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e51e:	7afb      	ldrb	r3, [r7, #11]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d034      	beq.n	800e58e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e524:	7afb      	ldrb	r3, [r7, #11]
 800e526:	3b01      	subs	r3, #1
 800e528:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e52a:	2300      	movs	r3, #0
 800e52c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e52e:	2300      	movs	r3, #0
 800e530:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e532:	4b19      	ldr	r3, [pc, #100]	; (800e598 <tcp_kill_prio+0x94>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	617b      	str	r3, [r7, #20]
 800e538:	e01f      	b.n	800e57a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	7d5b      	ldrb	r3, [r3, #21]
 800e53e:	7afa      	ldrb	r2, [r7, #11]
 800e540:	429a      	cmp	r2, r3
 800e542:	d80c      	bhi.n	800e55e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e548:	7afa      	ldrb	r2, [r7, #11]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d112      	bne.n	800e574 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e54e:	4b13      	ldr	r3, [pc, #76]	; (800e59c <tcp_kill_prio+0x98>)
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	6a1b      	ldr	r3, [r3, #32]
 800e556:	1ad3      	subs	r3, r2, r3
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d80a      	bhi.n	800e574 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e55e:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <tcp_kill_prio+0x98>)
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	6a1b      	ldr	r3, [r3, #32]
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	7d5b      	ldrb	r3, [r3, #21]
 800e572:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	617b      	str	r3, [r7, #20]
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d1dc      	bne.n	800e53a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d004      	beq.n	800e590 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e586:	6938      	ldr	r0, [r7, #16]
 800e588:	f7ff fa56 	bl	800da38 <tcp_abort>
 800e58c:	e000      	b.n	800e590 <tcp_kill_prio+0x8c>
    return;
 800e58e:	bf00      	nop
  }
}
 800e590:	3718      	adds	r7, #24
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	2400818c 	.word	0x2400818c
 800e59c:	24008180 	.word	0x24008180

0800e5a0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e5aa:	79fb      	ldrb	r3, [r7, #7]
 800e5ac:	2b08      	cmp	r3, #8
 800e5ae:	d009      	beq.n	800e5c4 <tcp_kill_state+0x24>
 800e5b0:	79fb      	ldrb	r3, [r7, #7]
 800e5b2:	2b09      	cmp	r3, #9
 800e5b4:	d006      	beq.n	800e5c4 <tcp_kill_state+0x24>
 800e5b6:	4b1a      	ldr	r3, [pc, #104]	; (800e620 <tcp_kill_state+0x80>)
 800e5b8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e5bc:	4919      	ldr	r1, [pc, #100]	; (800e624 <tcp_kill_state+0x84>)
 800e5be:	481a      	ldr	r0, [pc, #104]	; (800e628 <tcp_kill_state+0x88>)
 800e5c0:	f004 fbf2 	bl	8012da8 <iprintf>

  inactivity = 0;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5cc:	4b17      	ldr	r3, [pc, #92]	; (800e62c <tcp_kill_state+0x8c>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	617b      	str	r3, [r7, #20]
 800e5d2:	e017      	b.n	800e604 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	7d1b      	ldrb	r3, [r3, #20]
 800e5d8:	79fa      	ldrb	r2, [r7, #7]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d10f      	bne.n	800e5fe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e5de:	4b14      	ldr	r3, [pc, #80]	; (800e630 <tcp_kill_state+0x90>)
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	6a1b      	ldr	r3, [r3, #32]
 800e5e6:	1ad3      	subs	r3, r2, r3
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d807      	bhi.n	800e5fe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e5ee:	4b10      	ldr	r3, [pc, #64]	; (800e630 <tcp_kill_state+0x90>)
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	617b      	str	r3, [r7, #20]
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1e4      	bne.n	800e5d4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d003      	beq.n	800e618 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e610:	2100      	movs	r1, #0
 800e612:	6938      	ldr	r0, [r7, #16]
 800e614:	f7ff f952 	bl	800d8bc <tcp_abandon>
  }
}
 800e618:	bf00      	nop
 800e61a:	3718      	adds	r7, #24
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	08015238 	.word	0x08015238
 800e624:	080157e8 	.word	0x080157e8
 800e628:	080152a0 	.word	0x080152a0
 800e62c:	2400818c 	.word	0x2400818c
 800e630:	24008180 	.word	0x24008180

0800e634 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e63e:	2300      	movs	r3, #0
 800e640:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e642:	4b12      	ldr	r3, [pc, #72]	; (800e68c <tcp_kill_timewait+0x58>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	60fb      	str	r3, [r7, #12]
 800e648:	e012      	b.n	800e670 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e64a:	4b11      	ldr	r3, [pc, #68]	; (800e690 <tcp_kill_timewait+0x5c>)
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	6a1b      	ldr	r3, [r3, #32]
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	429a      	cmp	r2, r3
 800e658:	d807      	bhi.n	800e66a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e65a:	4b0d      	ldr	r3, [pc, #52]	; (800e690 <tcp_kill_timewait+0x5c>)
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	6a1b      	ldr	r3, [r3, #32]
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	60fb      	str	r3, [r7, #12]
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d1e9      	bne.n	800e64a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d002      	beq.n	800e682 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e67c:	68b8      	ldr	r0, [r7, #8]
 800e67e:	f7ff f9db 	bl	800da38 <tcp_abort>
  }
}
 800e682:	bf00      	nop
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	24008190 	.word	0x24008190
 800e690:	24008180 	.word	0x24008180

0800e694 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e69a:	4b10      	ldr	r3, [pc, #64]	; (800e6dc <tcp_handle_closepend+0x48>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e6a0:	e014      	b.n	800e6cc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	8b5b      	ldrh	r3, [r3, #26]
 800e6ac:	f003 0308 	and.w	r3, r3, #8
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d009      	beq.n	800e6c8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	8b5b      	ldrh	r3, [r3, #26]
 800e6b8:	f023 0308 	bic.w	r3, r3, #8
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7ff f864 	bl	800d790 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1e7      	bne.n	800e6a2 <tcp_handle_closepend+0xe>
  }
}
 800e6d2:	bf00      	nop
 800e6d4:	bf00      	nop
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	2400818c 	.word	0x2400818c

0800e6e0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e6ea:	2001      	movs	r0, #1
 800e6ec:	f7fd fd92 	bl	800c214 <memp_malloc>
 800e6f0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d126      	bne.n	800e746 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e6f8:	f7ff ffcc 	bl	800e694 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e6fc:	f7ff ff9a 	bl	800e634 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e700:	2001      	movs	r0, #1
 800e702:	f7fd fd87 	bl	800c214 <memp_malloc>
 800e706:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d11b      	bne.n	800e746 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e70e:	2009      	movs	r0, #9
 800e710:	f7ff ff46 	bl	800e5a0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e714:	2001      	movs	r0, #1
 800e716:	f7fd fd7d 	bl	800c214 <memp_malloc>
 800e71a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d111      	bne.n	800e746 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e722:	2008      	movs	r0, #8
 800e724:	f7ff ff3c 	bl	800e5a0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e728:	2001      	movs	r0, #1
 800e72a:	f7fd fd73 	bl	800c214 <memp_malloc>
 800e72e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d107      	bne.n	800e746 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e736:	79fb      	ldrb	r3, [r7, #7]
 800e738:	4618      	mov	r0, r3
 800e73a:	f7ff fee3 	bl	800e504 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e73e:	2001      	movs	r0, #1
 800e740:	f7fd fd68 	bl	800c214 <memp_malloc>
 800e744:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d03f      	beq.n	800e7cc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e74c:	229c      	movs	r2, #156	; 0x9c
 800e74e:	2100      	movs	r1, #0
 800e750:	68f8      	ldr	r0, [r7, #12]
 800e752:	f004 fb21 	bl	8012d98 <memset>
    pcb->prio = prio;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	79fa      	ldrb	r2, [r7, #7]
 800e75a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e762:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e76c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	22ff      	movs	r2, #255	; 0xff
 800e77a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e782:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2206      	movs	r2, #6
 800e788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2206      	movs	r2, #6
 800e790:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e798:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2201      	movs	r2, #1
 800e79e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e7a2:	4b0d      	ldr	r3, [pc, #52]	; (800e7d8 <tcp_alloc+0xf8>)
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e7aa:	4b0c      	ldr	r3, [pc, #48]	; (800e7dc <tcp_alloc+0xfc>)
 800e7ac:	781a      	ldrb	r2, [r3, #0]
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e7b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	4a08      	ldr	r2, [pc, #32]	; (800e7e0 <tcp_alloc+0x100>)
 800e7c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	4a07      	ldr	r2, [pc, #28]	; (800e7e4 <tcp_alloc+0x104>)
 800e7c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3710      	adds	r7, #16
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	24008180 	.word	0x24008180
 800e7dc:	24008196 	.word	0x24008196
 800e7e0:	0800e499 	.word	0x0800e499
 800e7e4:	006ddd00 	.word	0x006ddd00

0800e7e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d107      	bne.n	800e806 <tcp_pcb_purge+0x1e>
 800e7f6:	4b21      	ldr	r3, [pc, #132]	; (800e87c <tcp_pcb_purge+0x94>)
 800e7f8:	f640 0251 	movw	r2, #2129	; 0x851
 800e7fc:	4920      	ldr	r1, [pc, #128]	; (800e880 <tcp_pcb_purge+0x98>)
 800e7fe:	4821      	ldr	r0, [pc, #132]	; (800e884 <tcp_pcb_purge+0x9c>)
 800e800:	f004 fad2 	bl	8012da8 <iprintf>
 800e804:	e037      	b.n	800e876 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	7d1b      	ldrb	r3, [r3, #20]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d033      	beq.n	800e876 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e812:	2b0a      	cmp	r3, #10
 800e814:	d02f      	beq.n	800e876 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d02b      	beq.n	800e876 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e822:	2b00      	cmp	r3, #0
 800e824:	d007      	beq.n	800e836 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7fe fb7c 	bl	800cf28 <pbuf_free>
      pcb->refused_data = NULL;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2200      	movs	r2, #0
 800e834:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d002      	beq.n	800e844 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f000 f98e 	bl	800eb60 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e84a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e850:	4618      	mov	r0, r3
 800e852:	f7ff fdc7 	bl	800e3e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7ff fdc2 	bl	800e3e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	66da      	str	r2, [r3, #108]	; 0x6c
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e876:	3708      	adds	r7, #8
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	08015238 	.word	0x08015238
 800e880:	080158a8 	.word	0x080158a8
 800e884:	080152a0 	.word	0x080152a0

0800e888 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d106      	bne.n	800e8a6 <tcp_pcb_remove+0x1e>
 800e898:	4b3e      	ldr	r3, [pc, #248]	; (800e994 <tcp_pcb_remove+0x10c>)
 800e89a:	f640 0283 	movw	r2, #2179	; 0x883
 800e89e:	493e      	ldr	r1, [pc, #248]	; (800e998 <tcp_pcb_remove+0x110>)
 800e8a0:	483e      	ldr	r0, [pc, #248]	; (800e99c <tcp_pcb_remove+0x114>)
 800e8a2:	f004 fa81 	bl	8012da8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d106      	bne.n	800e8ba <tcp_pcb_remove+0x32>
 800e8ac:	4b39      	ldr	r3, [pc, #228]	; (800e994 <tcp_pcb_remove+0x10c>)
 800e8ae:	f640 0284 	movw	r2, #2180	; 0x884
 800e8b2:	493b      	ldr	r1, [pc, #236]	; (800e9a0 <tcp_pcb_remove+0x118>)
 800e8b4:	4839      	ldr	r0, [pc, #228]	; (800e99c <tcp_pcb_remove+0x114>)
 800e8b6:	f004 fa77 	bl	8012da8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	683a      	ldr	r2, [r7, #0]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d105      	bne.n	800e8d0 <tcp_pcb_remove+0x48>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68da      	ldr	r2, [r3, #12]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	601a      	str	r2, [r3, #0]
 800e8ce:	e013      	b.n	800e8f8 <tcp_pcb_remove+0x70>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	60fb      	str	r3, [r7, #12]
 800e8d6:	e00c      	b.n	800e8f2 <tcp_pcb_remove+0x6a>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	683a      	ldr	r2, [r7, #0]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d104      	bne.n	800e8ec <tcp_pcb_remove+0x64>
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	68da      	ldr	r2, [r3, #12]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	60da      	str	r2, [r3, #12]
 800e8ea:	e005      	b.n	800e8f8 <tcp_pcb_remove+0x70>
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	60fb      	str	r3, [r7, #12]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1ef      	bne.n	800e8d8 <tcp_pcb_remove+0x50>
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e8fe:	6838      	ldr	r0, [r7, #0]
 800e900:	f7ff ff72 	bl	800e7e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	7d1b      	ldrb	r3, [r3, #20]
 800e908:	2b0a      	cmp	r3, #10
 800e90a:	d013      	beq.n	800e934 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e910:	2b01      	cmp	r3, #1
 800e912:	d00f      	beq.n	800e934 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	8b5b      	ldrh	r3, [r3, #26]
 800e918:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d009      	beq.n	800e934 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	8b5b      	ldrh	r3, [r3, #26]
 800e924:	f043 0302 	orr.w	r3, r3, #2
 800e928:	b29a      	uxth	r2, r3
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e92e:	6838      	ldr	r0, [r7, #0]
 800e930:	f002 ff76 	bl	8011820 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	7d1b      	ldrb	r3, [r3, #20]
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d020      	beq.n	800e97e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e940:	2b00      	cmp	r3, #0
 800e942:	d006      	beq.n	800e952 <tcp_pcb_remove+0xca>
 800e944:	4b13      	ldr	r3, [pc, #76]	; (800e994 <tcp_pcb_remove+0x10c>)
 800e946:	f640 0293 	movw	r2, #2195	; 0x893
 800e94a:	4916      	ldr	r1, [pc, #88]	; (800e9a4 <tcp_pcb_remove+0x11c>)
 800e94c:	4813      	ldr	r0, [pc, #76]	; (800e99c <tcp_pcb_remove+0x114>)
 800e94e:	f004 fa2b 	bl	8012da8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e956:	2b00      	cmp	r3, #0
 800e958:	d006      	beq.n	800e968 <tcp_pcb_remove+0xe0>
 800e95a:	4b0e      	ldr	r3, [pc, #56]	; (800e994 <tcp_pcb_remove+0x10c>)
 800e95c:	f640 0294 	movw	r2, #2196	; 0x894
 800e960:	4911      	ldr	r1, [pc, #68]	; (800e9a8 <tcp_pcb_remove+0x120>)
 800e962:	480e      	ldr	r0, [pc, #56]	; (800e99c <tcp_pcb_remove+0x114>)
 800e964:	f004 fa20 	bl	8012da8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d006      	beq.n	800e97e <tcp_pcb_remove+0xf6>
 800e970:	4b08      	ldr	r3, [pc, #32]	; (800e994 <tcp_pcb_remove+0x10c>)
 800e972:	f640 0296 	movw	r2, #2198	; 0x896
 800e976:	490d      	ldr	r1, [pc, #52]	; (800e9ac <tcp_pcb_remove+0x124>)
 800e978:	4808      	ldr	r0, [pc, #32]	; (800e99c <tcp_pcb_remove+0x114>)
 800e97a:	f004 fa15 	bl	8012da8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	2200      	movs	r2, #0
 800e982:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	2200      	movs	r2, #0
 800e988:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e98a:	bf00      	nop
 800e98c:	3710      	adds	r7, #16
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	08015238 	.word	0x08015238
 800e998:	080158c4 	.word	0x080158c4
 800e99c:	080152a0 	.word	0x080152a0
 800e9a0:	080158e0 	.word	0x080158e0
 800e9a4:	08015900 	.word	0x08015900
 800e9a8:	08015918 	.word	0x08015918
 800e9ac:	08015934 	.word	0x08015934

0800e9b0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d106      	bne.n	800e9cc <tcp_next_iss+0x1c>
 800e9be:	4b0a      	ldr	r3, [pc, #40]	; (800e9e8 <tcp_next_iss+0x38>)
 800e9c0:	f640 02af 	movw	r2, #2223	; 0x8af
 800e9c4:	4909      	ldr	r1, [pc, #36]	; (800e9ec <tcp_next_iss+0x3c>)
 800e9c6:	480a      	ldr	r0, [pc, #40]	; (800e9f0 <tcp_next_iss+0x40>)
 800e9c8:	f004 f9ee 	bl	8012da8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e9cc:	4b09      	ldr	r3, [pc, #36]	; (800e9f4 <tcp_next_iss+0x44>)
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	4b09      	ldr	r3, [pc, #36]	; (800e9f8 <tcp_next_iss+0x48>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	4a07      	ldr	r2, [pc, #28]	; (800e9f4 <tcp_next_iss+0x44>)
 800e9d8:	6013      	str	r3, [r2, #0]
  return iss;
 800e9da:	4b06      	ldr	r3, [pc, #24]	; (800e9f4 <tcp_next_iss+0x44>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	08015238 	.word	0x08015238
 800e9ec:	0801594c 	.word	0x0801594c
 800e9f0:	080152a0 	.word	0x080152a0
 800e9f4:	24000010 	.word	0x24000010
 800e9f8:	24008180 	.word	0x24008180

0800e9fc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	4603      	mov	r3, r0
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	607a      	str	r2, [r7, #4]
 800ea08:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d106      	bne.n	800ea1e <tcp_eff_send_mss_netif+0x22>
 800ea10:	4b14      	ldr	r3, [pc, #80]	; (800ea64 <tcp_eff_send_mss_netif+0x68>)
 800ea12:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ea16:	4914      	ldr	r1, [pc, #80]	; (800ea68 <tcp_eff_send_mss_netif+0x6c>)
 800ea18:	4814      	ldr	r0, [pc, #80]	; (800ea6c <tcp_eff_send_mss_netif+0x70>)
 800ea1a:	f004 f9c5 	bl	8012da8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d101      	bne.n	800ea28 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ea24:	89fb      	ldrh	r3, [r7, #14]
 800ea26:	e019      	b.n	800ea5c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea2c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ea2e:	8afb      	ldrh	r3, [r7, #22]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d012      	beq.n	800ea5a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ea34:	2328      	movs	r3, #40	; 0x28
 800ea36:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ea38:	8afa      	ldrh	r2, [r7, #22]
 800ea3a:	8abb      	ldrh	r3, [r7, #20]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d904      	bls.n	800ea4a <tcp_eff_send_mss_netif+0x4e>
 800ea40:	8afa      	ldrh	r2, [r7, #22]
 800ea42:	8abb      	ldrh	r3, [r7, #20]
 800ea44:	1ad3      	subs	r3, r2, r3
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	e000      	b.n	800ea4c <tcp_eff_send_mss_netif+0x50>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ea4e:	8a7a      	ldrh	r2, [r7, #18]
 800ea50:	89fb      	ldrh	r3, [r7, #14]
 800ea52:	4293      	cmp	r3, r2
 800ea54:	bf28      	it	cs
 800ea56:	4613      	movcs	r3, r2
 800ea58:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ea5a:	89fb      	ldrh	r3, [r7, #14]
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3718      	adds	r7, #24
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	08015238 	.word	0x08015238
 800ea68:	08015968 	.word	0x08015968
 800ea6c:	080152a0 	.word	0x080152a0

0800ea70 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d120      	bne.n	800eac6 <tcp_netif_ip_addr_changed_pcblist+0x56>
 800ea84:	4b14      	ldr	r3, [pc, #80]	; (800ead8 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 800ea86:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ea8a:	4914      	ldr	r1, [pc, #80]	; (800eadc <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 800ea8c:	4814      	ldr	r0, [pc, #80]	; (800eae0 <tcp_netif_ip_addr_changed_pcblist+0x70>)
 800ea8e:	f004 f98b 	bl	8012da8 <iprintf>

  while (pcb != NULL) {
 800ea92:	e018      	b.n	800eac6 <tcp_netif_ip_addr_changed_pcblist+0x56>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d10f      	bne.n	800eac0 <tcp_netif_ip_addr_changed_pcblist+0x50>
#if LWIP_AUTOIP
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d008      	beq.n	800eac0 <tcp_netif_ip_addr_changed_pcblist+0x50>
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800eab4:	68f8      	ldr	r0, [r7, #12]
 800eab6:	f7fe ffbf 	bl	800da38 <tcp_abort>
      pcb = next;
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	60fb      	str	r3, [r7, #12]
       ) {
 800eabe:	e002      	b.n	800eac6 <tcp_netif_ip_addr_changed_pcblist+0x56>
    } else {
      pcb = pcb->next;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	68db      	ldr	r3, [r3, #12]
 800eac4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d1e3      	bne.n	800ea94 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800eacc:	bf00      	nop
 800eace:	bf00      	nop
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	08015238 	.word	0x08015238
 800eadc:	08015990 	.word	0x08015990
 800eae0:	080152a0 	.word	0x080152a0

0800eae4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b084      	sub	sp, #16
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d02a      	beq.n	800eb4a <tcp_netif_ip_addr_changed+0x66>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d026      	beq.n	800eb4a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800eafc:	4b15      	ldr	r3, [pc, #84]	; (800eb54 <tcp_netif_ip_addr_changed+0x70>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4619      	mov	r1, r3
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7ff ffb4 	bl	800ea70 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800eb08:	4b13      	ldr	r3, [pc, #76]	; (800eb58 <tcp_netif_ip_addr_changed+0x74>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f7ff ffae 	bl	800ea70 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d017      	beq.n	800eb4a <tcp_netif_ip_addr_changed+0x66>
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d013      	beq.n	800eb4a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb22:	4b0e      	ldr	r3, [pc, #56]	; (800eb5c <tcp_netif_ip_addr_changed+0x78>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	60fb      	str	r3, [r7, #12]
 800eb28:	e00c      	b.n	800eb44 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d103      	bne.n	800eb3e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	60fb      	str	r3, [r7, #12]
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d1ef      	bne.n	800eb2a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800eb4a:	bf00      	nop
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	2400818c 	.word	0x2400818c
 800eb58:	24008184 	.word	0x24008184
 800eb5c:	24008188 	.word	0x24008188

0800eb60 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d007      	beq.n	800eb80 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7ff fc35 	bl	800e3e4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800eb80:	bf00      	nop
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eb88:	b590      	push	{r4, r7, lr}
 800eb8a:	b08d      	sub	sp, #52	; 0x34
 800eb8c:	af04      	add	r7, sp, #16
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d105      	bne.n	800eba4 <tcp_input+0x1c>
 800eb98:	4b9b      	ldr	r3, [pc, #620]	; (800ee08 <tcp_input+0x280>)
 800eb9a:	2283      	movs	r2, #131	; 0x83
 800eb9c:	499b      	ldr	r1, [pc, #620]	; (800ee0c <tcp_input+0x284>)
 800eb9e:	489c      	ldr	r0, [pc, #624]	; (800ee10 <tcp_input+0x288>)
 800eba0:	f004 f902 	bl	8012da8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	4a9a      	ldr	r2, [pc, #616]	; (800ee14 <tcp_input+0x28c>)
 800ebaa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	895b      	ldrh	r3, [r3, #10]
 800ebb0:	2b13      	cmp	r3, #19
 800ebb2:	f240 83d1 	bls.w	800f358 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ebb6:	4b98      	ldr	r3, [pc, #608]	; (800ee18 <tcp_input+0x290>)
 800ebb8:	695b      	ldr	r3, [r3, #20]
 800ebba:	4a97      	ldr	r2, [pc, #604]	; (800ee18 <tcp_input+0x290>)
 800ebbc:	6812      	ldr	r2, [r2, #0]
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fc f84f 	bl	800ac64 <ip4_addr_isbroadcast_u32>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	f040 83c7 	bne.w	800f35c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ebce:	4b92      	ldr	r3, [pc, #584]	; (800ee18 <tcp_input+0x290>)
 800ebd0:	695b      	ldr	r3, [r3, #20]
 800ebd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ebd6:	2be0      	cmp	r3, #224	; 0xe0
 800ebd8:	f000 83c0 	beq.w	800f35c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ebdc:	4b8d      	ldr	r3, [pc, #564]	; (800ee14 <tcp_input+0x28c>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	899b      	ldrh	r3, [r3, #12]
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7fa fa7f 	bl	80090e8 <lwip_htons>
 800ebea:	4603      	mov	r3, r0
 800ebec:	0b1b      	lsrs	r3, r3, #12
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ebf6:	7cbb      	ldrb	r3, [r7, #18]
 800ebf8:	2b13      	cmp	r3, #19
 800ebfa:	f240 83b1 	bls.w	800f360 <tcp_input+0x7d8>
 800ebfe:	7cbb      	ldrb	r3, [r7, #18]
 800ec00:	b29a      	uxth	r2, r3
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	891b      	ldrh	r3, [r3, #8]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	f200 83aa 	bhi.w	800f360 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ec0c:	7cbb      	ldrb	r3, [r7, #18]
 800ec0e:	b29b      	uxth	r3, r3
 800ec10:	3b14      	subs	r3, #20
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	4b81      	ldr	r3, [pc, #516]	; (800ee1c <tcp_input+0x294>)
 800ec16:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ec18:	4b81      	ldr	r3, [pc, #516]	; (800ee20 <tcp_input+0x298>)
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	895a      	ldrh	r2, [r3, #10]
 800ec22:	7cbb      	ldrb	r3, [r7, #18]
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d309      	bcc.n	800ec3e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ec2a:	4b7c      	ldr	r3, [pc, #496]	; (800ee1c <tcp_input+0x294>)
 800ec2c:	881a      	ldrh	r2, [r3, #0]
 800ec2e:	4b7d      	ldr	r3, [pc, #500]	; (800ee24 <tcp_input+0x29c>)
 800ec30:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ec32:	7cbb      	ldrb	r3, [r7, #18]
 800ec34:	4619      	mov	r1, r3
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f7fe f8f0 	bl	800ce1c <pbuf_remove_header>
 800ec3c:	e04e      	b.n	800ecdc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d105      	bne.n	800ec52 <tcp_input+0xca>
 800ec46:	4b70      	ldr	r3, [pc, #448]	; (800ee08 <tcp_input+0x280>)
 800ec48:	22c2      	movs	r2, #194	; 0xc2
 800ec4a:	4977      	ldr	r1, [pc, #476]	; (800ee28 <tcp_input+0x2a0>)
 800ec4c:	4870      	ldr	r0, [pc, #448]	; (800ee10 <tcp_input+0x288>)
 800ec4e:	f004 f8ab 	bl	8012da8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ec52:	2114      	movs	r1, #20
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7fe f8e1 	bl	800ce1c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	895a      	ldrh	r2, [r3, #10]
 800ec5e:	4b71      	ldr	r3, [pc, #452]	; (800ee24 <tcp_input+0x29c>)
 800ec60:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ec62:	4b6e      	ldr	r3, [pc, #440]	; (800ee1c <tcp_input+0x294>)
 800ec64:	881a      	ldrh	r2, [r3, #0]
 800ec66:	4b6f      	ldr	r3, [pc, #444]	; (800ee24 <tcp_input+0x29c>)
 800ec68:	881b      	ldrh	r3, [r3, #0]
 800ec6a:	1ad3      	subs	r3, r2, r3
 800ec6c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ec6e:	4b6d      	ldr	r3, [pc, #436]	; (800ee24 <tcp_input+0x29c>)
 800ec70:	881b      	ldrh	r3, [r3, #0]
 800ec72:	4619      	mov	r1, r3
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7fe f8d1 	bl	800ce1c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	895b      	ldrh	r3, [r3, #10]
 800ec80:	8a3a      	ldrh	r2, [r7, #16]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	f200 836e 	bhi.w	800f364 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	4a64      	ldr	r2, [pc, #400]	; (800ee20 <tcp_input+0x298>)
 800ec90:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	8a3a      	ldrh	r2, [r7, #16]
 800ec98:	4611      	mov	r1, r2
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fe f8be 	bl	800ce1c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	891a      	ldrh	r2, [r3, #8]
 800eca4:	8a3b      	ldrh	r3, [r7, #16]
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	895b      	ldrh	r3, [r3, #10]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d005      	beq.n	800ecc2 <tcp_input+0x13a>
 800ecb6:	4b54      	ldr	r3, [pc, #336]	; (800ee08 <tcp_input+0x280>)
 800ecb8:	22df      	movs	r2, #223	; 0xdf
 800ecba:	495c      	ldr	r1, [pc, #368]	; (800ee2c <tcp_input+0x2a4>)
 800ecbc:	4854      	ldr	r0, [pc, #336]	; (800ee10 <tcp_input+0x288>)
 800ecbe:	f004 f873 	bl	8012da8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	891a      	ldrh	r2, [r3, #8]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	891b      	ldrh	r3, [r3, #8]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d005      	beq.n	800ecdc <tcp_input+0x154>
 800ecd0:	4b4d      	ldr	r3, [pc, #308]	; (800ee08 <tcp_input+0x280>)
 800ecd2:	22e0      	movs	r2, #224	; 0xe0
 800ecd4:	4956      	ldr	r1, [pc, #344]	; (800ee30 <tcp_input+0x2a8>)
 800ecd6:	484e      	ldr	r0, [pc, #312]	; (800ee10 <tcp_input+0x288>)
 800ecd8:	f004 f866 	bl	8012da8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ecdc:	4b4d      	ldr	r3, [pc, #308]	; (800ee14 <tcp_input+0x28c>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	881b      	ldrh	r3, [r3, #0]
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	4a4b      	ldr	r2, [pc, #300]	; (800ee14 <tcp_input+0x28c>)
 800ece6:	6814      	ldr	r4, [r2, #0]
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fa f9fd 	bl	80090e8 <lwip_htons>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ecf2:	4b48      	ldr	r3, [pc, #288]	; (800ee14 <tcp_input+0x28c>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	885b      	ldrh	r3, [r3, #2]
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	4a46      	ldr	r2, [pc, #280]	; (800ee14 <tcp_input+0x28c>)
 800ecfc:	6814      	ldr	r4, [r2, #0]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fa f9f2 	bl	80090e8 <lwip_htons>
 800ed04:	4603      	mov	r3, r0
 800ed06:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ed08:	4b42      	ldr	r3, [pc, #264]	; (800ee14 <tcp_input+0x28c>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	4a41      	ldr	r2, [pc, #260]	; (800ee14 <tcp_input+0x28c>)
 800ed10:	6814      	ldr	r4, [r2, #0]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fa f9fd 	bl	8009112 <lwip_htonl>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	6063      	str	r3, [r4, #4]
 800ed1c:	6863      	ldr	r3, [r4, #4]
 800ed1e:	4a45      	ldr	r2, [pc, #276]	; (800ee34 <tcp_input+0x2ac>)
 800ed20:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ed22:	4b3c      	ldr	r3, [pc, #240]	; (800ee14 <tcp_input+0x28c>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	4a3a      	ldr	r2, [pc, #232]	; (800ee14 <tcp_input+0x28c>)
 800ed2a:	6814      	ldr	r4, [r2, #0]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7fa f9f0 	bl	8009112 <lwip_htonl>
 800ed32:	4603      	mov	r3, r0
 800ed34:	60a3      	str	r3, [r4, #8]
 800ed36:	68a3      	ldr	r3, [r4, #8]
 800ed38:	4a3f      	ldr	r2, [pc, #252]	; (800ee38 <tcp_input+0x2b0>)
 800ed3a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ed3c:	4b35      	ldr	r3, [pc, #212]	; (800ee14 <tcp_input+0x28c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	89db      	ldrh	r3, [r3, #14]
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	4a33      	ldr	r2, [pc, #204]	; (800ee14 <tcp_input+0x28c>)
 800ed46:	6814      	ldr	r4, [r2, #0]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7fa f9cd 	bl	80090e8 <lwip_htons>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ed52:	4b30      	ldr	r3, [pc, #192]	; (800ee14 <tcp_input+0x28c>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	899b      	ldrh	r3, [r3, #12]
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fa f9c4 	bl	80090e8 <lwip_htons>
 800ed60:	4603      	mov	r3, r0
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed68:	b2da      	uxtb	r2, r3
 800ed6a:	4b34      	ldr	r3, [pc, #208]	; (800ee3c <tcp_input+0x2b4>)
 800ed6c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	891a      	ldrh	r2, [r3, #8]
 800ed72:	4b33      	ldr	r3, [pc, #204]	; (800ee40 <tcp_input+0x2b8>)
 800ed74:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ed76:	4b31      	ldr	r3, [pc, #196]	; (800ee3c <tcp_input+0x2b4>)
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	f003 0303 	and.w	r3, r3, #3
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d00c      	beq.n	800ed9c <tcp_input+0x214>
    tcplen++;
 800ed82:	4b2f      	ldr	r3, [pc, #188]	; (800ee40 <tcp_input+0x2b8>)
 800ed84:	881b      	ldrh	r3, [r3, #0]
 800ed86:	3301      	adds	r3, #1
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	4b2d      	ldr	r3, [pc, #180]	; (800ee40 <tcp_input+0x2b8>)
 800ed8c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	891a      	ldrh	r2, [r3, #8]
 800ed92:	4b2b      	ldr	r3, [pc, #172]	; (800ee40 <tcp_input+0x2b8>)
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	f200 82e6 	bhi.w	800f368 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eda0:	4b28      	ldr	r3, [pc, #160]	; (800ee44 <tcp_input+0x2bc>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	61fb      	str	r3, [r7, #28]
 800eda6:	e09d      	b.n	800eee4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	7d1b      	ldrb	r3, [r3, #20]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d105      	bne.n	800edbc <tcp_input+0x234>
 800edb0:	4b15      	ldr	r3, [pc, #84]	; (800ee08 <tcp_input+0x280>)
 800edb2:	22fb      	movs	r2, #251	; 0xfb
 800edb4:	4924      	ldr	r1, [pc, #144]	; (800ee48 <tcp_input+0x2c0>)
 800edb6:	4816      	ldr	r0, [pc, #88]	; (800ee10 <tcp_input+0x288>)
 800edb8:	f003 fff6 	bl	8012da8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	7d1b      	ldrb	r3, [r3, #20]
 800edc0:	2b0a      	cmp	r3, #10
 800edc2:	d105      	bne.n	800edd0 <tcp_input+0x248>
 800edc4:	4b10      	ldr	r3, [pc, #64]	; (800ee08 <tcp_input+0x280>)
 800edc6:	22fc      	movs	r2, #252	; 0xfc
 800edc8:	4920      	ldr	r1, [pc, #128]	; (800ee4c <tcp_input+0x2c4>)
 800edca:	4811      	ldr	r0, [pc, #68]	; (800ee10 <tcp_input+0x288>)
 800edcc:	f003 ffec 	bl	8012da8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	7d1b      	ldrb	r3, [r3, #20]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d105      	bne.n	800ede4 <tcp_input+0x25c>
 800edd8:	4b0b      	ldr	r3, [pc, #44]	; (800ee08 <tcp_input+0x280>)
 800edda:	22fd      	movs	r2, #253	; 0xfd
 800eddc:	491c      	ldr	r1, [pc, #112]	; (800ee50 <tcp_input+0x2c8>)
 800edde:	480c      	ldr	r0, [pc, #48]	; (800ee10 <tcp_input+0x288>)
 800ede0:	f003 ffe2 	bl	8012da8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	7a1b      	ldrb	r3, [r3, #8]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d033      	beq.n	800ee54 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	7a1a      	ldrb	r2, [r3, #8]
 800edf0:	4b09      	ldr	r3, [pc, #36]	; (800ee18 <tcp_input+0x290>)
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800edf8:	3301      	adds	r3, #1
 800edfa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d029      	beq.n	800ee54 <tcp_input+0x2cc>
      prev = pcb;
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	61bb      	str	r3, [r7, #24]
      continue;
 800ee04:	e06b      	b.n	800eede <tcp_input+0x356>
 800ee06:	bf00      	nop
 800ee08:	080159c4 	.word	0x080159c4
 800ee0c:	08015a18 	.word	0x08015a18
 800ee10:	08015a30 	.word	0x08015a30
 800ee14:	240081a8 	.word	0x240081a8
 800ee18:	24005248 	.word	0x24005248
 800ee1c:	240081ac 	.word	0x240081ac
 800ee20:	240081b0 	.word	0x240081b0
 800ee24:	240081ae 	.word	0x240081ae
 800ee28:	08015a58 	.word	0x08015a58
 800ee2c:	08015a68 	.word	0x08015a68
 800ee30:	08015a74 	.word	0x08015a74
 800ee34:	240081b8 	.word	0x240081b8
 800ee38:	240081bc 	.word	0x240081bc
 800ee3c:	240081c4 	.word	0x240081c4
 800ee40:	240081c2 	.word	0x240081c2
 800ee44:	2400818c 	.word	0x2400818c
 800ee48:	08015a94 	.word	0x08015a94
 800ee4c:	08015abc 	.word	0x08015abc
 800ee50:	08015ae8 	.word	0x08015ae8
    }

    if (pcb->remote_port == tcphdr->src &&
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	8b1a      	ldrh	r2, [r3, #24]
 800ee58:	4b72      	ldr	r3, [pc, #456]	; (800f024 <tcp_input+0x49c>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	881b      	ldrh	r3, [r3, #0]
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d13a      	bne.n	800eeda <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	8ada      	ldrh	r2, [r3, #22]
 800ee68:	4b6e      	ldr	r3, [pc, #440]	; (800f024 <tcp_input+0x49c>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	885b      	ldrh	r3, [r3, #2]
 800ee6e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d132      	bne.n	800eeda <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	685a      	ldr	r2, [r3, #4]
 800ee78:	4b6b      	ldr	r3, [pc, #428]	; (800f028 <tcp_input+0x4a0>)
 800ee7a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d12c      	bne.n	800eeda <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	4b68      	ldr	r3, [pc, #416]	; (800f028 <tcp_input+0x4a0>)
 800ee86:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d126      	bne.n	800eeda <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	69fa      	ldr	r2, [r7, #28]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d106      	bne.n	800eea4 <tcp_input+0x31c>
 800ee96:	4b65      	ldr	r3, [pc, #404]	; (800f02c <tcp_input+0x4a4>)
 800ee98:	f240 120d 	movw	r2, #269	; 0x10d
 800ee9c:	4964      	ldr	r1, [pc, #400]	; (800f030 <tcp_input+0x4a8>)
 800ee9e:	4865      	ldr	r0, [pc, #404]	; (800f034 <tcp_input+0x4ac>)
 800eea0:	f003 ff82 	bl	8012da8 <iprintf>
      if (prev != NULL) {
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d00a      	beq.n	800eec0 <tcp_input+0x338>
        prev->next = pcb->next;
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	68da      	ldr	r2, [r3, #12]
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800eeb2:	4b61      	ldr	r3, [pc, #388]	; (800f038 <tcp_input+0x4b0>)
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800eeba:	4a5f      	ldr	r2, [pc, #380]	; (800f038 <tcp_input+0x4b0>)
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	69fa      	ldr	r2, [r7, #28]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d111      	bne.n	800eeee <tcp_input+0x366>
 800eeca:	4b58      	ldr	r3, [pc, #352]	; (800f02c <tcp_input+0x4a4>)
 800eecc:	f240 1215 	movw	r2, #277	; 0x115
 800eed0:	495a      	ldr	r1, [pc, #360]	; (800f03c <tcp_input+0x4b4>)
 800eed2:	4858      	ldr	r0, [pc, #352]	; (800f034 <tcp_input+0x4ac>)
 800eed4:	f003 ff68 	bl	8012da8 <iprintf>
      break;
 800eed8:	e009      	b.n	800eeee <tcp_input+0x366>
    }
    prev = pcb;
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	61fb      	str	r3, [r7, #28]
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f47f af5e 	bne.w	800eda8 <tcp_input+0x220>
 800eeec:	e000      	b.n	800eef0 <tcp_input+0x368>
      break;
 800eeee:	bf00      	nop
  }

  if (pcb == NULL) {
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f040 80aa 	bne.w	800f04c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eef8:	4b51      	ldr	r3, [pc, #324]	; (800f040 <tcp_input+0x4b8>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	61fb      	str	r3, [r7, #28]
 800eefe:	e03f      	b.n	800ef80 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ef00:	69fb      	ldr	r3, [r7, #28]
 800ef02:	7d1b      	ldrb	r3, [r3, #20]
 800ef04:	2b0a      	cmp	r3, #10
 800ef06:	d006      	beq.n	800ef16 <tcp_input+0x38e>
 800ef08:	4b48      	ldr	r3, [pc, #288]	; (800f02c <tcp_input+0x4a4>)
 800ef0a:	f240 121f 	movw	r2, #287	; 0x11f
 800ef0e:	494d      	ldr	r1, [pc, #308]	; (800f044 <tcp_input+0x4bc>)
 800ef10:	4848      	ldr	r0, [pc, #288]	; (800f034 <tcp_input+0x4ac>)
 800ef12:	f003 ff49 	bl	8012da8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	7a1b      	ldrb	r3, [r3, #8]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d009      	beq.n	800ef32 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	7a1a      	ldrb	r2, [r3, #8]
 800ef22:	4b41      	ldr	r3, [pc, #260]	; (800f028 <tcp_input+0x4a0>)
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d122      	bne.n	800ef78 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	8b1a      	ldrh	r2, [r3, #24]
 800ef36:	4b3b      	ldr	r3, [pc, #236]	; (800f024 <tcp_input+0x49c>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	881b      	ldrh	r3, [r3, #0]
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d11b      	bne.n	800ef7a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	8ada      	ldrh	r2, [r3, #22]
 800ef46:	4b37      	ldr	r3, [pc, #220]	; (800f024 <tcp_input+0x49c>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	885b      	ldrh	r3, [r3, #2]
 800ef4c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d113      	bne.n	800ef7a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	685a      	ldr	r2, [r3, #4]
 800ef56:	4b34      	ldr	r3, [pc, #208]	; (800f028 <tcp_input+0x4a0>)
 800ef58:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d10d      	bne.n	800ef7a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	4b31      	ldr	r3, [pc, #196]	; (800f028 <tcp_input+0x4a0>)
 800ef64:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d107      	bne.n	800ef7a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ef6a:	69f8      	ldr	r0, [r7, #28]
 800ef6c:	f000 fb56 	bl	800f61c <tcp_timewait_input>
        }
        pbuf_free(p);
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f7fd ffd9 	bl	800cf28 <pbuf_free>
        return;
 800ef76:	e1fd      	b.n	800f374 <tcp_input+0x7ec>
        continue;
 800ef78:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	61fb      	str	r3, [r7, #28]
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d1bc      	bne.n	800ef00 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef8a:	4b2f      	ldr	r3, [pc, #188]	; (800f048 <tcp_input+0x4c0>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	617b      	str	r3, [r7, #20]
 800ef90:	e02a      	b.n	800efe8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	7a1b      	ldrb	r3, [r3, #8]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00c      	beq.n	800efb4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	7a1a      	ldrb	r2, [r3, #8]
 800ef9e:	4b22      	ldr	r3, [pc, #136]	; (800f028 <tcp_input+0x4a0>)
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800efa6:	3301      	adds	r3, #1
 800efa8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800efaa:	429a      	cmp	r2, r3
 800efac:	d002      	beq.n	800efb4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	61bb      	str	r3, [r7, #24]
        continue;
 800efb2:	e016      	b.n	800efe2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	8ada      	ldrh	r2, [r3, #22]
 800efb8:	4b1a      	ldr	r3, [pc, #104]	; (800f024 <tcp_input+0x49c>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	885b      	ldrh	r3, [r3, #2]
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d10c      	bne.n	800efde <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	4b17      	ldr	r3, [pc, #92]	; (800f028 <tcp_input+0x4a0>)
 800efca:	695b      	ldr	r3, [r3, #20]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d00f      	beq.n	800eff0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00d      	beq.n	800eff2 <tcp_input+0x46a>
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d009      	beq.n	800eff2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	617b      	str	r3, [r7, #20]
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1d1      	bne.n	800ef92 <tcp_input+0x40a>
 800efee:	e000      	b.n	800eff2 <tcp_input+0x46a>
            break;
 800eff0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d029      	beq.n	800f04c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00a      	beq.n	800f014 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	68da      	ldr	r2, [r3, #12]
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f006:	4b10      	ldr	r3, [pc, #64]	; (800f048 <tcp_input+0x4c0>)
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f00e:	4a0e      	ldr	r2, [pc, #56]	; (800f048 <tcp_input+0x4c0>)
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f014:	6978      	ldr	r0, [r7, #20]
 800f016:	f000 fa03 	bl	800f420 <tcp_listen_input>
      }
      pbuf_free(p);
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7fd ff84 	bl	800cf28 <pbuf_free>
      return;
 800f020:	e1a8      	b.n	800f374 <tcp_input+0x7ec>
 800f022:	bf00      	nop
 800f024:	240081a8 	.word	0x240081a8
 800f028:	24005248 	.word	0x24005248
 800f02c:	080159c4 	.word	0x080159c4
 800f030:	08015b10 	.word	0x08015b10
 800f034:	08015a30 	.word	0x08015a30
 800f038:	2400818c 	.word	0x2400818c
 800f03c:	08015b3c 	.word	0x08015b3c
 800f040:	24008190 	.word	0x24008190
 800f044:	08015b68 	.word	0x08015b68
 800f048:	24008188 	.word	0x24008188
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f04c:	69fb      	ldr	r3, [r7, #28]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	f000 8158 	beq.w	800f304 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f054:	4b95      	ldr	r3, [pc, #596]	; (800f2ac <tcp_input+0x724>)
 800f056:	2200      	movs	r2, #0
 800f058:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	891a      	ldrh	r2, [r3, #8]
 800f05e:	4b93      	ldr	r3, [pc, #588]	; (800f2ac <tcp_input+0x724>)
 800f060:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f062:	4a92      	ldr	r2, [pc, #584]	; (800f2ac <tcp_input+0x724>)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f068:	4b91      	ldr	r3, [pc, #580]	; (800f2b0 <tcp_input+0x728>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a8f      	ldr	r2, [pc, #572]	; (800f2ac <tcp_input+0x724>)
 800f06e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f070:	4b90      	ldr	r3, [pc, #576]	; (800f2b4 <tcp_input+0x72c>)
 800f072:	2200      	movs	r2, #0
 800f074:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f076:	4b90      	ldr	r3, [pc, #576]	; (800f2b8 <tcp_input+0x730>)
 800f078:	2200      	movs	r2, #0
 800f07a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f07c:	4b8f      	ldr	r3, [pc, #572]	; (800f2bc <tcp_input+0x734>)
 800f07e:	2200      	movs	r2, #0
 800f080:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f082:	4b8f      	ldr	r3, [pc, #572]	; (800f2c0 <tcp_input+0x738>)
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	f003 0308 	and.w	r3, r3, #8
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d006      	beq.n	800f09c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	7b5b      	ldrb	r3, [r3, #13]
 800f092:	f043 0301 	orr.w	r3, r3, #1
 800f096:	b2da      	uxtb	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d017      	beq.n	800f0d4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f0a4:	69f8      	ldr	r0, [r7, #28]
 800f0a6:	f7ff f921 	bl	800e2ec <tcp_process_refused_data>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	f113 0f0d 	cmn.w	r3, #13
 800f0b0:	d007      	beq.n	800f0c2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f0b2:	69fb      	ldr	r3, [r7, #28]
 800f0b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00c      	beq.n	800f0d4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f0ba:	4b82      	ldr	r3, [pc, #520]	; (800f2c4 <tcp_input+0x73c>)
 800f0bc:	881b      	ldrh	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d008      	beq.n	800f0d4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	f040 80e3 	bne.w	800f292 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f0cc:	69f8      	ldr	r0, [r7, #28]
 800f0ce:	f003 f9ad 	bl	801242c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f0d2:	e0de      	b.n	800f292 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f0d4:	4a7c      	ldr	r2, [pc, #496]	; (800f2c8 <tcp_input+0x740>)
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f0da:	69f8      	ldr	r0, [r7, #28]
 800f0dc:	f000 fb18 	bl	800f710 <tcp_process>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f0e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f0e8:	f113 0f0d 	cmn.w	r3, #13
 800f0ec:	f000 80d3 	beq.w	800f296 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f0f0:	4b71      	ldr	r3, [pc, #452]	; (800f2b8 <tcp_input+0x730>)
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	f003 0308 	and.w	r3, r3, #8
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d015      	beq.n	800f128 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f102:	2b00      	cmp	r3, #0
 800f104:	d008      	beq.n	800f118 <tcp_input+0x590>
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f10c:	69fa      	ldr	r2, [r7, #28]
 800f10e:	6912      	ldr	r2, [r2, #16]
 800f110:	f06f 010d 	mvn.w	r1, #13
 800f114:	4610      	mov	r0, r2
 800f116:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f118:	69f9      	ldr	r1, [r7, #28]
 800f11a:	486c      	ldr	r0, [pc, #432]	; (800f2cc <tcp_input+0x744>)
 800f11c:	f7ff fbb4 	bl	800e888 <tcp_pcb_remove>
        tcp_free(pcb);
 800f120:	69f8      	ldr	r0, [r7, #28]
 800f122:	f7fe f9a1 	bl	800d468 <tcp_free>
 800f126:	e0da      	b.n	800f2de <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f128:	2300      	movs	r3, #0
 800f12a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f12c:	4b63      	ldr	r3, [pc, #396]	; (800f2bc <tcp_input+0x734>)
 800f12e:	881b      	ldrh	r3, [r3, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d01d      	beq.n	800f170 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f134:	4b61      	ldr	r3, [pc, #388]	; (800f2bc <tcp_input+0x734>)
 800f136:	881b      	ldrh	r3, [r3, #0]
 800f138:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f140:	2b00      	cmp	r3, #0
 800f142:	d00a      	beq.n	800f15a <tcp_input+0x5d2>
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f14a:	69fa      	ldr	r2, [r7, #28]
 800f14c:	6910      	ldr	r0, [r2, #16]
 800f14e:	89fa      	ldrh	r2, [r7, #14]
 800f150:	69f9      	ldr	r1, [r7, #28]
 800f152:	4798      	blx	r3
 800f154:	4603      	mov	r3, r0
 800f156:	74fb      	strb	r3, [r7, #19]
 800f158:	e001      	b.n	800f15e <tcp_input+0x5d6>
 800f15a:	2300      	movs	r3, #0
 800f15c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f15e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f162:	f113 0f0d 	cmn.w	r3, #13
 800f166:	f000 8098 	beq.w	800f29a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f16a:	4b54      	ldr	r3, [pc, #336]	; (800f2bc <tcp_input+0x734>)
 800f16c:	2200      	movs	r2, #0
 800f16e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f170:	69f8      	ldr	r0, [r7, #28]
 800f172:	f000 f915 	bl	800f3a0 <tcp_input_delayed_close>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f040 8090 	bne.w	800f29e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f17e:	4b4d      	ldr	r3, [pc, #308]	; (800f2b4 <tcp_input+0x72c>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d041      	beq.n	800f20a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d006      	beq.n	800f19c <tcp_input+0x614>
 800f18e:	4b50      	ldr	r3, [pc, #320]	; (800f2d0 <tcp_input+0x748>)
 800f190:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f194:	494f      	ldr	r1, [pc, #316]	; (800f2d4 <tcp_input+0x74c>)
 800f196:	4850      	ldr	r0, [pc, #320]	; (800f2d8 <tcp_input+0x750>)
 800f198:	f003 fe06 	bl	8012da8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	8b5b      	ldrh	r3, [r3, #26]
 800f1a0:	f003 0310 	and.w	r3, r3, #16
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d008      	beq.n	800f1ba <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f1a8:	4b42      	ldr	r3, [pc, #264]	; (800f2b4 <tcp_input+0x72c>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7fd febb 	bl	800cf28 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f1b2:	69f8      	ldr	r0, [r7, #28]
 800f1b4:	f7fe fc40 	bl	800da38 <tcp_abort>
            goto aborted;
 800f1b8:	e091      	b.n	800f2de <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f1ba:	69fb      	ldr	r3, [r7, #28]
 800f1bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d00c      	beq.n	800f1de <tcp_input+0x656>
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	6918      	ldr	r0, [r3, #16]
 800f1ce:	4b39      	ldr	r3, [pc, #228]	; (800f2b4 <tcp_input+0x72c>)
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	69f9      	ldr	r1, [r7, #28]
 800f1d6:	47a0      	blx	r4
 800f1d8:	4603      	mov	r3, r0
 800f1da:	74fb      	strb	r3, [r7, #19]
 800f1dc:	e008      	b.n	800f1f0 <tcp_input+0x668>
 800f1de:	4b35      	ldr	r3, [pc, #212]	; (800f2b4 <tcp_input+0x72c>)
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	69f9      	ldr	r1, [r7, #28]
 800f1e6:	2000      	movs	r0, #0
 800f1e8:	f7ff f956 	bl	800e498 <tcp_recv_null>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f1f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1f4:	f113 0f0d 	cmn.w	r3, #13
 800f1f8:	d053      	beq.n	800f2a2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f1fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d003      	beq.n	800f20a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f202:	4b2c      	ldr	r3, [pc, #176]	; (800f2b4 <tcp_input+0x72c>)
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f20a:	4b2b      	ldr	r3, [pc, #172]	; (800f2b8 <tcp_input+0x730>)
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	f003 0320 	and.w	r3, r3, #32
 800f212:	2b00      	cmp	r3, #0
 800f214:	d030      	beq.n	800f278 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d009      	beq.n	800f232 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f21e:	69fb      	ldr	r3, [r7, #28]
 800f220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f222:	7b5a      	ldrb	r2, [r3, #13]
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f228:	f042 0220 	orr.w	r2, r2, #32
 800f22c:	b2d2      	uxtb	r2, r2
 800f22e:	735a      	strb	r2, [r3, #13]
 800f230:	e022      	b.n	800f278 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f232:	69fb      	ldr	r3, [r7, #28]
 800f234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f236:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f23a:	d005      	beq.n	800f248 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f240:	3301      	adds	r3, #1
 800f242:	b29a      	uxth	r2, r3
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d00b      	beq.n	800f26a <tcp_input+0x6e2>
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	6918      	ldr	r0, [r3, #16]
 800f25c:	2300      	movs	r3, #0
 800f25e:	2200      	movs	r2, #0
 800f260:	69f9      	ldr	r1, [r7, #28]
 800f262:	47a0      	blx	r4
 800f264:	4603      	mov	r3, r0
 800f266:	74fb      	strb	r3, [r7, #19]
 800f268:	e001      	b.n	800f26e <tcp_input+0x6e6>
 800f26a:	2300      	movs	r3, #0
 800f26c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f26e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f272:	f113 0f0d 	cmn.w	r3, #13
 800f276:	d016      	beq.n	800f2a6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f278:	4b13      	ldr	r3, [pc, #76]	; (800f2c8 <tcp_input+0x740>)
 800f27a:	2200      	movs	r2, #0
 800f27c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f27e:	69f8      	ldr	r0, [r7, #28]
 800f280:	f000 f88e 	bl	800f3a0 <tcp_input_delayed_close>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d128      	bne.n	800f2dc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f28a:	69f8      	ldr	r0, [r7, #28]
 800f28c:	f002 fac8 	bl	8011820 <tcp_output>
 800f290:	e025      	b.n	800f2de <tcp_input+0x756>
        goto aborted;
 800f292:	bf00      	nop
 800f294:	e023      	b.n	800f2de <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f296:	bf00      	nop
 800f298:	e021      	b.n	800f2de <tcp_input+0x756>
              goto aborted;
 800f29a:	bf00      	nop
 800f29c:	e01f      	b.n	800f2de <tcp_input+0x756>
          goto aborted;
 800f29e:	bf00      	nop
 800f2a0:	e01d      	b.n	800f2de <tcp_input+0x756>
            goto aborted;
 800f2a2:	bf00      	nop
 800f2a4:	e01b      	b.n	800f2de <tcp_input+0x756>
              goto aborted;
 800f2a6:	bf00      	nop
 800f2a8:	e019      	b.n	800f2de <tcp_input+0x756>
 800f2aa:	bf00      	nop
 800f2ac:	24008198 	.word	0x24008198
 800f2b0:	240081a8 	.word	0x240081a8
 800f2b4:	240081c8 	.word	0x240081c8
 800f2b8:	240081c5 	.word	0x240081c5
 800f2bc:	240081c0 	.word	0x240081c0
 800f2c0:	240081c4 	.word	0x240081c4
 800f2c4:	240081c2 	.word	0x240081c2
 800f2c8:	240081cc 	.word	0x240081cc
 800f2cc:	2400818c 	.word	0x2400818c
 800f2d0:	080159c4 	.word	0x080159c4
 800f2d4:	08015b98 	.word	0x08015b98
 800f2d8:	08015a30 	.word	0x08015a30
          goto aborted;
 800f2dc:	bf00      	nop
    tcp_input_pcb = NULL;
 800f2de:	4b27      	ldr	r3, [pc, #156]	; (800f37c <tcp_input+0x7f4>)
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f2e4:	4b26      	ldr	r3, [pc, #152]	; (800f380 <tcp_input+0x7f8>)
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f2ea:	4b26      	ldr	r3, [pc, #152]	; (800f384 <tcp_input+0x7fc>)
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d03f      	beq.n	800f372 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f2f2:	4b24      	ldr	r3, [pc, #144]	; (800f384 <tcp_input+0x7fc>)
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7fd fe16 	bl	800cf28 <pbuf_free>
      inseg.p = NULL;
 800f2fc:	4b21      	ldr	r3, [pc, #132]	; (800f384 <tcp_input+0x7fc>)
 800f2fe:	2200      	movs	r2, #0
 800f300:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f302:	e036      	b.n	800f372 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f304:	4b20      	ldr	r3, [pc, #128]	; (800f388 <tcp_input+0x800>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	899b      	ldrh	r3, [r3, #12]
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7f9 feeb 	bl	80090e8 <lwip_htons>
 800f312:	4603      	mov	r3, r0
 800f314:	b2db      	uxtb	r3, r3
 800f316:	f003 0304 	and.w	r3, r3, #4
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d118      	bne.n	800f350 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f31e:	4b1b      	ldr	r3, [pc, #108]	; (800f38c <tcp_input+0x804>)
 800f320:	6819      	ldr	r1, [r3, #0]
 800f322:	4b1b      	ldr	r3, [pc, #108]	; (800f390 <tcp_input+0x808>)
 800f324:	881b      	ldrh	r3, [r3, #0]
 800f326:	461a      	mov	r2, r3
 800f328:	4b1a      	ldr	r3, [pc, #104]	; (800f394 <tcp_input+0x80c>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f32e:	4b16      	ldr	r3, [pc, #88]	; (800f388 <tcp_input+0x800>)
 800f330:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f332:	885b      	ldrh	r3, [r3, #2]
 800f334:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f336:	4a14      	ldr	r2, [pc, #80]	; (800f388 <tcp_input+0x800>)
 800f338:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f33a:	8812      	ldrh	r2, [r2, #0]
 800f33c:	b292      	uxth	r2, r2
 800f33e:	9202      	str	r2, [sp, #8]
 800f340:	9301      	str	r3, [sp, #4]
 800f342:	4b15      	ldr	r3, [pc, #84]	; (800f398 <tcp_input+0x810>)
 800f344:	9300      	str	r3, [sp, #0]
 800f346:	4b15      	ldr	r3, [pc, #84]	; (800f39c <tcp_input+0x814>)
 800f348:	4602      	mov	r2, r0
 800f34a:	2000      	movs	r0, #0
 800f34c:	f003 f81c 	bl	8012388 <tcp_rst>
    pbuf_free(p);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7fd fde9 	bl	800cf28 <pbuf_free>
  return;
 800f356:	e00c      	b.n	800f372 <tcp_input+0x7ea>
    goto dropped;
 800f358:	bf00      	nop
 800f35a:	e006      	b.n	800f36a <tcp_input+0x7e2>
    goto dropped;
 800f35c:	bf00      	nop
 800f35e:	e004      	b.n	800f36a <tcp_input+0x7e2>
    goto dropped;
 800f360:	bf00      	nop
 800f362:	e002      	b.n	800f36a <tcp_input+0x7e2>
      goto dropped;
 800f364:	bf00      	nop
 800f366:	e000      	b.n	800f36a <tcp_input+0x7e2>
      goto dropped;
 800f368:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f7fd fddc 	bl	800cf28 <pbuf_free>
 800f370:	e000      	b.n	800f374 <tcp_input+0x7ec>
  return;
 800f372:	bf00      	nop
}
 800f374:	3724      	adds	r7, #36	; 0x24
 800f376:	46bd      	mov	sp, r7
 800f378:	bd90      	pop	{r4, r7, pc}
 800f37a:	bf00      	nop
 800f37c:	240081cc 	.word	0x240081cc
 800f380:	240081c8 	.word	0x240081c8
 800f384:	24008198 	.word	0x24008198
 800f388:	240081a8 	.word	0x240081a8
 800f38c:	240081bc 	.word	0x240081bc
 800f390:	240081c2 	.word	0x240081c2
 800f394:	240081b8 	.word	0x240081b8
 800f398:	24005258 	.word	0x24005258
 800f39c:	2400525c 	.word	0x2400525c

0800f3a0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d106      	bne.n	800f3bc <tcp_input_delayed_close+0x1c>
 800f3ae:	4b17      	ldr	r3, [pc, #92]	; (800f40c <tcp_input_delayed_close+0x6c>)
 800f3b0:	f240 225a 	movw	r2, #602	; 0x25a
 800f3b4:	4916      	ldr	r1, [pc, #88]	; (800f410 <tcp_input_delayed_close+0x70>)
 800f3b6:	4817      	ldr	r0, [pc, #92]	; (800f414 <tcp_input_delayed_close+0x74>)
 800f3b8:	f003 fcf6 	bl	8012da8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f3bc:	4b16      	ldr	r3, [pc, #88]	; (800f418 <tcp_input_delayed_close+0x78>)
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	f003 0310 	and.w	r3, r3, #16
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d01c      	beq.n	800f402 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	8b5b      	ldrh	r3, [r3, #26]
 800f3cc:	f003 0310 	and.w	r3, r3, #16
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d10d      	bne.n	800f3f0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d008      	beq.n	800f3f0 <tcp_input_delayed_close+0x50>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	6912      	ldr	r2, [r2, #16]
 800f3e8:	f06f 010e 	mvn.w	r1, #14
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f3f0:	6879      	ldr	r1, [r7, #4]
 800f3f2:	480a      	ldr	r0, [pc, #40]	; (800f41c <tcp_input_delayed_close+0x7c>)
 800f3f4:	f7ff fa48 	bl	800e888 <tcp_pcb_remove>
    tcp_free(pcb);
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f7fe f835 	bl	800d468 <tcp_free>
    return 1;
 800f3fe:	2301      	movs	r3, #1
 800f400:	e000      	b.n	800f404 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f402:	2300      	movs	r3, #0
}
 800f404:	4618      	mov	r0, r3
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	080159c4 	.word	0x080159c4
 800f410:	08015bb4 	.word	0x08015bb4
 800f414:	08015a30 	.word	0x08015a30
 800f418:	240081c5 	.word	0x240081c5
 800f41c:	2400818c 	.word	0x2400818c

0800f420 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f420:	b590      	push	{r4, r7, lr}
 800f422:	b08b      	sub	sp, #44	; 0x2c
 800f424:	af04      	add	r7, sp, #16
 800f426:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f428:	4b6f      	ldr	r3, [pc, #444]	; (800f5e8 <tcp_listen_input+0x1c8>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	f003 0304 	and.w	r3, r3, #4
 800f430:	2b00      	cmp	r3, #0
 800f432:	f040 80d2 	bne.w	800f5da <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d106      	bne.n	800f44a <tcp_listen_input+0x2a>
 800f43c:	4b6b      	ldr	r3, [pc, #428]	; (800f5ec <tcp_listen_input+0x1cc>)
 800f43e:	f240 2281 	movw	r2, #641	; 0x281
 800f442:	496b      	ldr	r1, [pc, #428]	; (800f5f0 <tcp_listen_input+0x1d0>)
 800f444:	486b      	ldr	r0, [pc, #428]	; (800f5f4 <tcp_listen_input+0x1d4>)
 800f446:	f003 fcaf 	bl	8012da8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f44a:	4b67      	ldr	r3, [pc, #412]	; (800f5e8 <tcp_listen_input+0x1c8>)
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	f003 0310 	and.w	r3, r3, #16
 800f452:	2b00      	cmp	r3, #0
 800f454:	d019      	beq.n	800f48a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f456:	4b68      	ldr	r3, [pc, #416]	; (800f5f8 <tcp_listen_input+0x1d8>)
 800f458:	6819      	ldr	r1, [r3, #0]
 800f45a:	4b68      	ldr	r3, [pc, #416]	; (800f5fc <tcp_listen_input+0x1dc>)
 800f45c:	881b      	ldrh	r3, [r3, #0]
 800f45e:	461a      	mov	r2, r3
 800f460:	4b67      	ldr	r3, [pc, #412]	; (800f600 <tcp_listen_input+0x1e0>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f466:	4b67      	ldr	r3, [pc, #412]	; (800f604 <tcp_listen_input+0x1e4>)
 800f468:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f46a:	885b      	ldrh	r3, [r3, #2]
 800f46c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f46e:	4a65      	ldr	r2, [pc, #404]	; (800f604 <tcp_listen_input+0x1e4>)
 800f470:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f472:	8812      	ldrh	r2, [r2, #0]
 800f474:	b292      	uxth	r2, r2
 800f476:	9202      	str	r2, [sp, #8]
 800f478:	9301      	str	r3, [sp, #4]
 800f47a:	4b63      	ldr	r3, [pc, #396]	; (800f608 <tcp_listen_input+0x1e8>)
 800f47c:	9300      	str	r3, [sp, #0]
 800f47e:	4b63      	ldr	r3, [pc, #396]	; (800f60c <tcp_listen_input+0x1ec>)
 800f480:	4602      	mov	r2, r0
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f002 ff80 	bl	8012388 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f488:	e0a9      	b.n	800f5de <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f48a:	4b57      	ldr	r3, [pc, #348]	; (800f5e8 <tcp_listen_input+0x1c8>)
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	f003 0302 	and.w	r3, r3, #2
 800f492:	2b00      	cmp	r3, #0
 800f494:	f000 80a3 	beq.w	800f5de <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	7d5b      	ldrb	r3, [r3, #21]
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7ff f91f 	bl	800e6e0 <tcp_alloc>
 800f4a2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d111      	bne.n	800f4ce <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	699b      	ldr	r3, [r3, #24]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d00a      	beq.n	800f4c8 <tcp_listen_input+0xa8>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	699b      	ldr	r3, [r3, #24]
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	6910      	ldr	r0, [r2, #16]
 800f4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f4be:	2100      	movs	r1, #0
 800f4c0:	4798      	blx	r3
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	73bb      	strb	r3, [r7, #14]
      return;
 800f4c6:	e08b      	b.n	800f5e0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f4c8:	23f0      	movs	r3, #240	; 0xf0
 800f4ca:	73bb      	strb	r3, [r7, #14]
      return;
 800f4cc:	e088      	b.n	800f5e0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f4ce:	4b50      	ldr	r3, [pc, #320]	; (800f610 <tcp_listen_input+0x1f0>)
 800f4d0:	695a      	ldr	r2, [r3, #20]
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f4d6:	4b4e      	ldr	r3, [pc, #312]	; (800f610 <tcp_listen_input+0x1f0>)
 800f4d8:	691a      	ldr	r2, [r3, #16]
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	8ada      	ldrh	r2, [r3, #22]
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f4e6:	4b47      	ldr	r3, [pc, #284]	; (800f604 <tcp_listen_input+0x1e4>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	881b      	ldrh	r3, [r3, #0]
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	2203      	movs	r2, #3
 800f4f6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f4f8:	4b41      	ldr	r3, [pc, #260]	; (800f600 <tcp_listen_input+0x1e0>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	1c5a      	adds	r2, r3, #1
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f50a:	6978      	ldr	r0, [r7, #20]
 800f50c:	f7ff fa50 	bl	800e9b0 <tcp_next_iss>
 800f510:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	693a      	ldr	r2, [r7, #16]
 800f516:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	693a      	ldr	r2, [r7, #16]
 800f51c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	693a      	ldr	r2, [r7, #16]
 800f522:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	693a      	ldr	r2, [r7, #16]
 800f528:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f52a:	4b35      	ldr	r3, [pc, #212]	; (800f600 <tcp_listen_input+0x1e0>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	1e5a      	subs	r2, r3, #1
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	691a      	ldr	r2, [r3, #16]
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	7a5b      	ldrb	r3, [r3, #9]
 800f546:	f003 030c 	and.w	r3, r3, #12
 800f54a:	b2da      	uxtb	r2, r3
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	7a1a      	ldrb	r2, [r3, #8]
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f558:	4b2e      	ldr	r3, [pc, #184]	; (800f614 <tcp_listen_input+0x1f4>)
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	60da      	str	r2, [r3, #12]
 800f560:	4a2c      	ldr	r2, [pc, #176]	; (800f614 <tcp_listen_input+0x1f4>)
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	6013      	str	r3, [r2, #0]
 800f566:	f003 f8d1 	bl	801270c <tcp_timer_needed>
 800f56a:	4b2b      	ldr	r3, [pc, #172]	; (800f618 <tcp_listen_input+0x1f8>)
 800f56c:	2201      	movs	r2, #1
 800f56e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f570:	6978      	ldr	r0, [r7, #20]
 800f572:	f001 fd8f 	bl	8011094 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f576:	4b23      	ldr	r3, [pc, #140]	; (800f604 <tcp_listen_input+0x1e4>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	89db      	ldrh	r3, [r3, #14]
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	3304      	adds	r3, #4
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fb f8c1 	bl	800a720 <ip4_route>
 800f59e:	4601      	mov	r1, r0
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	3304      	adds	r3, #4
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	f7ff fa28 	bl	800e9fc <tcp_eff_send_mss_netif>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f5b4:	2112      	movs	r1, #18
 800f5b6:	6978      	ldr	r0, [r7, #20]
 800f5b8:	f002 f844 	bl	8011644 <tcp_enqueue_flags>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d004      	beq.n	800f5d2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	6978      	ldr	r0, [r7, #20]
 800f5cc:	f7fe f976 	bl	800d8bc <tcp_abandon>
      return;
 800f5d0:	e006      	b.n	800f5e0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f5d2:	6978      	ldr	r0, [r7, #20]
 800f5d4:	f002 f924 	bl	8011820 <tcp_output>
  return;
 800f5d8:	e001      	b.n	800f5de <tcp_listen_input+0x1be>
    return;
 800f5da:	bf00      	nop
 800f5dc:	e000      	b.n	800f5e0 <tcp_listen_input+0x1c0>
  return;
 800f5de:	bf00      	nop
}
 800f5e0:	371c      	adds	r7, #28
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd90      	pop	{r4, r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	240081c4 	.word	0x240081c4
 800f5ec:	080159c4 	.word	0x080159c4
 800f5f0:	08015bdc 	.word	0x08015bdc
 800f5f4:	08015a30 	.word	0x08015a30
 800f5f8:	240081bc 	.word	0x240081bc
 800f5fc:	240081c2 	.word	0x240081c2
 800f600:	240081b8 	.word	0x240081b8
 800f604:	240081a8 	.word	0x240081a8
 800f608:	24005258 	.word	0x24005258
 800f60c:	2400525c 	.word	0x2400525c
 800f610:	24005248 	.word	0x24005248
 800f614:	2400818c 	.word	0x2400818c
 800f618:	24008194 	.word	0x24008194

0800f61c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b086      	sub	sp, #24
 800f620:	af04      	add	r7, sp, #16
 800f622:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f624:	4b2f      	ldr	r3, [pc, #188]	; (800f6e4 <tcp_timewait_input+0xc8>)
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	f003 0304 	and.w	r3, r3, #4
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d153      	bne.n	800f6d8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d106      	bne.n	800f644 <tcp_timewait_input+0x28>
 800f636:	4b2c      	ldr	r3, [pc, #176]	; (800f6e8 <tcp_timewait_input+0xcc>)
 800f638:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f63c:	492b      	ldr	r1, [pc, #172]	; (800f6ec <tcp_timewait_input+0xd0>)
 800f63e:	482c      	ldr	r0, [pc, #176]	; (800f6f0 <tcp_timewait_input+0xd4>)
 800f640:	f003 fbb2 	bl	8012da8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f644:	4b27      	ldr	r3, [pc, #156]	; (800f6e4 <tcp_timewait_input+0xc8>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	f003 0302 	and.w	r3, r3, #2
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d02a      	beq.n	800f6a6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f650:	4b28      	ldr	r3, [pc, #160]	; (800f6f4 <tcp_timewait_input+0xd8>)
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f658:	1ad3      	subs	r3, r2, r3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	db2d      	blt.n	800f6ba <tcp_timewait_input+0x9e>
 800f65e:	4b25      	ldr	r3, [pc, #148]	; (800f6f4 <tcp_timewait_input+0xd8>)
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f666:	6879      	ldr	r1, [r7, #4]
 800f668:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f66a:	440b      	add	r3, r1
 800f66c:	1ad3      	subs	r3, r2, r3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	dc23      	bgt.n	800f6ba <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f672:	4b21      	ldr	r3, [pc, #132]	; (800f6f8 <tcp_timewait_input+0xdc>)
 800f674:	6819      	ldr	r1, [r3, #0]
 800f676:	4b21      	ldr	r3, [pc, #132]	; (800f6fc <tcp_timewait_input+0xe0>)
 800f678:	881b      	ldrh	r3, [r3, #0]
 800f67a:	461a      	mov	r2, r3
 800f67c:	4b1d      	ldr	r3, [pc, #116]	; (800f6f4 <tcp_timewait_input+0xd8>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f682:	4b1f      	ldr	r3, [pc, #124]	; (800f700 <tcp_timewait_input+0xe4>)
 800f684:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f686:	885b      	ldrh	r3, [r3, #2]
 800f688:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f68a:	4a1d      	ldr	r2, [pc, #116]	; (800f700 <tcp_timewait_input+0xe4>)
 800f68c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f68e:	8812      	ldrh	r2, [r2, #0]
 800f690:	b292      	uxth	r2, r2
 800f692:	9202      	str	r2, [sp, #8]
 800f694:	9301      	str	r3, [sp, #4]
 800f696:	4b1b      	ldr	r3, [pc, #108]	; (800f704 <tcp_timewait_input+0xe8>)
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	4b1b      	ldr	r3, [pc, #108]	; (800f708 <tcp_timewait_input+0xec>)
 800f69c:	4602      	mov	r2, r0
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f002 fe72 	bl	8012388 <tcp_rst>
      return;
 800f6a4:	e01b      	b.n	800f6de <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f6a6:	4b0f      	ldr	r3, [pc, #60]	; (800f6e4 <tcp_timewait_input+0xc8>)
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	f003 0301 	and.w	r3, r3, #1
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d003      	beq.n	800f6ba <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f6b2:	4b16      	ldr	r3, [pc, #88]	; (800f70c <tcp_timewait_input+0xf0>)
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f6ba:	4b10      	ldr	r3, [pc, #64]	; (800f6fc <tcp_timewait_input+0xe0>)
 800f6bc:	881b      	ldrh	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00c      	beq.n	800f6dc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	8b5b      	ldrh	r3, [r3, #26]
 800f6c6:	f043 0302 	orr.w	r3, r3, #2
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f002 f8a5 	bl	8011820 <tcp_output>
  }
  return;
 800f6d6:	e001      	b.n	800f6dc <tcp_timewait_input+0xc0>
    return;
 800f6d8:	bf00      	nop
 800f6da:	e000      	b.n	800f6de <tcp_timewait_input+0xc2>
  return;
 800f6dc:	bf00      	nop
}
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	240081c4 	.word	0x240081c4
 800f6e8:	080159c4 	.word	0x080159c4
 800f6ec:	08015bfc 	.word	0x08015bfc
 800f6f0:	08015a30 	.word	0x08015a30
 800f6f4:	240081b8 	.word	0x240081b8
 800f6f8:	240081bc 	.word	0x240081bc
 800f6fc:	240081c2 	.word	0x240081c2
 800f700:	240081a8 	.word	0x240081a8
 800f704:	24005258 	.word	0x24005258
 800f708:	2400525c 	.word	0x2400525c
 800f70c:	24008180 	.word	0x24008180

0800f710 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f710:	b590      	push	{r4, r7, lr}
 800f712:	b08d      	sub	sp, #52	; 0x34
 800f714:	af04      	add	r7, sp, #16
 800f716:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f718:	2300      	movs	r3, #0
 800f71a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f71c:	2300      	movs	r3, #0
 800f71e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d106      	bne.n	800f734 <tcp_process+0x24>
 800f726:	4b9d      	ldr	r3, [pc, #628]	; (800f99c <tcp_process+0x28c>)
 800f728:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f72c:	499c      	ldr	r1, [pc, #624]	; (800f9a0 <tcp_process+0x290>)
 800f72e:	489d      	ldr	r0, [pc, #628]	; (800f9a4 <tcp_process+0x294>)
 800f730:	f003 fb3a 	bl	8012da8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f734:	4b9c      	ldr	r3, [pc, #624]	; (800f9a8 <tcp_process+0x298>)
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	f003 0304 	and.w	r3, r3, #4
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d04e      	beq.n	800f7de <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	7d1b      	ldrb	r3, [r3, #20]
 800f744:	2b02      	cmp	r3, #2
 800f746:	d108      	bne.n	800f75a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f74c:	4b97      	ldr	r3, [pc, #604]	; (800f9ac <tcp_process+0x29c>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	429a      	cmp	r2, r3
 800f752:	d123      	bne.n	800f79c <tcp_process+0x8c>
        acceptable = 1;
 800f754:	2301      	movs	r3, #1
 800f756:	76fb      	strb	r3, [r7, #27]
 800f758:	e020      	b.n	800f79c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f75e:	4b94      	ldr	r3, [pc, #592]	; (800f9b0 <tcp_process+0x2a0>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	429a      	cmp	r2, r3
 800f764:	d102      	bne.n	800f76c <tcp_process+0x5c>
        acceptable = 1;
 800f766:	2301      	movs	r3, #1
 800f768:	76fb      	strb	r3, [r7, #27]
 800f76a:	e017      	b.n	800f79c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f76c:	4b90      	ldr	r3, [pc, #576]	; (800f9b0 <tcp_process+0x2a0>)
 800f76e:	681a      	ldr	r2, [r3, #0]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f774:	1ad3      	subs	r3, r2, r3
 800f776:	2b00      	cmp	r3, #0
 800f778:	db10      	blt.n	800f79c <tcp_process+0x8c>
 800f77a:	4b8d      	ldr	r3, [pc, #564]	; (800f9b0 <tcp_process+0x2a0>)
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f782:	6879      	ldr	r1, [r7, #4]
 800f784:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f786:	440b      	add	r3, r1
 800f788:	1ad3      	subs	r3, r2, r3
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	dc06      	bgt.n	800f79c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	8b5b      	ldrh	r3, [r3, #26]
 800f792:	f043 0302 	orr.w	r3, r3, #2
 800f796:	b29a      	uxth	r2, r3
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f79c:	7efb      	ldrb	r3, [r7, #27]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d01b      	beq.n	800f7da <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	7d1b      	ldrb	r3, [r3, #20]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d106      	bne.n	800f7b8 <tcp_process+0xa8>
 800f7aa:	4b7c      	ldr	r3, [pc, #496]	; (800f99c <tcp_process+0x28c>)
 800f7ac:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f7b0:	4980      	ldr	r1, [pc, #512]	; (800f9b4 <tcp_process+0x2a4>)
 800f7b2:	487c      	ldr	r0, [pc, #496]	; (800f9a4 <tcp_process+0x294>)
 800f7b4:	f003 faf8 	bl	8012da8 <iprintf>
      recv_flags |= TF_RESET;
 800f7b8:	4b7f      	ldr	r3, [pc, #508]	; (800f9b8 <tcp_process+0x2a8>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	f043 0308 	orr.w	r3, r3, #8
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	4b7d      	ldr	r3, [pc, #500]	; (800f9b8 <tcp_process+0x2a8>)
 800f7c4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	8b5b      	ldrh	r3, [r3, #26]
 800f7ca:	f023 0301 	bic.w	r3, r3, #1
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f7d4:	f06f 030d 	mvn.w	r3, #13
 800f7d8:	e37a      	b.n	800fed0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	e378      	b.n	800fed0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f7de:	4b72      	ldr	r3, [pc, #456]	; (800f9a8 <tcp_process+0x298>)
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	f003 0302 	and.w	r3, r3, #2
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d010      	beq.n	800f80c <tcp_process+0xfc>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	7d1b      	ldrb	r3, [r3, #20]
 800f7ee:	2b02      	cmp	r3, #2
 800f7f0:	d00c      	beq.n	800f80c <tcp_process+0xfc>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	7d1b      	ldrb	r3, [r3, #20]
 800f7f6:	2b03      	cmp	r3, #3
 800f7f8:	d008      	beq.n	800f80c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	8b5b      	ldrh	r3, [r3, #26]
 800f7fe:	f043 0302 	orr.w	r3, r3, #2
 800f802:	b29a      	uxth	r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f808:	2300      	movs	r3, #0
 800f80a:	e361      	b.n	800fed0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	8b5b      	ldrh	r3, [r3, #26]
 800f810:	f003 0310 	and.w	r3, r3, #16
 800f814:	2b00      	cmp	r3, #0
 800f816:	d103      	bne.n	800f820 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f818:	4b68      	ldr	r3, [pc, #416]	; (800f9bc <tcp_process+0x2ac>)
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f001 fc2f 	bl	8011094 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	7d1b      	ldrb	r3, [r3, #20]
 800f83a:	3b02      	subs	r3, #2
 800f83c:	2b07      	cmp	r3, #7
 800f83e:	f200 8337 	bhi.w	800feb0 <tcp_process+0x7a0>
 800f842:	a201      	add	r2, pc, #4	; (adr r2, 800f848 <tcp_process+0x138>)
 800f844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f848:	0800f869 	.word	0x0800f869
 800f84c:	0800fa99 	.word	0x0800fa99
 800f850:	0800fc11 	.word	0x0800fc11
 800f854:	0800fc3b 	.word	0x0800fc3b
 800f858:	0800fd5f 	.word	0x0800fd5f
 800f85c:	0800fc11 	.word	0x0800fc11
 800f860:	0800fdeb 	.word	0x0800fdeb
 800f864:	0800fe7b 	.word	0x0800fe7b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f868:	4b4f      	ldr	r3, [pc, #316]	; (800f9a8 <tcp_process+0x298>)
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	f003 0310 	and.w	r3, r3, #16
 800f870:	2b00      	cmp	r3, #0
 800f872:	f000 80e4 	beq.w	800fa3e <tcp_process+0x32e>
 800f876:	4b4c      	ldr	r3, [pc, #304]	; (800f9a8 <tcp_process+0x298>)
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	f003 0302 	and.w	r3, r3, #2
 800f87e:	2b00      	cmp	r3, #0
 800f880:	f000 80dd 	beq.w	800fa3e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f888:	1c5a      	adds	r2, r3, #1
 800f88a:	4b48      	ldr	r3, [pc, #288]	; (800f9ac <tcp_process+0x29c>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	429a      	cmp	r2, r3
 800f890:	f040 80d5 	bne.w	800fa3e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f894:	4b46      	ldr	r3, [pc, #280]	; (800f9b0 <tcp_process+0x2a0>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	1c5a      	adds	r2, r3, #1
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f8a6:	4b41      	ldr	r3, [pc, #260]	; (800f9ac <tcp_process+0x29c>)
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f8ae:	4b44      	ldr	r3, [pc, #272]	; (800f9c0 <tcp_process+0x2b0>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	89db      	ldrh	r3, [r3, #14]
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f8c8:	4b39      	ldr	r3, [pc, #228]	; (800f9b0 <tcp_process+0x2a0>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	1e5a      	subs	r2, r3, #1
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2204      	movs	r2, #4
 800f8d6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	3304      	adds	r3, #4
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fa ff1d 	bl	800a720 <ip4_route>
 800f8e6:	4601      	mov	r1, r0
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	3304      	adds	r3, #4
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f7ff f884 	bl	800e9fc <tcp_eff_send_mss_netif>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f900:	009a      	lsls	r2, r3, #2
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f906:	005b      	lsls	r3, r3, #1
 800f908:	f241 111c 	movw	r1, #4380	; 0x111c
 800f90c:	428b      	cmp	r3, r1
 800f90e:	bf38      	it	cc
 800f910:	460b      	movcc	r3, r1
 800f912:	429a      	cmp	r2, r3
 800f914:	d204      	bcs.n	800f920 <tcp_process+0x210>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f91a:	009b      	lsls	r3, r3, #2
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	e00d      	b.n	800f93c <tcp_process+0x22c>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f924:	005b      	lsls	r3, r3, #1
 800f926:	f241 121c 	movw	r2, #4380	; 0x111c
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d904      	bls.n	800f938 <tcp_process+0x228>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f932:	005b      	lsls	r3, r3, #1
 800f934:	b29b      	uxth	r3, r3
 800f936:	e001      	b.n	800f93c <tcp_process+0x22c>
 800f938:	f241 131c 	movw	r3, #4380	; 0x111c
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d106      	bne.n	800f95a <tcp_process+0x24a>
 800f94c:	4b13      	ldr	r3, [pc, #76]	; (800f99c <tcp_process+0x28c>)
 800f94e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f952:	491c      	ldr	r1, [pc, #112]	; (800f9c4 <tcp_process+0x2b4>)
 800f954:	4813      	ldr	r0, [pc, #76]	; (800f9a4 <tcp_process+0x294>)
 800f956:	f003 fa27 	bl	8012da8 <iprintf>
        --pcb->snd_queuelen;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f960:	3b01      	subs	r3, #1
 800f962:	b29a      	uxth	r2, r3
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f96e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d12a      	bne.n	800f9cc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f97a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d106      	bne.n	800f990 <tcp_process+0x280>
 800f982:	4b06      	ldr	r3, [pc, #24]	; (800f99c <tcp_process+0x28c>)
 800f984:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f988:	490f      	ldr	r1, [pc, #60]	; (800f9c8 <tcp_process+0x2b8>)
 800f98a:	4806      	ldr	r0, [pc, #24]	; (800f9a4 <tcp_process+0x294>)
 800f98c:	f003 fa0c 	bl	8012da8 <iprintf>
          pcb->unsent = rseg->next;
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	66da      	str	r2, [r3, #108]	; 0x6c
 800f998:	e01c      	b.n	800f9d4 <tcp_process+0x2c4>
 800f99a:	bf00      	nop
 800f99c:	080159c4 	.word	0x080159c4
 800f9a0:	08015c1c 	.word	0x08015c1c
 800f9a4:	08015a30 	.word	0x08015a30
 800f9a8:	240081c4 	.word	0x240081c4
 800f9ac:	240081bc 	.word	0x240081bc
 800f9b0:	240081b8 	.word	0x240081b8
 800f9b4:	08015c38 	.word	0x08015c38
 800f9b8:	240081c5 	.word	0x240081c5
 800f9bc:	24008180 	.word	0x24008180
 800f9c0:	240081a8 	.word	0x240081a8
 800f9c4:	08015c58 	.word	0x08015c58
 800f9c8:	08015c70 	.word	0x08015c70
        } else {
          pcb->unacked = rseg->next;
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	681a      	ldr	r2, [r3, #0]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f9d4:	69f8      	ldr	r0, [r7, #28]
 800f9d6:	f7fe fd1a 	bl	800e40e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d104      	bne.n	800f9ec <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9e8:	861a      	strh	r2, [r3, #48]	; 0x30
 800f9ea:	e006      	b.n	800f9fa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00a      	beq.n	800fa1a <tcp_process+0x30a>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	6910      	ldr	r0, [r2, #16]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	6879      	ldr	r1, [r7, #4]
 800fa12:	4798      	blx	r3
 800fa14:	4603      	mov	r3, r0
 800fa16:	76bb      	strb	r3, [r7, #26]
 800fa18:	e001      	b.n	800fa1e <tcp_process+0x30e>
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fa1e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa22:	f113 0f0d 	cmn.w	r3, #13
 800fa26:	d102      	bne.n	800fa2e <tcp_process+0x31e>
          return ERR_ABRT;
 800fa28:	f06f 030c 	mvn.w	r3, #12
 800fa2c:	e250      	b.n	800fed0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	8b5b      	ldrh	r3, [r3, #26]
 800fa32:	f043 0302 	orr.w	r3, r3, #2
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fa3c:	e23a      	b.n	800feb4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fa3e:	4b98      	ldr	r3, [pc, #608]	; (800fca0 <tcp_process+0x590>)
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	f003 0310 	and.w	r3, r3, #16
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	f000 8234 	beq.w	800feb4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa4c:	4b95      	ldr	r3, [pc, #596]	; (800fca4 <tcp_process+0x594>)
 800fa4e:	6819      	ldr	r1, [r3, #0]
 800fa50:	4b95      	ldr	r3, [pc, #596]	; (800fca8 <tcp_process+0x598>)
 800fa52:	881b      	ldrh	r3, [r3, #0]
 800fa54:	461a      	mov	r2, r3
 800fa56:	4b95      	ldr	r3, [pc, #596]	; (800fcac <tcp_process+0x59c>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa5c:	4b94      	ldr	r3, [pc, #592]	; (800fcb0 <tcp_process+0x5a0>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa60:	885b      	ldrh	r3, [r3, #2]
 800fa62:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa64:	4a92      	ldr	r2, [pc, #584]	; (800fcb0 <tcp_process+0x5a0>)
 800fa66:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa68:	8812      	ldrh	r2, [r2, #0]
 800fa6a:	b292      	uxth	r2, r2
 800fa6c:	9202      	str	r2, [sp, #8]
 800fa6e:	9301      	str	r3, [sp, #4]
 800fa70:	4b90      	ldr	r3, [pc, #576]	; (800fcb4 <tcp_process+0x5a4>)
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	4b90      	ldr	r3, [pc, #576]	; (800fcb8 <tcp_process+0x5a8>)
 800fa76:	4602      	mov	r2, r0
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f002 fc85 	bl	8012388 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa84:	2b05      	cmp	r3, #5
 800fa86:	f200 8215 	bhi.w	800feb4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f002 fa4f 	bl	8011f34 <tcp_rexmit_rto>
      break;
 800fa96:	e20d      	b.n	800feb4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fa98:	4b81      	ldr	r3, [pc, #516]	; (800fca0 <tcp_process+0x590>)
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	f003 0310 	and.w	r3, r3, #16
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	f000 80a1 	beq.w	800fbe8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800faa6:	4b7f      	ldr	r3, [pc, #508]	; (800fca4 <tcp_process+0x594>)
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faae:	1ad3      	subs	r3, r2, r3
 800fab0:	3b01      	subs	r3, #1
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	db7e      	blt.n	800fbb4 <tcp_process+0x4a4>
 800fab6:	4b7b      	ldr	r3, [pc, #492]	; (800fca4 <tcp_process+0x594>)
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fabe:	1ad3      	subs	r3, r2, r3
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	dc77      	bgt.n	800fbb4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2204      	movs	r2, #4
 800fac8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800face:	2b00      	cmp	r3, #0
 800fad0:	d102      	bne.n	800fad8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fad2:	23fa      	movs	r3, #250	; 0xfa
 800fad4:	76bb      	strb	r3, [r7, #26]
 800fad6:	e01d      	b.n	800fb14 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fadc:	699b      	ldr	r3, [r3, #24]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d106      	bne.n	800faf0 <tcp_process+0x3e0>
 800fae2:	4b76      	ldr	r3, [pc, #472]	; (800fcbc <tcp_process+0x5ac>)
 800fae4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fae8:	4975      	ldr	r1, [pc, #468]	; (800fcc0 <tcp_process+0x5b0>)
 800faea:	4876      	ldr	r0, [pc, #472]	; (800fcc4 <tcp_process+0x5b4>)
 800faec:	f003 f95c 	bl	8012da8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faf4:	699b      	ldr	r3, [r3, #24]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d00a      	beq.n	800fb10 <tcp_process+0x400>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fafe:	699b      	ldr	r3, [r3, #24]
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	6910      	ldr	r0, [r2, #16]
 800fb04:	2200      	movs	r2, #0
 800fb06:	6879      	ldr	r1, [r7, #4]
 800fb08:	4798      	blx	r3
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	76bb      	strb	r3, [r7, #26]
 800fb0e:	e001      	b.n	800fb14 <tcp_process+0x404>
 800fb10:	23f0      	movs	r3, #240	; 0xf0
 800fb12:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fb14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00a      	beq.n	800fb32 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fb1c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb20:	f113 0f0d 	cmn.w	r3, #13
 800fb24:	d002      	beq.n	800fb2c <tcp_process+0x41c>
              tcp_abort(pcb);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7fd ff86 	bl	800da38 <tcp_abort>
            }
            return ERR_ABRT;
 800fb2c:	f06f 030c 	mvn.w	r3, #12
 800fb30:	e1ce      	b.n	800fed0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 fae0 	bl	80100f8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fb38:	4b63      	ldr	r3, [pc, #396]	; (800fcc8 <tcp_process+0x5b8>)
 800fb3a:	881b      	ldrh	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d005      	beq.n	800fb4c <tcp_process+0x43c>
            recv_acked--;
 800fb40:	4b61      	ldr	r3, [pc, #388]	; (800fcc8 <tcp_process+0x5b8>)
 800fb42:	881b      	ldrh	r3, [r3, #0]
 800fb44:	3b01      	subs	r3, #1
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	4b5f      	ldr	r3, [pc, #380]	; (800fcc8 <tcp_process+0x5b8>)
 800fb4a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb50:	009a      	lsls	r2, r3, #2
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb56:	005b      	lsls	r3, r3, #1
 800fb58:	f241 111c 	movw	r1, #4380	; 0x111c
 800fb5c:	428b      	cmp	r3, r1
 800fb5e:	bf38      	it	cc
 800fb60:	460b      	movcc	r3, r1
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d204      	bcs.n	800fb70 <tcp_process+0x460>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb6a:	009b      	lsls	r3, r3, #2
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	e00d      	b.n	800fb8c <tcp_process+0x47c>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb74:	005b      	lsls	r3, r3, #1
 800fb76:	f241 121c 	movw	r2, #4380	; 0x111c
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d904      	bls.n	800fb88 <tcp_process+0x478>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb82:	005b      	lsls	r3, r3, #1
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	e001      	b.n	800fb8c <tcp_process+0x47c>
 800fb88:	f241 131c 	movw	r3, #4380	; 0x111c
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fb92:	4b4e      	ldr	r3, [pc, #312]	; (800fccc <tcp_process+0x5bc>)
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	f003 0320 	and.w	r3, r3, #32
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d037      	beq.n	800fc0e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	8b5b      	ldrh	r3, [r3, #26]
 800fba2:	f043 0302 	orr.w	r3, r3, #2
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2207      	movs	r2, #7
 800fbb0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fbb2:	e02c      	b.n	800fc0e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbb4:	4b3b      	ldr	r3, [pc, #236]	; (800fca4 <tcp_process+0x594>)
 800fbb6:	6819      	ldr	r1, [r3, #0]
 800fbb8:	4b3b      	ldr	r3, [pc, #236]	; (800fca8 <tcp_process+0x598>)
 800fbba:	881b      	ldrh	r3, [r3, #0]
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	4b3b      	ldr	r3, [pc, #236]	; (800fcac <tcp_process+0x59c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbc4:	4b3a      	ldr	r3, [pc, #232]	; (800fcb0 <tcp_process+0x5a0>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbc8:	885b      	ldrh	r3, [r3, #2]
 800fbca:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbcc:	4a38      	ldr	r2, [pc, #224]	; (800fcb0 <tcp_process+0x5a0>)
 800fbce:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbd0:	8812      	ldrh	r2, [r2, #0]
 800fbd2:	b292      	uxth	r2, r2
 800fbd4:	9202      	str	r2, [sp, #8]
 800fbd6:	9301      	str	r3, [sp, #4]
 800fbd8:	4b36      	ldr	r3, [pc, #216]	; (800fcb4 <tcp_process+0x5a4>)
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	4b36      	ldr	r3, [pc, #216]	; (800fcb8 <tcp_process+0x5a8>)
 800fbde:	4602      	mov	r2, r0
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f002 fbd1 	bl	8012388 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fbe6:	e167      	b.n	800feb8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fbe8:	4b2d      	ldr	r3, [pc, #180]	; (800fca0 <tcp_process+0x590>)
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	f003 0302 	and.w	r3, r3, #2
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f000 8161 	beq.w	800feb8 <tcp_process+0x7a8>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbfa:	1e5a      	subs	r2, r3, #1
 800fbfc:	4b2b      	ldr	r3, [pc, #172]	; (800fcac <tcp_process+0x59c>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	f040 8159 	bne.w	800feb8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f002 f9b6 	bl	8011f78 <tcp_rexmit>
      break;
 800fc0c:	e154      	b.n	800feb8 <tcp_process+0x7a8>
 800fc0e:	e153      	b.n	800feb8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f000 fa71 	bl	80100f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fc16:	4b2d      	ldr	r3, [pc, #180]	; (800fccc <tcp_process+0x5bc>)
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	f003 0320 	and.w	r3, r3, #32
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f000 814c 	beq.w	800febc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	8b5b      	ldrh	r3, [r3, #26]
 800fc28:	f043 0302 	orr.w	r3, r3, #2
 800fc2c:	b29a      	uxth	r2, r3
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2207      	movs	r2, #7
 800fc36:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fc38:	e140      	b.n	800febc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f000 fa5c 	bl	80100f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fc40:	4b22      	ldr	r3, [pc, #136]	; (800fccc <tcp_process+0x5bc>)
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	f003 0320 	and.w	r3, r3, #32
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d071      	beq.n	800fd30 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fc4c:	4b14      	ldr	r3, [pc, #80]	; (800fca0 <tcp_process+0x590>)
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	f003 0310 	and.w	r3, r3, #16
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d060      	beq.n	800fd1a <tcp_process+0x60a>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc5c:	4b11      	ldr	r3, [pc, #68]	; (800fca4 <tcp_process+0x594>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d15a      	bne.n	800fd1a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d156      	bne.n	800fd1a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	8b5b      	ldrh	r3, [r3, #26]
 800fc70:	f043 0302 	orr.w	r3, r3, #2
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f7fe fdb4 	bl	800e7e8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fc80:	4b13      	ldr	r3, [pc, #76]	; (800fcd0 <tcp_process+0x5c0>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d105      	bne.n	800fc96 <tcp_process+0x586>
 800fc8a:	4b11      	ldr	r3, [pc, #68]	; (800fcd0 <tcp_process+0x5c0>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	4a0f      	ldr	r2, [pc, #60]	; (800fcd0 <tcp_process+0x5c0>)
 800fc92:	6013      	str	r3, [r2, #0]
 800fc94:	e02e      	b.n	800fcf4 <tcp_process+0x5e4>
 800fc96:	4b0e      	ldr	r3, [pc, #56]	; (800fcd0 <tcp_process+0x5c0>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	617b      	str	r3, [r7, #20]
 800fc9c:	e027      	b.n	800fcee <tcp_process+0x5de>
 800fc9e:	bf00      	nop
 800fca0:	240081c4 	.word	0x240081c4
 800fca4:	240081bc 	.word	0x240081bc
 800fca8:	240081c2 	.word	0x240081c2
 800fcac:	240081b8 	.word	0x240081b8
 800fcb0:	240081a8 	.word	0x240081a8
 800fcb4:	24005258 	.word	0x24005258
 800fcb8:	2400525c 	.word	0x2400525c
 800fcbc:	080159c4 	.word	0x080159c4
 800fcc0:	08015c84 	.word	0x08015c84
 800fcc4:	08015a30 	.word	0x08015a30
 800fcc8:	240081c0 	.word	0x240081c0
 800fccc:	240081c5 	.word	0x240081c5
 800fcd0:	2400818c 	.word	0x2400818c
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	687a      	ldr	r2, [r7, #4]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d104      	bne.n	800fce8 <tcp_process+0x5d8>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	68da      	ldr	r2, [r3, #12]
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	60da      	str	r2, [r3, #12]
 800fce6:	e005      	b.n	800fcf4 <tcp_process+0x5e4>
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	617b      	str	r3, [r7, #20]
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1ef      	bne.n	800fcd4 <tcp_process+0x5c4>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	60da      	str	r2, [r3, #12]
 800fcfa:	4b77      	ldr	r3, [pc, #476]	; (800fed8 <tcp_process+0x7c8>)
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	220a      	movs	r2, #10
 800fd04:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fd06:	4b75      	ldr	r3, [pc, #468]	; (800fedc <tcp_process+0x7cc>)
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	60da      	str	r2, [r3, #12]
 800fd0e:	4a73      	ldr	r2, [pc, #460]	; (800fedc <tcp_process+0x7cc>)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6013      	str	r3, [r2, #0]
 800fd14:	f002 fcfa 	bl	801270c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fd18:	e0d2      	b.n	800fec0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	8b5b      	ldrh	r3, [r3, #26]
 800fd1e:	f043 0302 	orr.w	r3, r3, #2
 800fd22:	b29a      	uxth	r2, r3
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2208      	movs	r2, #8
 800fd2c:	751a      	strb	r2, [r3, #20]
      break;
 800fd2e:	e0c7      	b.n	800fec0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd30:	4b6b      	ldr	r3, [pc, #428]	; (800fee0 <tcp_process+0x7d0>)
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	f003 0310 	and.w	r3, r3, #16
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	f000 80c1 	beq.w	800fec0 <tcp_process+0x7b0>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd42:	4b68      	ldr	r3, [pc, #416]	; (800fee4 <tcp_process+0x7d4>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	f040 80ba 	bne.w	800fec0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	f040 80b5 	bne.w	800fec0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2206      	movs	r2, #6
 800fd5a:	751a      	strb	r2, [r3, #20]
      break;
 800fd5c:	e0b0      	b.n	800fec0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f9ca 	bl	80100f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fd64:	4b60      	ldr	r3, [pc, #384]	; (800fee8 <tcp_process+0x7d8>)
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	f003 0320 	and.w	r3, r3, #32
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	f000 80a9 	beq.w	800fec4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	8b5b      	ldrh	r3, [r3, #26]
 800fd76:	f043 0302 	orr.w	r3, r3, #2
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f7fe fd31 	bl	800e7e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fd86:	4b59      	ldr	r3, [pc, #356]	; (800feec <tcp_process+0x7dc>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d105      	bne.n	800fd9c <tcp_process+0x68c>
 800fd90:	4b56      	ldr	r3, [pc, #344]	; (800feec <tcp_process+0x7dc>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	68db      	ldr	r3, [r3, #12]
 800fd96:	4a55      	ldr	r2, [pc, #340]	; (800feec <tcp_process+0x7dc>)
 800fd98:	6013      	str	r3, [r2, #0]
 800fd9a:	e013      	b.n	800fdc4 <tcp_process+0x6b4>
 800fd9c:	4b53      	ldr	r3, [pc, #332]	; (800feec <tcp_process+0x7dc>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	613b      	str	r3, [r7, #16]
 800fda2:	e00c      	b.n	800fdbe <tcp_process+0x6ae>
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d104      	bne.n	800fdb8 <tcp_process+0x6a8>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	68da      	ldr	r2, [r3, #12]
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	60da      	str	r2, [r3, #12]
 800fdb6:	e005      	b.n	800fdc4 <tcp_process+0x6b4>
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	613b      	str	r3, [r7, #16]
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d1ef      	bne.n	800fda4 <tcp_process+0x694>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	60da      	str	r2, [r3, #12]
 800fdca:	4b43      	ldr	r3, [pc, #268]	; (800fed8 <tcp_process+0x7c8>)
 800fdcc:	2201      	movs	r2, #1
 800fdce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	220a      	movs	r2, #10
 800fdd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fdd6:	4b41      	ldr	r3, [pc, #260]	; (800fedc <tcp_process+0x7cc>)
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	60da      	str	r2, [r3, #12]
 800fdde:	4a3f      	ldr	r2, [pc, #252]	; (800fedc <tcp_process+0x7cc>)
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6013      	str	r3, [r2, #0]
 800fde4:	f002 fc92 	bl	801270c <tcp_timer_needed>
      }
      break;
 800fde8:	e06c      	b.n	800fec4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 f984 	bl	80100f8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fdf0:	4b3b      	ldr	r3, [pc, #236]	; (800fee0 <tcp_process+0x7d0>)
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	f003 0310 	and.w	r3, r3, #16
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d065      	beq.n	800fec8 <tcp_process+0x7b8>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe00:	4b38      	ldr	r3, [pc, #224]	; (800fee4 <tcp_process+0x7d4>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d15f      	bne.n	800fec8 <tcp_process+0x7b8>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d15b      	bne.n	800fec8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f7fe fce9 	bl	800e7e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fe16:	4b35      	ldr	r3, [pc, #212]	; (800feec <tcp_process+0x7dc>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d105      	bne.n	800fe2c <tcp_process+0x71c>
 800fe20:	4b32      	ldr	r3, [pc, #200]	; (800feec <tcp_process+0x7dc>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	4a31      	ldr	r2, [pc, #196]	; (800feec <tcp_process+0x7dc>)
 800fe28:	6013      	str	r3, [r2, #0]
 800fe2a:	e013      	b.n	800fe54 <tcp_process+0x744>
 800fe2c:	4b2f      	ldr	r3, [pc, #188]	; (800feec <tcp_process+0x7dc>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	60fb      	str	r3, [r7, #12]
 800fe32:	e00c      	b.n	800fe4e <tcp_process+0x73e>
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d104      	bne.n	800fe48 <tcp_process+0x738>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	68da      	ldr	r2, [r3, #12]
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	60da      	str	r2, [r3, #12]
 800fe46:	e005      	b.n	800fe54 <tcp_process+0x744>
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	68db      	ldr	r3, [r3, #12]
 800fe4c:	60fb      	str	r3, [r7, #12]
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d1ef      	bne.n	800fe34 <tcp_process+0x724>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	60da      	str	r2, [r3, #12]
 800fe5a:	4b1f      	ldr	r3, [pc, #124]	; (800fed8 <tcp_process+0x7c8>)
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	220a      	movs	r2, #10
 800fe64:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fe66:	4b1d      	ldr	r3, [pc, #116]	; (800fedc <tcp_process+0x7cc>)
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	60da      	str	r2, [r3, #12]
 800fe6e:	4a1b      	ldr	r2, [pc, #108]	; (800fedc <tcp_process+0x7cc>)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6013      	str	r3, [r2, #0]
 800fe74:	f002 fc4a 	bl	801270c <tcp_timer_needed>
      }
      break;
 800fe78:	e026      	b.n	800fec8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f000 f93c 	bl	80100f8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fe80:	4b17      	ldr	r3, [pc, #92]	; (800fee0 <tcp_process+0x7d0>)
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	f003 0310 	and.w	r3, r3, #16
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d01f      	beq.n	800fecc <tcp_process+0x7bc>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe90:	4b14      	ldr	r3, [pc, #80]	; (800fee4 <tcp_process+0x7d4>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d119      	bne.n	800fecc <tcp_process+0x7bc>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d115      	bne.n	800fecc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fea0:	4b11      	ldr	r3, [pc, #68]	; (800fee8 <tcp_process+0x7d8>)
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	f043 0310 	orr.w	r3, r3, #16
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	4b0f      	ldr	r3, [pc, #60]	; (800fee8 <tcp_process+0x7d8>)
 800feac:	701a      	strb	r2, [r3, #0]
      }
      break;
 800feae:	e00d      	b.n	800fecc <tcp_process+0x7bc>
    default:
      break;
 800feb0:	bf00      	nop
 800feb2:	e00c      	b.n	800fece <tcp_process+0x7be>
      break;
 800feb4:	bf00      	nop
 800feb6:	e00a      	b.n	800fece <tcp_process+0x7be>
      break;
 800feb8:	bf00      	nop
 800feba:	e008      	b.n	800fece <tcp_process+0x7be>
      break;
 800febc:	bf00      	nop
 800febe:	e006      	b.n	800fece <tcp_process+0x7be>
      break;
 800fec0:	bf00      	nop
 800fec2:	e004      	b.n	800fece <tcp_process+0x7be>
      break;
 800fec4:	bf00      	nop
 800fec6:	e002      	b.n	800fece <tcp_process+0x7be>
      break;
 800fec8:	bf00      	nop
 800feca:	e000      	b.n	800fece <tcp_process+0x7be>
      break;
 800fecc:	bf00      	nop
  }
  return ERR_OK;
 800fece:	2300      	movs	r3, #0
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3724      	adds	r7, #36	; 0x24
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd90      	pop	{r4, r7, pc}
 800fed8:	24008194 	.word	0x24008194
 800fedc:	24008190 	.word	0x24008190
 800fee0:	240081c4 	.word	0x240081c4
 800fee4:	240081bc 	.word	0x240081bc
 800fee8:	240081c5 	.word	0x240081c5
 800feec:	2400818c 	.word	0x2400818c

0800fef0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fef0:	b590      	push	{r4, r7, lr}
 800fef2:	b085      	sub	sp, #20
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d106      	bne.n	800ff0e <tcp_oos_insert_segment+0x1e>
 800ff00:	4b3b      	ldr	r3, [pc, #236]	; (800fff0 <tcp_oos_insert_segment+0x100>)
 800ff02:	f240 421f 	movw	r2, #1055	; 0x41f
 800ff06:	493b      	ldr	r1, [pc, #236]	; (800fff4 <tcp_oos_insert_segment+0x104>)
 800ff08:	483b      	ldr	r0, [pc, #236]	; (800fff8 <tcp_oos_insert_segment+0x108>)
 800ff0a:	f002 ff4d 	bl	8012da8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	68db      	ldr	r3, [r3, #12]
 800ff12:	899b      	ldrh	r3, [r3, #12]
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7f9 f8e6 	bl	80090e8 <lwip_htons>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	b2db      	uxtb	r3, r3
 800ff20:	f003 0301 	and.w	r3, r3, #1
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d028      	beq.n	800ff7a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ff28:	6838      	ldr	r0, [r7, #0]
 800ff2a:	f7fe fa5b 	bl	800e3e4 <tcp_segs_free>
    next = NULL;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	603b      	str	r3, [r7, #0]
 800ff32:	e056      	b.n	800ffe2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	899b      	ldrh	r3, [r3, #12]
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7f9 f8d3 	bl	80090e8 <lwip_htons>
 800ff42:	4603      	mov	r3, r0
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	f003 0301 	and.w	r3, r3, #1
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00d      	beq.n	800ff6a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	899b      	ldrh	r3, [r3, #12]
 800ff54:	b29c      	uxth	r4, r3
 800ff56:	2001      	movs	r0, #1
 800ff58:	f7f9 f8c6 	bl	80090e8 <lwip_htons>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	461a      	mov	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	68db      	ldr	r3, [r3, #12]
 800ff64:	4322      	orrs	r2, r4
 800ff66:	b292      	uxth	r2, r2
 800ff68:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f7fe fa4a 	bl	800e40e <tcp_seg_free>
    while (next &&
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d00e      	beq.n	800ff9e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	891b      	ldrh	r3, [r3, #8]
 800ff84:	461a      	mov	r2, r3
 800ff86:	4b1d      	ldr	r3, [pc, #116]	; (800fffc <tcp_oos_insert_segment+0x10c>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	441a      	add	r2, r3
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	6839      	ldr	r1, [r7, #0]
 800ff94:	8909      	ldrh	r1, [r1, #8]
 800ff96:	440b      	add	r3, r1
 800ff98:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	daca      	bge.n	800ff34 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d01e      	beq.n	800ffe2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	891b      	ldrh	r3, [r3, #8]
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	4b14      	ldr	r3, [pc, #80]	; (800fffc <tcp_oos_insert_segment+0x10c>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	441a      	add	r2, r3
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	68db      	ldr	r3, [r3, #12]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	dd12      	ble.n	800ffe2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	b29a      	uxth	r2, r3
 800ffc4:	4b0d      	ldr	r3, [pc, #52]	; (800fffc <tcp_oos_insert_segment+0x10c>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	1ad3      	subs	r3, r2, r3
 800ffcc:	b29a      	uxth	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	685a      	ldr	r2, [r3, #4]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	891b      	ldrh	r3, [r3, #8]
 800ffda:	4619      	mov	r1, r3
 800ffdc:	4610      	mov	r0, r2
 800ffde:	f7fc fe1d 	bl	800cc1c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	683a      	ldr	r2, [r7, #0]
 800ffe6:	601a      	str	r2, [r3, #0]
}
 800ffe8:	bf00      	nop
 800ffea:	3714      	adds	r7, #20
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd90      	pop	{r4, r7, pc}
 800fff0:	080159c4 	.word	0x080159c4
 800fff4:	08015ca4 	.word	0x08015ca4
 800fff8:	08015a30 	.word	0x08015a30
 800fffc:	240081b8 	.word	0x240081b8

08010000 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010000:	b5b0      	push	{r4, r5, r7, lr}
 8010002:	b086      	sub	sp, #24
 8010004:	af00      	add	r7, sp, #0
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]
 801000c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801000e:	e03e      	b.n	801008e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	4618      	mov	r0, r3
 8010020:	f7fd f80a 	bl	800d038 <pbuf_clen>
 8010024:	4603      	mov	r3, r0
 8010026:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801002e:	8a7a      	ldrh	r2, [r7, #18]
 8010030:	429a      	cmp	r2, r3
 8010032:	d906      	bls.n	8010042 <tcp_free_acked_segments+0x42>
 8010034:	4b2a      	ldr	r3, [pc, #168]	; (80100e0 <tcp_free_acked_segments+0xe0>)
 8010036:	f240 4257 	movw	r2, #1111	; 0x457
 801003a:	492a      	ldr	r1, [pc, #168]	; (80100e4 <tcp_free_acked_segments+0xe4>)
 801003c:	482a      	ldr	r0, [pc, #168]	; (80100e8 <tcp_free_acked_segments+0xe8>)
 801003e:	f002 feb3 	bl	8012da8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010048:	8a7b      	ldrh	r3, [r7, #18]
 801004a:	1ad3      	subs	r3, r2, r3
 801004c:	b29a      	uxth	r2, r3
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	891a      	ldrh	r2, [r3, #8]
 8010058:	4b24      	ldr	r3, [pc, #144]	; (80100ec <tcp_free_acked_segments+0xec>)
 801005a:	881b      	ldrh	r3, [r3, #0]
 801005c:	4413      	add	r3, r2
 801005e:	b29a      	uxth	r2, r3
 8010060:	4b22      	ldr	r3, [pc, #136]	; (80100ec <tcp_free_acked_segments+0xec>)
 8010062:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010064:	6978      	ldr	r0, [r7, #20]
 8010066:	f7fe f9d2 	bl	800e40e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010070:	2b00      	cmp	r3, #0
 8010072:	d00c      	beq.n	801008e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d109      	bne.n	801008e <tcp_free_acked_segments+0x8e>
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d106      	bne.n	801008e <tcp_free_acked_segments+0x8e>
 8010080:	4b17      	ldr	r3, [pc, #92]	; (80100e0 <tcp_free_acked_segments+0xe0>)
 8010082:	f240 4261 	movw	r2, #1121	; 0x461
 8010086:	491a      	ldr	r1, [pc, #104]	; (80100f0 <tcp_free_acked_segments+0xf0>)
 8010088:	4817      	ldr	r0, [pc, #92]	; (80100e8 <tcp_free_acked_segments+0xe8>)
 801008a:	f002 fe8d 	bl	8012da8 <iprintf>
  while (seg_list != NULL &&
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d020      	beq.n	80100d6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	68db      	ldr	r3, [r3, #12]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	4618      	mov	r0, r3
 801009c:	f7f9 f839 	bl	8009112 <lwip_htonl>
 80100a0:	4604      	mov	r4, r0
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	891b      	ldrh	r3, [r3, #8]
 80100a6:	461d      	mov	r5, r3
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	68db      	ldr	r3, [r3, #12]
 80100ac:	899b      	ldrh	r3, [r3, #12]
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7f9 f819 	bl	80090e8 <lwip_htons>
 80100b6:	4603      	mov	r3, r0
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	f003 0303 	and.w	r3, r3, #3
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d001      	beq.n	80100c6 <tcp_free_acked_segments+0xc6>
 80100c2:	2301      	movs	r3, #1
 80100c4:	e000      	b.n	80100c8 <tcp_free_acked_segments+0xc8>
 80100c6:	2300      	movs	r3, #0
 80100c8:	442b      	add	r3, r5
 80100ca:	18e2      	adds	r2, r4, r3
 80100cc:	4b09      	ldr	r3, [pc, #36]	; (80100f4 <tcp_free_acked_segments+0xf4>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	dd9c      	ble.n	8010010 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80100d6:	68bb      	ldr	r3, [r7, #8]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3718      	adds	r7, #24
 80100dc:	46bd      	mov	sp, r7
 80100de:	bdb0      	pop	{r4, r5, r7, pc}
 80100e0:	080159c4 	.word	0x080159c4
 80100e4:	08015ccc 	.word	0x08015ccc
 80100e8:	08015a30 	.word	0x08015a30
 80100ec:	240081c0 	.word	0x240081c0
 80100f0:	08015cf4 	.word	0x08015cf4
 80100f4:	240081bc 	.word	0x240081bc

080100f8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80100f8:	b5b0      	push	{r4, r5, r7, lr}
 80100fa:	b094      	sub	sp, #80	; 0x50
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010100:	2300      	movs	r3, #0
 8010102:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d106      	bne.n	8010118 <tcp_receive+0x20>
 801010a:	4b91      	ldr	r3, [pc, #580]	; (8010350 <tcp_receive+0x258>)
 801010c:	f240 427b 	movw	r2, #1147	; 0x47b
 8010110:	4990      	ldr	r1, [pc, #576]	; (8010354 <tcp_receive+0x25c>)
 8010112:	4891      	ldr	r0, [pc, #580]	; (8010358 <tcp_receive+0x260>)
 8010114:	f002 fe48 	bl	8012da8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	7d1b      	ldrb	r3, [r3, #20]
 801011c:	2b03      	cmp	r3, #3
 801011e:	d806      	bhi.n	801012e <tcp_receive+0x36>
 8010120:	4b8b      	ldr	r3, [pc, #556]	; (8010350 <tcp_receive+0x258>)
 8010122:	f240 427c 	movw	r2, #1148	; 0x47c
 8010126:	498d      	ldr	r1, [pc, #564]	; (801035c <tcp_receive+0x264>)
 8010128:	488b      	ldr	r0, [pc, #556]	; (8010358 <tcp_receive+0x260>)
 801012a:	f002 fe3d 	bl	8012da8 <iprintf>

  if (flags & TCP_ACK) {
 801012e:	4b8c      	ldr	r3, [pc, #560]	; (8010360 <tcp_receive+0x268>)
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	f003 0310 	and.w	r3, r3, #16
 8010136:	2b00      	cmp	r3, #0
 8010138:	f000 8264 	beq.w	8010604 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010142:	461a      	mov	r2, r3
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010148:	4413      	add	r3, r2
 801014a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010150:	4b84      	ldr	r3, [pc, #528]	; (8010364 <tcp_receive+0x26c>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	1ad3      	subs	r3, r2, r3
 8010156:	2b00      	cmp	r3, #0
 8010158:	db1b      	blt.n	8010192 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801015e:	4b81      	ldr	r3, [pc, #516]	; (8010364 <tcp_receive+0x26c>)
 8010160:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010162:	429a      	cmp	r2, r3
 8010164:	d106      	bne.n	8010174 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801016a:	4b7f      	ldr	r3, [pc, #508]	; (8010368 <tcp_receive+0x270>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	2b00      	cmp	r3, #0
 8010172:	db0e      	blt.n	8010192 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010178:	4b7b      	ldr	r3, [pc, #492]	; (8010368 <tcp_receive+0x270>)
 801017a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801017c:	429a      	cmp	r2, r3
 801017e:	d125      	bne.n	80101cc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010180:	4b7a      	ldr	r3, [pc, #488]	; (801036c <tcp_receive+0x274>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	89db      	ldrh	r3, [r3, #14]
 8010186:	b29a      	uxth	r2, r3
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801018e:	429a      	cmp	r2, r3
 8010190:	d91c      	bls.n	80101cc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010192:	4b76      	ldr	r3, [pc, #472]	; (801036c <tcp_receive+0x274>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	89db      	ldrh	r3, [r3, #14]
 8010198:	b29a      	uxth	r2, r3
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d205      	bcs.n	80101bc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80101bc:	4b69      	ldr	r3, [pc, #420]	; (8010364 <tcp_receive+0x26c>)
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80101c4:	4b68      	ldr	r3, [pc, #416]	; (8010368 <tcp_receive+0x270>)
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80101cc:	4b66      	ldr	r3, [pc, #408]	; (8010368 <tcp_receive+0x270>)
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101d4:	1ad3      	subs	r3, r2, r3
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	dc58      	bgt.n	801028c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80101da:	4b65      	ldr	r3, [pc, #404]	; (8010370 <tcp_receive+0x278>)
 80101dc:	881b      	ldrh	r3, [r3, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d14b      	bne.n	801027a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80101ec:	4413      	add	r3, r2
 80101ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d142      	bne.n	801027a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	db3d      	blt.n	801027a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010202:	4b59      	ldr	r3, [pc, #356]	; (8010368 <tcp_receive+0x270>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	429a      	cmp	r2, r3
 8010208:	d137      	bne.n	801027a <tcp_receive+0x182>
              found_dupack = 1;
 801020a:	2301      	movs	r3, #1
 801020c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010214:	2bff      	cmp	r3, #255	; 0xff
 8010216:	d007      	beq.n	8010228 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801021e:	3301      	adds	r3, #1
 8010220:	b2da      	uxtb	r2, r3
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801022e:	2b03      	cmp	r3, #3
 8010230:	d91b      	bls.n	801026a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801023c:	4413      	add	r3, r2
 801023e:	b29a      	uxth	r2, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010246:	429a      	cmp	r2, r3
 8010248:	d30a      	bcc.n	8010260 <tcp_receive+0x168>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010254:	4413      	add	r3, r2
 8010256:	b29a      	uxth	r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801025e:	e004      	b.n	801026a <tcp_receive+0x172>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010266:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010270:	2b02      	cmp	r3, #2
 8010272:	d902      	bls.n	801027a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f001 feeb 	bl	8012050 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801027a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801027c:	2b00      	cmp	r3, #0
 801027e:	f040 8161 	bne.w	8010544 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2200      	movs	r2, #0
 8010286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801028a:	e15b      	b.n	8010544 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801028c:	4b36      	ldr	r3, [pc, #216]	; (8010368 <tcp_receive+0x270>)
 801028e:	681a      	ldr	r2, [r3, #0]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010294:	1ad3      	subs	r3, r2, r3
 8010296:	3b01      	subs	r3, #1
 8010298:	2b00      	cmp	r3, #0
 801029a:	f2c0 814e 	blt.w	801053a <tcp_receive+0x442>
 801029e:	4b32      	ldr	r3, [pc, #200]	; (8010368 <tcp_receive+0x270>)
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102a6:	1ad3      	subs	r3, r2, r3
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f300 8146 	bgt.w	801053a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	8b5b      	ldrh	r3, [r3, #26]
 80102b2:	f003 0304 	and.w	r3, r3, #4
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d010      	beq.n	80102dc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	8b5b      	ldrh	r3, [r3, #26]
 80102be:	f023 0304 	bic.w	r3, r3, #4
 80102c2:	b29a      	uxth	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2200      	movs	r2, #0
 80102e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80102ea:	10db      	asrs	r3, r3, #3
 80102ec:	b21b      	sxth	r3, r3
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	4413      	add	r3, r2
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	b21a      	sxth	r2, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010304:	4b18      	ldr	r3, [pc, #96]	; (8010368 <tcp_receive+0x270>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	b29a      	uxth	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801030e:	b29b      	uxth	r3, r3
 8010310:	1ad3      	subs	r3, r2, r3
 8010312:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2200      	movs	r2, #0
 8010318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801031c:	4b12      	ldr	r3, [pc, #72]	; (8010368 <tcp_receive+0x270>)
 801031e:	681a      	ldr	r2, [r3, #0]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	7d1b      	ldrb	r3, [r3, #20]
 8010328:	2b03      	cmp	r3, #3
 801032a:	f240 8097 	bls.w	801045c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801033a:	429a      	cmp	r2, r3
 801033c:	d245      	bcs.n	80103ca <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	8b5b      	ldrh	r3, [r3, #26]
 8010342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010346:	2b00      	cmp	r3, #0
 8010348:	d014      	beq.n	8010374 <tcp_receive+0x27c>
 801034a:	2301      	movs	r3, #1
 801034c:	e013      	b.n	8010376 <tcp_receive+0x27e>
 801034e:	bf00      	nop
 8010350:	080159c4 	.word	0x080159c4
 8010354:	08015d14 	.word	0x08015d14
 8010358:	08015a30 	.word	0x08015a30
 801035c:	08015d30 	.word	0x08015d30
 8010360:	240081c4 	.word	0x240081c4
 8010364:	240081b8 	.word	0x240081b8
 8010368:	240081bc 	.word	0x240081bc
 801036c:	240081a8 	.word	0x240081a8
 8010370:	240081c2 	.word	0x240081c2
 8010374:	2302      	movs	r3, #2
 8010376:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801037a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801037e:	b29a      	uxth	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010384:	fb12 f303 	smulbb	r3, r2, r3
 8010388:	b29b      	uxth	r3, r3
 801038a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801038c:	4293      	cmp	r3, r2
 801038e:	bf28      	it	cs
 8010390:	4613      	movcs	r3, r2
 8010392:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801039a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801039c:	4413      	add	r3, r2
 801039e:	b29a      	uxth	r2, r3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d309      	bcc.n	80103be <tcp_receive+0x2c6>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80103b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80103b2:	4413      	add	r3, r2
 80103b4:	b29a      	uxth	r2, r3
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80103bc:	e04e      	b.n	801045c <tcp_receive+0x364>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80103c8:	e048      	b.n	801045c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80103d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80103d2:	4413      	add	r3, r2
 80103d4:	b29a      	uxth	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80103dc:	429a      	cmp	r2, r3
 80103de:	d309      	bcc.n	80103f4 <tcp_receive+0x2fc>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80103e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80103e8:	4413      	add	r3, r2
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80103f2:	e004      	b.n	80103fe <tcp_receive+0x306>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801040a:	429a      	cmp	r2, r3
 801040c:	d326      	bcc.n	801045c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801041a:	1ad3      	subs	r3, r2, r3
 801041c:	b29a      	uxth	r2, r3
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801042e:	4413      	add	r3, r2
 8010430:	b29a      	uxth	r2, r3
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010438:	429a      	cmp	r2, r3
 801043a:	d30a      	bcc.n	8010452 <tcp_receive+0x35a>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010446:	4413      	add	r3, r2
 8010448:	b29a      	uxth	r2, r3
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010450:	e004      	b.n	801045c <tcp_receive+0x364>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010458:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010464:	4a98      	ldr	r2, [pc, #608]	; (80106c8 <tcp_receive+0x5d0>)
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f7ff fdca 	bl	8010000 <tcp_free_acked_segments>
 801046c:	4602      	mov	r2, r0
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801047a:	4a94      	ldr	r2, [pc, #592]	; (80106cc <tcp_receive+0x5d4>)
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7ff fdbf 	bl	8010000 <tcp_free_acked_segments>
 8010482:	4602      	mov	r2, r0
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801048c:	2b00      	cmp	r3, #0
 801048e:	d104      	bne.n	801049a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010496:	861a      	strh	r2, [r3, #48]	; 0x30
 8010498:	e002      	b.n	80104a0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2200      	movs	r2, #0
 801049e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2200      	movs	r2, #0
 80104a4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d103      	bne.n	80104b6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2200      	movs	r2, #0
 80104b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80104bc:	4b84      	ldr	r3, [pc, #528]	; (80106d0 <tcp_receive+0x5d8>)
 80104be:	881b      	ldrh	r3, [r3, #0]
 80104c0:	4413      	add	r3, r2
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	8b5b      	ldrh	r3, [r3, #26]
 80104ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d035      	beq.n	8010542 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d118      	bne.n	8010510 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d00c      	beq.n	8010500 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104ee:	68db      	ldr	r3, [r3, #12]
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7f8 fe0d 	bl	8009112 <lwip_htonl>
 80104f8:	4603      	mov	r3, r0
 80104fa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	dc20      	bgt.n	8010542 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	8b5b      	ldrh	r3, [r3, #26]
 8010504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010508:	b29a      	uxth	r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801050e:	e018      	b.n	8010542 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	4618      	mov	r0, r3
 801051e:	f7f8 fdf8 	bl	8009112 <lwip_htonl>
 8010522:	4603      	mov	r3, r0
 8010524:	1ae3      	subs	r3, r4, r3
 8010526:	2b00      	cmp	r3, #0
 8010528:	dc0b      	bgt.n	8010542 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	8b5b      	ldrh	r3, [r3, #26]
 801052e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010532:	b29a      	uxth	r2, r3
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010538:	e003      	b.n	8010542 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f001 ff76 	bl	801242c <tcp_send_empty_ack>
 8010540:	e000      	b.n	8010544 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010542:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010548:	2b00      	cmp	r3, #0
 801054a:	d05b      	beq.n	8010604 <tcp_receive+0x50c>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010550:	4b60      	ldr	r3, [pc, #384]	; (80106d4 <tcp_receive+0x5dc>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	2b00      	cmp	r3, #0
 8010558:	da54      	bge.n	8010604 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801055a:	4b5f      	ldr	r3, [pc, #380]	; (80106d8 <tcp_receive+0x5e0>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	b29a      	uxth	r2, r3
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010564:	b29b      	uxth	r3, r3
 8010566:	1ad3      	subs	r3, r2, r3
 8010568:	b29b      	uxth	r3, r3
 801056a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801056e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010578:	10db      	asrs	r3, r3, #3
 801057a:	b21b      	sxth	r3, r3
 801057c:	b29b      	uxth	r3, r3
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	b29b      	uxth	r3, r3
 8010582:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801058c:	b29a      	uxth	r2, r3
 801058e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010592:	4413      	add	r3, r2
 8010594:	b29b      	uxth	r3, r3
 8010596:	b21a      	sxth	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801059c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	da05      	bge.n	80105b0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80105a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80105a8:	425b      	negs	r3, r3
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80105b0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80105ba:	109b      	asrs	r3, r3, #2
 80105bc:	b21b      	sxth	r3, r3
 80105be:	b29b      	uxth	r3, r3
 80105c0:	1ad3      	subs	r3, r2, r3
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80105d4:	4413      	add	r3, r2
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	b21a      	sxth	r2, r3
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80105e4:	10db      	asrs	r3, r3, #3
 80105e6:	b21b      	sxth	r3, r3
 80105e8:	b29a      	uxth	r2, r3
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	4413      	add	r3, r2
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	b21a      	sxth	r2, r3
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2200      	movs	r2, #0
 8010602:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010604:	4b35      	ldr	r3, [pc, #212]	; (80106dc <tcp_receive+0x5e4>)
 8010606:	881b      	ldrh	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	f000 84e2 	beq.w	8010fd2 <tcp_receive+0xeda>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	7d1b      	ldrb	r3, [r3, #20]
 8010612:	2b06      	cmp	r3, #6
 8010614:	f200 84dd 	bhi.w	8010fd2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801061c:	4b30      	ldr	r3, [pc, #192]	; (80106e0 <tcp_receive+0x5e8>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	3b01      	subs	r3, #1
 8010624:	2b00      	cmp	r3, #0
 8010626:	f2c0 808f 	blt.w	8010748 <tcp_receive+0x650>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801062e:	4b2b      	ldr	r3, [pc, #172]	; (80106dc <tcp_receive+0x5e4>)
 8010630:	881b      	ldrh	r3, [r3, #0]
 8010632:	4619      	mov	r1, r3
 8010634:	4b2a      	ldr	r3, [pc, #168]	; (80106e0 <tcp_receive+0x5e8>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	440b      	add	r3, r1
 801063a:	1ad3      	subs	r3, r2, r3
 801063c:	3301      	adds	r3, #1
 801063e:	2b00      	cmp	r3, #0
 8010640:	f300 8082 	bgt.w	8010748 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010644:	4b27      	ldr	r3, [pc, #156]	; (80106e4 <tcp_receive+0x5ec>)
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801064e:	4b24      	ldr	r3, [pc, #144]	; (80106e0 <tcp_receive+0x5e8>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	1ad3      	subs	r3, r2, r3
 8010654:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010656:	4b23      	ldr	r3, [pc, #140]	; (80106e4 <tcp_receive+0x5ec>)
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d106      	bne.n	801066c <tcp_receive+0x574>
 801065e:	4b22      	ldr	r3, [pc, #136]	; (80106e8 <tcp_receive+0x5f0>)
 8010660:	f240 5294 	movw	r2, #1428	; 0x594
 8010664:	4921      	ldr	r1, [pc, #132]	; (80106ec <tcp_receive+0x5f4>)
 8010666:	4822      	ldr	r0, [pc, #136]	; (80106f0 <tcp_receive+0x5f8>)
 8010668:	f002 fb9e 	bl	8012da8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010672:	4293      	cmp	r3, r2
 8010674:	d906      	bls.n	8010684 <tcp_receive+0x58c>
 8010676:	4b1c      	ldr	r3, [pc, #112]	; (80106e8 <tcp_receive+0x5f0>)
 8010678:	f240 5295 	movw	r2, #1429	; 0x595
 801067c:	491d      	ldr	r1, [pc, #116]	; (80106f4 <tcp_receive+0x5fc>)
 801067e:	481c      	ldr	r0, [pc, #112]	; (80106f0 <tcp_receive+0x5f8>)
 8010680:	f002 fb92 	bl	8012da8 <iprintf>
      off = (u16_t)off32;
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801068a:	4b16      	ldr	r3, [pc, #88]	; (80106e4 <tcp_receive+0x5ec>)
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	891b      	ldrh	r3, [r3, #8]
 8010690:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010694:	429a      	cmp	r2, r3
 8010696:	d906      	bls.n	80106a6 <tcp_receive+0x5ae>
 8010698:	4b13      	ldr	r3, [pc, #76]	; (80106e8 <tcp_receive+0x5f0>)
 801069a:	f240 5297 	movw	r2, #1431	; 0x597
 801069e:	4916      	ldr	r1, [pc, #88]	; (80106f8 <tcp_receive+0x600>)
 80106a0:	4813      	ldr	r0, [pc, #76]	; (80106f0 <tcp_receive+0x5f8>)
 80106a2:	f002 fb81 	bl	8012da8 <iprintf>
      inseg.len -= off;
 80106a6:	4b0f      	ldr	r3, [pc, #60]	; (80106e4 <tcp_receive+0x5ec>)
 80106a8:	891a      	ldrh	r2, [r3, #8]
 80106aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106ae:	1ad3      	subs	r3, r2, r3
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	4b0c      	ldr	r3, [pc, #48]	; (80106e4 <tcp_receive+0x5ec>)
 80106b4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80106b6:	4b0b      	ldr	r3, [pc, #44]	; (80106e4 <tcp_receive+0x5ec>)
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	891a      	ldrh	r2, [r3, #8]
 80106bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80106c4:	e02a      	b.n	801071c <tcp_receive+0x624>
 80106c6:	bf00      	nop
 80106c8:	08015d4c 	.word	0x08015d4c
 80106cc:	08015d54 	.word	0x08015d54
 80106d0:	240081c0 	.word	0x240081c0
 80106d4:	240081bc 	.word	0x240081bc
 80106d8:	24008180 	.word	0x24008180
 80106dc:	240081c2 	.word	0x240081c2
 80106e0:	240081b8 	.word	0x240081b8
 80106e4:	24008198 	.word	0x24008198
 80106e8:	080159c4 	.word	0x080159c4
 80106ec:	08015d5c 	.word	0x08015d5c
 80106f0:	08015a30 	.word	0x08015a30
 80106f4:	08015d6c 	.word	0x08015d6c
 80106f8:	08015d7c 	.word	0x08015d7c
        off -= p->len;
 80106fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106fe:	895b      	ldrh	r3, [r3, #10]
 8010700:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010704:	1ad3      	subs	r3, r2, r3
 8010706:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801070a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801070c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801070e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010712:	2200      	movs	r2, #0
 8010714:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801071c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801071e:	895b      	ldrh	r3, [r3, #10]
 8010720:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010724:	429a      	cmp	r2, r3
 8010726:	d8e9      	bhi.n	80106fc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010728:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801072c:	4619      	mov	r1, r3
 801072e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010730:	f7fc fb74 	bl	800ce1c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010738:	4a91      	ldr	r2, [pc, #580]	; (8010980 <tcp_receive+0x888>)
 801073a:	6013      	str	r3, [r2, #0]
 801073c:	4b91      	ldr	r3, [pc, #580]	; (8010984 <tcp_receive+0x88c>)
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	4a8f      	ldr	r2, [pc, #572]	; (8010980 <tcp_receive+0x888>)
 8010742:	6812      	ldr	r2, [r2, #0]
 8010744:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010746:	e00d      	b.n	8010764 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010748:	4b8d      	ldr	r3, [pc, #564]	; (8010980 <tcp_receive+0x888>)
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	da06      	bge.n	8010764 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	8b5b      	ldrh	r3, [r3, #26]
 801075a:	f043 0302 	orr.w	r3, r3, #2
 801075e:	b29a      	uxth	r2, r3
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010764:	4b86      	ldr	r3, [pc, #536]	; (8010980 <tcp_receive+0x888>)
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801076c:	1ad3      	subs	r3, r2, r3
 801076e:	2b00      	cmp	r3, #0
 8010770:	f2c0 842a 	blt.w	8010fc8 <tcp_receive+0xed0>
 8010774:	4b82      	ldr	r3, [pc, #520]	; (8010980 <tcp_receive+0x888>)
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801077c:	6879      	ldr	r1, [r7, #4]
 801077e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010780:	440b      	add	r3, r1
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	3301      	adds	r3, #1
 8010786:	2b00      	cmp	r3, #0
 8010788:	f300 841e 	bgt.w	8010fc8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010790:	4b7b      	ldr	r3, [pc, #492]	; (8010980 <tcp_receive+0x888>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	429a      	cmp	r2, r3
 8010796:	f040 829a 	bne.w	8010cce <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801079a:	4b7a      	ldr	r3, [pc, #488]	; (8010984 <tcp_receive+0x88c>)
 801079c:	891c      	ldrh	r4, [r3, #8]
 801079e:	4b79      	ldr	r3, [pc, #484]	; (8010984 <tcp_receive+0x88c>)
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	899b      	ldrh	r3, [r3, #12]
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7f8 fc9e 	bl	80090e8 <lwip_htons>
 80107ac:	4603      	mov	r3, r0
 80107ae:	b2db      	uxtb	r3, r3
 80107b0:	f003 0303 	and.w	r3, r3, #3
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d001      	beq.n	80107bc <tcp_receive+0x6c4>
 80107b8:	2301      	movs	r3, #1
 80107ba:	e000      	b.n	80107be <tcp_receive+0x6c6>
 80107bc:	2300      	movs	r3, #0
 80107be:	4423      	add	r3, r4
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	4b71      	ldr	r3, [pc, #452]	; (8010988 <tcp_receive+0x890>)
 80107c4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80107ca:	4b6f      	ldr	r3, [pc, #444]	; (8010988 <tcp_receive+0x890>)
 80107cc:	881b      	ldrh	r3, [r3, #0]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d275      	bcs.n	80108be <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80107d2:	4b6c      	ldr	r3, [pc, #432]	; (8010984 <tcp_receive+0x88c>)
 80107d4:	68db      	ldr	r3, [r3, #12]
 80107d6:	899b      	ldrh	r3, [r3, #12]
 80107d8:	b29b      	uxth	r3, r3
 80107da:	4618      	mov	r0, r3
 80107dc:	f7f8 fc84 	bl	80090e8 <lwip_htons>
 80107e0:	4603      	mov	r3, r0
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	f003 0301 	and.w	r3, r3, #1
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d01f      	beq.n	801082c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80107ec:	4b65      	ldr	r3, [pc, #404]	; (8010984 <tcp_receive+0x88c>)
 80107ee:	68db      	ldr	r3, [r3, #12]
 80107f0:	899b      	ldrh	r3, [r3, #12]
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	b21b      	sxth	r3, r3
 80107f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80107fa:	b21c      	sxth	r4, r3
 80107fc:	4b61      	ldr	r3, [pc, #388]	; (8010984 <tcp_receive+0x88c>)
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	899b      	ldrh	r3, [r3, #12]
 8010802:	b29b      	uxth	r3, r3
 8010804:	4618      	mov	r0, r3
 8010806:	f7f8 fc6f 	bl	80090e8 <lwip_htons>
 801080a:	4603      	mov	r3, r0
 801080c:	b2db      	uxtb	r3, r3
 801080e:	b29b      	uxth	r3, r3
 8010810:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010814:	b29b      	uxth	r3, r3
 8010816:	4618      	mov	r0, r3
 8010818:	f7f8 fc66 	bl	80090e8 <lwip_htons>
 801081c:	4603      	mov	r3, r0
 801081e:	b21b      	sxth	r3, r3
 8010820:	4323      	orrs	r3, r4
 8010822:	b21a      	sxth	r2, r3
 8010824:	4b57      	ldr	r3, [pc, #348]	; (8010984 <tcp_receive+0x88c>)
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	b292      	uxth	r2, r2
 801082a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010830:	4b54      	ldr	r3, [pc, #336]	; (8010984 <tcp_receive+0x88c>)
 8010832:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010834:	4b53      	ldr	r3, [pc, #332]	; (8010984 <tcp_receive+0x88c>)
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	899b      	ldrh	r3, [r3, #12]
 801083a:	b29b      	uxth	r3, r3
 801083c:	4618      	mov	r0, r3
 801083e:	f7f8 fc53 	bl	80090e8 <lwip_htons>
 8010842:	4603      	mov	r3, r0
 8010844:	b2db      	uxtb	r3, r3
 8010846:	f003 0302 	and.w	r3, r3, #2
 801084a:	2b00      	cmp	r3, #0
 801084c:	d005      	beq.n	801085a <tcp_receive+0x762>
            inseg.len -= 1;
 801084e:	4b4d      	ldr	r3, [pc, #308]	; (8010984 <tcp_receive+0x88c>)
 8010850:	891b      	ldrh	r3, [r3, #8]
 8010852:	3b01      	subs	r3, #1
 8010854:	b29a      	uxth	r2, r3
 8010856:	4b4b      	ldr	r3, [pc, #300]	; (8010984 <tcp_receive+0x88c>)
 8010858:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801085a:	4b4a      	ldr	r3, [pc, #296]	; (8010984 <tcp_receive+0x88c>)
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	4a49      	ldr	r2, [pc, #292]	; (8010984 <tcp_receive+0x88c>)
 8010860:	8912      	ldrh	r2, [r2, #8]
 8010862:	4611      	mov	r1, r2
 8010864:	4618      	mov	r0, r3
 8010866:	f7fc f9d9 	bl	800cc1c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801086a:	4b46      	ldr	r3, [pc, #280]	; (8010984 <tcp_receive+0x88c>)
 801086c:	891c      	ldrh	r4, [r3, #8]
 801086e:	4b45      	ldr	r3, [pc, #276]	; (8010984 <tcp_receive+0x88c>)
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	899b      	ldrh	r3, [r3, #12]
 8010874:	b29b      	uxth	r3, r3
 8010876:	4618      	mov	r0, r3
 8010878:	f7f8 fc36 	bl	80090e8 <lwip_htons>
 801087c:	4603      	mov	r3, r0
 801087e:	b2db      	uxtb	r3, r3
 8010880:	f003 0303 	and.w	r3, r3, #3
 8010884:	2b00      	cmp	r3, #0
 8010886:	d001      	beq.n	801088c <tcp_receive+0x794>
 8010888:	2301      	movs	r3, #1
 801088a:	e000      	b.n	801088e <tcp_receive+0x796>
 801088c:	2300      	movs	r3, #0
 801088e:	4423      	add	r3, r4
 8010890:	b29a      	uxth	r2, r3
 8010892:	4b3d      	ldr	r3, [pc, #244]	; (8010988 <tcp_receive+0x890>)
 8010894:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010896:	4b3c      	ldr	r3, [pc, #240]	; (8010988 <tcp_receive+0x890>)
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	461a      	mov	r2, r3
 801089c:	4b38      	ldr	r3, [pc, #224]	; (8010980 <tcp_receive+0x888>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	441a      	add	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108a6:	6879      	ldr	r1, [r7, #4]
 80108a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80108aa:	440b      	add	r3, r1
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d006      	beq.n	80108be <tcp_receive+0x7c6>
 80108b0:	4b36      	ldr	r3, [pc, #216]	; (801098c <tcp_receive+0x894>)
 80108b2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80108b6:	4936      	ldr	r1, [pc, #216]	; (8010990 <tcp_receive+0x898>)
 80108b8:	4836      	ldr	r0, [pc, #216]	; (8010994 <tcp_receive+0x89c>)
 80108ba:	f002 fa75 	bl	8012da8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f000 80e7 	beq.w	8010a96 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80108c8:	4b2e      	ldr	r3, [pc, #184]	; (8010984 <tcp_receive+0x88c>)
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	899b      	ldrh	r3, [r3, #12]
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7f8 fc09 	bl	80090e8 <lwip_htons>
 80108d6:	4603      	mov	r3, r0
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	f003 0301 	and.w	r3, r3, #1
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d010      	beq.n	8010904 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80108e2:	e00a      	b.n	80108fa <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108e8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108ee:	681a      	ldr	r2, [r3, #0]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80108f4:	68f8      	ldr	r0, [r7, #12]
 80108f6:	f7fd fd8a 	bl	800e40e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1f0      	bne.n	80108e4 <tcp_receive+0x7ec>
 8010902:	e0c8      	b.n	8010a96 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010908:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801090a:	e052      	b.n	80109b2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801090c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	899b      	ldrh	r3, [r3, #12]
 8010912:	b29b      	uxth	r3, r3
 8010914:	4618      	mov	r0, r3
 8010916:	f7f8 fbe7 	bl	80090e8 <lwip_htons>
 801091a:	4603      	mov	r3, r0
 801091c:	b2db      	uxtb	r3, r3
 801091e:	f003 0301 	and.w	r3, r3, #1
 8010922:	2b00      	cmp	r3, #0
 8010924:	d03d      	beq.n	80109a2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010926:	4b17      	ldr	r3, [pc, #92]	; (8010984 <tcp_receive+0x88c>)
 8010928:	68db      	ldr	r3, [r3, #12]
 801092a:	899b      	ldrh	r3, [r3, #12]
 801092c:	b29b      	uxth	r3, r3
 801092e:	4618      	mov	r0, r3
 8010930:	f7f8 fbda 	bl	80090e8 <lwip_htons>
 8010934:	4603      	mov	r3, r0
 8010936:	b2db      	uxtb	r3, r3
 8010938:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801093c:	2b00      	cmp	r3, #0
 801093e:	d130      	bne.n	80109a2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010940:	4b10      	ldr	r3, [pc, #64]	; (8010984 <tcp_receive+0x88c>)
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	899b      	ldrh	r3, [r3, #12]
 8010946:	b29c      	uxth	r4, r3
 8010948:	2001      	movs	r0, #1
 801094a:	f7f8 fbcd 	bl	80090e8 <lwip_htons>
 801094e:	4603      	mov	r3, r0
 8010950:	461a      	mov	r2, r3
 8010952:	4b0c      	ldr	r3, [pc, #48]	; (8010984 <tcp_receive+0x88c>)
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	4322      	orrs	r2, r4
 8010958:	b292      	uxth	r2, r2
 801095a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801095c:	4b09      	ldr	r3, [pc, #36]	; (8010984 <tcp_receive+0x88c>)
 801095e:	891c      	ldrh	r4, [r3, #8]
 8010960:	4b08      	ldr	r3, [pc, #32]	; (8010984 <tcp_receive+0x88c>)
 8010962:	68db      	ldr	r3, [r3, #12]
 8010964:	899b      	ldrh	r3, [r3, #12]
 8010966:	b29b      	uxth	r3, r3
 8010968:	4618      	mov	r0, r3
 801096a:	f7f8 fbbd 	bl	80090e8 <lwip_htons>
 801096e:	4603      	mov	r3, r0
 8010970:	b2db      	uxtb	r3, r3
 8010972:	f003 0303 	and.w	r3, r3, #3
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00e      	beq.n	8010998 <tcp_receive+0x8a0>
 801097a:	2301      	movs	r3, #1
 801097c:	e00d      	b.n	801099a <tcp_receive+0x8a2>
 801097e:	bf00      	nop
 8010980:	240081b8 	.word	0x240081b8
 8010984:	24008198 	.word	0x24008198
 8010988:	240081c2 	.word	0x240081c2
 801098c:	080159c4 	.word	0x080159c4
 8010990:	08015d8c 	.word	0x08015d8c
 8010994:	08015a30 	.word	0x08015a30
 8010998:	2300      	movs	r3, #0
 801099a:	4423      	add	r3, r4
 801099c:	b29a      	uxth	r2, r3
 801099e:	4b98      	ldr	r3, [pc, #608]	; (8010c00 <tcp_receive+0xb08>)
 80109a0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80109a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80109a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80109ac:	6938      	ldr	r0, [r7, #16]
 80109ae:	f7fd fd2e 	bl	800e40e <tcp_seg_free>
            while (next &&
 80109b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d00e      	beq.n	80109d6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80109b8:	4b91      	ldr	r3, [pc, #580]	; (8010c00 <tcp_receive+0xb08>)
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	461a      	mov	r2, r3
 80109be:	4b91      	ldr	r3, [pc, #580]	; (8010c04 <tcp_receive+0xb0c>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	441a      	add	r2, r3
 80109c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109c6:	68db      	ldr	r3, [r3, #12]
 80109c8:	685b      	ldr	r3, [r3, #4]
 80109ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109cc:	8909      	ldrh	r1, [r1, #8]
 80109ce:	440b      	add	r3, r1
 80109d0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	da9a      	bge.n	801090c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80109d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d059      	beq.n	8010a90 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80109dc:	4b88      	ldr	r3, [pc, #544]	; (8010c00 <tcp_receive+0xb08>)
 80109de:	881b      	ldrh	r3, [r3, #0]
 80109e0:	461a      	mov	r2, r3
 80109e2:	4b88      	ldr	r3, [pc, #544]	; (8010c04 <tcp_receive+0xb0c>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	441a      	add	r2, r3
 80109e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	1ad3      	subs	r3, r2, r3
            if (next &&
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	dd4d      	ble.n	8010a90 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80109f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	b29a      	uxth	r2, r3
 80109fc:	4b81      	ldr	r3, [pc, #516]	; (8010c04 <tcp_receive+0xb0c>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	1ad3      	subs	r3, r2, r3
 8010a04:	b29a      	uxth	r2, r3
 8010a06:	4b80      	ldr	r3, [pc, #512]	; (8010c08 <tcp_receive+0xb10>)
 8010a08:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010a0a:	4b7f      	ldr	r3, [pc, #508]	; (8010c08 <tcp_receive+0xb10>)
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	899b      	ldrh	r3, [r3, #12]
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7f8 fb68 	bl	80090e8 <lwip_htons>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	f003 0302 	and.w	r3, r3, #2
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d005      	beq.n	8010a30 <tcp_receive+0x938>
                inseg.len -= 1;
 8010a24:	4b78      	ldr	r3, [pc, #480]	; (8010c08 <tcp_receive+0xb10>)
 8010a26:	891b      	ldrh	r3, [r3, #8]
 8010a28:	3b01      	subs	r3, #1
 8010a2a:	b29a      	uxth	r2, r3
 8010a2c:	4b76      	ldr	r3, [pc, #472]	; (8010c08 <tcp_receive+0xb10>)
 8010a2e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010a30:	4b75      	ldr	r3, [pc, #468]	; (8010c08 <tcp_receive+0xb10>)
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	4a74      	ldr	r2, [pc, #464]	; (8010c08 <tcp_receive+0xb10>)
 8010a36:	8912      	ldrh	r2, [r2, #8]
 8010a38:	4611      	mov	r1, r2
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fc f8ee 	bl	800cc1c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010a40:	4b71      	ldr	r3, [pc, #452]	; (8010c08 <tcp_receive+0xb10>)
 8010a42:	891c      	ldrh	r4, [r3, #8]
 8010a44:	4b70      	ldr	r3, [pc, #448]	; (8010c08 <tcp_receive+0xb10>)
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	899b      	ldrh	r3, [r3, #12]
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7f8 fb4b 	bl	80090e8 <lwip_htons>
 8010a52:	4603      	mov	r3, r0
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	f003 0303 	and.w	r3, r3, #3
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d001      	beq.n	8010a62 <tcp_receive+0x96a>
 8010a5e:	2301      	movs	r3, #1
 8010a60:	e000      	b.n	8010a64 <tcp_receive+0x96c>
 8010a62:	2300      	movs	r3, #0
 8010a64:	4423      	add	r3, r4
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	4b65      	ldr	r3, [pc, #404]	; (8010c00 <tcp_receive+0xb08>)
 8010a6a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010a6c:	4b64      	ldr	r3, [pc, #400]	; (8010c00 <tcp_receive+0xb08>)
 8010a6e:	881b      	ldrh	r3, [r3, #0]
 8010a70:	461a      	mov	r2, r3
 8010a72:	4b64      	ldr	r3, [pc, #400]	; (8010c04 <tcp_receive+0xb0c>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	441a      	add	r2, r3
 8010a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a7a:	68db      	ldr	r3, [r3, #12]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d006      	beq.n	8010a90 <tcp_receive+0x998>
 8010a82:	4b62      	ldr	r3, [pc, #392]	; (8010c0c <tcp_receive+0xb14>)
 8010a84:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010a88:	4961      	ldr	r1, [pc, #388]	; (8010c10 <tcp_receive+0xb18>)
 8010a8a:	4862      	ldr	r0, [pc, #392]	; (8010c14 <tcp_receive+0xb1c>)
 8010a8c:	f002 f98c 	bl	8012da8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a94:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010a96:	4b5a      	ldr	r3, [pc, #360]	; (8010c00 <tcp_receive+0xb08>)
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	4b59      	ldr	r3, [pc, #356]	; (8010c04 <tcp_receive+0xb0c>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	441a      	add	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010aaa:	4b55      	ldr	r3, [pc, #340]	; (8010c00 <tcp_receive+0xb08>)
 8010aac:	881b      	ldrh	r3, [r3, #0]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d206      	bcs.n	8010ac0 <tcp_receive+0x9c8>
 8010ab2:	4b56      	ldr	r3, [pc, #344]	; (8010c0c <tcp_receive+0xb14>)
 8010ab4:	f240 6207 	movw	r2, #1543	; 0x607
 8010ab8:	4957      	ldr	r1, [pc, #348]	; (8010c18 <tcp_receive+0xb20>)
 8010aba:	4856      	ldr	r0, [pc, #344]	; (8010c14 <tcp_receive+0xb1c>)
 8010abc:	f002 f974 	bl	8012da8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ac4:	4b4e      	ldr	r3, [pc, #312]	; (8010c00 <tcp_receive+0xb08>)
 8010ac6:	881b      	ldrh	r3, [r3, #0]
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	b29a      	uxth	r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f7fc ffbd 	bl	800da50 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010ad6:	4b4c      	ldr	r3, [pc, #304]	; (8010c08 <tcp_receive+0xb10>)
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	891b      	ldrh	r3, [r3, #8]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d006      	beq.n	8010aee <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010ae0:	4b49      	ldr	r3, [pc, #292]	; (8010c08 <tcp_receive+0xb10>)
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	4a4d      	ldr	r2, [pc, #308]	; (8010c1c <tcp_receive+0xb24>)
 8010ae6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010ae8:	4b47      	ldr	r3, [pc, #284]	; (8010c08 <tcp_receive+0xb10>)
 8010aea:	2200      	movs	r2, #0
 8010aec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010aee:	4b46      	ldr	r3, [pc, #280]	; (8010c08 <tcp_receive+0xb10>)
 8010af0:	68db      	ldr	r3, [r3, #12]
 8010af2:	899b      	ldrh	r3, [r3, #12]
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7f8 faf6 	bl	80090e8 <lwip_htons>
 8010afc:	4603      	mov	r3, r0
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	f003 0301 	and.w	r3, r3, #1
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f000 80b8 	beq.w	8010c7a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010b0a:	4b45      	ldr	r3, [pc, #276]	; (8010c20 <tcp_receive+0xb28>)
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	f043 0320 	orr.w	r3, r3, #32
 8010b12:	b2da      	uxtb	r2, r3
 8010b14:	4b42      	ldr	r3, [pc, #264]	; (8010c20 <tcp_receive+0xb28>)
 8010b16:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010b18:	e0af      	b.n	8010c7a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b1e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	4a36      	ldr	r2, [pc, #216]	; (8010c04 <tcp_receive+0xb0c>)
 8010b2a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	891b      	ldrh	r3, [r3, #8]
 8010b30:	461c      	mov	r4, r3
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	68db      	ldr	r3, [r3, #12]
 8010b36:	899b      	ldrh	r3, [r3, #12]
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7f8 fad4 	bl	80090e8 <lwip_htons>
 8010b40:	4603      	mov	r3, r0
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	f003 0303 	and.w	r3, r3, #3
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d001      	beq.n	8010b50 <tcp_receive+0xa58>
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	e000      	b.n	8010b52 <tcp_receive+0xa5a>
 8010b50:	2300      	movs	r3, #0
 8010b52:	191a      	adds	r2, r3, r4
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b58:	441a      	add	r2, r3
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b62:	461c      	mov	r4, r3
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	891b      	ldrh	r3, [r3, #8]
 8010b68:	461d      	mov	r5, r3
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	68db      	ldr	r3, [r3, #12]
 8010b6e:	899b      	ldrh	r3, [r3, #12]
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7f8 fab8 	bl	80090e8 <lwip_htons>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	f003 0303 	and.w	r3, r3, #3
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d001      	beq.n	8010b88 <tcp_receive+0xa90>
 8010b84:	2301      	movs	r3, #1
 8010b86:	e000      	b.n	8010b8a <tcp_receive+0xa92>
 8010b88:	2300      	movs	r3, #0
 8010b8a:	442b      	add	r3, r5
 8010b8c:	429c      	cmp	r4, r3
 8010b8e:	d206      	bcs.n	8010b9e <tcp_receive+0xaa6>
 8010b90:	4b1e      	ldr	r3, [pc, #120]	; (8010c0c <tcp_receive+0xb14>)
 8010b92:	f240 622b 	movw	r2, #1579	; 0x62b
 8010b96:	4923      	ldr	r1, [pc, #140]	; (8010c24 <tcp_receive+0xb2c>)
 8010b98:	481e      	ldr	r0, [pc, #120]	; (8010c14 <tcp_receive+0xb1c>)
 8010b9a:	f002 f905 	bl	8012da8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	891b      	ldrh	r3, [r3, #8]
 8010ba2:	461c      	mov	r4, r3
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	899b      	ldrh	r3, [r3, #12]
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7f8 fa9b 	bl	80090e8 <lwip_htons>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	f003 0303 	and.w	r3, r3, #3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d001      	beq.n	8010bc2 <tcp_receive+0xaca>
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e000      	b.n	8010bc4 <tcp_receive+0xacc>
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	1919      	adds	r1, r3, r4
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010bca:	b28b      	uxth	r3, r1
 8010bcc:	1ad3      	subs	r3, r2, r3
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7fc ff3b 	bl	800da50 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	891b      	ldrh	r3, [r3, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d028      	beq.n	8010c36 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010be4:	4b0d      	ldr	r3, [pc, #52]	; (8010c1c <tcp_receive+0xb24>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d01d      	beq.n	8010c28 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010bec:	4b0b      	ldr	r3, [pc, #44]	; (8010c1c <tcp_receive+0xb24>)
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	4610      	mov	r0, r2
 8010bf8:	f7fc fa58 	bl	800d0ac <pbuf_cat>
 8010bfc:	e018      	b.n	8010c30 <tcp_receive+0xb38>
 8010bfe:	bf00      	nop
 8010c00:	240081c2 	.word	0x240081c2
 8010c04:	240081b8 	.word	0x240081b8
 8010c08:	24008198 	.word	0x24008198
 8010c0c:	080159c4 	.word	0x080159c4
 8010c10:	08015dc4 	.word	0x08015dc4
 8010c14:	08015a30 	.word	0x08015a30
 8010c18:	08015e00 	.word	0x08015e00
 8010c1c:	240081c8 	.word	0x240081c8
 8010c20:	240081c5 	.word	0x240081c5
 8010c24:	08015e20 	.word	0x08015e20
            } else {
              recv_data = cseg->p;
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	4a70      	ldr	r2, [pc, #448]	; (8010df0 <tcp_receive+0xcf8>)
 8010c2e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	2200      	movs	r2, #0
 8010c34:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	899b      	ldrh	r3, [r3, #12]
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7f8 fa52 	bl	80090e8 <lwip_htons>
 8010c44:	4603      	mov	r3, r0
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	f003 0301 	and.w	r3, r3, #1
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00d      	beq.n	8010c6c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010c50:	4b68      	ldr	r3, [pc, #416]	; (8010df4 <tcp_receive+0xcfc>)
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	f043 0320 	orr.w	r3, r3, #32
 8010c58:	b2da      	uxtb	r2, r3
 8010c5a:	4b66      	ldr	r3, [pc, #408]	; (8010df4 <tcp_receive+0xcfc>)
 8010c5c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	7d1b      	ldrb	r3, [r3, #20]
 8010c62:	2b04      	cmp	r3, #4
 8010c64:	d102      	bne.n	8010c6c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2207      	movs	r2, #7
 8010c6a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	681a      	ldr	r2, [r3, #0]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010c74:	68b8      	ldr	r0, [r7, #8]
 8010c76:	f7fd fbca 	bl	800e40e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d008      	beq.n	8010c94 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c86:	68db      	ldr	r3, [r3, #12]
 8010c88:	685a      	ldr	r2, [r3, #4]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	f43f af43 	beq.w	8010b1a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	8b5b      	ldrh	r3, [r3, #26]
 8010c98:	f003 0301 	and.w	r3, r3, #1
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d00e      	beq.n	8010cbe <tcp_receive+0xbc6>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	8b5b      	ldrh	r3, [r3, #26]
 8010ca4:	f023 0301 	bic.w	r3, r3, #1
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	835a      	strh	r2, [r3, #26]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	8b5b      	ldrh	r3, [r3, #26]
 8010cb2:	f043 0302 	orr.w	r3, r3, #2
 8010cb6:	b29a      	uxth	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010cbc:	e188      	b.n	8010fd0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	8b5b      	ldrh	r3, [r3, #26]
 8010cc2:	f043 0301 	orr.w	r3, r3, #1
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010ccc:	e180      	b.n	8010fd0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d106      	bne.n	8010ce4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010cd6:	4848      	ldr	r0, [pc, #288]	; (8010df8 <tcp_receive+0xd00>)
 8010cd8:	f7fd fbb2 	bl	800e440 <tcp_seg_copy>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	675a      	str	r2, [r3, #116]	; 0x74
 8010ce2:	e16d      	b.n	8010fc0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8010cee:	e157      	b.n	8010fa0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	685a      	ldr	r2, [r3, #4]
 8010cf6:	4b41      	ldr	r3, [pc, #260]	; (8010dfc <tcp_receive+0xd04>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d11d      	bne.n	8010d3a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010cfe:	4b3e      	ldr	r3, [pc, #248]	; (8010df8 <tcp_receive+0xd00>)
 8010d00:	891a      	ldrh	r2, [r3, #8]
 8010d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d04:	891b      	ldrh	r3, [r3, #8]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	f240 814f 	bls.w	8010faa <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d0c:	483a      	ldr	r0, [pc, #232]	; (8010df8 <tcp_receive+0xd00>)
 8010d0e:	f7fd fb97 	bl	800e440 <tcp_seg_copy>
 8010d12:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	f000 8149 	beq.w	8010fae <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d003      	beq.n	8010d2a <tcp_receive+0xc32>
                    prev->next = cseg;
 8010d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d24:	697a      	ldr	r2, [r7, #20]
 8010d26:	601a      	str	r2, [r3, #0]
 8010d28:	e002      	b.n	8010d30 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	697a      	ldr	r2, [r7, #20]
 8010d2e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010d30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d32:	6978      	ldr	r0, [r7, #20]
 8010d34:	f7ff f8dc 	bl	800fef0 <tcp_oos_insert_segment>
                }
                break;
 8010d38:	e139      	b.n	8010fae <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d117      	bne.n	8010d70 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010d40:	4b2e      	ldr	r3, [pc, #184]	; (8010dfc <tcp_receive+0xd04>)
 8010d42:	681a      	ldr	r2, [r3, #0]
 8010d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d46:	68db      	ldr	r3, [r3, #12]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	1ad3      	subs	r3, r2, r3
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	da57      	bge.n	8010e00 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d50:	4829      	ldr	r0, [pc, #164]	; (8010df8 <tcp_receive+0xd00>)
 8010d52:	f7fd fb75 	bl	800e440 <tcp_seg_copy>
 8010d56:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	f000 8129 	beq.w	8010fb2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	69ba      	ldr	r2, [r7, #24]
 8010d64:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010d66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d68:	69b8      	ldr	r0, [r7, #24]
 8010d6a:	f7ff f8c1 	bl	800fef0 <tcp_oos_insert_segment>
                  }
                  break;
 8010d6e:	e120      	b.n	8010fb2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010d70:	4b22      	ldr	r3, [pc, #136]	; (8010dfc <tcp_receive+0xd04>)
 8010d72:	681a      	ldr	r2, [r3, #0]
 8010d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	1ad3      	subs	r3, r2, r3
 8010d7c:	3b01      	subs	r3, #1
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	db3e      	blt.n	8010e00 <tcp_receive+0xd08>
 8010d82:	4b1e      	ldr	r3, [pc, #120]	; (8010dfc <tcp_receive+0xd04>)
 8010d84:	681a      	ldr	r2, [r3, #0]
 8010d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	1ad3      	subs	r3, r2, r3
 8010d8e:	3301      	adds	r3, #1
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	dc35      	bgt.n	8010e00 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d94:	4818      	ldr	r0, [pc, #96]	; (8010df8 <tcp_receive+0xd00>)
 8010d96:	f7fd fb53 	bl	800e440 <tcp_seg_copy>
 8010d9a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f000 8109 	beq.w	8010fb6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010dac:	8912      	ldrh	r2, [r2, #8]
 8010dae:	441a      	add	r2, r3
 8010db0:	4b12      	ldr	r3, [pc, #72]	; (8010dfc <tcp_receive+0xd04>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	1ad3      	subs	r3, r2, r3
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	dd12      	ble.n	8010de0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010dba:	4b10      	ldr	r3, [pc, #64]	; (8010dfc <tcp_receive+0xd04>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	b29a      	uxth	r2, r3
 8010dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	1ad3      	subs	r3, r2, r3
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd2:	685a      	ldr	r2, [r3, #4]
 8010dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd6:	891b      	ldrh	r3, [r3, #8]
 8010dd8:	4619      	mov	r1, r3
 8010dda:	4610      	mov	r0, r2
 8010ddc:	f7fb ff1e 	bl	800cc1c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010de2:	69fa      	ldr	r2, [r7, #28]
 8010de4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010de8:	69f8      	ldr	r0, [r7, #28]
 8010dea:	f7ff f881 	bl	800fef0 <tcp_oos_insert_segment>
                  }
                  break;
 8010dee:	e0e2      	b.n	8010fb6 <tcp_receive+0xebe>
 8010df0:	240081c8 	.word	0x240081c8
 8010df4:	240081c5 	.word	0x240081c5
 8010df8:	24008198 	.word	0x24008198
 8010dfc:	240081b8 	.word	0x240081b8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e02:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	f040 80c6 	bne.w	8010f9a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010e0e:	4b80      	ldr	r3, [pc, #512]	; (8011010 <tcp_receive+0xf18>)
 8010e10:	681a      	ldr	r2, [r3, #0]
 8010e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	f340 80bd 	ble.w	8010f9a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	899b      	ldrh	r3, [r3, #12]
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7f8 f95d 	bl	80090e8 <lwip_htons>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	b2db      	uxtb	r3, r3
 8010e32:	f003 0301 	and.w	r3, r3, #1
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	f040 80bf 	bne.w	8010fba <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010e3c:	4875      	ldr	r0, [pc, #468]	; (8011014 <tcp_receive+0xf1c>)
 8010e3e:	f7fd faff 	bl	800e440 <tcp_seg_copy>
 8010e42:	4602      	mov	r2, r0
 8010e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e46:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	f000 80b6 	beq.w	8010fbe <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e5a:	8912      	ldrh	r2, [r2, #8]
 8010e5c:	441a      	add	r2, r3
 8010e5e:	4b6c      	ldr	r3, [pc, #432]	; (8011010 <tcp_receive+0xf18>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	1ad3      	subs	r3, r2, r3
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	dd12      	ble.n	8010e8e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010e68:	4b69      	ldr	r3, [pc, #420]	; (8011010 <tcp_receive+0xf18>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	b29a      	uxth	r2, r3
 8010e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	1ad3      	subs	r3, r2, r3
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e7c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e80:	685a      	ldr	r2, [r3, #4]
 8010e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e84:	891b      	ldrh	r3, [r3, #8]
 8010e86:	4619      	mov	r1, r3
 8010e88:	4610      	mov	r0, r2
 8010e8a:	f7fb fec7 	bl	800cc1c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010e8e:	4b62      	ldr	r3, [pc, #392]	; (8011018 <tcp_receive+0xf20>)
 8010e90:	881b      	ldrh	r3, [r3, #0]
 8010e92:	461a      	mov	r2, r3
 8010e94:	4b5e      	ldr	r3, [pc, #376]	; (8011010 <tcp_receive+0xf18>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	441a      	add	r2, r3
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e9e:	6879      	ldr	r1, [r7, #4]
 8010ea0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ea2:	440b      	add	r3, r1
 8010ea4:	1ad3      	subs	r3, r2, r3
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f340 8089 	ble.w	8010fbe <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	899b      	ldrh	r3, [r3, #12]
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7f8 f916 	bl	80090e8 <lwip_htons>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	b2db      	uxtb	r3, r3
 8010ec0:	f003 0301 	and.w	r3, r3, #1
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d022      	beq.n	8010f0e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	899b      	ldrh	r3, [r3, #12]
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	b21b      	sxth	r3, r3
 8010ed4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010ed8:	b21c      	sxth	r4, r3
 8010eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	899b      	ldrh	r3, [r3, #12]
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7f8 f8ff 	bl	80090e8 <lwip_htons>
 8010eea:	4603      	mov	r3, r0
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	b29b      	uxth	r3, r3
 8010ef0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7f8 f8f6 	bl	80090e8 <lwip_htons>
 8010efc:	4603      	mov	r3, r0
 8010efe:	b21b      	sxth	r3, r3
 8010f00:	4323      	orrs	r3, r4
 8010f02:	b21a      	sxth	r2, r3
 8010f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	b292      	uxth	r2, r2
 8010f0c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f12:	b29a      	uxth	r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f18:	4413      	add	r3, r2
 8010f1a:	b299      	uxth	r1, r3
 8010f1c:	4b3c      	ldr	r3, [pc, #240]	; (8011010 <tcp_receive+0xf18>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	1a8a      	subs	r2, r1, r2
 8010f28:	b292      	uxth	r2, r2
 8010f2a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	685a      	ldr	r2, [r3, #4]
 8010f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	891b      	ldrh	r3, [r3, #8]
 8010f38:	4619      	mov	r1, r3
 8010f3a:	4610      	mov	r0, r2
 8010f3c:	f7fb fe6e 	bl	800cc1c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	891c      	ldrh	r4, [r3, #8]
 8010f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	68db      	ldr	r3, [r3, #12]
 8010f4c:	899b      	ldrh	r3, [r3, #12]
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7f8 f8c9 	bl	80090e8 <lwip_htons>
 8010f56:	4603      	mov	r3, r0
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	f003 0303 	and.w	r3, r3, #3
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d001      	beq.n	8010f66 <tcp_receive+0xe6e>
 8010f62:	2301      	movs	r3, #1
 8010f64:	e000      	b.n	8010f68 <tcp_receive+0xe70>
 8010f66:	2300      	movs	r3, #0
 8010f68:	4423      	add	r3, r4
 8010f6a:	b29a      	uxth	r2, r3
 8010f6c:	4b2a      	ldr	r3, [pc, #168]	; (8011018 <tcp_receive+0xf20>)
 8010f6e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010f70:	4b29      	ldr	r3, [pc, #164]	; (8011018 <tcp_receive+0xf20>)
 8010f72:	881b      	ldrh	r3, [r3, #0]
 8010f74:	461a      	mov	r2, r3
 8010f76:	4b26      	ldr	r3, [pc, #152]	; (8011010 <tcp_receive+0xf18>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	441a      	add	r2, r3
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f80:	6879      	ldr	r1, [r7, #4]
 8010f82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f84:	440b      	add	r3, r1
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d019      	beq.n	8010fbe <tcp_receive+0xec6>
 8010f8a:	4b24      	ldr	r3, [pc, #144]	; (801101c <tcp_receive+0xf24>)
 8010f8c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010f90:	4923      	ldr	r1, [pc, #140]	; (8011020 <tcp_receive+0xf28>)
 8010f92:	4824      	ldr	r0, [pc, #144]	; (8011024 <tcp_receive+0xf2c>)
 8010f94:	f001 ff08 	bl	8012da8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010f98:	e011      	b.n	8010fbe <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	f47f aea4 	bne.w	8010cf0 <tcp_receive+0xbf8>
 8010fa8:	e00a      	b.n	8010fc0 <tcp_receive+0xec8>
                break;
 8010faa:	bf00      	nop
 8010fac:	e008      	b.n	8010fc0 <tcp_receive+0xec8>
                break;
 8010fae:	bf00      	nop
 8010fb0:	e006      	b.n	8010fc0 <tcp_receive+0xec8>
                  break;
 8010fb2:	bf00      	nop
 8010fb4:	e004      	b.n	8010fc0 <tcp_receive+0xec8>
                  break;
 8010fb6:	bf00      	nop
 8010fb8:	e002      	b.n	8010fc0 <tcp_receive+0xec8>
                  break;
 8010fba:	bf00      	nop
 8010fbc:	e000      	b.n	8010fc0 <tcp_receive+0xec8>
                break;
 8010fbe:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f001 fa33 	bl	801242c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010fc6:	e003      	b.n	8010fd0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f001 fa2f 	bl	801242c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010fce:	e01a      	b.n	8011006 <tcp_receive+0xf0e>
 8010fd0:	e019      	b.n	8011006 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010fd2:	4b0f      	ldr	r3, [pc, #60]	; (8011010 <tcp_receive+0xf18>)
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	db0a      	blt.n	8010ff6 <tcp_receive+0xefe>
 8010fe0:	4b0b      	ldr	r3, [pc, #44]	; (8011010 <tcp_receive+0xf18>)
 8010fe2:	681a      	ldr	r2, [r3, #0]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fe8:	6879      	ldr	r1, [r7, #4]
 8010fea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fec:	440b      	add	r3, r1
 8010fee:	1ad3      	subs	r3, r2, r3
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	dd07      	ble.n	8011006 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	8b5b      	ldrh	r3, [r3, #26]
 8010ffa:	f043 0302 	orr.w	r3, r3, #2
 8010ffe:	b29a      	uxth	r2, r3
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011004:	e7ff      	b.n	8011006 <tcp_receive+0xf0e>
 8011006:	bf00      	nop
 8011008:	3750      	adds	r7, #80	; 0x50
 801100a:	46bd      	mov	sp, r7
 801100c:	bdb0      	pop	{r4, r5, r7, pc}
 801100e:	bf00      	nop
 8011010:	240081b8 	.word	0x240081b8
 8011014:	24008198 	.word	0x24008198
 8011018:	240081c2 	.word	0x240081c2
 801101c:	080159c4 	.word	0x080159c4
 8011020:	08015d8c 	.word	0x08015d8c
 8011024:	08015a30 	.word	0x08015a30

08011028 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011028:	b480      	push	{r7}
 801102a:	b083      	sub	sp, #12
 801102c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801102e:	4b15      	ldr	r3, [pc, #84]	; (8011084 <tcp_get_next_optbyte+0x5c>)
 8011030:	881b      	ldrh	r3, [r3, #0]
 8011032:	1c5a      	adds	r2, r3, #1
 8011034:	b291      	uxth	r1, r2
 8011036:	4a13      	ldr	r2, [pc, #76]	; (8011084 <tcp_get_next_optbyte+0x5c>)
 8011038:	8011      	strh	r1, [r2, #0]
 801103a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801103c:	4b12      	ldr	r3, [pc, #72]	; (8011088 <tcp_get_next_optbyte+0x60>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d004      	beq.n	801104e <tcp_get_next_optbyte+0x26>
 8011044:	4b11      	ldr	r3, [pc, #68]	; (801108c <tcp_get_next_optbyte+0x64>)
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	88fa      	ldrh	r2, [r7, #6]
 801104a:	429a      	cmp	r2, r3
 801104c:	d208      	bcs.n	8011060 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801104e:	4b10      	ldr	r3, [pc, #64]	; (8011090 <tcp_get_next_optbyte+0x68>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	3314      	adds	r3, #20
 8011054:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011056:	88fb      	ldrh	r3, [r7, #6]
 8011058:	683a      	ldr	r2, [r7, #0]
 801105a:	4413      	add	r3, r2
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	e00b      	b.n	8011078 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011060:	88fb      	ldrh	r3, [r7, #6]
 8011062:	b2da      	uxtb	r2, r3
 8011064:	4b09      	ldr	r3, [pc, #36]	; (801108c <tcp_get_next_optbyte+0x64>)
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	b2db      	uxtb	r3, r3
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801106e:	4b06      	ldr	r3, [pc, #24]	; (8011088 <tcp_get_next_optbyte+0x60>)
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	797b      	ldrb	r3, [r7, #5]
 8011074:	4413      	add	r3, r2
 8011076:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011078:	4618      	mov	r0, r3
 801107a:	370c      	adds	r7, #12
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr
 8011084:	240081b4 	.word	0x240081b4
 8011088:	240081b0 	.word	0x240081b0
 801108c:	240081ae 	.word	0x240081ae
 8011090:	240081a8 	.word	0x240081a8

08011094 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d106      	bne.n	80110b0 <tcp_parseopt+0x1c>
 80110a2:	4b32      	ldr	r3, [pc, #200]	; (801116c <tcp_parseopt+0xd8>)
 80110a4:	f240 727d 	movw	r2, #1917	; 0x77d
 80110a8:	4931      	ldr	r1, [pc, #196]	; (8011170 <tcp_parseopt+0xdc>)
 80110aa:	4832      	ldr	r0, [pc, #200]	; (8011174 <tcp_parseopt+0xe0>)
 80110ac:	f001 fe7c 	bl	8012da8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80110b0:	4b31      	ldr	r3, [pc, #196]	; (8011178 <tcp_parseopt+0xe4>)
 80110b2:	881b      	ldrh	r3, [r3, #0]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d055      	beq.n	8011164 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80110b8:	4b30      	ldr	r3, [pc, #192]	; (801117c <tcp_parseopt+0xe8>)
 80110ba:	2200      	movs	r2, #0
 80110bc:	801a      	strh	r2, [r3, #0]
 80110be:	e045      	b.n	801114c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80110c0:	f7ff ffb2 	bl	8011028 <tcp_get_next_optbyte>
 80110c4:	4603      	mov	r3, r0
 80110c6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80110c8:	7bfb      	ldrb	r3, [r7, #15]
 80110ca:	2b02      	cmp	r3, #2
 80110cc:	d006      	beq.n	80110dc <tcp_parseopt+0x48>
 80110ce:	2b02      	cmp	r3, #2
 80110d0:	dc2b      	bgt.n	801112a <tcp_parseopt+0x96>
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d041      	beq.n	801115a <tcp_parseopt+0xc6>
 80110d6:	2b01      	cmp	r3, #1
 80110d8:	d127      	bne.n	801112a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80110da:	e037      	b.n	801114c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80110dc:	f7ff ffa4 	bl	8011028 <tcp_get_next_optbyte>
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b04      	cmp	r3, #4
 80110e4:	d13b      	bne.n	801115e <tcp_parseopt+0xca>
 80110e6:	4b25      	ldr	r3, [pc, #148]	; (801117c <tcp_parseopt+0xe8>)
 80110e8:	881b      	ldrh	r3, [r3, #0]
 80110ea:	3301      	adds	r3, #1
 80110ec:	4a22      	ldr	r2, [pc, #136]	; (8011178 <tcp_parseopt+0xe4>)
 80110ee:	8812      	ldrh	r2, [r2, #0]
 80110f0:	4293      	cmp	r3, r2
 80110f2:	da34      	bge.n	801115e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80110f4:	f7ff ff98 	bl	8011028 <tcp_get_next_optbyte>
 80110f8:	4603      	mov	r3, r0
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	021b      	lsls	r3, r3, #8
 80110fe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011100:	f7ff ff92 	bl	8011028 <tcp_get_next_optbyte>
 8011104:	4603      	mov	r3, r0
 8011106:	b29a      	uxth	r2, r3
 8011108:	89bb      	ldrh	r3, [r7, #12]
 801110a:	4313      	orrs	r3, r2
 801110c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801110e:	89bb      	ldrh	r3, [r7, #12]
 8011110:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011114:	d804      	bhi.n	8011120 <tcp_parseopt+0x8c>
 8011116:	89bb      	ldrh	r3, [r7, #12]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d001      	beq.n	8011120 <tcp_parseopt+0x8c>
 801111c:	89ba      	ldrh	r2, [r7, #12]
 801111e:	e001      	b.n	8011124 <tcp_parseopt+0x90>
 8011120:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011128:	e010      	b.n	801114c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801112a:	f7ff ff7d 	bl	8011028 <tcp_get_next_optbyte>
 801112e:	4603      	mov	r3, r0
 8011130:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011132:	7afb      	ldrb	r3, [r7, #11]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d914      	bls.n	8011162 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011138:	7afb      	ldrb	r3, [r7, #11]
 801113a:	b29a      	uxth	r2, r3
 801113c:	4b0f      	ldr	r3, [pc, #60]	; (801117c <tcp_parseopt+0xe8>)
 801113e:	881b      	ldrh	r3, [r3, #0]
 8011140:	4413      	add	r3, r2
 8011142:	b29b      	uxth	r3, r3
 8011144:	3b02      	subs	r3, #2
 8011146:	b29a      	uxth	r2, r3
 8011148:	4b0c      	ldr	r3, [pc, #48]	; (801117c <tcp_parseopt+0xe8>)
 801114a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801114c:	4b0b      	ldr	r3, [pc, #44]	; (801117c <tcp_parseopt+0xe8>)
 801114e:	881a      	ldrh	r2, [r3, #0]
 8011150:	4b09      	ldr	r3, [pc, #36]	; (8011178 <tcp_parseopt+0xe4>)
 8011152:	881b      	ldrh	r3, [r3, #0]
 8011154:	429a      	cmp	r2, r3
 8011156:	d3b3      	bcc.n	80110c0 <tcp_parseopt+0x2c>
 8011158:	e004      	b.n	8011164 <tcp_parseopt+0xd0>
          return;
 801115a:	bf00      	nop
 801115c:	e002      	b.n	8011164 <tcp_parseopt+0xd0>
            return;
 801115e:	bf00      	nop
 8011160:	e000      	b.n	8011164 <tcp_parseopt+0xd0>
            return;
 8011162:	bf00      	nop
      }
    }
  }
}
 8011164:	3710      	adds	r7, #16
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	080159c4 	.word	0x080159c4
 8011170:	08015e48 	.word	0x08015e48
 8011174:	08015a30 	.word	0x08015a30
 8011178:	240081ac 	.word	0x240081ac
 801117c:	240081b4 	.word	0x240081b4

08011180 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011180:	b480      	push	{r7}
 8011182:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011184:	4b05      	ldr	r3, [pc, #20]	; (801119c <tcp_trigger_input_pcb_close+0x1c>)
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	f043 0310 	orr.w	r3, r3, #16
 801118c:	b2da      	uxtb	r2, r3
 801118e:	4b03      	ldr	r3, [pc, #12]	; (801119c <tcp_trigger_input_pcb_close+0x1c>)
 8011190:	701a      	strb	r2, [r3, #0]
}
 8011192:	bf00      	nop
 8011194:	46bd      	mov	sp, r7
 8011196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119a:	4770      	bx	lr
 801119c:	240081c5 	.word	0x240081c5

080111a0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00a      	beq.n	80111c8 <tcp_route+0x28>
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	7a1b      	ldrb	r3, [r3, #8]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d006      	beq.n	80111c8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	7a1b      	ldrb	r3, [r3, #8]
 80111be:	4618      	mov	r0, r3
 80111c0:	f7fb fb52 	bl	800c868 <netif_get_by_index>
 80111c4:	4603      	mov	r3, r0
 80111c6:	e003      	b.n	80111d0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f7f9 faa9 	bl	800a720 <ip4_route>
 80111ce:	4603      	mov	r3, r0
  }
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3710      	adds	r7, #16
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}

080111d8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80111d8:	b590      	push	{r4, r7, lr}
 80111da:	b087      	sub	sp, #28
 80111dc:	af00      	add	r7, sp, #0
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	603b      	str	r3, [r7, #0]
 80111e4:	4613      	mov	r3, r2
 80111e6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d105      	bne.n	80111fa <tcp_create_segment+0x22>
 80111ee:	4b44      	ldr	r3, [pc, #272]	; (8011300 <tcp_create_segment+0x128>)
 80111f0:	22a3      	movs	r2, #163	; 0xa3
 80111f2:	4944      	ldr	r1, [pc, #272]	; (8011304 <tcp_create_segment+0x12c>)
 80111f4:	4844      	ldr	r0, [pc, #272]	; (8011308 <tcp_create_segment+0x130>)
 80111f6:	f001 fdd7 	bl	8012da8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d105      	bne.n	801120c <tcp_create_segment+0x34>
 8011200:	4b3f      	ldr	r3, [pc, #252]	; (8011300 <tcp_create_segment+0x128>)
 8011202:	22a4      	movs	r2, #164	; 0xa4
 8011204:	4941      	ldr	r1, [pc, #260]	; (801130c <tcp_create_segment+0x134>)
 8011206:	4840      	ldr	r0, [pc, #256]	; (8011308 <tcp_create_segment+0x130>)
 8011208:	f001 fdce 	bl	8012da8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801120c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011210:	009b      	lsls	r3, r3, #2
 8011212:	b2db      	uxtb	r3, r3
 8011214:	f003 0304 	and.w	r3, r3, #4
 8011218:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801121a:	2003      	movs	r0, #3
 801121c:	f7fa fffa 	bl	800c214 <memp_malloc>
 8011220:	6138      	str	r0, [r7, #16]
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d104      	bne.n	8011232 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011228:	68b8      	ldr	r0, [r7, #8]
 801122a:	f7fb fe7d 	bl	800cf28 <pbuf_free>
    return NULL;
 801122e:	2300      	movs	r3, #0
 8011230:	e061      	b.n	80112f6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011238:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	2200      	movs	r2, #0
 801123e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	68ba      	ldr	r2, [r7, #8]
 8011244:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	891a      	ldrh	r2, [r3, #8]
 801124a:	7dfb      	ldrb	r3, [r7, #23]
 801124c:	b29b      	uxth	r3, r3
 801124e:	429a      	cmp	r2, r3
 8011250:	d205      	bcs.n	801125e <tcp_create_segment+0x86>
 8011252:	4b2b      	ldr	r3, [pc, #172]	; (8011300 <tcp_create_segment+0x128>)
 8011254:	22b0      	movs	r2, #176	; 0xb0
 8011256:	492e      	ldr	r1, [pc, #184]	; (8011310 <tcp_create_segment+0x138>)
 8011258:	482b      	ldr	r0, [pc, #172]	; (8011308 <tcp_create_segment+0x130>)
 801125a:	f001 fda5 	bl	8012da8 <iprintf>
  seg->len = p->tot_len - optlen;
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	891a      	ldrh	r2, [r3, #8]
 8011262:	7dfb      	ldrb	r3, [r7, #23]
 8011264:	b29b      	uxth	r3, r3
 8011266:	1ad3      	subs	r3, r2, r3
 8011268:	b29a      	uxth	r2, r3
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801126e:	2114      	movs	r1, #20
 8011270:	68b8      	ldr	r0, [r7, #8]
 8011272:	f7fb fdc3 	bl	800cdfc <pbuf_add_header>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d004      	beq.n	8011286 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801127c:	6938      	ldr	r0, [r7, #16]
 801127e:	f7fd f8c6 	bl	800e40e <tcp_seg_free>
    return NULL;
 8011282:	2300      	movs	r3, #0
 8011284:	e037      	b.n	80112f6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	685b      	ldr	r3, [r3, #4]
 801128a:	685a      	ldr	r2, [r3, #4]
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	8ada      	ldrh	r2, [r3, #22]
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	68dc      	ldr	r4, [r3, #12]
 8011298:	4610      	mov	r0, r2
 801129a:	f7f7 ff25 	bl	80090e8 <lwip_htons>
 801129e:	4603      	mov	r3, r0
 80112a0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	8b1a      	ldrh	r2, [r3, #24]
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	68dc      	ldr	r4, [r3, #12]
 80112aa:	4610      	mov	r0, r2
 80112ac:	f7f7 ff1c 	bl	80090e8 <lwip_htons>
 80112b0:	4603      	mov	r3, r0
 80112b2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	68dc      	ldr	r4, [r3, #12]
 80112b8:	6838      	ldr	r0, [r7, #0]
 80112ba:	f7f7 ff2a 	bl	8009112 <lwip_htonl>
 80112be:	4603      	mov	r3, r0
 80112c0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80112c2:	7dfb      	ldrb	r3, [r7, #23]
 80112c4:	089b      	lsrs	r3, r3, #2
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	3305      	adds	r3, #5
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	031b      	lsls	r3, r3, #12
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	79fb      	ldrb	r3, [r7, #7]
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	4313      	orrs	r3, r2
 80112d8:	b29a      	uxth	r2, r3
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	68dc      	ldr	r4, [r3, #12]
 80112de:	4610      	mov	r0, r2
 80112e0:	f7f7 ff02 	bl	80090e8 <lwip_htons>
 80112e4:	4603      	mov	r3, r0
 80112e6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	2200      	movs	r2, #0
 80112ee:	749a      	strb	r2, [r3, #18]
 80112f0:	2200      	movs	r2, #0
 80112f2:	74da      	strb	r2, [r3, #19]
  return seg;
 80112f4:	693b      	ldr	r3, [r7, #16]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	371c      	adds	r7, #28
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd90      	pop	{r4, r7, pc}
 80112fe:	bf00      	nop
 8011300:	08015e64 	.word	0x08015e64
 8011304:	08015ebc 	.word	0x08015ebc
 8011308:	08015edc 	.word	0x08015edc
 801130c:	08015f04 	.word	0x08015f04
 8011310:	08015f28 	.word	0x08015f28

08011314 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011314:	b590      	push	{r4, r7, lr}
 8011316:	b08b      	sub	sp, #44	; 0x2c
 8011318:	af02      	add	r7, sp, #8
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	460b      	mov	r3, r1
 801131e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011320:	2300      	movs	r3, #0
 8011322:	61fb      	str	r3, [r7, #28]
 8011324:	2300      	movs	r3, #0
 8011326:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011328:	2300      	movs	r3, #0
 801132a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d106      	bne.n	8011340 <tcp_split_unsent_seg+0x2c>
 8011332:	4b95      	ldr	r3, [pc, #596]	; (8011588 <tcp_split_unsent_seg+0x274>)
 8011334:	f240 324b 	movw	r2, #843	; 0x34b
 8011338:	4994      	ldr	r1, [pc, #592]	; (801158c <tcp_split_unsent_seg+0x278>)
 801133a:	4895      	ldr	r0, [pc, #596]	; (8011590 <tcp_split_unsent_seg+0x27c>)
 801133c:	f001 fd34 	bl	8012da8 <iprintf>

  useg = pcb->unsent;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011344:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d102      	bne.n	8011352 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801134c:	f04f 33ff 	mov.w	r3, #4294967295
 8011350:	e116      	b.n	8011580 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011352:	887b      	ldrh	r3, [r7, #2]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d109      	bne.n	801136c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011358:	4b8b      	ldr	r3, [pc, #556]	; (8011588 <tcp_split_unsent_seg+0x274>)
 801135a:	f240 3253 	movw	r2, #851	; 0x353
 801135e:	498d      	ldr	r1, [pc, #564]	; (8011594 <tcp_split_unsent_seg+0x280>)
 8011360:	488b      	ldr	r0, [pc, #556]	; (8011590 <tcp_split_unsent_seg+0x27c>)
 8011362:	f001 fd21 	bl	8012da8 <iprintf>
    return ERR_VAL;
 8011366:	f06f 0305 	mvn.w	r3, #5
 801136a:	e109      	b.n	8011580 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	891b      	ldrh	r3, [r3, #8]
 8011370:	887a      	ldrh	r2, [r7, #2]
 8011372:	429a      	cmp	r2, r3
 8011374:	d301      	bcc.n	801137a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011376:	2300      	movs	r3, #0
 8011378:	e102      	b.n	8011580 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801137e:	887a      	ldrh	r2, [r7, #2]
 8011380:	429a      	cmp	r2, r3
 8011382:	d906      	bls.n	8011392 <tcp_split_unsent_seg+0x7e>
 8011384:	4b80      	ldr	r3, [pc, #512]	; (8011588 <tcp_split_unsent_seg+0x274>)
 8011386:	f240 325b 	movw	r2, #859	; 0x35b
 801138a:	4983      	ldr	r1, [pc, #524]	; (8011598 <tcp_split_unsent_seg+0x284>)
 801138c:	4880      	ldr	r0, [pc, #512]	; (8011590 <tcp_split_unsent_seg+0x27c>)
 801138e:	f001 fd0b 	bl	8012da8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	891b      	ldrh	r3, [r3, #8]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d106      	bne.n	80113a8 <tcp_split_unsent_seg+0x94>
 801139a:	4b7b      	ldr	r3, [pc, #492]	; (8011588 <tcp_split_unsent_seg+0x274>)
 801139c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80113a0:	497e      	ldr	r1, [pc, #504]	; (801159c <tcp_split_unsent_seg+0x288>)
 80113a2:	487b      	ldr	r0, [pc, #492]	; (8011590 <tcp_split_unsent_seg+0x27c>)
 80113a4:	f001 fd00 	bl	8012da8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	7a9b      	ldrb	r3, [r3, #10]
 80113ac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80113ae:	7bfb      	ldrb	r3, [r7, #15]
 80113b0:	009b      	lsls	r3, r3, #2
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	f003 0304 	and.w	r3, r3, #4
 80113b8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	891a      	ldrh	r2, [r3, #8]
 80113be:	887b      	ldrh	r3, [r7, #2]
 80113c0:	1ad3      	subs	r3, r2, r3
 80113c2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80113c4:	7bbb      	ldrb	r3, [r7, #14]
 80113c6:	b29a      	uxth	r2, r3
 80113c8:	89bb      	ldrh	r3, [r7, #12]
 80113ca:	4413      	add	r3, r2
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80113d2:	4619      	mov	r1, r3
 80113d4:	2036      	movs	r0, #54	; 0x36
 80113d6:	f7fb fac3 	bl	800c960 <pbuf_alloc>
 80113da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	f000 80b7 	beq.w	8011552 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	891a      	ldrh	r2, [r3, #8]
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	891b      	ldrh	r3, [r3, #8]
 80113ee:	1ad3      	subs	r3, r2, r3
 80113f0:	b29a      	uxth	r2, r3
 80113f2:	887b      	ldrh	r3, [r7, #2]
 80113f4:	4413      	add	r3, r2
 80113f6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	6858      	ldr	r0, [r3, #4]
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	685a      	ldr	r2, [r3, #4]
 8011400:	7bbb      	ldrb	r3, [r7, #14]
 8011402:	18d1      	adds	r1, r2, r3
 8011404:	897b      	ldrh	r3, [r7, #10]
 8011406:	89ba      	ldrh	r2, [r7, #12]
 8011408:	f7fb ff78 	bl	800d2fc <pbuf_copy_partial>
 801140c:	4603      	mov	r3, r0
 801140e:	461a      	mov	r2, r3
 8011410:	89bb      	ldrh	r3, [r7, #12]
 8011412:	4293      	cmp	r3, r2
 8011414:	f040 809f 	bne.w	8011556 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	899b      	ldrh	r3, [r3, #12]
 801141e:	b29b      	uxth	r3, r3
 8011420:	4618      	mov	r0, r3
 8011422:	f7f7 fe61 	bl	80090e8 <lwip_htons>
 8011426:	4603      	mov	r3, r0
 8011428:	b2db      	uxtb	r3, r3
 801142a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801142e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011430:	2300      	movs	r3, #0
 8011432:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011434:	7efb      	ldrb	r3, [r7, #27]
 8011436:	f003 0308 	and.w	r3, r3, #8
 801143a:	2b00      	cmp	r3, #0
 801143c:	d007      	beq.n	801144e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801143e:	7efb      	ldrb	r3, [r7, #27]
 8011440:	f023 0308 	bic.w	r3, r3, #8
 8011444:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011446:	7ebb      	ldrb	r3, [r7, #26]
 8011448:	f043 0308 	orr.w	r3, r3, #8
 801144c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801144e:	7efb      	ldrb	r3, [r7, #27]
 8011450:	f003 0301 	and.w	r3, r3, #1
 8011454:	2b00      	cmp	r3, #0
 8011456:	d007      	beq.n	8011468 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011458:	7efb      	ldrb	r3, [r7, #27]
 801145a:	f023 0301 	bic.w	r3, r3, #1
 801145e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011460:	7ebb      	ldrb	r3, [r7, #26]
 8011462:	f043 0301 	orr.w	r3, r3, #1
 8011466:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	685b      	ldr	r3, [r3, #4]
 801146e:	4618      	mov	r0, r3
 8011470:	f7f7 fe4f 	bl	8009112 <lwip_htonl>
 8011474:	4602      	mov	r2, r0
 8011476:	887b      	ldrh	r3, [r7, #2]
 8011478:	18d1      	adds	r1, r2, r3
 801147a:	7eba      	ldrb	r2, [r7, #26]
 801147c:	7bfb      	ldrb	r3, [r7, #15]
 801147e:	9300      	str	r3, [sp, #0]
 8011480:	460b      	mov	r3, r1
 8011482:	6939      	ldr	r1, [r7, #16]
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f7ff fea7 	bl	80111d8 <tcp_create_segment>
 801148a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801148c:	69fb      	ldr	r3, [r7, #28]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d063      	beq.n	801155a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	4618      	mov	r0, r3
 8011498:	f7fb fdce 	bl	800d038 <pbuf_clen>
 801149c:	4603      	mov	r3, r0
 801149e:	461a      	mov	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114a6:	1a9b      	subs	r3, r3, r2
 80114a8:	b29a      	uxth	r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	6858      	ldr	r0, [r3, #4]
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	891a      	ldrh	r2, [r3, #8]
 80114ba:	89bb      	ldrh	r3, [r7, #12]
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	b29b      	uxth	r3, r3
 80114c0:	4619      	mov	r1, r3
 80114c2:	f7fb fbab 	bl	800cc1c <pbuf_realloc>
  useg->len -= remainder;
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	891a      	ldrh	r2, [r3, #8]
 80114ca:	89bb      	ldrh	r3, [r7, #12]
 80114cc:	1ad3      	subs	r3, r2, r3
 80114ce:	b29a      	uxth	r2, r3
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	899b      	ldrh	r3, [r3, #12]
 80114da:	b29c      	uxth	r4, r3
 80114dc:	7efb      	ldrb	r3, [r7, #27]
 80114de:	b29b      	uxth	r3, r3
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7f7 fe01 	bl	80090e8 <lwip_htons>
 80114e6:	4603      	mov	r3, r0
 80114e8:	461a      	mov	r2, r3
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	68db      	ldr	r3, [r3, #12]
 80114ee:	4322      	orrs	r2, r4
 80114f0:	b292      	uxth	r2, r2
 80114f2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7fb fd9d 	bl	800d038 <pbuf_clen>
 80114fe:	4603      	mov	r3, r0
 8011500:	461a      	mov	r2, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011508:	4413      	add	r3, r2
 801150a:	b29a      	uxth	r2, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011512:	69fb      	ldr	r3, [r7, #28]
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	4618      	mov	r0, r3
 8011518:	f7fb fd8e 	bl	800d038 <pbuf_clen>
 801151c:	4603      	mov	r3, r0
 801151e:	461a      	mov	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011526:	4413      	add	r3, r2
 8011528:	b29a      	uxth	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	69fb      	ldr	r3, [r7, #28]
 8011536:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	69fa      	ldr	r2, [r7, #28]
 801153c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801153e:	69fb      	ldr	r3, [r7, #28]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d103      	bne.n	801154e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2200      	movs	r2, #0
 801154a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801154e:	2300      	movs	r3, #0
 8011550:	e016      	b.n	8011580 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011552:	bf00      	nop
 8011554:	e002      	b.n	801155c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011556:	bf00      	nop
 8011558:	e000      	b.n	801155c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801155a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d006      	beq.n	8011570 <tcp_split_unsent_seg+0x25c>
 8011562:	4b09      	ldr	r3, [pc, #36]	; (8011588 <tcp_split_unsent_seg+0x274>)
 8011564:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011568:	490d      	ldr	r1, [pc, #52]	; (80115a0 <tcp_split_unsent_seg+0x28c>)
 801156a:	4809      	ldr	r0, [pc, #36]	; (8011590 <tcp_split_unsent_seg+0x27c>)
 801156c:	f001 fc1c 	bl	8012da8 <iprintf>
  if (p != NULL) {
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d002      	beq.n	801157c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011576:	6938      	ldr	r0, [r7, #16]
 8011578:	f7fb fcd6 	bl	800cf28 <pbuf_free>
  }

  return ERR_MEM;
 801157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011580:	4618      	mov	r0, r3
 8011582:	3724      	adds	r7, #36	; 0x24
 8011584:	46bd      	mov	sp, r7
 8011586:	bd90      	pop	{r4, r7, pc}
 8011588:	08015e64 	.word	0x08015e64
 801158c:	0801621c 	.word	0x0801621c
 8011590:	08015edc 	.word	0x08015edc
 8011594:	08016240 	.word	0x08016240
 8011598:	08016264 	.word	0x08016264
 801159c:	08016274 	.word	0x08016274
 80115a0:	08016284 	.word	0x08016284

080115a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80115a4:	b590      	push	{r4, r7, lr}
 80115a6:	b085      	sub	sp, #20
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d106      	bne.n	80115c0 <tcp_send_fin+0x1c>
 80115b2:	4b21      	ldr	r3, [pc, #132]	; (8011638 <tcp_send_fin+0x94>)
 80115b4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80115b8:	4920      	ldr	r1, [pc, #128]	; (801163c <tcp_send_fin+0x98>)
 80115ba:	4821      	ldr	r0, [pc, #132]	; (8011640 <tcp_send_fin+0x9c>)
 80115bc:	f001 fbf4 	bl	8012da8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d02e      	beq.n	8011626 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115cc:	60fb      	str	r3, [r7, #12]
 80115ce:	e002      	b.n	80115d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d1f8      	bne.n	80115d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	68db      	ldr	r3, [r3, #12]
 80115e2:	899b      	ldrh	r3, [r3, #12]
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7f7 fd7e 	bl	80090e8 <lwip_htons>
 80115ec:	4603      	mov	r3, r0
 80115ee:	b2db      	uxtb	r3, r3
 80115f0:	f003 0307 	and.w	r3, r3, #7
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d116      	bne.n	8011626 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	899b      	ldrh	r3, [r3, #12]
 80115fe:	b29c      	uxth	r4, r3
 8011600:	2001      	movs	r0, #1
 8011602:	f7f7 fd71 	bl	80090e8 <lwip_htons>
 8011606:	4603      	mov	r3, r0
 8011608:	461a      	mov	r2, r3
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	68db      	ldr	r3, [r3, #12]
 801160e:	4322      	orrs	r2, r4
 8011610:	b292      	uxth	r2, r2
 8011612:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	8b5b      	ldrh	r3, [r3, #26]
 8011618:	f043 0320 	orr.w	r3, r3, #32
 801161c:	b29a      	uxth	r2, r3
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011622:	2300      	movs	r3, #0
 8011624:	e004      	b.n	8011630 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011626:	2101      	movs	r1, #1
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f000 f80b 	bl	8011644 <tcp_enqueue_flags>
 801162e:	4603      	mov	r3, r0
}
 8011630:	4618      	mov	r0, r3
 8011632:	3714      	adds	r7, #20
 8011634:	46bd      	mov	sp, r7
 8011636:	bd90      	pop	{r4, r7, pc}
 8011638:	08015e64 	.word	0x08015e64
 801163c:	08016290 	.word	0x08016290
 8011640:	08015edc 	.word	0x08015edc

08011644 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b08a      	sub	sp, #40	; 0x28
 8011648:	af02      	add	r7, sp, #8
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	460b      	mov	r3, r1
 801164e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011650:	2300      	movs	r3, #0
 8011652:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011654:	2300      	movs	r3, #0
 8011656:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011658:	78fb      	ldrb	r3, [r7, #3]
 801165a:	f003 0303 	and.w	r3, r3, #3
 801165e:	2b00      	cmp	r3, #0
 8011660:	d106      	bne.n	8011670 <tcp_enqueue_flags+0x2c>
 8011662:	4b67      	ldr	r3, [pc, #412]	; (8011800 <tcp_enqueue_flags+0x1bc>)
 8011664:	f240 4211 	movw	r2, #1041	; 0x411
 8011668:	4966      	ldr	r1, [pc, #408]	; (8011804 <tcp_enqueue_flags+0x1c0>)
 801166a:	4867      	ldr	r0, [pc, #412]	; (8011808 <tcp_enqueue_flags+0x1c4>)
 801166c:	f001 fb9c 	bl	8012da8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d106      	bne.n	8011684 <tcp_enqueue_flags+0x40>
 8011676:	4b62      	ldr	r3, [pc, #392]	; (8011800 <tcp_enqueue_flags+0x1bc>)
 8011678:	f240 4213 	movw	r2, #1043	; 0x413
 801167c:	4963      	ldr	r1, [pc, #396]	; (801180c <tcp_enqueue_flags+0x1c8>)
 801167e:	4862      	ldr	r0, [pc, #392]	; (8011808 <tcp_enqueue_flags+0x1c4>)
 8011680:	f001 fb92 	bl	8012da8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011684:	78fb      	ldrb	r3, [r7, #3]
 8011686:	f003 0302 	and.w	r3, r3, #2
 801168a:	2b00      	cmp	r3, #0
 801168c:	d001      	beq.n	8011692 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801168e:	2301      	movs	r3, #1
 8011690:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011692:	7ffb      	ldrb	r3, [r7, #31]
 8011694:	009b      	lsls	r3, r3, #2
 8011696:	b2db      	uxtb	r3, r3
 8011698:	f003 0304 	and.w	r3, r3, #4
 801169c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801169e:	7dfb      	ldrb	r3, [r7, #23]
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116a6:	4619      	mov	r1, r3
 80116a8:	2036      	movs	r0, #54	; 0x36
 80116aa:	f7fb f959 	bl	800c960 <pbuf_alloc>
 80116ae:	6138      	str	r0, [r7, #16]
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d109      	bne.n	80116ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	8b5b      	ldrh	r3, [r3, #26]
 80116ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116be:	b29a      	uxth	r2, r3
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80116c4:	f04f 33ff 	mov.w	r3, #4294967295
 80116c8:	e095      	b.n	80117f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	895a      	ldrh	r2, [r3, #10]
 80116ce:	7dfb      	ldrb	r3, [r7, #23]
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d206      	bcs.n	80116e4 <tcp_enqueue_flags+0xa0>
 80116d6:	4b4a      	ldr	r3, [pc, #296]	; (8011800 <tcp_enqueue_flags+0x1bc>)
 80116d8:	f240 4239 	movw	r2, #1081	; 0x439
 80116dc:	494c      	ldr	r1, [pc, #304]	; (8011810 <tcp_enqueue_flags+0x1cc>)
 80116de:	484a      	ldr	r0, [pc, #296]	; (8011808 <tcp_enqueue_flags+0x1c4>)
 80116e0:	f001 fb62 	bl	8012da8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80116e8:	78fa      	ldrb	r2, [r7, #3]
 80116ea:	7ffb      	ldrb	r3, [r7, #31]
 80116ec:	9300      	str	r3, [sp, #0]
 80116ee:	460b      	mov	r3, r1
 80116f0:	6939      	ldr	r1, [r7, #16]
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f7ff fd70 	bl	80111d8 <tcp_create_segment>
 80116f8:	60f8      	str	r0, [r7, #12]
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d109      	bne.n	8011714 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	8b5b      	ldrh	r3, [r3, #26]
 8011704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011708:	b29a      	uxth	r2, r3
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801170e:	f04f 33ff 	mov.w	r3, #4294967295
 8011712:	e070      	b.n	80117f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	68db      	ldr	r3, [r3, #12]
 8011718:	f003 0303 	and.w	r3, r3, #3
 801171c:	2b00      	cmp	r3, #0
 801171e:	d006      	beq.n	801172e <tcp_enqueue_flags+0xea>
 8011720:	4b37      	ldr	r3, [pc, #220]	; (8011800 <tcp_enqueue_flags+0x1bc>)
 8011722:	f240 4242 	movw	r2, #1090	; 0x442
 8011726:	493b      	ldr	r1, [pc, #236]	; (8011814 <tcp_enqueue_flags+0x1d0>)
 8011728:	4837      	ldr	r0, [pc, #220]	; (8011808 <tcp_enqueue_flags+0x1c4>)
 801172a:	f001 fb3d 	bl	8012da8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	891b      	ldrh	r3, [r3, #8]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d006      	beq.n	8011744 <tcp_enqueue_flags+0x100>
 8011736:	4b32      	ldr	r3, [pc, #200]	; (8011800 <tcp_enqueue_flags+0x1bc>)
 8011738:	f240 4243 	movw	r2, #1091	; 0x443
 801173c:	4936      	ldr	r1, [pc, #216]	; (8011818 <tcp_enqueue_flags+0x1d4>)
 801173e:	4832      	ldr	r0, [pc, #200]	; (8011808 <tcp_enqueue_flags+0x1c4>)
 8011740:	f001 fb32 	bl	8012da8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011748:	2b00      	cmp	r3, #0
 801174a:	d103      	bne.n	8011754 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	68fa      	ldr	r2, [r7, #12]
 8011750:	66da      	str	r2, [r3, #108]	; 0x6c
 8011752:	e00d      	b.n	8011770 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011758:	61bb      	str	r3, [r7, #24]
 801175a:	e002      	b.n	8011762 <tcp_enqueue_flags+0x11e>
 801175c:	69bb      	ldr	r3, [r7, #24]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	61bb      	str	r3, [r7, #24]
 8011762:	69bb      	ldr	r3, [r7, #24]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d1f8      	bne.n	801175c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801176a:	69bb      	ldr	r3, [r7, #24]
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2200      	movs	r2, #0
 8011774:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011778:	78fb      	ldrb	r3, [r7, #3]
 801177a:	f003 0302 	and.w	r3, r3, #2
 801177e:	2b00      	cmp	r3, #0
 8011780:	d104      	bne.n	801178c <tcp_enqueue_flags+0x148>
 8011782:	78fb      	ldrb	r3, [r7, #3]
 8011784:	f003 0301 	and.w	r3, r3, #1
 8011788:	2b00      	cmp	r3, #0
 801178a:	d004      	beq.n	8011796 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011790:	1c5a      	adds	r2, r3, #1
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011796:	78fb      	ldrb	r3, [r7, #3]
 8011798:	f003 0301 	and.w	r3, r3, #1
 801179c:	2b00      	cmp	r3, #0
 801179e:	d006      	beq.n	80117ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	8b5b      	ldrh	r3, [r3, #26]
 80117a4:	f043 0320 	orr.w	r3, r3, #32
 80117a8:	b29a      	uxth	r2, r3
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fb fc40 	bl	800d038 <pbuf_clen>
 80117b8:	4603      	mov	r3, r0
 80117ba:	461a      	mov	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117c2:	4413      	add	r3, r2
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d00e      	beq.n	80117f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d10a      	bne.n	80117f4 <tcp_enqueue_flags+0x1b0>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d106      	bne.n	80117f4 <tcp_enqueue_flags+0x1b0>
 80117e6:	4b06      	ldr	r3, [pc, #24]	; (8011800 <tcp_enqueue_flags+0x1bc>)
 80117e8:	f240 4265 	movw	r2, #1125	; 0x465
 80117ec:	490b      	ldr	r1, [pc, #44]	; (801181c <tcp_enqueue_flags+0x1d8>)
 80117ee:	4806      	ldr	r0, [pc, #24]	; (8011808 <tcp_enqueue_flags+0x1c4>)
 80117f0:	f001 fada 	bl	8012da8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80117f4:	2300      	movs	r3, #0
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3720      	adds	r7, #32
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	08015e64 	.word	0x08015e64
 8011804:	080162ac 	.word	0x080162ac
 8011808:	08015edc 	.word	0x08015edc
 801180c:	08016304 	.word	0x08016304
 8011810:	08016324 	.word	0x08016324
 8011814:	08016360 	.word	0x08016360
 8011818:	08016378 	.word	0x08016378
 801181c:	080163a4 	.word	0x080163a4

08011820 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011820:	b5b0      	push	{r4, r5, r7, lr}
 8011822:	b08a      	sub	sp, #40	; 0x28
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d106      	bne.n	801183c <tcp_output+0x1c>
 801182e:	4b8a      	ldr	r3, [pc, #552]	; (8011a58 <tcp_output+0x238>)
 8011830:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011834:	4989      	ldr	r1, [pc, #548]	; (8011a5c <tcp_output+0x23c>)
 8011836:	488a      	ldr	r0, [pc, #552]	; (8011a60 <tcp_output+0x240>)
 8011838:	f001 fab6 	bl	8012da8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	7d1b      	ldrb	r3, [r3, #20]
 8011840:	2b01      	cmp	r3, #1
 8011842:	d106      	bne.n	8011852 <tcp_output+0x32>
 8011844:	4b84      	ldr	r3, [pc, #528]	; (8011a58 <tcp_output+0x238>)
 8011846:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801184a:	4986      	ldr	r1, [pc, #536]	; (8011a64 <tcp_output+0x244>)
 801184c:	4884      	ldr	r0, [pc, #528]	; (8011a60 <tcp_output+0x240>)
 801184e:	f001 faab 	bl	8012da8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011852:	4b85      	ldr	r3, [pc, #532]	; (8011a68 <tcp_output+0x248>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	429a      	cmp	r2, r3
 801185a:	d101      	bne.n	8011860 <tcp_output+0x40>
    return ERR_OK;
 801185c:	2300      	movs	r3, #0
 801185e:	e1ce      	b.n	8011bfe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801186c:	4293      	cmp	r3, r2
 801186e:	bf28      	it	cs
 8011870:	4613      	movcs	r3, r2
 8011872:	b29b      	uxth	r3, r3
 8011874:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801187a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187e:	2b00      	cmp	r3, #0
 8011880:	d10b      	bne.n	801189a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	8b5b      	ldrh	r3, [r3, #26]
 8011886:	f003 0302 	and.w	r3, r3, #2
 801188a:	2b00      	cmp	r3, #0
 801188c:	f000 81aa 	beq.w	8011be4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f000 fdcb 	bl	801242c <tcp_send_empty_ack>
 8011896:	4603      	mov	r3, r0
 8011898:	e1b1      	b.n	8011bfe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801189a:	6879      	ldr	r1, [r7, #4]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	3304      	adds	r3, #4
 80118a0:	461a      	mov	r2, r3
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f7ff fc7c 	bl	80111a0 <tcp_route>
 80118a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d102      	bne.n	80118b6 <tcp_output+0x96>
    return ERR_RTE;
 80118b0:	f06f 0303 	mvn.w	r3, #3
 80118b4:	e1a3      	b.n	8011bfe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d003      	beq.n	80118c4 <tcp_output+0xa4>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d111      	bne.n	80118e8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d002      	beq.n	80118d0 <tcp_output+0xb0>
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	3304      	adds	r3, #4
 80118ce:	e000      	b.n	80118d2 <tcp_output+0xb2>
 80118d0:	2300      	movs	r3, #0
 80118d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d102      	bne.n	80118e0 <tcp_output+0xc0>
      return ERR_RTE;
 80118da:	f06f 0303 	mvn.w	r3, #3
 80118de:	e18e      	b.n	8011bfe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	681a      	ldr	r2, [r3, #0]
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80118e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7f7 fc0f 	bl	8009112 <lwip_htonl>
 80118f4:	4602      	mov	r2, r0
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118fa:	1ad3      	subs	r3, r2, r3
 80118fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118fe:	8912      	ldrh	r2, [r2, #8]
 8011900:	4413      	add	r3, r2
 8011902:	69ba      	ldr	r2, [r7, #24]
 8011904:	429a      	cmp	r2, r3
 8011906:	d227      	bcs.n	8011958 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801190e:	461a      	mov	r2, r3
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	4293      	cmp	r3, r2
 8011914:	d114      	bne.n	8011940 <tcp_output+0x120>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801191a:	2b00      	cmp	r3, #0
 801191c:	d110      	bne.n	8011940 <tcp_output+0x120>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011924:	2b00      	cmp	r3, #0
 8011926:	d10b      	bne.n	8011940 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2201      	movs	r2, #1
 8011934:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	8b5b      	ldrh	r3, [r3, #26]
 8011944:	f003 0302 	and.w	r3, r3, #2
 8011948:	2b00      	cmp	r3, #0
 801194a:	f000 814d 	beq.w	8011be8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f000 fd6c 	bl	801242c <tcp_send_empty_ack>
 8011954:	4603      	mov	r3, r0
 8011956:	e152      	b.n	8011bfe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011964:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011966:	6a3b      	ldr	r3, [r7, #32]
 8011968:	2b00      	cmp	r3, #0
 801196a:	f000 811c 	beq.w	8011ba6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801196e:	e002      	b.n	8011976 <tcp_output+0x156>
 8011970:	6a3b      	ldr	r3, [r7, #32]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	623b      	str	r3, [r7, #32]
 8011976:	6a3b      	ldr	r3, [r7, #32]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d1f8      	bne.n	8011970 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801197e:	e112      	b.n	8011ba6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011982:	68db      	ldr	r3, [r3, #12]
 8011984:	899b      	ldrh	r3, [r3, #12]
 8011986:	b29b      	uxth	r3, r3
 8011988:	4618      	mov	r0, r3
 801198a:	f7f7 fbad 	bl	80090e8 <lwip_htons>
 801198e:	4603      	mov	r3, r0
 8011990:	b2db      	uxtb	r3, r3
 8011992:	f003 0304 	and.w	r3, r3, #4
 8011996:	2b00      	cmp	r3, #0
 8011998:	d006      	beq.n	80119a8 <tcp_output+0x188>
 801199a:	4b2f      	ldr	r3, [pc, #188]	; (8011a58 <tcp_output+0x238>)
 801199c:	f240 5236 	movw	r2, #1334	; 0x536
 80119a0:	4932      	ldr	r1, [pc, #200]	; (8011a6c <tcp_output+0x24c>)
 80119a2:	482f      	ldr	r0, [pc, #188]	; (8011a60 <tcp_output+0x240>)
 80119a4:	f001 fa00 	bl	8012da8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d01f      	beq.n	80119f0 <tcp_output+0x1d0>
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	8b5b      	ldrh	r3, [r3, #26]
 80119b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d119      	bne.n	80119f0 <tcp_output+0x1d0>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d00b      	beq.n	80119dc <tcp_output+0x1bc>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d110      	bne.n	80119f0 <tcp_output+0x1d0>
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119d2:	891a      	ldrh	r2, [r3, #8]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119d8:	429a      	cmp	r2, r3
 80119da:	d209      	bcs.n	80119f0 <tcp_output+0x1d0>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d004      	beq.n	80119f0 <tcp_output+0x1d0>
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80119ec:	2b08      	cmp	r3, #8
 80119ee:	d901      	bls.n	80119f4 <tcp_output+0x1d4>
 80119f0:	2301      	movs	r3, #1
 80119f2:	e000      	b.n	80119f6 <tcp_output+0x1d6>
 80119f4:	2300      	movs	r3, #0
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d106      	bne.n	8011a08 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	8b5b      	ldrh	r3, [r3, #26]
 80119fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	f000 80e4 	beq.w	8011bd0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	7d1b      	ldrb	r3, [r3, #20]
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	d00d      	beq.n	8011a2c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a12:	68db      	ldr	r3, [r3, #12]
 8011a14:	899b      	ldrh	r3, [r3, #12]
 8011a16:	b29c      	uxth	r4, r3
 8011a18:	2010      	movs	r0, #16
 8011a1a:	f7f7 fb65 	bl	80090e8 <lwip_htons>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	461a      	mov	r2, r3
 8011a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a24:	68db      	ldr	r3, [r3, #12]
 8011a26:	4322      	orrs	r2, r4
 8011a28:	b292      	uxth	r2, r2
 8011a2a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011a2c:	697a      	ldr	r2, [r7, #20]
 8011a2e:	6879      	ldr	r1, [r7, #4]
 8011a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a32:	f000 f909 	bl	8011c48 <tcp_output_segment>
 8011a36:	4603      	mov	r3, r0
 8011a38:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d016      	beq.n	8011a70 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	8b5b      	ldrh	r3, [r3, #26]
 8011a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a4a:	b29a      	uxth	r2, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	835a      	strh	r2, [r3, #26]
      return err;
 8011a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a54:	e0d3      	b.n	8011bfe <tcp_output+0x3de>
 8011a56:	bf00      	nop
 8011a58:	08015e64 	.word	0x08015e64
 8011a5c:	080163cc 	.word	0x080163cc
 8011a60:	08015edc 	.word	0x08015edc
 8011a64:	080163e4 	.word	0x080163e4
 8011a68:	240081cc 	.word	0x240081cc
 8011a6c:	0801640c 	.word	0x0801640c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a72:	681a      	ldr	r2, [r3, #0]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	7d1b      	ldrb	r3, [r3, #20]
 8011a7c:	2b02      	cmp	r3, #2
 8011a7e:	d006      	beq.n	8011a8e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	8b5b      	ldrh	r3, [r3, #26]
 8011a84:	f023 0303 	bic.w	r3, r3, #3
 8011a88:	b29a      	uxth	r2, r3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a90:	68db      	ldr	r3, [r3, #12]
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7f7 fb3c 	bl	8009112 <lwip_htonl>
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9e:	891b      	ldrh	r3, [r3, #8]
 8011aa0:	461d      	mov	r5, r3
 8011aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa4:	68db      	ldr	r3, [r3, #12]
 8011aa6:	899b      	ldrh	r3, [r3, #12]
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7f7 fb1c 	bl	80090e8 <lwip_htons>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	b2db      	uxtb	r3, r3
 8011ab4:	f003 0303 	and.w	r3, r3, #3
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d001      	beq.n	8011ac0 <tcp_output+0x2a0>
 8011abc:	2301      	movs	r3, #1
 8011abe:	e000      	b.n	8011ac2 <tcp_output+0x2a2>
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	442b      	add	r3, r5
 8011ac4:	4423      	add	r3, r4
 8011ac6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	1ad3      	subs	r3, r2, r3
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	da02      	bge.n	8011ada <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	68ba      	ldr	r2, [r7, #8]
 8011ad8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011adc:	891b      	ldrh	r3, [r3, #8]
 8011ade:	461c      	mov	r4, r3
 8011ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae2:	68db      	ldr	r3, [r3, #12]
 8011ae4:	899b      	ldrh	r3, [r3, #12]
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7f7 fafd 	bl	80090e8 <lwip_htons>
 8011aee:	4603      	mov	r3, r0
 8011af0:	b2db      	uxtb	r3, r3
 8011af2:	f003 0303 	and.w	r3, r3, #3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d001      	beq.n	8011afe <tcp_output+0x2de>
 8011afa:	2301      	movs	r3, #1
 8011afc:	e000      	b.n	8011b00 <tcp_output+0x2e0>
 8011afe:	2300      	movs	r3, #0
 8011b00:	4423      	add	r3, r4
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d049      	beq.n	8011b9a <tcp_output+0x37a>
      seg->next = NULL;
 8011b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b08:	2200      	movs	r2, #0
 8011b0a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d105      	bne.n	8011b20 <tcp_output+0x300>
        pcb->unacked = seg;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b18:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1c:	623b      	str	r3, [r7, #32]
 8011b1e:	e03f      	b.n	8011ba0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b22:	68db      	ldr	r3, [r3, #12]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7f7 faf3 	bl	8009112 <lwip_htonl>
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	6a3b      	ldr	r3, [r7, #32]
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7f7 faec 	bl	8009112 <lwip_htonl>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	1ae3      	subs	r3, r4, r3
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	da24      	bge.n	8011b8c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	3370      	adds	r3, #112	; 0x70
 8011b46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011b48:	e002      	b.n	8011b50 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011b4a:	69fb      	ldr	r3, [r7, #28]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011b50:	69fb      	ldr	r3, [r7, #28]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d011      	beq.n	8011b7c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7f7 fad6 	bl	8009112 <lwip_htonl>
 8011b66:	4604      	mov	r4, r0
 8011b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6a:	68db      	ldr	r3, [r3, #12]
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7f7 facf 	bl	8009112 <lwip_htonl>
 8011b74:	4603      	mov	r3, r0
 8011b76:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	dbe6      	blt.n	8011b4a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	681a      	ldr	r2, [r3, #0]
 8011b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b82:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b88:	601a      	str	r2, [r3, #0]
 8011b8a:	e009      	b.n	8011ba0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011b8c:	6a3b      	ldr	r3, [r7, #32]
 8011b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b90:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011b92:	6a3b      	ldr	r3, [r7, #32]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	623b      	str	r3, [r7, #32]
 8011b98:	e002      	b.n	8011ba0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011b9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b9c:	f7fc fc37 	bl	800e40e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ba4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d012      	beq.n	8011bd2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7f7 faad 	bl	8009112 <lwip_htonl>
 8011bb8:	4602      	mov	r2, r0
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bbe:	1ad3      	subs	r3, r2, r3
 8011bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bc2:	8912      	ldrh	r2, [r2, #8]
 8011bc4:	4413      	add	r3, r2
  while (seg != NULL &&
 8011bc6:	69ba      	ldr	r2, [r7, #24]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	f4bf aed9 	bcs.w	8011980 <tcp_output+0x160>
 8011bce:	e000      	b.n	8011bd2 <tcp_output+0x3b2>
      break;
 8011bd0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d108      	bne.n	8011bec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011be2:	e004      	b.n	8011bee <tcp_output+0x3ce>
    goto output_done;
 8011be4:	bf00      	nop
 8011be6:	e002      	b.n	8011bee <tcp_output+0x3ce>
    goto output_done;
 8011be8:	bf00      	nop
 8011bea:	e000      	b.n	8011bee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011bec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	8b5b      	ldrh	r3, [r3, #26]
 8011bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011bf6:	b29a      	uxth	r2, r3
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011bfc:	2300      	movs	r3, #0
}
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3728      	adds	r7, #40	; 0x28
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bdb0      	pop	{r4, r5, r7, pc}
 8011c06:	bf00      	nop

08011c08 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d106      	bne.n	8011c24 <tcp_output_segment_busy+0x1c>
 8011c16:	4b09      	ldr	r3, [pc, #36]	; (8011c3c <tcp_output_segment_busy+0x34>)
 8011c18:	f240 529a 	movw	r2, #1434	; 0x59a
 8011c1c:	4908      	ldr	r1, [pc, #32]	; (8011c40 <tcp_output_segment_busy+0x38>)
 8011c1e:	4809      	ldr	r0, [pc, #36]	; (8011c44 <tcp_output_segment_busy+0x3c>)
 8011c20:	f001 f8c2 	bl	8012da8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	7b9b      	ldrb	r3, [r3, #14]
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d001      	beq.n	8011c32 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011c2e:	2301      	movs	r3, #1
 8011c30:	e000      	b.n	8011c34 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011c32:	2300      	movs	r3, #0
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	3708      	adds	r7, #8
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	08015e64 	.word	0x08015e64
 8011c40:	08016424 	.word	0x08016424
 8011c44:	08015edc 	.word	0x08015edc

08011c48 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011c48:	b5b0      	push	{r4, r5, r7, lr}
 8011c4a:	b08c      	sub	sp, #48	; 0x30
 8011c4c:	af04      	add	r7, sp, #16
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d106      	bne.n	8011c68 <tcp_output_segment+0x20>
 8011c5a:	4b63      	ldr	r3, [pc, #396]	; (8011de8 <tcp_output_segment+0x1a0>)
 8011c5c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011c60:	4962      	ldr	r1, [pc, #392]	; (8011dec <tcp_output_segment+0x1a4>)
 8011c62:	4863      	ldr	r0, [pc, #396]	; (8011df0 <tcp_output_segment+0x1a8>)
 8011c64:	f001 f8a0 	bl	8012da8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d106      	bne.n	8011c7c <tcp_output_segment+0x34>
 8011c6e:	4b5e      	ldr	r3, [pc, #376]	; (8011de8 <tcp_output_segment+0x1a0>)
 8011c70:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011c74:	495f      	ldr	r1, [pc, #380]	; (8011df4 <tcp_output_segment+0x1ac>)
 8011c76:	485e      	ldr	r0, [pc, #376]	; (8011df0 <tcp_output_segment+0x1a8>)
 8011c78:	f001 f896 	bl	8012da8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d106      	bne.n	8011c90 <tcp_output_segment+0x48>
 8011c82:	4b59      	ldr	r3, [pc, #356]	; (8011de8 <tcp_output_segment+0x1a0>)
 8011c84:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011c88:	495b      	ldr	r1, [pc, #364]	; (8011df8 <tcp_output_segment+0x1b0>)
 8011c8a:	4859      	ldr	r0, [pc, #356]	; (8011df0 <tcp_output_segment+0x1a8>)
 8011c8c:	f001 f88c 	bl	8012da8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011c90:	68f8      	ldr	r0, [r7, #12]
 8011c92:	f7ff ffb9 	bl	8011c08 <tcp_output_segment_busy>
 8011c96:	4603      	mov	r3, r0
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d001      	beq.n	8011ca0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	e09f      	b.n	8011de0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	68dc      	ldr	r4, [r3, #12]
 8011ca8:	4610      	mov	r0, r2
 8011caa:	f7f7 fa32 	bl	8009112 <lwip_htonl>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	68dc      	ldr	r4, [r3, #12]
 8011cba:	4610      	mov	r0, r2
 8011cbc:	f7f7 fa14 	bl	80090e8 <lwip_htons>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc8:	68ba      	ldr	r2, [r7, #8]
 8011cca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011ccc:	441a      	add	r2, r3
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	3314      	adds	r3, #20
 8011cd8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	7a9b      	ldrb	r3, [r3, #10]
 8011cde:	f003 0301 	and.w	r3, r3, #1
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d015      	beq.n	8011d12 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	3304      	adds	r3, #4
 8011cea:	461a      	mov	r2, r3
 8011cec:	6879      	ldr	r1, [r7, #4]
 8011cee:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011cf2:	f7fc fe83 	bl	800e9fc <tcp_eff_send_mss_netif>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011cfa:	8b7b      	ldrh	r3, [r7, #26]
 8011cfc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7f7 fa06 	bl	8009112 <lwip_htonl>
 8011d06:	4602      	mov	r2, r0
 8011d08:	69fb      	ldr	r3, [r7, #28]
 8011d0a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011d0c:	69fb      	ldr	r3, [r7, #28]
 8011d0e:	3304      	adds	r3, #4
 8011d10:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	da02      	bge.n	8011d22 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d10c      	bne.n	8011d44 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011d2a:	4b34      	ldr	r3, [pc, #208]	; (8011dfc <tcp_output_segment+0x1b4>)
 8011d2c:	681a      	ldr	r2, [r3, #0]
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7f7 f9ea 	bl	8009112 <lwip_htonl>
 8011d3e:	4602      	mov	r2, r0
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	68da      	ldr	r2, [r3, #12]
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	685b      	ldr	r3, [r3, #4]
 8011d4e:	1ad3      	subs	r3, r2, r3
 8011d50:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	8959      	ldrh	r1, [r3, #10]
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	685b      	ldr	r3, [r3, #4]
 8011d5c:	8b3a      	ldrh	r2, [r7, #24]
 8011d5e:	1a8a      	subs	r2, r1, r2
 8011d60:	b292      	uxth	r2, r2
 8011d62:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	8919      	ldrh	r1, [r3, #8]
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	8b3a      	ldrh	r2, [r7, #24]
 8011d70:	1a8a      	subs	r2, r1, r2
 8011d72:	b292      	uxth	r2, r2
 8011d74:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	68fa      	ldr	r2, [r7, #12]
 8011d7c:	68d2      	ldr	r2, [r2, #12]
 8011d7e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	2200      	movs	r2, #0
 8011d86:	741a      	strb	r2, [r3, #16]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	f103 0214 	add.w	r2, r3, #20
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	7a9b      	ldrb	r3, [r3, #10]
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	f003 0304 	and.w	r3, r3, #4
 8011d9e:	4413      	add	r3, r2
 8011da0:	69fa      	ldr	r2, [r7, #28]
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d006      	beq.n	8011db4 <tcp_output_segment+0x16c>
 8011da6:	4b10      	ldr	r3, [pc, #64]	; (8011de8 <tcp_output_segment+0x1a0>)
 8011da8:	f240 621c 	movw	r2, #1564	; 0x61c
 8011dac:	4914      	ldr	r1, [pc, #80]	; (8011e00 <tcp_output_segment+0x1b8>)
 8011dae:	4810      	ldr	r0, [pc, #64]	; (8011df0 <tcp_output_segment+0x1a8>)
 8011db0:	f000 fffa 	bl	8012da8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	6858      	ldr	r0, [r3, #4]
 8011db8:	68b9      	ldr	r1, [r7, #8]
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	1d1c      	adds	r4, r3, #4
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	7add      	ldrb	r5, [r3, #11]
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	7a9b      	ldrb	r3, [r3, #10]
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	9202      	str	r2, [sp, #8]
 8011dca:	2206      	movs	r2, #6
 8011dcc:	9201      	str	r2, [sp, #4]
 8011dce:	9300      	str	r3, [sp, #0]
 8011dd0:	462b      	mov	r3, r5
 8011dd2:	4622      	mov	r2, r4
 8011dd4:	f7f8 fe6e 	bl	800aab4 <ip4_output_if>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011ddc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3720      	adds	r7, #32
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bdb0      	pop	{r4, r5, r7, pc}
 8011de8:	08015e64 	.word	0x08015e64
 8011dec:	0801644c 	.word	0x0801644c
 8011df0:	08015edc 	.word	0x08015edc
 8011df4:	0801646c 	.word	0x0801646c
 8011df8:	0801648c 	.word	0x0801648c
 8011dfc:	24008180 	.word	0x24008180
 8011e00:	080164b0 	.word	0x080164b0

08011e04 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011e04:	b5b0      	push	{r4, r5, r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d106      	bne.n	8011e20 <tcp_rexmit_rto_prepare+0x1c>
 8011e12:	4b31      	ldr	r3, [pc, #196]	; (8011ed8 <tcp_rexmit_rto_prepare+0xd4>)
 8011e14:	f240 6263 	movw	r2, #1635	; 0x663
 8011e18:	4930      	ldr	r1, [pc, #192]	; (8011edc <tcp_rexmit_rto_prepare+0xd8>)
 8011e1a:	4831      	ldr	r0, [pc, #196]	; (8011ee0 <tcp_rexmit_rto_prepare+0xdc>)
 8011e1c:	f000 ffc4 	bl	8012da8 <iprintf>

  if (pcb->unacked == NULL) {
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d102      	bne.n	8011e2e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011e28:	f06f 0305 	mvn.w	r3, #5
 8011e2c:	e050      	b.n	8011ed0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e32:	60fb      	str	r3, [r7, #12]
 8011e34:	e00b      	b.n	8011e4e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011e36:	68f8      	ldr	r0, [r7, #12]
 8011e38:	f7ff fee6 	bl	8011c08 <tcp_output_segment_busy>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d002      	beq.n	8011e48 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011e42:	f06f 0305 	mvn.w	r3, #5
 8011e46:	e043      	b.n	8011ed0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	60fb      	str	r3, [r7, #12]
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1ef      	bne.n	8011e36 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011e56:	68f8      	ldr	r0, [r7, #12]
 8011e58:	f7ff fed6 	bl	8011c08 <tcp_output_segment_busy>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d002      	beq.n	8011e68 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011e62:	f06f 0305 	mvn.w	r3, #5
 8011e66:	e033      	b.n	8011ed0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	8b5b      	ldrh	r3, [r3, #26]
 8011e82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011e86:	b29a      	uxth	r2, r3
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	68db      	ldr	r3, [r3, #12]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7f7 f93d 	bl	8009112 <lwip_htonl>
 8011e98:	4604      	mov	r4, r0
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	891b      	ldrh	r3, [r3, #8]
 8011e9e:	461d      	mov	r5, r3
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	899b      	ldrh	r3, [r3, #12]
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7f7 f91d 	bl	80090e8 <lwip_htons>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	f003 0303 	and.w	r3, r3, #3
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d001      	beq.n	8011ebe <tcp_rexmit_rto_prepare+0xba>
 8011eba:	2301      	movs	r3, #1
 8011ebc:	e000      	b.n	8011ec0 <tcp_rexmit_rto_prepare+0xbc>
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	442b      	add	r3, r5
 8011ec2:	18e2      	adds	r2, r4, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011ece:	2300      	movs	r3, #0
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3710      	adds	r7, #16
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8011ed8:	08015e64 	.word	0x08015e64
 8011edc:	080164c4 	.word	0x080164c4
 8011ee0:	08015edc 	.word	0x08015edc

08011ee4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d106      	bne.n	8011f00 <tcp_rexmit_rto_commit+0x1c>
 8011ef2:	4b0d      	ldr	r3, [pc, #52]	; (8011f28 <tcp_rexmit_rto_commit+0x44>)
 8011ef4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011ef8:	490c      	ldr	r1, [pc, #48]	; (8011f2c <tcp_rexmit_rto_commit+0x48>)
 8011efa:	480d      	ldr	r0, [pc, #52]	; (8011f30 <tcp_rexmit_rto_commit+0x4c>)
 8011efc:	f000 ff54 	bl	8012da8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f06:	2bff      	cmp	r3, #255	; 0xff
 8011f08:	d007      	beq.n	8011f1a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f10:	3301      	adds	r3, #1
 8011f12:	b2da      	uxtb	r2, r3
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f7ff fc80 	bl	8011820 <tcp_output>
}
 8011f20:	bf00      	nop
 8011f22:	3708      	adds	r7, #8
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}
 8011f28:	08015e64 	.word	0x08015e64
 8011f2c:	080164e8 	.word	0x080164e8
 8011f30:	08015edc 	.word	0x08015edc

08011f34 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b082      	sub	sp, #8
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d106      	bne.n	8011f50 <tcp_rexmit_rto+0x1c>
 8011f42:	4b0a      	ldr	r3, [pc, #40]	; (8011f6c <tcp_rexmit_rto+0x38>)
 8011f44:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011f48:	4909      	ldr	r1, [pc, #36]	; (8011f70 <tcp_rexmit_rto+0x3c>)
 8011f4a:	480a      	ldr	r0, [pc, #40]	; (8011f74 <tcp_rexmit_rto+0x40>)
 8011f4c:	f000 ff2c 	bl	8012da8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f7ff ff57 	bl	8011e04 <tcp_rexmit_rto_prepare>
 8011f56:	4603      	mov	r3, r0
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d102      	bne.n	8011f62 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f7ff ffc1 	bl	8011ee4 <tcp_rexmit_rto_commit>
  }
}
 8011f62:	bf00      	nop
 8011f64:	3708      	adds	r7, #8
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	08015e64 	.word	0x08015e64
 8011f70:	0801650c 	.word	0x0801650c
 8011f74:	08015edc 	.word	0x08015edc

08011f78 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011f78:	b590      	push	{r4, r7, lr}
 8011f7a:	b085      	sub	sp, #20
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d106      	bne.n	8011f94 <tcp_rexmit+0x1c>
 8011f86:	4b2f      	ldr	r3, [pc, #188]	; (8012044 <tcp_rexmit+0xcc>)
 8011f88:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011f8c:	492e      	ldr	r1, [pc, #184]	; (8012048 <tcp_rexmit+0xd0>)
 8011f8e:	482f      	ldr	r0, [pc, #188]	; (801204c <tcp_rexmit+0xd4>)
 8011f90:	f000 ff0a 	bl	8012da8 <iprintf>

  if (pcb->unacked == NULL) {
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d102      	bne.n	8011fa2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011f9c:	f06f 0305 	mvn.w	r3, #5
 8011fa0:	e04c      	b.n	801203c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fa6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011fa8:	68b8      	ldr	r0, [r7, #8]
 8011faa:	f7ff fe2d 	bl	8011c08 <tcp_output_segment_busy>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d002      	beq.n	8011fba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011fb4:	f06f 0305 	mvn.w	r3, #5
 8011fb8:	e040      	b.n	801203c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	336c      	adds	r3, #108	; 0x6c
 8011fc6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011fc8:	e002      	b.n	8011fd0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d011      	beq.n	8011ffc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7f7 f896 	bl	8009112 <lwip_htonl>
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7f7 f88f 	bl	8009112 <lwip_htonl>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	dbe6      	blt.n	8011fca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	681a      	ldr	r2, [r3, #0]
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	68ba      	ldr	r2, [r7, #8]
 8012008:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d103      	bne.n	801201a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2200      	movs	r2, #0
 8012016:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012020:	2bff      	cmp	r3, #255	; 0xff
 8012022:	d007      	beq.n	8012034 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801202a:	3301      	adds	r3, #1
 801202c:	b2da      	uxtb	r2, r3
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2200      	movs	r2, #0
 8012038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801203a:	2300      	movs	r3, #0
}
 801203c:	4618      	mov	r0, r3
 801203e:	3714      	adds	r7, #20
 8012040:	46bd      	mov	sp, r7
 8012042:	bd90      	pop	{r4, r7, pc}
 8012044:	08015e64 	.word	0x08015e64
 8012048:	08016528 	.word	0x08016528
 801204c:	08015edc 	.word	0x08015edc

08012050 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d106      	bne.n	801206c <tcp_rexmit_fast+0x1c>
 801205e:	4b2a      	ldr	r3, [pc, #168]	; (8012108 <tcp_rexmit_fast+0xb8>)
 8012060:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012064:	4929      	ldr	r1, [pc, #164]	; (801210c <tcp_rexmit_fast+0xbc>)
 8012066:	482a      	ldr	r0, [pc, #168]	; (8012110 <tcp_rexmit_fast+0xc0>)
 8012068:	f000 fe9e 	bl	8012da8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012070:	2b00      	cmp	r3, #0
 8012072:	d045      	beq.n	8012100 <tcp_rexmit_fast+0xb0>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	8b5b      	ldrh	r3, [r3, #26]
 8012078:	f003 0304 	and.w	r3, r3, #4
 801207c:	2b00      	cmp	r3, #0
 801207e:	d13f      	bne.n	8012100 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f7ff ff79 	bl	8011f78 <tcp_rexmit>
 8012086:	4603      	mov	r3, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	d139      	bne.n	8012100 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012098:	4293      	cmp	r3, r2
 801209a:	bf28      	it	cs
 801209c:	4613      	movcs	r3, r2
 801209e:	b29b      	uxth	r3, r3
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	da00      	bge.n	80120a6 <tcp_rexmit_fast+0x56>
 80120a4:	3301      	adds	r3, #1
 80120a6:	105b      	asrs	r3, r3, #1
 80120a8:	b29a      	uxth	r2, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80120b6:	461a      	mov	r2, r3
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120bc:	005b      	lsls	r3, r3, #1
 80120be:	429a      	cmp	r2, r3
 80120c0:	d206      	bcs.n	80120d0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120c6:	005b      	lsls	r3, r3, #1
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120da:	4619      	mov	r1, r3
 80120dc:	0049      	lsls	r1, r1, #1
 80120de:	440b      	add	r3, r1
 80120e0:	b29b      	uxth	r3, r3
 80120e2:	4413      	add	r3, r2
 80120e4:	b29a      	uxth	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	8b5b      	ldrh	r3, [r3, #26]
 80120f0:	f043 0304 	orr.w	r3, r3, #4
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	2200      	movs	r2, #0
 80120fe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012100:	bf00      	nop
 8012102:	3708      	adds	r7, #8
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}
 8012108:	08015e64 	.word	0x08015e64
 801210c:	08016540 	.word	0x08016540
 8012110:	08015edc 	.word	0x08015edc

08012114 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b086      	sub	sp, #24
 8012118:	af00      	add	r7, sp, #0
 801211a:	60f8      	str	r0, [r7, #12]
 801211c:	607b      	str	r3, [r7, #4]
 801211e:	460b      	mov	r3, r1
 8012120:	817b      	strh	r3, [r7, #10]
 8012122:	4613      	mov	r3, r2
 8012124:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012126:	897a      	ldrh	r2, [r7, #10]
 8012128:	893b      	ldrh	r3, [r7, #8]
 801212a:	4413      	add	r3, r2
 801212c:	b29b      	uxth	r3, r3
 801212e:	3314      	adds	r3, #20
 8012130:	b29b      	uxth	r3, r3
 8012132:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012136:	4619      	mov	r1, r3
 8012138:	2022      	movs	r0, #34	; 0x22
 801213a:	f7fa fc11 	bl	800c960 <pbuf_alloc>
 801213e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d04d      	beq.n	80121e2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012146:	897b      	ldrh	r3, [r7, #10]
 8012148:	3313      	adds	r3, #19
 801214a:	697a      	ldr	r2, [r7, #20]
 801214c:	8952      	ldrh	r2, [r2, #10]
 801214e:	4293      	cmp	r3, r2
 8012150:	db06      	blt.n	8012160 <tcp_output_alloc_header_common+0x4c>
 8012152:	4b26      	ldr	r3, [pc, #152]	; (80121ec <tcp_output_alloc_header_common+0xd8>)
 8012154:	f240 7223 	movw	r2, #1827	; 0x723
 8012158:	4925      	ldr	r1, [pc, #148]	; (80121f0 <tcp_output_alloc_header_common+0xdc>)
 801215a:	4826      	ldr	r0, [pc, #152]	; (80121f4 <tcp_output_alloc_header_common+0xe0>)
 801215c:	f000 fe24 	bl	8012da8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	685b      	ldr	r3, [r3, #4]
 8012164:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012166:	8c3b      	ldrh	r3, [r7, #32]
 8012168:	4618      	mov	r0, r3
 801216a:	f7f6 ffbd 	bl	80090e8 <lwip_htons>
 801216e:	4603      	mov	r3, r0
 8012170:	461a      	mov	r2, r3
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012178:	4618      	mov	r0, r3
 801217a:	f7f6 ffb5 	bl	80090e8 <lwip_htons>
 801217e:	4603      	mov	r3, r0
 8012180:	461a      	mov	r2, r3
 8012182:	693b      	ldr	r3, [r7, #16]
 8012184:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	687a      	ldr	r2, [r7, #4]
 801218a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f7f6 ffc0 	bl	8009112 <lwip_htonl>
 8012192:	4602      	mov	r2, r0
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012198:	897b      	ldrh	r3, [r7, #10]
 801219a:	089b      	lsrs	r3, r3, #2
 801219c:	b29b      	uxth	r3, r3
 801219e:	3305      	adds	r3, #5
 80121a0:	b29b      	uxth	r3, r3
 80121a2:	031b      	lsls	r3, r3, #12
 80121a4:	b29a      	uxth	r2, r3
 80121a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	4313      	orrs	r3, r2
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7f6 ff99 	bl	80090e8 <lwip_htons>
 80121b6:	4603      	mov	r3, r0
 80121b8:	461a      	mov	r2, r3
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80121be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7f6 ff91 	bl	80090e8 <lwip_htons>
 80121c6:	4603      	mov	r3, r0
 80121c8:	461a      	mov	r2, r3
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	2200      	movs	r2, #0
 80121d2:	741a      	strb	r2, [r3, #16]
 80121d4:	2200      	movs	r2, #0
 80121d6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	2200      	movs	r2, #0
 80121dc:	749a      	strb	r2, [r3, #18]
 80121de:	2200      	movs	r2, #0
 80121e0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80121e2:	697b      	ldr	r3, [r7, #20]
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3718      	adds	r7, #24
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	08015e64 	.word	0x08015e64
 80121f0:	08016560 	.word	0x08016560
 80121f4:	08015edc 	.word	0x08015edc

080121f8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80121f8:	b5b0      	push	{r4, r5, r7, lr}
 80121fa:	b08a      	sub	sp, #40	; 0x28
 80121fc:	af04      	add	r7, sp, #16
 80121fe:	60f8      	str	r0, [r7, #12]
 8012200:	607b      	str	r3, [r7, #4]
 8012202:	460b      	mov	r3, r1
 8012204:	817b      	strh	r3, [r7, #10]
 8012206:	4613      	mov	r3, r2
 8012208:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d106      	bne.n	801221e <tcp_output_alloc_header+0x26>
 8012210:	4b15      	ldr	r3, [pc, #84]	; (8012268 <tcp_output_alloc_header+0x70>)
 8012212:	f240 7242 	movw	r2, #1858	; 0x742
 8012216:	4915      	ldr	r1, [pc, #84]	; (801226c <tcp_output_alloc_header+0x74>)
 8012218:	4815      	ldr	r0, [pc, #84]	; (8012270 <tcp_output_alloc_header+0x78>)
 801221a:	f000 fdc5 	bl	8012da8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	8adb      	ldrh	r3, [r3, #22]
 8012226:	68fa      	ldr	r2, [r7, #12]
 8012228:	8b12      	ldrh	r2, [r2, #24]
 801222a:	68f9      	ldr	r1, [r7, #12]
 801222c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801222e:	893d      	ldrh	r5, [r7, #8]
 8012230:	897c      	ldrh	r4, [r7, #10]
 8012232:	9103      	str	r1, [sp, #12]
 8012234:	2110      	movs	r1, #16
 8012236:	9102      	str	r1, [sp, #8]
 8012238:	9201      	str	r2, [sp, #4]
 801223a:	9300      	str	r3, [sp, #0]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	462a      	mov	r2, r5
 8012240:	4621      	mov	r1, r4
 8012242:	f7ff ff67 	bl	8012114 <tcp_output_alloc_header_common>
 8012246:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d006      	beq.n	801225c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012252:	68fa      	ldr	r2, [r7, #12]
 8012254:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012256:	441a      	add	r2, r3
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801225c:	697b      	ldr	r3, [r7, #20]
}
 801225e:	4618      	mov	r0, r3
 8012260:	3718      	adds	r7, #24
 8012262:	46bd      	mov	sp, r7
 8012264:	bdb0      	pop	{r4, r5, r7, pc}
 8012266:	bf00      	nop
 8012268:	08015e64 	.word	0x08015e64
 801226c:	08016590 	.word	0x08016590
 8012270:	08015edc 	.word	0x08015edc

08012274 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b088      	sub	sp, #32
 8012278:	af00      	add	r7, sp, #0
 801227a:	60f8      	str	r0, [r7, #12]
 801227c:	60b9      	str	r1, [r7, #8]
 801227e:	4611      	mov	r1, r2
 8012280:	461a      	mov	r2, r3
 8012282:	460b      	mov	r3, r1
 8012284:	71fb      	strb	r3, [r7, #7]
 8012286:	4613      	mov	r3, r2
 8012288:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801228a:	2300      	movs	r3, #0
 801228c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d106      	bne.n	80122a2 <tcp_output_fill_options+0x2e>
 8012294:	4b13      	ldr	r3, [pc, #76]	; (80122e4 <tcp_output_fill_options+0x70>)
 8012296:	f240 7256 	movw	r2, #1878	; 0x756
 801229a:	4913      	ldr	r1, [pc, #76]	; (80122e8 <tcp_output_fill_options+0x74>)
 801229c:	4813      	ldr	r0, [pc, #76]	; (80122ec <tcp_output_fill_options+0x78>)
 801229e:	f000 fd83 	bl	8012da8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	3314      	adds	r3, #20
 80122ac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	f103 0214 	add.w	r2, r3, #20
 80122b4:	8bfb      	ldrh	r3, [r7, #30]
 80122b6:	009b      	lsls	r3, r3, #2
 80122b8:	4619      	mov	r1, r3
 80122ba:	79fb      	ldrb	r3, [r7, #7]
 80122bc:	009b      	lsls	r3, r3, #2
 80122be:	f003 0304 	and.w	r3, r3, #4
 80122c2:	440b      	add	r3, r1
 80122c4:	4413      	add	r3, r2
 80122c6:	697a      	ldr	r2, [r7, #20]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d006      	beq.n	80122da <tcp_output_fill_options+0x66>
 80122cc:	4b05      	ldr	r3, [pc, #20]	; (80122e4 <tcp_output_fill_options+0x70>)
 80122ce:	f240 7275 	movw	r2, #1909	; 0x775
 80122d2:	4907      	ldr	r1, [pc, #28]	; (80122f0 <tcp_output_fill_options+0x7c>)
 80122d4:	4805      	ldr	r0, [pc, #20]	; (80122ec <tcp_output_fill_options+0x78>)
 80122d6:	f000 fd67 	bl	8012da8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80122da:	bf00      	nop
 80122dc:	3720      	adds	r7, #32
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	08015e64 	.word	0x08015e64
 80122e8:	080165b8 	.word	0x080165b8
 80122ec:	08015edc 	.word	0x08015edc
 80122f0:	080164b0 	.word	0x080164b0

080122f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b08a      	sub	sp, #40	; 0x28
 80122f8:	af04      	add	r7, sp, #16
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
 8012300:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d106      	bne.n	8012316 <tcp_output_control_segment+0x22>
 8012308:	4b1c      	ldr	r3, [pc, #112]	; (801237c <tcp_output_control_segment+0x88>)
 801230a:	f240 7287 	movw	r2, #1927	; 0x787
 801230e:	491c      	ldr	r1, [pc, #112]	; (8012380 <tcp_output_control_segment+0x8c>)
 8012310:	481c      	ldr	r0, [pc, #112]	; (8012384 <tcp_output_control_segment+0x90>)
 8012312:	f000 fd49 	bl	8012da8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012316:	683a      	ldr	r2, [r7, #0]
 8012318:	6879      	ldr	r1, [r7, #4]
 801231a:	68f8      	ldr	r0, [r7, #12]
 801231c:	f7fe ff40 	bl	80111a0 <tcp_route>
 8012320:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d102      	bne.n	801232e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012328:	23fc      	movs	r3, #252	; 0xfc
 801232a:	75fb      	strb	r3, [r7, #23]
 801232c:	e01c      	b.n	8012368 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d006      	beq.n	8012342 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	7adb      	ldrb	r3, [r3, #11]
 8012338:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	7a9b      	ldrb	r3, [r3, #10]
 801233e:	757b      	strb	r3, [r7, #21]
 8012340:	e003      	b.n	801234a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012342:	23ff      	movs	r3, #255	; 0xff
 8012344:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012346:	2300      	movs	r3, #0
 8012348:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801234a:	7dba      	ldrb	r2, [r7, #22]
 801234c:	693b      	ldr	r3, [r7, #16]
 801234e:	9302      	str	r3, [sp, #8]
 8012350:	2306      	movs	r3, #6
 8012352:	9301      	str	r3, [sp, #4]
 8012354:	7d7b      	ldrb	r3, [r7, #21]
 8012356:	9300      	str	r3, [sp, #0]
 8012358:	4613      	mov	r3, r2
 801235a:	683a      	ldr	r2, [r7, #0]
 801235c:	6879      	ldr	r1, [r7, #4]
 801235e:	68b8      	ldr	r0, [r7, #8]
 8012360:	f7f8 fba8 	bl	800aab4 <ip4_output_if>
 8012364:	4603      	mov	r3, r0
 8012366:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012368:	68b8      	ldr	r0, [r7, #8]
 801236a:	f7fa fddd 	bl	800cf28 <pbuf_free>
  return err;
 801236e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012372:	4618      	mov	r0, r3
 8012374:	3718      	adds	r7, #24
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	08015e64 	.word	0x08015e64
 8012380:	080165e0 	.word	0x080165e0
 8012384:	08015edc 	.word	0x08015edc

08012388 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012388:	b590      	push	{r4, r7, lr}
 801238a:	b08b      	sub	sp, #44	; 0x2c
 801238c:	af04      	add	r7, sp, #16
 801238e:	60f8      	str	r0, [r7, #12]
 8012390:	60b9      	str	r1, [r7, #8]
 8012392:	607a      	str	r2, [r7, #4]
 8012394:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d106      	bne.n	80123aa <tcp_rst+0x22>
 801239c:	4b1f      	ldr	r3, [pc, #124]	; (801241c <tcp_rst+0x94>)
 801239e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80123a2:	491f      	ldr	r1, [pc, #124]	; (8012420 <tcp_rst+0x98>)
 80123a4:	481f      	ldr	r0, [pc, #124]	; (8012424 <tcp_rst+0x9c>)
 80123a6:	f000 fcff 	bl	8012da8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80123aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d106      	bne.n	80123be <tcp_rst+0x36>
 80123b0:	4b1a      	ldr	r3, [pc, #104]	; (801241c <tcp_rst+0x94>)
 80123b2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80123b6:	491c      	ldr	r1, [pc, #112]	; (8012428 <tcp_rst+0xa0>)
 80123b8:	481a      	ldr	r0, [pc, #104]	; (8012424 <tcp_rst+0x9c>)
 80123ba:	f000 fcf5 	bl	8012da8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80123be:	2300      	movs	r3, #0
 80123c0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80123c2:	f246 0308 	movw	r3, #24584	; 0x6008
 80123c6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80123c8:	7dfb      	ldrb	r3, [r7, #23]
 80123ca:	b29c      	uxth	r4, r3
 80123cc:	68b8      	ldr	r0, [r7, #8]
 80123ce:	f7f6 fea0 	bl	8009112 <lwip_htonl>
 80123d2:	4602      	mov	r2, r0
 80123d4:	8abb      	ldrh	r3, [r7, #20]
 80123d6:	9303      	str	r3, [sp, #12]
 80123d8:	2314      	movs	r3, #20
 80123da:	9302      	str	r3, [sp, #8]
 80123dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80123de:	9301      	str	r3, [sp, #4]
 80123e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80123e2:	9300      	str	r3, [sp, #0]
 80123e4:	4613      	mov	r3, r2
 80123e6:	2200      	movs	r2, #0
 80123e8:	4621      	mov	r1, r4
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f7ff fe92 	bl	8012114 <tcp_output_alloc_header_common>
 80123f0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d00c      	beq.n	8012412 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80123f8:	7dfb      	ldrb	r3, [r7, #23]
 80123fa:	2200      	movs	r2, #0
 80123fc:	6939      	ldr	r1, [r7, #16]
 80123fe:	68f8      	ldr	r0, [r7, #12]
 8012400:	f7ff ff38 	bl	8012274 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012406:	683a      	ldr	r2, [r7, #0]
 8012408:	6939      	ldr	r1, [r7, #16]
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f7ff ff72 	bl	80122f4 <tcp_output_control_segment>
 8012410:	e000      	b.n	8012414 <tcp_rst+0x8c>
    return;
 8012412:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012414:	371c      	adds	r7, #28
 8012416:	46bd      	mov	sp, r7
 8012418:	bd90      	pop	{r4, r7, pc}
 801241a:	bf00      	nop
 801241c:	08015e64 	.word	0x08015e64
 8012420:	0801660c 	.word	0x0801660c
 8012424:	08015edc 	.word	0x08015edc
 8012428:	08016628 	.word	0x08016628

0801242c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801242c:	b590      	push	{r4, r7, lr}
 801242e:	b087      	sub	sp, #28
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012434:	2300      	movs	r3, #0
 8012436:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012438:	2300      	movs	r3, #0
 801243a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d106      	bne.n	8012450 <tcp_send_empty_ack+0x24>
 8012442:	4b28      	ldr	r3, [pc, #160]	; (80124e4 <tcp_send_empty_ack+0xb8>)
 8012444:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012448:	4927      	ldr	r1, [pc, #156]	; (80124e8 <tcp_send_empty_ack+0xbc>)
 801244a:	4828      	ldr	r0, [pc, #160]	; (80124ec <tcp_send_empty_ack+0xc0>)
 801244c:	f000 fcac 	bl	8012da8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012450:	7dfb      	ldrb	r3, [r7, #23]
 8012452:	009b      	lsls	r3, r3, #2
 8012454:	b2db      	uxtb	r3, r3
 8012456:	f003 0304 	and.w	r3, r3, #4
 801245a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801245c:	7d7b      	ldrb	r3, [r7, #21]
 801245e:	b29c      	uxth	r4, r3
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012464:	4618      	mov	r0, r3
 8012466:	f7f6 fe54 	bl	8009112 <lwip_htonl>
 801246a:	4603      	mov	r3, r0
 801246c:	2200      	movs	r2, #0
 801246e:	4621      	mov	r1, r4
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f7ff fec1 	bl	80121f8 <tcp_output_alloc_header>
 8012476:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d109      	bne.n	8012492 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	8b5b      	ldrh	r3, [r3, #26]
 8012482:	f043 0303 	orr.w	r3, r3, #3
 8012486:	b29a      	uxth	r2, r3
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801248c:	f06f 0301 	mvn.w	r3, #1
 8012490:	e023      	b.n	80124da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012492:	7dbb      	ldrb	r3, [r7, #22]
 8012494:	7dfa      	ldrb	r2, [r7, #23]
 8012496:	6939      	ldr	r1, [r7, #16]
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f7ff feeb 	bl	8012274 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801249e:	687a      	ldr	r2, [r7, #4]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	3304      	adds	r3, #4
 80124a4:	6939      	ldr	r1, [r7, #16]
 80124a6:	6878      	ldr	r0, [r7, #4]
 80124a8:	f7ff ff24 	bl	80122f4 <tcp_output_control_segment>
 80124ac:	4603      	mov	r3, r0
 80124ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80124b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d007      	beq.n	80124c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	8b5b      	ldrh	r3, [r3, #26]
 80124bc:	f043 0303 	orr.w	r3, r3, #3
 80124c0:	b29a      	uxth	r2, r3
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	835a      	strh	r2, [r3, #26]
 80124c6:	e006      	b.n	80124d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	8b5b      	ldrh	r3, [r3, #26]
 80124cc:	f023 0303 	bic.w	r3, r3, #3
 80124d0:	b29a      	uxth	r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80124d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80124da:	4618      	mov	r0, r3
 80124dc:	371c      	adds	r7, #28
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd90      	pop	{r4, r7, pc}
 80124e2:	bf00      	nop
 80124e4:	08015e64 	.word	0x08015e64
 80124e8:	08016644 	.word	0x08016644
 80124ec:	08015edc 	.word	0x08015edc

080124f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80124f0:	b590      	push	{r4, r7, lr}
 80124f2:	b087      	sub	sp, #28
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124f8:	2300      	movs	r3, #0
 80124fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d106      	bne.n	8012510 <tcp_keepalive+0x20>
 8012502:	4b18      	ldr	r3, [pc, #96]	; (8012564 <tcp_keepalive+0x74>)
 8012504:	f640 0224 	movw	r2, #2084	; 0x824
 8012508:	4917      	ldr	r1, [pc, #92]	; (8012568 <tcp_keepalive+0x78>)
 801250a:	4818      	ldr	r0, [pc, #96]	; (801256c <tcp_keepalive+0x7c>)
 801250c:	f000 fc4c 	bl	8012da8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012510:	7dfb      	ldrb	r3, [r7, #23]
 8012512:	b29c      	uxth	r4, r3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012518:	3b01      	subs	r3, #1
 801251a:	4618      	mov	r0, r3
 801251c:	f7f6 fdf9 	bl	8009112 <lwip_htonl>
 8012520:	4603      	mov	r3, r0
 8012522:	2200      	movs	r2, #0
 8012524:	4621      	mov	r1, r4
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f7ff fe66 	bl	80121f8 <tcp_output_alloc_header>
 801252c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d102      	bne.n	801253a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012534:	f04f 33ff 	mov.w	r3, #4294967295
 8012538:	e010      	b.n	801255c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801253a:	7dfb      	ldrb	r3, [r7, #23]
 801253c:	2200      	movs	r2, #0
 801253e:	6939      	ldr	r1, [r7, #16]
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f7ff fe97 	bl	8012274 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	3304      	adds	r3, #4
 801254c:	6939      	ldr	r1, [r7, #16]
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f7ff fed0 	bl	80122f4 <tcp_output_control_segment>
 8012554:	4603      	mov	r3, r0
 8012556:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012558:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801255c:	4618      	mov	r0, r3
 801255e:	371c      	adds	r7, #28
 8012560:	46bd      	mov	sp, r7
 8012562:	bd90      	pop	{r4, r7, pc}
 8012564:	08015e64 	.word	0x08015e64
 8012568:	08016664 	.word	0x08016664
 801256c:	08015edc 	.word	0x08015edc

08012570 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012570:	b590      	push	{r4, r7, lr}
 8012572:	b08b      	sub	sp, #44	; 0x2c
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012578:	2300      	movs	r3, #0
 801257a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d106      	bne.n	8012592 <tcp_zero_window_probe+0x22>
 8012584:	4b4c      	ldr	r3, [pc, #304]	; (80126b8 <tcp_zero_window_probe+0x148>)
 8012586:	f640 024f 	movw	r2, #2127	; 0x84f
 801258a:	494c      	ldr	r1, [pc, #304]	; (80126bc <tcp_zero_window_probe+0x14c>)
 801258c:	484c      	ldr	r0, [pc, #304]	; (80126c0 <tcp_zero_window_probe+0x150>)
 801258e:	f000 fc0b 	bl	8012da8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012596:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012598:	6a3b      	ldr	r3, [r7, #32]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d101      	bne.n	80125a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801259e:	2300      	movs	r3, #0
 80125a0:	e086      	b.n	80126b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80125a8:	2bff      	cmp	r3, #255	; 0xff
 80125aa:	d007      	beq.n	80125bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80125b2:	3301      	adds	r3, #1
 80125b4:	b2da      	uxtb	r2, r3
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80125bc:	6a3b      	ldr	r3, [r7, #32]
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	899b      	ldrh	r3, [r3, #12]
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7f6 fd8f 	bl	80090e8 <lwip_htons>
 80125ca:	4603      	mov	r3, r0
 80125cc:	b2db      	uxtb	r3, r3
 80125ce:	f003 0301 	and.w	r3, r3, #1
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d005      	beq.n	80125e2 <tcp_zero_window_probe+0x72>
 80125d6:	6a3b      	ldr	r3, [r7, #32]
 80125d8:	891b      	ldrh	r3, [r3, #8]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d101      	bne.n	80125e2 <tcp_zero_window_probe+0x72>
 80125de:	2301      	movs	r3, #1
 80125e0:	e000      	b.n	80125e4 <tcp_zero_window_probe+0x74>
 80125e2:	2300      	movs	r3, #0
 80125e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80125e6:	7ffb      	ldrb	r3, [r7, #31]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	bf0c      	ite	eq
 80125ec:	2301      	moveq	r3, #1
 80125ee:	2300      	movne	r3, #0
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80125f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125f8:	b299      	uxth	r1, r3
 80125fa:	6a3b      	ldr	r3, [r7, #32]
 80125fc:	68db      	ldr	r3, [r3, #12]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	8bba      	ldrh	r2, [r7, #28]
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f7ff fdf8 	bl	80121f8 <tcp_output_alloc_header>
 8012608:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801260a:	69bb      	ldr	r3, [r7, #24]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d102      	bne.n	8012616 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012610:	f04f 33ff 	mov.w	r3, #4294967295
 8012614:	e04c      	b.n	80126b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012616:	69bb      	ldr	r3, [r7, #24]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801261c:	7ffb      	ldrb	r3, [r7, #31]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d011      	beq.n	8012646 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	899b      	ldrh	r3, [r3, #12]
 8012626:	b29b      	uxth	r3, r3
 8012628:	b21b      	sxth	r3, r3
 801262a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801262e:	b21c      	sxth	r4, r3
 8012630:	2011      	movs	r0, #17
 8012632:	f7f6 fd59 	bl	80090e8 <lwip_htons>
 8012636:	4603      	mov	r3, r0
 8012638:	b21b      	sxth	r3, r3
 801263a:	4323      	orrs	r3, r4
 801263c:	b21b      	sxth	r3, r3
 801263e:	b29a      	uxth	r2, r3
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	819a      	strh	r2, [r3, #12]
 8012644:	e010      	b.n	8012668 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	3314      	adds	r3, #20
 801264c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801264e:	6a3b      	ldr	r3, [r7, #32]
 8012650:	6858      	ldr	r0, [r3, #4]
 8012652:	6a3b      	ldr	r3, [r7, #32]
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	891a      	ldrh	r2, [r3, #8]
 8012658:	6a3b      	ldr	r3, [r7, #32]
 801265a:	891b      	ldrh	r3, [r3, #8]
 801265c:	1ad3      	subs	r3, r2, r3
 801265e:	b29b      	uxth	r3, r3
 8012660:	2201      	movs	r2, #1
 8012662:	6939      	ldr	r1, [r7, #16]
 8012664:	f7fa fe4a 	bl	800d2fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012668:	6a3b      	ldr	r3, [r7, #32]
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	4618      	mov	r0, r3
 8012670:	f7f6 fd4f 	bl	8009112 <lwip_htonl>
 8012674:	4603      	mov	r3, r0
 8012676:	3301      	adds	r3, #1
 8012678:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	1ad3      	subs	r3, r2, r3
 8012682:	2b00      	cmp	r3, #0
 8012684:	da02      	bge.n	801268c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	68fa      	ldr	r2, [r7, #12]
 801268a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801268c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012690:	2200      	movs	r2, #0
 8012692:	69b9      	ldr	r1, [r7, #24]
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f7ff fded 	bl	8012274 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801269a:	687a      	ldr	r2, [r7, #4]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	3304      	adds	r3, #4
 80126a0:	69b9      	ldr	r1, [r7, #24]
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f7ff fe26 	bl	80122f4 <tcp_output_control_segment>
 80126a8:	4603      	mov	r3, r0
 80126aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80126ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	372c      	adds	r7, #44	; 0x2c
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd90      	pop	{r4, r7, pc}
 80126b8:	08015e64 	.word	0x08015e64
 80126bc:	08016680 	.word	0x08016680
 80126c0:	08015edc 	.word	0x08015edc

080126c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80126cc:	f7fa ff04 	bl	800d4d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80126d0:	4b0a      	ldr	r3, [pc, #40]	; (80126fc <tcpip_tcp_timer+0x38>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d103      	bne.n	80126e0 <tcpip_tcp_timer+0x1c>
 80126d8:	4b09      	ldr	r3, [pc, #36]	; (8012700 <tcpip_tcp_timer+0x3c>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d005      	beq.n	80126ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80126e0:	2200      	movs	r2, #0
 80126e2:	4908      	ldr	r1, [pc, #32]	; (8012704 <tcpip_tcp_timer+0x40>)
 80126e4:	20fa      	movs	r0, #250	; 0xfa
 80126e6:	f000 f8f3 	bl	80128d0 <sys_timeout>
 80126ea:	e003      	b.n	80126f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80126ec:	4b06      	ldr	r3, [pc, #24]	; (8012708 <tcpip_tcp_timer+0x44>)
 80126ee:	2200      	movs	r2, #0
 80126f0:	601a      	str	r2, [r3, #0]
  }
}
 80126f2:	bf00      	nop
 80126f4:	bf00      	nop
 80126f6:	3708      	adds	r7, #8
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	2400818c 	.word	0x2400818c
 8012700:	24008190 	.word	0x24008190
 8012704:	080126c5 	.word	0x080126c5
 8012708:	240081d8 	.word	0x240081d8

0801270c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012710:	4b0a      	ldr	r3, [pc, #40]	; (801273c <tcp_timer_needed+0x30>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d10f      	bne.n	8012738 <tcp_timer_needed+0x2c>
 8012718:	4b09      	ldr	r3, [pc, #36]	; (8012740 <tcp_timer_needed+0x34>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d103      	bne.n	8012728 <tcp_timer_needed+0x1c>
 8012720:	4b08      	ldr	r3, [pc, #32]	; (8012744 <tcp_timer_needed+0x38>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d007      	beq.n	8012738 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012728:	4b04      	ldr	r3, [pc, #16]	; (801273c <tcp_timer_needed+0x30>)
 801272a:	2201      	movs	r2, #1
 801272c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801272e:	2200      	movs	r2, #0
 8012730:	4905      	ldr	r1, [pc, #20]	; (8012748 <tcp_timer_needed+0x3c>)
 8012732:	20fa      	movs	r0, #250	; 0xfa
 8012734:	f000 f8cc 	bl	80128d0 <sys_timeout>
  }
}
 8012738:	bf00      	nop
 801273a:	bd80      	pop	{r7, pc}
 801273c:	240081d8 	.word	0x240081d8
 8012740:	2400818c 	.word	0x2400818c
 8012744:	24008190 	.word	0x24008190
 8012748:	080126c5 	.word	0x080126c5

0801274c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b086      	sub	sp, #24
 8012750:	af00      	add	r7, sp, #0
 8012752:	60f8      	str	r0, [r7, #12]
 8012754:	60b9      	str	r1, [r7, #8]
 8012756:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012758:	2006      	movs	r0, #6
 801275a:	f7f9 fd5b 	bl	800c214 <memp_malloc>
 801275e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d109      	bne.n	801277a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d151      	bne.n	8012810 <sys_timeout_abs+0xc4>
 801276c:	4b2a      	ldr	r3, [pc, #168]	; (8012818 <sys_timeout_abs+0xcc>)
 801276e:	22be      	movs	r2, #190	; 0xbe
 8012770:	492a      	ldr	r1, [pc, #168]	; (801281c <sys_timeout_abs+0xd0>)
 8012772:	482b      	ldr	r0, [pc, #172]	; (8012820 <sys_timeout_abs+0xd4>)
 8012774:	f000 fb18 	bl	8012da8 <iprintf>
    return;
 8012778:	e04a      	b.n	8012810 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	2200      	movs	r2, #0
 801277e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	68ba      	ldr	r2, [r7, #8]
 8012784:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	68fa      	ldr	r2, [r7, #12]
 8012790:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012792:	4b24      	ldr	r3, [pc, #144]	; (8012824 <sys_timeout_abs+0xd8>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d103      	bne.n	80127a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801279a:	4a22      	ldr	r2, [pc, #136]	; (8012824 <sys_timeout_abs+0xd8>)
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	6013      	str	r3, [r2, #0]
    return;
 80127a0:	e037      	b.n	8012812 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	685a      	ldr	r2, [r3, #4]
 80127a6:	4b1f      	ldr	r3, [pc, #124]	; (8012824 <sys_timeout_abs+0xd8>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	1ad3      	subs	r3, r2, r3
 80127ae:	0fdb      	lsrs	r3, r3, #31
 80127b0:	f003 0301 	and.w	r3, r3, #1
 80127b4:	b2db      	uxtb	r3, r3
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d007      	beq.n	80127ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80127ba:	4b1a      	ldr	r3, [pc, #104]	; (8012824 <sys_timeout_abs+0xd8>)
 80127bc:	681a      	ldr	r2, [r3, #0]
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80127c2:	4a18      	ldr	r2, [pc, #96]	; (8012824 <sys_timeout_abs+0xd8>)
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	6013      	str	r3, [r2, #0]
 80127c8:	e023      	b.n	8012812 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80127ca:	4b16      	ldr	r3, [pc, #88]	; (8012824 <sys_timeout_abs+0xd8>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	617b      	str	r3, [r7, #20]
 80127d0:	e01a      	b.n	8012808 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d00b      	beq.n	80127f2 <sys_timeout_abs+0xa6>
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	685a      	ldr	r2, [r3, #4]
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	1ad3      	subs	r3, r2, r3
 80127e6:	0fdb      	lsrs	r3, r3, #31
 80127e8:	f003 0301 	and.w	r3, r3, #1
 80127ec:	b2db      	uxtb	r3, r3
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d007      	beq.n	8012802 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80127f2:	697b      	ldr	r3, [r7, #20]
 80127f4:	681a      	ldr	r2, [r3, #0]
 80127f6:	693b      	ldr	r3, [r7, #16]
 80127f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	693a      	ldr	r2, [r7, #16]
 80127fe:	601a      	str	r2, [r3, #0]
        break;
 8012800:	e007      	b.n	8012812 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	617b      	str	r3, [r7, #20]
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d1e1      	bne.n	80127d2 <sys_timeout_abs+0x86>
 801280e:	e000      	b.n	8012812 <sys_timeout_abs+0xc6>
    return;
 8012810:	bf00      	nop
      }
    }
  }
}
 8012812:	3718      	adds	r7, #24
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}
 8012818:	080166a4 	.word	0x080166a4
 801281c:	080166fc 	.word	0x080166fc
 8012820:	0801673c 	.word	0x0801673c
 8012824:	240081d0 	.word	0x240081d0

08012828 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b086      	sub	sp, #24
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	4798      	blx	r3

  now = sys_now();
 801283a:	f7f6 f927 	bl	8008a8c <sys_now>
 801283e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	681a      	ldr	r2, [r3, #0]
 8012844:	4b0f      	ldr	r3, [pc, #60]	; (8012884 <lwip_cyclic_timer+0x5c>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4413      	add	r3, r2
 801284a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801284c:	68fa      	ldr	r2, [r7, #12]
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	1ad3      	subs	r3, r2, r3
 8012852:	0fdb      	lsrs	r3, r3, #31
 8012854:	f003 0301 	and.w	r3, r3, #1
 8012858:	b2db      	uxtb	r3, r3
 801285a:	2b00      	cmp	r3, #0
 801285c:	d009      	beq.n	8012872 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	681a      	ldr	r2, [r3, #0]
 8012862:	693b      	ldr	r3, [r7, #16]
 8012864:	4413      	add	r3, r2
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	4907      	ldr	r1, [pc, #28]	; (8012888 <lwip_cyclic_timer+0x60>)
 801286a:	4618      	mov	r0, r3
 801286c:	f7ff ff6e 	bl	801274c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012870:	e004      	b.n	801287c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	4904      	ldr	r1, [pc, #16]	; (8012888 <lwip_cyclic_timer+0x60>)
 8012876:	68f8      	ldr	r0, [r7, #12]
 8012878:	f7ff ff68 	bl	801274c <sys_timeout_abs>
}
 801287c:	bf00      	nop
 801287e:	3718      	adds	r7, #24
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	240081d4 	.word	0x240081d4
 8012888:	08012829 	.word	0x08012829

0801288c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012892:	2301      	movs	r3, #1
 8012894:	607b      	str	r3, [r7, #4]
 8012896:	e00e      	b.n	80128b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012898:	4a0b      	ldr	r2, [pc, #44]	; (80128c8 <sys_timeouts_init+0x3c>)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	00db      	lsls	r3, r3, #3
 80128a4:	4a08      	ldr	r2, [pc, #32]	; (80128c8 <sys_timeouts_init+0x3c>)
 80128a6:	4413      	add	r3, r2
 80128a8:	461a      	mov	r2, r3
 80128aa:	4908      	ldr	r1, [pc, #32]	; (80128cc <sys_timeouts_init+0x40>)
 80128ac:	f000 f810 	bl	80128d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	3301      	adds	r3, #1
 80128b4:	607b      	str	r3, [r7, #4]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2b03      	cmp	r3, #3
 80128ba:	d9ed      	bls.n	8012898 <sys_timeouts_init+0xc>
  }
}
 80128bc:	bf00      	nop
 80128be:	bf00      	nop
 80128c0:	3708      	adds	r7, #8
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}
 80128c6:	bf00      	nop
 80128c8:	08016c48 	.word	0x08016c48
 80128cc:	08012829 	.word	0x08012829

080128d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b086      	sub	sp, #24
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80128e2:	d306      	bcc.n	80128f2 <sys_timeout+0x22>
 80128e4:	4b0a      	ldr	r3, [pc, #40]	; (8012910 <sys_timeout+0x40>)
 80128e6:	f240 1229 	movw	r2, #297	; 0x129
 80128ea:	490a      	ldr	r1, [pc, #40]	; (8012914 <sys_timeout+0x44>)
 80128ec:	480a      	ldr	r0, [pc, #40]	; (8012918 <sys_timeout+0x48>)
 80128ee:	f000 fa5b 	bl	8012da8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80128f2:	f7f6 f8cb 	bl	8008a8c <sys_now>
 80128f6:	4602      	mov	r2, r0
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	4413      	add	r3, r2
 80128fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80128fe:	687a      	ldr	r2, [r7, #4]
 8012900:	68b9      	ldr	r1, [r7, #8]
 8012902:	6978      	ldr	r0, [r7, #20]
 8012904:	f7ff ff22 	bl	801274c <sys_timeout_abs>
#endif
}
 8012908:	bf00      	nop
 801290a:	3718      	adds	r7, #24
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}
 8012910:	080166a4 	.word	0x080166a4
 8012914:	08016764 	.word	0x08016764
 8012918:	0801673c 	.word	0x0801673c

0801291c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b084      	sub	sp, #16
 8012920:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012922:	f7f6 f8b3 	bl	8008a8c <sys_now>
 8012926:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012928:	4b1a      	ldr	r3, [pc, #104]	; (8012994 <sys_check_timeouts+0x78>)
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	b2db      	uxtb	r3, r3
 801292e:	2b00      	cmp	r3, #0
 8012930:	d001      	beq.n	8012936 <sys_check_timeouts+0x1a>
 8012932:	f7f9 ffbf 	bl	800c8b4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012936:	4b18      	ldr	r3, [pc, #96]	; (8012998 <sys_check_timeouts+0x7c>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d022      	beq.n	8012988 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	68fa      	ldr	r2, [r7, #12]
 8012948:	1ad3      	subs	r3, r2, r3
 801294a:	0fdb      	lsrs	r3, r3, #31
 801294c:	f003 0301 	and.w	r3, r3, #1
 8012950:	b2db      	uxtb	r3, r3
 8012952:	2b00      	cmp	r3, #0
 8012954:	d11a      	bne.n	801298c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	4a0f      	ldr	r2, [pc, #60]	; (8012998 <sys_check_timeouts+0x7c>)
 801295c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	689b      	ldr	r3, [r3, #8]
 8012962:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	68db      	ldr	r3, [r3, #12]
 8012968:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	4a0b      	ldr	r2, [pc, #44]	; (801299c <sys_check_timeouts+0x80>)
 8012970:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012972:	68b9      	ldr	r1, [r7, #8]
 8012974:	2006      	movs	r0, #6
 8012976:	f7f9 fcbd 	bl	800c2f4 <memp_free>
    if (handler != NULL) {
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d0d3      	beq.n	8012928 <sys_check_timeouts+0xc>
      handler(arg);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6838      	ldr	r0, [r7, #0]
 8012984:	4798      	blx	r3
  do {
 8012986:	e7cf      	b.n	8012928 <sys_check_timeouts+0xc>
      return;
 8012988:	bf00      	nop
 801298a:	e000      	b.n	801298e <sys_check_timeouts+0x72>
      return;
 801298c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801298e:	3710      	adds	r7, #16
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}
 8012994:	2400817d 	.word	0x2400817d
 8012998:	240081d0 	.word	0x240081d0
 801299c:	240081d4 	.word	0x240081d4

080129a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80129a4:	f000 fa18 	bl	8012dd8 <rand>
 80129a8:	4603      	mov	r3, r0
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80129b6:	b29a      	uxth	r2, r3
 80129b8:	4b01      	ldr	r3, [pc, #4]	; (80129c0 <udp_init+0x20>)
 80129ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80129bc:	bf00      	nop
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	24000014 	.word	0x24000014

080129c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b084      	sub	sp, #16
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	60b9      	str	r1, [r7, #8]
 80129ce:	4613      	mov	r3, r2
 80129d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d105      	bne.n	80129e4 <udp_input_local_match+0x20>
 80129d8:	4b27      	ldr	r3, [pc, #156]	; (8012a78 <udp_input_local_match+0xb4>)
 80129da:	2287      	movs	r2, #135	; 0x87
 80129dc:	4927      	ldr	r1, [pc, #156]	; (8012a7c <udp_input_local_match+0xb8>)
 80129de:	4828      	ldr	r0, [pc, #160]	; (8012a80 <udp_input_local_match+0xbc>)
 80129e0:	f000 f9e2 	bl	8012da8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d105      	bne.n	80129f6 <udp_input_local_match+0x32>
 80129ea:	4b23      	ldr	r3, [pc, #140]	; (8012a78 <udp_input_local_match+0xb4>)
 80129ec:	2288      	movs	r2, #136	; 0x88
 80129ee:	4925      	ldr	r1, [pc, #148]	; (8012a84 <udp_input_local_match+0xc0>)
 80129f0:	4823      	ldr	r0, [pc, #140]	; (8012a80 <udp_input_local_match+0xbc>)
 80129f2:	f000 f9d9 	bl	8012da8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	7a1b      	ldrb	r3, [r3, #8]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d00b      	beq.n	8012a16 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	7a1a      	ldrb	r2, [r3, #8]
 8012a02:	4b21      	ldr	r3, [pc, #132]	; (8012a88 <udp_input_local_match+0xc4>)
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d001      	beq.n	8012a16 <udp_input_local_match+0x52>
    return 0;
 8012a12:	2300      	movs	r3, #0
 8012a14:	e02b      	b.n	8012a6e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012a16:	79fb      	ldrb	r3, [r7, #7]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d018      	beq.n	8012a4e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d013      	beq.n	8012a4a <udp_input_local_match+0x86>
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d00f      	beq.n	8012a4a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012a2a:	4b17      	ldr	r3, [pc, #92]	; (8012a88 <udp_input_local_match+0xc4>)
 8012a2c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a32:	d00a      	beq.n	8012a4a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	681a      	ldr	r2, [r3, #0]
 8012a38:	4b13      	ldr	r3, [pc, #76]	; (8012a88 <udp_input_local_match+0xc4>)
 8012a3a:	695b      	ldr	r3, [r3, #20]
 8012a3c:	405a      	eors	r2, r3
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	3308      	adds	r3, #8
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d110      	bne.n	8012a6c <udp_input_local_match+0xa8>
          return 1;
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	e00f      	b.n	8012a6e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d009      	beq.n	8012a68 <udp_input_local_match+0xa4>
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d005      	beq.n	8012a68 <udp_input_local_match+0xa4>
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	681a      	ldr	r2, [r3, #0]
 8012a60:	4b09      	ldr	r3, [pc, #36]	; (8012a88 <udp_input_local_match+0xc4>)
 8012a62:	695b      	ldr	r3, [r3, #20]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d101      	bne.n	8012a6c <udp_input_local_match+0xa8>
        return 1;
 8012a68:	2301      	movs	r3, #1
 8012a6a:	e000      	b.n	8012a6e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012a6c:	2300      	movs	r3, #0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3710      	adds	r7, #16
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
 8012a76:	bf00      	nop
 8012a78:	080167b0 	.word	0x080167b0
 8012a7c:	08016804 	.word	0x08016804
 8012a80:	08016828 	.word	0x08016828
 8012a84:	08016850 	.word	0x08016850
 8012a88:	24005248 	.word	0x24005248

08012a8c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012a8c:	b590      	push	{r4, r7, lr}
 8012a8e:	b08d      	sub	sp, #52	; 0x34
 8012a90:	af02      	add	r7, sp, #8
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012a96:	2300      	movs	r3, #0
 8012a98:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d105      	bne.n	8012aac <udp_input+0x20>
 8012aa0:	4b7c      	ldr	r3, [pc, #496]	; (8012c94 <udp_input+0x208>)
 8012aa2:	22cf      	movs	r2, #207	; 0xcf
 8012aa4:	497c      	ldr	r1, [pc, #496]	; (8012c98 <udp_input+0x20c>)
 8012aa6:	487d      	ldr	r0, [pc, #500]	; (8012c9c <udp_input+0x210>)
 8012aa8:	f000 f97e 	bl	8012da8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d105      	bne.n	8012abe <udp_input+0x32>
 8012ab2:	4b78      	ldr	r3, [pc, #480]	; (8012c94 <udp_input+0x208>)
 8012ab4:	22d0      	movs	r2, #208	; 0xd0
 8012ab6:	497a      	ldr	r1, [pc, #488]	; (8012ca0 <udp_input+0x214>)
 8012ab8:	4878      	ldr	r0, [pc, #480]	; (8012c9c <udp_input+0x210>)
 8012aba:	f000 f975 	bl	8012da8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	895b      	ldrh	r3, [r3, #10]
 8012ac2:	2b07      	cmp	r3, #7
 8012ac4:	d803      	bhi.n	8012ace <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7fa fa2e 	bl	800cf28 <pbuf_free>
    goto end;
 8012acc:	e0de      	b.n	8012c8c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	685b      	ldr	r3, [r3, #4]
 8012ad2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012ad4:	4b73      	ldr	r3, [pc, #460]	; (8012ca4 <udp_input+0x218>)
 8012ad6:	695b      	ldr	r3, [r3, #20]
 8012ad8:	4a72      	ldr	r2, [pc, #456]	; (8012ca4 <udp_input+0x218>)
 8012ada:	6812      	ldr	r2, [r2, #0]
 8012adc:	4611      	mov	r1, r2
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7f8 f8c0 	bl	800ac64 <ip4_addr_isbroadcast_u32>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	881b      	ldrh	r3, [r3, #0]
 8012aec:	b29b      	uxth	r3, r3
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7f6 fafa 	bl	80090e8 <lwip_htons>
 8012af4:	4603      	mov	r3, r0
 8012af6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	885b      	ldrh	r3, [r3, #2]
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7f6 faf2 	bl	80090e8 <lwip_htons>
 8012b04:	4603      	mov	r3, r0
 8012b06:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012b10:	2300      	movs	r3, #0
 8012b12:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b14:	4b64      	ldr	r3, [pc, #400]	; (8012ca8 <udp_input+0x21c>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	627b      	str	r3, [r7, #36]	; 0x24
 8012b1a:	e054      	b.n	8012bc6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1e:	8a5b      	ldrh	r3, [r3, #18]
 8012b20:	89fa      	ldrh	r2, [r7, #14]
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d14a      	bne.n	8012bbc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012b26:	7cfb      	ldrb	r3, [r7, #19]
 8012b28:	461a      	mov	r2, r3
 8012b2a:	6839      	ldr	r1, [r7, #0]
 8012b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b2e:	f7ff ff49 	bl	80129c4 <udp_input_local_match>
 8012b32:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d041      	beq.n	8012bbc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b3a:	7c1b      	ldrb	r3, [r3, #16]
 8012b3c:	f003 0304 	and.w	r3, r3, #4
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d11d      	bne.n	8012b80 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d102      	bne.n	8012b50 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4c:	61fb      	str	r3, [r7, #28]
 8012b4e:	e017      	b.n	8012b80 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012b50:	7cfb      	ldrb	r3, [r7, #19]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d014      	beq.n	8012b80 <udp_input+0xf4>
 8012b56:	4b53      	ldr	r3, [pc, #332]	; (8012ca4 <udp_input+0x218>)
 8012b58:	695b      	ldr	r3, [r3, #20]
 8012b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b5e:	d10f      	bne.n	8012b80 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	681a      	ldr	r2, [r3, #0]
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	3304      	adds	r3, #4
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d008      	beq.n	8012b80 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b70:	681a      	ldr	r2, [r3, #0]
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	3304      	adds	r3, #4
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d101      	bne.n	8012b80 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b82:	8a9b      	ldrh	r3, [r3, #20]
 8012b84:	8a3a      	ldrh	r2, [r7, #16]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d118      	bne.n	8012bbc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d005      	beq.n	8012b9e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b94:	685a      	ldr	r2, [r3, #4]
 8012b96:	4b43      	ldr	r3, [pc, #268]	; (8012ca4 <udp_input+0x218>)
 8012b98:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d10e      	bne.n	8012bbc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012b9e:	6a3b      	ldr	r3, [r7, #32]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d014      	beq.n	8012bce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba6:	68da      	ldr	r2, [r3, #12]
 8012ba8:	6a3b      	ldr	r3, [r7, #32]
 8012baa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012bac:	4b3e      	ldr	r3, [pc, #248]	; (8012ca8 <udp_input+0x21c>)
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012bb4:	4a3c      	ldr	r2, [pc, #240]	; (8012ca8 <udp_input+0x21c>)
 8012bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012bba:	e008      	b.n	8012bce <udp_input+0x142>
      }
    }

    prev = pcb;
 8012bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bbe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc2:	68db      	ldr	r3, [r3, #12]
 8012bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8012bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d1a7      	bne.n	8012b1c <udp_input+0x90>
 8012bcc:	e000      	b.n	8012bd0 <udp_input+0x144>
        break;
 8012bce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d101      	bne.n	8012bda <udp_input+0x14e>
    pcb = uncon_pcb;
 8012bd6:	69fb      	ldr	r3, [r7, #28]
 8012bd8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d002      	beq.n	8012be6 <udp_input+0x15a>
    for_us = 1;
 8012be0:	2301      	movs	r3, #1
 8012be2:	76fb      	strb	r3, [r7, #27]
 8012be4:	e00a      	b.n	8012bfc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	3304      	adds	r3, #4
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	4b2d      	ldr	r3, [pc, #180]	; (8012ca4 <udp_input+0x218>)
 8012bee:	695b      	ldr	r3, [r3, #20]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	bf0c      	ite	eq
 8012bf4:	2301      	moveq	r3, #1
 8012bf6:	2300      	movne	r3, #0
 8012bf8:	b2db      	uxtb	r3, r3
 8012bfa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012bfc:	7efb      	ldrb	r3, [r7, #27]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d041      	beq.n	8012c86 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012c02:	2108      	movs	r1, #8
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f7fa f909 	bl	800ce1c <pbuf_remove_header>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d00a      	beq.n	8012c26 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012c10:	4b20      	ldr	r3, [pc, #128]	; (8012c94 <udp_input+0x208>)
 8012c12:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012c16:	4925      	ldr	r1, [pc, #148]	; (8012cac <udp_input+0x220>)
 8012c18:	4820      	ldr	r0, [pc, #128]	; (8012c9c <udp_input+0x210>)
 8012c1a:	f000 f8c5 	bl	8012da8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f7fa f982 	bl	800cf28 <pbuf_free>
      goto end;
 8012c24:	e032      	b.n	8012c8c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d012      	beq.n	8012c52 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2e:	699b      	ldr	r3, [r3, #24]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d00a      	beq.n	8012c4a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c36:	699c      	ldr	r4, [r3, #24]
 8012c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3a:	69d8      	ldr	r0, [r3, #28]
 8012c3c:	8a3b      	ldrh	r3, [r7, #16]
 8012c3e:	9300      	str	r3, [sp, #0]
 8012c40:	4b1b      	ldr	r3, [pc, #108]	; (8012cb0 <udp_input+0x224>)
 8012c42:	687a      	ldr	r2, [r7, #4]
 8012c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c46:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012c48:	e021      	b.n	8012c8e <udp_input+0x202>
        pbuf_free(p);
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f7fa f96c 	bl	800cf28 <pbuf_free>
        goto end;
 8012c50:	e01c      	b.n	8012c8c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012c52:	7cfb      	ldrb	r3, [r7, #19]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d112      	bne.n	8012c7e <udp_input+0x1f2>
 8012c58:	4b12      	ldr	r3, [pc, #72]	; (8012ca4 <udp_input+0x218>)
 8012c5a:	695b      	ldr	r3, [r3, #20]
 8012c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c60:	2be0      	cmp	r3, #224	; 0xe0
 8012c62:	d00c      	beq.n	8012c7e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012c64:	4b0f      	ldr	r3, [pc, #60]	; (8012ca4 <udp_input+0x218>)
 8012c66:	899b      	ldrh	r3, [r3, #12]
 8012c68:	3308      	adds	r3, #8
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	b21b      	sxth	r3, r3
 8012c6e:	4619      	mov	r1, r3
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7fa f946 	bl	800cf02 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012c76:	2103      	movs	r1, #3
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f7f7 fbeb 	bl	800a454 <icmp_dest_unreach>
      pbuf_free(p);
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f7fa f952 	bl	800cf28 <pbuf_free>
  return;
 8012c84:	e003      	b.n	8012c8e <udp_input+0x202>
    pbuf_free(p);
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f7fa f94e 	bl	800cf28 <pbuf_free>
  return;
 8012c8c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012c8e:	372c      	adds	r7, #44	; 0x2c
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd90      	pop	{r4, r7, pc}
 8012c94:	080167b0 	.word	0x080167b0
 8012c98:	08016878 	.word	0x08016878
 8012c9c:	08016828 	.word	0x08016828
 8012ca0:	08016890 	.word	0x08016890
 8012ca4:	24005248 	.word	0x24005248
 8012ca8:	240081dc 	.word	0x240081dc
 8012cac:	080168ac 	.word	0x080168ac
 8012cb0:	24005258 	.word	0x24005258

08012cb4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b085      	sub	sp, #20
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d01e      	beq.n	8012d02 <udp_netif_ip_addr_changed+0x4e>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d01a      	beq.n	8012d02 <udp_netif_ip_addr_changed+0x4e>
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d017      	beq.n	8012d02 <udp_netif_ip_addr_changed+0x4e>
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d013      	beq.n	8012d02 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012cda:	4b0d      	ldr	r3, [pc, #52]	; (8012d10 <udp_netif_ip_addr_changed+0x5c>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	60fb      	str	r3, [r7, #12]
 8012ce0:	e00c      	b.n	8012cfc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d103      	bne.n	8012cf6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	681a      	ldr	r2, [r3, #0]
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	68db      	ldr	r3, [r3, #12]
 8012cfa:	60fb      	str	r3, [r7, #12]
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d1ef      	bne.n	8012ce2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012d02:	bf00      	nop
 8012d04:	3714      	adds	r7, #20
 8012d06:	46bd      	mov	sp, r7
 8012d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0c:	4770      	bx	lr
 8012d0e:	bf00      	nop
 8012d10:	240081dc 	.word	0x240081dc

08012d14 <__libc_init_array>:
 8012d14:	b570      	push	{r4, r5, r6, lr}
 8012d16:	4d0d      	ldr	r5, [pc, #52]	; (8012d4c <__libc_init_array+0x38>)
 8012d18:	4c0d      	ldr	r4, [pc, #52]	; (8012d50 <__libc_init_array+0x3c>)
 8012d1a:	1b64      	subs	r4, r4, r5
 8012d1c:	10a4      	asrs	r4, r4, #2
 8012d1e:	2600      	movs	r6, #0
 8012d20:	42a6      	cmp	r6, r4
 8012d22:	d109      	bne.n	8012d38 <__libc_init_array+0x24>
 8012d24:	4d0b      	ldr	r5, [pc, #44]	; (8012d54 <__libc_init_array+0x40>)
 8012d26:	4c0c      	ldr	r4, [pc, #48]	; (8012d58 <__libc_init_array+0x44>)
 8012d28:	f001 f88e 	bl	8013e48 <_init>
 8012d2c:	1b64      	subs	r4, r4, r5
 8012d2e:	10a4      	asrs	r4, r4, #2
 8012d30:	2600      	movs	r6, #0
 8012d32:	42a6      	cmp	r6, r4
 8012d34:	d105      	bne.n	8012d42 <__libc_init_array+0x2e>
 8012d36:	bd70      	pop	{r4, r5, r6, pc}
 8012d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d3c:	4798      	blx	r3
 8012d3e:	3601      	adds	r6, #1
 8012d40:	e7ee      	b.n	8012d20 <__libc_init_array+0xc>
 8012d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d46:	4798      	blx	r3
 8012d48:	3601      	adds	r6, #1
 8012d4a:	e7f2      	b.n	8012d32 <__libc_init_array+0x1e>
 8012d4c:	08016db8 	.word	0x08016db8
 8012d50:	08016db8 	.word	0x08016db8
 8012d54:	08016db8 	.word	0x08016db8
 8012d58:	08016dbc 	.word	0x08016dbc

08012d5c <memcmp>:
 8012d5c:	b510      	push	{r4, lr}
 8012d5e:	3901      	subs	r1, #1
 8012d60:	4402      	add	r2, r0
 8012d62:	4290      	cmp	r0, r2
 8012d64:	d101      	bne.n	8012d6a <memcmp+0xe>
 8012d66:	2000      	movs	r0, #0
 8012d68:	e005      	b.n	8012d76 <memcmp+0x1a>
 8012d6a:	7803      	ldrb	r3, [r0, #0]
 8012d6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012d70:	42a3      	cmp	r3, r4
 8012d72:	d001      	beq.n	8012d78 <memcmp+0x1c>
 8012d74:	1b18      	subs	r0, r3, r4
 8012d76:	bd10      	pop	{r4, pc}
 8012d78:	3001      	adds	r0, #1
 8012d7a:	e7f2      	b.n	8012d62 <memcmp+0x6>

08012d7c <memcpy>:
 8012d7c:	440a      	add	r2, r1
 8012d7e:	4291      	cmp	r1, r2
 8012d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8012d84:	d100      	bne.n	8012d88 <memcpy+0xc>
 8012d86:	4770      	bx	lr
 8012d88:	b510      	push	{r4, lr}
 8012d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012d92:	4291      	cmp	r1, r2
 8012d94:	d1f9      	bne.n	8012d8a <memcpy+0xe>
 8012d96:	bd10      	pop	{r4, pc}

08012d98 <memset>:
 8012d98:	4402      	add	r2, r0
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d100      	bne.n	8012da2 <memset+0xa>
 8012da0:	4770      	bx	lr
 8012da2:	f803 1b01 	strb.w	r1, [r3], #1
 8012da6:	e7f9      	b.n	8012d9c <memset+0x4>

08012da8 <iprintf>:
 8012da8:	b40f      	push	{r0, r1, r2, r3}
 8012daa:	4b0a      	ldr	r3, [pc, #40]	; (8012dd4 <iprintf+0x2c>)
 8012dac:	b513      	push	{r0, r1, r4, lr}
 8012dae:	681c      	ldr	r4, [r3, #0]
 8012db0:	b124      	cbz	r4, 8012dbc <iprintf+0x14>
 8012db2:	69a3      	ldr	r3, [r4, #24]
 8012db4:	b913      	cbnz	r3, 8012dbc <iprintf+0x14>
 8012db6:	4620      	mov	r0, r4
 8012db8:	f000 f8c2 	bl	8012f40 <__sinit>
 8012dbc:	ab05      	add	r3, sp, #20
 8012dbe:	9a04      	ldr	r2, [sp, #16]
 8012dc0:	68a1      	ldr	r1, [r4, #8]
 8012dc2:	9301      	str	r3, [sp, #4]
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	f000 fa7f 	bl	80132c8 <_vfiprintf_r>
 8012dca:	b002      	add	sp, #8
 8012dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dd0:	b004      	add	sp, #16
 8012dd2:	4770      	bx	lr
 8012dd4:	24000018 	.word	0x24000018

08012dd8 <rand>:
 8012dd8:	4b16      	ldr	r3, [pc, #88]	; (8012e34 <rand+0x5c>)
 8012dda:	b510      	push	{r4, lr}
 8012ddc:	681c      	ldr	r4, [r3, #0]
 8012dde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012de0:	b9b3      	cbnz	r3, 8012e10 <rand+0x38>
 8012de2:	2018      	movs	r0, #24
 8012de4:	f000 f95e 	bl	80130a4 <malloc>
 8012de8:	63a0      	str	r0, [r4, #56]	; 0x38
 8012dea:	b928      	cbnz	r0, 8012df8 <rand+0x20>
 8012dec:	4602      	mov	r2, r0
 8012dee:	4b12      	ldr	r3, [pc, #72]	; (8012e38 <rand+0x60>)
 8012df0:	4812      	ldr	r0, [pc, #72]	; (8012e3c <rand+0x64>)
 8012df2:	214e      	movs	r1, #78	; 0x4e
 8012df4:	f000 f82e 	bl	8012e54 <__assert_func>
 8012df8:	4a11      	ldr	r2, [pc, #68]	; (8012e40 <rand+0x68>)
 8012dfa:	4b12      	ldr	r3, [pc, #72]	; (8012e44 <rand+0x6c>)
 8012dfc:	e9c0 2300 	strd	r2, r3, [r0]
 8012e00:	4b11      	ldr	r3, [pc, #68]	; (8012e48 <rand+0x70>)
 8012e02:	6083      	str	r3, [r0, #8]
 8012e04:	230b      	movs	r3, #11
 8012e06:	8183      	strh	r3, [r0, #12]
 8012e08:	2201      	movs	r2, #1
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012e10:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012e12:	4a0e      	ldr	r2, [pc, #56]	; (8012e4c <rand+0x74>)
 8012e14:	6920      	ldr	r0, [r4, #16]
 8012e16:	6963      	ldr	r3, [r4, #20]
 8012e18:	490d      	ldr	r1, [pc, #52]	; (8012e50 <rand+0x78>)
 8012e1a:	4342      	muls	r2, r0
 8012e1c:	fb01 2203 	mla	r2, r1, r3, r2
 8012e20:	fba0 0101 	umull	r0, r1, r0, r1
 8012e24:	1c43      	adds	r3, r0, #1
 8012e26:	eb42 0001 	adc.w	r0, r2, r1
 8012e2a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012e2e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012e32:	bd10      	pop	{r4, pc}
 8012e34:	24000018 	.word	0x24000018
 8012e38:	08016c6c 	.word	0x08016c6c
 8012e3c:	08016c83 	.word	0x08016c83
 8012e40:	abcd330e 	.word	0xabcd330e
 8012e44:	e66d1234 	.word	0xe66d1234
 8012e48:	0005deec 	.word	0x0005deec
 8012e4c:	5851f42d 	.word	0x5851f42d
 8012e50:	4c957f2d 	.word	0x4c957f2d

08012e54 <__assert_func>:
 8012e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e56:	4614      	mov	r4, r2
 8012e58:	461a      	mov	r2, r3
 8012e5a:	4b09      	ldr	r3, [pc, #36]	; (8012e80 <__assert_func+0x2c>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	4605      	mov	r5, r0
 8012e60:	68d8      	ldr	r0, [r3, #12]
 8012e62:	b14c      	cbz	r4, 8012e78 <__assert_func+0x24>
 8012e64:	4b07      	ldr	r3, [pc, #28]	; (8012e84 <__assert_func+0x30>)
 8012e66:	9100      	str	r1, [sp, #0]
 8012e68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e6c:	4906      	ldr	r1, [pc, #24]	; (8012e88 <__assert_func+0x34>)
 8012e6e:	462b      	mov	r3, r5
 8012e70:	f000 f8e4 	bl	801303c <fiprintf>
 8012e74:	f000 fe12 	bl	8013a9c <abort>
 8012e78:	4b04      	ldr	r3, [pc, #16]	; (8012e8c <__assert_func+0x38>)
 8012e7a:	461c      	mov	r4, r3
 8012e7c:	e7f3      	b.n	8012e66 <__assert_func+0x12>
 8012e7e:	bf00      	nop
 8012e80:	24000018 	.word	0x24000018
 8012e84:	08016cde 	.word	0x08016cde
 8012e88:	08016ceb 	.word	0x08016ceb
 8012e8c:	08016d19 	.word	0x08016d19

08012e90 <std>:
 8012e90:	2300      	movs	r3, #0
 8012e92:	b510      	push	{r4, lr}
 8012e94:	4604      	mov	r4, r0
 8012e96:	e9c0 3300 	strd	r3, r3, [r0]
 8012e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e9e:	6083      	str	r3, [r0, #8]
 8012ea0:	8181      	strh	r1, [r0, #12]
 8012ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8012ea4:	81c2      	strh	r2, [r0, #14]
 8012ea6:	6183      	str	r3, [r0, #24]
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	2208      	movs	r2, #8
 8012eac:	305c      	adds	r0, #92	; 0x5c
 8012eae:	f7ff ff73 	bl	8012d98 <memset>
 8012eb2:	4b05      	ldr	r3, [pc, #20]	; (8012ec8 <std+0x38>)
 8012eb4:	6263      	str	r3, [r4, #36]	; 0x24
 8012eb6:	4b05      	ldr	r3, [pc, #20]	; (8012ecc <std+0x3c>)
 8012eb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012eba:	4b05      	ldr	r3, [pc, #20]	; (8012ed0 <std+0x40>)
 8012ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ebe:	4b05      	ldr	r3, [pc, #20]	; (8012ed4 <std+0x44>)
 8012ec0:	6224      	str	r4, [r4, #32]
 8012ec2:	6323      	str	r3, [r4, #48]	; 0x30
 8012ec4:	bd10      	pop	{r4, pc}
 8012ec6:	bf00      	nop
 8012ec8:	08013871 	.word	0x08013871
 8012ecc:	08013893 	.word	0x08013893
 8012ed0:	080138cb 	.word	0x080138cb
 8012ed4:	080138ef 	.word	0x080138ef

08012ed8 <_cleanup_r>:
 8012ed8:	4901      	ldr	r1, [pc, #4]	; (8012ee0 <_cleanup_r+0x8>)
 8012eda:	f000 b8c1 	b.w	8013060 <_fwalk_reent>
 8012ede:	bf00      	nop
 8012ee0:	08013bd9 	.word	0x08013bd9

08012ee4 <__sfmoreglue>:
 8012ee4:	b570      	push	{r4, r5, r6, lr}
 8012ee6:	2268      	movs	r2, #104	; 0x68
 8012ee8:	1e4d      	subs	r5, r1, #1
 8012eea:	4355      	muls	r5, r2
 8012eec:	460e      	mov	r6, r1
 8012eee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012ef2:	f000 f94b 	bl	801318c <_malloc_r>
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	b140      	cbz	r0, 8012f0c <__sfmoreglue+0x28>
 8012efa:	2100      	movs	r1, #0
 8012efc:	e9c0 1600 	strd	r1, r6, [r0]
 8012f00:	300c      	adds	r0, #12
 8012f02:	60a0      	str	r0, [r4, #8]
 8012f04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012f08:	f7ff ff46 	bl	8012d98 <memset>
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	bd70      	pop	{r4, r5, r6, pc}

08012f10 <__sfp_lock_acquire>:
 8012f10:	4801      	ldr	r0, [pc, #4]	; (8012f18 <__sfp_lock_acquire+0x8>)
 8012f12:	f000 b8c5 	b.w	80130a0 <__retarget_lock_acquire_recursive>
 8012f16:	bf00      	nop
 8012f18:	240081e5 	.word	0x240081e5

08012f1c <__sfp_lock_release>:
 8012f1c:	4801      	ldr	r0, [pc, #4]	; (8012f24 <__sfp_lock_release+0x8>)
 8012f1e:	f000 b8c0 	b.w	80130a2 <__retarget_lock_release_recursive>
 8012f22:	bf00      	nop
 8012f24:	240081e5 	.word	0x240081e5

08012f28 <__sinit_lock_acquire>:
 8012f28:	4801      	ldr	r0, [pc, #4]	; (8012f30 <__sinit_lock_acquire+0x8>)
 8012f2a:	f000 b8b9 	b.w	80130a0 <__retarget_lock_acquire_recursive>
 8012f2e:	bf00      	nop
 8012f30:	240081e6 	.word	0x240081e6

08012f34 <__sinit_lock_release>:
 8012f34:	4801      	ldr	r0, [pc, #4]	; (8012f3c <__sinit_lock_release+0x8>)
 8012f36:	f000 b8b4 	b.w	80130a2 <__retarget_lock_release_recursive>
 8012f3a:	bf00      	nop
 8012f3c:	240081e6 	.word	0x240081e6

08012f40 <__sinit>:
 8012f40:	b510      	push	{r4, lr}
 8012f42:	4604      	mov	r4, r0
 8012f44:	f7ff fff0 	bl	8012f28 <__sinit_lock_acquire>
 8012f48:	69a3      	ldr	r3, [r4, #24]
 8012f4a:	b11b      	cbz	r3, 8012f54 <__sinit+0x14>
 8012f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f50:	f7ff bff0 	b.w	8012f34 <__sinit_lock_release>
 8012f54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012f58:	6523      	str	r3, [r4, #80]	; 0x50
 8012f5a:	4b13      	ldr	r3, [pc, #76]	; (8012fa8 <__sinit+0x68>)
 8012f5c:	4a13      	ldr	r2, [pc, #76]	; (8012fac <__sinit+0x6c>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	62a2      	str	r2, [r4, #40]	; 0x28
 8012f62:	42a3      	cmp	r3, r4
 8012f64:	bf04      	itt	eq
 8012f66:	2301      	moveq	r3, #1
 8012f68:	61a3      	streq	r3, [r4, #24]
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f000 f820 	bl	8012fb0 <__sfp>
 8012f70:	6060      	str	r0, [r4, #4]
 8012f72:	4620      	mov	r0, r4
 8012f74:	f000 f81c 	bl	8012fb0 <__sfp>
 8012f78:	60a0      	str	r0, [r4, #8]
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	f000 f818 	bl	8012fb0 <__sfp>
 8012f80:	2200      	movs	r2, #0
 8012f82:	60e0      	str	r0, [r4, #12]
 8012f84:	2104      	movs	r1, #4
 8012f86:	6860      	ldr	r0, [r4, #4]
 8012f88:	f7ff ff82 	bl	8012e90 <std>
 8012f8c:	68a0      	ldr	r0, [r4, #8]
 8012f8e:	2201      	movs	r2, #1
 8012f90:	2109      	movs	r1, #9
 8012f92:	f7ff ff7d 	bl	8012e90 <std>
 8012f96:	68e0      	ldr	r0, [r4, #12]
 8012f98:	2202      	movs	r2, #2
 8012f9a:	2112      	movs	r1, #18
 8012f9c:	f7ff ff78 	bl	8012e90 <std>
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	61a3      	str	r3, [r4, #24]
 8012fa4:	e7d2      	b.n	8012f4c <__sinit+0xc>
 8012fa6:	bf00      	nop
 8012fa8:	08016c68 	.word	0x08016c68
 8012fac:	08012ed9 	.word	0x08012ed9

08012fb0 <__sfp>:
 8012fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fb2:	4607      	mov	r7, r0
 8012fb4:	f7ff ffac 	bl	8012f10 <__sfp_lock_acquire>
 8012fb8:	4b1e      	ldr	r3, [pc, #120]	; (8013034 <__sfp+0x84>)
 8012fba:	681e      	ldr	r6, [r3, #0]
 8012fbc:	69b3      	ldr	r3, [r6, #24]
 8012fbe:	b913      	cbnz	r3, 8012fc6 <__sfp+0x16>
 8012fc0:	4630      	mov	r0, r6
 8012fc2:	f7ff ffbd 	bl	8012f40 <__sinit>
 8012fc6:	3648      	adds	r6, #72	; 0x48
 8012fc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012fcc:	3b01      	subs	r3, #1
 8012fce:	d503      	bpl.n	8012fd8 <__sfp+0x28>
 8012fd0:	6833      	ldr	r3, [r6, #0]
 8012fd2:	b30b      	cbz	r3, 8013018 <__sfp+0x68>
 8012fd4:	6836      	ldr	r6, [r6, #0]
 8012fd6:	e7f7      	b.n	8012fc8 <__sfp+0x18>
 8012fd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012fdc:	b9d5      	cbnz	r5, 8013014 <__sfp+0x64>
 8012fde:	4b16      	ldr	r3, [pc, #88]	; (8013038 <__sfp+0x88>)
 8012fe0:	60e3      	str	r3, [r4, #12]
 8012fe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012fe6:	6665      	str	r5, [r4, #100]	; 0x64
 8012fe8:	f000 f859 	bl	801309e <__retarget_lock_init_recursive>
 8012fec:	f7ff ff96 	bl	8012f1c <__sfp_lock_release>
 8012ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012ff8:	6025      	str	r5, [r4, #0]
 8012ffa:	61a5      	str	r5, [r4, #24]
 8012ffc:	2208      	movs	r2, #8
 8012ffe:	4629      	mov	r1, r5
 8013000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013004:	f7ff fec8 	bl	8012d98 <memset>
 8013008:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801300c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013010:	4620      	mov	r0, r4
 8013012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013014:	3468      	adds	r4, #104	; 0x68
 8013016:	e7d9      	b.n	8012fcc <__sfp+0x1c>
 8013018:	2104      	movs	r1, #4
 801301a:	4638      	mov	r0, r7
 801301c:	f7ff ff62 	bl	8012ee4 <__sfmoreglue>
 8013020:	4604      	mov	r4, r0
 8013022:	6030      	str	r0, [r6, #0]
 8013024:	2800      	cmp	r0, #0
 8013026:	d1d5      	bne.n	8012fd4 <__sfp+0x24>
 8013028:	f7ff ff78 	bl	8012f1c <__sfp_lock_release>
 801302c:	230c      	movs	r3, #12
 801302e:	603b      	str	r3, [r7, #0]
 8013030:	e7ee      	b.n	8013010 <__sfp+0x60>
 8013032:	bf00      	nop
 8013034:	08016c68 	.word	0x08016c68
 8013038:	ffff0001 	.word	0xffff0001

0801303c <fiprintf>:
 801303c:	b40e      	push	{r1, r2, r3}
 801303e:	b503      	push	{r0, r1, lr}
 8013040:	4601      	mov	r1, r0
 8013042:	ab03      	add	r3, sp, #12
 8013044:	4805      	ldr	r0, [pc, #20]	; (801305c <fiprintf+0x20>)
 8013046:	f853 2b04 	ldr.w	r2, [r3], #4
 801304a:	6800      	ldr	r0, [r0, #0]
 801304c:	9301      	str	r3, [sp, #4]
 801304e:	f000 f93b 	bl	80132c8 <_vfiprintf_r>
 8013052:	b002      	add	sp, #8
 8013054:	f85d eb04 	ldr.w	lr, [sp], #4
 8013058:	b003      	add	sp, #12
 801305a:	4770      	bx	lr
 801305c:	24000018 	.word	0x24000018

08013060 <_fwalk_reent>:
 8013060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013064:	4606      	mov	r6, r0
 8013066:	4688      	mov	r8, r1
 8013068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801306c:	2700      	movs	r7, #0
 801306e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013072:	f1b9 0901 	subs.w	r9, r9, #1
 8013076:	d505      	bpl.n	8013084 <_fwalk_reent+0x24>
 8013078:	6824      	ldr	r4, [r4, #0]
 801307a:	2c00      	cmp	r4, #0
 801307c:	d1f7      	bne.n	801306e <_fwalk_reent+0xe>
 801307e:	4638      	mov	r0, r7
 8013080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013084:	89ab      	ldrh	r3, [r5, #12]
 8013086:	2b01      	cmp	r3, #1
 8013088:	d907      	bls.n	801309a <_fwalk_reent+0x3a>
 801308a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801308e:	3301      	adds	r3, #1
 8013090:	d003      	beq.n	801309a <_fwalk_reent+0x3a>
 8013092:	4629      	mov	r1, r5
 8013094:	4630      	mov	r0, r6
 8013096:	47c0      	blx	r8
 8013098:	4307      	orrs	r7, r0
 801309a:	3568      	adds	r5, #104	; 0x68
 801309c:	e7e9      	b.n	8013072 <_fwalk_reent+0x12>

0801309e <__retarget_lock_init_recursive>:
 801309e:	4770      	bx	lr

080130a0 <__retarget_lock_acquire_recursive>:
 80130a0:	4770      	bx	lr

080130a2 <__retarget_lock_release_recursive>:
 80130a2:	4770      	bx	lr

080130a4 <malloc>:
 80130a4:	4b02      	ldr	r3, [pc, #8]	; (80130b0 <malloc+0xc>)
 80130a6:	4601      	mov	r1, r0
 80130a8:	6818      	ldr	r0, [r3, #0]
 80130aa:	f000 b86f 	b.w	801318c <_malloc_r>
 80130ae:	bf00      	nop
 80130b0:	24000018 	.word	0x24000018

080130b4 <_free_r>:
 80130b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80130b6:	2900      	cmp	r1, #0
 80130b8:	d044      	beq.n	8013144 <_free_r+0x90>
 80130ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130be:	9001      	str	r0, [sp, #4]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	f1a1 0404 	sub.w	r4, r1, #4
 80130c6:	bfb8      	it	lt
 80130c8:	18e4      	addlt	r4, r4, r3
 80130ca:	f000 fe39 	bl	8013d40 <__malloc_lock>
 80130ce:	4a1e      	ldr	r2, [pc, #120]	; (8013148 <_free_r+0x94>)
 80130d0:	9801      	ldr	r0, [sp, #4]
 80130d2:	6813      	ldr	r3, [r2, #0]
 80130d4:	b933      	cbnz	r3, 80130e4 <_free_r+0x30>
 80130d6:	6063      	str	r3, [r4, #4]
 80130d8:	6014      	str	r4, [r2, #0]
 80130da:	b003      	add	sp, #12
 80130dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130e0:	f000 be34 	b.w	8013d4c <__malloc_unlock>
 80130e4:	42a3      	cmp	r3, r4
 80130e6:	d908      	bls.n	80130fa <_free_r+0x46>
 80130e8:	6825      	ldr	r5, [r4, #0]
 80130ea:	1961      	adds	r1, r4, r5
 80130ec:	428b      	cmp	r3, r1
 80130ee:	bf01      	itttt	eq
 80130f0:	6819      	ldreq	r1, [r3, #0]
 80130f2:	685b      	ldreq	r3, [r3, #4]
 80130f4:	1949      	addeq	r1, r1, r5
 80130f6:	6021      	streq	r1, [r4, #0]
 80130f8:	e7ed      	b.n	80130d6 <_free_r+0x22>
 80130fa:	461a      	mov	r2, r3
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	b10b      	cbz	r3, 8013104 <_free_r+0x50>
 8013100:	42a3      	cmp	r3, r4
 8013102:	d9fa      	bls.n	80130fa <_free_r+0x46>
 8013104:	6811      	ldr	r1, [r2, #0]
 8013106:	1855      	adds	r5, r2, r1
 8013108:	42a5      	cmp	r5, r4
 801310a:	d10b      	bne.n	8013124 <_free_r+0x70>
 801310c:	6824      	ldr	r4, [r4, #0]
 801310e:	4421      	add	r1, r4
 8013110:	1854      	adds	r4, r2, r1
 8013112:	42a3      	cmp	r3, r4
 8013114:	6011      	str	r1, [r2, #0]
 8013116:	d1e0      	bne.n	80130da <_free_r+0x26>
 8013118:	681c      	ldr	r4, [r3, #0]
 801311a:	685b      	ldr	r3, [r3, #4]
 801311c:	6053      	str	r3, [r2, #4]
 801311e:	4421      	add	r1, r4
 8013120:	6011      	str	r1, [r2, #0]
 8013122:	e7da      	b.n	80130da <_free_r+0x26>
 8013124:	d902      	bls.n	801312c <_free_r+0x78>
 8013126:	230c      	movs	r3, #12
 8013128:	6003      	str	r3, [r0, #0]
 801312a:	e7d6      	b.n	80130da <_free_r+0x26>
 801312c:	6825      	ldr	r5, [r4, #0]
 801312e:	1961      	adds	r1, r4, r5
 8013130:	428b      	cmp	r3, r1
 8013132:	bf04      	itt	eq
 8013134:	6819      	ldreq	r1, [r3, #0]
 8013136:	685b      	ldreq	r3, [r3, #4]
 8013138:	6063      	str	r3, [r4, #4]
 801313a:	bf04      	itt	eq
 801313c:	1949      	addeq	r1, r1, r5
 801313e:	6021      	streq	r1, [r4, #0]
 8013140:	6054      	str	r4, [r2, #4]
 8013142:	e7ca      	b.n	80130da <_free_r+0x26>
 8013144:	b003      	add	sp, #12
 8013146:	bd30      	pop	{r4, r5, pc}
 8013148:	240081e8 	.word	0x240081e8

0801314c <sbrk_aligned>:
 801314c:	b570      	push	{r4, r5, r6, lr}
 801314e:	4e0e      	ldr	r6, [pc, #56]	; (8013188 <sbrk_aligned+0x3c>)
 8013150:	460c      	mov	r4, r1
 8013152:	6831      	ldr	r1, [r6, #0]
 8013154:	4605      	mov	r5, r0
 8013156:	b911      	cbnz	r1, 801315e <sbrk_aligned+0x12>
 8013158:	f000 fb7a 	bl	8013850 <_sbrk_r>
 801315c:	6030      	str	r0, [r6, #0]
 801315e:	4621      	mov	r1, r4
 8013160:	4628      	mov	r0, r5
 8013162:	f000 fb75 	bl	8013850 <_sbrk_r>
 8013166:	1c43      	adds	r3, r0, #1
 8013168:	d00a      	beq.n	8013180 <sbrk_aligned+0x34>
 801316a:	1cc4      	adds	r4, r0, #3
 801316c:	f024 0403 	bic.w	r4, r4, #3
 8013170:	42a0      	cmp	r0, r4
 8013172:	d007      	beq.n	8013184 <sbrk_aligned+0x38>
 8013174:	1a21      	subs	r1, r4, r0
 8013176:	4628      	mov	r0, r5
 8013178:	f000 fb6a 	bl	8013850 <_sbrk_r>
 801317c:	3001      	adds	r0, #1
 801317e:	d101      	bne.n	8013184 <sbrk_aligned+0x38>
 8013180:	f04f 34ff 	mov.w	r4, #4294967295
 8013184:	4620      	mov	r0, r4
 8013186:	bd70      	pop	{r4, r5, r6, pc}
 8013188:	240081ec 	.word	0x240081ec

0801318c <_malloc_r>:
 801318c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013190:	1ccd      	adds	r5, r1, #3
 8013192:	f025 0503 	bic.w	r5, r5, #3
 8013196:	3508      	adds	r5, #8
 8013198:	2d0c      	cmp	r5, #12
 801319a:	bf38      	it	cc
 801319c:	250c      	movcc	r5, #12
 801319e:	2d00      	cmp	r5, #0
 80131a0:	4607      	mov	r7, r0
 80131a2:	db01      	blt.n	80131a8 <_malloc_r+0x1c>
 80131a4:	42a9      	cmp	r1, r5
 80131a6:	d905      	bls.n	80131b4 <_malloc_r+0x28>
 80131a8:	230c      	movs	r3, #12
 80131aa:	603b      	str	r3, [r7, #0]
 80131ac:	2600      	movs	r6, #0
 80131ae:	4630      	mov	r0, r6
 80131b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b4:	4e2e      	ldr	r6, [pc, #184]	; (8013270 <_malloc_r+0xe4>)
 80131b6:	f000 fdc3 	bl	8013d40 <__malloc_lock>
 80131ba:	6833      	ldr	r3, [r6, #0]
 80131bc:	461c      	mov	r4, r3
 80131be:	bb34      	cbnz	r4, 801320e <_malloc_r+0x82>
 80131c0:	4629      	mov	r1, r5
 80131c2:	4638      	mov	r0, r7
 80131c4:	f7ff ffc2 	bl	801314c <sbrk_aligned>
 80131c8:	1c43      	adds	r3, r0, #1
 80131ca:	4604      	mov	r4, r0
 80131cc:	d14d      	bne.n	801326a <_malloc_r+0xde>
 80131ce:	6834      	ldr	r4, [r6, #0]
 80131d0:	4626      	mov	r6, r4
 80131d2:	2e00      	cmp	r6, #0
 80131d4:	d140      	bne.n	8013258 <_malloc_r+0xcc>
 80131d6:	6823      	ldr	r3, [r4, #0]
 80131d8:	4631      	mov	r1, r6
 80131da:	4638      	mov	r0, r7
 80131dc:	eb04 0803 	add.w	r8, r4, r3
 80131e0:	f000 fb36 	bl	8013850 <_sbrk_r>
 80131e4:	4580      	cmp	r8, r0
 80131e6:	d13a      	bne.n	801325e <_malloc_r+0xd2>
 80131e8:	6821      	ldr	r1, [r4, #0]
 80131ea:	3503      	adds	r5, #3
 80131ec:	1a6d      	subs	r5, r5, r1
 80131ee:	f025 0503 	bic.w	r5, r5, #3
 80131f2:	3508      	adds	r5, #8
 80131f4:	2d0c      	cmp	r5, #12
 80131f6:	bf38      	it	cc
 80131f8:	250c      	movcc	r5, #12
 80131fa:	4629      	mov	r1, r5
 80131fc:	4638      	mov	r0, r7
 80131fe:	f7ff ffa5 	bl	801314c <sbrk_aligned>
 8013202:	3001      	adds	r0, #1
 8013204:	d02b      	beq.n	801325e <_malloc_r+0xd2>
 8013206:	6823      	ldr	r3, [r4, #0]
 8013208:	442b      	add	r3, r5
 801320a:	6023      	str	r3, [r4, #0]
 801320c:	e00e      	b.n	801322c <_malloc_r+0xa0>
 801320e:	6822      	ldr	r2, [r4, #0]
 8013210:	1b52      	subs	r2, r2, r5
 8013212:	d41e      	bmi.n	8013252 <_malloc_r+0xc6>
 8013214:	2a0b      	cmp	r2, #11
 8013216:	d916      	bls.n	8013246 <_malloc_r+0xba>
 8013218:	1961      	adds	r1, r4, r5
 801321a:	42a3      	cmp	r3, r4
 801321c:	6025      	str	r5, [r4, #0]
 801321e:	bf18      	it	ne
 8013220:	6059      	strne	r1, [r3, #4]
 8013222:	6863      	ldr	r3, [r4, #4]
 8013224:	bf08      	it	eq
 8013226:	6031      	streq	r1, [r6, #0]
 8013228:	5162      	str	r2, [r4, r5]
 801322a:	604b      	str	r3, [r1, #4]
 801322c:	4638      	mov	r0, r7
 801322e:	f104 060b 	add.w	r6, r4, #11
 8013232:	f000 fd8b 	bl	8013d4c <__malloc_unlock>
 8013236:	f026 0607 	bic.w	r6, r6, #7
 801323a:	1d23      	adds	r3, r4, #4
 801323c:	1af2      	subs	r2, r6, r3
 801323e:	d0b6      	beq.n	80131ae <_malloc_r+0x22>
 8013240:	1b9b      	subs	r3, r3, r6
 8013242:	50a3      	str	r3, [r4, r2]
 8013244:	e7b3      	b.n	80131ae <_malloc_r+0x22>
 8013246:	6862      	ldr	r2, [r4, #4]
 8013248:	42a3      	cmp	r3, r4
 801324a:	bf0c      	ite	eq
 801324c:	6032      	streq	r2, [r6, #0]
 801324e:	605a      	strne	r2, [r3, #4]
 8013250:	e7ec      	b.n	801322c <_malloc_r+0xa0>
 8013252:	4623      	mov	r3, r4
 8013254:	6864      	ldr	r4, [r4, #4]
 8013256:	e7b2      	b.n	80131be <_malloc_r+0x32>
 8013258:	4634      	mov	r4, r6
 801325a:	6876      	ldr	r6, [r6, #4]
 801325c:	e7b9      	b.n	80131d2 <_malloc_r+0x46>
 801325e:	230c      	movs	r3, #12
 8013260:	603b      	str	r3, [r7, #0]
 8013262:	4638      	mov	r0, r7
 8013264:	f000 fd72 	bl	8013d4c <__malloc_unlock>
 8013268:	e7a1      	b.n	80131ae <_malloc_r+0x22>
 801326a:	6025      	str	r5, [r4, #0]
 801326c:	e7de      	b.n	801322c <_malloc_r+0xa0>
 801326e:	bf00      	nop
 8013270:	240081e8 	.word	0x240081e8

08013274 <__sfputc_r>:
 8013274:	6893      	ldr	r3, [r2, #8]
 8013276:	3b01      	subs	r3, #1
 8013278:	2b00      	cmp	r3, #0
 801327a:	b410      	push	{r4}
 801327c:	6093      	str	r3, [r2, #8]
 801327e:	da08      	bge.n	8013292 <__sfputc_r+0x1e>
 8013280:	6994      	ldr	r4, [r2, #24]
 8013282:	42a3      	cmp	r3, r4
 8013284:	db01      	blt.n	801328a <__sfputc_r+0x16>
 8013286:	290a      	cmp	r1, #10
 8013288:	d103      	bne.n	8013292 <__sfputc_r+0x1e>
 801328a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801328e:	f000 bb33 	b.w	80138f8 <__swbuf_r>
 8013292:	6813      	ldr	r3, [r2, #0]
 8013294:	1c58      	adds	r0, r3, #1
 8013296:	6010      	str	r0, [r2, #0]
 8013298:	7019      	strb	r1, [r3, #0]
 801329a:	4608      	mov	r0, r1
 801329c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132a0:	4770      	bx	lr

080132a2 <__sfputs_r>:
 80132a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132a4:	4606      	mov	r6, r0
 80132a6:	460f      	mov	r7, r1
 80132a8:	4614      	mov	r4, r2
 80132aa:	18d5      	adds	r5, r2, r3
 80132ac:	42ac      	cmp	r4, r5
 80132ae:	d101      	bne.n	80132b4 <__sfputs_r+0x12>
 80132b0:	2000      	movs	r0, #0
 80132b2:	e007      	b.n	80132c4 <__sfputs_r+0x22>
 80132b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132b8:	463a      	mov	r2, r7
 80132ba:	4630      	mov	r0, r6
 80132bc:	f7ff ffda 	bl	8013274 <__sfputc_r>
 80132c0:	1c43      	adds	r3, r0, #1
 80132c2:	d1f3      	bne.n	80132ac <__sfputs_r+0xa>
 80132c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080132c8 <_vfiprintf_r>:
 80132c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132cc:	460d      	mov	r5, r1
 80132ce:	b09d      	sub	sp, #116	; 0x74
 80132d0:	4614      	mov	r4, r2
 80132d2:	4698      	mov	r8, r3
 80132d4:	4606      	mov	r6, r0
 80132d6:	b118      	cbz	r0, 80132e0 <_vfiprintf_r+0x18>
 80132d8:	6983      	ldr	r3, [r0, #24]
 80132da:	b90b      	cbnz	r3, 80132e0 <_vfiprintf_r+0x18>
 80132dc:	f7ff fe30 	bl	8012f40 <__sinit>
 80132e0:	4b89      	ldr	r3, [pc, #548]	; (8013508 <_vfiprintf_r+0x240>)
 80132e2:	429d      	cmp	r5, r3
 80132e4:	d11b      	bne.n	801331e <_vfiprintf_r+0x56>
 80132e6:	6875      	ldr	r5, [r6, #4]
 80132e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132ea:	07d9      	lsls	r1, r3, #31
 80132ec:	d405      	bmi.n	80132fa <_vfiprintf_r+0x32>
 80132ee:	89ab      	ldrh	r3, [r5, #12]
 80132f0:	059a      	lsls	r2, r3, #22
 80132f2:	d402      	bmi.n	80132fa <_vfiprintf_r+0x32>
 80132f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132f6:	f7ff fed3 	bl	80130a0 <__retarget_lock_acquire_recursive>
 80132fa:	89ab      	ldrh	r3, [r5, #12]
 80132fc:	071b      	lsls	r3, r3, #28
 80132fe:	d501      	bpl.n	8013304 <_vfiprintf_r+0x3c>
 8013300:	692b      	ldr	r3, [r5, #16]
 8013302:	b9eb      	cbnz	r3, 8013340 <_vfiprintf_r+0x78>
 8013304:	4629      	mov	r1, r5
 8013306:	4630      	mov	r0, r6
 8013308:	f000 fb5a 	bl	80139c0 <__swsetup_r>
 801330c:	b1c0      	cbz	r0, 8013340 <_vfiprintf_r+0x78>
 801330e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013310:	07dc      	lsls	r4, r3, #31
 8013312:	d50e      	bpl.n	8013332 <_vfiprintf_r+0x6a>
 8013314:	f04f 30ff 	mov.w	r0, #4294967295
 8013318:	b01d      	add	sp, #116	; 0x74
 801331a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801331e:	4b7b      	ldr	r3, [pc, #492]	; (801350c <_vfiprintf_r+0x244>)
 8013320:	429d      	cmp	r5, r3
 8013322:	d101      	bne.n	8013328 <_vfiprintf_r+0x60>
 8013324:	68b5      	ldr	r5, [r6, #8]
 8013326:	e7df      	b.n	80132e8 <_vfiprintf_r+0x20>
 8013328:	4b79      	ldr	r3, [pc, #484]	; (8013510 <_vfiprintf_r+0x248>)
 801332a:	429d      	cmp	r5, r3
 801332c:	bf08      	it	eq
 801332e:	68f5      	ldreq	r5, [r6, #12]
 8013330:	e7da      	b.n	80132e8 <_vfiprintf_r+0x20>
 8013332:	89ab      	ldrh	r3, [r5, #12]
 8013334:	0598      	lsls	r0, r3, #22
 8013336:	d4ed      	bmi.n	8013314 <_vfiprintf_r+0x4c>
 8013338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801333a:	f7ff feb2 	bl	80130a2 <__retarget_lock_release_recursive>
 801333e:	e7e9      	b.n	8013314 <_vfiprintf_r+0x4c>
 8013340:	2300      	movs	r3, #0
 8013342:	9309      	str	r3, [sp, #36]	; 0x24
 8013344:	2320      	movs	r3, #32
 8013346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801334a:	f8cd 800c 	str.w	r8, [sp, #12]
 801334e:	2330      	movs	r3, #48	; 0x30
 8013350:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013514 <_vfiprintf_r+0x24c>
 8013354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013358:	f04f 0901 	mov.w	r9, #1
 801335c:	4623      	mov	r3, r4
 801335e:	469a      	mov	sl, r3
 8013360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013364:	b10a      	cbz	r2, 801336a <_vfiprintf_r+0xa2>
 8013366:	2a25      	cmp	r2, #37	; 0x25
 8013368:	d1f9      	bne.n	801335e <_vfiprintf_r+0x96>
 801336a:	ebba 0b04 	subs.w	fp, sl, r4
 801336e:	d00b      	beq.n	8013388 <_vfiprintf_r+0xc0>
 8013370:	465b      	mov	r3, fp
 8013372:	4622      	mov	r2, r4
 8013374:	4629      	mov	r1, r5
 8013376:	4630      	mov	r0, r6
 8013378:	f7ff ff93 	bl	80132a2 <__sfputs_r>
 801337c:	3001      	adds	r0, #1
 801337e:	f000 80aa 	beq.w	80134d6 <_vfiprintf_r+0x20e>
 8013382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013384:	445a      	add	r2, fp
 8013386:	9209      	str	r2, [sp, #36]	; 0x24
 8013388:	f89a 3000 	ldrb.w	r3, [sl]
 801338c:	2b00      	cmp	r3, #0
 801338e:	f000 80a2 	beq.w	80134d6 <_vfiprintf_r+0x20e>
 8013392:	2300      	movs	r3, #0
 8013394:	f04f 32ff 	mov.w	r2, #4294967295
 8013398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801339c:	f10a 0a01 	add.w	sl, sl, #1
 80133a0:	9304      	str	r3, [sp, #16]
 80133a2:	9307      	str	r3, [sp, #28]
 80133a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133a8:	931a      	str	r3, [sp, #104]	; 0x68
 80133aa:	4654      	mov	r4, sl
 80133ac:	2205      	movs	r2, #5
 80133ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133b2:	4858      	ldr	r0, [pc, #352]	; (8013514 <_vfiprintf_r+0x24c>)
 80133b4:	f7ec ff94 	bl	80002e0 <memchr>
 80133b8:	9a04      	ldr	r2, [sp, #16]
 80133ba:	b9d8      	cbnz	r0, 80133f4 <_vfiprintf_r+0x12c>
 80133bc:	06d1      	lsls	r1, r2, #27
 80133be:	bf44      	itt	mi
 80133c0:	2320      	movmi	r3, #32
 80133c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133c6:	0713      	lsls	r3, r2, #28
 80133c8:	bf44      	itt	mi
 80133ca:	232b      	movmi	r3, #43	; 0x2b
 80133cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133d0:	f89a 3000 	ldrb.w	r3, [sl]
 80133d4:	2b2a      	cmp	r3, #42	; 0x2a
 80133d6:	d015      	beq.n	8013404 <_vfiprintf_r+0x13c>
 80133d8:	9a07      	ldr	r2, [sp, #28]
 80133da:	4654      	mov	r4, sl
 80133dc:	2000      	movs	r0, #0
 80133de:	f04f 0c0a 	mov.w	ip, #10
 80133e2:	4621      	mov	r1, r4
 80133e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133e8:	3b30      	subs	r3, #48	; 0x30
 80133ea:	2b09      	cmp	r3, #9
 80133ec:	d94e      	bls.n	801348c <_vfiprintf_r+0x1c4>
 80133ee:	b1b0      	cbz	r0, 801341e <_vfiprintf_r+0x156>
 80133f0:	9207      	str	r2, [sp, #28]
 80133f2:	e014      	b.n	801341e <_vfiprintf_r+0x156>
 80133f4:	eba0 0308 	sub.w	r3, r0, r8
 80133f8:	fa09 f303 	lsl.w	r3, r9, r3
 80133fc:	4313      	orrs	r3, r2
 80133fe:	9304      	str	r3, [sp, #16]
 8013400:	46a2      	mov	sl, r4
 8013402:	e7d2      	b.n	80133aa <_vfiprintf_r+0xe2>
 8013404:	9b03      	ldr	r3, [sp, #12]
 8013406:	1d19      	adds	r1, r3, #4
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	9103      	str	r1, [sp, #12]
 801340c:	2b00      	cmp	r3, #0
 801340e:	bfbb      	ittet	lt
 8013410:	425b      	neglt	r3, r3
 8013412:	f042 0202 	orrlt.w	r2, r2, #2
 8013416:	9307      	strge	r3, [sp, #28]
 8013418:	9307      	strlt	r3, [sp, #28]
 801341a:	bfb8      	it	lt
 801341c:	9204      	strlt	r2, [sp, #16]
 801341e:	7823      	ldrb	r3, [r4, #0]
 8013420:	2b2e      	cmp	r3, #46	; 0x2e
 8013422:	d10c      	bne.n	801343e <_vfiprintf_r+0x176>
 8013424:	7863      	ldrb	r3, [r4, #1]
 8013426:	2b2a      	cmp	r3, #42	; 0x2a
 8013428:	d135      	bne.n	8013496 <_vfiprintf_r+0x1ce>
 801342a:	9b03      	ldr	r3, [sp, #12]
 801342c:	1d1a      	adds	r2, r3, #4
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	9203      	str	r2, [sp, #12]
 8013432:	2b00      	cmp	r3, #0
 8013434:	bfb8      	it	lt
 8013436:	f04f 33ff 	movlt.w	r3, #4294967295
 801343a:	3402      	adds	r4, #2
 801343c:	9305      	str	r3, [sp, #20]
 801343e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013524 <_vfiprintf_r+0x25c>
 8013442:	7821      	ldrb	r1, [r4, #0]
 8013444:	2203      	movs	r2, #3
 8013446:	4650      	mov	r0, sl
 8013448:	f7ec ff4a 	bl	80002e0 <memchr>
 801344c:	b140      	cbz	r0, 8013460 <_vfiprintf_r+0x198>
 801344e:	2340      	movs	r3, #64	; 0x40
 8013450:	eba0 000a 	sub.w	r0, r0, sl
 8013454:	fa03 f000 	lsl.w	r0, r3, r0
 8013458:	9b04      	ldr	r3, [sp, #16]
 801345a:	4303      	orrs	r3, r0
 801345c:	3401      	adds	r4, #1
 801345e:	9304      	str	r3, [sp, #16]
 8013460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013464:	482c      	ldr	r0, [pc, #176]	; (8013518 <_vfiprintf_r+0x250>)
 8013466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801346a:	2206      	movs	r2, #6
 801346c:	f7ec ff38 	bl	80002e0 <memchr>
 8013470:	2800      	cmp	r0, #0
 8013472:	d03f      	beq.n	80134f4 <_vfiprintf_r+0x22c>
 8013474:	4b29      	ldr	r3, [pc, #164]	; (801351c <_vfiprintf_r+0x254>)
 8013476:	bb1b      	cbnz	r3, 80134c0 <_vfiprintf_r+0x1f8>
 8013478:	9b03      	ldr	r3, [sp, #12]
 801347a:	3307      	adds	r3, #7
 801347c:	f023 0307 	bic.w	r3, r3, #7
 8013480:	3308      	adds	r3, #8
 8013482:	9303      	str	r3, [sp, #12]
 8013484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013486:	443b      	add	r3, r7
 8013488:	9309      	str	r3, [sp, #36]	; 0x24
 801348a:	e767      	b.n	801335c <_vfiprintf_r+0x94>
 801348c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013490:	460c      	mov	r4, r1
 8013492:	2001      	movs	r0, #1
 8013494:	e7a5      	b.n	80133e2 <_vfiprintf_r+0x11a>
 8013496:	2300      	movs	r3, #0
 8013498:	3401      	adds	r4, #1
 801349a:	9305      	str	r3, [sp, #20]
 801349c:	4619      	mov	r1, r3
 801349e:	f04f 0c0a 	mov.w	ip, #10
 80134a2:	4620      	mov	r0, r4
 80134a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134a8:	3a30      	subs	r2, #48	; 0x30
 80134aa:	2a09      	cmp	r2, #9
 80134ac:	d903      	bls.n	80134b6 <_vfiprintf_r+0x1ee>
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d0c5      	beq.n	801343e <_vfiprintf_r+0x176>
 80134b2:	9105      	str	r1, [sp, #20]
 80134b4:	e7c3      	b.n	801343e <_vfiprintf_r+0x176>
 80134b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80134ba:	4604      	mov	r4, r0
 80134bc:	2301      	movs	r3, #1
 80134be:	e7f0      	b.n	80134a2 <_vfiprintf_r+0x1da>
 80134c0:	ab03      	add	r3, sp, #12
 80134c2:	9300      	str	r3, [sp, #0]
 80134c4:	462a      	mov	r2, r5
 80134c6:	4b16      	ldr	r3, [pc, #88]	; (8013520 <_vfiprintf_r+0x258>)
 80134c8:	a904      	add	r1, sp, #16
 80134ca:	4630      	mov	r0, r6
 80134cc:	f3af 8000 	nop.w
 80134d0:	4607      	mov	r7, r0
 80134d2:	1c78      	adds	r0, r7, #1
 80134d4:	d1d6      	bne.n	8013484 <_vfiprintf_r+0x1bc>
 80134d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134d8:	07d9      	lsls	r1, r3, #31
 80134da:	d405      	bmi.n	80134e8 <_vfiprintf_r+0x220>
 80134dc:	89ab      	ldrh	r3, [r5, #12]
 80134de:	059a      	lsls	r2, r3, #22
 80134e0:	d402      	bmi.n	80134e8 <_vfiprintf_r+0x220>
 80134e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134e4:	f7ff fddd 	bl	80130a2 <__retarget_lock_release_recursive>
 80134e8:	89ab      	ldrh	r3, [r5, #12]
 80134ea:	065b      	lsls	r3, r3, #25
 80134ec:	f53f af12 	bmi.w	8013314 <_vfiprintf_r+0x4c>
 80134f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134f2:	e711      	b.n	8013318 <_vfiprintf_r+0x50>
 80134f4:	ab03      	add	r3, sp, #12
 80134f6:	9300      	str	r3, [sp, #0]
 80134f8:	462a      	mov	r2, r5
 80134fa:	4b09      	ldr	r3, [pc, #36]	; (8013520 <_vfiprintf_r+0x258>)
 80134fc:	a904      	add	r1, sp, #16
 80134fe:	4630      	mov	r0, r6
 8013500:	f000 f880 	bl	8013604 <_printf_i>
 8013504:	e7e4      	b.n	80134d0 <_vfiprintf_r+0x208>
 8013506:	bf00      	nop
 8013508:	08016d3c 	.word	0x08016d3c
 801350c:	08016d5c 	.word	0x08016d5c
 8013510:	08016d1c 	.word	0x08016d1c
 8013514:	08016d7c 	.word	0x08016d7c
 8013518:	08016d86 	.word	0x08016d86
 801351c:	00000000 	.word	0x00000000
 8013520:	080132a3 	.word	0x080132a3
 8013524:	08016d82 	.word	0x08016d82

08013528 <_printf_common>:
 8013528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801352c:	4616      	mov	r6, r2
 801352e:	4699      	mov	r9, r3
 8013530:	688a      	ldr	r2, [r1, #8]
 8013532:	690b      	ldr	r3, [r1, #16]
 8013534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013538:	4293      	cmp	r3, r2
 801353a:	bfb8      	it	lt
 801353c:	4613      	movlt	r3, r2
 801353e:	6033      	str	r3, [r6, #0]
 8013540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013544:	4607      	mov	r7, r0
 8013546:	460c      	mov	r4, r1
 8013548:	b10a      	cbz	r2, 801354e <_printf_common+0x26>
 801354a:	3301      	adds	r3, #1
 801354c:	6033      	str	r3, [r6, #0]
 801354e:	6823      	ldr	r3, [r4, #0]
 8013550:	0699      	lsls	r1, r3, #26
 8013552:	bf42      	ittt	mi
 8013554:	6833      	ldrmi	r3, [r6, #0]
 8013556:	3302      	addmi	r3, #2
 8013558:	6033      	strmi	r3, [r6, #0]
 801355a:	6825      	ldr	r5, [r4, #0]
 801355c:	f015 0506 	ands.w	r5, r5, #6
 8013560:	d106      	bne.n	8013570 <_printf_common+0x48>
 8013562:	f104 0a19 	add.w	sl, r4, #25
 8013566:	68e3      	ldr	r3, [r4, #12]
 8013568:	6832      	ldr	r2, [r6, #0]
 801356a:	1a9b      	subs	r3, r3, r2
 801356c:	42ab      	cmp	r3, r5
 801356e:	dc26      	bgt.n	80135be <_printf_common+0x96>
 8013570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013574:	1e13      	subs	r3, r2, #0
 8013576:	6822      	ldr	r2, [r4, #0]
 8013578:	bf18      	it	ne
 801357a:	2301      	movne	r3, #1
 801357c:	0692      	lsls	r2, r2, #26
 801357e:	d42b      	bmi.n	80135d8 <_printf_common+0xb0>
 8013580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013584:	4649      	mov	r1, r9
 8013586:	4638      	mov	r0, r7
 8013588:	47c0      	blx	r8
 801358a:	3001      	adds	r0, #1
 801358c:	d01e      	beq.n	80135cc <_printf_common+0xa4>
 801358e:	6823      	ldr	r3, [r4, #0]
 8013590:	68e5      	ldr	r5, [r4, #12]
 8013592:	6832      	ldr	r2, [r6, #0]
 8013594:	f003 0306 	and.w	r3, r3, #6
 8013598:	2b04      	cmp	r3, #4
 801359a:	bf08      	it	eq
 801359c:	1aad      	subeq	r5, r5, r2
 801359e:	68a3      	ldr	r3, [r4, #8]
 80135a0:	6922      	ldr	r2, [r4, #16]
 80135a2:	bf0c      	ite	eq
 80135a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80135a8:	2500      	movne	r5, #0
 80135aa:	4293      	cmp	r3, r2
 80135ac:	bfc4      	itt	gt
 80135ae:	1a9b      	subgt	r3, r3, r2
 80135b0:	18ed      	addgt	r5, r5, r3
 80135b2:	2600      	movs	r6, #0
 80135b4:	341a      	adds	r4, #26
 80135b6:	42b5      	cmp	r5, r6
 80135b8:	d11a      	bne.n	80135f0 <_printf_common+0xc8>
 80135ba:	2000      	movs	r0, #0
 80135bc:	e008      	b.n	80135d0 <_printf_common+0xa8>
 80135be:	2301      	movs	r3, #1
 80135c0:	4652      	mov	r2, sl
 80135c2:	4649      	mov	r1, r9
 80135c4:	4638      	mov	r0, r7
 80135c6:	47c0      	blx	r8
 80135c8:	3001      	adds	r0, #1
 80135ca:	d103      	bne.n	80135d4 <_printf_common+0xac>
 80135cc:	f04f 30ff 	mov.w	r0, #4294967295
 80135d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135d4:	3501      	adds	r5, #1
 80135d6:	e7c6      	b.n	8013566 <_printf_common+0x3e>
 80135d8:	18e1      	adds	r1, r4, r3
 80135da:	1c5a      	adds	r2, r3, #1
 80135dc:	2030      	movs	r0, #48	; 0x30
 80135de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80135e2:	4422      	add	r2, r4
 80135e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80135e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80135ec:	3302      	adds	r3, #2
 80135ee:	e7c7      	b.n	8013580 <_printf_common+0x58>
 80135f0:	2301      	movs	r3, #1
 80135f2:	4622      	mov	r2, r4
 80135f4:	4649      	mov	r1, r9
 80135f6:	4638      	mov	r0, r7
 80135f8:	47c0      	blx	r8
 80135fa:	3001      	adds	r0, #1
 80135fc:	d0e6      	beq.n	80135cc <_printf_common+0xa4>
 80135fe:	3601      	adds	r6, #1
 8013600:	e7d9      	b.n	80135b6 <_printf_common+0x8e>
	...

08013604 <_printf_i>:
 8013604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013608:	7e0f      	ldrb	r7, [r1, #24]
 801360a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801360c:	2f78      	cmp	r7, #120	; 0x78
 801360e:	4691      	mov	r9, r2
 8013610:	4680      	mov	r8, r0
 8013612:	460c      	mov	r4, r1
 8013614:	469a      	mov	sl, r3
 8013616:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801361a:	d807      	bhi.n	801362c <_printf_i+0x28>
 801361c:	2f62      	cmp	r7, #98	; 0x62
 801361e:	d80a      	bhi.n	8013636 <_printf_i+0x32>
 8013620:	2f00      	cmp	r7, #0
 8013622:	f000 80d8 	beq.w	80137d6 <_printf_i+0x1d2>
 8013626:	2f58      	cmp	r7, #88	; 0x58
 8013628:	f000 80a3 	beq.w	8013772 <_printf_i+0x16e>
 801362c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013634:	e03a      	b.n	80136ac <_printf_i+0xa8>
 8013636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801363a:	2b15      	cmp	r3, #21
 801363c:	d8f6      	bhi.n	801362c <_printf_i+0x28>
 801363e:	a101      	add	r1, pc, #4	; (adr r1, 8013644 <_printf_i+0x40>)
 8013640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013644:	0801369d 	.word	0x0801369d
 8013648:	080136b1 	.word	0x080136b1
 801364c:	0801362d 	.word	0x0801362d
 8013650:	0801362d 	.word	0x0801362d
 8013654:	0801362d 	.word	0x0801362d
 8013658:	0801362d 	.word	0x0801362d
 801365c:	080136b1 	.word	0x080136b1
 8013660:	0801362d 	.word	0x0801362d
 8013664:	0801362d 	.word	0x0801362d
 8013668:	0801362d 	.word	0x0801362d
 801366c:	0801362d 	.word	0x0801362d
 8013670:	080137bd 	.word	0x080137bd
 8013674:	080136e1 	.word	0x080136e1
 8013678:	0801379f 	.word	0x0801379f
 801367c:	0801362d 	.word	0x0801362d
 8013680:	0801362d 	.word	0x0801362d
 8013684:	080137df 	.word	0x080137df
 8013688:	0801362d 	.word	0x0801362d
 801368c:	080136e1 	.word	0x080136e1
 8013690:	0801362d 	.word	0x0801362d
 8013694:	0801362d 	.word	0x0801362d
 8013698:	080137a7 	.word	0x080137a7
 801369c:	682b      	ldr	r3, [r5, #0]
 801369e:	1d1a      	adds	r2, r3, #4
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	602a      	str	r2, [r5, #0]
 80136a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80136a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80136ac:	2301      	movs	r3, #1
 80136ae:	e0a3      	b.n	80137f8 <_printf_i+0x1f4>
 80136b0:	6820      	ldr	r0, [r4, #0]
 80136b2:	6829      	ldr	r1, [r5, #0]
 80136b4:	0606      	lsls	r6, r0, #24
 80136b6:	f101 0304 	add.w	r3, r1, #4
 80136ba:	d50a      	bpl.n	80136d2 <_printf_i+0xce>
 80136bc:	680e      	ldr	r6, [r1, #0]
 80136be:	602b      	str	r3, [r5, #0]
 80136c0:	2e00      	cmp	r6, #0
 80136c2:	da03      	bge.n	80136cc <_printf_i+0xc8>
 80136c4:	232d      	movs	r3, #45	; 0x2d
 80136c6:	4276      	negs	r6, r6
 80136c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136cc:	485e      	ldr	r0, [pc, #376]	; (8013848 <_printf_i+0x244>)
 80136ce:	230a      	movs	r3, #10
 80136d0:	e019      	b.n	8013706 <_printf_i+0x102>
 80136d2:	680e      	ldr	r6, [r1, #0]
 80136d4:	602b      	str	r3, [r5, #0]
 80136d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80136da:	bf18      	it	ne
 80136dc:	b236      	sxthne	r6, r6
 80136de:	e7ef      	b.n	80136c0 <_printf_i+0xbc>
 80136e0:	682b      	ldr	r3, [r5, #0]
 80136e2:	6820      	ldr	r0, [r4, #0]
 80136e4:	1d19      	adds	r1, r3, #4
 80136e6:	6029      	str	r1, [r5, #0]
 80136e8:	0601      	lsls	r1, r0, #24
 80136ea:	d501      	bpl.n	80136f0 <_printf_i+0xec>
 80136ec:	681e      	ldr	r6, [r3, #0]
 80136ee:	e002      	b.n	80136f6 <_printf_i+0xf2>
 80136f0:	0646      	lsls	r6, r0, #25
 80136f2:	d5fb      	bpl.n	80136ec <_printf_i+0xe8>
 80136f4:	881e      	ldrh	r6, [r3, #0]
 80136f6:	4854      	ldr	r0, [pc, #336]	; (8013848 <_printf_i+0x244>)
 80136f8:	2f6f      	cmp	r7, #111	; 0x6f
 80136fa:	bf0c      	ite	eq
 80136fc:	2308      	moveq	r3, #8
 80136fe:	230a      	movne	r3, #10
 8013700:	2100      	movs	r1, #0
 8013702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013706:	6865      	ldr	r5, [r4, #4]
 8013708:	60a5      	str	r5, [r4, #8]
 801370a:	2d00      	cmp	r5, #0
 801370c:	bfa2      	ittt	ge
 801370e:	6821      	ldrge	r1, [r4, #0]
 8013710:	f021 0104 	bicge.w	r1, r1, #4
 8013714:	6021      	strge	r1, [r4, #0]
 8013716:	b90e      	cbnz	r6, 801371c <_printf_i+0x118>
 8013718:	2d00      	cmp	r5, #0
 801371a:	d04d      	beq.n	80137b8 <_printf_i+0x1b4>
 801371c:	4615      	mov	r5, r2
 801371e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013722:	fb03 6711 	mls	r7, r3, r1, r6
 8013726:	5dc7      	ldrb	r7, [r0, r7]
 8013728:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801372c:	4637      	mov	r7, r6
 801372e:	42bb      	cmp	r3, r7
 8013730:	460e      	mov	r6, r1
 8013732:	d9f4      	bls.n	801371e <_printf_i+0x11a>
 8013734:	2b08      	cmp	r3, #8
 8013736:	d10b      	bne.n	8013750 <_printf_i+0x14c>
 8013738:	6823      	ldr	r3, [r4, #0]
 801373a:	07de      	lsls	r6, r3, #31
 801373c:	d508      	bpl.n	8013750 <_printf_i+0x14c>
 801373e:	6923      	ldr	r3, [r4, #16]
 8013740:	6861      	ldr	r1, [r4, #4]
 8013742:	4299      	cmp	r1, r3
 8013744:	bfde      	ittt	le
 8013746:	2330      	movle	r3, #48	; 0x30
 8013748:	f805 3c01 	strble.w	r3, [r5, #-1]
 801374c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013750:	1b52      	subs	r2, r2, r5
 8013752:	6122      	str	r2, [r4, #16]
 8013754:	f8cd a000 	str.w	sl, [sp]
 8013758:	464b      	mov	r3, r9
 801375a:	aa03      	add	r2, sp, #12
 801375c:	4621      	mov	r1, r4
 801375e:	4640      	mov	r0, r8
 8013760:	f7ff fee2 	bl	8013528 <_printf_common>
 8013764:	3001      	adds	r0, #1
 8013766:	d14c      	bne.n	8013802 <_printf_i+0x1fe>
 8013768:	f04f 30ff 	mov.w	r0, #4294967295
 801376c:	b004      	add	sp, #16
 801376e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013772:	4835      	ldr	r0, [pc, #212]	; (8013848 <_printf_i+0x244>)
 8013774:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013778:	6829      	ldr	r1, [r5, #0]
 801377a:	6823      	ldr	r3, [r4, #0]
 801377c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013780:	6029      	str	r1, [r5, #0]
 8013782:	061d      	lsls	r5, r3, #24
 8013784:	d514      	bpl.n	80137b0 <_printf_i+0x1ac>
 8013786:	07df      	lsls	r7, r3, #31
 8013788:	bf44      	itt	mi
 801378a:	f043 0320 	orrmi.w	r3, r3, #32
 801378e:	6023      	strmi	r3, [r4, #0]
 8013790:	b91e      	cbnz	r6, 801379a <_printf_i+0x196>
 8013792:	6823      	ldr	r3, [r4, #0]
 8013794:	f023 0320 	bic.w	r3, r3, #32
 8013798:	6023      	str	r3, [r4, #0]
 801379a:	2310      	movs	r3, #16
 801379c:	e7b0      	b.n	8013700 <_printf_i+0xfc>
 801379e:	6823      	ldr	r3, [r4, #0]
 80137a0:	f043 0320 	orr.w	r3, r3, #32
 80137a4:	6023      	str	r3, [r4, #0]
 80137a6:	2378      	movs	r3, #120	; 0x78
 80137a8:	4828      	ldr	r0, [pc, #160]	; (801384c <_printf_i+0x248>)
 80137aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80137ae:	e7e3      	b.n	8013778 <_printf_i+0x174>
 80137b0:	0659      	lsls	r1, r3, #25
 80137b2:	bf48      	it	mi
 80137b4:	b2b6      	uxthmi	r6, r6
 80137b6:	e7e6      	b.n	8013786 <_printf_i+0x182>
 80137b8:	4615      	mov	r5, r2
 80137ba:	e7bb      	b.n	8013734 <_printf_i+0x130>
 80137bc:	682b      	ldr	r3, [r5, #0]
 80137be:	6826      	ldr	r6, [r4, #0]
 80137c0:	6961      	ldr	r1, [r4, #20]
 80137c2:	1d18      	adds	r0, r3, #4
 80137c4:	6028      	str	r0, [r5, #0]
 80137c6:	0635      	lsls	r5, r6, #24
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	d501      	bpl.n	80137d0 <_printf_i+0x1cc>
 80137cc:	6019      	str	r1, [r3, #0]
 80137ce:	e002      	b.n	80137d6 <_printf_i+0x1d2>
 80137d0:	0670      	lsls	r0, r6, #25
 80137d2:	d5fb      	bpl.n	80137cc <_printf_i+0x1c8>
 80137d4:	8019      	strh	r1, [r3, #0]
 80137d6:	2300      	movs	r3, #0
 80137d8:	6123      	str	r3, [r4, #16]
 80137da:	4615      	mov	r5, r2
 80137dc:	e7ba      	b.n	8013754 <_printf_i+0x150>
 80137de:	682b      	ldr	r3, [r5, #0]
 80137e0:	1d1a      	adds	r2, r3, #4
 80137e2:	602a      	str	r2, [r5, #0]
 80137e4:	681d      	ldr	r5, [r3, #0]
 80137e6:	6862      	ldr	r2, [r4, #4]
 80137e8:	2100      	movs	r1, #0
 80137ea:	4628      	mov	r0, r5
 80137ec:	f7ec fd78 	bl	80002e0 <memchr>
 80137f0:	b108      	cbz	r0, 80137f6 <_printf_i+0x1f2>
 80137f2:	1b40      	subs	r0, r0, r5
 80137f4:	6060      	str	r0, [r4, #4]
 80137f6:	6863      	ldr	r3, [r4, #4]
 80137f8:	6123      	str	r3, [r4, #16]
 80137fa:	2300      	movs	r3, #0
 80137fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013800:	e7a8      	b.n	8013754 <_printf_i+0x150>
 8013802:	6923      	ldr	r3, [r4, #16]
 8013804:	462a      	mov	r2, r5
 8013806:	4649      	mov	r1, r9
 8013808:	4640      	mov	r0, r8
 801380a:	47d0      	blx	sl
 801380c:	3001      	adds	r0, #1
 801380e:	d0ab      	beq.n	8013768 <_printf_i+0x164>
 8013810:	6823      	ldr	r3, [r4, #0]
 8013812:	079b      	lsls	r3, r3, #30
 8013814:	d413      	bmi.n	801383e <_printf_i+0x23a>
 8013816:	68e0      	ldr	r0, [r4, #12]
 8013818:	9b03      	ldr	r3, [sp, #12]
 801381a:	4298      	cmp	r0, r3
 801381c:	bfb8      	it	lt
 801381e:	4618      	movlt	r0, r3
 8013820:	e7a4      	b.n	801376c <_printf_i+0x168>
 8013822:	2301      	movs	r3, #1
 8013824:	4632      	mov	r2, r6
 8013826:	4649      	mov	r1, r9
 8013828:	4640      	mov	r0, r8
 801382a:	47d0      	blx	sl
 801382c:	3001      	adds	r0, #1
 801382e:	d09b      	beq.n	8013768 <_printf_i+0x164>
 8013830:	3501      	adds	r5, #1
 8013832:	68e3      	ldr	r3, [r4, #12]
 8013834:	9903      	ldr	r1, [sp, #12]
 8013836:	1a5b      	subs	r3, r3, r1
 8013838:	42ab      	cmp	r3, r5
 801383a:	dcf2      	bgt.n	8013822 <_printf_i+0x21e>
 801383c:	e7eb      	b.n	8013816 <_printf_i+0x212>
 801383e:	2500      	movs	r5, #0
 8013840:	f104 0619 	add.w	r6, r4, #25
 8013844:	e7f5      	b.n	8013832 <_printf_i+0x22e>
 8013846:	bf00      	nop
 8013848:	08016d8d 	.word	0x08016d8d
 801384c:	08016d9e 	.word	0x08016d9e

08013850 <_sbrk_r>:
 8013850:	b538      	push	{r3, r4, r5, lr}
 8013852:	4d06      	ldr	r5, [pc, #24]	; (801386c <_sbrk_r+0x1c>)
 8013854:	2300      	movs	r3, #0
 8013856:	4604      	mov	r4, r0
 8013858:	4608      	mov	r0, r1
 801385a:	602b      	str	r3, [r5, #0]
 801385c:	f7ed fda2 	bl	80013a4 <_sbrk>
 8013860:	1c43      	adds	r3, r0, #1
 8013862:	d102      	bne.n	801386a <_sbrk_r+0x1a>
 8013864:	682b      	ldr	r3, [r5, #0]
 8013866:	b103      	cbz	r3, 801386a <_sbrk_r+0x1a>
 8013868:	6023      	str	r3, [r4, #0]
 801386a:	bd38      	pop	{r3, r4, r5, pc}
 801386c:	240081e0 	.word	0x240081e0

08013870 <__sread>:
 8013870:	b510      	push	{r4, lr}
 8013872:	460c      	mov	r4, r1
 8013874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013878:	f000 fa6e 	bl	8013d58 <_read_r>
 801387c:	2800      	cmp	r0, #0
 801387e:	bfab      	itete	ge
 8013880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013882:	89a3      	ldrhlt	r3, [r4, #12]
 8013884:	181b      	addge	r3, r3, r0
 8013886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801388a:	bfac      	ite	ge
 801388c:	6563      	strge	r3, [r4, #84]	; 0x54
 801388e:	81a3      	strhlt	r3, [r4, #12]
 8013890:	bd10      	pop	{r4, pc}

08013892 <__swrite>:
 8013892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013896:	461f      	mov	r7, r3
 8013898:	898b      	ldrh	r3, [r1, #12]
 801389a:	05db      	lsls	r3, r3, #23
 801389c:	4605      	mov	r5, r0
 801389e:	460c      	mov	r4, r1
 80138a0:	4616      	mov	r6, r2
 80138a2:	d505      	bpl.n	80138b0 <__swrite+0x1e>
 80138a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138a8:	2302      	movs	r3, #2
 80138aa:	2200      	movs	r2, #0
 80138ac:	f000 f9d0 	bl	8013c50 <_lseek_r>
 80138b0:	89a3      	ldrh	r3, [r4, #12]
 80138b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80138ba:	81a3      	strh	r3, [r4, #12]
 80138bc:	4632      	mov	r2, r6
 80138be:	463b      	mov	r3, r7
 80138c0:	4628      	mov	r0, r5
 80138c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138c6:	f000 b869 	b.w	801399c <_write_r>

080138ca <__sseek>:
 80138ca:	b510      	push	{r4, lr}
 80138cc:	460c      	mov	r4, r1
 80138ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138d2:	f000 f9bd 	bl	8013c50 <_lseek_r>
 80138d6:	1c43      	adds	r3, r0, #1
 80138d8:	89a3      	ldrh	r3, [r4, #12]
 80138da:	bf15      	itete	ne
 80138dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80138de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80138e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80138e6:	81a3      	strheq	r3, [r4, #12]
 80138e8:	bf18      	it	ne
 80138ea:	81a3      	strhne	r3, [r4, #12]
 80138ec:	bd10      	pop	{r4, pc}

080138ee <__sclose>:
 80138ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138f2:	f000 b8db 	b.w	8013aac <_close_r>
	...

080138f8 <__swbuf_r>:
 80138f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138fa:	460e      	mov	r6, r1
 80138fc:	4614      	mov	r4, r2
 80138fe:	4605      	mov	r5, r0
 8013900:	b118      	cbz	r0, 801390a <__swbuf_r+0x12>
 8013902:	6983      	ldr	r3, [r0, #24]
 8013904:	b90b      	cbnz	r3, 801390a <__swbuf_r+0x12>
 8013906:	f7ff fb1b 	bl	8012f40 <__sinit>
 801390a:	4b21      	ldr	r3, [pc, #132]	; (8013990 <__swbuf_r+0x98>)
 801390c:	429c      	cmp	r4, r3
 801390e:	d12b      	bne.n	8013968 <__swbuf_r+0x70>
 8013910:	686c      	ldr	r4, [r5, #4]
 8013912:	69a3      	ldr	r3, [r4, #24]
 8013914:	60a3      	str	r3, [r4, #8]
 8013916:	89a3      	ldrh	r3, [r4, #12]
 8013918:	071a      	lsls	r2, r3, #28
 801391a:	d52f      	bpl.n	801397c <__swbuf_r+0x84>
 801391c:	6923      	ldr	r3, [r4, #16]
 801391e:	b36b      	cbz	r3, 801397c <__swbuf_r+0x84>
 8013920:	6923      	ldr	r3, [r4, #16]
 8013922:	6820      	ldr	r0, [r4, #0]
 8013924:	1ac0      	subs	r0, r0, r3
 8013926:	6963      	ldr	r3, [r4, #20]
 8013928:	b2f6      	uxtb	r6, r6
 801392a:	4283      	cmp	r3, r0
 801392c:	4637      	mov	r7, r6
 801392e:	dc04      	bgt.n	801393a <__swbuf_r+0x42>
 8013930:	4621      	mov	r1, r4
 8013932:	4628      	mov	r0, r5
 8013934:	f000 f950 	bl	8013bd8 <_fflush_r>
 8013938:	bb30      	cbnz	r0, 8013988 <__swbuf_r+0x90>
 801393a:	68a3      	ldr	r3, [r4, #8]
 801393c:	3b01      	subs	r3, #1
 801393e:	60a3      	str	r3, [r4, #8]
 8013940:	6823      	ldr	r3, [r4, #0]
 8013942:	1c5a      	adds	r2, r3, #1
 8013944:	6022      	str	r2, [r4, #0]
 8013946:	701e      	strb	r6, [r3, #0]
 8013948:	6963      	ldr	r3, [r4, #20]
 801394a:	3001      	adds	r0, #1
 801394c:	4283      	cmp	r3, r0
 801394e:	d004      	beq.n	801395a <__swbuf_r+0x62>
 8013950:	89a3      	ldrh	r3, [r4, #12]
 8013952:	07db      	lsls	r3, r3, #31
 8013954:	d506      	bpl.n	8013964 <__swbuf_r+0x6c>
 8013956:	2e0a      	cmp	r6, #10
 8013958:	d104      	bne.n	8013964 <__swbuf_r+0x6c>
 801395a:	4621      	mov	r1, r4
 801395c:	4628      	mov	r0, r5
 801395e:	f000 f93b 	bl	8013bd8 <_fflush_r>
 8013962:	b988      	cbnz	r0, 8013988 <__swbuf_r+0x90>
 8013964:	4638      	mov	r0, r7
 8013966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013968:	4b0a      	ldr	r3, [pc, #40]	; (8013994 <__swbuf_r+0x9c>)
 801396a:	429c      	cmp	r4, r3
 801396c:	d101      	bne.n	8013972 <__swbuf_r+0x7a>
 801396e:	68ac      	ldr	r4, [r5, #8]
 8013970:	e7cf      	b.n	8013912 <__swbuf_r+0x1a>
 8013972:	4b09      	ldr	r3, [pc, #36]	; (8013998 <__swbuf_r+0xa0>)
 8013974:	429c      	cmp	r4, r3
 8013976:	bf08      	it	eq
 8013978:	68ec      	ldreq	r4, [r5, #12]
 801397a:	e7ca      	b.n	8013912 <__swbuf_r+0x1a>
 801397c:	4621      	mov	r1, r4
 801397e:	4628      	mov	r0, r5
 8013980:	f000 f81e 	bl	80139c0 <__swsetup_r>
 8013984:	2800      	cmp	r0, #0
 8013986:	d0cb      	beq.n	8013920 <__swbuf_r+0x28>
 8013988:	f04f 37ff 	mov.w	r7, #4294967295
 801398c:	e7ea      	b.n	8013964 <__swbuf_r+0x6c>
 801398e:	bf00      	nop
 8013990:	08016d3c 	.word	0x08016d3c
 8013994:	08016d5c 	.word	0x08016d5c
 8013998:	08016d1c 	.word	0x08016d1c

0801399c <_write_r>:
 801399c:	b538      	push	{r3, r4, r5, lr}
 801399e:	4d07      	ldr	r5, [pc, #28]	; (80139bc <_write_r+0x20>)
 80139a0:	4604      	mov	r4, r0
 80139a2:	4608      	mov	r0, r1
 80139a4:	4611      	mov	r1, r2
 80139a6:	2200      	movs	r2, #0
 80139a8:	602a      	str	r2, [r5, #0]
 80139aa:	461a      	mov	r2, r3
 80139ac:	f7ed fa80 	bl	8000eb0 <_write>
 80139b0:	1c43      	adds	r3, r0, #1
 80139b2:	d102      	bne.n	80139ba <_write_r+0x1e>
 80139b4:	682b      	ldr	r3, [r5, #0]
 80139b6:	b103      	cbz	r3, 80139ba <_write_r+0x1e>
 80139b8:	6023      	str	r3, [r4, #0]
 80139ba:	bd38      	pop	{r3, r4, r5, pc}
 80139bc:	240081e0 	.word	0x240081e0

080139c0 <__swsetup_r>:
 80139c0:	4b32      	ldr	r3, [pc, #200]	; (8013a8c <__swsetup_r+0xcc>)
 80139c2:	b570      	push	{r4, r5, r6, lr}
 80139c4:	681d      	ldr	r5, [r3, #0]
 80139c6:	4606      	mov	r6, r0
 80139c8:	460c      	mov	r4, r1
 80139ca:	b125      	cbz	r5, 80139d6 <__swsetup_r+0x16>
 80139cc:	69ab      	ldr	r3, [r5, #24]
 80139ce:	b913      	cbnz	r3, 80139d6 <__swsetup_r+0x16>
 80139d0:	4628      	mov	r0, r5
 80139d2:	f7ff fab5 	bl	8012f40 <__sinit>
 80139d6:	4b2e      	ldr	r3, [pc, #184]	; (8013a90 <__swsetup_r+0xd0>)
 80139d8:	429c      	cmp	r4, r3
 80139da:	d10f      	bne.n	80139fc <__swsetup_r+0x3c>
 80139dc:	686c      	ldr	r4, [r5, #4]
 80139de:	89a3      	ldrh	r3, [r4, #12]
 80139e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80139e4:	0719      	lsls	r1, r3, #28
 80139e6:	d42c      	bmi.n	8013a42 <__swsetup_r+0x82>
 80139e8:	06dd      	lsls	r5, r3, #27
 80139ea:	d411      	bmi.n	8013a10 <__swsetup_r+0x50>
 80139ec:	2309      	movs	r3, #9
 80139ee:	6033      	str	r3, [r6, #0]
 80139f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80139f4:	81a3      	strh	r3, [r4, #12]
 80139f6:	f04f 30ff 	mov.w	r0, #4294967295
 80139fa:	e03e      	b.n	8013a7a <__swsetup_r+0xba>
 80139fc:	4b25      	ldr	r3, [pc, #148]	; (8013a94 <__swsetup_r+0xd4>)
 80139fe:	429c      	cmp	r4, r3
 8013a00:	d101      	bne.n	8013a06 <__swsetup_r+0x46>
 8013a02:	68ac      	ldr	r4, [r5, #8]
 8013a04:	e7eb      	b.n	80139de <__swsetup_r+0x1e>
 8013a06:	4b24      	ldr	r3, [pc, #144]	; (8013a98 <__swsetup_r+0xd8>)
 8013a08:	429c      	cmp	r4, r3
 8013a0a:	bf08      	it	eq
 8013a0c:	68ec      	ldreq	r4, [r5, #12]
 8013a0e:	e7e6      	b.n	80139de <__swsetup_r+0x1e>
 8013a10:	0758      	lsls	r0, r3, #29
 8013a12:	d512      	bpl.n	8013a3a <__swsetup_r+0x7a>
 8013a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a16:	b141      	cbz	r1, 8013a2a <__swsetup_r+0x6a>
 8013a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a1c:	4299      	cmp	r1, r3
 8013a1e:	d002      	beq.n	8013a26 <__swsetup_r+0x66>
 8013a20:	4630      	mov	r0, r6
 8013a22:	f7ff fb47 	bl	80130b4 <_free_r>
 8013a26:	2300      	movs	r3, #0
 8013a28:	6363      	str	r3, [r4, #52]	; 0x34
 8013a2a:	89a3      	ldrh	r3, [r4, #12]
 8013a2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013a30:	81a3      	strh	r3, [r4, #12]
 8013a32:	2300      	movs	r3, #0
 8013a34:	6063      	str	r3, [r4, #4]
 8013a36:	6923      	ldr	r3, [r4, #16]
 8013a38:	6023      	str	r3, [r4, #0]
 8013a3a:	89a3      	ldrh	r3, [r4, #12]
 8013a3c:	f043 0308 	orr.w	r3, r3, #8
 8013a40:	81a3      	strh	r3, [r4, #12]
 8013a42:	6923      	ldr	r3, [r4, #16]
 8013a44:	b94b      	cbnz	r3, 8013a5a <__swsetup_r+0x9a>
 8013a46:	89a3      	ldrh	r3, [r4, #12]
 8013a48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a50:	d003      	beq.n	8013a5a <__swsetup_r+0x9a>
 8013a52:	4621      	mov	r1, r4
 8013a54:	4630      	mov	r0, r6
 8013a56:	f000 f933 	bl	8013cc0 <__smakebuf_r>
 8013a5a:	89a0      	ldrh	r0, [r4, #12]
 8013a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a60:	f010 0301 	ands.w	r3, r0, #1
 8013a64:	d00a      	beq.n	8013a7c <__swsetup_r+0xbc>
 8013a66:	2300      	movs	r3, #0
 8013a68:	60a3      	str	r3, [r4, #8]
 8013a6a:	6963      	ldr	r3, [r4, #20]
 8013a6c:	425b      	negs	r3, r3
 8013a6e:	61a3      	str	r3, [r4, #24]
 8013a70:	6923      	ldr	r3, [r4, #16]
 8013a72:	b943      	cbnz	r3, 8013a86 <__swsetup_r+0xc6>
 8013a74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013a78:	d1ba      	bne.n	80139f0 <__swsetup_r+0x30>
 8013a7a:	bd70      	pop	{r4, r5, r6, pc}
 8013a7c:	0781      	lsls	r1, r0, #30
 8013a7e:	bf58      	it	pl
 8013a80:	6963      	ldrpl	r3, [r4, #20]
 8013a82:	60a3      	str	r3, [r4, #8]
 8013a84:	e7f4      	b.n	8013a70 <__swsetup_r+0xb0>
 8013a86:	2000      	movs	r0, #0
 8013a88:	e7f7      	b.n	8013a7a <__swsetup_r+0xba>
 8013a8a:	bf00      	nop
 8013a8c:	24000018 	.word	0x24000018
 8013a90:	08016d3c 	.word	0x08016d3c
 8013a94:	08016d5c 	.word	0x08016d5c
 8013a98:	08016d1c 	.word	0x08016d1c

08013a9c <abort>:
 8013a9c:	b508      	push	{r3, lr}
 8013a9e:	2006      	movs	r0, #6
 8013aa0:	f000 f994 	bl	8013dcc <raise>
 8013aa4:	2001      	movs	r0, #1
 8013aa6:	f7ed fc21 	bl	80012ec <_exit>
	...

08013aac <_close_r>:
 8013aac:	b538      	push	{r3, r4, r5, lr}
 8013aae:	4d06      	ldr	r5, [pc, #24]	; (8013ac8 <_close_r+0x1c>)
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	4604      	mov	r4, r0
 8013ab4:	4608      	mov	r0, r1
 8013ab6:	602b      	str	r3, [r5, #0]
 8013ab8:	f7ed fc3f 	bl	800133a <_close>
 8013abc:	1c43      	adds	r3, r0, #1
 8013abe:	d102      	bne.n	8013ac6 <_close_r+0x1a>
 8013ac0:	682b      	ldr	r3, [r5, #0]
 8013ac2:	b103      	cbz	r3, 8013ac6 <_close_r+0x1a>
 8013ac4:	6023      	str	r3, [r4, #0]
 8013ac6:	bd38      	pop	{r3, r4, r5, pc}
 8013ac8:	240081e0 	.word	0x240081e0

08013acc <__sflush_r>:
 8013acc:	898a      	ldrh	r2, [r1, #12]
 8013ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ad2:	4605      	mov	r5, r0
 8013ad4:	0710      	lsls	r0, r2, #28
 8013ad6:	460c      	mov	r4, r1
 8013ad8:	d458      	bmi.n	8013b8c <__sflush_r+0xc0>
 8013ada:	684b      	ldr	r3, [r1, #4]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	dc05      	bgt.n	8013aec <__sflush_r+0x20>
 8013ae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	dc02      	bgt.n	8013aec <__sflush_r+0x20>
 8013ae6:	2000      	movs	r0, #0
 8013ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013aee:	2e00      	cmp	r6, #0
 8013af0:	d0f9      	beq.n	8013ae6 <__sflush_r+0x1a>
 8013af2:	2300      	movs	r3, #0
 8013af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013af8:	682f      	ldr	r7, [r5, #0]
 8013afa:	602b      	str	r3, [r5, #0]
 8013afc:	d032      	beq.n	8013b64 <__sflush_r+0x98>
 8013afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013b00:	89a3      	ldrh	r3, [r4, #12]
 8013b02:	075a      	lsls	r2, r3, #29
 8013b04:	d505      	bpl.n	8013b12 <__sflush_r+0x46>
 8013b06:	6863      	ldr	r3, [r4, #4]
 8013b08:	1ac0      	subs	r0, r0, r3
 8013b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b0c:	b10b      	cbz	r3, 8013b12 <__sflush_r+0x46>
 8013b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b10:	1ac0      	subs	r0, r0, r3
 8013b12:	2300      	movs	r3, #0
 8013b14:	4602      	mov	r2, r0
 8013b16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b18:	6a21      	ldr	r1, [r4, #32]
 8013b1a:	4628      	mov	r0, r5
 8013b1c:	47b0      	blx	r6
 8013b1e:	1c43      	adds	r3, r0, #1
 8013b20:	89a3      	ldrh	r3, [r4, #12]
 8013b22:	d106      	bne.n	8013b32 <__sflush_r+0x66>
 8013b24:	6829      	ldr	r1, [r5, #0]
 8013b26:	291d      	cmp	r1, #29
 8013b28:	d82c      	bhi.n	8013b84 <__sflush_r+0xb8>
 8013b2a:	4a2a      	ldr	r2, [pc, #168]	; (8013bd4 <__sflush_r+0x108>)
 8013b2c:	40ca      	lsrs	r2, r1
 8013b2e:	07d6      	lsls	r6, r2, #31
 8013b30:	d528      	bpl.n	8013b84 <__sflush_r+0xb8>
 8013b32:	2200      	movs	r2, #0
 8013b34:	6062      	str	r2, [r4, #4]
 8013b36:	04d9      	lsls	r1, r3, #19
 8013b38:	6922      	ldr	r2, [r4, #16]
 8013b3a:	6022      	str	r2, [r4, #0]
 8013b3c:	d504      	bpl.n	8013b48 <__sflush_r+0x7c>
 8013b3e:	1c42      	adds	r2, r0, #1
 8013b40:	d101      	bne.n	8013b46 <__sflush_r+0x7a>
 8013b42:	682b      	ldr	r3, [r5, #0]
 8013b44:	b903      	cbnz	r3, 8013b48 <__sflush_r+0x7c>
 8013b46:	6560      	str	r0, [r4, #84]	; 0x54
 8013b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b4a:	602f      	str	r7, [r5, #0]
 8013b4c:	2900      	cmp	r1, #0
 8013b4e:	d0ca      	beq.n	8013ae6 <__sflush_r+0x1a>
 8013b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b54:	4299      	cmp	r1, r3
 8013b56:	d002      	beq.n	8013b5e <__sflush_r+0x92>
 8013b58:	4628      	mov	r0, r5
 8013b5a:	f7ff faab 	bl	80130b4 <_free_r>
 8013b5e:	2000      	movs	r0, #0
 8013b60:	6360      	str	r0, [r4, #52]	; 0x34
 8013b62:	e7c1      	b.n	8013ae8 <__sflush_r+0x1c>
 8013b64:	6a21      	ldr	r1, [r4, #32]
 8013b66:	2301      	movs	r3, #1
 8013b68:	4628      	mov	r0, r5
 8013b6a:	47b0      	blx	r6
 8013b6c:	1c41      	adds	r1, r0, #1
 8013b6e:	d1c7      	bne.n	8013b00 <__sflush_r+0x34>
 8013b70:	682b      	ldr	r3, [r5, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d0c4      	beq.n	8013b00 <__sflush_r+0x34>
 8013b76:	2b1d      	cmp	r3, #29
 8013b78:	d001      	beq.n	8013b7e <__sflush_r+0xb2>
 8013b7a:	2b16      	cmp	r3, #22
 8013b7c:	d101      	bne.n	8013b82 <__sflush_r+0xb6>
 8013b7e:	602f      	str	r7, [r5, #0]
 8013b80:	e7b1      	b.n	8013ae6 <__sflush_r+0x1a>
 8013b82:	89a3      	ldrh	r3, [r4, #12]
 8013b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b88:	81a3      	strh	r3, [r4, #12]
 8013b8a:	e7ad      	b.n	8013ae8 <__sflush_r+0x1c>
 8013b8c:	690f      	ldr	r7, [r1, #16]
 8013b8e:	2f00      	cmp	r7, #0
 8013b90:	d0a9      	beq.n	8013ae6 <__sflush_r+0x1a>
 8013b92:	0793      	lsls	r3, r2, #30
 8013b94:	680e      	ldr	r6, [r1, #0]
 8013b96:	bf08      	it	eq
 8013b98:	694b      	ldreq	r3, [r1, #20]
 8013b9a:	600f      	str	r7, [r1, #0]
 8013b9c:	bf18      	it	ne
 8013b9e:	2300      	movne	r3, #0
 8013ba0:	eba6 0807 	sub.w	r8, r6, r7
 8013ba4:	608b      	str	r3, [r1, #8]
 8013ba6:	f1b8 0f00 	cmp.w	r8, #0
 8013baa:	dd9c      	ble.n	8013ae6 <__sflush_r+0x1a>
 8013bac:	6a21      	ldr	r1, [r4, #32]
 8013bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013bb0:	4643      	mov	r3, r8
 8013bb2:	463a      	mov	r2, r7
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	47b0      	blx	r6
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	dc06      	bgt.n	8013bca <__sflush_r+0xfe>
 8013bbc:	89a3      	ldrh	r3, [r4, #12]
 8013bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bc2:	81a3      	strh	r3, [r4, #12]
 8013bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bc8:	e78e      	b.n	8013ae8 <__sflush_r+0x1c>
 8013bca:	4407      	add	r7, r0
 8013bcc:	eba8 0800 	sub.w	r8, r8, r0
 8013bd0:	e7e9      	b.n	8013ba6 <__sflush_r+0xda>
 8013bd2:	bf00      	nop
 8013bd4:	20400001 	.word	0x20400001

08013bd8 <_fflush_r>:
 8013bd8:	b538      	push	{r3, r4, r5, lr}
 8013bda:	690b      	ldr	r3, [r1, #16]
 8013bdc:	4605      	mov	r5, r0
 8013bde:	460c      	mov	r4, r1
 8013be0:	b913      	cbnz	r3, 8013be8 <_fflush_r+0x10>
 8013be2:	2500      	movs	r5, #0
 8013be4:	4628      	mov	r0, r5
 8013be6:	bd38      	pop	{r3, r4, r5, pc}
 8013be8:	b118      	cbz	r0, 8013bf2 <_fflush_r+0x1a>
 8013bea:	6983      	ldr	r3, [r0, #24]
 8013bec:	b90b      	cbnz	r3, 8013bf2 <_fflush_r+0x1a>
 8013bee:	f7ff f9a7 	bl	8012f40 <__sinit>
 8013bf2:	4b14      	ldr	r3, [pc, #80]	; (8013c44 <_fflush_r+0x6c>)
 8013bf4:	429c      	cmp	r4, r3
 8013bf6:	d11b      	bne.n	8013c30 <_fflush_r+0x58>
 8013bf8:	686c      	ldr	r4, [r5, #4]
 8013bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d0ef      	beq.n	8013be2 <_fflush_r+0xa>
 8013c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013c04:	07d0      	lsls	r0, r2, #31
 8013c06:	d404      	bmi.n	8013c12 <_fflush_r+0x3a>
 8013c08:	0599      	lsls	r1, r3, #22
 8013c0a:	d402      	bmi.n	8013c12 <_fflush_r+0x3a>
 8013c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c0e:	f7ff fa47 	bl	80130a0 <__retarget_lock_acquire_recursive>
 8013c12:	4628      	mov	r0, r5
 8013c14:	4621      	mov	r1, r4
 8013c16:	f7ff ff59 	bl	8013acc <__sflush_r>
 8013c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c1c:	07da      	lsls	r2, r3, #31
 8013c1e:	4605      	mov	r5, r0
 8013c20:	d4e0      	bmi.n	8013be4 <_fflush_r+0xc>
 8013c22:	89a3      	ldrh	r3, [r4, #12]
 8013c24:	059b      	lsls	r3, r3, #22
 8013c26:	d4dd      	bmi.n	8013be4 <_fflush_r+0xc>
 8013c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c2a:	f7ff fa3a 	bl	80130a2 <__retarget_lock_release_recursive>
 8013c2e:	e7d9      	b.n	8013be4 <_fflush_r+0xc>
 8013c30:	4b05      	ldr	r3, [pc, #20]	; (8013c48 <_fflush_r+0x70>)
 8013c32:	429c      	cmp	r4, r3
 8013c34:	d101      	bne.n	8013c3a <_fflush_r+0x62>
 8013c36:	68ac      	ldr	r4, [r5, #8]
 8013c38:	e7df      	b.n	8013bfa <_fflush_r+0x22>
 8013c3a:	4b04      	ldr	r3, [pc, #16]	; (8013c4c <_fflush_r+0x74>)
 8013c3c:	429c      	cmp	r4, r3
 8013c3e:	bf08      	it	eq
 8013c40:	68ec      	ldreq	r4, [r5, #12]
 8013c42:	e7da      	b.n	8013bfa <_fflush_r+0x22>
 8013c44:	08016d3c 	.word	0x08016d3c
 8013c48:	08016d5c 	.word	0x08016d5c
 8013c4c:	08016d1c 	.word	0x08016d1c

08013c50 <_lseek_r>:
 8013c50:	b538      	push	{r3, r4, r5, lr}
 8013c52:	4d07      	ldr	r5, [pc, #28]	; (8013c70 <_lseek_r+0x20>)
 8013c54:	4604      	mov	r4, r0
 8013c56:	4608      	mov	r0, r1
 8013c58:	4611      	mov	r1, r2
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	602a      	str	r2, [r5, #0]
 8013c5e:	461a      	mov	r2, r3
 8013c60:	f7ed fb92 	bl	8001388 <_lseek>
 8013c64:	1c43      	adds	r3, r0, #1
 8013c66:	d102      	bne.n	8013c6e <_lseek_r+0x1e>
 8013c68:	682b      	ldr	r3, [r5, #0]
 8013c6a:	b103      	cbz	r3, 8013c6e <_lseek_r+0x1e>
 8013c6c:	6023      	str	r3, [r4, #0]
 8013c6e:	bd38      	pop	{r3, r4, r5, pc}
 8013c70:	240081e0 	.word	0x240081e0

08013c74 <__swhatbuf_r>:
 8013c74:	b570      	push	{r4, r5, r6, lr}
 8013c76:	460e      	mov	r6, r1
 8013c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c7c:	2900      	cmp	r1, #0
 8013c7e:	b096      	sub	sp, #88	; 0x58
 8013c80:	4614      	mov	r4, r2
 8013c82:	461d      	mov	r5, r3
 8013c84:	da08      	bge.n	8013c98 <__swhatbuf_r+0x24>
 8013c86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	602a      	str	r2, [r5, #0]
 8013c8e:	061a      	lsls	r2, r3, #24
 8013c90:	d410      	bmi.n	8013cb4 <__swhatbuf_r+0x40>
 8013c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c96:	e00e      	b.n	8013cb6 <__swhatbuf_r+0x42>
 8013c98:	466a      	mov	r2, sp
 8013c9a:	f000 f8b3 	bl	8013e04 <_fstat_r>
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	dbf1      	blt.n	8013c86 <__swhatbuf_r+0x12>
 8013ca2:	9a01      	ldr	r2, [sp, #4]
 8013ca4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013ca8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013cac:	425a      	negs	r2, r3
 8013cae:	415a      	adcs	r2, r3
 8013cb0:	602a      	str	r2, [r5, #0]
 8013cb2:	e7ee      	b.n	8013c92 <__swhatbuf_r+0x1e>
 8013cb4:	2340      	movs	r3, #64	; 0x40
 8013cb6:	2000      	movs	r0, #0
 8013cb8:	6023      	str	r3, [r4, #0]
 8013cba:	b016      	add	sp, #88	; 0x58
 8013cbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08013cc0 <__smakebuf_r>:
 8013cc0:	898b      	ldrh	r3, [r1, #12]
 8013cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013cc4:	079d      	lsls	r5, r3, #30
 8013cc6:	4606      	mov	r6, r0
 8013cc8:	460c      	mov	r4, r1
 8013cca:	d507      	bpl.n	8013cdc <__smakebuf_r+0x1c>
 8013ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013cd0:	6023      	str	r3, [r4, #0]
 8013cd2:	6123      	str	r3, [r4, #16]
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	6163      	str	r3, [r4, #20]
 8013cd8:	b002      	add	sp, #8
 8013cda:	bd70      	pop	{r4, r5, r6, pc}
 8013cdc:	ab01      	add	r3, sp, #4
 8013cde:	466a      	mov	r2, sp
 8013ce0:	f7ff ffc8 	bl	8013c74 <__swhatbuf_r>
 8013ce4:	9900      	ldr	r1, [sp, #0]
 8013ce6:	4605      	mov	r5, r0
 8013ce8:	4630      	mov	r0, r6
 8013cea:	f7ff fa4f 	bl	801318c <_malloc_r>
 8013cee:	b948      	cbnz	r0, 8013d04 <__smakebuf_r+0x44>
 8013cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cf4:	059a      	lsls	r2, r3, #22
 8013cf6:	d4ef      	bmi.n	8013cd8 <__smakebuf_r+0x18>
 8013cf8:	f023 0303 	bic.w	r3, r3, #3
 8013cfc:	f043 0302 	orr.w	r3, r3, #2
 8013d00:	81a3      	strh	r3, [r4, #12]
 8013d02:	e7e3      	b.n	8013ccc <__smakebuf_r+0xc>
 8013d04:	4b0d      	ldr	r3, [pc, #52]	; (8013d3c <__smakebuf_r+0x7c>)
 8013d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8013d08:	89a3      	ldrh	r3, [r4, #12]
 8013d0a:	6020      	str	r0, [r4, #0]
 8013d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d10:	81a3      	strh	r3, [r4, #12]
 8013d12:	9b00      	ldr	r3, [sp, #0]
 8013d14:	6163      	str	r3, [r4, #20]
 8013d16:	9b01      	ldr	r3, [sp, #4]
 8013d18:	6120      	str	r0, [r4, #16]
 8013d1a:	b15b      	cbz	r3, 8013d34 <__smakebuf_r+0x74>
 8013d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d20:	4630      	mov	r0, r6
 8013d22:	f000 f881 	bl	8013e28 <_isatty_r>
 8013d26:	b128      	cbz	r0, 8013d34 <__smakebuf_r+0x74>
 8013d28:	89a3      	ldrh	r3, [r4, #12]
 8013d2a:	f023 0303 	bic.w	r3, r3, #3
 8013d2e:	f043 0301 	orr.w	r3, r3, #1
 8013d32:	81a3      	strh	r3, [r4, #12]
 8013d34:	89a0      	ldrh	r0, [r4, #12]
 8013d36:	4305      	orrs	r5, r0
 8013d38:	81a5      	strh	r5, [r4, #12]
 8013d3a:	e7cd      	b.n	8013cd8 <__smakebuf_r+0x18>
 8013d3c:	08012ed9 	.word	0x08012ed9

08013d40 <__malloc_lock>:
 8013d40:	4801      	ldr	r0, [pc, #4]	; (8013d48 <__malloc_lock+0x8>)
 8013d42:	f7ff b9ad 	b.w	80130a0 <__retarget_lock_acquire_recursive>
 8013d46:	bf00      	nop
 8013d48:	240081e4 	.word	0x240081e4

08013d4c <__malloc_unlock>:
 8013d4c:	4801      	ldr	r0, [pc, #4]	; (8013d54 <__malloc_unlock+0x8>)
 8013d4e:	f7ff b9a8 	b.w	80130a2 <__retarget_lock_release_recursive>
 8013d52:	bf00      	nop
 8013d54:	240081e4 	.word	0x240081e4

08013d58 <_read_r>:
 8013d58:	b538      	push	{r3, r4, r5, lr}
 8013d5a:	4d07      	ldr	r5, [pc, #28]	; (8013d78 <_read_r+0x20>)
 8013d5c:	4604      	mov	r4, r0
 8013d5e:	4608      	mov	r0, r1
 8013d60:	4611      	mov	r1, r2
 8013d62:	2200      	movs	r2, #0
 8013d64:	602a      	str	r2, [r5, #0]
 8013d66:	461a      	mov	r2, r3
 8013d68:	f7ed faca 	bl	8001300 <_read>
 8013d6c:	1c43      	adds	r3, r0, #1
 8013d6e:	d102      	bne.n	8013d76 <_read_r+0x1e>
 8013d70:	682b      	ldr	r3, [r5, #0]
 8013d72:	b103      	cbz	r3, 8013d76 <_read_r+0x1e>
 8013d74:	6023      	str	r3, [r4, #0]
 8013d76:	bd38      	pop	{r3, r4, r5, pc}
 8013d78:	240081e0 	.word	0x240081e0

08013d7c <_raise_r>:
 8013d7c:	291f      	cmp	r1, #31
 8013d7e:	b538      	push	{r3, r4, r5, lr}
 8013d80:	4604      	mov	r4, r0
 8013d82:	460d      	mov	r5, r1
 8013d84:	d904      	bls.n	8013d90 <_raise_r+0x14>
 8013d86:	2316      	movs	r3, #22
 8013d88:	6003      	str	r3, [r0, #0]
 8013d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d8e:	bd38      	pop	{r3, r4, r5, pc}
 8013d90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013d92:	b112      	cbz	r2, 8013d9a <_raise_r+0x1e>
 8013d94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013d98:	b94b      	cbnz	r3, 8013dae <_raise_r+0x32>
 8013d9a:	4620      	mov	r0, r4
 8013d9c:	f000 f830 	bl	8013e00 <_getpid_r>
 8013da0:	462a      	mov	r2, r5
 8013da2:	4601      	mov	r1, r0
 8013da4:	4620      	mov	r0, r4
 8013da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013daa:	f000 b817 	b.w	8013ddc <_kill_r>
 8013dae:	2b01      	cmp	r3, #1
 8013db0:	d00a      	beq.n	8013dc8 <_raise_r+0x4c>
 8013db2:	1c59      	adds	r1, r3, #1
 8013db4:	d103      	bne.n	8013dbe <_raise_r+0x42>
 8013db6:	2316      	movs	r3, #22
 8013db8:	6003      	str	r3, [r0, #0]
 8013dba:	2001      	movs	r0, #1
 8013dbc:	e7e7      	b.n	8013d8e <_raise_r+0x12>
 8013dbe:	2400      	movs	r4, #0
 8013dc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	4798      	blx	r3
 8013dc8:	2000      	movs	r0, #0
 8013dca:	e7e0      	b.n	8013d8e <_raise_r+0x12>

08013dcc <raise>:
 8013dcc:	4b02      	ldr	r3, [pc, #8]	; (8013dd8 <raise+0xc>)
 8013dce:	4601      	mov	r1, r0
 8013dd0:	6818      	ldr	r0, [r3, #0]
 8013dd2:	f7ff bfd3 	b.w	8013d7c <_raise_r>
 8013dd6:	bf00      	nop
 8013dd8:	24000018 	.word	0x24000018

08013ddc <_kill_r>:
 8013ddc:	b538      	push	{r3, r4, r5, lr}
 8013dde:	4d07      	ldr	r5, [pc, #28]	; (8013dfc <_kill_r+0x20>)
 8013de0:	2300      	movs	r3, #0
 8013de2:	4604      	mov	r4, r0
 8013de4:	4608      	mov	r0, r1
 8013de6:	4611      	mov	r1, r2
 8013de8:	602b      	str	r3, [r5, #0]
 8013dea:	f7ed fa6d 	bl	80012c8 <_kill>
 8013dee:	1c43      	adds	r3, r0, #1
 8013df0:	d102      	bne.n	8013df8 <_kill_r+0x1c>
 8013df2:	682b      	ldr	r3, [r5, #0]
 8013df4:	b103      	cbz	r3, 8013df8 <_kill_r+0x1c>
 8013df6:	6023      	str	r3, [r4, #0]
 8013df8:	bd38      	pop	{r3, r4, r5, pc}
 8013dfa:	bf00      	nop
 8013dfc:	240081e0 	.word	0x240081e0

08013e00 <_getpid_r>:
 8013e00:	f7ed ba5a 	b.w	80012b8 <_getpid>

08013e04 <_fstat_r>:
 8013e04:	b538      	push	{r3, r4, r5, lr}
 8013e06:	4d07      	ldr	r5, [pc, #28]	; (8013e24 <_fstat_r+0x20>)
 8013e08:	2300      	movs	r3, #0
 8013e0a:	4604      	mov	r4, r0
 8013e0c:	4608      	mov	r0, r1
 8013e0e:	4611      	mov	r1, r2
 8013e10:	602b      	str	r3, [r5, #0]
 8013e12:	f7ed fa9e 	bl	8001352 <_fstat>
 8013e16:	1c43      	adds	r3, r0, #1
 8013e18:	d102      	bne.n	8013e20 <_fstat_r+0x1c>
 8013e1a:	682b      	ldr	r3, [r5, #0]
 8013e1c:	b103      	cbz	r3, 8013e20 <_fstat_r+0x1c>
 8013e1e:	6023      	str	r3, [r4, #0]
 8013e20:	bd38      	pop	{r3, r4, r5, pc}
 8013e22:	bf00      	nop
 8013e24:	240081e0 	.word	0x240081e0

08013e28 <_isatty_r>:
 8013e28:	b538      	push	{r3, r4, r5, lr}
 8013e2a:	4d06      	ldr	r5, [pc, #24]	; (8013e44 <_isatty_r+0x1c>)
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	4604      	mov	r4, r0
 8013e30:	4608      	mov	r0, r1
 8013e32:	602b      	str	r3, [r5, #0]
 8013e34:	f7ed fa9d 	bl	8001372 <_isatty>
 8013e38:	1c43      	adds	r3, r0, #1
 8013e3a:	d102      	bne.n	8013e42 <_isatty_r+0x1a>
 8013e3c:	682b      	ldr	r3, [r5, #0]
 8013e3e:	b103      	cbz	r3, 8013e42 <_isatty_r+0x1a>
 8013e40:	6023      	str	r3, [r4, #0]
 8013e42:	bd38      	pop	{r3, r4, r5, pc}
 8013e44:	240081e0 	.word	0x240081e0

08013e48 <_init>:
 8013e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e4a:	bf00      	nop
 8013e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e4e:	bc08      	pop	{r3}
 8013e50:	469e      	mov	lr, r3
 8013e52:	4770      	bx	lr

08013e54 <_fini>:
 8013e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e56:	bf00      	nop
 8013e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e5a:	bc08      	pop	{r3}
 8013e5c:	469e      	mov	lr, r3
 8013e5e:	4770      	bx	lr
